{
    "Added String dataformat docs to Gitbook": "diff --git a/camel-core/src/main/docs/string-dataformat.adoc b/camel-core/src/main/docs/string-dataformat.adoc\nnew file mode 100644\nindex 00000000000..2ccf0c835ca\n--- /dev/null\n+++ b/camel-core/src/main/docs/string-dataformat.adoc\n@@ -0,0 +1,56 @@\n+[[String-Dataformat]]\n+String Dataformat\n+~~~~~~~~~~~~~~~~~\n+\n+The String link:data-format.html[Data Format] is a textual based format\n+that supports encoding.\n+\n+[[String-Options]]\n+Options\n+^^^^^^^\n+\n+// dataformat options: START\n+The String Encoding dataformat supports 1 options which are listed below.\n+\n+\n+\n+{% raw %}\n+[width=\"100%\",cols=\"2s,1m,1m,6\",options=\"header\"]\n+|=======================================================================\n+| Name | Default | Java Type | Description\n+| charset |  | String | Sets an encoding to use. Will by default use the JVM platform default charset.\n+|=======================================================================\n+{% endraw %}\n+// dataformat options: END\n+\n+[[String-Marshal]]\n+Marshal\n+^^^^^^^\n+\n+In this example we marshal the file content to String object in UTF-8\n+encoding.\n+\n+[source,java]\n+----------------------------------------------------------------------\n+from(\"file://data.csv\").marshal().string(\"UTF-8\").to(\"jms://myqueue\");\n+----------------------------------------------------------------------\n+\n+[[String-Unmarshal]]\n+Unmarshal\n+^^^^^^^^^\n+\n+In this example we unmarshal the payload from the JMS queue to a String\n+object using UTF-8 encoding, before its processed by the newOrder\n+processor.\n+\n+[source,java]\n+-----------------------------------------------------------------------------\n+from(\"jms://queue/order\").unmarshal().string(\"UTF-8\").processRef(\"newOrder\");\n+-----------------------------------------------------------------------------\n+\n+[[String-Dependencies]]\n+Dependencies\n+^^^^^^^^^^^^\n+\n+This data format is provided in *camel-core* so no additional\n+dependencies is needed.",
    "Add docker system prune to inventory job .": "diff --git a/.test-infra/jenkins/job_Inventory.groovy b/.test-infra/jenkins/job_Inventory.groovy\nindex 32e0645cfd..fec1ba24ce 100644\n--- a/.test-infra/jenkins/job_Inventory.groovy\n+++ b/.test-infra/jenkins/job_Inventory.groovy\n@@ -35,7 +35,7 @@ nums.each {\n     // Allows triggering this build against pull requests.\n     commonJobProperties.enablePhraseTriggeringFromPullRequest(\n       delegate,\n-      'Machine Inventory',\n+      \"Machine Inventory ${machine}\",\n       \"Run Inventory ${machine}\")\n \n     parameters {\n@@ -66,6 +66,7 @@ nums.each {\n       shell('virtualenv -p python3.7 test37 && . ./test37/bin/activate && python --version && deactivate || echo \"python 3.7 not found\"')\n       shell('echo \"Maven home $MAVEN_HOME\"')\n       shell('env')\n+      shell('docker system prune --all --filter until=24h --force')\n     }\n   }\n }",
    "creating an RC branch": "diff --git a/changelog.html b/changelog.html\nindex f209df8e4d..60b7e19c11 100644\n--- a/changelog.html\n+++ b/changelog.html\n@@ -54,6 +54,14 @@ Upcoming changes</a>\n \n <!-- Record your changes in the trunk here. -->\n <div id=\"trunk\" style=\"display:none\"><!--=TRUNK-BEGIN=-->\n+<ul class=image>\n+  <li class=>\n+</ul>\n+</div><!--=TRUNK-END=-->\n+\n+<!-- these changes are controlled by the release process. DO NOT MODIFY -->\n+<div id=\"rc\" style=\"display:none;\"><!--=BEGIN=-->\n+<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>\n <ul class=image>\n   <li class=bug>\n     Spurious warnings in the log after deleting builds.\n@@ -66,12 +74,6 @@ Upcoming changes</a>\n     (<a href=\"https://issues.jenkins-ci.org/browse/JENKINS-25499\">issue 25499</a>,\n      <a href=\"https://issues.jenkins-ci.org/browse/JENKINS-25498\">issue 25498</a>)\n </ul>\n-</div><!--=TRUNK-END=-->\n-\n-<!-- these changes are controlled by the release process. DO NOT MODIFY -->\n-<div id=\"rc\" style=\"display:none;\"><!--=BEGIN=-->\n-<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>\n-<!--=RC-CHANGES=-->\n </div><!--=END=-->\n <h3><a name=v1.594>What's new in 1.594</a> (2014/12/14)</h3>\n <ul class=image>",
    "Added support for backup and HA for Windows by adding a separate file locking method and made DirectMappedLogBuffer HA friendly": "diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java\nindex a8c5f901f1f..36a6200ec0b 100644\n--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java\n+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java\n@@ -74,13 +74,6 @@ public class MasterUtil\n     \n     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )\n     {\n-        if ( Config.osIsWindows() )\n-        {\n-            throw new UnsupportedOperationException(\n-                \"Streaming store files live (as used in HA and backup) \"\n-                    + \"isn't supported on Windows due to limitations in OS/filesystem\" );\n-        }\n-\n         File baseDir = getBaseDir( graphDb );\n         XaDataSourceManager dsManager =\n                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();\ndiff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\nindex 7d55c553e4d..cb4acdf5391 100644\n--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\n+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java\n@@ -91,7 +91,6 @@ public class TestBackup\n     @Test\n     public void fullThenIncremental() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );\n         ServerInterface server = startServer( serverPath );\n         OnlineBackup backup = OnlineBackup.from( \"localhost\" );\n@@ -109,7 +108,6 @@ public class TestBackup\n     @Test\n     public void makeSureStoreIdIsEnforced() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         // Create data set X on server A\n         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );\n         ServerInterface server = startServer( serverPath );\ndiff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\nindex 4ee63dbf284..d067458ef8e 100644\n--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\n+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java\n@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.neo4j.graphdb.GraphDatabaseService;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.EmbeddedGraphDatabase;\n \n public class TestConfiguration\n@@ -85,7 +84,6 @@ public class TestConfiguration\n     @Test\n     public void testEnableDefaultsInConfig() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         GraphDatabaseService db = newDb( \"true\" );\n         OnlineBackup.from( \"localhost\" ).full( BACKUP_DIR );\n         db.shutdown();\n@@ -94,7 +92,6 @@ public class TestConfiguration\n     @Test\n     public void testEnableCustomPortInConfig() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         int customPort = 12345;\n         GraphDatabaseService db = newDb( \"port=\" + customPort );\n         try\ndiff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java\nindex 969983f97df..f3cc6d9055e 100644\n--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java\n+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java\n@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;\n import org.neo4j.graphdb.RelationshipType;\n import org.neo4j.helpers.collection.IteratorUtil;\n import org.neo4j.helpers.collection.MapUtil;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.ha.Broker;\n import org.neo4j.kernel.ha.BrokerFactory;\n \n@@ -393,7 +392,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void slaveCreateNode() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 3, 2, 2, 2, 0, 0 );\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );\n@@ -402,7 +400,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMultipleSlaves() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 1, 1, 0, 0 );\n         initializeDbs( 3 );\n         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );\n@@ -415,7 +412,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMasterFailure() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(\n                 getMasterShutdownDispatcher() ), 0 );\n@@ -429,7 +425,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testSlaveConstraintViolation() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 0, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -443,7 +438,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testMasterConstraintViolation() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 1, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -458,7 +452,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testGetRelationships() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 3, 2, 0, 0, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -475,7 +468,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNoTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 1, 0, 1, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -488,7 +480,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNodeDeleted() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 1, 0, 0, 0, 0, 0 );\n         initializeDbs( 1 );\n \n@@ -503,7 +494,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testDeadlock() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 2 );\n \n         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );\n@@ -526,7 +516,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void createNodeAndIndex() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 0, 1, 0, 1, 0 );\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.CreateNodeAndIndexJob( \"name\", \"Neo\" ), 0 );\n@@ -535,7 +524,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void indexingAndTwoSlaves() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 2 );\n         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( \"name\", \"Morpheus\" ) );\n         pullUpdates();\n@@ -548,7 +536,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testNewIndexFramework() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         setExpectedResults( 2, 0, 2, 0, 0, 2 );\n         initializeDbs( 2 );\n         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( \"users\",\n@@ -559,7 +546,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testLargeTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );\n     }\n@@ -567,7 +553,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testPullLargeTransaction() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );\n         pullUpdates();\n@@ -576,7 +561,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testLargeTransactionData() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );\n     }\n@@ -584,7 +568,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void testPullLargeTransactionData() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );\n         pullUpdates();\n@@ -593,7 +576,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         startUpMaster( MapUtil.stringMap() );\n         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );\n         addDb( MapUtil.stringMap() );\n@@ -604,7 +586,6 @@ public abstract class AbstractHaTest\n     @Test\n     public void canCopyInitialDbWithLuceneIndexes() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         int additionalNodeCount = 50;\n         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );\n         startUpMaster( MapUtil.stringMap() );\ndiff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java\nindex dec1cc8f691..06d100dbc64 100644\n--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java\n+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java\n@@ -29,7 +29,6 @@ import java.util.Map;\n import org.junit.After;\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.ha.StandaloneDatabase;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.EmbeddedGraphDatabase;\n \n public class MultiJvmTest extends AbstractHaTest\n@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest\n     @After\n     public void shutdownDbsAndVerify() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         shutdownDbs();\n \n         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );\ndiff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\nindex b9806cdc7ee..018208324b9 100644\n--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\n+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java\n@@ -28,7 +28,6 @@ import org.junit.After;\n import org.junit.Before;\n import org.neo4j.ha.LocalhostZooKeeperCluster;\n import org.neo4j.ha.StandaloneDatabase;\n-import org.neo4j.kernel.Config;\n \n public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n {\n@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n     @Before\n     public void startZooKeeperCluster() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );\n         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );\n     }\n@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest\n     @After\n     public void shutdownZooKeeperCluster()\n     {\n-        if ( Config.osIsWindows() ) return;\n         zooKeeperCluster.shutdown();\n     }\n }\ndiff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java\nindex 544c2db3373..b5eb6dead4e 100644\n--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java\n+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java\n@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest\n     @After\n     public void verifyAndShutdownDbs()\n     {\n-        if ( Config.osIsWindows() ) return;\n         try\n         {\n             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );\n@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest\n     @Test\n     public void testMixingEntitiesFromWrongDbs() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n-\n         initializeDbs( 1 );\n         GraphDatabaseService haDb1 = haDbs.get( 0 );\n         GraphDatabaseService mDb = master.getGraphDb();\ndiff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\nindex 61184920a50..e48248e2cf2 100644\n--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n@@ -25,7 +25,6 @@ import org.junit.Test;\n import org.neo4j.com.Protocol;\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.helpers.Pair;\n-import org.neo4j.kernel.Config;\n import org.neo4j.kernel.HighlyAvailableGraphDatabase;\n import org.neo4j.kernel.ha.AbstractBroker;\n import org.neo4j.kernel.ha.Broker;\n@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest\n     @Test\n     public void assertThatNettyIsUsed() throws Exception\n     {\n-        if ( Config.osIsWindows() ) return;\n         initializeDbs( 1 );\n         assertTrue(\n                 \"Slave Broker is not a client\",\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\nindex 550752cf419..7b6805b6b49 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java\n@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;\n import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;\n import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;\n import org.neo4j.kernel.impl.core.RelationshipTypeCreator;\n+import org.neo4j.kernel.impl.nioneo.store.FileLock;\n import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;\n import org.neo4j.kernel.impl.nioneo.store.IdGenerator;\n import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;\n@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;\n import org.neo4j.kernel.impl.transaction.LockManager;\n import org.neo4j.kernel.impl.transaction.TxFinishHook;\n import org.neo4j.kernel.impl.transaction.TxModule;\n+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;\n+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;\n \n@@ -139,6 +142,17 @@ public class CommonFactories\n             {\n                 return new RandomAccessFile( fileName, mode ).getChannel();\n             }\n+            \n+            @Override\n+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException\n+            {\n+                return FileLock.getOsSpecificFileLock( fileName, channel );\n+            }\n         };\n     }\n+    \n+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )\n+    {\n+        return DefaultLogBufferFactory.create( config );\n+    }\n }\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java\nindex 5f18875c8d9..abf36792d62 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java\n@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;\n import org.neo4j.kernel.impl.persistence.PersistenceModule;\n import org.neo4j.kernel.impl.transaction.LockManager;\n import org.neo4j.kernel.impl.transaction.TxModule;\n+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;\n import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;\n \n /**\n@@ -111,7 +112,8 @@ public class Config\n             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,\n             TxEventSyncHookFactory txSyncHookFactory,\n             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,\n-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )\n+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,\n+            LogBufferFactory logBufferFactory )\n     {\n         this.storeDir = storeDir;\n         this.inputParams = inputParams;\n@@ -129,6 +131,7 @@ public class Config\n         this.syncHookFactory = txSyncHookFactory;\n         this.persistenceModule = new PersistenceModule();\n         this.cacheManager = new AdaptiveCacheManager();\n+        params.put( LogBufferFactory.class, logBufferFactory );\n         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,\n                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),\n                 readOnly );\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\nindex e48d8343e80..7c6e974f46d 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java\n@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl\n         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,\n                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,\n                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),\n-                lastCommittedTxIdSetter, fileSystem );\n+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );\n         graphDbInstance = new GraphDbInstance( storeDir, true, config );\n         this.msgLog = StringLogger.getLogger( storeDir );\n         this.graphDbService = graphDbService;\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\nindex 53e62b027d7..1ad4282b7b5 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java\n@@ -23,7 +23,6 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n-import java.nio.channels.FileLock;\n import java.nio.channels.OverlappingFileLockException;\n import java.util.Map;\n import java.util.logging.Logger;\n@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore\n         {\n             if ( (!readOnly || backupSlave) && grabFileLock )\n             {\n-                this.fileLock = this.fileChannel.tryLock();\n+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );\n                 if ( fileLock == null )\n                 {\n                     throw new IllegalStateException( \"Unable to lock store [\"\n@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore\n                     fileChannel.write( buffer );\n                     fileChannel.truncate( fileChannel.position() );\n                     fileChannel.force( false );\n-                    fileLock.release();\n+                    if ( fileLock != null )\n+                    {\n+                        fileLock.release();\n+                    }\n                     fileChannel.close();\n                     fileChannel = null;\n                     success = true;\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java\nnew file mode 100644\nindex 00000000000..62f3ef72bb7\n--- /dev/null\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java\n@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) 2002-2011 \"Neo Technology,\"\n+ * Network Engine for Objects in Lund AB [http://neotechnology.com]\n+ *\n+ * This file is part of Neo4j.\n+ *\n+ * Neo4j is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.neo4j.kernel.impl.nioneo.store;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.OverlappingFileLockException;\n+\n+import org.neo4j.kernel.Config;\n+\n+public abstract class FileLock\n+{\n+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )\n+    {\n+        if ( lock == null )\n+        {\n+            return null;\n+        }\n+        \n+        return new FileLock()\n+        {\n+            @Override\n+            public void release() throws IOException\n+            {\n+                lock.release();\n+            }\n+        };\n+    }\n+    \n+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )\n+            throws IOException\n+    {\n+        if ( Config.osIsWindows() )\n+        {\n+            // Only grab one lock, say for the \"neostore\" file\n+            if ( fileName.endsWith( \"neostore\" ) )\n+            {\n+                return getWindowsFileLock( new File( fileName ).getParentFile() );\n+            }\n+            \n+            // For the rest just return placebo locks\n+            return new PlaceboFileLock();\n+        }\n+        else\n+        {\n+            return wrapOrNull( channel.tryLock() );\n+        }\n+    }\n+    \n+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException\n+    {\n+        File lockFile = new File( storeDir, \"lock\" );\n+        if ( !lockFile.exists() )\n+        {\n+            if ( !lockFile.createNewFile() )\n+            {\n+                throw new IOException( \"Couldn't create lock file \" + lockFile.getAbsolutePath() );\n+            }\n+        }\n+        FileChannel fileChannel = new RandomAccessFile( lockFile, \"rw\" ).getChannel();\n+        java.nio.channels.FileLock fileChannelLock = null;\n+        try\n+        {\n+            fileChannelLock = fileChannel.tryLock(); \n+        }\n+        catch ( OverlappingFileLockException e )\n+        {\n+            // OK, let fileChannelLock continue to be null and we'll deal with it below\n+        }\n+        if ( fileChannelLock == null )\n+        {\n+            fileChannel.close();\n+            return null;\n+        }\n+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );\n+    }\n+\n+    public abstract void release() throws IOException;\n+    \n+    private static class PlaceboFileLock extends FileLock\n+    {\n+        @Override\n+        public void release() throws IOException\n+        {\n+        }\n+    }\n+    \n+    private static class WindowsFileLock extends FileLock\n+    {\n+        private final File lockFile;\n+        private final FileChannel fileChannel;\n+        private final java.nio.channels.FileLock fileChannelLock;\n+\n+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )\n+                throws IOException\n+        {\n+            this.lockFile = lockFile;\n+            this.fileChannel = fileChannel;\n+            this.fileChannelLock",
    "Remove unused import": "diff --git a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java\nindex fa7cacc..9ab237f 100644\n--- a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java\n+++ b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java\n@@ -28,13 +28,8 @@ import net.wequick.small.webkit.WebActivity;\n import net.wequick.small.webkit.WebViewPool;\n \n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.util.Properties;\n \n /**\n  * Created by galen on 15/1/28.",
    "Implement batchPoll": "diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java\nindex 7ec87b722..d912d12c1 100644\n--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java\n+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java\n@@ -15,6 +15,7 @@ public class MetadataClient extends ClientBase {\n \n     public MetadataClient(String address, int port) {\n         super(address, port);\n+        this.stub = MetadataServiceGrpc.newBlockingStub(this.channel);\n     }\n \n     /**\ndiff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java\nindex b9b155cd7..d9b170704 100644\n--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java\n+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java\n@@ -1,6 +1,8 @@\n package com.netflix.conductor.client.grpc;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n import com.netflix.conductor.common.metadata.tasks.Task;\n import com.netflix.conductor.common.metadata.tasks.TaskExecLog;\n import com.netflix.conductor.common.metadata.tasks.TaskResult;\n@@ -9,8 +11,7 @@ import com.netflix.conductor.grpc.TaskServicePb;\n import com.netflix.conductor.proto.TaskPb;\n import org.apache.commons.lang3.StringUtils;\n \n-import java.util.List;\n-import java.util.Optional;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n public class TaskClient extends ClientBase {\n@@ -44,6 +45,46 @@ public class TaskClient extends ClientBase {\n         return protoMapper.fromProto(task);\n     }\n \n+    /**\n+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.\n+     *\n+     * @param taskType             Type of task to poll for\n+     * @param workerId             Name of the client worker. Used for logging.\n+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.\n+     * @param timeoutInMillisecond Long poll wait timeout.\n+     * @return List of tasks awaiting to be executed.\n+     */\n+    public List<Task> batchPollTasksByTaskType(String taskType, String workerId, int count, int timeoutInMillisecond) {\n+        return Lists.newArrayList(batchPollTasksByTaskTypeAsync(taskType, workerId, count, timeoutInMillisecond));\n+    }\n+\n+    /**\n+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.\n+     * Returns an iterator that streams tasks as they become available through GRPC.\n+     *\n+     * @param taskType             Type of task to poll for\n+     * @param workerId             Name of the client worker. Used for logging.\n+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.\n+     * @param timeoutInMillisecond Long poll wait timeout.\n+     * @return Iterator of tasks awaiting to be executed.\n+     */\n+    public Iterator<Task> batchPollTasksByTaskTypeAsync(String taskType, String workerId, int count, int timeoutInMillisecond) {\n+        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), \"Task type cannot be blank\");\n+        Preconditions.checkArgument(StringUtils.isNotBlank(workerId), \"Worker id cannot be blank\");\n+        Preconditions.checkArgument(count > 0, \"Count must be greater than 0\");\n+\n+        Iterator<TaskPb.Task> it = stub.batchPoll(\n+                TaskServicePb.BatchPollRequest.newBuilder()\n+                        .setTaskType(taskType)\n+                        .setWorkerId(workerId)\n+                        .setCount(count)\n+                        .setTimeout(timeoutInMillisecond)\n+                        .build()\n+        );\n+\n+        return Iterators.transform(it, protoMapper::fromProto);\n+    }\n+\n     /**\n      * Retrieve pending tasks by type\n      *\ndiff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java\nindex 3ae78d3d0..f32e996a1 100644\n--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java\n+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java\n@@ -35,6 +35,7 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {\n \n     private static final int MAX_TASK_COUNT = 100;\n     private static final int POLL_TIMEOUT_MS = 100;\n+    private static final int MAX_POLL_TIMEOUT_MS = 5000;\n \n     private final ExecutionService taskService;\n     private final QueueDAO queues;\n@@ -60,41 +61,24 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {\n     }\n \n     @Override\n-    public StreamObserver<TaskServicePb.StreamingPollRequest> pollStream(StreamObserver<TaskPb.Task> observer) {\n-        final ServerCallStreamObserver<TaskPb.Task> responseObserver =\n-                (ServerCallStreamObserver<TaskPb.Task>) observer;\n-\n-        return new StreamObserver<TaskServicePb.StreamingPollRequest>() {\n-            @Override\n-            public void onNext(TaskServicePb.StreamingPollRequest req) {\n-                try {\n-                    for (TaskResultPb.TaskResult result : req.getCompletedList()) {\n-                        TaskResult task = protoMapper.fromProto(result);\n-                        taskService.updateTask(task);\n-                    }\n-\n-                    List<Task> newTasks = taskService.poll(\n-                            req.getTaskType(), req.getWorkerId(), req.getDomain(),\n-                            req.getCapacity(), POLL_TIMEOUT_MS);\n-\n-                    for (Task task : newTasks) {\n-                        responseObserver.onNext(protoMapper.toProto(task));\n-                    }\n-                } catch (Exception e) {\n-                    grpcHelper.onError(observer, e);\n-                }\n-            }\n-\n-            @Override\n-            public void onError(Throwable t) {\n-                responseObserver.onError(t);\n-            }\n+    public void batchPoll(TaskServicePb.BatchPollRequest req, StreamObserver<TaskPb.Task> response) {\n+        final int count = (req.getCount() == 0) ? 1 : req.getCount();\n+        final int timeout = (req.getTimeout() == 0) ? POLL_TIMEOUT_MS : req.getTimeout();\n+\n+        if (timeout > MAX_POLL_TIMEOUT_MS) {\n+            response.onError(Status.INVALID_ARGUMENT\n+                    .withDescription(\"longpoll timeout cannot be longer than \" + MAX_POLL_TIMEOUT_MS + \"ms\")\n+                    .asRuntimeException()\n+            );\n+            return;\n+        }\n \n-            @Override\n-            public void onCompleted() {\n-                responseObserver.onCompleted();\n-            }\n-        };\n+        try {\n+            List<Task> polledTasks = taskService.poll(req.getTaskType(), req.getWorkerId(), req.getDomain(), count, timeout);\n+            polledTasks.stream().map(protoMapper::toProto).forEach(response::onNext);\n+        } catch (Exception e) {\n+            grpcHelper.onError(response, e);\n+        }\n     }\n \n     @Override\ndiff --git a/grpc/src/main/proto/grpc/task_service.proto b/grpc/src/main/proto/grpc/task_service.proto\nindex 1dc98c54a..1caef0e10 100644\n--- a/grpc/src/main/proto/grpc/task_service.proto\n+++ b/grpc/src/main/proto/grpc/task_service.proto\n@@ -14,8 +14,8 @@ service TaskService {\n     // GET /poll/{tasktype}\n     rpc Poll(PollRequest) returns (conductor.proto.Task);\n \n-    // GRPC-only\n-    rpc PollStream(stream StreamingPollRequest) returns (stream conductor.proto.Task);\n+    // /poll/batch/{tasktype}\n+    rpc BatchPoll(BatchPollRequest) returns (stream conductor.proto.Task);\n \n     // GET /in_progress/{tasktype}\n     rpc GetTasksInProgress(TasksInProgressRequest) returns (TasksInProgressResponse);\n@@ -57,12 +57,12 @@ message PollRequest {\n     string domain = 3;\n }\n \n-message",
    "Changed the way md5 was checked . . * Due to plugins zip being recreated on every server restart , the md5 changed when the server was migrated to a new machine .": "diff --git a/base/src/com/thoughtworks/go/util/FileDigester.java b/base/src/com/thoughtworks/go/util/FileDigester.java\nindex a49f6b6d42..c8f2b95650 100644\n--- a/base/src/com/thoughtworks/go/util/FileDigester.java\n+++ b/base/src/com/thoughtworks/go/util/FileDigester.java\n@@ -16,18 +16,15 @@\n \n package com.thoughtworks.go.util;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n-\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.comparator.NameFileComparator;\n import org.apache.commons.io.output.NullOutputStream;\n \n-import static com.thoughtworks.go.util.ExceptionUtils.bomb;\n+import java.io.*;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n \n public class FileDigester {\n     private final InputStream input;\n@@ -75,6 +72,19 @@ public class FileDigester {\n         }\n     }\n \n+    public static String md5DigestOfFolderContent(File directory) throws IOException {\n+        File[] files = directory.listFiles();\n+        Arrays.sort(files, NameFileComparator.NAME_COMPARATOR);\n+        StringBuilder md5 = new StringBuilder();\n+        for (File file : files) {\n+            if (file.isDirectory())\n+                md5.append(md5DigestOfFolderContent(file));\n+            else\n+                md5.append(md5DigestOfFile(file));\n+        }\n+        return md5DigestOfStream(new ByteArrayInputStream(md5.toString().getBytes(CharEncoding.UTF_8)));\n+    }\n+\n     public static String md5DigestOfStream(InputStream stream) throws IOException {\n         return copyAndDigest(stream, new NullOutputStream());\n     }\ndiff --git a/base/test/com/thoughtworks/go/util/FileDigesterTest.java b/base/test/com/thoughtworks/go/util/FileDigesterTest.java\nindex 62de31eddb..17bd7f4819 100644\n--- a/base/test/com/thoughtworks/go/util/FileDigesterTest.java\n+++ b/base/test/com/thoughtworks/go/util/FileDigesterTest.java\n@@ -16,7 +16,11 @@\n \n package com.thoughtworks.go.util;\n \n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n import java.io.File;\n import java.io.IOException;\n@@ -26,20 +30,45 @@ import static org.junit.Assert.assertThat;\n import static org.junit.Assert.fail;\n \n public class FileDigesterTest {\n-    private File createFileWithSampleData() throws IOException {\n-        File tempFile = TestFileUtil.createTempFile(\"test.txt\");\n-        FileUtil.writeContentToFile(\"sample data\", tempFile);\n-        return tempFile;\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        temporaryFolder.create();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        temporaryFolder.delete();\n     }\n \n     @Test\n     public void shouldReturnSameMd5ForSameData() throws Exception {\n-        String digest1 = FileDigester.md5DigestOfFile(createFileWithSampleData());\n+        File fileWithSampleData = createFileWithSampleData();\n+        String digest1 = FileDigester.md5DigestOfFile(fileWithSampleData);\n+        assertThat(\"md5 should not be empty\", digest1.length() > 0, is(true));\n+        String digest2 = FileDigester.md5DigestOfFile(fileWithSampleData);\n+        assertThat(digest1, is(digest2));\n+    }\n+\n+    @Test\n+    public void shouldReturnSameMd5ForFolderContents() throws Exception {\n+        File folderWithSampleData = createFolderWithSampleData();\n+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);\n         assertThat(\"md5 should not be empty\", digest1.length() > 0, is(true));\n-        String digest2 = FileDigester.md5DigestOfFile(createFileWithSampleData());\n+        String digest2 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);\n         assertThat(digest1, is(digest2));\n     }\n \n+    @Test\n+    public void shouldReturnConsistentMd5BySortingTheFileList() throws Exception {\n+        File folderWithSampleData = createFolderWithSampleData();\n+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);\n+        assertThat(\"md5 should not be empty\", digest1.length() > 0, is(true));\n+        assertThat(digest1, is(\"FJ9Q0KO4KE5ukH6Y7r1FIQ==\"));\n+    }\n+\n     @Test\n     public void shouldThrowExceptionIfITryToGetMd5WithoutDigestingFile() {\n         FileDigester fileDigester = new FileDigester(null, null);\n@@ -49,4 +78,20 @@ public class FileDigesterTest {\n         } catch (Exception ignored) {\n         }\n     }\n+\n+    private File createFileWithSampleData() throws IOException {\n+        File tempFile = temporaryFolder.newFile(\"test.txt\");\n+        FileUtil.writeContentToFile(\"sample data\", tempFile);\n+        return tempFile;\n+    }\n+\n+    private File createFolderWithSampleData() throws IOException {\n+        File firstPlugin = temporaryFolder.newFile(\"first-plugin\");\n+        File secondPlugin = temporaryFolder.newFile(\"second-plugin\");\n+        File thirdPlugin = temporaryFolder.newFile(\"third-plugin\");\n+        FileUtil.writeContentToFile(\"sample plugin for first plugin\", firstPlugin);\n+        FileUtil.writeContentToFile(\"sample plugin for third plugin\", secondPlugin);\n+        FileUtil.writeContentToFile(\"sample plugin for second plugin\", thirdPlugin);\n+        return temporaryFolder.getRoot();\n+    }\n }\ndiff --git a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java\nindex c19ceae5b6..7975597a5d 100644\n--- a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java\n+++ b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java\n@@ -22,16 +22,18 @@ import com.thoughtworks.go.util.ZipUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n+import java.io.BufferedWriter;\n import java.io.File;\n-import java.io.IOException;\n+import java.io.FileWriter;\n \n import static com.thoughtworks.go.util.FileDigester.md5DigestOfFile;\n+import static com.thoughtworks.go.util.FileDigester.md5DigestOfFolderContent;\n \n @Component\n public class PluginsZip {\n     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PluginsZip.class);\n     private ZipUtil zipUtil;\n-    private String md5DigestOfFile;\n+    private String md5DigestOfPlugins;\n     private final File destZipFile;\n     private final File bundledPlugins;\n     private final File externalPlugins;\n@@ -53,16 +55,30 @@ public class PluginsZip {\n         try {\n             ZipBuilder zipBuilder = zipUtil.zipContentsOfMultipleFolders(destZipFile, true);\n             zipBuilder.add(\"bundled\", bundledPlugins).add(\"external\", externalPlugins).done();\n-            md5DigestOfFile = md5DigestOfFile(destZipFile);\n+            md5DigestOfPlugins = computeMd5DigestOfPlugins();\n         } catch (Exception e) {\n             LOG.error(\"Could not create zip of plugins for agent to download.\", e);\n         }\n     }\n \n-    public String md5() throws IOException {\n-        if (md5DigestOfFile == null) {\n-            return md5DigestOfFile(destZipFile);\n+    public String md5() {\n+        if (md5DigestOfPlugins == null) {\n+            return computeMd5DigestOfPlugins();\n+        }\n+        return md5DigestOfPlugins;\n+    }\n+\n+    private String computeMd5DigestOfPlugins() {\n+        try {\n+            String digestOfBundledFolder = md5DigestOfFolderContent(bundledPlugins);\n+            String digestOfExternalFolder = md5DigestOfFolderContent(externalPlugins);\n+            File tempFileToStoreMd5 = File.createTempFile(\"tempFileToStoreMd5\", \".txt\");\n+            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileToStoreMd5));\n+            writer.write(String.format(\"digestOfBundledFolder:\" + digestOfBundledFolder + \"\\tdigestOfExternalFolder:\" + digestOfExternalFolder));\n+            writer.close();\n+            return md5DigestOfFile(tempFileToStoreMd5);\n+        } catch (Exception e) {\n+            throw new RuntimeException(String.format(\"Could not compute md5 of plugins. Exception occurred: %s\", e.getStackTrace()));\n         }\n-        return md5DigestOfFile;\n     }\n }\ndiff --git a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java\nindex ba52e244b7..40a2bdcb3c 100644\n--- a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java\n+++ b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java\n@@ -27,7 +27,6 @@ import org.junit.rules.ExpectedException;\n import org.junit.rules.TemporaryFolder;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.util.zip.ZipFile;\n \n import static com.thoughtworks.go.util.SystemEnvironment.*;\n@@ -112,8 +111,8 @@ public class PluginsZipTest {\n \n     @Test\n     public void shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile() throws Exception {\n-        expectedException.expect(FileNotFoundException.class);\n-        expectedException.expectMessage(containsString(\"go-plugins-all.zip (No such file or directory)\"));\n+        expectedException.expect(RuntimeException.class);\n+        expectedException.expectMessage(containsString(\"Could not compute md5 of plugins. Exception occurred:\"));\n \n         temporaryFolder.delete();\n         pluginsZip.md5();",
    "Remove references to SupportData everywhere except in CcProtoAspect . . RELNOTES : None . . PiperOrigin - RevId : 222216840": "diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java\nindex 543bf64e8c..36c0b8d222 100644\n--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java\n+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java\n@@ -292,9 +292,9 @@ public class ProtoCommon {\n     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();\n     ImmutableList<Artifact> srcs = ruleContext.getPrerequisiteArtifacts(\"srcs\", TARGET).list();\n     if (srcs.isEmpty()) {\n-      for (ProtoSupportDataProvider provider :\n-          ruleContext.getPrerequisites(\"deps\", TARGET, ProtoSupportDataProvider.class)) {\n-        result.addTransitive(provider.getSupportData().getProtosInDirectDeps());\n+      for (ProtoSourcesProvider provider :\n+          ruleContext.getPrerequisites(\"deps\", TARGET, ProtoSourcesProvider.class)) {\n+        result.addTransitive(provider.getProtosInDirectDeps());\n       }\n     } else {\n       for (ProtoSourcesProvider provider :\n@@ -312,9 +312,9 @@ public class ProtoCommon {\n   @Nullable\n   public static NestedSet<Artifact> computeProtosInExportedDeps(RuleContext ruleContext) {\n     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();\n-    for (ProtoSupportDataProvider provider :\n-        ruleContext.getPrerequisites(\"exports\", TARGET, ProtoSupportDataProvider.class)) {\n-      result.addTransitive(provider.getSupportData().getProtosInDirectDeps());\n+    for (ProtoSourcesProvider provider :\n+        ruleContext.getPrerequisites(\"exports\", TARGET, ProtoSourcesProvider.class)) {\n+      result.addTransitive(provider.getProtosInDirectDeps());\n     }\n     return result.build();\n   }",
    "Removed pointless platform - specific dists": "diff --git a/.travis.yml b/.travis.yml\nindex 171280c26..f0586c145 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -13,7 +13,7 @@ deploy:\n     api_key:\n       secure: Cv5wFtWt62/A24EvSEQvMow7gKPbZ3oATEFPuSghhB2TQz1dA40Zee3Qvk4LFlpLrhYo4K0ZSczCZRGpR+hCd8+Dpww52bheYEvWuh3ZQfvu/fXtEx2j5PwP1qMpmIgSxETV/gkD7l9FImdh0VzktYiAvQfmi0bEocG9/D4QwjFpNat7iwBdcMiw1MvAygpdIWRsjiw0RKlB2mWarmoHhQ7Gu7qlU3j50uaEvcrtmU0pBUPggNQwQRv32i9NPvNFxrqqlUjDLIS8JFea99zCkp8BwYqbEvBIMzd+Qip1/stLJJA3+cDUClbsDtg8rAVetzpOrdLEEBmqShFe5MDl2yEHcsgpN9CFsyTaUfvB3P3rVjizvycMm42IsUkXQiarm5xTQ/TIA8Rd8AHiSKuweNCg1Fd5SFaRtKy8JVLXuxyfUccmyje6hhz2L4lS2Wfj3mAG7sqZUCXhWP79EKdGkiPOjKv4CwXEKmuH3BMVqPlNUZJr9Eg3sV1FG0h2l+MVOOnR635qdUbb49sYojYxVruMLX0BH1c4ZCu230m8CUoWA1Em1QNI75ya7+9Y5T6AsgWDVpBvdUo9fWNbdp+VQ0GskFQsJD5wtnxbcbHeFiERAgGBm7z6qt9u9LrQpBH+dsW52ADvYsu3L4nQEa+sdMHwTTwmGY+iUvsxu0DqxGg=\n     file:\n-    - desktop/build/libs/desktop-release.jar\n+    - desktop/build/libs/Mindustry.jar\n     - server/build/libs/server-release.jar\n     on:\n       repo: Anuken/Mindustry\ndiff --git a/README.md b/README.md\nindex 791a99452..b0ec7c49e 100644\n--- a/README.md\n+++ b/README.md\n@@ -36,7 +36,7 @@ If the terminal returns `Permission denied` or `Command not found` on Mac/Linux,\n ---\n \n Gradle may take up to several minutes to download files. Be patient. <br>\n-After building, the output .JAR file should be in `/desktop/build/libs/desktop-release.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.\n+After building, the output .JAR file should be in `/desktop/build/libs/Mindustry.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.\n \n ### Downloads\n \ndiff --git a/desktop/build.gradle b/desktop/build.gradle\nindex 26392656d..db32ac459 100644\n--- a/desktop/build.gradle\n+++ b/desktop/build.gradle\n@@ -32,35 +32,32 @@ task run(dependsOn: classes, type: JavaExec){\n     }\n }\n \n-[\"Windows\", \"Linux\", \"Mac\", \"All\"].each{ target ->\n-    task \"dist$target\"(type: Jar, dependsOn: classes){\n-        from files(sourceSets.main.output.classesDirs)\n-        from files(sourceSets.main.output.resourcesDir)\n-        from {configurations.compile.collect {zipTree(it)}}\n-        from files(project.assetsDir)\n-\n-        if(target.contains(\"windows\")) exclude('**.so', \"**.dylib\")\n-        if(target == \"mac\") exclude('**.so', \"**.dll\")\n-        if(target == \"linux\") exclude('**.dll', \"**.dylib\")\n-        archiveName = \"$appName-${target}.jar\"\n-\n-        manifest{\n-            attributes 'Main-Class': project.mainClassName\n-        }\n+\n+task dist(type: Jar, dependsOn: classes){\n+    from files(sourceSets.main.output.classesDirs)\n+    from files(sourceSets.main.output.resourcesDir)\n+    from {configurations.compile.collect {zipTree(it)}}\n+    from files(project.assetsDir)\n+\n+    archiveName = \"${appName}.jar\"\n+\n+    manifest{\n+        attributes 'Main-Class': project.mainClassName\n     }\n }\n \n+\n PackrConfig.Platform.values().each{ platform ->\n     task \"packr${platform.toString()}\"{\n         def platformName = platform.toString().replace('64', '').replace('32', '').replace('MacOS', 'Mac')\n \n-        dependsOn \"dist$platformName\"\n+        dependsOn dist\n \n         doLast{\n             copy{\n                 into \"build/packr/\"\n-                rename(\"$appName-${platformName}.jar\", \"desktop.jar\")\n-                from \"build/libs/$appName-${platformName}.jar\"\n+                rename(\"${appName}.jar\", \"desktop.jar\")\n+                from \"build/libs/${appName}.jar\"\n             }\n \n             delete{\n@@ -75,8 +72,8 @@ PackrConfig.Platform.values().each{ platform ->\n \n                 copy{\n                     into \"build/packr/output/jre\"\n-                    rename(\"$appName-${platformName}.jar\", \"desktop.jar\")\n-                    from \"build/libs/$appName-${platformName}.jar\"\n+                    rename(\"${appName}.jar\", \"desktop.jar\")\n+                    from \"build/libs/${appName}.jar\"\n                 }\n             }else{\n                 def config = new PackrConfig()",
    "Add support for H2 \\' s new enum types": "diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java\nindex d8a8b3bac7..d7de792531 100644\n--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java\n@@ -48,6 +48,7 @@ import static org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;\n import static org.jooq.util.h2.information_schema.tables.Tables.TABLES;\n import static org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;\n \n+import java.io.StringReader;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -62,6 +63,7 @@ import org.jooq.Result;\n import org.jooq.SQLDialect;\n import org.jooq.SortOrder;\n import org.jooq.impl.DSL;\n+import org.jooq.tools.csv.CSVReader;\n import org.jooq.util.AbstractDatabase;\n import org.jooq.util.AbstractIndexDefinition;\n import org.jooq.util.ArrayDefinition;\n@@ -69,6 +71,7 @@ import org.jooq.util.CatalogDefinition;\n import org.jooq.util.ColumnDefinition;\n import org.jooq.util.DefaultCheckConstraintDefinition;\n import org.jooq.util.DefaultDataTypeDefinition;\n+import org.jooq.util.DefaultEnumDefinition;\n import org.jooq.util.DefaultIndexColumnDefinition;\n import org.jooq.util.DefaultRelations;\n import org.jooq.util.DefaultSequenceDefinition;\n@@ -463,6 +466,61 @@ public class H2Database extends AbstractDatabase {\n     @Override\n     protected List<EnumDefinition> getEnums0() throws SQLException {\n         List<EnumDefinition> result = new ArrayList<EnumDefinition>();\n+\n+        Result<Record4<String, String, String, String>> records = create()\n+            .select(\n+                Columns.TABLE_SCHEMA,\n+                Columns.TABLE_NAME,\n+                Columns.COLUMN_NAME,\n+                Columns.COLUMN_TYPE)\n+            .from(COLUMNS)\n+            .where(\n+                Columns.COLUMN_TYPE.like(\"ENUM(%)%\").and(\n+                Columns.TABLE_SCHEMA.in(getInputSchemata())))\n+            .orderBy(\n+                Columns.TABLE_SCHEMA.asc(),\n+                Columns.TABLE_NAME.asc(),\n+                Columns.COLUMN_NAME.asc())\n+            .fetch();\n+\n+        for (Record record : records) {\n+            SchemaDefinition schema = getSchema(record.get(Columns.TABLE_SCHEMA));\n+\n+            String table = record.get(Columns.TABLE_NAME);\n+            String column = record.get(Columns.COLUMN_NAME);\n+            String name = table + \"_\" + column;\n+            String columnType = record.get(Columns.COLUMN_TYPE);\n+\n+            // [#1237] Don't generate enum classes for columns in MySQL tables\n+            // that are excluded from code generation\n+            TableDefinition tableDefinition = getTable(schema, table);\n+            if (tableDefinition != null) {\n+                ColumnDefinition columnDefinition = tableDefinition.getColumn(column);\n+\n+                if (columnDefinition != null) {\n+\n+                    // [#1137] Avoid generating enum classes for enum types that\n+                    // are explicitly forced to another type\n+                    if (getConfiguredForcedType(columnDefinition, columnDefinition.getType()) == null) {\n+                        DefaultEnumDefinition definition = new DefaultEnumDefinition(schema, name, \"\");\n+\n+                        CSVReader reader = new CSVReader(\n+                            new StringReader(columnType.replaceAll(\"(^enum\\\\()|(\\\\).*$)\", \"\"))\n+                           ,','  // Separator\n+                           ,'\\'' // Quote character\n+                           ,true // Strict quotes\n+                        );\n+\n+                        for (String string : reader.next()) {\n+                            definition.addLiteral(string);\n+                        }\n+\n+                        result.add(definition);\n+                    }\n+                }\n+            }\n+        }\n+\n         return result;\n     }\n \ndiff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java\nindex a52b2e6e0f..5f1110a3d8 100644\n--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java\n@@ -38,7 +38,9 @@\n package org.jooq.util.h2;\n \n import static org.jooq.impl.DSL.choose;\n+import static org.jooq.impl.DSL.falseCondition;\n import static org.jooq.impl.DSL.inline;\n+import static org.jooq.impl.DSL.name;\n import static org.jooq.impl.DSL.zero;\n import static org.jooq.tools.StringUtils.defaultString;\n import static org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;\n@@ -49,6 +51,7 @@ import java.util.List;\n \n import org.jooq.Param;\n import org.jooq.Record;\n+import org.jooq.exception.DataAccessException;\n import org.jooq.util.AbstractTableDefinition;\n import org.jooq.util.ColumnDefinition;\n import org.jooq.util.DataTypeDefinition;\n@@ -65,6 +68,8 @@ import org.jooq.util.h2.information_schema.tables.Columns;\n  */\n public class H2TableDefinition extends AbstractTableDefinition {\n \n+    private static Boolean is1_4_197;\n+\n     public H2TableDefinition(SchemaDefinition schema, String name, String comment) {\n         super(schema, name, comment);\n     }\n@@ -84,6 +89,7 @@ public class H2TableDefinition extends AbstractTableDefinition {\n                 Columns.COLUMN_NAME,\n                 Columns.ORDINAL_POSITION,\n                 Columns.TYPE_NAME,\n+                is1_4_197() ? Columns.COLUMN_TYPE : inline(\"\").as(Columns.COLUMN_TYPE),\n                 choose().when(Columns.NUMERIC_PRECISION.eq(maxP).and(Columns.NUMERIC_SCALE.eq(maxS)), zero())\n                         .otherwise(Columns.CHARACTER_MAXIMUM_LENGTH).as(Columns.CHARACTER_MAXIMUM_LENGTH),\n                 Columns.NUMERIC_PRECISION.decode(maxP, zero(), Columns.NUMERIC_PRECISION).as(Columns.NUMERIC_PRECISION),\n@@ -113,7 +119,8 @@ public class H2TableDefinition extends AbstractTableDefinition {\n                 record.get(Columns.NUMERIC_PRECISION),\n                 record.get(Columns.NUMERIC_SCALE),\n                 record.get(Columns.IS_NULLABLE, boolean.class),\n-                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT));\n+                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT),\n+                name(getSchema().getName(), getName() + \"_\" + record.get(Columns.COLUMN_NAME)));\n \n             ColumnDefinition column = new DefaultColumnDefinition(\n             \tgetDatabase().getTable(getSchema(), getName()),\n@@ -128,4 +135,26 @@ public class H2TableDefinition extends AbstractTableDefinition {\n \n         return result;\n     }\n+\n+\n+    boolean is1_4_197() {\n+        if (is1_4_197 == null) {\n+\n+            // [#5874] The COLUMNS.COLUMN_TYPE column was introduced in H2 1.4.197\n+            try {\n+                create(true)\n+                    .select(Columns.COLUMN_TYPE)\n+                    .from(COLUMNS)\n+                    .where(falseCondition())\n+                    .fetch();\n+\n+                is1_4_197 = true;\n+            }\n+            catch (DataAccessException e) {\n+                is1_4_197 = false;\n+            }\n+        }\n+\n+        return is1_4_197;\n+    }\n }\ndiff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java\nnew file mode 100644\nindex 0000000000..51cbaff3ea\n--- /dev/null\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java\n@@ -0,0 +1,60 @@\n+/*\n+ * This file is generated by jOOQ.\n+ */\n+package org.jooq.util.h2.information_schema;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.annotation.Generated;\n+\n+import org.jooq.Schema;\n+import org.jooq.impl.CatalogImpl;\n+\n+\n+/**\n+ * This class is generated by jOOQ.\n+ */\n+@Generated(\n+    value = {\n+        \"http://www.jooq.org\",\n+        \"jOOQ version:3.11.0\"\n+    },\n+    comments = \"This class is generated by jOOQ\"\n+)\n+@SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })\n+public class DefaultCatalog extends CatalogImpl {\n+\n+    private static final long serialVersionUID = -1741973376;\n+\n+    /**\n+     * The reference instance of <code></code>\n+     */\n+    public static final DefaultCatalog DEFAULT_CATALOG = new DefaultCatalog();\n+\n+    /**\n+     * The schema <code>INFORMATION_SCHEMA</code>.\n+     */\n+    public final InformationSchema INFORMATION_SCHEMA = org.jooq.util.h2.information_schema.InformationSchema.INFORMATION_SCHEMA;\n+\n+    /**\n+     * No further instances allowed\n+     */\n+    private DefaultCatalog() {\n+        super(\"\");\n+    }\n+\n+    @Override\n+    public final List<Schema> getSchemas() {\n+        List result = new ArrayList();\n+        result.addAll(getSchemas0());\n+        return result;\n+    }\n+\n+    private final List<Schema> getSchemas0() {\n+        return Arrays.<Schema>asList(\n+            InformationSchema.INFORMATION_SCHEMA);\n+    }\n+}\ndiff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java\nindex becb41f09b..bf63a6cd68 100644\n--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java\n@@ -1,5 +1,5 @@\n-/**\n- * This class is generated by jOOQ\n+/*\n+ * This file is generated by jOOQ.\n  */\n package org.jooq.util.h2.information_schema;\n \n@@ -10,6 +10,7 @@ import java.util.List;\n \n import javax.annotation.Generated;\n \n+import org.jooq.Catalog;\n import org.jooq.Table;\n import org.jooq.impl.SchemaImpl;\n import org.jooq.util.h2.information_schema.tables.Columns;\n@@ -28,47 +29,106 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;\n  * This class is generated by jOOQ.\n  */\n @Generated(\n-\tvalue = {\n-\t\t\"http://www.jooq.org\",\n-\t\t\"jOOQ version:3.6.0\"\n-\t},\n-\tcomments = \"This class is generated by jOOQ\"\n+    value = {\n+        \"http://www.jooq.org\",\n+        \"jOOQ version:3.11.0\"\n+    },\n+    comments = \"This class is generated by jOOQ\"\n )\n @SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })\n public class InformationSchema extends SchemaImpl {\n \n-\tprivate static final long serialVersionUID = 1479405880;\n-\n-\t/**\n-\t * The reference instance of <code>INFORMATION_SCHEMA</code>\n-\t */\n-\tpublic static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();\n-\n-\t/**\n-\t * No further instances allowed\n-\t */\n-\tprivate InformationSchema() {\n-\t\tsuper(\"INFORMATION_SCHEMA\");\n-\t}\n-\n-\t@Override\n-\tpublic final List<Table<?>> getTables() {\n-\t\tList result = new ArrayList();\n-\t\tresult.addAll(getTables0());\n-\t\treturn result;\n-\t}\n-\n-\tprivate final List<Table<?>> getTables0() {\n-\t\treturn Arrays.<Table<?>>asList(\n-\t\t\tFunctionColumns.FUNCTION_COLUMNS,\n-\t\t\tConstraints.CONSTRAINTS,\n-\t\t\tCrossReferences.CROSS_REFERENCES,\n-\t\t\tSchemata.SCHEMATA,\n-\t\t\tFunctionAliases.FUNCTION_ALIASES,\n-\t\t\tSequences.SEQUENCES,\n-\t\t\tTypeInfo.TYPE_INFO,\n-\t\t\tIndexes.INDEXES,\n-\t\t\tColumns.COLUMNS,\n-\t\t\tTables.TABLES);\n-\t}\n+    private static final long serialVersionUID = -426534875;\n+\n+    /**\n+     * The reference instance of <code>INFORMATION_SCHEMA</code>\n+     */\n+    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.\n+     */\n+    public final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.\n+     */\n+    public final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.\n+     */\n+    public final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.\n+     */\n+    public final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.\n+     */\n+    public final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.\n+     */\n+    public final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.\n+     */\n+    public final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.\n+     */\n+    public final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.\n+     */\n+    public final Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;\n+\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.\n+     */\n+    public final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;\n+\n+    /**\n+     * No further instances allowed\n+     */\n+    private InformationSchema() {\n+        super(\"INFORMATION_SCHEMA\", null);\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Catalog getCatalog() {\n+        return DefaultCatalog.DEFAULT_CATALOG;\n+    }\n+\n+    @Override\n+    public final List<Table<?>> getTables() {\n+        List result = new ArrayList();\n+        result.addAll(getTables0());\n+        return result;\n+    }\n+\n+    private final List<Table<?>> getTables0() {\n+        return Arrays.<Table<?>>asList(\n+            Columns.COLUMNS,\n+            Constraints.CONSTRAINTS,\n+            CrossReferences.CROSS_REFERENCES,\n+            FunctionAliases.FUNCTION_ALIASES,\n+            FunctionColumns.FUNCTION_COLUMNS,\n+            Indexes.INDEXES,\n+            Schemata.SCHEMATA,\n+            Sequences.SEQUENCES,\n+            Tables.TABLES,\n+            TypeInfo.TYPE_INFO);\n+    }\n }\ndiff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java\nindex 484c4639c0..a2f4a8ca44 100644\n--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java\n@@ -1,5 +1,5 @@\n-/**\n- * This class is generated by jOOQ\n+/*\n+ * This file is generated by jOOQ.\n  */\n package org.jooq.util.h2.information_schema;\n \n@@ -21,62 +21,62 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;\n  * Convenience access to all tables in INFORMATION_SCHEMA\n  */\n @Generated(\n-\tvalue = {\n-\t\t\"http://www.jooq.org\",\n-\t\t\"jOOQ version:3.6.0\"\n-\t},\n-\tcomments = \"This class is generated by jOOQ\"\n+    value = {\n+        \"http://www.jooq.org\",\n+        \"jOOQ version:3.11.0\"\n+    },\n+    comments = \"This class is generated by jOOQ\"\n )\n @SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })\n public class Tables {\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.FUNCTION_COLUMNS\n-\t */\n-\tpublic static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.\n+     */\n+    public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.CONSTRAINTS\n-\t */\n-\tpublic static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.\n+     */\n+    public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.CROSS_REFERENCES\n-\t */\n-\tpublic static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.\n+     */\n+    public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.SCHEMATA\n-\t */\n-\tpublic static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.\n+     */\n+    public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.FUNCTION_ALIASES\n-\t */\n-\tpublic static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.\n+     */\n+    public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.SEQUENCES\n-\t */\n-\tpublic static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.\n+     */\n+    public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.TYPE_INFO\n-\t */\n-\tpublic static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.\n+     */\n+    public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.INDEXES\n-\t */\n-\tpublic static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.\n+     */\n+    public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.COLUMNS\n-\t */\n-\tpublic static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.\n+     */\n+    public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;\n \n-\t/**\n-\t * The table INFORMATION_SCHEMA.TABLES\n-\t */\n-\tpublic static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;\n+    /**\n+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.\n+     */\n+    public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;\n }\ndiff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java\nindex 0aa0b00f98..bed402f803 100644\n--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java\n+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java\n@@ -1,5 +1,5 @@\n-/**\n- * This class is generated by jOOQ\n+/*\n+ * This file is generated by jOOQ.\n  */\n package org.jooq.util.h2.information_schema.tables;\n \n@@ -7,9 +7,12 @@ package org.jooq.util.h2.information_schema.tables;\n import javax.annotation.Generated;\n \n import org.jooq.Field;\n+import org.jooq.Name;\n import org.jooq.Record;\n+import org.jooq.Schema;\n import org.jooq.Table;\n import org.jooq.TableField;\n+import org.jooq.impl.DSL;\n import org.jooq.impl.TableImpl;\n import org.jooq.util.h2.information_schema.InformationSchema;\n \n@@ -18,157 +21,175 @@ import org.jooq.util.h2.information_schema.InformationSchema;\n  * This class is generated by jOOQ.\n  */\n @Generated(\n-\tvalue = {\n-\t\t\"http://www.jooq.org\",\n-\t\t\"jOOQ version:3.6.0\"\n-\t},\n-\tcomments = \"This class is generated by jOOQ\"\n+    value = {\n+        \"http://www.jooq.org\",\n+        \"jOOQ version:3.11.0\"\n+    },\n+    comments = \"This class is generated by jOOQ\"\n )\n @SuppressWarnings({ \"all\", \"unchecked\", \"rawtypes\" })\n public class Columns extends TableImpl<Record> {\n \n-\tprivate static final long serialVersionUID = -1092445246;\n-\n-\t/**\n-\t * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>\n-\t */\n-\tpublic static final Columns COLUMNS = new Columns();\n-\n-\t/**\n-\t * The class holding records for this type\n-\t */\n-\t@Override\n-\tpublic Class<Record> getRecordType() {\n-\t\treturn Record.class;\n-\t}\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.\n-\t */\n-\tpublic static final TableField<Record, String> TABLE_CATALOG = createField(\"TABLE_CATALOG\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.\n-\t */\n-\tpublic static final TableField<Record, String> TABLE_SCHEMA = createField(\"TABLE_SCHEMA\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> TABLE_NAME = createField(\"TABLE_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> COLUMN_NAME = createField(\"COLUMN_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> ORDINAL_POSITION = createField(\"ORDINAL_POSITION\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.\n-\t */\n-\tpublic static final TableField<Record, String> COLUMN_DEFAULT = createField(\"COLUMN_DEFAULT\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.\n-\t */\n-\tpublic static final TableField<Record, String> IS_NULLABLE = createField(\"IS_NULLABLE\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> DATA_TYPE = createField(\"DATA_TYPE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(\"CHARACTER_MAXIMUM_LENGTH\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(\"CHARACTER_OCTET_LENGTH\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> NUMERIC_PRECISION = createField(\"NUMERIC_PRECISION\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(\"NUMERIC_PRECISION_RADIX\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> NUMERIC_SCALE = createField(\"NUMERIC_SCALE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> CHARACTER_SET_NAME = createField(\"CHARACTER_SET_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> COLLATION_NAME = createField(\"COLLATION_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> TYPE_NAME = createField(\"TYPE_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> NULLABLE = createField(\"NULLABLE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.\n-\t */\n-\tpublic static final TableField<Record, Boolean> IS_COMPUTED = createField(\"IS_COMPUTED\", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.\n-\t */\n-\tpublic static final TableField<Record, Integer> SELECTIVITY = createField(\"SELECTIVITY\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.\n-\t */\n-\tpublic static final TableField<Record, String> CHECK_CONSTRAINT = createField(\"CHECK_CONSTRAINT\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.\n-\t */\n-\tpublic static final TableField<Record, String> SEQUENCE_NAME = createField(\"SEQUENCE_NAME\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.\n-\t */\n-\tpublic static final TableField<Record, String> REMARKS = createField(\"REMARKS\", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, \"\");\n-\n-\t/**\n-\t * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.\n-\t */\n-\tpublic static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(\"SOURCE_DATA_TYPE\", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, \"\");\n-\n-\t/**\n-\t * No further instances allowed\n-\t */\n-\tprivate Columns() {\n-\t\tthis(\"COLUMNS\", null);\n-\t}\n-\n-\tprivate Columns(String alias, Table<Record> aliased) {\n-\t\tthis(alias, aliased, null);\n-\t}\n-\n-\tprivate Columns(String alias, Table<Record> aliased, Field<?>[] parameters) {\n-\t\tsuper(alias, InformationSchema.INFORMATION_SCHEMA, aliased, parameters, \"\");\n-\t}\n+    private static final long serialVersionUID = -443290501;\n+\n+    /**\n+     * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>\n+     */\n+    public static final Columns COLUMNS = new Columns();\n+\n+    /**\n+     * The class holding records for this type\n+     */\n+    @Override\n+    public Class<Record> getRecordType() {\n+        return Record.class;\n+    }\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.\n+     */\n+    public static final TableField<Record, String> TABLE_CATALOG = createField(\"TABLE_CATALOG\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.\n+     */\n+    public static final TableField<Record, String> TABLE_SCHEMA = createField(\"TABLE_SCHEMA\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.\n+     */\n+    public static final TableField<Record, String> TABLE_NAME = createField(\"TABLE_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.\n+     */\n+    public static final TableField<Record, String> COLUMN_NAME = createField(\"COLUMN_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.\n+     */\n+    public static final TableField<Record, Integer> ORDINAL_POSITION = createField(\"ORDINAL_POSITION\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.\n+     */\n+    public static final TableField<Record, String> COLUMN_DEFAULT = createField(\"COLUMN_DEFAULT\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.\n+     */\n+    public static final TableField<Record, String> IS_NULLABLE = createField(\"IS_NULLABLE\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.\n+     */\n+    public static final TableField<Record, Integer> DATA_TYPE = createField(\"DATA_TYPE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.\n+     */\n+    public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(\"CHARACTER_MAXIMUM_LENGTH\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.\n+     */\n+    public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(\"CHARACTER_OCTET_LENGTH\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.\n+     */\n+    public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(\"NUMERIC_PRECISION\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.\n+     */\n+    public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(\"NUMERIC_PRECISION_RADIX\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.\n+     */\n+    public static final TableField<Record, Integer> NUMERIC_SCALE = createField(\"NUMERIC_SCALE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.\n+     */\n+    public static final TableField<Record, String> CHARACTER_SET_NAME = createField(\"CHARACTER_SET_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.\n+     */\n+    public static final TableField<Record, String> COLLATION_NAME = createField(\"COLLATION_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.\n+     */\n+    public static final TableField<Record, String> TYPE_NAME = createField(\"TYPE_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.\n+     */\n+    public static final TableField<Record, Integer> NULLABLE = createField(\"NULLABLE\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.\n+     */\n+    public static final TableField<Record, Boolean> IS_COMPUTED = createField(\"IS_COMPUTED\", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.\n+     */\n+    public static final TableField<Record, Integer> SELECTIVITY = createField(\"SELECTIVITY\", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.\n+     */\n+    public static final TableField<Record, String> CHECK_CONSTRAINT = createField(\"CHECK_CONSTRAINT\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.\n+     */\n+    public static final TableField<Record, String> SEQUENCE_NAME = createField(\"SEQUENCE_NAME\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.\n+     */\n+    public static final TableField<Record, String> REMARKS = createField(\"REMARKS\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.\n+     */\n+    public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(\"SOURCE_DATA_TYPE\", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, \"\");\n+\n+    /**\n+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE</code>.\n+     */\n+    public static final TableField<Record, String> COLUMN_TYPE = createField(\"COLUMN_TYPE\", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, \"\");\n+\n+    /**\n+   ",
    "Reduce battery drain caused by insainly high value of widget update period .": "diff --git a/res/xml/widget_ankidroid.xml b/res/xml/widget_ankidroid.xml\nindex 4c2da961f2..8005893586 100644\n--- a/res/xml/widget_ankidroid.xml\n+++ b/res/xml/widget_ankidroid.xml\n@@ -1,4 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<appwidget-provider\n-    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-    android:initialLayout=\"@layout/widget_ankidroidinitial\" android:minHeight=\"146dp\" android:minWidth=\"146dp\" android:updatePeriodMillis=\"2500\"/>\n\\ No newline at end of file\n+<appwidget-provider xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+\tandroid:initialLayout=\"@layout/widget_ankidroidinitial\"\n+\tandroid:minHeight=\"146dp\"\n+\tandroid:minWidth=\"146dp\"\n+\tandroid:updatePeriodMillis=\"3600000\"/>\n\\ No newline at end of file",
    "ignite - 454 jdk8 compatibility fixes": "diff --git a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java\nindex 54efcb9b7b..a1b5650e4f 100644\n--- a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java\n+++ b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java\n@@ -47,17 +47,14 @@ public class ComputeClosureExample {\n             System.out.println(\">>> Compute closure example started.\");\n \n             // Execute closure on all cluster nodes.\n-            Collection<Integer> res = ignite.compute().apply(\n-                new IgniteClosure<String, Integer>() {\n-                    @Override public Integer apply(String word) {\n+            Collection<Integer> res = ignite.compute().<String, Integer>apply((word) -> {\n                         System.out.println();\n                         System.out.println(\">>> Printing '\" + word + \"' on this node from ignite job.\");\n \n                         // Return number of letters in the word.\n                         return word.length();\n        ",
    "Updating Graph Results GUI ( Jeremy Arnold ) .": "diff --git a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java\nindex e305303fcf..8b801e328c 100644\n--- a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java\n+++ b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java\n@@ -2,7 +2,7 @@\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n@@ -57,14 +57,16 @@ package org.apache.jmeter.visualizers;\n \n import java.awt.BorderLayout;\n import java.awt.Color;\n+import java.awt.Dimension;\n import java.awt.FlowLayout;\n import java.awt.Font;\n-import java.awt.GridLayout;\n import java.awt.Image;\n import java.awt.event.ItemEvent;\n import java.awt.event.ItemListener;\n \n import javax.swing.BorderFactory;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n import javax.swing.JCheckBox;\n import javax.swing.JLabel;\n import javax.swing.JPanel;\n@@ -247,7 +249,7 @@ public class GraphVisualizer extends AbstractVisualizer\n     }\n \n     /****************************************\n-     * Description of the Method\n+     * Initialize the GUI\n      ***************************************/\n     private void init()\n     {\n@@ -273,151 +275,291 @@ public class GraphVisualizer extends AbstractVisualizer\n         mainPanel.add(getNamePanel());\n         mainPanel.add(this.getFilePanel());\n \n-        // Set up panel where user can choose which graphs to display\n-        JPanel chooseGraphsPanel = new JPanel();\n \n+        // Set up the graph with header, footer, Y axis and graph display\n+        JPanel graphPanel = new JPanel(new BorderLayout());\n+        graphPanel.add(createYAxis(), BorderLayout.WEST);\n+        graphPanel.add(createChoosePanel(), BorderLayout.NORTH);\n+        graphPanel.add(createGraphPanel(), BorderLayout.CENTER);\n+        graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);\n+\n+        // Add the main panel and the graph\n+        this.add(mainPanel, BorderLayout.NORTH);\n+        this.add(graphPanel, BorderLayout.CENTER);\n+    }\n+\n+    // Methods used in creating the GUI\n+\n+    /**\n+     * Creates the panel containing the graph's Y axis labels.\n+     * \n+     * @return the Y axis panel\n+     */\n+    private JPanel createYAxis() {\n+        JPanel graphYAxisPanel = new JPanel();\n+        \n+        graphYAxisPanel.setLayout(new BorderLayout());\n+        \n+        maxYField = createYAxisField(5);\n+        minYField = createYAxisField(3);\n+\n+        graphYAxisPanel.add(createYAxisPanel(\"graph_results_ms\", maxYField),\n+                        BorderLayout.NORTH);\n+        graphYAxisPanel.add(createYAxisPanel(\"graph_results_ms\", minYField),\n+                        BorderLayout.SOUTH);\n+\n+        return graphYAxisPanel;\n+    }\n+\n+    /**\n+     * Creates a text field to be used for the value of a Y axis\n+     * label.  These fields hold the minimum and maximum values\n+     * for the graph.  The units are kept in a separate label\n+     * outside of this field.\n+     * \n+     * @param length the number of characters which the field\n+     *                will use to calculate its preferred width.\n+     *                This should be set to the maximum number\n+     *                of digits that are expected to be necessary\n+     *                to hold the label value.\n+     * \n+     * @see #createYAxisPanel(String, JTextField)\n+     * \n+     * @return a text field configured to be used in the Y axis\n+     */\n+    private JTextField createYAxisField(int length) {\n+        JTextField field = new JTextField(length);\n+        field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));\n+        field.setEditable(false);\n+        field.setForeground(Color.black);\n+        field.setBackground(getBackground());\n+        field.setHorizontalAlignment(JTextField.RIGHT);\n+        return field;\n+    }\n+\n+    /**\n+     * Creates a panel for an entire Y axis label. This includes\n+     * the dynamic value as well as the unit label.\n+     * \n+     * @param labelResourceName the name of the label resource.\n+     *          This is used to look up the label text using\n+     *          {@link JMeterUtils#getResString(String)}.\n+     * \n+     * @return a panel containing both the dynamic and static parts\n+     *          of a Y axis label\n+     */\n+    private JPanel createYAxisPanel(String labelResourceName, JTextField field) {\n+        JPanel panel = new JPanel(new FlowLayout());\n+        JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));\n+        \n+        panel.add(field);\n+        panel.add(label);\n+        return panel;\n+    }\n+\n+\n+    /**\n+     * Creates a panel which allows the user to choose which graphs\n+     * to display. This panel consists of a check box for each type\n+     * of graph (current sample, average, deviation, and throughput).\n+     * \n+     * @return a panel allowing the user to choose which graphs\n+     *          to display\n+     */\n+    private JPanel createChoosePanel() {\n+        JPanel chooseGraphsPanel = new JPanel();\n+        \n         chooseGraphsPanel.setLayout(new FlowLayout());\n-        JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString(\"graph_choose_graphs\"));\n-\n-        data = new JCheckBox(JMeterUtils.getResString(\"graph_results_data\"));\n-        data.setSelected(true);\n-        data.addItemListener(this);\n-        data.setForeground(Color.black);\n-        average = new JCheckBox(JMeterUtils.getResString(\"graph_results_average\"));\n-        average.setSelected(true);\n-        average.addItemListener(this);\n-        average.setForeground(Color.blue);\n-        deviation = new JCheckBox(JMeterUtils.getResString(\"graph_results_deviation\"));\n-        deviation.setSelected(true);\n-        deviation.addItemListener(this);\n-        deviation.setForeground(Color.red);\n-        throughput = new JCheckBox(JMeterUtils.getResString(\"graph_results_throughput\"));\n-        throughput.setSelected(true);\n-        throughput.addItemListener(this);\n-        throughput.setForeground(JMeterColor.dark_green);\n+        JLabel selectGraphsLabel = new JLabel(\n+                        JMeterUtils.getResString(\"graph_choose_graphs\"));\n+        data = createChooseCheckBox(\"graph_results_data\", Color.black);\n+        average = createChooseCheckBox(\"graph_results_average\", Color.blue);\n+        deviation = createChooseCheckBox(\"graph_results_deviation\", Color.red);\n+        throughput = createChooseCheckBox(\"graph_results_throughput\",\n+                        JMeterColor.dark_green);\n \n         chooseGraphsPanel.add(selectGraphsLabel);\n         chooseGraphsPanel.add(data);\n         chooseGraphsPanel.add(average);\n         chooseGraphsPanel.add(deviation);\n         chooseGraphsPanel.add(throughput);\n+        return chooseGraphsPanel;\n+    }\n \n-        // Set up the graph itself\n-        JScrollPane graphScrollPanel = new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,\n-                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n+    /**\n+     * Creates a check box configured to be used to in the choose panel\n+     * allowing the user to select whether or not a particular kind of\n+     * graph data will be displayed.\n+     * \n+     * @param labelResourceName the name of the label resource.\n+     *                This is used to look up the label text using\n+     *                {@link JMeterUtils#getResString(String)}.\n+     * @param color  the color used for the checkbox text. By\n+     *                convention this is the same color that is used\n+     *                to draw the graph and for the corresponding\n+     *                info field.\n+     *\n+     * @return       a checkbox allowing the user to select whether or\n+     *                not a kind of graph data will be displayed\n+     */\n+    private JCheckBox createChooseCheckBox(String labelResourceName, Color color) {\n+        JCheckBox checkBox = new JCheckBox(\n+                        JMeterUtils.getResString(labelResourceName));\n+        checkBox.setSelected(true);\n+        checkBox.addItemListener(this);\n+        checkBox.setForeground(color);\n+        return checkBox;\n+    }\n \n-        graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\n-        // graphScrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n-        // graphScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\n \n+    /**\n+     * Creates a scroll pane containing the actual graph of\n+     * the results.\n+     * \n+     * @return a scroll pane containing the graph\n+     */\n+    private JScrollPane createGraphPanel() {\n+        JScrollPane graphScrollPanel =\n+            new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,\n+                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n \n-        // Set up Y axis panel\n-        JPanel graphYAxisPanel = new JPanel();\n+        graphScrollPanel.setViewportBorder(\n+                BorderFactory.createEmptyBorder(2, 2, 2, 2));\n \n-        graphYAxisPanel.setLayout(new BorderLayout());\n-        JPanel maxYPanel = new JPanel(new FlowLayout());\n-        JLabel maxYLabel = new JLabel(JMeterUtils.getResString(\"graph_results_ms\"));\n-\n-        maxYField = new JTextField(5);\n-        maxYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));\n-        maxYField.setEditable(false);\n-        maxYField.setForeground(Color.black);\n-        maxYField.setBackground(getBackground());\n-        maxYField.setHorizontalAlignment(JTextField.RIGHT);\n-        maxYPanel.add(maxYField);\n-        maxYPanel.add(maxYLabel);\n-        JPanel minYPanel = new JPanel(new FlowLayout());\n-        JLabel minYLabel = new JLabel(JMeterUtils.getResString(\"graph_results_ms\"));\n-\n-        minYField = new JTextField(3);\n-        minYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));\n-        minYField.setEditable(false);\n-        minYField.setForeground(Color.black);\n-        minYField.setBackground(getBackground());\n-        minYField.setHorizontalAlignment(JTextField.RIGHT);\n-        minYPanel.add(minYField);\n-        minYPanel.add(minYLabel);\n-        graphYAxisPanel.add(maxYPanel, BorderLayout.NORTH);\n-        graphYAxisPanel.add(minYPanel, BorderLayout.SOUTH);\n-\n-        // Set up footer of graph which displays numerics of the graphs\n-        JPanel dataPanel = new JPanel();\n-        JLabel dataLabel = new JLabel(JMeterUtils.getResString(\"graph_results_latest_sample\"));\n-\n-        dataLabel.setForeground(Color.black);\n-        dataField = new JTextField(5);\n-        dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-        dataField.setEditable(false);\n-        dataField.setForeground(Color.black);\n-        dataField.setBackground(getBackground());\n-        dataPanel.add(dataLabel);\n-        dataPanel.add(dataField);\n-        JPanel averagePanel = new JPanel();\n-        JLabel averageLabel = new JLabel(JMeterUtils.getResString(\"graph_results_average\"));\n-\n-        averageLabel.setForeground(Color.blue);\n-        averageField = new JTextField(5);\n-        averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-        averageField.setEditable(false);\n-        averageField.setForeground(Color.blue);\n-        averageField.setBackground(getBackground());\n-        averagePanel.add(averageLabel);\n-        averagePanel.add(averageField);\n-        JPanel deviationPanel = new JPanel();\n-        JLabel deviationLabel = new JLabel(JMeterUtils.getResString(\"graph_results_deviation\"));\n-\n-        deviationLabel.setForeground(Color.red);\n-        deviationField = new JTextField(5);\n-        deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-        deviationField.setEditable(false);\n-        deviationField.setForeground(Color.red);\n-        deviationField.setBackground(getBackground());\n-        deviationPanel.add(deviationLabel);\n-        deviationPanel.add(deviationField);\n-        JPanel throughputPanel = new JPanel();\n-        JLabel throughputLabel = new JLabel(JMeterUtils.getResString(\"graph_results_throughput\"));\n-\n-        throughputLabel.setForeground(JMeterColor.dark_green);\n-        throughputField = new JTextField(15);\n-        throughputField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-        throughputField.setEditable(false);\n-        throughputField.setForeground(JMeterColor.dark_green);\n-        throughputField.setBackground(getBackground());\n-        throughputPanel.add(throughputLabel);\n-        throughputPanel.add(throughputField);\n-        JPanel noSamplesPanel = new JPanel();\n-        JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString(\"graph_results_no_samples\"));\n-\n-        noSamplesField = new JTextField(6);\n-        noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-        noSamplesField.setEditable(false);\n-        noSamplesField.setForeground(Color.black);\n-        noSamplesField.setBackground(getBackground());\n-        noSamplesPanel.add(noSamplesLabel);\n-        noSamplesPanel.add(noSamplesField);\n-\n-        JPanel graphInfoPanel = new JPanel();\n-\n-        graphInfoPanel.setLayout(new GridLayout(2, 3));\n-        graphInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n-\n-        graphInfoPanel.add(noSamplesPanel);\n-        graphInfoPanel.add(dataPanel);\n-        graphInfoPanel.add(averagePanel);\n-        graphInfoPanel.add(deviationPanel);\n-        graphInfoPanel.add(throughputPanel);\n+        return graphScrollPanel;\n+    }\n \n-        // Set up the graph with header, footer, Y axis and graph display\n-        JPanel graphPanel = new JPanel();\n \n-        graphPanel.setLayout(new BorderLayout());\n-        graphPanel.add(graphYAxisPanel, BorderLayout.WEST);\n-        graphPanel.add(chooseGraphsPanel, BorderLayout.NORTH);\n-        graphPanel.add(graphScrollPanel, BorderLayout.CENTER);\n-        graphPanel.add(graphInfoPanel, BorderLayout.SOUTH);\n+    /**\n+     * Creates a panel which numerically displays the current graph\n+     * values.\n+     * \n+     * @return a panel showing the current graph values\n+     */\n+    private Box createGraphInfoPanel() {\n+        Box graphInfoPanel = Box.createHorizontalBox();\n+\n+        noSamplesField = createInfoField(Color.black, 6);\n+        dataField = createInfoField(Color.black, 5);\n+        averageField = createInfoField(Color.blue, 5);\n+        deviationField = createInfoField(Color.red, 5);\n+        throughputField = createInfoField(JMeterColor.dark_green, 15);\n+\n+        graphInfoPanel.add(createInfoColumn(\n+                    createInfoLabel(\"graph_results_no_samples\", noSamplesField),\n+                    noSamplesField,\n+                    createInfoLabel(\"graph_results_deviation\", deviationField),\n+                    deviationField));\n+        graphInfoPanel.add(Box.createHorizontalGlue());\n+\n+        graphInfoPanel.add(createInfoColumn(\n+                    createInfoLabel(\"graph_results_latest_sample\", dataField),\n+                    dataField,\n+                    createInfoLabel(\"graph_results_throughput\", throughputField),\n+                    throughputField));\n+        graphInfoPanel.add(Box.createHorizontalGlue());\n+\n+        graphInfoPanel.add(createInfoColumn(\n+                    createInfoLabel(\"graph_results_average\", averageField),\n+                    averageField,\n+                    null,\n+                    null));\n+        graphInfoPanel.add(Box.createHorizontalGlue());\n+\n+        return graphInfoPanel;\n+    }\n \n-        // Add the main panel and the graph\n-        this.add(mainPanel, BorderLayout.NORTH);\n-        this.add(graphPanel, BorderLayout.CENTER);\n+    /**\n+     * Creates one of the fields used to display the graph's current\n+     * values.\n+     * \n+     * @param color   the color used to draw the value. By convention\n+     *                 this is the same color that is used to draw the\n+     *                 graph for this value and in the choose panel.\n+     * @param length  the number of digits which the field should be\n+     *                 able to display\n+     * \n+     * @return        a text field configured to display one of the\n+     *                 current graph values\n+     */\n+    private JTextField createInfoField(Color color, int length) {\n+        JTextField field = new JTextField(length);\n+        field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\n+        field.setEditable(false);\n+        field.setForeground(color);\n+        field.setBackground(getBackground());\n+\n+        // The text field should expand horizontally, but have\n+        // a fixed height\n+        field.setMaximumSize(new Dimension(\n+                    field.getMaximumSize().width,\n+                    field.getPreferredSize().height));\n+        return field;\n+    }\n+\n+\n+    /**\n+     * Creates a label for one of the fields used to display the graph's\n+     * current values. Neither the label created by this method or the\n+     * <code>field</code> passed as a parameter is added to the GUI here.\n+     * \n+     * @param labelResourceName  the name of the label resource.\n+     *                This is used to look up the label text using\n+     *                {@link JMeterUtils#getResString(String)}.\n+     * @param field  the field this label is being created for.\n+     */\n+    private JLabel createInfoLabel(String labelResourceName, JTextField field) {\n+        JLabel label = new JLabel(\n+                JMeterUtils.getResString(labelResourceName));\n+        label.setForeground(field.getForeground());\n+        label.setLabelFor(field);\n+        return label;\n+    }\n+\n+    /**\n+     * Creates a panel containing two pairs of labels and fields for\n+     * displaying the current graph values. This method exists to help with\n+     * laying out the fields in columns. If one or more components are null\n+     * then these components will be represented by blank space.\n+     * \n+     * @param label1  the label for the first field. This label will\n+     *                 be placed in the upper left section of the panel.\n+     *                 If this parameter is null, this section of the\n+     *                 panel will be left blank.\n+     * @param field1  the field corresponding to the first label. This\n+     *                 field will be placed in the upper right section\n+     *                 of the panel. If this parameter is null, this\n+     *                 section of the panel will be left blank.\n+     * @param label2  the label for the second field. This label will\n+     *                 be placed in the lower left section of the panel.\n+     *                 If this parameter is null, this section of the\n+     *                 panel will be left blank.\n+     * @param field2  the field corresponding to the second label. This\n+     *                 field will be placed in the lower right section\n+     *                 of the panel. If this parameter is null, this\n+     *                 section of the panel will be left blank.\n+     */\n+    private Box createInfoColumn(JLabel label1, JTextField",
    "add STORM - 558 to changelog": "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex f0762d2a7..b7a7f412a 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -1,4 +1,5 @@\n ## 0.9.3-rc2\n+ * STORM-558: change \"swap!\" to \"reset!\" to fix assignment-versions in supervisor\n  * STORM-555: Storm json response should set charset to UTF-8\n  * STORM-513: check heartbeat from multilang subprocess\n  * STORM-549: \"topology.enable.message.timeouts\" does nothing",
    "Added GuildController <issue_id> reateTextChannel ( String ) and <issue_id> reateVoiceChannel ( String ) .": "diff --git a/src/main/java/net/dv8tion/jda/core/entities/Guild.java b/src/main/java/net/dv8tion/jda/core/entities/Guild.java\nindex ea4dce7d..aed17f3e 100644\n--- a/src/main/java/net/dv8tion/jda/core/entities/Guild.java\n+++ b/src/main/java/net/dv8tion/jda/core/entities/Guild.java\n@@ -117,21 +117,9 @@ public interface Guild extends ISnowflake\n      */\n     List<TextChannel> getTextChannels();\n     List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase);\n-//\n-//    /**\n-//     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.\n-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}\n-//     *\n-//     * @param name\n-//     *      the name of the TextChannel to create\n-//     * @return\n-//     *      the ChannelManager for the created TextChannel\n-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException\n-//     *      if the guild is temporarily unavailable\n-//     */\n-//    ChannelManager createTextChannel(String name);\n-//\n+\n     VoiceChannel getVoiceChannelById(String id);\n+\n     /**\n      * The {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels} available on the {@link net.dv8tion.jda.core.entities.Guild Guild}.\n      * The channels returned will be sorted according to their position.\n@@ -140,20 +128,8 @@ public interface Guild extends ISnowflake\n      *      An Immutable List of {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels}.\n      */\n     List<VoiceChannel> getVoiceChannels();\n+\n     List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase);\n-//\n-//    /**\n-//     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.\n-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}\n-//     *\n-//     * @param name\n-//     *      the name of the VoiceChannel to create\n-//     * @return\n-//     *      the ChannelManager for the created VoiceChannel\n-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException\n-//     *      if the guild is temporarily unavailable\n-//     */\n-//    ChannelManager createVoiceChannel(String name);\n \n     /**\n      * This returns the {@link net.dv8tion.jda.core.entities.Role Role} which has the same id as the one provided.<br>\n@@ -175,42 +151,6 @@ public interface Guild extends ISnowflake\n      */\n     List<Role> getRoles();\n     List<Role> getRolesByName(String name, boolean ignoreCase);\n-//\n-//    /**\n-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this Guild.\n-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}\n-//     *\n-//     * @return\n-//     *      the RoleManager for the created Role\n-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException\n-//     *      if the guild is temporarily unavailable\n-//     */\n-//    RoleManager createRole();\n-//\n-//    /**\n-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this {@link net.dv8tion.jda.core.entities.Guild Guild} with the same settings as the given {@link net.dv8tion.jda.core.entities.Role Role}.\n-//     * It will be placed at the bottom (just over the @everyone role) to avoid permission hierarchy conflicts.\n-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}\n-//     * and all {@link net.dv8tion.jda.Permission Permissions} the given {@link net.dv8tion.jda.core.entities.Role Role} has.\n-//     *\n-//     * @param role\n-//     *      The {@link net.dv8tion.jda.core.entities.Role Role} that should be copied\n-//     * @return\n-//     *      the RoleManager for the created Role\n-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException\n-//     *      if the guild is temporarily unavailable\n-//     * @throws net.dv8tion.jda.exceptions.PermissionException\n-//     *      if the bot doesn't has {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission} and every Permission the given Role has\n-//     */\n-//    RoleManager createCopyOfRole(Role role);\n-\n-//\n-//    /**\n-//     * Provides the {@link net.dv8tion.jda.core.entities.Role Role} that determines the color for the provided {@link net.dv8tion.jda.core.entities.User User}\n-//     *\n-//     * If the {@link net.dv8tion.jda.core.entities.User User} has the default color, this returns the same as getPublicRole();\n-//     */\n-//    Role getColorDeterminantRoleForUser(User user);\n \n     /**\n      * The @everyone {@link net.dv8tion.jda.core.entities.Role Role} of this {@link net.dv8tion.jda.core.entities.Guild Guild}\ndiff --git a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java\nindex ccc405fd..cf56fabe 100644\n--- a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java\n+++ b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java\n@@ -872,6 +872,100 @@ public class GuildController\n         };\n     }\n \n+    /**\n+     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.\n+     * For this to be successful, the logged in account has to have the\n+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission\n+     *\n+     * @param name\n+     *      the name of the TextChannel to create\n+     * @return\n+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>\n+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}<br>\n+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}\n+     * @throws net.dv8tion.jda.core.exceptions.PermissionException\n+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.\n+     * @throws java.lang.IllegalArgumentException\n+     *      If the provided name is less than 2 characters or greater than 100 characters in length\n+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException\n+     *      if the guild is temporarily unavailable\n+     */\n+    public RestAction<TextChannel> createTextChannel(String name)\n+    {\n+        checkAvailable();\n+        checkPermission(Permission.MANAGE_CHANNEL);\n+        checkNull(name, \"name\");\n+\n+        if (name.length() < 2 || name.length() > 100)\n+            throw new IllegalArgumentException(\"Provided name must be 2 - 100 characters in length\");\n+\n+        JSONObject body = new JSONObject()\n+                .put(\"type\", \"text\")\n+                .put(\"name\", name);\n+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());\n+        return new RestAction<TextChannel>(getJDA(), route, body)\n+        {\n+            @Override\n+            protected void handleResponse(Response response, Request request)\n+            {\n+                if (!response.isOk())\n+                    request.onFailure(response);\n+\n+                JSONObject chanJson = response.getObject();\n+                TextChannel tc = EntityBuilder.get(api).createTextChannel(chanJson, guild.getId());\n+\n+                request.onSuccess(tc);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.\n+     * For this to be successful, the logged in account has to have the\n+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission.\n+     *\n+     * @param name\n+     *      the name of the VoiceChannel to create\n+     * @return\n+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>\n+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}<br>\n+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}\n+     * @throws net.dv8tion.jda.core.exceptions.PermissionException\n+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.\n+     * @throws java.lang.IllegalArgumentException\n+     *      If the provided name is less than 2 characters or greater than 100 characters in length\n+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException\n+     *      if the guild is temporarily unavailable\n+     */\n+    public RestAction<VoiceChannel> createVoiceChannel(String name)\n+    {\n+        checkAvailable();\n+        checkPermission(Permission.MANAGE_CHANNEL);\n+        checkNull(name, \"name\");\n+\n+        if (name.length() < 2 || name.length() > 100)\n+            throw new IllegalArgumentException(\"Provided name must be 2 to 100 characters in length\");\n+\n+        JSONObject body = new JSONObject()\n+                .put(\"type\", \"voice\")\n+                .put(\"name\", name);\n+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());\n+        return new RestAction<VoiceChannel>(getJDA(), route, body)\n+        {\n+            @Override\n+            protected void handleResponse(Response response, Request request)\n+            {\n+                if (!response.isOk())\n+                    request.onFailure(response);\n+\n+                JSONObject chanJson = response.getObject();\n+                VoiceChannel vc = EntityBuilder.get(api).createVoiceChannel(chanJson, guild.getId());\n+\n+                request.onSuccess(vc);\n+            }\n+        };\n+    }\n+\n     protected void checkAvailable()\n     {\n         if (!guild.isAvailable())\ndiff --git a/src/main/java/net/dv8tion/jda/core/requests/Route.java b/src/main/java/net/dv8tion/jda/core/requests/Route.java\nindex 9524a9f2..b94cd7eb 100644\n--- a/src/main/java/net/dv8tion/jda/core/requests/Route.java\n+++ b/src/main/java/net/dv8tion/jda/core/requests/Route.java\n@@ -52,6 +52,7 @@ public class Route\n     {\n         public static final Route GET_GUILD =        new Route(GET,    \"guilds/{guild_id}\",                   \"guild_id\");\n         public static final Route MODIFY_GUILD =     new Route(PATCH,  \"guilds/{guild_id}\",                   \"guild_id\");\n+        public static final Route CREATE_CHANNEL =   new Route(POST,   \"guilds/{guild_id}/channels\",          \"guild_id\");\n         public static final Route GET_CHANNELS =     new Route(GET,    \"guilds/{guild_id}/channels\",          \"guild_id\");\n         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  \"guilds/{guild_id}/channels\",          \"guild_id\");\n         public static final Route GET_BANS =         new Route(GET,    \"guilds/{guild_id}/bans\",              \"guild_id\");\n@@ -60,7 +61,7 @@ public class Route\n         public static final Route UNBAN =            new Route(DELETE, \"guilds/{guild_id}/bans/{user_id}\",    \"guild_id\");\n         public static final Route KICK_MEMBER =      new Route(DELETE, \"guilds/{guild_id}/members/{user_id}\", \"guild_id\");\n         public static final Route MODIFY_MEMBER =    new Route(PATCH,  \"guilds/{guild_id}/members/{user_id}\", \"guild_id\");\n-        public static final Route MODIFY_SELF_NICK = new Route(PATCH, \"guilds/{guild_id}/members/@me/nick\",  \"guild_id\");\n+        public static final Route MODIFY_SELF_NICK = new Route(PATCH,  \"guilds/{guild_id}/members/@me/nick\",  \"guild_id\");\n         public static final Route PRUNABLE_COUNT =   new Route(GET,    \"guilds/{guild_id}/prune?days={}\",     \"guild_id\");\n         public static final Route PRUNE_MEMBERS =    new Route(POST,   \"guilds/{guild_id}/prune?days={}\",     \"guild_id\");\n \n@@ -80,9 +81,9 @@ public class Route\n \n     public static class Channels\n     {\n-        public static final Route DELETE_CHANNEL = new Route(DELETE, \"channels/{channel_id}\",        \"channel_id\");\n-        public static final Route MODIFY_CHANNEL = new Route(PATCH,  \"channels/{channel_id}\",        \"channel_id\");\n-        public static final Route SEND_TYPING =    new Route(POST,   \"channels/{channel_id}/typing\", \"channel_id\");\n+        public static final Route DELETE_CHANNEL =       new Route(DELETE, \"channels/{channel_id}\");\n+        public static final Route MODIFY_CHANNEL =       new Route(PATCH,  \"channels/{channel_id}\",        \"channel_id\");\n+        public static final Route SEND_TYPING =          new Route(POST,   \"channels/{channel_id}/typing\", \"channel_id\");\n         public static final Route GET_PERMISSIONS =      new Route(GET,    \"channels/{channel_id}/permissions\",                   \"channel_id\");\n         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    \"channels/{channel_id}/permissions/{permoverride_id}\", \"channel_id\");\n         public static final Route CREATE_PERM_OVERRIDE = new Route(PUT,    \"channels/{channel_id}/permissions/{permoverride_id}\", \"channel_id\");",
    "Provide default implementation of MeterRegistry . bind": "diff --git a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java\nindex 582681d79..8709cb0f0 100644\n--- a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java\n+++ b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java\n@@ -308,7 +308,12 @@ public interface MeterRegistry {\n     /**\n      * Execute an algorithm to bind one or more metrics to the registry.\n      */\n-    MeterRegistry bind(MeterBinder... binders);\n+    default MeterRegistry bind(MeterBinder... binders) {\n+        for (MeterBinder binder : binders) {\n+            binder.bindTo(this);\n+        }\n+        return this;\n+    }\n \n     /**\n      * Record metrics on Guava caches.",
    "Skip push to sonatype during release process": "diff --git a/.github/workflows/sonatype.yaml b/.github/workflows/sonatype.yaml\nindex 55619adb17..b306aa1b71 100644\n--- a/.github/workflows/sonatype.yaml\n+++ b/.github/workflows/sonatype.yaml\n@@ -23,7 +23,7 @@ on:\n \n jobs:\n   build:\n-    if: github.repository_owner == 'mybatis'\n+    if: github.repository_owner == 'mybatis' && ! contains(toJSON(github.event.head_commit.message), '[maven-release-plugin]')\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v2\ndiff --git a/travis/after_success.sh b/travis/after_success.sh\nindex ea1fad6c0a..3a47192e81 100755\n--- a/travis/after_success.sh\n+++ b/travis/after_success.sh\n@@ -1,6 +1,6 @@\n #!/bin/bash\n #\n-#    Copyright 2009-2019 the original author or authors.\n+#    Copyright 2009-2020 the original author or authors.\n #\n #    Licensed under the Apache License, Version 2.0 (the \"License\");\n #    you may not use this file except in compliance with the License.",
    "added reference docs": "diff --git a/docs/blob.txt b/docs/blob.txt\nindex af523c8f3e..ec740411a9 100644\n--- a/docs/blob.txt\n+++ b/docs/blob.txt\n@@ -1,3 +1,5 @@\n+.. _blob_support:\n+\n ============\n Blob Support\n ============\ndiff --git a/docs/sql/ddl.txt b/docs/sql/ddl.txt\nindex 21f2ffe969..e918384c20 100644\n--- a/docs/sql/ddl.txt\n+++ b/docs/sql/ddl.txt\n@@ -343,12 +343,19 @@ Example for combining custom routing and shard definition::\n     CREATE OK (... sec)\n \n \n+.. _replication:\n+\n Replication\n ===========\n \n-By default Crate uses an replication factor of 1. If e.g. a cluster with 2 nodes is set up and\n-an index is created using 5 shards, each node will have 5 shards.\n-Defining the number of replicas is done using the ``number_of_replicas`` property.\n+Replication of a table in Crate means that each primary shard of a\n+table is stored additionally on so called secondary shards. This might\n+be useful for better read performance and high availability. If not\n+specified, crate creates one replica, which means that a tables\n+content is stored twice accross the nodes of a cluster.\n+\n+Defining the number of replicas is done using the\n+``number_of_replicas`` property.\n \n Example::\n \n@@ -362,30 +369,22 @@ Example::\n The `number_of_replicas` property also accepts an string as parameter that\n contains a `range`.\n \n-A range is a definition of `minimum number of replicas` to `maximum number of\n-replicas`.\n-\n-For example:\n-\n-    =====  ======================================================================\n-    Range  Explanation\n-    =====  ======================================================================\n-    0-1    Will create 0 or 1 replicas depending on the number of available nodes\n-    -----  ----------------------------------------------------------------------\n-    2-4    Table requires at least 2 replicas to be fully replicated. Will\n-           create up to 4 if nodes are added.\n-    -----  ----------------------------------------------------------------------\n-    0-all  Will expand the number of replicas to the available number of nodes.\n-    =====  ======================================================================\n+A range is a definition of `minimum number of replicas` to `maximum\n+number of replicas` depending on the number of nodes in the\n+cluster. The table below shows some examples.\n \n-While defining replication together with :ref:`sharding <sql_ddl_sharding>`, it needs to be\n-defined after::\n+===== ======================================================================\n+Range Explanation\n+===== ======================================================================\n+0-1   Will create 0 or 1 replicas depending on the number of available nodes\n+----- ----------------------------------------------------------------------\n+2-4   Table requires at least 2 replicas to be fully replicated. Will\n+      create up to 4 if nodes are added.\n+----- ----------------------------------------------------------------------\n+0-all Will expand the number of replicas to the available number of nodes.\n+===== ======================================================================\n \n-    cr> create table my_table10a (\n-    ...   first_column int,\n-    ...   second_column string\n-    ... ) clustered by (first_column) into 10 shards with (number_of_replicas=1)\n-    CREATE OK (... sec)\n+For details of the range syntax refer to :ref:`number_of_replicas`.\n \n .. note::\n \n@@ -393,22 +392,26 @@ defined after::\n \n .. _fulltext-indices:\n \n+\n+.. _indices_and_fulltext:\n+\n Indices and fulltext search\n ============================\n \n-Fulltext indices take the contents of one or more fields and split it up into tokens that are\n-used for fulltext-search. The transformation from a text to separate tokens is done by an\n-analyzer. In order to create fulltext search queries a\n-:ref:`fulltext index with an analyzer <sql_ddl_index_fulltext>` must be defined for the related\n-columns.\n+Fulltext indices take the contents of one or more fields and split it\n+up into tokens that are used for fulltext-search. The transformation\n+from a text to separate tokens is done by an analyzer. In order to\n+create fulltext search queries a :ref:`fulltext index with an analyzer\n+<sql_ddl_index_fulltext>` must be defined for the related columns.\n \n .. _sql_ddl_index_definition:\n \n Index Definition\n ----------------\n \n-At Crate, every column's data is indexed using the ``plain`` index method by default.\n-Currently 3 choices related to index definition exists:\n+In Crate, every column's data is indexed using the ``plain`` index\n+method by default.  Currently there are 3 choices related to index\n+definition:\n \n   - `Disable indexing`_\n \n@@ -427,9 +430,9 @@ Currently 3 choices related to index definition exists:\n Disable indexing\n ................\n \n-Indexing can be turned off by using the ``INDEX OFF`` column definition.\n-Without an index the column can never be hit by a query, and is only available as a result\n-column::\n+Indexing can be turned off by using the ``INDEX OFF`` column\n+definition. Without an index the column can never be hit by a query,\n+and is only available as a result column::\n \n     cr> create table my_table1b (\n     ...   first_column string INDEX OFF\n@@ -442,8 +445,9 @@ column::\n Plain index (Default)\n .....................\n \n-An index of type ``plain`` is indexing the input data as-is without analyzing.\n-Using the ``plain`` index method is the default behaviour but can also be declared explicitly::\n+An index of type ``plain`` is indexing the input data as-is without\n+analyzing.  Using the ``plain`` index method is the default behaviour\n+but can also be declared explicitly::\n \n     cr> create table my_table1b1 (\n     ...   first_column string INDEX using plain\n@@ -463,21 +467,22 @@ This results in the same behaviour than without any index declaration::\n Fulltext index with analyzer\n ............................\n \n-By defining an index on a column, it's analyzed data is indexed instead of the raw data.\n-Thus, depending on the used analyzer, querying for the exact data may not work anymore.\n-See :ref:`builtin-analyzer` for details about available builtin analyzer or\n-:ref:`sql-ddl-custom-analyzer`.\n+By defining an index on a column, it's analyzed data is indexed\n+instead of the raw data.  Thus, depending on the used analyzer,\n+querying for the exact data may not work anymore.  See\n+:ref:`builtin-analyzer` for details about available builtin analyzer\n+or :ref:`sql-ddl-custom-analyzer`.\n \n-If no analyzer is specified using a fulltext index, the :ref:`standard <standard-analyzer>`\n-analyzer is used::\n+If no analyzer is specified when using a fulltext index, the\n+:ref:`standard <standard-analyzer>` analyzer is used::\n \n     cr> create table my_table1c (\n     ...   first_column string INDEX using fulltext\n     ... )\n     CREATE OK (... sec)\n \n-Defining the usage of a concrete analyzer is straight forward by defining the analyzer as a\n-parameter using the ``WITH`` statement::\n+Defining the usage of a concrete analyzer is straight forward by\n+defining the analyzer as a parameter using the ``WITH`` statement::\n \n     cr> create table my_table1d (\n     ...   first_column string INDEX using fulltext with(analyzer='english')\n@@ -488,8 +493,9 @@ parameter using the ``WITH`` statement::\n Defining a named index column definition\n ........................................\n \n-It's also possible to define an index column which treat the data of a given column as input.\n-This is especially useful if you want to search for both, the exact and analyzed data::\n+It's also possible to define an index column which treat the data of a\n+given column as input.  This is especially useful if you want to\n+search for both, the exact and analyzed data::\n \n     cr> create table my_table1e (\n     ...   first_column string,\n@@ -509,8 +515,9 @@ Of course defining a custom analyzer is possible here too::\n Defining a composite index\n ..........................\n \n-Defining a composite (or combined) index is done using the same syntax as above despite multiple\n-columns are given to the ``fulltext`` index method::\n+Defining a composite (or combined) index is done using the same syntax\n+as above despite multiple columns are given to the ``fulltext`` index\n+method::\n \n     cr> create table documents (\n     ...   title string,\n@@ -533,62 +540,29 @@ Composite indices can include nested columns within object columns as well::\n \n .. _sql-ddl-custom-analyzer:\n \n+.. _create_custom_analyzer:\n+\n Create custom analyzer\n ----------------------\n \n-An analyzer consists of one tokenizer, zero or more token-filters, and zero or more char-filters.\n+An analyzer consists of one tokenizer, zero or more token-filters, and\n+zero or more char-filters.\n \n-When a field-content is analyzed to become a stream of tokens, the char-filter is applied at first.\n-It is used to filter some special chars from the stream of characters that make up the content.\n+When a field-content is analyzed to become a stream of tokens, the\n+char-filter is applied at first.  It is used to filter some special\n+chars from the stream of characters that make up the content.\n \n Tokenizers split the possibly filtered stream of characters into tokens.\n \n-Token-filters can add tokens, delete tokens or transform them to finally produce the desired\n-stream of tokens.\n-\n-With these elements in place, analyzer provide finegrained control over building a token stream\n-used for fulltext search.\n-For example you can use language specific analyzers, tokenizers and token-filters to get proper\n-search results for data provided in a certain language.\n-\n-\n-\n-Create Analyzer Syntax::\n-\n-    CREATE ANALYZER <analyzer_name> [EXTENDS <analyzer_name>] (\n-        [\n-          TOKENIZER <tokenizer_name> [WITH] (\n-            <tokenizer_property>=<value>,\n-            ...\n-          ),\n-        ]\n-        [\n-          TOKEN_FILTERS [WITH] (\n-            <token_filter_name>\n-            [ [WITH] (\n-                <token_filter_property>=<value>,\n-                ...\n-              )\n-            ],\n-            ...\n-          ),\n-        ]\n-        [\n-          CHAR_FILTERS [WITH] (\n-            <char_filter_name>\n-            [ [WITH] (\n-                <char_filter_property>=<value>,\n-                ...\n-              )\n-            ],\n-            ...\n-          )\n-        ]\n-    )\n-\n-Multiple char filters and token filters are allowed but at maximum one tokenizer.\n-Order does not matter.\n-A simple Example::\n+Token-filters can add tokens, delete tokens or transform them to\n+finally produce the desired stream of tokens.\n+\n+With these elements in place, analyzers provide finegrained control\n+over building a token stream used for fulltext search.  For example\n+you can use language specific analyzers, tokenizers and token-filters\n+to get proper search results for data provided in a certain language.\n+\n+Here is a simple Example::\n \n     cr> create ANALYZER myanalyzer (\n     ...   TOKENIZER whitespace,\n@@ -606,22 +580,17 @@ A simple Example::\n     ... )\n     CREATE OK (... sec)\n \n-This example creates an analyzer called ``myanalyzer`` to be used in index-definitions and\n-index-constraints.\n-It will use a :ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter` token-filter\n-and a :ref:`kstem-tokenfilter` token-filter, a :ref:`htmlstrip-charfilter` char-filter\n-and a custom char-filter that extends the :ref:`mapping-charfilter` char-filter.\n-\n-You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and :ref:`builtin-char-filter`\n-by just writing their names and you can extend and parameterize them,\n-see for example the ``mymapping`` char-filter above. You have to give these extended ones a\n-unique name.\n+This example creates an analyzer called ``myanalyzer`` to be used in\n+index-definitions and index-constraints.  It will use a\n+:ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter`\n+token-filter and a :ref:`kstem-tokenfilter` token-filter, a\n+:ref:`htmlstrip-charfilter` char-filter and a custom char-filter that\n+extends the :ref:`mapping-charfilter` char-filter.\n \n-.. note:: Starting with release 0.18.0 one could extend custom tokenizers,\n-          token-filters and char-filters. This is not possible anymore.\n-          Nonetheless you can still extend custom analyzers to reuse their elements.\n-          We might reintroduce this feature when we support creating tokenizers etc. standalone\n-          e.g. by a ``CREATE TOKENIZER`` statement.\n+You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and\n+:ref:`builtin-char-filter` by just writing their names and you can\n+extend and parameterize them, see for example the ``mymapping``\n+char-filter above. You have to give these extended ones a unique name.\n \n Extending Bultin Analyzer\n -------------------------\n@@ -635,12 +604,12 @@ You can extend and parameterize :ref:`builtin-analyzer` like this::\n     ... )\n     CREATE OK (... sec)\n \n-If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or token-filter cannot be defined.\n-In this case use the parameters available for the extended :ref:`builtin-analyzer`.\n+If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or\n+token-filter cannot be defined.  In this case use the parameters\n+available for the extended :ref:`builtin-analyzer`.\n \n-If you extend custom-analyzers, every part of the analyzer that is ommitted will be taken from\n-the extended one.\n-Example::\n+If you extend custom-analyzers, every part of the analyzer that is\n+ommitted will be taken from the extended one.  Example::\n \n     cr> create ANALYZER e2 EXTENDS myanalyzer (\n     ...     TOKENIZER mypattern WITH (\n@@ -650,8 +619,8 @@ Example::\n     ... )\n     CREATE OK (... sec)\n \n-This analyzer will use the char-filters and token-filters from ``myanalyzer``\n-and will override the tokenizer with ``mypattern``.\n+This analyzer will use the char-filters and token-filters from\n+``myanalyzer`` and will override the tokenizer with ``mypattern``.\n \n Analyzer Reference\n ------------------\ndiff --git a/docs/sql/dml.txt b/docs/sql/dml.txt\nindex 6928a51ab2..c2f636fb9d 100644\n--- a/docs/sql/dml.txt\n+++ b/docs/sql/dml.txt\n@@ -548,6 +548,8 @@ Deleting rows in Crate is done using the SQL ``DELETE`` statement::\n     DELETE OK, ... rows affected (... sec)\n \n \n+.. _importing_data:\n+\n Importing data\n ==============\n \ndiff --git a/docs/sql/index.txt b/docs/sql/index.txt\nindex c6ea8397ac..c5c9dccf3c 100644\n--- a/docs/sql/index.txt\n+++ b/docs/sql/index.txt\n@@ -2,8 +2,9 @@\n Crate SQL\n =========\n \n-Crate uses SQL to query documents.\n-For general information about SQL please refer to `Wikipedia SQL`_.\n+Crate uses SQL to query documents. For consice reference documentation\n+see :doc:`sql`. For general information about SQL please refer to\n+`Wikipedia SQL`_.\n \n .. _`Wikipedia SQL`: http://en.wikipedia.org/wiki/Sql\n \ndiff --git a/docs/sql/reference/copy.txt b/docs/sql/reference/copy.txt\nnew file mode 100644\nindex 0000000000..f0e19c946d\n--- /dev/null\n+++ b/docs/sql/reference/copy.txt\n@@ -0,0 +1,39 @@\n+====\n+COPY\n+====\n+\n+Copy data between a file and a table.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    COPY table_ident FROM 'path'\n+\n+Description\n+===========\n+\n+COPY FROM copies data from the filesystem of any cluster node to a\n+specified table.\n+\n+The files to be copied from need to be accessible from the crate\n+server process and the name must be specified from the viewpoint of\n+the server.\n+\n+The input files need to have one line per record. Records are\n+formatted in JSON.\n+\n+For examples see: :ref:`importing_data`.\n+\n+Parameters\n+==========\n+\n+:table_ident: The name (optionally schema-qualified) of an existing\n+    table where the data should be put.\n+\n+:path: A file or directory path with an optional `PCRE`_ file pattern\n+    suffix. If the path is relative, it is based on the absolute path\n+    of the node's data location.\n+\n+.. _PCRE: http://www.pcre.org/\ndiff --git a/docs/sql/reference/create_analyzer.txt b/docs/sql/reference/create_analyzer.txt\nnew file mode 100644\nindex 0000000000..051ccc6514\n--- /dev/null\n+++ b/docs/sql/reference/create_analyzer.txt\n@@ -0,0 +1,64 @@\n+===============\n+CREATE ANALYZER\n+===============\n+\n+Define a new fulltext analyzer.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    CREATE ANALYZER analyzer_name EXTENDS parent_analyzer_name\n+        WITH ( override_parameter [= value] [, ... ] )\n+\n+.. code-block:: sql\n+\n+    CREATE ANALYZER analyzer_name (\n+        [ TOKENIZER tokenizer_name\n+           [ WITH ( tokenizer_parameter [= value] [, ... ] ) ]\n+        ]\n+        [ TOKEN_FILTERS (\n+            { token_filter_name\n+              [ WITH ( token_filter_parameter [= value] [, ... ] ) ] }\n+            [, ... ]\n+          )\n+        ]\n+        [ CHAR_FILTERS (\n+            { char_filter_name\n+              [ WITH ( char_filter_parameter [= value] [, ... ] ) ] }\n+            [, ... ]\n+          )\n+        ]\n+    )\n+\n+Description\n+===========\n+\n+CREATE ANALYZER speifies a whole analyzer chain for use in fulltext\n+searches. It is possible to extend an existing analyzer or define a\n+new analyzer chain from scratch. For examples and detailed explanation\n+see :ref:`create_custom_analyzer`.\n+\n+Parameters\n+==========\n+\n+:analyzer_name: the globally unique name of the analzyer being created.\n+\n+:parent_analyzer_name: the name of the analyzer to inherit defaults from.\n+\n+:override_parameter: the name of a parameter of the parent analyzer\n+    which should be assigned a new value to.\n+\n+:tokenizer_name: the name of a builtin tokenizer to be used.\n+\n+:tokenizer_parameter: a name of a parameter for a given tokenizer.\n+\n+:token_filter_name: the name of a builtin token filter to be used.\n+\n+:token_filter_parameter: a name of a parameter for a given token filter.\n+\n+:char_filter_name: the name of a builtin char filter to be used.\n+\n+:char_filter_parameter: a name of a parameter for a given char filter.\n+\ndiff --git a/docs/sql/reference/create_blob_table.txt b/docs/sql/reference/create_blob_table.txt\nnew file mode 100644\nindex 0000000000..d895ff6c4e\n--- /dev/null\n+++ b/docs/sql/reference/create_blob_table.txt\n@@ -0,0 +1,24 @@\n+=================\n+CREATE BLOB TABLE\n+=================\n+\n+Define a new table for storing binary large objects.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    CREATE BLOB TABLE table_name\n+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]\n+    [ WITH ( storage_parameter [= value] [, ... ] ) ]\n+\n+\n+Description\n+===========\n+\n+CREATE BLOB TABLE will create a new table for holding BLOBS. For\n+details and examples see :ref:`blob_support`.\n+\n+The CLUSTERED and WITH clauses follow the same semantics described\n+under :ref:`clustered_clause` and :ref:`with_clause`.\ndiff --git a/docs/sql/reference/create_table.txt b/docs/sql/reference/create_table.txt\nnew file mode 100644\nindex 0000000000..ff2edafabc\n--- /dev/null\n+++ b/docs/sql/reference/create_table.txt\n@@ -0,0 +1,148 @@\n+============\n+CREATE TABLE\n+============\n+\n+Define a new table.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    CREATE TABLE table_name ( [\n+    { column_name data_type [ column_constraint [ ... ] ] | table_constraint }\n+    [, ... ] ] )\n+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]\n+    [ WITH ( storage_parameter [= value] [, ... ] ) ]\n+\n+\n+where ``column_constraint`` is:\n+\n+.. code-block:: sql\n+\n+  { PRIMARY KEY |\n+    INDEX { OFF | USING { PLAIN |\n+                          FULLTEXT [ WITH ( analyzer = analyzer_name ) ]  }\n+  }\n+\n+\n+and table_constraint is:\n+\n+.. code-block:: sql\n+\n+  { PRIMARY KEY ( column_name [, ... ] ) |\n+    INDEX index_name USING FULLTEXT ( column_name [, ... ] )\n+         [ WITH ( analyzer = analyzer_name ) ]\n+  }\n+\n+Description\n+===========\n+\n+CREATE TABLE will create a new, initially empty table.\n+\n+Setting a schema (for example, CREATE TABLE myschema.mytable ...) is\n+currently not supprted. All userspace defined data tables are defined\n+under the default schema named ``doc``.\n+\n+The optional constraint clauses specify constraints (tests) that new\n+or updated rows must satisfy for an insert or update operation to\n+succeed. A constraint is an SQL object that helps define the set of\n+valid values in the table in various ways.\n+\n+There are two ways to define constraints: table constraints and column\n+constraints. A column constraint is defined as part of a column\n+definition. A table constraint definition is not tied to a particular\n+column, and it can encompass more than one column. Every column\n+constraint can also be written as a table constraint; a column\n+constraint is only a notational convenience for use when the\n+constraint only affects one column.\n+\n+Parameters\n+==========\n+\n+:table_name: The name (optionally schema-qualified) of the table to\n+    be created.\n+\n+:column_name: The name of a column to be created in the new table.\n+\n+:data_type: The data type of the column. This can include array and\n+    object specifiers. For more information on the data types\n+    supported by Crate see .\n+\n+PRIMARY KEY Constraint\n+======================\n+\n+The PRIMARY KEY constraint specifies that a column or columns of a\n+table can contain only unique (non-duplicate), nonnull values.\n+\n+Only one primary key can be specified for a table, whether as a column\n+constraint or a table constraint.\n+\n+INDEX Constraint\n+================\n+\n+The INDEX constraint specifies a specific index method on one or more\n+columnns.\n+\n+It is possible to define more than one index per table, whether as a\n+column constraint or a table constraint.\n+\n+For further details about the meaning of the options see\n+:ref:`indices_and_fulltext`.\n+\n+.. _clustered_clause:\n+\n+CLUSTERED Clause\n+================\n+\n+The optional CLUSTERED clause specifies how a table should be\n+distributed accross a cluster.\n+\n+:num_shards: specifies the number of shards a table is stored in, the default is 5.\n+\n+:routing_column: allows to explicitly specify a column or field on\n+    which basis rows are sharded. all rows having the same value in\n+    ``routing_column`` are stored in the same shard. The default is\n+    the primary key if specified, otherwise the internal ``_id``\n+    column.\n+\n+.. _with_clause:\n+\n+WITH Clause\n+-----------\n+\n+The optional WITH clause can specify storage parameters for tables.\n+\n+.. code-block:: sql\n+\n+    [ WITH ( storage_parameter [= value] [, ... ] ) ]\n+\n+\n+:storage_parameter: specifies an optional storage parameter for the table.\n+\n+Available storage paramters are:\n+\n+\n+.. _number_of_replicas:\n+\n+number_of_replicas\n+~~~~~~~~~~~~~~~~~~\n+\n+Specifies the number or range of replicas each shard of a table should\n+have for normal operation, the default is to have 1 replica.\n+\n+The number of replicas is defined like this:\n+\n+.. code-block:: sql\n+\n+    min_replicas [ - [ max_replicas ] ]\n+\n+:min_replicas: The minimum number of replicas required.\n+\n+:max_replicas: The maximum number of replicas. The actual maximum\n+    number of replicas is max(num_replicas, N-1), where N is the\n+    number of data nodes in the cluster. If ``max_replicas`` is the\n+    string ``all`` then it will always be N.\n+\n+For further details and examples see :ref:`replication`.\n+\ndiff --git a/docs/sql/reference/delete.txt b/docs/sql/reference/delete.txt\nnew file mode 100644\nindex 0000000000..c9fe959745\n--- /dev/null\n+++ b/docs/sql/reference/delete.txt\n@@ -0,0 +1,30 @@\n+======\n+DELETE\n+======\n+\n+Delete rows of a table\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    DELETE FROM table_ident [ WHERE condition ]\n+\n+Description\n+===========\n+\n+DELETE deletes rows that satisfy the WHERE clause from the specified\n+table. If the WHERE clause is absent, the effect is to delete all rows\n+in the table. The result is a valid, but empty table.\n+\n+Parameters\n+==========\n+\n+\n+:table_ident: The name (optionally schema-qualified) of an existing\n+    table to delete rows from.\n+\n+:condition: An expression that returns a value of type boolean. Only\n+    rows for which this expression returns true will be deleted.\n+\ndiff --git a/docs/sql/reference/drop_table.txt b/docs/sql/reference/drop_table.txt\nnew file mode 100644\nindex 0000000000..7cc7822b04\n--- /dev/null\n+++ b/docs/sql/reference/drop_table.txt\n@@ -0,0 +1,25 @@\n+==========\n+DROP TABLE\n+==========\n+\n+Remove a table.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    DROP [BLOB] TABLE table_name\n+\n+Description\n+===========\n+\n+DROP TABLE removes tables from the cluster.\n+\n+Use the ``BLOB`` keyword in order to remove a blob table (see\n+:ref:`blob_support`).\n+\n+Parameters\n+==========\n+\n+:table_name: The name (optionally schema-qualified) of the table to be removed.\ndiff --git a/docs/sql/reference/insert.txt b/docs/sql/reference/insert.txt\nnew file mode 100644\nindex 0000000000..ef13f0504e\n--- /dev/null\n+++ b/docs/sql/reference/insert.txt\n@@ -0,0 +1,45 @@\n+======\n+INSERT\n+======\n+\n+Create new rows in a table.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+   INSERT INTO table_ident\n+    [ ( column_ident [, ...] ) ]\n+    VALUES ( expression [, ...] ) [, ...]\n+\n+Description\n+===========\n+\n+INSERT creates one or more rows specified by value expressions.\n+\n+The target column names can be listed in any order. If no list of\n+column names is given at all, the default is all the columns of the\n+table in lexical order; or the first N column names, if there are only\n+N columns supplied by the VALUES clause. The values supplied by the\n+VALUES clause are associated with the explicit or implicit column list\n+left-to-right.\n+\n+Each column not present in the explicit or implicit column list will\n+not be filled.\n+\n+If the expression for any column is not of the correct data type,\n+automatic type conversion will be attempted.\n+\n+\n+Parameters\n+==========\n+\n+:table_ident: The identifier (optionally schema-qualified) of an\n+    existing table.\n+\n+:column_ident: The name of a column or field in the table pointed to\n+   by table_ident.\n+\n+:expression: An expression or value to assign to the corresponding column.\n+\ndiff --git a/docs/sql/reference/select.txt b/docs/sql/reference/select.txt\nnew file mode 100644\nindex 0000000000..84f32352ab\n--- /dev/null\n+++ b/docs/sql/reference/select.txt\n@@ -0,0 +1,193 @@\n+======\n+SELECT\n+======\n+\n+Retrieve rows from a table.\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+   SELECT * | expression [ [ AS ] output_name ] [, ...] FROM table_ident\n+     [ WHERE condition ]\n+     [ GROUP BY expression [, ...] ]\n+     [ ORDER BY expression [ ASC | DESC ] [, ...] ]\n+     [ LIMIT num_results ]\n+     [ OFFSET start ]\n+\n+\n+Description\n+===========\n+\n+SELECT retrieves rows from a table. The general processing of SELECT\n+is as follows:\n+\n+- The FROM item points to the table where the data should be retrieved\n+  from.\n+\n+- If the WHERE clause is specified, all rows that do not satisfy the\n+  condition are eliminated from the output. (See WHERE Clause below.)\n+\n+- If the GROUP BY clause is specified, the output is combined into\n+  groups of rows that match on one or more values.\n+\n+- The actual output rows are computed using the SELECT output\n+  expressions for each selected row or row group.\n+\n+- If the ORDER BY clause is specified, the returned rows are sorted in\n+  the specified order. If ORDER BY is not given, the rows are returned\n+  in whatever order the system finds fastest to produce.\n+\n+- If the LIMIT or OFFSET clause is specified, the SELECT statement\n+  only returns a subset of the result rows.\n+\n+Parameters\n+==========\n+\n+SELECT List\n+-----------\n+\n+The SELECT list specifies expressions that form the output rows of the\n+SELECT statement. The expressions can (and usually do) refer to\n+columns computed in the FROM clause.\n+\n+.. code-block:: sql\n+\n+    SELECT * | expression [ [ AS ] output_name ] [, ...]\n+\n+Just as in a table, every output column of a SELECT has a name. In a\n+simple SELECT this name is just used to label the column for\n+display. To specify the name to use for an output column, write AS\n+``output_name`` after the column's ``expression``. (You can omit AS,\n+but only if the desired output name does not match any reserved\n+keyword. For protection against possible future keyword additions, it\n+is recommended that you always either write AS or double-quote the\n+output name.) If you do not specify a column name, a name is chosen\n+automatically by Crate. If the column's expression is a simple column\n+reference then the chosen name is the same as that column's name. In\n+more complex cases a function or type name may be used, or the system\n+may fall back on a generated name.\n+\n+An output column's name can be used to refer to the column's value in\n+ORDER BY and GROUP BY clauses, but not in the WHERE clause; there you\n+must write out the expression instead.\n+\n+Instead of an expression, ``*`` can be written in the output list as a\n+shorthand for all the columns of the selected rows. Also, you can\n+write table_name.* as a shorthand for the columns coming from just\n+that table. In these cases it is not possible to specify new names\n+with AS; the output column names will be the same as the table\n+columns' names.\n+\n+FROM Clause\n+-----------\n+\n+The FROM clause specifies the source table for the SELECT:\n+\n+.. code-block:: sql\n+\n+    FROM table_ident\n+\n+:table_ident: The name (optionally schema-qualified) of an existing table.\n+\n+\n+WHERE Clause\n+------------\n+\n+The optional WHERE clause defines the condition to be met for a row to\n+be returned:\n+\n+.. code-block:: sql\n+\n+    WHERE condition\n+\n+:condition: a where condition is any expression that evaluates to a\n+  result of type boolean. Any row that does not satisfy this condition\n+  will be eliminated",
    "Enhanced the path cache to be more efficient and allow for different caching modes .": "diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java\nindex e33cb784..545f9af3 100644\n--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java\n+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java\n@@ -17,6 +17,7 @@ package com.netflix.curator.framework.recipes.cache;\n \n import org.apache.zookeeper.data.Stat;\n \n+@SuppressWarnings({\"LoopStatementThatDoesntLoop\"})\n public class ChildData implements Comparable<ChildData>\n {\n     private final String    path;\n@@ -31,9 +32,34 @@ public class ChildData implements Comparable<ChildData>\n         this.data = data;\n     }\n \n-    boolean     isComplete()\n+    boolean     isComplete(PathChildrenCacheMode mode)\n     {\n-        return (path != null) && (stat != null) && (data != null);\n+        boolean     isComplete = false;\n+        if ( path != null )\n+        {\n+            switch ( mode )\n+            {\n+                case CACHE_DATA_AND_STAT:\n+                {\n+                    isComplete = (stat != null) && (data != null);\n+                    break;\n+                }\n+                \n+                case CACHE_DATA:\n+                {\n+                    isComplete = (data != null);\n+                    break;\n+                }\n+\n+                case CACHE_PATHS_ONLY:\n+                {\n+                    isComplete = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return isComplete;\n     }\n \n     long        getThisObjectCreationTimeMs()\n@@ -79,33 +105,47 @@ public class ChildData implements Comparable<ChildData>\n         return path.hashCode();\n     }\n \n-    public ChildData setPath(String path)\n-    {\n-        return new ChildData(path, stat, data);\n-    }\n-\n-    public ChildData setStat(Stat stat)\n-    {\n-        return new ChildData(path, stat, data);\n-    }\n-\n-    public ChildData setData(byte[] data)\n-    {\n-        return new ChildData(path, stat, data);\n-    }\n-\n+    /**\n+     * Returns the full path of the this child\n+     *\n+     * @return full path\n+     */\n     public String getPath()\n     {\n         return path;\n     }\n \n+    /**\n+     * Returns the stat data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}\n+     *\n+     * @return stat or null\n+     */\n     public Stat getStat()\n     {\n         return stat;\n     }\n \n+    /**\n+     * <p>Returns the node data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}\n+     * or {@link PathChildrenCacheMode#CACHE_DATA}.</p>\n+     *\n+     * <p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change\n+     * the values in the array any other callers to this method will see the change.</p>\n+     *\n+     * @return node data or null\n+     */\n     public byte[] getData()\n     {\n         return data;\n     }\n+\n+    ChildData setStat(Stat stat)\n+    {\n+        return new ChildData(path, stat, data);\n+    }\n+\n+    ChildData setData(byte[] data)\n+    {\n+        return new ChildData(path, stat, data);\n+    }\n }\ndiff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java\nindex 54835545..80e0d754 100644\n--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java\n+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java\n@@ -17,13 +17,12 @@ package com.netflix.curator.framework.recipes.cache;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n import com.google.common.io.Closeables;\n import com.google.common.util.concurrent.MoreExecutors;\n-import com.netflix.curator.framework.api.CuratorEvent;\n import com.netflix.curator.framework.CuratorFramework;\n+import com.netflix.curator.framework.api.CuratorEvent;\n import com.netflix.curator.framework.api.CuratorListener;\n import com.netflix.curator.utils.ZKPaths;\n import org.apache.zookeeper.WatchedEvent;\n@@ -31,7 +30,6 @@ import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.data.Stat;\n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.BlockingQueue;\n@@ -53,10 +51,13 @@ import java.util.concurrent.ThreadFactory;\n  */\n public class PathChildrenCache implements Closeable\n {\n-    private final CuratorFramework client;\n+    private final CuratorFramework          client;\n     private final String                    path;\n+    private final PathChildrenCacheMode     mode;\n     private final ExecutorService           executorService;\n \n+    private static final ChildData          existingDataMarker = new ChildData(null, null, null);\n+\n     private final BlockingQueue<EventEntry>                         listenerEvents = new LinkedBlockingQueue<EventEntry>();\n     private final Map<PathChildrenCacheListener, ListenerEntry>     listeners = Maps.newConcurrentMap();\n     private final Map<String, ChildData>                            currentData = Maps.newConcurrentMap();\n@@ -127,26 +128,27 @@ public class PathChildrenCache implements Closeable\n         }\n     }\n \n-    private static final int                EXPIRE_INCOMING_TIME_MS = 5 * 60 * 60 * 1000;   // 5 minutes\n-\n     /**\n      * @param client the client\n      * @param path path to watch\n+     * @param mode caching mode\n      */\n-    public PathChildrenCache(CuratorFramework client, String path)\n+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode)\n     {\n-        this(client, path, Executors.defaultThreadFactory());\n+        this(client, path, mode, Executors.defaultThreadFactory());\n     }\n \n     /**\n      * @param client the client\n      * @param path path to watch\n+     * @param mode caching mode\n      * @param threadFactory factory to use when creating internal threads\n      */\n-    public PathChildrenCache(CuratorFramework client, String path, ThreadFactory threadFactory)\n+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode, ThreadFactory threadFactory)\n     {\n         this.client = client;\n         this.path = path;\n+        this.mode = mode;\n         executorService = Executors.newFixedThreadPool(1, threadFactory);\n     }\n \n@@ -222,7 +224,7 @@ public class PathChildrenCache implements Closeable\n     }\n \n     /**\n-     * Return a copy of the current data. There are no guarantees of accuracy. This is\n+     * Return the current data. There are no guarantees of accuracy. This is\n      * merely the most recent view of the data. The data is returned in sorted order.\n      *\n      * @return list of children and data\n@@ -232,6 +234,19 @@ public class PathChildrenCache implements Closeable\n         return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()));\n     }\n \n+    /**\n+     * Return the current data for the given path. There are no guarantees of accuracy. This is\n+     * merely the most recent view of the data. If there is no child with that path, <code>null</code>\n+     * is returned.\n+     *\n+     * @param fullPath full path to the node to check\n+     * @return data or null\n+     */\n+    public ChildData            getCurrentData(String fullPath)\n+    {\n+        return currentData.get(fullPath);\n+    }\n+\n     /**\n      * Clear out current data and begin a new query on the path\n      *\n@@ -240,12 +255,12 @@ public class PathChildrenCache implements Closeable\n     public void clearAndRefresh() throws Exception\n     {\n         currentData.clear();\n-        incomingData.clear();\n         refresh();\n     }\n \n     private void refresh() throws Exception\n     {\n+        incomingData.clear();\n         client.getChildren().usingWatcher(watcher).inBackground().forPath(path);\n     }\n \n@@ -331,7 +346,7 @@ public class PathChildrenCache implements Closeable\n         {\n             case CHILDREN:\n             {\n-                processChildren(event.getChildren(), true);\n+                processChildren(event.getChildren());\n                 break;\n             }\n \n@@ -371,20 +386,13 @@ public class PathChildrenCache implements Closeable\n     {\n         switch ( watchedEvent.getType() )\n         {\n-            case NodeCreated:\n             case NodeDataChanged:\n             {\n-                processNodeCreated(ZKPaths.getNodeFromPath(watchedEvent.getPath()));\n-                break;\n-            }\n-\n-            case NodeDeleted:\n-            {\n-                processNodeDeleted(watchedEvent.getPath());\n+                processDataChanged(watchedEvent.getPath());\n                 break;\n             }\n \n-            case NodeChildrenChanged:\n+            default:\n             {\n                 refresh();\n                 break;\n@@ -392,43 +400,31 @@ public class PathChildrenCache implements Closeable\n         }\n     }\n \n-    private void processNodeCreated(String path) throws Exception\n+    private void processDataChanged(String path) throws Exception\n     {\n-        List<String>        l = Lists.newArrayList(path);\n-        processChildren(l, false);\n-    }\n-\n-    private void processNodeDeleted(String path)\n-    {\n-        ChildData       oldData = currentData.remove(path);\n-        incomingData.remove(path);\n-\n-        if ( oldData != null )\n-        {\n-            listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, oldData)));\n-        }\n+        addIncomingPath(path);\n     }\n \n     private void        checkSetCurrent()\n     {\n-        Iterator<ChildData>     iterator = incomingData.values().iterator();\n-        while ( iterator.hasNext() )\n+        for ( Map.Entry<String, ChildData> entry : incomingData.entrySet() )\n         {\n-            ChildData       data = iterator.next();\n-            if ( data.isComplete() )\n+            String          path = entry.getKey();\n+            ChildData       data = entry.getValue();\n+\n+            if ( data.isComplete(mode) )\n             {\n                 boolean     isNew = (currentData.put(data.getPath(), data) == null);\n-                iterator.remove();\n+                incomingData.remove(path);\n \n                 listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(isNew ? PathChildrenCacheEvent.Type.CHILD_ADDED : PathChildrenCacheEvent.Type.CHILD_UPDATED, data)));\n             }\n-            else\n+            else if ( isTheExistingDataMarker(data) )\n             {\n-                long        age = System.currentTimeMillis() - data.getThisObjectCreationTimeMs();\n-                if ( age >= EXPIRE_INCOMING_TIME_MS )\n-                {\n-                    iterator.remove();\n-                }\n+                ChildData       removedData = currentData.remove(path);\n+                incomingData.remove(path);\n+\n+                listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, removedData)));\n             }\n         }\n     }\n@@ -457,23 +453,51 @@ public class PathChildrenCache implements Closeable\n         checkSetCurrent();\n     }\n \n-    private void processChildren(List<String> children, boolean doRetain) throws Exception\n+    private void processChildren(List<String> children) throws Exception\n     {\n-        for ( String child : children )\n+        for ( String path : currentData.keySet() )\n         {\n-            String actualPath = ZKPaths.makePath(path, child);\n-            incomingData.put(actualPath, new ChildData(actualPath, null, null));\n+            incomingData.put(path, existingDataMarker);\n         }\n-        if ( doRetain )\n+\n+        for ( String child : children )\n         {\n-            currentData.keySet().retainAll(incomingData.keySet());\n+            String      actualPath = ZKPaths.makePath(path, child);\n+            addIncomingPath(actualPath);\n         }\n \n-        for ( String child : children )\n+        checkSetCurrent();\n+    }\n+\n+    private void addIncomingPath(String actualPath) throws Exception\n+    {\n+        incomingData.put(actualPath, new ChildData(actualPath, null, null));\n+\n+        switch ( mode )\n         {\n-            String actualPath = ZKPaths.makePath(path, child);\n-            client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);\n-            client.checkExists().usingWatcher(watcher).inBackground().forPath(actualPath);\n+            case CACHE_DATA_AND_STAT:\n+            {\n+                client.checkExists().inBackground().forPath(actualPath);    // to get the stat\n+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change\n+                break;\n+            }\n+\n+            case CACHE_DATA:\n+            {\n+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change\n+                break;\n+            }\n+\n+            case CACHE_PATHS_ONLY:\n+            {\n+                // do nothing\n+                break;\n+            }\n         }\n     }\n+\n+    private static boolean isTheExistingDataMarker(ChildData data)\n+    {\n+        return data == existingDataMarker;\n+    }\n }\ndiff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java\nnew file mode 100644\nindex 00000000..2f1264ef\n--- /dev/null\n+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java\n@@ -0,0 +1,25 @@\n+package com.netflix.curator.framework.recipes.cache;\n+\n+/**\n+ * Controls which data is cached\n+ */\n+public enum PathChildrenCacheMode\n+{\n+    /**\n+     * The cache will hold all the children, the data for each child node\n+     * and the stat for each child node\n+     */\n+    CACHE_DATA_AND_STAT,\n+\n+    /**\n+     * The cache will hold all the children and the data for each child node.\n+     * {@link ChildData#getStat()} will return <code>null</code>.\n+     */\n+    CACHE_DATA,\n+\n+    /**\n+     * The cache will hold only the children path names.\n+     * {@link ChildData#getStat()} and {@link ChildData#getData()} will both return <code>null</code>.\n+     */\n+    CACHE_PATHS_ONLY\n+}\ndiff --git a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java\nindex 35c78a8a..f5718ae7 100644\n--- a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java\n+++ b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java\n@@ -29,18 +29,104 @@ import java.util.concurrent.TimeUnit;\n public class TestPathChildrenCache extends BaseClassForTests\n {\n     @Test\n-    public void     testException() throws Exception\n+    public void     testModes() throws Exception\n     {\n         CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));\n         client.start();\n         try\n         {\n-            Assert.assertTrue(client.getZookeeperClient().blockUntilConnectedOrTimedOut());\n+            client.create().forPath(\"/test\", new byte[0]);\n+\n+            for ( PathChildrenCacheMode mode : PathChildrenCacheMode.values() )\n+            {\n+                internalTestMode(client, mode);\n+\n+                client.delete().forPath(\"/test/one\");\n+                client.delete().forPath(\"/test/two\");\n+            }\n+        }\n+        finally\n+        {\n+            client.close();\n+        }\n+    }\n+\n+    private void     internalTestMode(CuratorFramework client, PathChildrenCacheMode testMode) throws Exception\n+    {\n+        PathChildrenCache       cache = new PathChildrenCache(client, \"/test\", testMode);\n+\n+        final CountDownLatch    latch = new CountDownLatch(2);\n+        cache.addListener\n+        (\n+            new PathChildrenCacheListener()\n+            {\n+                @Override\n+                public void handleException(CuratorFramework client, Exception exception)\n+                {\n+                }\n+\n+                @Override\n+                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception\n+                {\n+                    if ( event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED )\n+              ",
    "Removed the builder and made the internal context object mutable . . Also various fix ups from PR review": "diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java\nindex fb5d8b205..fdd9f46b3 100644\n--- a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java\n+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java\n@@ -42,8 +42,6 @@ import com.mysema.query.types.ParamNotSetException;\n import com.mysema.query.types.Path;\n import com.mysema.util.ResultSetAdapter;\n \n-import static com.mysema.query.sql.SQLListenerContextBuilder.newContext;\n-\n /**\n  * AbstractSQLQuery is the base type for SQL query implementations\n  *\n@@ -130,9 +128,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n      * @param metadata the meta data for that context\n      * @return  the newly started context\n      */\n-    protected SQLListenerContext startContext(Connection connection, QueryMetadata metadata)\n+    protected SQLListenerContextImpl startContext(Connection connection, QueryMetadata metadata)\n     {\n-        SQLListenerContext context = newContext(metadata).with(connection).build();\n+        SQLListenerContextImpl context = new SQLListenerContextImpl(metadata,connection);\n         listeners.start(context);\n         return context;\n     }\n@@ -144,9 +142,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n      * @param e the exception\n      * @return the new context\n      */\n-    protected SQLListenerContext onException(SQLListenerContext context, Exception e)\n+    protected SQLListenerContextImpl onException(SQLListenerContextImpl context, Exception e)\n     {\n-        context = newContext(context).with(e).build();\n+        context.setException(e);\n         listeners.exception(context);\n         return context;\n     }\n@@ -171,7 +169,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n     public ResultSet getResults(Expression<?>... exprs) {\n         queryMixin.addProjection(exprs);\n \n-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());\n+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());\n \n         listeners.preRender(context);\n         SQLSerializer serializer = serialize(false);\n@@ -179,7 +177,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"query : {}\", queryString);\n         }\n-        context = newContext(context).with(queryString).build();\n+        context.addSQL(queryString);\n         listeners.rendered(context);\n \n         listeners.notifyQuery(queryMixin.getMetadata());\n@@ -189,7 +187,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n             listeners.prePrepare(context);\n             final PreparedStatement stmt = conn.prepareStatement(queryString);\n             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());\n-            context = newContext(context).with(stmt).build();\n+            context.addPreparedStatement(stmt);\n             listeners.prepared(context);\n \n             listeners.preExecute(context);\n@@ -227,7 +225,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n \n     @SuppressWarnings(\"unchecked\")\n     private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullable final Expression<RT> expr) {\n-        SQLListenerContext context = startContext(conn,queryMixin.getMetadata());\n+        SQLListenerContextImpl context = startContext(conn,queryMixin.getMetadata());\n \n         listeners.preRender(context);\n         SQLSerializer serializer = serialize(false);\n@@ -235,7 +233,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"query : {}\", queryString);\n         }\n-        context = newContext(context).with(queryString).build();\n+        context.addSQL(queryString);\n         listeners.rendered(context);\n \n \n@@ -245,7 +243,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n             listeners.prePrepare(context);\n             final PreparedStatement stmt = conn.prepareStatement(queryString);\n             setParameters(stmt, constants, serializer.getConstantPaths(), metadata.getParams());\n-            context = newContext(context).with(stmt).build();\n+            context.addPreparedStatement(stmt);\n             listeners.prepared(context);\n \n             listeners.preExecute(context);\n@@ -300,7 +298,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n     @Override\n     public <RT> List<RT> list(Expression<RT> expr) {\n         expr = queryMixin.addProjection(expr);\n-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());\n+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());\n \n         listeners.preRender(context);\n         SQLSerializer serializer = serialize(false);\n@@ -308,7 +306,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"query : {}\", queryString);\n         }\n-        context = newContext(context).with(queryString).build();\n+        context.addSQL(queryString);\n         listeners.rendered(context);\n \n         listeners.notifyQuery(queryMixin.getMetadata());\n@@ -318,7 +316,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n             final PreparedStatement stmt = conn.prepareStatement(queryString);\n             try {\n                 setParameters(stmt, constants, serializer.getConstantPaths(), queryMixin.getMetadata().getParams());\n-                context = newContext(context).with(stmt).build();\n+                context.addPreparedStatement(stmt);\n                 listeners.prepared(context);\n \n                 listeners.preExecute(context);\n@@ -359,23 +357,16 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n                     }\n                     return rv;\n                 } catch (IllegalAccessException e) {\n-                    context = newContext(context).with(e).build();\n-                    listeners.exception(context);\n-\n+                    onException(context, e);\n                     throw new QueryException(e);\n                 } catch (InvocationTargetException e) {\n-                    context = newContext(context).with(e).build();\n-                    listeners.exception(context);\n-\n+                    onException(context,e);\n                     throw new QueryException(e);\n                 } catch (InstantiationException e) {\n-                    context = newContext(context).with(e).build();\n-                    listeners.exception(context);\n-\n+                    onException(context,e);\n                     throw new QueryException(e);\n                 } catch (SQLException e) {\n-                    context = onException(context, e);\n-\n+                    onException(context,e);\n                     throw configuration.translate(queryString, constants, e);\n                 } finally {\n                     rs.close();\n@@ -481,7 +472,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n     }\n \n     private long unsafeCount() throws SQLException {\n-        SQLListenerContext context = startContext(conn,getMetadata());\n+        SQLListenerContextImpl context = startContext(conn,getMetadata());\n \n         listeners.preRender(context);\n         SQLSerializer serializer = serialize(true);\n@@ -489,7 +480,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"query : {}\", queryString);\n         }\n-        context = newContext(context).with(queryString).build();\n+        context.addSQL(queryString);\n         listeners.rendered(context);\n \n         List<Object> constants = serializer.getConstants();\n@@ -501,7 +492,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr\n             stmt = conn.prepareStatement(queryString);\n             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());\n \n-            context = newContext(context).with(stmt).build();\n+            context.addPreparedStatement(stmt);\n             listeners.prepared(context);\n \n             listeners.preExecute(context);\ndiff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java\nindex d64107c66..e542adcb7 100644\n--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java\n+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java\n@@ -18,11 +18,11 @@ class SQLListenerAdapter implements SQLDetailedListener\n {\n \n     private final SQLListener sqlListener;\n-    private final SQLDetailedListener SQLDetailedListener;\n+    private final SQLDetailedListener detailedListener;\n \n     SQLListenerAdapter(final SQLListener sqlListener)\n     {\n-        this.SQLDetailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;\n+        this.detailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;\n         this.sqlListener = sqlListener;\n     }\n \n@@ -34,81 +34,81 @@ class SQLListenerAdapter implements SQLDetailedListener\n     @Override\n     public void start(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.start(context);\n+            detailedListener.start(context);\n         }\n     }\n \n     @Override\n     public void preRender(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.preRender(context);\n+            detailedListener.preRender(context);\n         }\n     }\n \n     @Override\n     public void rendered(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.rendered(context);\n+            detailedListener.rendered(context);\n         }\n     }\n \n     @Override\n     public void prePrepare(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.prePrepare(context);\n+            detailedListener.prePrepare(context);\n         }\n     }\n \n     @Override\n     public void prepared(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.prepared(context);\n+            detailedListener.prepared(context);\n         }\n     }\n \n     @Override\n     public void preExecute(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.preExecute(context);\n+            detailedListener.preExecute(context);\n         }\n     }\n \n     @Override\n     public void executed(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.executed(context);\n+            detailedListener.executed(context);\n         }\n     }\n \n     @Override\n     public void end(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.end(context);\n+            detailedListener.end(context);\n         }\n     }\n \n     @Override\n     public void exception(final SQLListenerContext context)\n     {\n-        if (SQLDetailedListener != null)\n+        if (detailedListener != null)\n         {\n-            SQLDetailedListener.exception(context);\n+            detailedListener.exception(context);\n         }\n     }\n \ndiff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java\nindex 5c8563edd..c5c14681b 100644\n--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java\n+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java\n@@ -5,23 +5,34 @@ import com.mysema.query.QueryMetadata;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.util.Collection;\n-import java.util.Map;\n \n /**\n- * A context object that is progressively filled out during query execution and is\n- * passed to each {@link SQLDetailedListener} callback method\n+ * A context object that is progressively filled out during query execution and is passed to each {@link\n+ * SQLDetailedListener} callback method\n  */\n public interface SQLListenerContext\n {\n     /**\n-     * The context getMap is a general purpose place that listeners can place objects.  It allows listeners to pass context\n-     * between themselves during callbacks.\n+     * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass\n+     * context between themselves during callbacks.\n      * <p/>\n-     * This is never null but can be empty\n      *\n-     * @return the context getMap\n+     * @param dataKey the key to look up\n+     * @return the context object under that key\n      */\n-    Map<String, Object> getMap();\n+    Object getData(String dataKey);\n+\n+    /**\n+     * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass\n+     * context between themselves during callbacks.\n+     * <p/>\n+     * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}\n+     * and then access if after that.\n+     *\n+     * @param dataKey the key to use\n+     * @param value the value to place under that key\n+     */\n+    void setData(String dataKey, Object value);\n \n     /**\n      * @return the underlying query metadata\n@@ -31,10 +42,17 @@ public interface SQLListenerContext\n     /**\n      * NOTE : This can be null depending on the stage of the query execution\n      *\n-     * @return the underlying sql\n+     * @return the underlying sql or first in a batch query\n      */\n     String getSQL();\n \n+    /**\n+     * NOTE : This can be empty depending on the stage of the query execution\n+     *\n+     * @return the underlying sql collection if the query is a batch query\n+     */\n+    Collection<String> getSQLStatements();\n+\n     /**\n      * NOTE : This can be null depending on the stage of the query execution\n      *\n@@ -59,6 +77,13 @@ public interface SQLListenerContext\n     /**\n      * NOTE : This can be null depending on the stage of the query execution\n      *\n+     * @return the underlying prepared statement or the first if its batch query\n+     */\n+    PreparedStatement getPreparedStatement();\n+\n+    /**\n+     * NOTE : This can be empty depending on the stage of the query execution\n+     *\n      * @return the underlying set of prepared statements\n      */\n     Collection<PreparedStatement> getPreparedStatements();\ndiff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java\ndeleted file mode 100644\nindex a1e663805..000000000\n--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java\n+++ /dev/null\n@@ -1,175 +0,0 @@\n-package com.mysema.query.sql;\n-\n-import com.google.common.collect.Lists;\n-import com.mysema.query.QueryMetadata;\n-\n-import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * A builder of {@link com.mysema.query.sql.SQLListenerContext} objects\n- */\n-public class SQLListenerContextBuilder\n-{\n-    private Map<String, Object> contextMap = new HashMap<String, Object>();\n-\n-    private QueryMetadata md;\n-\n-    private String sql;\n-\n-    private RelationalPath<?> entity;\n-\n-    private Connection connection;\n-\n-    private Exception exception;\n-\n-    private Collection<PreparedStatement> preparedStatements;\n-\n-    SQLListenerContextBuilder(final QueryMetadata md)\n-    {\n-        this.md = md;\n-    }\n-\n-    public static SQLListenerContextBuilder newContext(QueryMetadata md)\n-    {\n-        return new SQLListenerContextBuilder(md);\n-    }\n-\n-    public static SQLListenerContextBuilder newContext(SQLListenerContext context)\n-    {\n-        return new SQLListenerContextBuilder(context.getMetadata())\n-                .with(context.getMap())\n-                .with(context.getConnection())\n-                .with(context.getEntity())\n-                .with(context.getException())\n-                .with(context.getPreparedStatements())\n-                .with(context.getSQL())\n-                ;\n-    }\n-\n-    SQLListenerContextBuilder with(Map<String, Object> contextMap)\n-    {\n-        this.contextMap = contextMap;\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(RelationalPath<?> entity)\n-    {\n-        this.entity = entity;\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(String sql)\n-    {\n-        this.sql = sql;\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(Exception exception)\n-    {\n-        this.exception = exception;\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(Connection connection)\n-    {\n-        this.connection = connection;\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(PreparedStatement preparedStatement)\n-    {\n-        if (preparedStatement != null)\n-        {\n-            this.preparedStatements = Lists.newArrayList(preparedStatement);\n-        }\n-        return this;\n-    }\n-\n-    public SQLListenerContextBuilder with(Collection<PreparedStatement> preparedStatements)\n-    {\n-        if (preparedStatements != null)\n-        {\n-            this.preparedStatements = Lists.newArrayList(preparedStatements);\n-        }\n-        return this;\n-    }\n-\n-    public SQLListenerContext build()\n-    {\n-        return new SQLListenerContextImpl();\n-    }\n-\n-    /**\n-     * A simple implementation that looks at the builder for values\n-     */\n-    class SQLListenerContextImpl implements SQLListenerContext\n-    {\n-        @Override\n-        public QueryMetadata getMetadata()\n-        {\n-            return md;\n-        }\n-\n-        @Override\n-        public RelationalPath<?> getEntity()\n-        {\n-            return entity;\n-        }\n-\n-        @Override\n-        public String getSQL()\n-        {\n-            return sql;\n-        }\n-\n-        @Override\n-        public Exception getException()\n-        {\n-            return exception;\n-        }\n-\n-        @Override\n-        public Connection getConnection()\n-        {\n-            return connection;\n-        }\n-\n-        @Override\n-        public Collection<PreparedStatement> getPreparedStatements()\n-        {\n-            return preparedStatements;\n-        }\n-\n-        @Override\n-        public Map<String, Object> getMap()\n-        {\n-            return contextMap;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            StringBuilder sb = new StringBuilder()\n-                    .append(\" sql:\").append(nicerSql(sql))\n-                    .append(\" connection:\").append(connection == null ? \"not connected\" : \"connected\")\n-                    .append(\" entity:\").append(entity)\n-                    .append(\" exception:\").append(exception);\n-\n-            for (Map.Entry<String, Object> entry : contextMap.entrySet())\n-            {\n-          ",
    "Use the system proxy when it \\' s defined . .": "diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java\nindex 56dcae5..cfc6a10 100644\n--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java\n+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java\n@@ -278,6 +278,7 @@ public class AsyncHttpClient {\n                             newReq.LOGTAG = request.LOGTAG;\n                             newReq.proxyHost = request.proxyHost;\n                             newReq.proxyPort = request.proxyPort;\n+                            newReq.useAndroidProxy = request.useAndroidProxy;\n                             copyHeader(request, newReq, \"User-Agent\");\n                             copyHeader(request, newReq, \"Range\");\n                             request.logi(\"Redirecting\");\ndiff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java\nindex 35d9902..dc1ef13 100644\n--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java\n+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java\n@@ -1,6 +1,8 @@\n package com.koushikdutta.async.http;\n \n+import android.annotation.SuppressLint;\n import android.net.Uri;\n+import android.os.Build;\n import android.util.Log;\n \n import com.koushikdutta.async.AsyncSSLException;\n@@ -16,6 +18,10 @@ import org.apache.http.RequestLine;\n import org.apache.http.message.BasicHeader;\n import org.apache.http.params.HttpParams;\n \n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n import java.net.URI;\n import java.util.List;\n import java.util.Map;\n@@ -318,21 +324,61 @@ public class AsyncHttpRequest {\n \n     String proxyHost;\n     int proxyPort = -1;\n+    boolean useAndroidProxy = true;\n     public void enableProxy(String host, int port) {\n         proxyHost = host;\n         proxyPort = port;\n+        useAndroidProxy = proxyPort == 0;\n+    }\n+\n+    public void enableSystemProxy(boolean enable) {\n+        useAndroidProxy = enable;\n     }\n \n     public void disableProxy() {\n         proxyHost = null;\n         proxyPort = -1;\n+        useAndroidProxy = false;\n+    }\n+\n+    @SuppressLint(\"NewApi\")\n+    private void setupAndroidProxy() {\n+        List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(getUri().toString()));\n+        if (proxies.isEmpty()) {\n+            disableProxy();\n+        } else {\n+            Proxy proxy = proxies.get(0);\n+            if (proxy.type() == Proxy.Type.DIRECT) {\n+                disableProxy();\n+            } else if (proxy.type() == Proxy.Type.HTTP && proxy.address() instanceof InetSocketAddress) {\n+                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n+                    proxyHost = proxyAddress.getHostString();\n+                else {\n+                    InetAddress address = proxyAddress.getAddress();\n+                    if (address!=null)\n+                        proxyHost = address.getHostAddress();\n+                    else\n+                    ",
    "refresh tree after raw edit ( for example to show the new script tags when a buttonconditionaction is added to a DefineButton tag )": "diff --git a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java\nindex 7f890411a..a4cddf8b3 100644\n--- a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java\n+++ b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java\n@@ -27,6 +27,7 @@ import com.jpexs.decompiler.flash.helpers.GraphTextWriter;\n import com.jpexs.decompiler.flash.tags.Tag;\n import com.jpexs.decompiler.flash.tags.base.ASMSource;\n import com.jpexs.decompiler.flash.types.annotations.Conditional;\n+import com.jpexs.decompiler.flash.types.annotations.HideInRawEdit;\n import com.jpexs.decompiler.flash.types.annotations.Internal;\n import com.jpexs.decompiler.flash.types.annotations.SWFType;\n import com.jpexs.helpers.ByteArrayRange;\n@@ -154,7 +155,7 @@ public class BUTTONCONDACTION implements ASMSource, Serializable {\n     /**\n      * Actions to perform in byte array\n      */\n-    @Internal\n+    @HideInRawEdit\n     public ByteArrayRange actionBytes;\n \n     /**\ndiff --git a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java\nindex 60171d41b..642b1c874 100644\n--- a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java\n+++ b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java\n@@ -1211,7 +1211,7 @@ public class PreviewPanel extends JPersistentSplitPane implements TagEditorPanel\n         tag.getTimelined().resetTimeline();\n         swf.assignClassesToSymbols();\n         swf.assignExportNamesToSymbols();\n-        mainPanel.repaintTree();\n+        mainPanel.refreshTree(swf);\n         mainPanel.setTagTreeSelectedNode(tag);\n         genericEditButton.setVisible(true);\n         genericSaveButton.setVisible(false);",
    "Making restricted api txt files also include public apis .": "diff --git a/activity/activity-ktx/api/1.0.0-alpha01.txt b/activity/activity-ktx/api/1.0.0-alpha01.txt\nindex e100a2f7f07..3708d456d73 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha01.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha01.txt\n@@ -10,6 +10,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/1.0.0-alpha02.txt b/activity/activity-ktx/api/1.0.0-alpha02.txt\nindex e100a2f7f07..3708d456d73 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha02.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha02.txt\n@@ -10,6 +10,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/1.0.0-alpha03.txt b/activity/activity-ktx/api/1.0.0-alpha03.txt\nindex 335efc368a6..93ee07e2213 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha03.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha03.txt\n@@ -3,6 +3,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/1.0.0-alpha04.txt b/activity/activity-ktx/api/1.0.0-alpha04.txt\nindex be35c633fb7..93ee07e2213 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha04.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha04.txt\n@@ -3,7 +3,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/1.0.0-alpha05.txt b/activity/activity-ktx/api/1.0.0-alpha05.txt\nindex be35c633fb7..93ee07e2213 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha05.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha05.txt\n@@ -3,7 +3,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/1.0.0-alpha06.txt b/activity/activity-ktx/api/1.0.0-alpha06.txt\nindex be35c633fb7..93ee07e2213 100644\n--- a/activity/activity-ktx/api/1.0.0-alpha06.txt\n+++ b/activity/activity-ktx/api/1.0.0-alpha06.txt\n@@ -3,7 +3,7 @@ package androidx.activity {\n \n   public final class ActivityViewModelLazyKt {\n     ctor public ActivityViewModelLazyKt();\n-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n   }\n \n }\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt\nindex da4f6cc18fe..93ee07e2213 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt\n@@ -1 +1,10 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt\nindex da4f6cc18fe..93ee07e2213 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt\n@@ -1 +1,10 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt\n+++ b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt\n+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt\n+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity-ktx/api/restricted_current.txt b/activity/activity-ktx/api/restricted_current.txt\nindex da4f6cc18fe..c6e9a9abbcd 100644\n--- a/activity/activity-ktx/api/restricted_current.txt\n+++ b/activity/activity-ktx/api/restricted_current.txt\n@@ -1 +1,15 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public final class ActivityViewModelLazyKt {\n+    ctor public ActivityViewModelLazyKt();\n+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);\n+  }\n+\n+  public final class OnBackPressedDispatcherKt {\n+    ctor public OnBackPressedDispatcherKt();\n+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/1.0.0-alpha03.txt b/activity/activity/api/1.0.0-alpha03.txt\nindex 6907f239359..0eb2006bf5a 100644\n--- a/activity/activity/api/1.0.0-alpha03.txt\n+++ b/activity/activity/api/1.0.0-alpha03.txt\n@@ -5,7 +5,7 @@ package androidx.activity {\n     ctor public ComponentActivity();\n     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();\n+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();\n     method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n     method public androidx.lifecycle.ViewModelStore getViewModelStore();\n     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\ndiff --git a/activity/activity/api/1.0.0-alpha04.txt b/activity/activity/api/1.0.0-alpha04.txt\nindex 6907f239359..0eb2006bf5a 100644\n--- a/activity/activity/api/1.0.0-alpha04.txt\n+++ b/activity/activity/api/1.0.0-alpha04.txt\n@@ -5,7 +5,7 @@ package androidx.activity {\n     ctor public ComponentActivity();\n     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();\n+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();\n     method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n     method public androidx.lifecycle.ViewModelStore getViewModelStore();\n     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\ndiff --git a/activity/activity/api/restricted_1.0.0-alpha05.txt b/activity/activity/api/restricted_1.0.0-alpha05.txt\nindex da4f6cc18fe..1d5064eea00 100644\n--- a/activity/activity/api/restricted_1.0.0-alpha05.txt\n+++ b/activity/activity/api/restricted_1.0.0-alpha05.txt\n@@ -1 +1,22 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+    method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+    method public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+  }\n+\n+  public interface OnBackPressedCallback {\n+    method public boolean handleOnBackPressed();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.0.0-alpha06.txt b/activity/activity/api/restricted_1.0.0-alpha06.txt\nindex da4f6cc18fe..16e509e06b1 100644\n--- a/activity/activity/api/restricted_1.0.0-alpha06.txt\n+++ b/activity/activity/api/restricted_1.0.0-alpha06.txt\n@@ -1 +1,30 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+  }\n+\n+  public interface OnBackPressedCallback {\n+    method public boolean handleOnBackPressed();\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    method public androidx.arch.core.util.Cancellable addCallback(androidx.activity.OnBackPressedCallback);\n+    method public androidx.arch.core.util.Cancellable addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method public boolean onBackPressed();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.0.0-alpha07.txt b/activity/activity/api/restricted_1.0.0-alpha07.txt\nindex da4f6cc18fe..ba5e73341ae 100644\n--- a/activity/activity/api/restricted_1.0.0-alpha07.txt\n+++ b/activity/activity/api/restricted_1.0.0-alpha07.txt\n@@ -1 +1,39 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public boolean isEnabled();\n+    method @MainThread public void remove();\n+    method @MainThread public void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.0.0-alpha08.txt b/activity/activity/api/restricted_1.0.0-alpha08.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_1.0.0-alpha08.txt\n+++ b/activity/activity/api/restricted_1.0.0-alpha08.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.0.0-beta01.txt b/activity/activity/api/restricted_1.0.0-beta01.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_1.0.0-beta01.txt\n+++ b/activity/activity/api/restricted_1.0.0-beta01.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.0.0-rc01.txt b/activity/activity/api/restricted_1.0.0-rc01.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_1.0.0-rc01.txt\n+++ b/activity/activity/api/restricted_1.0.0-rc01.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.1.0-alpha01.txt b/activity/activity/api/restricted_1.1.0-alpha01.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_1.1.0-alpha01.txt\n+++ b/activity/activity/api/restricted_1.1.0-alpha01.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_1.1.0-alpha02.txt b/activity/activity/api/restricted_1.1.0-alpha02.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_1.1.0-alpha02.txt\n+++ b/activity/activity/api/restricted_1.1.0-alpha02.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/activity/activity/api/restricted_current.txt b/activity/activity/api/restricted_current.txt\nindex da4f6cc18fe..cd98da605a8 100644\n--- a/activity/activity/api/restricted_current.txt\n+++ b/activity/activity/api/restricted_current.txt\n@@ -1 +1,38 @@\n // Signature format: 3.0\n+package androidx.activity {\n+\n+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {\n+    ctor public ComponentActivity();\n+    ctor @ContentView public ComponentActivity(@LayoutRes int);\n+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();\n+    method public androidx.lifecycle.Lifecycle getLifecycle();\n+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();\n+    method public androidx.lifecycle.ViewModelStore getViewModelStore();\n+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();\n+    method public final Object? onRetainNonConfigurationInstance();\n+  }\n+\n+  public abstract class OnBackPressedCallback {\n+    ctor public OnBackPressedCallback(boolean);\n+    method @MainThread public abstract void handleOnBackPressed();\n+    method @MainThread public final boolean isEnabled();\n+    method @MainThread public final void remove();\n+    method @MainThread public final void setEnabled(boolean);\n+  }\n+\n+  public final class OnBackPressedDispatcher {\n+    ctor public OnBackPressedDispatcher();\n+    ctor public OnBackPressedDispatcher(Runnable?);\n+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);\n+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);\n+    method @MainThread public boolean hasEnabledCallbacks();\n+    method @MainThread public void onBackPressed();\n+  }\n+\n+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {\n+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();\n+  }\n+\n+}\n+\ndiff --git a/annotations/api/1.0.0.txt b/annotations/api/1.0.0.txt\nindex dc1c3ce20c6..3cf46a67d1f 100644\n--- a/annotations/api/1.0.0.txt\n+++ b/annotations/api/1.0.0.txt\n@@ -124,7 +124,7 @@ package androidx.annotation {\n   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {\n   }\n \n-  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) @Dimension(unit=androidx.annotation.Dimension.PX) public @interface Px {\n+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {\n   }\n \n   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {\n@@ -159,7 +159,7 @@ package androidx.annotation {\n     method public abstract androidx.annotation.RestrictTo.Scope[] value();\n   }\n \n-  public static enum RestrictTo.Scope {\n+  public enum RestrictTo.Scope {\n     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;\ndiff --git a/annotations/api/1.1.0-alpha01.txt b/annotations/api/1.1.0-alpha01.txt\nindex d66f9f581bf..2adc9756be6 100644\n--- a/annotations/api/1.1.0-alpha01.txt\n+++ b/annotations/api/1.1.0-alpha01.txt\n@@ -167,7 +167,6 @@ package androidx.annotation {\n     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;\n-    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP_PREFIX;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;\n     enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;\n   }\ndiff --git a/annotations/api/1.1.0-alpha02.txt b/annotations/api/1.1.0-alpha02.txt\nindex 7226b137ff4..d66f9f581bf 100644\n--- a/annotations/api/1.1.0-alpha02.txt\n+++ b/annotations/api/1.1.0-alpha02.txt\n@@ -81,35 +81,6 @@ package androidx.annotation {\n   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {\n   }\n \n-  @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public @interface InspectableProperty {\n-    method public abstract int attributeId() default 0;\n-    method public abstract androidx.annotation.InspectableProperty.EnumMap[] enumMapping() default {};\n-    method public abstract androidx.annotation.InspectableProperty.FlagMap[] flagMapping() default {};\n-    method public abstract boolean hasAttributeId() default true;\n-    method public abstract String name() default \"\";\n-    method public abstract androidx.annotation.InspectableProperty.ValueType valueType() default androidx.annotation.InspectableProperty.ValueType.INFERRED;\n-  }\n-\n-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.EnumMap {\n-    method public abstract String name();\n-    method public abstract int value();\n-  }\n-\n-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.FlagMap {\n-    method public abstract int mask() default 0;\n-    method public abstract String name();\n-    method public abstract int target();\n-  }\n-\n-  public enum InspectableProperty.ValueType {\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType COLOR;\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType GRAVITY;\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INFERRED;\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_ENUM;\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_FLAG;\n-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType NONE;\n-  }\n-\n   @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {\n     method public abstract boolean flag() default false;\n     method public abstract boolean open() default false;\ndiff --git a/annotations/api/restricted_1.0.0.txt b/annotations/api/restricted_1.0.0.txt\nindex da4f6cc18fe..3cf46a67d1f 100644\n--- a/annotations/api/restricted_1.0.0.txt\n+++ b/annotations/api/restricted_1.0.0.txt\n@@ -1 +1,212 @@\n // Signature format: 3.0\n+package androidx.annotation {\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimatorRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnyRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface AnyThread {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ArrayRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AttrRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface BinderThread {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface BoolRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CallSuper {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CheckResult {\n+    method public abstract String suggest() default \"\";\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorInt {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorLong {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ColorRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DimenRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Dimension {\n+    method @DimensionUnit public abstract int unit() default androidx.annotation.Dimension.PX;\n+    field public static final int DP = 0; // 0x0\n+    field public static final int PX = 1; // 0x1\n+    field public static final int SP = 2; // 0x2\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DrawableRes {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface FloatRange {\n+    method public abstract double from() default java.lang.Double.NEGATIVE_INFINITY;\n+    method public abstract boolean fromInclusive() default true;\n+    method public abstract double to() default java.lang.Double.POSITIVE_INFINITY;\n+    method public abstract boolean toInclusive() default true;\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FontRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FractionRes {\n+  }\n+\n+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface GuardedBy {\n+    method public abstract String value();\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface HalfFloat {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {\n+    method public abstract boolean flag() default false;\n+    method public abstract boolean open() default false;\n+    method public abstract int[] value() default {};\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntRange {\n+    method public abstract long from() default java.lang.Long.MIN_VALUE;\n+    method public abstract long to() default java.lang.Long.MAX_VALUE;\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IntegerRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface InterpolatorRes {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PACKAGE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Keep {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface LayoutRes {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface LongDef {\n+    method public abstract boolean flag() default false;\n+    method public abstract boolean open() default false;\n+    method public abstract long[] value() default {};\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface MainThread {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface MenuRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface NavigationRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface NonNull {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface Nullable {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {\n+  }\n+\n+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RequiresApi {\n+    method @IntRange(from=1) public abstract int api() default 1;\n+    method @IntRange(from=1) public abstract int value() default 1;\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR}) public @interface RequiresFeature {\n+    method public abstract String enforcement();\n+    method public abstract String name();\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PARAMETER}) public @interface RequiresPermission {\n+    method public abstract String[] allOf() default {};\n+    method public abstract String[] anyOf() default {};\n+    method public abstract boolean conditional() default false;\n+    method public abstract String value() default \"\";\n+  }\n+\n+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Read {\n+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;\n+  }\n+\n+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Write {\n+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RestrictTo {\n+    method public abstract androidx.annotation.RestrictTo.Scope[] value();\n+  }\n+\n+  public enum RestrictTo.Scope {\n+    enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;\n+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;\n+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;\n+    enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;\n+    enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Size {\n+    method public abstract long max() default java.lang.Long.MAX_VALUE;\n+    method public abstract long min() default java.lang.Long.MIN_VALUE;\n+    method public abstract long multiple() default 1;\n+    method public abstract long value() default -1;\n+  }\n+\n+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface StringDef {\n+    method public abstract boolean open() default false;\n+    method public abstract String[] value() default {};\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface StringRes {\n+  }\n+\n+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public",
    "Implement Hotspot Runtime tier 2 .": "diff --git a/hotspot/test/TEST.groups b/hotspot/test/TEST.groups\nindex 262232e706c..b46499f7902 100644\n--- a/hotspot/test/TEST.groups\n+++ b/hotspot/test/TEST.groups\n@@ -395,6 +395,17 @@ hotspot_jprt = \\\n   :hotspot_fast_gc_gcold \\\n   :hotspot_fast_runtime \\\n   :hotspot_fast_serviceability\n+  \n+hotspot_runtime_tier2 = \\\n+  runtime/ \\\n+  serviceability/ \\\n+ -:hotspot_fast_runtime \\\n+ -:hotspot_fast_serviceability \\\n+ -:hotspot_runtime_tier2_platform_agnostic\n+ \n+hotspot_runtime_tier2_platform_agnostic = \\\n+  runtime/SelectionResolution \\\n+ -:hotspot_fast_runtime\n \n #All tests that depends on nashorn extension.\n #",
    "add experimental code for computing churn and treemap visualizations .": "diff --git a/findbugs/build.xml b/findbugs/build.xml\nindex 1a5a93a20..4552a2c22 100644\n--- a/findbugs/build.xml\n+++ b/findbugs/build.xml\n@@ -349,6 +349,11 @@\n \t\t\t<filterset refid=\"script.filters\"/>\n \t\t</copy>\n \n+\t\t<copy todir=\"${scripts.dir}/experimental\" overwrite=\"true\">\n+\t\t\t<fileset dir=\"${scriptsrc.dir}/experimental\"/>\n+\t\t\t<filterset refid=\"script.filters\"/>\n+\t\t</copy>\n+\n \t\t<mkdir dir=\"${build.dir}\"/>\n \n \t\t<!-- Make the Unix scripts executable. -->\n@@ -894,6 +899,7 @@\n \t\t\n \t\t<patternset id=\"bindist.unixscript.pats\">\n \t\t\t<include name=\"bin/*\"/>\n+\t\t\t<include name=\"bin/experimental/*\"/>\n \t\t\t<include name=\"bin/deprecated/*\"/>\n \t\t\t<exclude name=\"bin/*.bat\"/>\n \t\t</patternset>\ndiff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java\nnew file mode 100644\nindex 000000000..39a62ecc2\n--- /dev/null\n+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java\n@@ -0,0 +1,151 @@\n+/*\r\n+ * FindBugs - Find Bugs in Java programs\r\n+ * Copyright (C) 2005, University of Maryland\r\n+ * \r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation; either\r\n+ * version 2.1 of the License, or (at your option) any later version.\r\n+ * \r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ * \r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n+ */\r\n+\r\n+package edu.umd.cs.findbugs.workflow;\r\n+\r\n+import java.io.FileOutputStream;\r\n+import java.io.PrintStream;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+\r\n+import edu.umd.cs.findbugs.AppVersion;\r\n+import edu.umd.cs.findbugs.BugCollection;\r\n+import edu.umd.cs.findbugs.BugInstance;\r\n+import edu.umd.cs.findbugs.DetectorFactoryCollection;\r\n+import edu.umd.cs.findbugs.Project;\r\n+import edu.umd.cs.findbugs.SortedBugCollection;\r\n+import edu.umd.cs.findbugs.config.CommandLine;\r\n+\r\n+/**\r\n+ * Mine historical information from a BugCollection.\r\n+ * The BugCollection should be built using UpdateBugCollection\r\n+ * to record the history of analyzing all versions over time.\r\n+ * \r\n+ * @author David Hovemeyer\r\n+ * @author William Pugh\r\n+ */\r\n+public class Churn {\r\n+\t\tBugCollection bugCollection;\r\n+\t\r\n+\tpublic Churn() {\r\n+\t}\r\n+\tpublic Churn(BugCollection bugCollection) {\r\n+\t\tthis.bugCollection = bugCollection;\r\n+\t}\r\n+\r\n+\tpublic void setBugCollection(BugCollection bugCollection) {\r\n+\t\tthis.bugCollection = bugCollection;\r\n+\t}\r\n+\r\n+\t\r\n+\r\n+\tString getKey(BugInstance b) {\r\n+\t\treturn b.getPriorityAbbreviation() +\"-\" + b.getType();\r\n+\t}\r\n+\r\n+\tstatic class Data {\r\n+\t\tint persist, fixed;\r\n+\t}\r\n+\r\n+\tMap<String,Data> data = new HashMap<String,Data>();\r\n+\t\r\n+\tpublic Churn execute() {\r\n+\t\t\r\n+\t\tfor (Iterator<BugInstance> j = bugCollection.iterator(); j.hasNext();) {\r\n+\t\t\tBugInstance bugInstance = j.next();\r\n+\r\n+\t\t\tString key = getKey(bugInstance);\r\n+\t\t\tData d = data.get(key);\r\n+\t\t\tif (d == null)\r\n+\t\t\t\tdata.put(key, d = new Data());\r\n+\t\t\tif (bugInstance.isDead())\r\n+\t\t\t\td.fixed++;\r\n+\t\t\telse d.persist++;\r\n+\t\t}\r\n+\t\treturn this;\r\n+\t}\r\n+\r\n+\r\n+\r\n+\r\n+\tpublic void dump(PrintStream out) {\r\n+\t\tSystem.out.printf(\"%3s %5s %5s %5s  %s\\n\", \"%\", \"const\", \"fix\", \"new\");\r\n+\t\tfor(Map.Entry<String, Data> e : data.entrySet()) {\r\n+\t\t\tData d = e.getValue();\r\n+\t\t\tint total = d.persist + d.fixed;\r\n+\t\t\tif (total < 10) \r\n+\t\t\t\tcontinue;\r\n+\t\t\tSystem.out.printf(\"%3d %5d %5d  %s\\n\", d.fixed * 100 / total, d.persist, d.fixed, e.getKey());\r\n+\t\t}\r\n+\r\n+\t}\r\n+\r\n+\r\n+\r\n+\t class ChurnCommandLine extends CommandLine {\r\n+\r\n+\t\t ChurnCommandLine() {\r\n+\t\t\t\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic void handleOption(String option, String optionalExtraPart) {\r\n+\t\t\t\r\n+\t\t\t\tthrow new IllegalArgumentException(\"unknown option: \" + option);\r\n+\t\t}\r\n+\r\n+\t\t@Override\r\n+\t\tpublic void handleOptionWithArgument(String option, String argument) {\r\n+\r\n+\t\t\t\tthrow new IllegalArgumentException(\"unknown option: \" + option);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static void main(String[] args) throws Exception {\r\n+\t\tDetectorFactoryCollection.instance(); // load plugins\r\n+\r\n+\t\tChurn churn = new Churn();\r\n+\t\tChurnCommandLine commandLine = churn.new ChurnCommandLine();\r\n+\t\tint argCount = commandLine.parse(args, 0, 2, \"Usage: \" + Churn.class.getName()\r\n+\t\t\t\t+ \" [options] [<xml results> [<history]] \");\r\n+\r\n+\t\tSystem.out.println(\"reading\");\r\n+\t\tSortedBugCollection bugCollection = new SortedBugCollection();\r\n+\t\tif (argCount < args.length)  \r\n+\t\t\tbugCollection.readXML(args[argCount++], new Project());\r\n+\t\telse bugCollection.readXML(System.in, new Project());\r\n+\t\tchurn.setBugCollection(bugCollection);\r\n+\t\tSystem.out.println(\"analyzing\");\r\n+\t\tchurn.execute();\r\n+\t\tPrintStream out = System.out;\r\n+\t\tSystem.out.println(\"printing\");\r\n+\t\ttry {\r\n+\t\tif (argCount < args.length)  {\r\n+\t\t\tout = new PrintStream(new FileOutputStream(args[argCount++]), true);\r\n+\t\t\t}\r\n+\t\tchurn.dump(out);\r\n+\t\t} finally {\r\n+\t\tout.close();\r\n+\t\t}\r\n+\r\n+\t}\r\n+}\r\ndiff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java\nnew file mode 100644\nindex 000000000..f40585c97\n--- /dev/null\n+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java\n@@ -0,0 +1,113 @@\n+/*\r\n+ * FindBugs - Find Bugs in Java programs\r\n+ * Copyright (C) 2005, University of Maryland\r\n+ * \r\n+ * This library is free software; you can redistribute it and/or\r\n+ * modify it under the terms of the GNU Lesser General Public\r\n+ * License as published by the Free Software Foundation; either\r\n+ * version 2.1 of the License, or (at your option) any later version.\r\n+ * \r\n+ * This library is distributed in the hope that it will be useful,\r\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+ * Lesser General Public License for more details.\r\n+ * \r\n+ * You should have received a copy of the GNU Lesser General Public\r\n+ * License along with this library; if not, write to the Free Software\r\n+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n+ */\r\n+\r\n+package edu.umd.cs.findbugs.workflow;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.TreeMap;\r\n+\r\n+import edu.umd.cs.findbugs.DetectorFactoryCollection;\r\n+import edu.umd.cs.findbugs.PackageStats;\r\n+import edu.umd.cs.findbugs.Priorities;\r\n+import edu.umd.cs.findbugs.Project;\r\n+import edu.umd.cs.findbugs.SortedBugCollection;\r\n+import edu.umd.cs.findbugs.util.Bag;\r\n+\r\n+public class TreemapVisualization {\r\n+\t\r\n+\tstatic HashSet<String> buggyPackages = new HashSet<String>();\r\n+\t\r\n+\tstatic HashSet<String> interiorPackages = new HashSet<String>();\r\n+\tstatic Bag<String> goodCodeSize = new Bag<String>(new TreeMap<String,Integer>());\r\n+\tstatic Bag<String> goodCodeCount = new Bag<String>(new TreeMap<String,Integer>());\r\n+\t\r\n+\r\n+\tpublic static void addInteriorPackages(String packageName) {\r\n+\t\tString p = superpackage(packageName);\r\n+\t\tif (p.length() > 0) {\r\n+\t\t\tinteriorPackages.add(p);\r\n+\t\t\taddInteriorPackages(p);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t/**\r\n+     * @param packageName\r\n+     * @return\r\n+     */\r\n+    private static String superpackage(String packageName) {\r\n+\t    int i = packageName.lastIndexOf('.');\r\n+\t\tif (i == -1) return \"\";\r\n+\t\tString p = packageName.substring(0,i);\r\n+\t    return p;\r\n+    }\r\n+\tpublic static boolean isInteriorPackage(String packageName) {\r\n+\t\treturn interiorPackages.contains(packageName);\r\n+\t}\r\n+\t\r\n+\tpublic static void cleanCode(String packageName, int loc, int classes) {\r\n+\t\tString superpackage = superpackage(packageName);\r\n+\t\tif (buggyPackages.contains(superpackage) || interiorPackages.contains(superpackage) || superpackage.length() == 0) {\r\n+\t\t\tgoodCodeCount.add(packageName,classes);\r\n+\t\t\tgoodCodeSize.add(packageName, loc);\r\n+\t\t\t\r\n+\t\t} else \r\n+\t\t\tcleanCode(superpackage, loc,classes);\r\n+\t}\r\n+\tpublic static void main(String[] args) throws Exception {\r\n+\t\tDetectorFactoryCollection.instance(); // load plugins\r\n+\r\n+\t\tSortedBugCollection bugCollection = new SortedBugCollection();\r\n+\t\tint argCount = 0;\r\n+\t\tif (argCount < args.length)  \r\n+\t\t\tbugCollection.readXML(args[argCount++], new Project());\r\n+\t\telse bugCollection.readXML(System.in, new Project());\r\n+\t\t\r\n+\t\tfor(PackageStats p : bugCollection.getProjectStats().getPackageStats()) \r\n+\t\t\tif (p.getTotalBugs() > 0) {\r\n+\t\t\tbuggyPackages.add(p.getPackageName());\r\n+\t\t\taddInteriorPackages(p.getPackageName());\r\n+\t\t\t\r\n+\t\t}\r\n+\t\t\r\n+\t\tfor(PackageStats p : bugCollection.getProjectStats().getPackageStats())if (p.getTotalBugs() == 0) { \r\n+\t\t\tcleanCode(p.getPackageName(), p.size(), p.getClassStats().size());\r\n+\t\t}\r\n+\t\tSystem.out.println(\"LOC\\tTypes\\tH\\tHM\\tDensity\");\r\n+\t\tSystem.out.println(\"INTEGER\\tINTEGER\\tINTEGER\\tINTEGER\\tFLOAT\");\r\n+\t\tfor(PackageStats p : bugCollection.getProjectStats().getPackageStats())\tif (p.getTotalBugs() > 0) {\r\n+\t\t\tint high = p.getBugsAtPriority(Priorities.HIGH_PRIORITY);\r\n+\t\t\tint normal = p.getBugsAtPriority(Priorities.NORMAL_PRIORITY);\r\n+\t\t\tSystem.out.printf(\"%d\\t%d\\t%d\\t%d\\t%g\\t\\t%s\", p.size(),p.getClassStats().size(), high,high+normal, \r\n+\t\t\t\t\t(high+normal)*1000.0/p.size(),\r\n+\t\t\t\t\tp.getPackageName().substring(11).replace('.','\\t'));\r\n+\t\t\tif (isInteriorPackage(p.getPackageName()))\r\n+\t\t\t\tSystem.out.print(\"\\t*\");\r\n+\t\t\tSystem.out.println();\r\n+\t\t}\r\n+\t\tfor(Map.Entry<String, Integer> e : goodCodeSize.entrySet())\t{\r\n+\t\t\tSystem.out.printf(\"%d\\t%d\\t%d\\t%d\\t%g\\t\\t%s\\n\", e.getValue(),goodCodeCount.getCount(e.getKey()), 0,0,\r\n+\t\t\t\t\t0.0,\r\n+\t\t\t\t\te.getKey().substring(11).replace('.','\\t'));\r\n+\t\t\t\r\n+\t\t}\r\n+\t\t\r\n+\r\n+\t}\r\n+}\r\ndiff --git a/findbugs/src/scripts/experimental/churn b/findbugs/src/scripts/experimental/churn\nnew file mode 100644\nindex 000000000..a9a949a1e\n--- /dev/null\n+++ b/findbugs/src/scripts/experimental/churn\n@@ -0,0 +1,11 @@\n+#! /bin/sh\n+\n+@GET_FBHOME@\n+\n+@SET_DEFAULT_JAVA@\n+\n+fb_mainclass=edu.umd.cs.findbugs.workflow.Churn\n+\n+@WRAP_JAVA@\n+\n+# vim:ts=3\ndiff --git a/findbugs/src/scripts/experimental/treemapVisualization b/findbugs/src/scripts/experimental/treemapVisualization\nnew file mode 100644\nindex 000000000..43b897591\n--- /dev/null\n+++ b/findbugs/src/scripts/experimental/treemapVisualization\n@@ -0,0 +1,11 @@\n+#! /bin/sh\n+\n+@GET_FBHOME@\n+\n+@SET_DEFAULT_JAVA@\n+\n+fb_mainclass=edu.umd.cs.findbugs.workflow.TreemapVisualization\n+\n+@WRAP_JAVA@\n+\n+# vim:ts=3",
    "Use the rule location when a handler isn \\' t found .": "diff --git a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java\nindex c7725a40e2..c64c44c647 100644\n--- a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java\n+++ b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java\n@@ -19,7 +19,6 @@ import com.google.common.collect.ImmutableMap;\n import com.google.devtools.build.lib.analysis.BlazeDirectories;\n import com.google.devtools.build.lib.cmdline.RepositoryName;\n import com.google.devtools.build.lib.events.Event;\n-import com.google.devtools.build.lib.events.Location;\n import com.google.devtools.build.lib.packages.Rule;\n import com.google.devtools.build.lib.packages.RuleFormatter;\n import com.google.devtools.build.lib.rules.ExternalPackageUtil;\n@@ -131,9 +130,7 @@ public final class RepositoryDelegatorFunction implements SkyFunction {\n     }\n     if (handler == null) {\n       throw new RepositoryFunctionException(\n-          new EvalException(\n-              Location.fromFile(directories.getWorkspace().getRelative(\"WORKSPACE\")),\n-              \"Could not find handler for \" + rule),\n+          new EvalException(rule.getLocation(), \"Could not find handler for \" + rule),\n           Transience.PERSISTENT);\n     }\n ",
    "Use a smoother blocking Q and block when full .": "diff --git a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java\nindex 14123c7a73c..aac7ab750bd 100644\n--- a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java\n+++ b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java\n@@ -46,9 +46,10 @@ import java.io.PrintStream;\n import java.nio.ByteBuffer;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.RejectedExecutionHandler;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -154,7 +155,7 @@ public class SimpleFeeder implements ReplyHandler {\n                 }\n             } catch (InterruptedException e) {}\n         }\n-        public void close() throws Exception {\n+        public void close() {\n             session.destroy();\n         }\n     }\n@@ -277,7 +278,7 @@ public class SimpleFeeder implements ReplyHandler {\n             }\n         }\n \n-        class LazyDocumentOperation extends ConditionalFeedOperation {\n+        static class LazyDocumentOperation extends ConditionalFeedOperation {\n             private final DocumentDeserializer deserializer;\n             LazyDocumentOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {\n                 super(Type.DOCUMENT, condition);\n@@ -289,7 +290,7 @@ public class SimpleFeeder implements ReplyHandler {\n                 return new Document(deserializer);\n             }\n         }\n-        class LazyUpdateOperation extends ConditionalFeedOperation {\n+        static class LazyUpdateOperation extends ConditionalFeedOperation {\n             private final DocumentDeserializer deserializer;\n             LazyUpdateOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {\n                 super(Type.UPDATE, condition);\n@@ -377,13 +378,22 @@ public class SimpleFeeder implements ReplyHandler {\n     }\n \n \n+    static class RetryExecutionhandler implements RejectedExecutionHandler {\n+\n+        @Override\n+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+            try {\n+                executor.getQueue().put(r);\n+            } catch (InterruptedException e) {}\n+        }\n+    }\n \n     SimpleFeeder run() throws Throwable {\n         ExecutorService executor = (numThreads > 1)\n ",
    "Fixed an issue with mixing unnamed path and query params": "diff --git a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java\nindex f2b7fcc3..2a8edf5b 100644\n--- a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java\n+++ b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java\n@@ -17,20 +17,34 @@\n package com.jayway.restassured.itest.java;\n \n import com.jayway.restassured.RestAssured;\n+import com.jayway.restassured.builder.ResponseBuilder;\n+import com.jayway.restassured.config.LogConfig;\n+import com.jayway.restassured.filter.Filter;\n+import com.jayway.restassured.filter.FilterContext;\n+import com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor;\n import com.jayway.restassured.itest.java.support.WithJetty;\n+import com.jayway.restassured.response.Response;\n+import com.jayway.restassured.specification.FilterableRequestSpecification;\n+import com.jayway.restassured.specification.FilterableResponseSpecification;\n+import org.apache.commons.io.output.WriterOutputStream;\n import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n+import java.io.PrintStream;\n+import java.io.StringWriter;\n import java.net.URLEncoder;\n import java.util.HashMap;\n import java.util.Map;\n \n import static com.jayway.restassured.RestAssured.*;\n import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.config.RestAssuredConfig.config;\n+import static com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor.loggedRequestPathIn;\n import static com.jayway.restassured.path.json.JsonPath.from;\n import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.startsWith;\n import static org.junit.Assert.assertThat;\n \n public class PathParamITest extends WithJetty {\n@@ -295,4 +309,23 @@ public class PathParamITest extends WithJetty {\n \n         expect().statusCode(200).when().get(\"http://www.google.se/search?q={query}&hl=en\");\n     }\n+\n+    @Test\n+    public void mixingUnnamedPathParametersAndQueryParametersWorks() throws Exception {\n+        final StringWriter writer = new StringWriter();\n+        final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);\n+\n+        given().\n+                config(config().logConfig(new LogConfig(captor, true))).\n+                log().all().\n+                filter(new Filter() {\n+                    public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {\n+                        return new ResponseBuilder().setStatusCode(200).setBody(\"changed\").build();\n+                    }\n+                }).\n+        get(\"/{channelName}/item-import/rss/import?source={url}\", \"games\", \"http://myurl.com\");\n+\n+        // Then\n+        assertThat(loggedRequestPathIn(writer), equalTo(\"http://localhost:8080/games/item-import/rss/import?source=http%3A%2F%2Fmyurl.com\"));\n+    }\n }\ndiff --git a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy\nindex 2b87ec96..4ebba12c 100644\n--- a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy\n+++ b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy\n@@ -1246,6 +1246,13 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy\n                 pathWithoutQueryParams = StringUtils.replace(pathWithoutQueryParams, \"RA_double_slash__\", encode(DOUBLE_SLASH, EncodingTarget.QUERY))\n             }\n \n+            // Remove used unnamed path parameters if all parameters haven't already been used\n+            if (!usesNamedPathParameters && unnamedPathParamSize != numberOfUsedPathParameters) {\n+                def firstUnusedIndex = Math.max(0, numberOfUsedPathParameters)\n+                def lastIndex = unnamedPathParams.size() - 1\n+                unnamedPathParams = unnamedPathParams[firstUnusedIndex..lastIndex]\n+            }\n+\n             if (queryParams.matches(pathTemplate)) {\n                 def hasAnyTemplateLeft = ~/.*\\{\\w+\\}.*/\n                 def replacePattern = ~/\\{\\w+\\}/\n@@ -1257,7 +1264,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy\n                 }\n \n                 def originalQueryParams = queryParams\n-                definedParams.each { pathParamName ->\n+                definedParams.eachWithIndex { pathParamName, index ->\n                     def subresource\n                     if (!queryParams.matches(hasAnyTemplateLeft)) {\n                         def expected = hasAnyTemplateLeft.matcher(originalQueryParams).getCount();\n@@ -1267,7 +1274,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy\n                         def pathParamValue = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)\n                         subresource = pathParamValue\n                     } else { // uses unnamed path params\n-                        subresource = unnamedPathParams[numberOfUsedPathParameters].toString()\n+                        subresource = unnamedPathParams[index].toString()\n                     }\n                     // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.\n                     queryParams = queryParams.replaceFirst(replacePattern, Matcher.quoteReplacement(subresource.toString()))",
    "remove tutorial command": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java\nindex e2c2e4abcf..bced609207 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java\n@@ -159,8 +159,6 @@ public class PresentationDispatcher\n          performExecuteCommand(params);\n       else if (cmdName.equals(\"pause\"))\n          performPauseCommand();\n-      else if (cmdName.equals(\"tutorial\"))\n-         performTutorialCommand(params);\n       else \n       {\n          globalDisplay_.showErrorMessage(\n@@ -223,13 +221,6 @@ public class PresentationDispatcher\n       context_.pauseMedia();\n    }\n \n-   private void performTutorialCommand(String params)\n-   {\n-      String projectParam = URL.encodeQueryString(params);\n-      String url = GWT.getHostPageBaseURL() + \"?project=\" + projectParam;\n-      Window.Location.assign(url);\n-   }\n-\n    private void performConsoleInputCommand(String params)\n    {\n       fireEventFromTutorialDirectory(new SendToConsoleEvent(params, ",
    "added the css style module and swapped out the jboss . org logo with drools logo in html and eclipse output . . git - svn - id : https : / / svn . jboss . org / repos / labs / labs / jbossrules / trunk @ 23780 c60d74c8 - e8f6 - 0310 - 9e8f - d4a2fc68ab70": "diff --git a/drools-docs/docbook-style-drools/pom.xml b/drools-docs/docbook-style-drools/pom.xml\nnew file mode 100755\nindex 0000000000..d669593eb1\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/pom.xml\n@@ -0,0 +1,92 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>  \n+  \n+  <parent>\n+    <artifactId>drools-docs</artifactId>\n+    <groupId>org.drools</groupId>\n+    <version>5.0.0.SNAPSHOT</version>\n+  </parent>\n+\n+  <groupId>org.drools</groupId>\n+  <artifactId>docbook-style-drools</artifactId>\n+  <packaging>jdocbook-style</packaging>\n+  <version>1.1.0</version>\n+\n+  <name>JBoss Community Documentation Style for Drools</name>\n+  <description>CSS and images to style XHTML JBoss Community Documentation.</description>\n+  <url>http://www.jboss.org</url>\n+\n+  <organization>\n+    <name>JBoss.org</name>\n+    <url>http://www.jboss.org</url>\n+  </organization>\n+  \n+   <repositories>\n+        <repository>\n+            <id>repository.jboss.org</id>\n+            <url>http://repository.jboss.org/maven2</url>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+            <releases>\n+               <enabled>true</enabled>\n+            </releases>\n+        </repository>\n+        <repository>\n+            <id>snapshots.jboss.org</id>\n+            <url>http://snapshots.jboss.org/maven2</url>\n+            <snapshots>\n+                <enabled>true</enabled>\n+            </snapshots>\n+            <releases>\n+               <enabled>false</enabled>\n+            </releases>\n+        </repository>\n+        </repositories>\n+\n+  <!-- \n+  <scm>\n+    <developerConnection>scm:svn:https://svn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</developerConnection>\n+    <connection>scm:svn:http://anonsvn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</connection>\n+  </scm>\n+  -->\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.jboss.maven.plugins</groupId>\n+        <artifactId>maven-jdocbook-style-plugin</artifactId>\n+        <version>1.0.0</version>\n+        <extensions>true</extensions>\n+      </plugin>\n+    </plugins>\n+    \n+    <extensions>\n+      <extension>\n+        <groupId>org.apache.maven.wagon</groupId>\n+        <artifactId>wagon-webdav</artifactId>\n+        <version>1.0-beta-2</version>\n+      </extension>\n+    </extensions>\n+  </build>\n+\n+  <distributionManagement>\n+    <repository>\n+      <!-- Copy the dist to the local checkout of the JBoss Repository at ${maven.repository.root} -->\n+      <!-- It is anticipated that ${maven.repository.root} is set in user's settings.xml file -->\n+      <!-- TODO : Replace this with direct svn access once the svnkit providers are available -->\n+      <id>repository.jboss.org</id>\n+      <name>JBoss Repository</name>\n+      <url>file://${maven.repository.root}</url>\n+    </repository>\n+    <snapshotRepository>\n+      <id>snapshots.jboss.org</id>\n+      <name>JBoss Snapshot Repository</name>\n+      <url>dav:https://snapshots.jboss.org/maven2</url>\n+    </snapshotRepository>\n+  </distributionManagement>\n+\n+</project>\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css\nnew file mode 100755\nindex 0000000000..21411d6505\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css\n@@ -0,0 +1,242 @@\n+span.property {color:#0066CC;}\n+\r\n+pre.JAVA {line-height:10px;}\n+\r\n+pre.XML {line-height:8px;}\n+\r\n+pre.JSP {line-height:8px;}\r\n+\n+pre.XHTML {line-height:8px;}\n+\r\n+.java_type {color:#000000;}\n+\r\n+.java_keyword {\r\n+    font-weight:bold;\n+    color:#7F1B55;\r\n+}\n+\r\n+.java_javadoc_comment {\r\n+    color:#3F5FBF;\n+    font-style:italic;\n+    background-color:rgb(247,247,247);\r\n+}\n+\r\n+.java_comment {\r\n+    color:#3F7F5F;\n+    background-color:rgb(247,247,247);\r\n+}\n+\r\n+.java_operator {color:#000000;}\n+\r\n+.java_plain {color:rgb(0,0,0);}\n+\r\n+.java_literal {color:#2A00FF;}\n+\r\n+pre CODE {\r\n+    font-size:12px;\n+    color:rgb(0,0,0);\n+    font-family:monospace; \n+    white-space:nowrap;\r\n+}\n+\r\n+.java_javadoc_tag {\r\n+    font-weight:bold;\n+    color:#7F9FBF;\n+    font-style:italic;\n+    background-color:rgb(247,247,247);\r\n+}\n+\r\n+.java_separator {color:#000000;}\n+\r\n+.xml_plain {color:rgb(0,0,0);}\n+\r\n+.xml_tag_name {color:#3F7F7F;}\n+\r\n+.xml_comment {\r\n+    color:#3F5FBF;\n+    background-color:rgb(247,247,247);\r\n+}\n+\r\n+.xml_tag_symbols {color:#008080;}\n+\r\n+.xml_rife_tag {\r\n+    color:rgb(0,0,0);\n+    background-color:rgb(228,230,160);\r\n+}\n+\r\n+.xml_attribute_value {color:#2A00FF;}\n+\r\n+.xml_attribute_name {\r\n+    font-weight:bold;\n+    color:#7F007F;\r\n+}\n+\r\n+.xml_char_data {color:rgb(0,0,0);}\n+\r\n+.xml_rife_name {\r\n+    color:#008cca;\n+    background-color:rgb(228,230,160);\r\n+}\n+\r\n+.xml_processing_instruction {\r\n+    font-weight:bold;\n+    color:rgb(0,0,0);\n+    font-style:italic;\r\n+}\n+\r\n+td.java {\r\n+    vertical-align:top;\n+    line-height:10px;\r\n+}\n+\r\n+td.java-ln {\r\n+    vertical-align:top;\n+    line-height:10px;\r\n+}\n+\r\n+tt.java {\r\n+    margin-bottom:0em;\n+    line-height:10px;\r\n+    font-family:verdana,helvetica,sans-serif;\r\n+}\n+\r\n+tt.java-ln {\r\n+    margin-bottom:0em;\n+    line-height:10px;\r\n+}\n+\r\n+pre.java {\r\n+    margin-bottom:0em;\n+    line-height:10px;\r\n+}\n+\r\n+pre.java-ln {\r\n+    margin-bottom:0em;\n+    line-height:10px;\r\n+}\n+\r\n+td.java-ln {\r\n+    line-height:10px;\n+    text-align:right;\r\n+}\n+\r\n+tt.java-ln {\r\n+    color:#888888;\n+    line-height:10px;\r\n+}\n+\r\n+pre.java-ln {\r\n+    color:#888888;\n+    line-height:10px;\r\n+}\n+\r\n+span.java0 {\r\n+    font-size:8pt;\n+    color:#ffffff;\n+    line-height:10px;\r\n+}\n+\r\n+span.java1 {\r\n+    font-size:8pt;\n+    color:#808080;\r\n+}\n+\r\n+span.java2 {\r\n+    font-size:8pt;\n+    color:#3f7f5f;\n+    line-height:10px;\r\n+}\n+\r\n+/* Single-line comment */\n+\r\n+span.java3 {\r\n+    font-size:8pt;\n+    color:#3f7f5f;\n+    line-height:10px;\r\n+}\n+\r\n+/* Keywords excluding 'return' */\n+\r\n+span.java4 {\r\n+    font-weight:bold;\n+    font-size:8pt;\n+    color:#7F1B55;\n+    line-height:10px;\r\n+}\n+\r\n+span.java5 {\r\n+    font-size:8pt;\n+    color:#2a00ff;\n+    line-height:10px;\r\n+}\n+\r\n+span.java6 {\r\n+    font-size:8pt;\n+    color:#990000;\n+    line-height:10px;\r\n+}\n+\r\n+span.java7 {\r\n+    font-size:8pt;\n+    color:#990000;\n+    line-height:10px;\r\n+}\n+\r\n+span.java8 {\r\n+    font-size:8pt;\n+    color:#000000;\n+    line-height:10px;\r\n+}\n+\r\n+/* Primitive types: long, int, void etc... */\n+\r\n+span.java9 {\r\n+    font-weight:bold;\n+    font-size:8pt;\n+    color:#7F0055;\n+    line-height:10px;\r\n+}\n+\r\n+span.java10 {\r\n+    font-size:8pt;\n+    color:#000000;\n+    line-height:10px;\r\n+}\n+\r\n+span.java11 {\r\n+    font-size:8pt;\n+    color:#7f9fbf;\n+    line-height:10px;\r\n+}\n+\r\n+span.java12 {\r\n+    font-size:8pt;\n+    color:#7f7f9f;\n+    line-height:10px;\r\n+}\n+\r\n+span.java13 {\r\n+    font-size:8pt;\n+    color:#3f3fbf;\n+    line-height:10px;\r\n+}\n+\r\n+span.java14 {\r\n+    font-size:8pt;\n+    color:#3f5fbf;\n+    line-height:10px;\r\n+}\n+\r\n+span.java15 {\r\n+    font-size:8pt;\n+    color:#7F0055;\n+    line-height:10px;\r\n+}\n+\r\n+/* Annotations */\n+\r\n+span.java16 {\r\n+    font-size:8pt;\n+    color:#646464;\n+    line-height:10px;\r\n+}\r\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/docnav.css b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css\nnew file mode 100755\nindex 0000000000..c214f24ac0\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css\n@@ -0,0 +1,204 @@\n+/* Document Navigation */\n+\n+.docnav a, .docnav strong {\n+    text-decoration:none;\n+    font-weight:normal;\n+}\n+\n+.docnav {\n+    list-style:none;\n+    margin:0em;\n+    padding:0em;\n+    position:relative;\n+    width:100%;\n+    padding-bottom:2em;\n+    padding-top:1em;\n+    border-top:1px dotted #ccc;\n+}\n+\n+.docnav li {\n+    list-style:none;\n+    margin:0em;\n+    padding:0em;\n+    display:inline;\n+    font-size:.8em;\n+}\n+\n+.docnav li:before {content:\" \";}\n+\n+.docnav li.previous, .docnav li.next {\n+    position:absolute;\n+    top:1em;\n+}\n+\n+.docnav li.up, .docnav li.home {margin:0em 1.5em;}\n+\n+.docnav li.previous {\n+    left:0px;\n+    text-align:left;\n+}\n+\n+.docnav li.next {\n+    right:0px;\n+    text-align:right;\n+}\n+\n+.docnav li.previous strong, .docnav li.next strong {\n+    display:block;\n+    height:22px;\n+}\n+\n+.docnav {\n+    margin:0 auto;\n+    text-align:center;\n+}\n+\n+.docnav li.next a strong {\n+    background:url(../images/community/docbook/next.png) top right no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-right:60px;\n+    font-size:1.2em;\n+}\n+\n+.docnav li.previous a strong {\n+    background:url(../images/community/docbook/prev.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:1.2em;\n+}\n+\n+.docnav li.home a strong {\n+    background:url(../images/community/docbook/home.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:1.2em;\n+}\n+\n+.docnav li.up a strong {\n+    background:url(../images/community/docbook/up.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:1.2em;\n+}\n+\n+.docnav a:link, .docnav a:visited {color:#666 !important;}\n+\n+.docnav a:hover, .docnav a:focus, .docnav a:active {color:black !important;}\n+\n+.docnav a {\n+    max-width:10em;\n+    overflow:hidden;\n+}\n+\n+.docnav a:link strong {text-decoration:none;}\n+\n+.docnav {\n+    margin:0 auto;\n+    text-align:center;\n+}\n+\n+.docnav {margin-bottom:16px;}\n+\n+/* Eclipse Help Navigation */\n+\n+.navheader {padding-top:35px}\n+\n+.navheader table {border-style:none}\n+\n+.navheader a {\n+    text-decoration:none;\n+    font-weight:normal;\n+    font-size:.8em;\n+}\n+\n+.navheader td.next a {\n+    background:url(../images/community/docbook/next.png) top right no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-right:60px;\n+    font-size:0.9em;\n+}\n+\n+.navheader td.previous a {\n+    background:url(../images/community/docbook/prev.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:0.9em;\n+}\n+\n+.navheader a:link, .navheader a:visited {color:#666 !important;}\n+\n+.navheader a:hover, .navheader a:focus, .navheader a:active {color:black !important;}\n+\n+.navheader a {\n+    max-width:10em;\n+    overflow:hidden;\n+}\n+\n+.navheader a:link {text-decoration:none;}\n+\n+.navfooter table {border-style:none}\n+\n+.navfooter a {\n+    text-decoration:none;\n+    font-weight:normal;\n+    font-size:.8em;\n+}\n+\n+.navfooter td.next a {\n+    background:url(../images/community/docbook/next.png) top right no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-right:60px;\n+    font-size:0.9em;\n+}\n+\n+.navfooter td.previous a {\n+    background:url(../images/community/docbook/prev.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:0.9em;\n+}\n+\n+.navfooter td.home a {\n+    background:url(../images/community/docbook/home.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:0.9em;\n+}\n+\n+.navfooter td.up a {\n+    background:url(../images/community/docbook/up.png) top left no-repeat;\n+    padding-top:10px;\n+    padding-bottom:15px;\n+    height:40px;\n+    padding-left:60px;\n+    font-size:0.9em;\n+}\n+\n+.navfooter a:link, .navfooter a:visited {color:#666 !important;}\n+\n+.navfooter a:hover, .navfooter a:focus, .navfooter a:active {color:black !important;}\n+\n+.navfooter a {\n+    max-width:10em;\n+    overflow:hidden;\n+}\n+\n+.navfooter a:link {text-decoration:none;}\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/documentation.css b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css\nnew file mode 100755\nindex 0000000000..bf8e07fb8a\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css\n@@ -0,0 +1,551 @@\n+/* Lists */\n+\n+ol li, ul li {\n+    padding-left:.2em;\n+    padding-bottom:.5em;\n+    margin:0em;\n+}\n+\n+ul {\n+    padding-left:1.6em;\n+    list-style-image:url(../images/community/dot.png);\n+    list-style-type:circle;\n+}\n+\n+ul ul {\n+    list-style-image:url(../images/community/dot2.png);\n+    list-style-type:circle;\n+}\n+\n+dt {\n+    font-weight:bold;\n+    margin-bottom:0em;\n+    padding-bottom:0em;\n+}\n+\n+dd {\n+    margin:0em;\n+    margin-left:2em;\n+    padding-top:0em;\n+}\n+\n+li p:first-child, dd p:first-child {\n+    padding:0em;\n+    margin-top:.3em;\n+}\n+\n+.variablelist, .itemizedlist {margin-top:.6em;}\n+\n+ul li p:first-child {margin:0em;}\n+\n+/* Images */\n+\n+img {\n+    display:block;\n+    margin:2em 0;\n+}\n+\n+.inlinemediaobject, .inlinemediaobject img {\n+    display:inline !important;\n+    margin:0em;\n+}\n+\n+.programlisting a img, pre a img, td a img, td img {\n+    display:inline;\n+    margin:0 0;\n+}\n+\n+/* Needed for Safari */\n+\n+pre a span img, pre span img {\n+    display:inline;\n+    margin:0 0;\n+}\n+\n+span.co {\n+    position:absolute;\n+    left:900px\n+}\n+\n+/* Document modes */\n+\n+.confidential {\n+    background-color:#900;\n+    color:white;\n+    padding:.5em .5em;\n+    font-family:serif;\n+    text-transform:uppercase;\n+    text-align:center\n+}\n+\n+dt a {font-weight:normal;}\n+\n+.longdesc-link {display:none;}\n+\n+.prompt {\n+    background-color:#ede7c8;\n+    padding:0em .3em;\n+}\n+\n+/* User interface styles */\n+\n+.screen .replaceable {color:#444;}\n+\n+.screen {\n+    background-color:#ede7c8;\n+    color:#333;\n+    padding:.5em 1em;\n+    margin:0em;\n+}\n+\n+pre, code, .guibutton, .keycap, .guilabel {\n+    font-size:0.9em;\n+    font-family:verdana, helvetica, sans-serif;\n+}\n+\n+.guibutton, .keycap, .guilabel {\n+    font-weight:bold;\n+    white-space:nowrap;\n+    color:#444;\n+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;\n+}\n+\n+.guibutton, .guilabel {}\n+\n+.keycap {padding:.1em.4em;}\n+\n+.example {\n+    background-color:#c8c5ac;\n+    padding:5px;\n+    margin-bottom:10px;\n+}\n+\n+/* Terminal/Console text */\n+\n+.command, .computeroutput, .filename, .citetitle, .replaceable, .option {font-weight:bold;}\n+\n+.command .replaceable {color:#555;}\n+\n+pre {\n+    display:block;\n+    background-color:#f9f3b0;\n+    color:#333;\n+    overflow:auto;\n+    padding:10px 20px;\n+}\n+\n+code {white-space:nowrap;}\n+\n+/* Admonitions */\n+\n+/* Set basic colors and spacing */\n+\n+div.note {\n+    background:#b5bcbd;\n+    color:#4c5253;\n+    border:1px solid #8a9195;\n+    margin-bottom:1.5em;\n+    background-repeat:no-repeat;\n+    background-position:10px 10px;\n+    padding:1em;\n+    padding-bottom:20px;\n+}\n+\n+div.tip {\n+    background:#7e917f;\n+    color:white;\n+    border:1px solid #8a9195;\n+    margin-bottom:1.5em;\n+    background-repeat:no-repeat;\n+    background-position:10px 10px;\n+    padding:1em;\n+    padding-bottom:20px;\n+}\n+\n+div.important {\n+    background:#4a5d75;\n+    color:white;\n+    border:1px solid #8a9195;\n+    margin-bottom:1.5em;\n+    background-repeat:no-repeat;\n+    background-position:10px 10px;\n+    padding:1em;\n+    padding-bottom:20px;\n+}\n+\n+div.caution {\n+    background:#e3a835;\n+    color:#533500;\n+    border:1px solid #ab710a; \n+    margin-bottom:1.5em;\n+    background-repeat:no-repeat;\n+    background-position:10px 10px;\n+    padding:1em;\n+    padding-bottom:20px;\n+}\n+\n+div.warning {\n+    background:#7b1e1e;\n+    color:white;\n+    border:1px solid #65504e;\n+    margin-bottom:1.5em;\n+    background-repeat:no-repeat;\n+    background-position:10px 10px;\n+    padding:1em;\n+    padding-bottom:20px;\n+}\n+\n+/* Pre tag color settings */\n+\n+div.note pre {\n+    background-color:#d6dee0;\n+    color:#334558;\n+    border:1px solid #e1e9eb;\n+}\n+\n+div.tip pre {\n+    background-color:#d5e1d5;\n+    color:#334558;\n+    border:1px solid #e1e9eb;\n+}\n+\n+div.important pre {\n+    background-color:#e1eef4;\n+    color:#334558;\n+    border:1px solid #e1e9eb;\n+}\n+\n+div.caution pre {\n+    background-color:#faf8ed;\n+    color:#334558;\n+    border:1px solid #e1e9eb;\n+}\n+\n+div.warning pre {\n+    background-color:#faf8ed;\n+    color:#334558;\n+    border:1px solid #e1e9eb;\n+}\n+\n+/* Background images and margin */\n+\n+div.note, div.tip, div.important, div.caution, div.warning {margin-top:.5em;}\n+\n+div.note {background-image:url(../images/community/docbook/note.png);}\n+div.tip {background-image:url(../images/community/docbook/tip.png);}\n+div.important {background-image:url(../images/community/docbook/important.png);}\n+div.caution {background-image:url(../images/community/docbook/caution.png);}\n+div.warning {background-image:url(../images/community/docbook/warning.png);}\n+\n+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable {color:#e3dcc0;}\n+\n+pre .replaceable, tt .replaceable {color:#444 !important;}\n+\n+div.note h2, div.tip h2, div.important h2, div.caution h2, div.warning h2 {\n+    height:32px;\n+    font-size:1.3em;\n+}\n+\n+div.note h2 {color:#4c5253;}\n+div.tip h2 {color:white;}\n+div.important h2 {color:white;}\n+div.caution h2 {color:#533500;}\n+div.warning h2 {color:white;}\n+\n+div.note .guilabel, div.tip .guilabel, div.important .guilabel, div.caution .guilabel, div.warning .guilabel {color:white !important;}\n+\n+div.note li, div.tip li, div.caution li, div.warning li, div.important li {\n+\tpadding-left:10px;\n+\tmargin:0em;\n+}\n+\t\n+div.note ul, div.tip ul, div.caution ul, div.warning ul, div.important ul {\n+\tpadding-left:40px;\n+\tmargin:0em;\n+}\n+\n+div.note pre pre a:visited, div.tip pre pre a:visited, div.important pre pre a:visited, div.caution pre pre a:visited, div.warning pre pre a:visited,\n+div.note pre a:link, div.tip pre a:link, div.important pre a:link, div.caution pre a:link, div.warning pre a:link {color:#0066cc !important;}\n+\n+div.note a:visited, div.tip a:visited, div.important a:visited, div.warning a:visited,\n+div.note a:link, div.tip a:link, div.important a:link,  div.warning a:link {color:#f7f2d0;}\n+\t\n+div.note a:visited, div.note a:link, div.caution a:link, div.caution a:visited {color:#0066cc;}\n+\n+/* Admonition icons spacing */\n+\n+div.note h2, div.note p, div.tip h2, div.tip p, div.caution h2, div.caution p, div.warning h2, div.warning p, div.important h2, div.important p {\n+    padding:0em;\n+    margin:0em;\n+    padding-left:56px;\n+}\n+\n+/* Page Title */\n+\n+#title {\n+    padding:0px;\n+    margin:0px;\n+}\n+\n+#title strong {display:none;}\n+\n+#title a.site_href {\n+    display:block;\n+    height:89px;\n+    width:310px;\n+    float:left;\n+    background:url(../images/community/drools_logo.png) top left no-repeat;\n+}\n+\n+#title a.doc_href {\n+    display:block;\n+    height:89px;\n+    background:transparent url(../images/community/community_doc.png) top right no-repeat;\n+}\n+\n+/* Table */\n+\n+table {\n+    border:1px solid #aaa;\n+    width:100%;\n+    border-collapse:collapse;\n+}\n+\n+table th {\n+    text-align:left;\n+    background-color:#4A5D75;\n+    padding:.3em .5em;\n+    color:white;\n+}\n+\n+table td {padding:.15em .5em;}\n+\n+table tr.even td {background-color:#f5f5f5;}\n+\n+table th p:first-child, table td p:first-child, table li p:first-child {\n+    margin-top:0em;\n+    padding-top:0em;\n+    display:inline;\n+}\n+\n+th, td {border-style:none;}\n+\n+table table td {\n+    border-bottom:1px dotted #aaa !important;\n+    background-color:white;\n+    padding:.6em 0em;\n+}\n+\n+table table {\n+    border:1px solid white !important;\n+    font-size:.9em;\n+}\n+\n+td.remarkval {\n+    font-size:.9em;\n+    color:#444;\n+}\n+\n+.defaultval {font-size:.8em}\n+\n+td.typeval {font-size:.8em}\n+\n+td.fieldval {\n+    font-weight:bold;\n+    font-size:.9em;\n+}\n+\n+th.dbkey {font-size:.9em;}\n+\n+.lbname, .lbtype, .lbdescr, .lbdriver, .lbhost {\n+    color:white;\n+    font-weight:bold;\n+    background-color:#999;\n+    font-size:0.9em;\n+    width:120px;\n+}\n+\n+td.remarkval {width:230px;}\n+\n+td.tname {\n+    font-weight:bold;\n+    font-size:1.1em;\n+}\n+\n+h5 {font-size:9pt;}\n+h6 {font-size:10pt;}\n+\n+th.dbfield {width:120px;}\n+th.dbtype {width:70px;}\n+th.dbdefault {width:70px;}\n+th.dbnul {width:70px;}\n+th.dbkey {width:70px;}\n+\n+span.book {\n+    margin-top:4em;\n+    display:block;\n+}\n+\n+span.chapter {\n+    display:block;\n+    margin-top:0.5em;\n+}\n+\n+/* Breadcrumbs */\n+\n+#breadcrumbs ul li.first:before {content:\" \";}\n+\n+#breadcrumbs {\n+    color:#900;\n+    padding:3px;\n+    margin-bottom:25px;\n+}\n+\n+#breadcrumbs ul {\n+    margin-left:0;\n+    padding-left:0;\n+    display:inline;\n+    border:none;\n+}\n+\n+#breadcrumbs ul li {\n+    margin-left:0;\n+    padding-left:2px;\n+    border:none;\n+    list-style:none;\n+    display:inline;\n+}\n+\n+#breadcrumbs ul li:before {\n+    content:\"\\0020 \\0020 \\0020 \\00BB \\0020\";\n+    color:#333;\n+}\n+\n+/* Status */\n+\n+.alpha1 {background:white url(../images/community/watermark-alpha1.png) top left repeat;}\n+.alpha2 {background:white url(../images/community/watermark-alpha2.png) top left repeat;}\n+.beta1 {background:white url(../images/community/watermark-beta1.png) top left repeat;}\n+.beta2 {background:white url(../images/community/watermark-beta2.png) top left repeat;}\n+.pre-release-candidate {background:white url(../images/community/watermark-pre-release-candidate.png) top left repeat;}\n+.release-candidate {background:white url(../images/community/watermark-release-candidate.png) top left repeat;}\n+\n+/* Index */\n+\n+.glossary h3, .index h3 {\n+    font-size:2em;\n+    color:#aaa;\n+    margin:0em;\n+}\n+\n+.indexdiv {margin-bottom:1em;}\n+\n+.glossary dt, .index dt {\n+    font-size:.9em;\n+    color:#444;\n+    padding-top:.5em;\n+}\n+\n+.glossary dl dl dt, .index dl dl dt {\n+    font-size:.85em;\n+    color:#777;\n+    line-height:1.2em;\n+    font-weight:normal;\n+    padding-top:0em;\n+}\n+\n+.index dl dl dt:before {\n+    content:\"- \";\n+    color:#ccc;\n+}\n+\n+/* Changes */\n+\n+.footnotes {}\n+\n+.footnote {\n+    padding:.2em 1em;\n+    background-color:#c8c5ac;\n+    font-size:.9em;\n+    margin:0em;\n+    margin-bottom:.5em;\n+    color:#222;\n+}\n+\n+table .footnote {margin:1em .5em;}\n+\n+sup {\n+    padding:0em .3em;\n+    padding-left:0em;\n+}\n+\n+.footnote {position:relative;}\n+\n+.footnote sup {\n+    color:#e3dcc0;\n+    font-size:1.8em;\n+    position:absolute;\n+    left:.4em;\n+}\n+\n+.footnote sup a:link, .footnote sup a:visited {\n+    color:#92917d;\n+    text-decoration:none;\n+}\n+\n+.footnote:hover sup a {\n+    color:#fff;\n+    text-decoration:none;\n+}\n+\n+.footnote p {padding-left:5em;}\n+\n+.footnote a:link, .footnote a:visited {color:#00537c;}\n+\n+.footnote a:hover {color:white;}\n+\n+li p:first-child {\n+    margin:0em !important;\n+    padding:0em !important;\n+}\n+\n+div.chapter, div.section {padding-top:2em;}\n+\n+.revhistory {font-size:}\n+\n+pre .replaceable, pre .keycap {color:white;}\n+\n+pre {\n+  font-family:verdana,helvetica,sans-serif;\n+  background-color:#F5F5F5;\n+  border:1px solid #CCCCCC;\n+  padding:5px 15px 5px 25px;\n+}\n+\n+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable,\n+div.note .keycap, div.tip .keycap, div.important .keycap, div.caution .keycap, div.warning .keycap {color:white;}\n+\n+div.abstract {font-size:larger;}\n+\n+.authorgroup {}\n+\n+.authorgroup h4 {\n+    padding:0em;\n+    margin:0em;\n+    margin-top:1em;\n+}\n+\n+.author, .editor, .translator, .othercredit {display:block;}\n+\n+/* Simpler author style on contents page */\n+\n+.authorgroup div {\n+\tmargin-left:10px;\n+\tmargin-right:10px;\n+\tmargin-bottom:15px;\n+}\n+\n+ul li p:last-child {\n+    margin-bottom:0em;\n+    padding-bottom:0em;\n+}\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/extensions.css b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css\nnew file mode 100755\nindex 0000000000..fd43f3b670\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css\n@@ -0,0 +1,7 @@\n+/* Firefox */\n+\n+pre {-moz-border-radius:11px;}\n+\n+.example {-moz-border-radius:15px;}\n+\n+div.note, div.tip, div.important, div.caution, div.warning {-moz-border-radius:11px;}\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css\nnew file mode 100755\nindex 0000000000..ce16cff0e5\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css\n@@ -0,0 +1,80 @@\n+@import url(\"documentation.css\");\n+@import url(\"docnav.css\");\n+@import url(\"reports.css\");\n+@import url(\"extensions.css\");\n+@import url(\"codehighlight.css\");\n+\n+body {\n+    background-image:url(../images/community/bkg_gradient.gif);\n+    background-repeat:repeat-x;\n+    margin:0 auto;\n+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;\n+    font-size:12px;\n+    max-width:55em;\n+    padding:0em 2em;\n+    color:#333;\n+    line-height:150%;\n+    text-align:justify;\n+}\n+\n+/* Links */\n+\n+a:link {color:#0066cc;}\n+\n+a:visited {color:#6699cc;}\n+\n+div.longdesc-link {\n+    float:right;\n+    color:#999;\n+}\n+\n+/* Headings */\n+\n+h1, h2, h3, h4, h5, h6 {\n+    color:#4a5d75;\n+    line-height:130%;\n+    margin-top:0em;\n+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;\n+    background-color:transparent;\n+}\n+\n+h1 {\n+    background-image:url(../images/community/title_hdr.png);\n+    background-repeat:no-repeat;\n+    border-top:1px dotted #CCCCCC;\n+    line-height:1.2em;\n+    color:#182737;\n+    font-size:2em;\n+    padding:1.5em;\n+}\n+\n+h2 {font-size:1.6em;}\n+\n+h3 {\n+    font-size:1.3em;\n+    padding-top:0em;\n+    padding-bottom:0em;\n+}\n+\n+h4 {\n+    font-size:1.1em;\n+    padding-top:0em;\n+    padding-bottom:0em;\n+}\n+\n+h5.formalpara {\n+    font-size:1em;\n+    margin-top:2em;\n+    margin-bottom:.8em;\n+}\n+\n+/* Element rules */\n+\n+hr {\n+    border-collapse:collapse;\n+    border-style:none;\n+    border-top:1px dotted #ccc;\n+    width:100% !important;\n+}\n+\n+sup {color:#999;}\ndiff --git a/drools-docs/docbook-style-drools/src/main/css/css/reports.css b/drools-docs/docbook-style-drools/src/main/css/css/reports.css\nnew file mode 100755\nindex 0000000000..8dd639d4cb\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/css/css/reports.css\n@@ -0,0 +1,231 @@\n+/* Reports */\n+\n+.reports ul.locale {list-style:none;}\n+\n+.reports ul {\n+    padding:0em;\n+    margin:0em;\n+}\n+\n+.reports ul.locale li {\n+    font-size:small;\n+    color:#000;\n+    display:block;\n+    border:1px solid #eee;\n+    float:left;\n+    padding-right:2em;\n+    margin-right:1em;\n+    margin-bottom:1em;\n+}\n+\n+.reports ul.locale li a {\n+    font-size:1.2em;\n+    display:block;\n+    padding-top:.1em;\n+    padding-bottom:.5em;\n+}\n+\n+.reports ul.locale strong {\n+    display:block;\n+    margin:0em;\n+    padding:0em;\n+    margin-bottom:-2.2em;\n+}\n+\n+.reports ul.locale span.value {\n+    display:block;\n+    position:relative;\n+    text-align:right;\n+    margin-right:-1.5em;\n+    font-size:1.0em;\n+    color:#444;\n+}\n+\n+.reports ul.locale li {\n+    width:12em;\n+    display:block;\n+    float:left;\n+    margin:0em;\n+    clear:none;\n+}\n+\n+.reports ul.locale li div.progress {\n+    font-size:1em;\n+    width:13.2em;\n+    position:relative;\n+    left:0em;\n+    top:0em;\n+    margin-bottom:0em;\n+}\n+\n+.reports h2 {\n+    font-size:1em;\n+    margin:0em;\n+}\n+\n+.reports li {}\n+\n+.reports li:hover {\n+    background-color:#666;\n+    border-color:#444 !important;\n+    color:white !important;\n+}\n+\n+.reports li:hover strong, .reports li:hover h2, .reports li:hover a, .reports li:hover span.value {color:white;}\n+\n+/* Uniform */\n+\n+body.results, body.reports {\n+    max-width:57em !important;\n+    padding:0em !important;\n+}\n+\n+/* Progress Bar */\n+\n+div.progress {\n+    display:block;\n+    float:left;\n+    width:16em;\n+    background:#c00 url(../images/community/shine.png) top left repeat-x;\n+    height:1em;\n+}\n+\n+div.progress span {\n+    height:1em;\n+    float:left;\n+}\n+\n+div.progress span.translated {background:#6c3 url(../images/community/shine.png) top left repeat-x;}\n+div.progress span.fuzzy {background:#ff9f00 url(../images/community/shine.png) top left repeat-x;}\n+\n+/* Results */\n+\n+.results ul.locale {\n+    list-style:none;\n+    padding:0em;\n+    margin:0em;\n+}\n+\n+.results .pofile {\n+    padding:0em !important;\n+    margin:0em;\n+}\n+\n+.results ul.locale li {\n+    border-top:1px solid #eee;\n+    padding:0em;\n+    margin:0em;\n+    padding-left:32px;\n+}\n+\n+.results ul.locale .pofile {\n+    font-size:1.2em;\n+    display:block;\n+    width:100%;\n+    color:#444;\n+    padding:0em;\n+    margin:0em;\n+}\n+\n+.results span.value {color:#888;}\n+\n+.results strong {font-weight:normal;}\n+\n+.results .home a {\n+    display:block;\n+    margin:0 auto;\n+    width:5em;\n+    background:url(../images/community/docbook/home.png) top left no-repeat;\n+    padding:5px;\n+    padding-left:28px;\n+    font-size:1.2em;\n+}\n+\n+.results ul.locale li:hover, .results ul.locale li:hover span.pofile, .results ul.locale li:hover strong, .results ul.locale li:hover span.value {\n+    background-color:#666 !important;\n+    color:white;\n+}\n+\n+ul.locale {list-style:none;}\n+\n+ul.locale li.total {\n+    font-size:small;\n+    color:#777;\n+    width:31em;\n+    display:block;\n+    float:left;\n+    margin-right:2em;\n+    clear:none !important;\n+}\n+\n+ul.locale li {\n+    clear:both;\n+    font-size:small;\n+    color:#777;\n+    display:block;\n+}\n+\n+ul.locale strong, span.value {\n+    font-weight:normal;\n+    color:#888;\n+    font-size:.7em;\n+}\n+\n+ul.locale li a {\n+    font-size:1.2em;\n+    display:block;\n+    padding-top:.2em;\n+}\n+\n+ul.locale li.total div.progress {\n+    position:relative;\n+    left:0em;\n+    top:0em;\n+    margin-bottom:0em;\n+}\n+\n+ul.locale li {width:100%;}\n+\n+ul.locale li div.progress {\n+    float:left;\n+    position:relative;\n+    left:30.5em;\n+    top:-2em;\n+    margin:0em;\n+    margin-bottom:-3em;\n+}\n+\n+li.total {padding:0em !important;}\n+\n+li.total {\n+    float:right;\n+    max-width:16em;\n+    padding:.5em;\n+    margin:0 auto;\n+    padding-top:.5em;\n+    background-color:#f7f2d0;\n+    font-size:1.3em !important;\n+    color:#ccc !important;\n+    margin-bottom:1em;\n+    min-height:9.5em;\n+}\n+\n+li.total .value {\n+    color:#444;\n+    font-size:.8em;\n+}\n+\n+li.total strong {\n+    display:block;\n+    color:black;\n+    font-weight:bold;\n+}\n+\n+li.total span.value {\n+    position:relative;\n+    display:block;\n+    top:-1.25em;\n+    text-align:right;\n+}\n+\n+.pofile {position:relative;}\ndiff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif\nnew file mode 100755\nindex 0000000000..e67f720dc6\nBinary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif differ\ndiff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png\nnew file mode 100755\nindex 0000000000..5e2d744587\nBinary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png differ\ndiff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png\nnew file mode 100755\nindex 0000000000..0c28717781\nBinary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png differ\ndiff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg\nnew file mode 100755\nindex 0000000000..e020ca977e\n--- /dev/null\n+++ b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg\n@@ -0,0 +1,189 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n+<!-- Generator: Adobe Illustrator 12.0.1, SVG Export Plug-In  -->\r\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [\r\n+\t<!ENTITY ns_flows \"http://ns.adobe.com/Flows/1.0/\">\r\n+\t<!ENTITY ns_svg \"http://www.w3.org/2000/svg\">\r\n+\t<!ENTITY ns_xlink \"http://www.w3.org/1999/xlink\">\r\n+]>\r\n+<svg  version=\"1.1\" xmlns=\"&ns_svg;\" xmlns:xlink=\"&ns_xlink;\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\r\n+\t width=\"17\" height=\"17\" viewBox=\"-0.75 -0.625 17 17\" enable-background=\"new -0.75 -0.625 17 17\" xml:space=\"preserve\">\r\n+<defs>\r\n+</defs>\r\n+<g>\r\n+\t<defs>\r\n+\t\t<circle id=\"XMLID_6_\" cx=\"7.859\" cy=\"7.859\" r=\"7.484\"/>\r\n+\t</defs>\r\n+\t<clipPath id=\"XMLID_9_\">\r\n+\t\t<use xlink:href=\"#XMLID_6_\" />\r\n+\t</clipPath>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#CBD2D8\" points=\"0.375,11.68 5.102,15.344 0.375,15.344 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#CBD2D8\" points=\"0.375,11.547 5.273,15.344 5.105,15.344 0.375,11.68 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#C9D0D5\" points=\"0.375,11.414 5.445,15.344 5.273,15.344 0.375,11.547 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#C6CDD3\" points=\"0.375,11.281 5.617,15.344 5.445,15.344 0.375,11.414 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#C5CCD2\" points=\"0.375,11.148 5.789,15.344 5.617,15.344 0.375,11.281 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#C3C9D0\" points=\"0.375,11.016 5.961,15.344 5.789,15.344 0.375,11.148 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#C1C8CE\" points=\"0.375,10.883 6.129,15.344 5.961,15.344 0.375,11.016 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#BFC5CC\" points=\"0.375,10.75 6.301,15.344 6.129,15.344 0.375,10.883 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#BEC4CB\" points=\"0.375,10.617 6.473,15.344 6.301,15.344 0.375,10.75 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#BBC2C9\" points=\"0.375,10.484 6.645,15.344 6.473,15.344 0.375,10.617 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#BAC0C8\" points=\"0.375,10.352 6.812,15.344 6.645,15.344 0.375,10.484 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B7BEC6\" points=\"0.375,10.219 6.984,15.344 6.812,15.344 0.375,10.352 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B6BDC5\" points=\"0.375,10.086 7.156,15.344 6.984,15.344 0.375,10.219 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B5BBC3\" points=\"0.375,9.957 7.328,15.344 7.156,15.344 0.375,10.086 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B3BAC2\" points=\"0.375,9.824 7.5,15.344 7.328,15.344 0.375,9.957 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B1B7C0\" points=\"0.375,9.691 7.672,15.344 7.5,15.344 0.375,9.824 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#B0B6BF\" points=\"0.375,9.559 7.84,15.344 7.672,15.344 0.375,9.691 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#AEB5BE\" points=\"0.375,9.426 8.012,15.344 7.84,15.344 0.375,9.559 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#ADB3BC\" points=\"0.375,9.293 8.184,15.344 8.012,15.344 0.375,9.426 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#ABB2BC\" points=\"0.375,9.16 8.352,15.344 8.184,15.344 0.375,9.293 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#AAB0BA\" points=\"0.375,9.027 8.523,15.344 8.352,15.344 0.375,9.16 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A8AEB8\" points=\"0.375,8.895 8.695,15.344 8.523,15.344 0.375,9.027 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A6ADB7\" points=\"0.375,8.762 8.867,15.344 8.695,15.344 0.375,8.895 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A6ACB6\" points=\"0.375,8.629 9.039,15.344 8.867,15.344 0.375,8.762 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A3AAB4\" points=\"0.375,8.496 9.211,15.344 9.039,15.344 0.375,8.629 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A2A8B3\" points=\"0.375,8.363 9.383,15.344 9.211,15.344 0.375,8.496 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#A0A7B1\" points=\"0.375,8.23 9.551,15.344 9.383,15.344 0.375,8.363 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9FA6B0\" points=\"0.375,8.102 9.723,15.344 9.551,15.344 0.375,8.23 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9EA4AF\" points=\"0.375,7.969 9.895,15.344 9.723,15.344 0.375,8.102 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9CA3AE\" points=\"0.375,7.836 10.062,15.344 9.895,15.344 0.375,7.969 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9BA1AD\" points=\"0.375,7.703 10.234,15.344 10.062,15.344 0.375,7.836 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9AA0AB\" points=\"0.375,7.57 10.406,15.344 10.234,15.344 0.375,7.703 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#989FAA\" points=\"0.375,7.438 10.578,15.344 10.406,15.344 0.375,7.57 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#979EAA\" points=\"0.375,7.305 10.75,15.344 10.578,15.344 0.375,7.438 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#969CA8\" points=\"0.375,7.172 10.918,15.344 10.75,15.344 0.375,7.305 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#949BA7\" points=\"0.375,7.039 11.09,15.344 10.918,15.344 0.375,7.172 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9399A5\" points=\"0.375,6.906 11.262,15.344 11.09,15.344 0.375,7.039 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9298A4\" points=\"0.375,6.773 11.434,15.344 11.262,15.344 0.375,6.906 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#9097A3\" points=\"0.375,6.641 11.602,15.344 11.434,15.344 0.375,6.773 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#8F95A2\" points=\"0.375,6.508 11.773,15.344 11.602,15.344 0.375,6.641 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#8E95A1\" points=\"0.375,6.375 11.945,15.344 11.773,15.344 0.375,6.508 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#8D93A0\" points=\"0.375,6.242 12.117,15.344 11.945,15.344 0.375,6.375 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#8B929F\" points=\"0.375,6.113 12.289,15.344 12.117,15.344 0.375,6.242 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#8A919E\" points=\"0.375,5.98 12.461,15.344 12.289,15.344 0.375,6.113 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#898F9D\" points=\"0.375,5.848 12.629,15.344 12.461,15.344 0.375,5.98 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#878E9B\" points=\"0.375,5.715 12.801,15.344 12.629,15.344 0.375,5.848 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#878D9B\" points=\"0.375,5.582 12.973,15.344 12.801,15.344 0.375,5.715 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#858C9A\" points=\"0.375,5.449 13.141,15.344 12.973,15.344 0.375,5.582 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#848B98\" points=\"0.375,5.316 13.312,15.344 13.141,15.344 0.375,5.449 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#838A97\" points=\"0.375,5.184 13.484,15.344 13.312,15.344 0.375,5.316 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#828997\" points=\"0.375,5.051 13.656,15.344 13.484,15.344 0.375,5.184 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#818895\" points=\"0.375,4.918 13.828,15.344 13.656,15.344 0.375,5.051 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#808794\" points=\"0.375,4.785 14,15.344 13.828,15.344 0.375,4.918 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#7E8594\" points=\"0.375,4.652 14.172,15.344 14,15.344 0.375,4.785 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#7D8593\" points=\"0.375,4.52 14.34,15.344 14.172,15.344 0.375,4.652 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#7C8392\" points=\"0.375,4.387 14.512,15.344 14.34,15.344 0.375,4.52 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#7B8290\" points=\"0.375,4.258 14.68,15.344 14.512,15.344 0.375,4.387 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#7A8190\" points=\"0.375,4.125 14.852,15.344 14.68,15.344 0.375,4.258 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#79808F\" points=\"0.375,3.992 15.023,15.344 14.852,15.344 0.375,4.125 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#787F8D\" points=\"0.375,3.859 15.195,15.344 15.023,15.344 0.375,3.992 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#777E8D\" points=\"0.375,3.727 15.312,15.301 15.277,15.344 15.195,15.344 0.375,3.859 \t\r\n+\t\t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#767D8C\" points=\"0.375,3.594 15.344,15.195 15.344,15.258 15.312,15.301 0.375,3.727 \t\r\n+\t\t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#767C8B\" points=\"0.375,3.461 15.344,15.062 15.344,15.195 0.375,3.594 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#747B8A\" points=\"0.375,3.328 15.344,14.93 15.344,15.062 0.375,3.461 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#737A89\" points=\"0.375,3.195 15.344,14.797 15.344,14.93 0.375,3.328 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#727989\" points=\"0.375,3.062 15.344,14.664 15.344,14.797 0.375,3.195 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#717888\" points=\"0.375,2.93 15.344,14.531 15.344,14.664 0.375,3.062 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#707786\" points=\"0.375,2.797 15.344,14.398 15.344,14.531 0.375,2.93 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6F7686\" points=\"0.375,2.664 15.344,14.266 15.344,14.398 0.375,2.797 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6D7585\" points=\"0.375,2.531 15.344,14.133 15.344,14.266 0.375,2.664 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6D7584\" points=\"0.375,2.398 15.344,14 15.344,14.133 0.375,2.531 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6C7383\" points=\"0.375,2.266 15.344,13.867 15.344,14 0.375,2.398 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6B7383\" points=\"0.375,2.137 15.344,13.734 15.344,13.867 0.375,2.266 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#6A7281\" points=\"0.375,2 15.344,13.602 15.344,13.734 0.375,2.137 \t\"/>\r\n+\t<polygon clip-path=\"url(#XMLID_9_)\" fill=\"#697181\" points=\"0.375,1.871 15.344,13.469 15.344,13.602 0.375,2 \t\"/>\r\n+\t<polygon",
    "Automated merge with http : / / hg . netbeans . org / web - main": "diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml\nindex 5c858e64e..eec8cabf4 100644\n--- a/profiler/nbproject/project.xml\n+++ b/profiler/nbproject/project.xml\n@@ -270,8 +270,8 @@ made subject to such option by the copyright holder.\n                         <compile-dependency/>\n                     </test-dependency>\n                     <test-dependency>\n-                        <code-name-base>org.netbeans.core.ui</code-name-base>\n-                        <recursive/>\n+                        <code-name-base>org.netbeans.modules.sampler</code-name-base>\n+                        <compile-dependency/>\n                     </test-dependency>\n                 </test-type>\n             </test-dependencies>\ndiff --git a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java\nindex 67ae85c64..0b7f11249 100644\n--- a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java\n+++ b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java\n@@ -42,12 +42,9 @@\n \n package org.netbeans.modules.profiler.actions;\n \n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n import java.io.DataOutputStream;\n import java.io.OutputStream;\n import java.util.logging.Level;\n-import javax.swing.Action;\n import org.junit.Test;\n import org.netbeans.junit.Log;\n import org.netbeans.modules.profiler.ui.NpsDataObject;\n@@ -56,10 +53,12 @@ import org.openide.filesystems.FileObject;\n import org.openide.filesystems.FileUtil;\n import org.openide.loaders.DataObject;\n import static org.junit.Assert.*;\n+import org.netbeans.modules.sampler.Sampler;\n \n /** Shows how o.n.core uses the SelfSamplerAction to start and stop self profiling.\n  *\n  * @author Jaroslav Tulach <jtulach@netbeans.org>\n+ * @author Tomas Hurka\n  */\n public class SelfSamplerActionTest {\n \n@@ -68,24 +67,17 @@ public class SelfSamplerActionTest {\n \n     @Test\n     public void testSelfProfileToStream() throws Exception {\n-        FileObject afo = FileUtil.getConfigFile(\"Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance\");\n-        assertNotNull(\"SelfSamplerAction is in the right fileobject\", afo);\n-        Action a = (Action)afo.getAttribute(\"delegate\"); // NOI18N\n-        Object obj = a.getValue(\"logger-testprofile\");\n-        assertTrue(\"It is runnable\", obj instanceof Runnable);\n-        assertTrue(\"It is action listener\", obj instanceof ActionListener);\n+        Sampler sampler = Sampler.createManualSampler(\"testprofile\");\n+        assertTrue(\"sampler instance\", sampler != null);\n \n-        Runnable r = (Runnable)obj;\n-        ActionListener al = (ActionListener)obj;\n-\n-        r.run();\n+        sampler.start();\n         Thread.sleep(1000);\n-        assertLoggerThread(\"logger-testprofile shall be there\", true);\n+        assertSamplerThread(\"sampler-testprofile shall be there\", true);\n \n         FileObject fo = FileUtil.createMemoryFileSystem().getRoot().createData(\"slow.nps\");\n         OutputStream os = fo.getOutputStream();\n         DataOutputStream dos = new DataOutputStream(os);\n-        al.actionPerformed(new ActionEvent(dos, 0, \"write\")); // NOI18N\n+        sampler.stopAndWriteTo(dos);\n         dos.close();\n \n         if (fo.getSize() < 100) {\n@@ -104,39 +96,32 @@ public class SelfSamplerActionTest {\n             fail(\"There shall be no warnings:\\n\" + log);\n         }\n \n-        assertLoggerThread(\"no logger- thread shall be there\", false);\n+        assertSamplerThread(\"no sampler- thread shall be there\", false);\n     }\n \n     @Test\n     public void testSelfProfileCancel() throws Exception {\n-        FileObject afo = FileUtil.getConfigFile(\"Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance\");\n-        assertNotNull(\"SelfSamplerAction is in the right fileobject\", afo);\n-        Action a = (Action)afo.getAttribute(\"delegate\"); // NOI18N\n-        Object obj = a.getValue(\"logger-testprofile\");\n-        assertTrue(\"It is runnable\", obj instanceof Runnable);\n-        assertTrue(\"It is action listener\", obj instanceof ActionListener);\n-\n-        Runnable r = (Runnable)obj;\n-        ActionListener al = (ActionListener)obj;\n+        Sampler sampler = Sampler.createManualSampler(\"testprofile\");\n+        assertTrue(\"sampler instance\", sampler != null);\n \n-        r.run();\n+        sampler.start();\n         Thread.sleep(1000);\n-        assertLoggerThread(\"logger-testprofile shall be there\", true);\n+        assertSamplerThread(\"sampler-testprofile shall be there\", true);\n \n-        al.actionPerformed(new ActionEvent(this, 0, \"cancel\")); // NOI18N\n+        sampler.cancel();\n         Thread.sleep(1000);\n \n-        assertLoggerThread(\"no logger- thread shall be there\", false);\n+        assertSamplerThread(\"no sampler- thread shall be there\", false);\n     }\n \n-    private void assertLoggerThread(String msg, boolean exist) {\n+    private void assertSamplerThread(String msg, boolean exist) {\n         for (Thread t : Thread.getAllStackTraces().keySet()) {\n-            if (t.getName().startsWith(\"logger-\")) {\n+            if (t.getName().startsWith(\"sampler-\")) {\n                 assertTrue(msg + \" There is \" + t.getName() + \" thread\", exist);\n                 return;\n             }\n         }\n-        assertFalse(msg + \" There is no logger- thread\", exist);\n+        assertFalse(msg + \" There is no sampler- thread\", exist);\n     }\n \n ",
    "Add android . permission . FOREGROUND_SERVICE .": "diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml\nindex 2234048ac1..e80e37688d 100644\n--- a/demos/main/src/main/AndroidManifest.xml\n+++ b/demos/main/src/main/AndroidManifest.xml\n@@ -21,6 +21,7 @@\n   <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n   <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n   <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n+  <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n \n   <uses-feature android:name=\"android.software.leanback\" android:required=\"false\"/>\n   <uses-feature android:name=\"android.hardware.touchscreen\" android:required=\"false\"/>\ndiff --git a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java\nindex f75607f268..5227411266 100644\n--- a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java\n+++ b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java\n@@ -38,6 +38,7 @@ import com.google.android.exoplayer2.util.Util;\n  *\n  * <pre>{@literal\n  * <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n+ * <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n  *\n  * <service\n  *     android:name=\"com.google.android.exoplayer2.ext.jobdispatcher.JobDispatcherScheduler$JobDispatcherSchedulerService\"\ndiff --git a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java\nindex b3737eb8bc..20254c87ae 100644\n--- a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java\n+++ b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java\n@@ -34,6 +34,7 @@ import com.google.android.exoplayer2.util.Util;\n  *\n  * <pre>{@literal\n  * <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n+ * <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>\n  *\n  * <service android:name=\"com.google.android.exoplayer2.util.scheduler.PlatformScheduler$PlatformSchedulerService\"\n  *     android:permission=\"android.permission.BIND_JOB_SERVICE\"",
    "publish agentweb - 4 . 0 . 0 - alpha - 2": "diff --git a/.idea/gradle.xml b/.idea/gradle.xml\nindex 061d676..4a38c71 100644\n--- a/.idea/gradle.xml\n+++ b/.idea/gradle.xml\n@@ -3,13 +3,13 @@\n   <component name=\"GradleSettings\">\n     <option name=\"linkedExternalProjectsSettings\">\n       <GradleProjectSettings>\n-        <option name=\"distributionType\" value=\"LOCAL\" />\n+        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n         <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n-        <option name=\"gradleHome\" value=\"D:/gradle/gradle-3.3\" />\n+        <option name=\"gradleHome\" value=\"$USER_HOME$/Downloads/gradle-4.1\" />\n         <option name=\"modules\">\n           <set>\n             <option value=\"$PROJECT_DIR$\" />\n-            <option value=\"$PROJECT_DIR$/agentweb\" />\n+            <option value=\"$PROJECT_DIR$/agentweb-core\" />\n             <option value=\"$PROJECT_DIR$/agentweb-download\" />\n             <option value=\"$PROJECT_DIR$/agentweb-filechooser\" />\n             <option value=\"$PROJECT_DIR$/sample\" />\ndiff --git a/.idea/misc.xml b/.idea/misc.xml\nindex 98ec6f4..aed2c98 100644\n--- a/.idea/misc.xml\n+++ b/.idea/misc.xml\n@@ -24,7 +24,7 @@\n       </value>\n     </option>\n   </component>\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" default=\"true\" project-jdk-name=\"1.8 (4)\" project-jdk-type=\"JavaSDK\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8 (4)\" project-jdk-type=\"JavaSDK\">\n     <output url=\"file://$PROJECT_DIR$/build/classes\" />\n   </component>\n   <component name=\"ProjectType\">\ndiff --git a/.idea/modules.xml b/.idea/modules.xml\nindex 33d8c1c..41dfbd1 100644\n--- a/.idea/modules.xml\n+++ b/.idea/modules.xml\n@@ -3,10 +3,10 @@\n   <component name=\"ProjectModuleManager\">\n     <modules>\n       <module fileurl=\"file://$PROJECT_DIR$/AgentWeb.iml\" filepath=\"$PROJECT_DIR$/AgentWeb.iml\" />\n-      <module fileurl=\"file://$PROJECT_DIR$/agentweb/library.iml\" filepath=\"$PROJECT_DIR$/agentweb/library.iml\" />\n-      <module fileurl=\"file://$PROJECT_DIR$/agentweb/agentweb.iml\" filepath=\"$PROJECT_DIR$/agentweb/agentweb.iml\" />\n+      <module fileurl=\"file://$PROJECT_DIR$/agentweb-core/agentweb.iml\" filepath=\"$PROJECT_DIR$/agentweb-core/agentweb.iml\" />\n       <module fileurl=\"file://$PROJECT_DIR$/agentweb-download/agentweb-download.iml\" filepath=\"$PROJECT_DIR$/agentweb-download/agentweb-download.iml\" />\n       <module fileurl=\"file://$PROJECT_DIR$/agentweb-filechooser/agentweb-filechooser.iml\" filepath=\"$PROJECT_DIR$/agentweb-filechooser/agentweb-filechooser.iml\" />\n+      <module fileurl=\"file://$PROJECT_DIR$/agentweb/library.iml\" filepath=\"$PROJECT_DIR$/agentweb/library.iml\" />\n       <module fileurl=\"file://$PROJECT_DIR$/sample/sample.iml\" filepath=\"$PROJECT_DIR$/sample/sample.iml\" />\n     </modules>\n   </component>\ndiff --git a/agentweb/.gitignore b/agentweb-core/.gitignore\nsimilarity index 100%\nrename from agentweb/.gitignore\nrename to agentweb-core/.gitignore\ndiff --git a/agentweb/build.gradle b/agentweb-core/build.gradle\nsimilarity index 98%\nrename from agentweb/build.gradle\nrename to agentweb-core/build.gradle\nindex aab915d..ad38103 100644\n--- a/agentweb/build.gradle\n+++ b/agentweb-core/build.gradle\n@@ -51,7 +51,7 @@ publish {\n     userOrg = 'just'\n     groupId = 'com.just.agentweb'\n     artifactId = 'agentweb'\n-    version = '4.0.0'\n+    version = '4.0.0-alpha-2'\n     description = 'very easy to build you web page'\n     website = \"https://github.com/Justson/AgentWeb\"\n \ndiff --git a/agentweb/proguard-rules.pro b/agentweb-core/proguard-rules.pro\nsimilarity index 100%\nrename from agentweb/proguard-rules.pro\nrename to agentweb-core/proguard-rules.pro\ndiff --git a/agentweb/providedLibs/alipaySdk-20170922.jar b/agentweb-core/providedLibs/alipaySdk-20170922.jar\nsimilarity index 100%\nrename from agentweb/providedLibs/alipaySdk-20170922.jar\nrename to agentweb-core/providedLibs/alipaySdk-20170922.jar\ndiff --git a/agentweb/src/androidTest/java/com/just/agentweb/ExampleInstrumentedTest.java b/agentweb-core/src/androidTest/java/com/just/agentweb/ExampleInstrumentedTest.java\nsimilarity index 100%\nrename from agentweb/src/androidTest/java/com/just/agentweb/ExampleInstrumentedTest.java\nrename to agentweb-core/src/androidTest/java/com/just/agentweb/ExampleInstrumentedTest.java\ndiff --git a/agentweb/src/main/AndroidManifest.xml b/agentweb-core/src/main/AndroidManifest.xml\nsimilarity index 100%\nrename from agentweb/src/main/AndroidManifest.xml\nrename to agentweb-core/src/main/AndroidManifest.xml\ndiff --git a/agentweb/src/main/java/com/just/agentweb/Action.java b/agentweb-core/src/main/java/com/just/agentweb/Action.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/Action.java\nrename to agentweb-core/src/main/java/com/just/agentweb/Action.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/ActionActivity.java b/agentweb-core/src/main/java/com/just/agentweb/ActionActivity.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/ActionActivity.java\nrename to agentweb-core/src/main/java/com/just/agentweb/ActionActivity.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWeb.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWeb.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWeb.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWeb.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebConfig.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebConfig.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebConfig.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebFileProvider.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebFileProvider.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebFileProvider.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebFileProvider.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebJsInterfaceCompat.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebJsInterfaceCompat.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebJsInterfaceCompat.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebJsInterfaceCompat.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebPermissions.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebPermissions.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebPermissions.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebPermissions.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebSettings.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebSettings.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebSettings.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebSettings.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebUIController.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebUIController.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebUIController.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebUIController.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebUIControllerImplBase.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebUIControllerImplBase.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebUIControllerImplBase.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebUIControllerImplBase.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebUtils.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebUtils.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebUtils.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebUtils.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/AgentWebView.java b/agentweb-core/src/main/java/com/just/agentweb/AgentWebView.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/AgentWebView.java\nrename to agentweb-core/src/main/java/com/just/agentweb/AgentWebView.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/BaseAgentWebActivity.java b/agentweb-core/src/main/java/com/just/agentweb/BaseAgentWebActivity.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/BaseAgentWebActivity.java\nrename to agentweb-core/src/main/java/com/just/agentweb/BaseAgentWebActivity.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/BaseAgentWebFragment.java b/agentweb-core/src/main/java/com/just/agentweb/BaseAgentWebFragment.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/BaseAgentWebFragment.java\nrename to agentweb-core/src/main/java/com/just/agentweb/BaseAgentWebFragment.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/BaseIndicatorSpec.java b/agentweb-core/src/main/java/com/just/agentweb/BaseIndicatorSpec.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/BaseIndicatorSpec.java\nrename to agentweb-core/src/main/java/com/just/agentweb/BaseIndicatorSpec.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/BaseIndicatorView.java b/agentweb-core/src/main/java/com/just/agentweb/BaseIndicatorView.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/BaseIndicatorView.java\nrename to agentweb-core/src/main/java/com/just/agentweb/BaseIndicatorView.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/BaseJsAccessEntrace.java b/agentweb-core/src/main/java/com/just/agentweb/BaseJsAccessEntrace.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/BaseJsAccessEntrace.java\nrename to agentweb-core/src/main/java/com/just/agentweb/BaseJsAccessEntrace.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultChromeClient.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultChromeClient.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultChromeClient.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultChromeClient.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultDesignUIController.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultDesignUIController.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultDesignUIController.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultDesignUIController.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultMsgConfig.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultMsgConfig.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultMsgConfig.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultMsgConfig.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultUIController.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultUIController.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultUIController.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultUIController.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultWebClient.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultWebClient.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultWebClient.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultWebClient.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultWebCreator.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultWebCreator.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultWebCreator.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultWebCreator.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DefaultWebLifeCycleImpl.java b/agentweb-core/src/main/java/com/just/agentweb/DefaultWebLifeCycleImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DefaultWebLifeCycleImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DefaultWebLifeCycleImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/DownloadListener.java b/agentweb-core/src/main/java/com/just/agentweb/DownloadListener.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/DownloadListener.java\nrename to agentweb-core/src/main/java/com/just/agentweb/DownloadListener.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/EventHandlerImpl.java b/agentweb-core/src/main/java/com/just/agentweb/EventHandlerImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/EventHandlerImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/EventHandlerImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/EventInterceptor.java b/agentweb-core/src/main/java/com/just/agentweb/EventInterceptor.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/EventInterceptor.java\nrename to agentweb-core/src/main/java/com/just/agentweb/EventInterceptor.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/FragmentKeyDown.java b/agentweb-core/src/main/java/com/just/agentweb/FragmentKeyDown.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/FragmentKeyDown.java\nrename to agentweb-core/src/main/java/com/just/agentweb/FragmentKeyDown.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/HookManager.java b/agentweb-core/src/main/java/com/just/agentweb/HookManager.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/HookManager.java\nrename to agentweb-core/src/main/java/com/just/agentweb/HookManager.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/HttpHeaders.java b/agentweb-core/src/main/java/com/just/agentweb/HttpHeaders.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/HttpHeaders.java\nrename to agentweb-core/src/main/java/com/just/agentweb/HttpHeaders.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IEventHandler.java b/agentweb-core/src/main/java/com/just/agentweb/IEventHandler.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IEventHandler.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IEventHandler.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IUrlLoader.java b/agentweb-core/src/main/java/com/just/agentweb/IUrlLoader.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IUrlLoader.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IUrlLoader.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IVideo.java b/agentweb-core/src/main/java/com/just/agentweb/IVideo.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IVideo.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IVideo.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IWebIndicator.java b/agentweb-core/src/main/java/com/just/agentweb/IWebIndicator.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IWebIndicator.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IWebIndicator.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IWebLayout.java b/agentweb-core/src/main/java/com/just/agentweb/IWebLayout.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IWebLayout.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IWebLayout.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IndicatorController.java b/agentweb-core/src/main/java/com/just/agentweb/IndicatorController.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IndicatorController.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IndicatorController.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/IndicatorHandler.java b/agentweb-core/src/main/java/com/just/agentweb/IndicatorHandler.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/IndicatorHandler.java\nrename to agentweb-core/src/main/java/com/just/agentweb/IndicatorHandler.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsAccessEntrace.java b/agentweb-core/src/main/java/com/just/agentweb/JsAccessEntrace.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsAccessEntrace.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsAccessEntrace.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsAccessEntraceImpl.java b/agentweb-core/src/main/java/com/just/agentweb/JsAccessEntraceImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsAccessEntraceImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsAccessEntraceImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsBaseInterfaceHolder.java b/agentweb-core/src/main/java/com/just/agentweb/JsBaseInterfaceHolder.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsBaseInterfaceHolder.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsBaseInterfaceHolder.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsCallJava.java b/agentweb-core/src/main/java/com/just/agentweb/JsCallJava.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsCallJava.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsCallJava.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsCallback.java b/agentweb-core/src/main/java/com/just/agentweb/JsCallback.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsCallback.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsCallback.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsInterfaceHolder.java b/agentweb-core/src/main/java/com/just/agentweb/JsInterfaceHolder.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsInterfaceHolder.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsInterfaceHolder.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsInterfaceHolderImpl.java b/agentweb-core/src/main/java/com/just/agentweb/JsInterfaceHolderImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsInterfaceHolderImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsInterfaceHolderImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/JsInterfaceObjectException.java b/agentweb-core/src/main/java/com/just/agentweb/JsInterfaceObjectException.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/JsInterfaceObjectException.java\nrename to agentweb-core/src/main/java/com/just/agentweb/JsInterfaceObjectException.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/LayoutParamsOffer.java b/agentweb-core/src/main/java/com/just/agentweb/LayoutParamsOffer.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/LayoutParamsOffer.java\nrename to agentweb-core/src/main/java/com/just/agentweb/LayoutParamsOffer.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/LogUtils.java b/agentweb-core/src/main/java/com/just/agentweb/LogUtils.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/LogUtils.java\nrename to agentweb-core/src/main/java/com/just/agentweb/LogUtils.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/MiddlewareWebChromeBase.java b/agentweb-core/src/main/java/com/just/agentweb/MiddlewareWebChromeBase.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/MiddlewareWebChromeBase.java\nrename to agentweb-core/src/main/java/com/just/agentweb/MiddlewareWebChromeBase.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/MiddlewareWebClientBase.java b/agentweb-core/src/main/java/com/just/agentweb/MiddlewareWebClientBase.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/MiddlewareWebClientBase.java\nrename to agentweb-core/src/main/java/com/just/agentweb/MiddlewareWebClientBase.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/Notify.java b/agentweb-core/src/main/java/com/just/agentweb/Notify.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/Notify.java\nrename to agentweb-core/src/main/java/com/just/agentweb/Notify.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/PermissionInterceptor.java b/agentweb-core/src/main/java/com/just/agentweb/PermissionInterceptor.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/PermissionInterceptor.java\nrename to agentweb-core/src/main/java/com/just/agentweb/PermissionInterceptor.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/Provider.java b/agentweb-core/src/main/java/com/just/agentweb/Provider.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/Provider.java\nrename to agentweb-core/src/main/java/com/just/agentweb/Provider.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/QuickCallJs.java b/agentweb-core/src/main/java/com/just/agentweb/QuickCallJs.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/QuickCallJs.java\nrename to agentweb-core/src/main/java/com/just/agentweb/QuickCallJs.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/UrlCommonException.java b/agentweb-core/src/main/java/com/just/agentweb/UrlCommonException.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/UrlCommonException.java\nrename to agentweb-core/src/main/java/com/just/agentweb/UrlCommonException.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/UrlLoaderImpl.java b/agentweb-core/src/main/java/com/just/agentweb/UrlLoaderImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/UrlLoaderImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/UrlLoaderImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/VideoImpl.java b/agentweb-core/src/main/java/com/just/agentweb/VideoImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/VideoImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/VideoImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebChromeClientWrapper.java b/agentweb-core/src/main/java/com/just/agentweb/WebChromeClientWrapper.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebChromeClientWrapper.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebChromeClientWrapper.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebCreator.java b/agentweb-core/src/main/java/com/just/agentweb/WebCreator.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebCreator.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebCreator.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java b/agentweb-core/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java\nsimilarity index 92%\nrename from agentweb/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java\nindex 12c099b..de82e94 100755\n--- a/agentweb/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java\n+++ b/agentweb-core/src/main/java/com/just/agentweb/WebDefaultSettingsManager.java\n@@ -18,9 +18,9 @@ public class WebDefaultSettingsManager implements AgentWebSettings, WebListenerM\n \r\n     private android.webkit.WebSettings mWebSettings;\r\n     private static final String TAG = WebDefaultSettingsManager.class.getSimpleName();\r\n-    public static final String USERAGENT_UC=\" UCBrowser/11.6.4.950 \";\r\n-    public static final String USERAGENT_QQ_BROWSER=\" MQQBrowser/8.0 \";\r\n-    public static final String USERAGENT_AGENTWEB=\" agentweb/3.1.0 \";\r\n+    public static final String USERAGENT_UC = \" UCBrowser/11.6.4.950 \";\r\n+    public static final String USERAGENT_QQ_BROWSER = \" MQQBrowser/8.0 \";\r\n+    public static final String USERAGENT_AGENTWEB = \" agentweb/4.0.0-alpha \";\r\n \r\n     public static WebDefaultSettingsManager getInstance() {\r\n         return new WebDefaultSettingsManager();\r\n@@ -107,7 +107,7 @@ public class WebDefaultSettingsManager implements AgentWebSettings, WebListenerM\n         );\r\n \r\n \r\n-        LogUtils.i(TAG,\"UserAgentString : \"+mWebSettings.getUserAgentString());\r\n+        LogUtils.i(TAG, \"UserAgentString : \" + mWebSettings.getUserAgentString());\r\n \r\n \r\n     }\r\n@@ -133,8 +133,6 @@ public class WebDefaultSettingsManager implements AgentWebSettings, WebListenerM\n     @Override\r\n     public WebListenerManager setDownLoader(WebView webView, DownloadListener downloadListener) {\r\n         webView.setDownloadListener(downloadListener);\r\n-\r\n-\r\n         return this;\r\n     }\r\n \r\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebIndicator.java b/agentweb-core/src/main/java/com/just/agentweb/WebIndicator.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebIndicator.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebIndicator.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebLifeCycle.java b/agentweb-core/src/main/java/com/just/agentweb/WebLifeCycle.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebLifeCycle.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebLifeCycle.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebListenerManager.java b/agentweb-core/src/main/java/com/just/agentweb/WebListenerManager.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebListenerManager.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebListenerManager.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebParentLayout.java b/agentweb-core/src/main/java/com/just/agentweb/WebParentLayout.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebParentLayout.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebParentLayout.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebSecurityCheckLogic.java b/agentweb-core/src/main/java/com/just/agentweb/WebSecurityCheckLogic.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebSecurityCheckLogic.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebSecurityCheckLogic.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebSecurityController.java b/agentweb-core/src/main/java/com/just/agentweb/WebSecurityController.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebSecurityController.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebSecurityController.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebSecurityControllerImpl.java b/agentweb-core/src/main/java/com/just/agentweb/WebSecurityControllerImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebSecurityControllerImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebSecurityControllerImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WebSecurityLogicImpl.java b/agentweb-core/src/main/java/com/just/agentweb/WebSecurityLogicImpl.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WebSecurityLogicImpl.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WebSecurityLogicImpl.java\ndiff --git a/agentweb/src/main/java/com/just/agentweb/WrapperWebViewClient.java b/agentweb-core/src/main/java/com/just/agentweb/WrapperWebViewClient.java\nsimilarity index 100%\nrename from agentweb/src/main/java/com/just/agentweb/WrapperWebViewClient.java\nrename to agentweb-core/src/main/java/com/just/agentweb/WrapperWebViewClient.java\ndiff --git a/agentweb/src/main/res/layout/agentweb_error_page.xml b/agentweb-core/src/main/res/layout/agentweb_error_page.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/layout/agentweb_error_page.xml\nrename to agentweb-core/src/main/res/layout/agentweb_error_page.xml\ndiff --git a/agentweb/src/main/res/values/colors.xml b/agentweb-core/src/main/res/values/colors.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/values/colors.xml\nrename to agentweb-core/src/main/res/values/colors.xml\ndiff --git a/agentweb/src/main/res/values/ids.xml b/agentweb-core/src/main/res/values/ids.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/values/ids.xml\nrename to agentweb-core/src/main/res/values/ids.xml\ndiff --git a/agentweb/src/main/res/values/strings.xml b/agentweb-core/src/main/res/values/strings.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/values/strings.xml\nrename to agentweb-core/src/main/res/values/strings.xml\ndiff --git a/agentweb/src/main/res/values/style.xml b/agentweb-core/src/main/res/values/style.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/values/style.xml\nrename to agentweb-core/src/main/res/values/style.xml\ndiff --git a/agentweb/src/main/res/xml/web_files_paths.xml b/agentweb-core/src/main/res/xml/web_files_paths.xml\nsimilarity index 100%\nrename from agentweb/src/main/res/xml/web_files_paths.xml\nrename to agentweb-core/src/main/res/xml/web_files_paths.xml\ndiff --git a/agentweb/src/test/java/com/just/agentweb/ExampleUnitTest.java b/agentweb-core/src/test/java/com/just/agentweb/ExampleUnitTest.java\nsimilarity index 100%\nrename from agentweb/src/test/java/com/just/agentweb/ExampleUnitTest.java\nrename to agentweb-core/src/test/java/com/just/agentweb/ExampleUnitTest.java\ndiff --git a/agentweb-download/build.gradle b/agentweb-download/build.gradle\nindex 304f0bb..5be9262 100644\n--- a/agentweb-download/build.gradle\n+++ b/agentweb-download/build.gradle\n@@ -24,6 +24,9 @@ android {\n         }\n     }\n \n+    lintOptions{\n+        abortOnError false\n+    }\n }\n \n dependencies {\n@@ -35,7 +38,7 @@ dependencies {\n     testCompile 'junit:junit:4.12'\n     provided \"com.android.support:design:${SUPPORT_LIB_VERSION}\"\n     provided \"com.android.support:support-v4:${SUPPORT_LIB_VERSION}\"\n-    provided project(':agentweb')\n+    provided project(':agentweb-core')\n }\n task javadoc(type: Javadoc) {\n     options.encoding = \"utf-8\"\n@@ -44,7 +47,7 @@ publish {\n     userOrg = 'just'\n     groupId = 'com.just.agentweb'\n     artifactId = 'download'\n-    version = '4.0.0'\n+    version = '4.0.0-alpha-2'\n     description = 'very easy to build you web page'\n     website = \"https://github.com/Justson/AgentWeb\"\n \ndiff --git a/agentweb-filechooser/build.gradle b/agentweb-filechooser/build.gradle\nindex f48a56b..094f541 100644\n--- a/agentweb-filechooser/build.gradle\n+++ b/agentweb-filechooser/build.gradle\n@@ -23,6 +23,9 @@ android {\n             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n         }\n     }\n+    lintOptions{\n+        abortOnError false\n+    }\n \n }\n \n@@ -35,7 +38,7 @@ dependencies {\n     testCompile 'junit:junit:4.12'\n     provided \"com.android.support:design:${SUPPORT_LIB_VERSION}\"\n     provided \"com.android.support:support-v4:${SUPPORT_LIB_VERSION}\"\n-    provided project(':agentweb')\n+    provided project(':agentweb-core')\n }\n task javadoc(type: Javadoc) {\n     options.encoding = \"utf-8\"\n@@ -44,7 +47,7 @@ publish {\n     userOrg = 'just'\n     groupId = 'com.just.agentweb'\n     artifactId = 'filechooser'\n-    version = '4.0.0'\n+    version = '4.0.0-alpha-2'\n     description = 'very easy to build you web page'\n     website = \"https://github.com/Justson/AgentWeb\"\n \ndiff --git a/build.gradle b/build.gradle\nindex 4beb23b..2f186d9 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -11,7 +11,7 @@ buildscript {\n     }\n     dependencies {\n         classpath 'com.android.tools.build:gradle:2.3.1'\n-\n+//        classpath 'com.android.tools.build:gradle:3.0.1'\n         classpath 'com.novoda:bintray-release:0.3.4'\n         // NOTE: Do not place your application dependencies here; they belong\n         // in the individual module build.gradle files\n@@ -37,4 +37,6 @@ tasks.withType(Javadoc) {\n task clean(type: Delete) {\n     delete rootProject.buildDir\n }\n-tasks.getByPath(\":agentweb:mavenAndroidJavadocs\").enabled = false\n+tasks.getByPath(\":agentweb-core:mavenAndroidJavadocs\").enabled = false\n+tasks.getByPath(\":agentweb-download:mavenAndroidJavadocs\").enabled = false\n+tasks.getByPath(\":agentweb-filechooser:mavenAndroidJavadocs\").enabled = false\ndiff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties\nindex cb3bef0..7ab185f 100644\n--- a/gradle/wrapper/gradle-wrapper.properties\n+++ b/gradle/wrapper/gradle-wrapper.properties\n@@ -1,4 +1,4 @@\n-#Fri May 12 20:23:16 CST 2017\n+#Sun Jan 28 16:52:17 CST 2018\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\ndiff --git a/sample/build.gradle b/sample/build.gradle\nindex 44215d3..fab703a 100644\n--- a/sample/build.gradle\n+++ b/sample/build.gradle\n@@ -32,11 +32,11 @@ android {\n         }\n     }\n     sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }\n-    lintOptions{\n+    lintOptions {\n         abortOnError false\n     }\n \n-    lintOptions{\n+    lintOptions {\n         abortOnError false;\n     }\n \n@@ -52,8 +52,12 @@ dependencies {\n     compile \"com.android.support:design:${SUPPORT_LIB_VERSION}\"\n     //    compile \"com.android.support:support-v4:${SUPPORT_LIB_VERSION}\"\n     testCompile 'junit:junit:4.12'\n-    compile project(':agentweb')\n-    //        compile 'com.just.agentweb:agentweb:3.1.0'\n+    compile project(':agentweb-core')\n+    compile project(':agentweb-download')\n+    compile project(':agentweb-filechooser')\n+//    compile 'com.just.agentweb:agentweb:4.0.0-alpha-2'\n+//    compile 'com.just.agentweb:agentweb-download:4.0.0-alpha-2'\n+//    compile 'com.just.agentweb:agentweb-filechooser:4.0.0-alpha-2'\n     debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'\n     releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n     testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n@@ -65,6 +69,5 @@ dependencies {\n     compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'\n     compile 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.3'\n     compile 'com.tencent.sonic:sdk:2.0.0'\n-    compile project(':agentweb-download')\n-    compile project(':agentweb-filechooser')\n+\n }\ndiff --git a/settings.gradle b/settings.gradle\nindex 4947ddc..21ba31b 100644\n--- a/settings.gradle\n+++ b/settings.gradle\n@@ -1 +1 @@\n-include ':sample', ':agentweb', ':agentweb-download', ':agentweb-filechooser'\n+include ':sample', ':agentweb-core', ':agentweb-download', ':agentweb-filechooser'",
    "Bump JUnit 5 to 5 . 3 . 1": "diff --git a/subprojects/groovy-test-junit5/build.gradle b/subprojects/groovy-test-junit5/build.gradle\nindex cda4ea783e..12d134ed16 100644\n--- a/subprojects/groovy-test-junit5/build.gradle\n+++ b/subprojects/groovy-test-junit5/build.gradle\n@@ -17,8 +17,8 @@\n  *  under the License.\n  */\n ext {\n-    junit5Version = '5.3.0'\n-    junit5PlatformVersion = '1.3.0'\n+    junit5Version = '5.3.1'\n+    junit5PlatformVersion = '1.3.1'\n }\n \n dependencies {",
    "Clarifies model_size_stats . total_xxx_field_count objects and removes notes in GET job stats API docs .": "diff --git a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc\nindex 76d918d68c2..d6246e73417 100644\n--- a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc\n+++ b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc\n@@ -237,25 +237,16 @@ this value indicates the latest size.\n (string) For internal use. The type of result.\n \n `model_size_stats`.`total_by_field_count`:::\n-(long) The number of `by` field values that were analyzed by the models.\n-+\n---\n-NOTE: The `by` field values are counted separately for each detector and\n-partition.\n-\n---\n+(long) The number of `by` field values that were analyzed by the models. This \n+value is cumulative for all detectors.\n \n `model_size_stats`.`total_over_field_count`:::\n-(long) The number of `over` field values that were analyzed by the models.\n-+\n---\n-NOTE: The `over` field values are counted separately for each detector and\n-partition.\n-\n---\n+(long) The number of `over` field values that were analyzed by the models. This \n+value is cumulative for all detectors.\n \n `model_size_stats`.`total_partition_field_count`:::\n-(long) The number of `partition` field values that were analyzed by the models.\n+(long) The number of `partition` field values that were analyzed by the models. \n+This value is cumulative for all detectors.\n \n `model_size_stats`.`timestamp`:::\n (date) The timestamp of the `model_size_stats` according to the timestamp of the",
    "Add ciphers and sslEnabledProtocols to the test": "diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal\nindex cbd6b088670..f3daed0adb9 100644\n--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal\n+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal\n@@ -18,7 +18,9 @@ function getConnectorConfigs() (http:Options) {\n                keyStoreFile:\"${ballerina.home}/bre/security/wso2carbon.jks\",\n                keyStorePassword:\"wso2carbon\",\n                trustStoreFile:\"${ballerina.home}/bre/security/client-truststore.jks\",\n-               trustStorePassword:\"wso2carbon\"\n+               trustStorePassword:\"wso2carbon\",\n+               ciphers:\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+               sslEnabledProtocols:\"TLSv1.2,TLSv1.1\"\n                    },\n               followRedirects: {}\n     };\ndiff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal\nindex 3929f00c9e6..10dc2098671 100644\n--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal\n+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal\n@@ -9,7 +9,9 @@ import ballerina.lang.system;\n     certPassword:\"wso2carbon\",\n     sslVerifyClient:\"require\",\n     trustStoreFile:\"${ballerina.home}/bre/security/client-truststore.jks\",\n-    trustStorePassword:\"wso2carbon\"\n+    trustStorePassword:\"wso2carbon\",\n+    ciphers:\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n+    sslEnabledProtocols:\"TLSv1.2,TLSv1.1\"\n }\n service<http> echo {\n ",
    "implemented new WS subsystem version unmarshalling process": "diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java\nindex 31ff557d5f..412c82f9fc 100644\n--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java\n+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java\n@@ -32,6 +32,10 @@ enum Attribute {\n     UNKNOWN(null),\n \n     ID(Constants.ID),\n+    NAME(Constants.NAME),\n+    VALUE(Constants.VALUE),\n+    CLASS(Constants.CLASS),\n+    PROTOCOL_BINDINGS(Constants.PROTOCOL_BINDINGS),\n     ;\n \n     private final String name;\ndiff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java\nindex 6839300ad3..d90516f296 100644\n--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java\n+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java\n@@ -44,6 +44,8 @@ enum Element {\n     PROPERTY(Constants.PROPERTY),\n     PROPERTY_NAME(Constants.PROPERTY_NAME),\n     PROPERTY_VALUE(Constants.PROPERTY_VALUE),\n+    PRE_HANDLER_CHAIN(Constants.PRE_HANDLER_CHAIN),\n+    POST_HANDLER_CHAIN(Constants.POST_HANDLER_CHAIN),\n     PRE_HANDLER_CHAINS(Constants.PRE_HANDLER_CHAINS),\n     POST_HANDLER_CHAINS(Constants.POST_HANDLER_CHAINS),\n     HANDLER_CHAIN(Constants.HANDLER_CHAIN),\ndiff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java\nindex fad5bbf685..b53b89559d 100644\n--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java\n+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java\n@@ -164,6 +164,41 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n             switch (Namespace.forUri(reader.getNamespaceURI())) {\n                 case WEBSERVICES_1_0: {\n+                    final Element element = Element.forName(reader.getLocalName());\n+                    if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {\n+                        throw unexpectedElement(reader);\n+                    }\n+                    switch (element) {\n+                        case MODIFY_WSDL_ADDRESS: {\n+                            boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));\n+                            subsystem.get(MODIFY_WSDL_ADDRESS).set(b);\n+                            break;\n+                        }\n+                        case WSDL_HOST: {\n+                            subsystem.get(WSDL_HOST).set(parseElementNoAttributes(reader));\n+                            break;\n+                        }\n+                        case WSDL_PORT: {\n+                            int port = Integer.valueOf(parseElementNoAttributes(reader));\n+                            subsystem.get(WSDL_PORT).set(port);\n+                            break;\n+                        }\n+                        case WSDL_SECURE_PORT: {\n+                            int port = Integer.valueOf(parseElementNoAttributes(reader));\n+                            subsystem.get(WSDL_SECURE_PORT).set(port);\n+                            break;\n+                        }\n+                        case ENDPOINT_CONFIG: {\n+                            readEndpointConfigOld(reader, subsystem.get(OP_ADDR), endpointConfigs);\n+                            break;\n+                        }\n+                        default: {\n+                            throw unexpectedElement(reader);\n+                        }\n+                    }\n+                    break;\n+                }\n+                case WEBSERVICES_1_1: {\n                     final Element element = Element.forName(reader.getLocalName());\n                     if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {\n                         throw unexpectedElement(reader);\n@@ -215,7 +250,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n         return reader.getElementText().trim();\n     }\n \n-    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {\n+    private void readEndpointConfigOld(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {\n         String configName = null;\n \n         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n@@ -235,11 +270,59 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n                     break;\n                 }\n                 case PRE_HANDLER_CHAINS: {\n-                    parseHandlerChains(reader, configName, operationList, true);\n+                    parseHandlerChainsOld(reader, configName, operationList, true);\n                     break;\n                 }\n                 case POST_HANDLER_CHAINS: {\n-                    parseHandlerChains(reader, configName, operationList, false);\n+                    parseHandlerChainsOld(reader, configName, operationList, false);\n+                    break;\n+                }\n+                case PROPERTY : {\n+                    final ModelNode operation = parsePropertyOld(reader, configName);\n+                    operationList.add(operation);\n+                    break;\n+                }\n+                default: {\n+                    throw unexpectedElement(reader);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {\n+        String configName = null;\n+        final int count = reader.getAttributeCount();\n+        for (int i = 0; i < count; i++) {\n+            requireNoNamespaceAttribute(reader, i);\n+            final String value = reader.getAttributeValue(i);\n+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n+            switch (attribute) {\n+            case NAME:\n+                configName = value;\n+                break;\n+            default:\n+                throw unexpectedAttribute(reader, i);\n+            }\n+        }\n+\n+        final ModelNode node = new ModelNode();\n+        node.get(OP).set(ADD);\n+        node.get(OP_ADDR).set(address).add(ENDPOINT_CONFIG, configName);\n+        operationList.add(node);\n+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n+        while (reader.nextTag() != END_ELEMENT) {\n+            final Element element = Element.forName(reader.getLocalName());\n+            if (element != Element.PRE_HANDLER_CHAIN && element != Element.POST_HANDLER_CHAIN && element != Element.PROPERTY\n+                    && !encountered.add(element)) {\n+                throw unexpectedElement(reader);\n+            }\n+            switch (element) {\n+                case PRE_HANDLER_CHAIN: {\n+                    parseHandlerChain(reader, configName, operationList, true);\n+                    break;\n+                }\n+                case POST_HANDLER_CHAIN: {\n+                    parseHandlerChain(reader, configName, operationList, false);\n                     break;\n                 }\n                 case PROPERTY : {\n@@ -254,7 +337,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n         }\n     }\n \n-    private ModelNode parseProperty(XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {\n+    private ModelNode parsePropertyOld(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {\n         String propertyName = null;\n         String propertyValue = null;\n         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n@@ -286,7 +369,48 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n         return operation;\n     }\n \n-    private ModelNode parseHandlerChains(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {\n+    private ModelNode parseProperty(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {\n+        String propertyName = null;\n+        String propertyValue = null;\n+        final int count = reader.getAttributeCount();\n+        for (int i = 0; i < count; i++) {\n+            requireNoNamespaceAttribute(reader, i);\n+            final String value = reader.getAttributeValue(i);\n+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n+            switch (attribute) {\n+            case NAME:\n+                propertyName = value;\n+                break;\n+            case VALUE:\n+                propertyValue = value;\n+                break;\n+            default:\n+                throw unexpectedAttribute(reader, i);\n+            }\n+        }\n+\n+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n+        while (reader.nextTag() != END_ELEMENT) {\n+            final Element element = Element.forName(reader.getLocalName());\n+            if (!encountered.add(element)) {\n+                throw unexpectedElement(reader);\n+            }\n+            switch (element) {\n+                default: {\n+                    throw unexpectedElement(reader);\n+                }\n+            }\n+        }\n+        final ModelNode operation = new ModelNode();\n+        operation.get(OP).set(ADD);\n+        operation.get(OP_ADDR).add(SUBSYSTEM, WSExtension.SUBSYSTEM_NAME).add(ENDPOINT_CONFIG, configName).add(PROPERTY, propertyName);\n+        if (propertyValue != null) {\n+            operation.get(VALUE).set(propertyValue);\n+        }\n+        return operation;\n+    }\n+\n+    private ModelNode parseHandlerChainsOld(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {\n         ModelNode chainsNode = new ModelNode();\n         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);\n         while (reader.nextTag() != END_ELEMENT) {\n@@ -297,7 +421,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement\n \n             switch (element) {\n                 case HANDLER_CHAIN: {\n-                    parseHandlerChain(reader, configName, operationList, isPreHandlerChain);\n+     ",
    "Add version 7 . 9 . 0": "diff --git a/.ci/bwcVersions b/.ci/bwcVersions\nindex 0243adb1a62..b7dd18149fb 100644\n--- a/.ci/bwcVersions\n+++ b/.ci/bwcVersions\n@@ -20,4 +20,5 @@ BWC_VERSION:\n   - \"7.6.3\"\n   - \"7.7.0\"\n   - \"7.8.0\"\n+  - \"7.9.0\"\n   - \"8.0.0\"\ndiff --git a/server/src/main/java/org/elasticsearch/Version.java b/server/src/main/java/org/elasticsearch/Version.java\nindex 168c823e3f2..be534164fce 100644\n--- a/server/src/main/java/org/elasticsearch/Version.java\n+++ b/server/src/main/java/org/elasticsearch/Version.java\n@@ -78,6 +78,7 @@ public class Version implements Comparable<Version>, ToXContentFragment {\n     public static final Version V_7_6_3 = new Version(7060399, org.apache.lucene.util.Version.LUCENE_8_4_0);\n     public static final Version V_7_7_0 = new Version(7070099, org.apache.lucene.util.Version.LUCENE_8_5_1);\n     public static final Version V_7_8_0 = new Version(7080099, org.apache.lucene.util.Version.LUCENE_8_5_1);\n+    public static final Version V_7_9_0 = new Version(7090099, org.apache.lucene.util.Version.LUCENE_8_5_1);\n     public static final Version V_8_0_0 = new Version(8000099, org.apache.lucene.util.Version.LUCENE_8_5_1);\n     public static final Version CURRENT = V_8_0_0;\n ",
    "Add example character iterator code": "diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java\nindex a0ac7f5..624eab8 100644\n--- a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java\n+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java\n@@ -15,15 +15,21 @@\n  */\r\n package edu.sfsu.cs.orange.ocr;\r\n \r\n-import com.googlecode.leptonica.android.ReadFile;\r\n-import com.googlecode.tesseract.android.TessBaseAPI;\r\n+import java.io.File;\r\n+import java.util.ArrayList;\r\n \r\n import android.graphics.Bitmap;\r\n+import android.graphics.Rect;\r\n import android.os.AsyncTask;\r\n+import android.os.Environment;\r\n import android.os.Handler;\r\n import android.os.Message;\r\n import android.util.Log;\r\n \r\n+import com.googlecode.leptonica.android.ReadFile;\r\n+import com.googlecode.tesseract.android.ResultIterator;\r\n+import com.googlecode.tesseract.android.TessBaseAPI;\r\n+import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;\r\n /**\r\n  * Class to send OCR requests to the OCR engine in a separate thread, send a success/failure message,\r\n  * and dismiss the indeterminate progress dialog box. Used for non-continuous mode OCR only.\r\n@@ -88,7 +94,21 @@ final class OcrRecognizeAsyncTask extends AsyncTask<Void, Void, Boolean> {\n       ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());\r\n       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());\r\n       ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());\r\n-      //ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());\r\n+\r\n+      // Iterate through the results.\r\n+      final ResultIterator iterator = baseApi.getResultIterator();\r\n+      int[] lastBoundingBox;\r\n+      ArrayList<Rect> charBoxes = new ArrayList<Rect>();\r\n+      iterator.begin();\r\n+      do {\r\n+          lastBoundingBox = iterator.getBoundingBox(PageIteratorLevel.RIL_SYMBOL);\r\n+          Rect lastRectBox = new Rect(lastBoundingBox[0], lastBoundingBox[1],\r\n+                  lastBoundingBox[2], lastBoundingBox[3]);\r\n+          charBoxes.add(lastRectBox);\r\n+      } while (iterator.next(PageIteratorLevel.RIL_SYMBOL));\r\n+      iterator.delete();\r\n+      ocrResult.setCharacterBoundingBoxes(charBoxes);\r\n+\r\n     } catch (RuntimeException e) {\r\n       Log.e(\"OcrRecognizeAsyncTask\", \"Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED.\");\r\n       e.printStackTrace();\r",
    "adding more datasource metrics binder tests": "diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy\nindex f50478ff1b..55d737403d 100644\n--- a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy\n+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy\n@@ -1,30 +1,64 @@\n package io.micronaut.configuration.metrics.binder.datasource\n \n-import io.micrometer.core.instrument.MeterRegistry\n-import spock.lang.Ignore\n+\n+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata\n import spock.lang.Specification\n \n import javax.sql.DataSource\n \n class DataSourcePoolMetricsBinderFactorySpec extends Specification {\n \n-    @Ignore\n     def \"test getting the beans manually\"() {\n         given:\n-        def meterRegistry = Mock(MeterRegistry)\n-        def dataSource1 = Mock(DataSource)\n-        def dataSource2 = Mock(DataSource)\n+        DataSourcePoolMetricsBinderFactory dataSourcePoolMetricsBinderFactory = new DataSourcePoolMetricsBinderFactory()\n \n         when:\n-        def binder = new DataSourcePoolMetricsBinderFactory([], meterRegistry)\n-        binder.dataSourceMeterBinder(\"default\", dataSource1)\n-        binder.dataSourceMeterBinder(\"first\", dataSource2)\n+        def meterBinder = dataSourcePoolMetricsBinderFactory.dataSourceMeterBinder(\"foo\", new Foo())\n \n         then:\n-        1 * dataSource2.hashCode() >> 1\n-        1 * dataSource1.hashCode() >> 2\n-        0 * _._\n+        meterBinder\n+    }\n+\n+    class Foo implements DataSourcePoolMetadata {\n+\n+        @Override\n+        DataSource getDataSource() {\n+            return null\n+        }\n+\n+        @Override\n+        Integer getIdle() {\n+            return null\n+        }\n+\n+        @Override\n+        Float getUsage() {\n+            return null\n+        }\n+\n+        @Override\n+        Integer getActive() {\n+            return null\n+        }\n+\n+        @Override\n+        Integer getMax() {\n+            return null\n+        }\n+\n+        @Override\n+        Integer getMin() {\n+            return null\n+        }\n \n+        @Override\n+        String getValidationQuery() {\n+            return null\n+        }\n \n+        @Override\n+        Boolean getDefaultAutoCommit() {\n+            return null\n+        }\n     }\n }\ndiff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy\nnew file mode 100644\nindex 0000000000..8e7f09943a\n--- /dev/null\n+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy\n@@ -0,0 +1,85 @@\n+package io.micronaut.configuration.metrics.binder.datasource\n+\n+import io.micrometer.core.instrument.MeterRegistry\n+import io.micrometer.core.instrument.Tags\n+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata\n+import spock.lang.Specification\n+\n+import javax.sql.DataSource\n+\n+\n+class DataSourcePoolMetricsBinderSpec extends Specification {\n+\n+    MeterRegistry meterRegistry = Mock(MeterRegistry)\n+\n+    def \"DataSourcePoolMetricsBinder\"() {\n+        given:\n+        DataSource dataSource = Mock(DataSource)\n+        DataSourcePoolMetricsBinder dataSourcePoolMetricsBinder = new DataSourcePoolMetricsBinder(\n+                dataSource,\n+                new FooDataSourcePoolMetadata(dataSource),\n+                \"foo\",\n+                []\n+        )\n+\n+        when:\n+        dataSourcePoolMetricsBinder.bindTo(meterRegistry)\n+\n+        then:\n+        1 * meterRegistry.gauge('jdbc.connections.active', Tags.of(\"name\",\"foo\"), dataSource, _)\n+        1 * meterRegistry.gauge('jdbc.connections.min', Tags.of(\"name\",\"foo\"), dataSource, _)\n+        1 * meterRegistry.gauge('jdbc.connections.max', Tags.of(\"name\",\"foo\"), dataSource, _)\n+        1 * meterRegistry.gauge('jdbc.connections.usage', Tags.of(\"name\",\"foo\"), dataSource, _)\n+        0 * _._\n+\n+    }\n+\n+    class FooDataSourcePoolMetadata implements  DataSourcePoolMetadata {\n+\n+        final DataSource dataSource\n+\n+        FooDataSourcePoolMetadata(DataSource dataSource){\n+            this.dataSource = dataSource\n+        }\n+\n+        @Override\n+        DataSource getDataSource() {\n+            return dataSource\n+        }\n+\n+        @Override\n+        Integer getIdle() {\n+            return 0\n+        }\n+\n+        @Override\n+        Float getUsage() {\n+            return 0\n+        }\n+\n+        @Override\n+        Integer getActive() {\n+            return 0\n+        }\n+\n+        @Override\n+        Integer getMax() {\n+            return 0\n+        }\n+\n+     ",
    "add TLS note ( <issue_id> )": "diff --git a/zipkin-server/README.md b/zipkin-server/README.md\nindex 3e1c05251..f75821c93 100644\n--- a/zipkin-server/README.md\n+++ b/zipkin-server/README.md\n@@ -579,6 +579,16 @@ of known open source libraries on 128-bit trace identifiers.\n \n See `zipkin2.storage.StorageComponent.Builder` for even more details!\n \n+## TLS/SSL\n+Zipkin-server can be made to run with TLS if needed:\n+\n+```bash\n+# assuming you generate the key like this\n+keytool -genkeypair -alias mysite -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore zipkin.p12 -validity 3650\n+\n+java -jar zipkin.jar --armeria.ssl.key-store=zipkin.p12 --armeria.ssl.key-store-type=PKCS12 --armeria.ssl.key-store-password=123123 --armeria.ssl.key-alias=mysite  --armeria.ssl.enabled=true --armeria.ports[0].port=9411 --armeria.ports[0].protocols[0]=https\n+```\n+\n ## Running with Docker\n Released versions of zipkin-server are published to Docker Hub as `openzipkin/zipkin`.\n See [docker-zipkin](https://github.com/openzipkin/docker-zipkin) for details.",
    "allocate more height ( 150px ) , scroll inline note into view ; don \\' t write empty footnote": "diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts\nindex 9b86762d54..c637306c9f 100644\n--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts\n+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts\n@@ -18,9 +18,12 @@ import { EditorView, DecorationSet, NodeView } from 'prosemirror-view';\n import { findParentNodeOfType, NodeWithPos, findChildrenByType, findChildren } from 'prosemirror-utils';\n import { EditorState, TextSelection, Plugin, PluginKey, Transaction } from 'prosemirror-state';\n \n+import zenscroll from 'zenscroll';\n+\n import { nodeDecoration } from '../../api/decoration';\n-import { firstNode, lastNode } from '../../api/node';\n+import { firstNode, lastNode, editingRootScrollContainerElement } from '../../api/node';\n import { selectionIsWithin } from '../../api/selection';\n+import { bodyElement } from '../../api/dom';\n \n import { findFootnoteNode, selectedFootnote, selectedNote } from './footnote';\n \n@@ -53,6 +56,24 @@ export function footnoteEditorActivationPlugin() {\n         return key.getState(state);\n       },\n     },\n+\n+    view: () => ({\n+      // scroll footnote into view (if necessary) when note editor is active\n+      update: (view: EditorView) => {\n+        const note = selectedNote(view.state.selection);\n+        if (note) {\n+          const footnote = findFootnoteNode(view.state.doc, note.node.attrs.ref);\n+          if (footnote) {\n+            const footnoteEl = view.nodeDOM(footnote.pos);\n+            if (footnoteEl) {\n+              const body = bodyElement(view);\n+              const scroller = zenscroll.createScroller(body, 0, 30);\n+              scroller.intoView(footnoteEl as HTMLElement);\n+            }\n+          }\n+        }\n+      }\n+    })\n   });\n }\n \ndiff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css\nindex e8f8b8cea3..4e0854b57d 100644\n--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css\n+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css\n@@ -37,12 +37,12 @@\n }\n \n .ProseMirror .body.editing-footnote {\n-  bottom: 100px;\n+  bottom: 160px;\n   border-bottom: 1px solid;\n }\n \n .ProseMirror .notes.editing-footnote {\n-  height: 90px;\n+  height: 150px;\n   padding-top: 10px;\n   z-index: 5;\n }\ndiff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts\nindex 7455927f70..8d98e35ff0 100644\n--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts\n+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts\n@@ -86,7 +86,11 @@ const extension: Extension = {\n           },\n         ],\n         writer: (output: PandocOutput, node: ProsemirrorNode) => {\n-          output.writeNote(node);\n+          // don't write empty footnotes (otherwise in block or section mode they gobble up\n+          // the section below them)\n+          if (node.childCount > 0) {\n+            output.writeNote(node);\n+          }\n         },\n       },\n     },",
    "add missing comma in whiteList": "diff --git a/README.md b/README.md\nindex 828680c..a20d480 100644\n--- a/README.md\n+++ b/README.md\n@@ -60,7 +60,7 @@ andResGuard {\n         \"R.style.umeng*\",\n         \"R.id.umeng*\",\n         // umeng share for sina\n-        \"R.drawable.sina*\"\n+        \"R.drawable.sina*\",\n         // for google-services.json\n         \"R.string.google_app_id\",\n         \"R.string.gcm_defaultSenderId\",\ndiff --git a/README.zh-cn.md b/README.zh-cn.md\nindex 71f8365..30155c4 100644\n--- a/README.zh-cn.md\n+++ b/README.zh-cn.md\n@@ -53,7 +53,7 @@ andResGuard {\n         \"R.style.umeng*\",\n         \"R.id.umeng*\",\n         // umeng share for sina\n-        \"R.drawable.sina*\"\n+        \"R.drawable.sina*\",\n         // for google-services.json\n         \"R.string.google_app_id\",\n         \"R.string.gcm_defaultSenderId\",",
    "Adjusted scoping on method reference stuff": "diff --git a/Java/Java.sublime-syntax b/Java/Java.sublime-syntax\nindex 17a5ed49..468cdfe2 100644\n--- a/Java/Java.sublime-syntax\n+++ b/Java/Java.sublime-syntax\n@@ -341,9 +341,10 @@ contexts:\n \n   keywords:\n     - match: '::'\n-      scope: keyword.control.method-reference.java\n+      scope: keyword.operator.method-reference.java\n       push:\n         - match: '{{id}}'\n+          scope: variable.function.reference.java\n           pop: true\n         - match: (?=\\S)\n           pop: true\ndiff --git a/Java/syntax_test_java.java b/Java/syntax_test_java.java\nindex 371ae1d6..dd1d17c5 100644\n--- a/Java/syntax_test_java.java\n+++ b/Java/syntax_test_java.java\n@@ -59,13 +59,15 @@ public class SyntaxTest {\n         printList(Arrays.stream(args)\n             .collect(Collectors.toCollection(ArrayList::new)));\n //                                                      ^^^ meta.method.body.java - keyword.control.new.java\n-//                                                    ^^ keyword.control.method-reference.java\n+//                                                      ^^^ variable.function.reference.java\n+//                                                    ^^ keyword.operator.method-reference.java\n         anotherMethod();\n         try (Stream<String> lines = Files.lines(path)) {\n //      ^^^ keyword.control.catch-exception.java\n //                                 ^^^^^^^^^^^^^^^^^^ meta.assignment.rhs.java\n //                              ",
    "use a version . properties file for defining versions of common dependencies .": "diff --git a/build.gradle b/build.gradle\nindex 6910082650..1f3cfd2362 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -25,12 +25,7 @@ def download(File downloadDir, String url, String name) {\n     return dest;\n }\n \n-ext {\n-    versions = [\n-            // update this value when elasticsearch is updated\n-            elasticsearch: \"2.4.1\"\n-    ]\n-}\n+apply from: 'gradle/dependencies.gradle'\n \n repositories {\n     mavenCentral()\n@@ -40,51 +35,6 @@ allprojects {\n     apply plugin: 'findbugs'\n     apply plugin: 'jacoco'\n \n-    configurations.all {\n-        resolutionStrategy {\n-            // fail eagerly on version conflict (includes transitive dependencies)\n-            failOnVersionConflict()\n-\n-            // ES requires hamcrest-all which includes hamcrest-core\n-            dependencySubstitution {\n-                substitute module('org.hamcrest:hamcrest-core') with(\n-                        module('org.hamcrest:hamcrest-all:1.3'))\n-            }\n-\n-            // forced versions of conflicting deps\n-            force 'com.spatial4j:spatial4j:0.5'\n-            force 'com.google.guava:guava:18.0'\n-            force 'commons-codec:commons-codec:1.10'\n-            force 'com.carrotsearch.randomizedtesting:junit4-ant:2.3.1'\n-            force 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'\n-            force 'junit:junit:4.11'\n-            force 'org.slf4j:slf4j-api:1.6.2'\n-            force 'com.fasterxml.jackson.core:jackson-core:2.8.1'\n-            force 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'\n-            force 'com.fasterxml.jackson.core:jackson-annotations:2.8.1'\n-            force 'com.fasterxml.jackson.core:jackson-databind:2.8.1'\n-            force 'joda-time:joda-time:2.9.4'\n-            force 'org.hamcrest:hamcrest-all:1.3'\n-            force 'org.antlr:antlr-runtime:3.5.2'\n-            force 'commons-cli:commons-cli:1.3.1'\n-            force 'org.apache.commons:commons-math3:3.6.1'\n-            force 'org.apache.commons:commons-lang3:3.5'\n-            force 'commons-logging:commons-logging:1.1.3'\n-            force 'org.apache.httpcomponents:httpcore:4.3.3'\n-            force 'org.apache.httpcomponents:httpclient:4.3.6'\n-            force 'org.slf4j:slf4j-log4j12:1.7.21'\n-            force 'log4j:log4j:1.2.17'\n-            force 'io.netty:netty:3.10.6.Final'\n-\n-            // ensure to check following dependencies and their versions against those of HDFS plugin libs\n-            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html\n-            force 'org.codehaus.jackson:jackson-core-asl:1.9.13'\n-            force 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'\n-            force 'com.google.code.findbugs:jsr305:3.0.1'\n-            force 'commons-lang:commons-lang:2.6'\n-        }\n-    }\n-\n     tasks.withType(JavaCompile) {\n         sourceCompatibility = \"1.8\"\n         targetCompatibility = \"1.8\"\ndiff --git a/es-cloud-aws/build.gradle b/es-cloud-aws/build.gradle\nindex 65eaed6bfd..fbfec17523 100644\n--- a/es-cloud-aws/build.gradle\n+++ b/es-cloud-aws/build.gradle\n@@ -3,8 +3,8 @@ apply plugin: 'idea'\n \n dependencies {\n     compile project(':es')\n-    compile 'com.amazonaws:aws-java-sdk-ec2:1.10.69'\n-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'\n+    compile \"com.amazonaws:aws-java-sdk-ec2:${versions.aws}\"\n+    compile \"com.amazonaws:aws-java-sdk-s3:${versions.aws}\"\n }\n \n def pluginDir = project(\":es\").file('upstream/plugins/cloud-aws')\ndiff --git a/es-repository-hdfs/build.gradle b/es-repository-hdfs/build.gradle\nindex 0f7d3e8b5c..4b610bf5c9 100644\n--- a/es-repository-hdfs/build.gradle\n+++ b/es-repository-hdfs/build.gradle\n@@ -58,13 +58,7 @@ dependencies {\n configurations.all {\n     resolutionStrategy {\n         force 'commons-httpclient:commons-httpclient:3.0.1'\n-        force 'joda-time:joda-time:2.8'\n-        force \"commons-cli:commons-cli:1.2\"\n         eachDependency { details ->\n-            // for slf4j use each dependency since there are so many variants\n-            if (details.requested.name.contains(\"slf4j-\")) {\n-                details.useVersion \"1.7.6\"\n-            }\n             if (details.requested.name.equals(\"servlet-api\")) {\n                 details.useTarget group: \"org.eclipse.jetty.orbit\", name: \"javax.servlet\", version: \"3.0.0.v201112011016\"\n             }\n@@ -74,7 +68,7 @@ configurations.all {\n }\n \n task downloadUpstreamSources(type: Download) {\n-    def upstreamCommit = 'v2.3.2'\n+    def upstreamCommit = \"v${versions.elasticsearchhadoop}\"\n     src \"https://github.com/elastic/elasticsearch-hadoop/archive/${upstreamCommit}.zip\"\n     dest file(\"${buildDir}/downloads/elasticsearch-hadoop-${upstreamCommit}.zip\")\n     overwrite false\n@@ -128,8 +122,8 @@ sourceSets {\n test.enabled = false\n \n compileJava {\n-    sourceCompatibility = 1.7\n-    targetCompatibility = 1.7\n+    sourceCompatibility = 1.8\n+    targetCompatibility = 1.8\n }\n \n jar {\ndiff --git a/es/build.gradle b/es/build.gradle\nindex 92dba6fe8d..0f57352df9 100644\n--- a/es/build.gradle\n+++ b/es/build.gradle\n@@ -18,67 +18,69 @@ dependencies {\n     // start ES compile dependencies\n     // generated in upstream directory with:\n     // mvn dependency:tree | grep -o ' .- .*:compile' | cut -d ' ' -f 3 | sort | sed \"s/\\(.*\\):jar:\\(.*\\):compile/compile '\\1:\\2'/g\"\n-    compile 'com.carrotsearch:hppc:0.7.1'\n-    compile 'com.fasterxml.jackson.core:jackson-core:2.8.1'\n-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'\n-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.8.1'\n-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1'\n-    compile 'com.github.spullara.mustache.java:compiler:0.8.13'\n-    compile 'com.google.guava:guava:18.0'\n-    compile 'com.ning:compress-lzf:1.0.2'\n-    compile 'com.spatial4j:spatial4j:0.5'\n-    compile 'com.tdunning:t-digest:3.0'\n-    compile 'com.twitter:jsr166e:1.1.0'\n-    compile 'com.vividsolutions:jts:1.13'\n-    compile 'commons-cli:commons-cli:1.3.1'\n-    compile 'io.netty:netty:3.10.6.Final'\n-    compile 'joda-time:joda-time:2.9.4'\n-    compile 'log4j:apache-log4j-extras:1.2.17'\n-    compile 'log4j:log4j:1.2.17'\n-    compile 'net.java.dev.jna:jna:4.1.0'\n-    compile 'org.apache.lucene:lucene-analyzers-common:5.5.2'\n-    compile 'org.apache.lucene:lucene-backward-codecs:5.5.2'\n-    compile 'org.apache.lucene:lucene-core:5.5.2'\n-    compile 'org.apache.lucene:lucene-grouping:5.5.2'\n-    compile 'org.apache.lucene:lucene-highlighter:5.5.2'\n-    compile 'org.apache.lucene:lucene-join:5.5.2'\n-    compile 'org.apache.lucene:lucene-memory:5.5.2'\n-    compile 'org.apache.lucene:lucene-misc:5.5.2'\n-    compile 'org.apache.lucene:lucene-queries:5.5.2'\n-    compile 'org.apache.lucene:lucene-queryparser:5.5.2'\n-    compile 'org.apache.lucene:lucene-sandbox:5.5.2'\n-    compile 'org.apache.lucene:lucene-spatial3d:5.5.2'\n-    compile 'org.apache.lucene:lucene-spatial:5.5.2'\n-    compile 'org.apache.lucene:lucene-suggest:5.5.2'\n-    compile 'org.elasticsearch:securesm:1.0'\n-    compile 'org.hdrhistogram:HdrHistogram:2.1.6'\n-    compile 'org.joda:joda-convert:1.2'\n-    compile 'org.slf4j:slf4j-api:1.6.2'\n+    compile \"com.carrotsearch:hppc:0.7.1\"\n+    compile \"com.fasterxml.jackson.core:jackson-core:${versions.jackson}\"\n+    compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}\"\n+    compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}\"\n+    compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}\"\n+    compile \"com.github.spullara.mustache.java:compiler:0.8.13\"\n+    compile \"com.google.guava:guava:${versions.guava}\"\n+    compile \"com.ning:compress-lzf:1.0.2\"\n+    compile \"com.spatial4j:spatial4j:${versions.spatial4j}\"\n+    compile \"com.tdunning:t-digest:3.0\"\n+    compile \"com.twitter:jsr166e:1.1.0\"\n+    compile \"com.vividsolutions:jts:${versions.jts}\"\n+    compile \"commons-cli:commons-cli:${versions.commonscli}\"\n+    compile \"io.netty:netty:${versions.netty}\"\n+    compile \"joda-time:joda-time:${versions.jodatime}\"\n+    compile \"log4j:apache-log4j-extras:${versions.log4j}\"\n+    compile \"log4j:log4j:${versions.log4j}\"\n+    compile \"net.java.dev.jna:jna:${versions.jna}\"\n+    compile \"org.apache.lucene:lucene-analyzers-common:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-backward-codecs:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-core:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-grouping:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-highlighter:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-join:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-memory:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-misc:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-queries:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-queryparser:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-sandbox:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-spatial3d:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-spatial:${versions.lucene}\"\n+    compile \"org.apache.lucene:lucene-suggest:${versions.lucene}\"\n+    compile \"org.elasticsearch:securesm:1.0\"\n+    compile \"org.hdrhistogram:HdrHistogram:2.1.6\"\n+    compile \"org.joda:joda-convert:1.2\"\n+    compile \"org.slf4j:slf4j-api:${versions.slf4j}\"\n+    compile \"org.slf4j:slf4j-log4j12:${versions.slf4j}\"\n+\n     // snakeyaml is a duplicate dependency and left out by intent\n-    // compile 'org.yaml:snakeyaml:1.15'\n+    // compile \"org.yaml:snakeyaml:1.15\"\n     // end ES compile dependencies\n \n-    compile 'org.codehaus.groovy:groovy-all:2.4.4:indy'\n+    compile \"org.codehaus.groovy:groovy-all:2.4.4:indy\"\n \n \n     // mvn dependency:tree | grep -o ' .- .*:test' | cut -d ' ' -f 3 | sort | sed \"s/\\(.*\\):jar:\\(.*\\):test/testCompile '\\1:\\2'/g\"\n-    testCompile 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'\n-    testCompile 'com.google.jimfs:jimfs:1.0'\n-    testCompile 'commons-codec:commons-codec:1.10'\n-    testCompile 'commons-logging:commons-logging:1.1.3'\n-    testCompile 'junit:junit:4.11'\n-    testCompile('org.apache.httpcomponents:httpclient:4.3.6') {\n-        exclude group: 'commons-codec', module: 'commons-codec'\n+    testCompile \"com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}\"\n+    testCompile \"com.google.jimfs:jimfs:1.0\"\n+    testCompile \"commons-codec:commons-codec:${versions.commonscodec}\"\n+    testCompile \"commons-logging:commons-logging:${versions.commonslogging}\"\n+    testCompile \"junit:junit:${versions.junit}\"\n+    testCompile(\"org.apache.httpcomponents:httpclient:${versions.httpclient}\") {\n+        exclude group: \"commons-codec\", module: \"commons-codec\"\n     }\n-    testCompile 'org.apache.httpcomponents:httpcore:4.3.3'\n-    testCompile 'org.apache.lucene:lucene-codecs:5.5.2'\n+    testCompile \"org.apache.httpcomponents:httpcore:${versions.httpcore}\"\n+    testCompile \"org.apache.lucene:lucene-codecs:${versions.lucene}\"\n     // If the version here is increased the `AssertingLeafReader` class needs to\n     // be updated as it is a copy from lucene-test-framework\n-    testCompile 'org.apache.lucene:lucene-test-framework:5.5.2'\n-    testCompile 'org.elasticsearch:securemock:1.2'\n-    testCompile 'org.hamcrest:hamcrest-all:1.3'\n+    testCompile \"org.apache.lucene:lucene-test-framework:${versions.lucene}\"\n+    testCompile \"org.elasticsearch:securemock:${versions.securemock}\"\n+    testCompile \"org.hamcrest:hamcrest-all:${versions.hamcrest}\"\n \n-    testCompile 'com.google.code.findbugs:jsr305:3.0.1'\n+    testCompile \"com.google.code.findbugs:jsr305:${versions.jsr305}\"\n }\n \n \ndiff --git a/gradle/dependencies.gradle b/gradle/dependencies.gradle\nnew file mode 100644\nindex 0000000000..7d9224d256\n--- /dev/null\n+++ b/gradle/dependencies.gradle\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+Properties props = new Properties()\n+props.load(new FileInputStream(file(\"gradle/version.properties\")));\n+ext.set(\"versions\", props)\n+\n+allprojects {\n+    configurations.all {\n+        resolutionStrategy {\n+            // fail eagerly on version conflict (includes transitive dependencies)\n+            failOnVersionConflict()\n+\n+            // ES requires hamcrest-all which includes hamcrest-core\n+            dependencySubstitution {\n+                substitute module(\"org.hamcrest:hamcrest-core\") with(\n+                        module(\"org.hamcrest:hamcrest-all:${versions.hamcrest}\"))\n+            }\n+\n+            // forced versions of conflicting deps\n+            force \"com.spatial4j:spatial4j:${versions.spatial4j}\"\n+            force \"com.google.guava:guava:${versions.guava}\"\n+            force \"commons-codec:commons-codec:${versions.commonscodec}\"\n+            force \"com.carrotsearch.randomizedtesting:junit4-ant:${versions.randomizedrunner}\"\n+            force \"com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}\"\n+            force \"junit:junit:${versions.junit}\"\n+            force \"org.slf4j:slf4j-api:${versions.slf4j}\"\n+            force \"org.slf4j:slf4j-log4j12:${versions.slf4j}\"\n+            force \"com.fasterxml.jackson.core:jackson-core:${versions.jackson}\"\n+            force \"com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}\"\n+            force \"com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}\"\n+            force \"com.fasterxml.jackson.core:jackson-databind:${versions.jackson}\"\n+            force \"joda-time:joda-time:${versions.jodatime}\"\n+            force \"org.hamcrest:hamcrest-all:${versions.hamcrest}\"\n+            force \"org.antlr:antlr-runtime:${versions.antlr}\"\n+            force \"commons-cli:commons-cli:${versions.commonscli}\"\n+            force \"org.apache.commons:commons-math3:${versions.commonsmath}\"\n+            force \"org.apache.commons:commons-lang3:${versions.commonslang3}\"\n+            force \"commons-logging:commons-logging:${versions.commonslogging}\"\n+            force \"org.apache.httpcomponents:httpcore:${versions.httpcore}\"\n+            force \"org.apache.httpcomponents:httpclient:${versions.httpclient}\"\n+            force \"log4j:log4j:${versions.log4j}\"\n+            force \"io.netty:netty:${versions.netty}\"\n+\n+            // ensure to check following dependencies and their versions against those of HDFS plugin libs\n+            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html\n+            force \"org.codehaus.jackson:jackson-core-asl:${versions.jacksonasl}\"\n+            force \"org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}\"\n+            force \"com.google.code.findbugs:jsr305:${versions.jsr305}\"\n+            force \"commons-lang:commons-lang:2.6\"\n+        }\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/gradle/version.properties b/gradle/version.properties\nnew file mode 100644\nindex 0000000000..e1d1219750\n--- /dev/null\n+++ b/gradle/version.properties\n@@ -0,0 +1,34 @@\n+# crate deps not defined in ES\n+guava=18.0\n+jodatime=2.9.4\n+antlr=3.5.2\n+commonscli=1.3.1\n+commonsmath=3.6.1\n+commonslang3=3.5\n+netty=3.10.6.Final\n+jsr305=3.0.1\n+aws=1.10.69\n+jacksonasl=1.9.13\n+elasticsearchhadoop=2.4.0\n+\n+# ES deps\n+elasticsearch=2.4.1\n+lucene=5.5.2\n+\n+# ES optional\n+spatial4j=0.5\n+jts=1.13\n+jackson=2.8.1\n+log4j=1.2.17\n+slf4j=1.6.2\n+jna=4.1.0\n+\n+# ES test\n+randomizedrunner=2.3.2\n+junit=4.11\n+httpclient=4.3.6\n+httpcore=4.3.3\n+commonslogging=1.1.3\n+commonscodec=1.10\n+hamcrest=1.3\n+securemock=1.2\ndiff --git a/sql-parser/build.gradle b/sql-parser/build.gradle\nindex 5a516d57d2..72ff23dad1 100644\n--- a/sql-parser/build.gradle\n+++ b/sql-parser/build.gradle\n@@ -7,14 +7,14 @@ configurations {\n }\n \n dependencies {\n-    compile 'com.google.code.findbugs:jsr305:3.0.1'\n-    compile 'joda-time:joda-time:2.9.4'\n-    compile 'com.google.guava:guava:18.0'\n-    compile 'org.antlr:antlr-runtime:3.5.2'\n+    compile \"com.google.code.findbugs:jsr305:${versions.jsr305}\"\n+    compile \"joda-time:joda-time:${versions.jodatime}\"\n+    compile \"com.google.guava:guava:${versions.guava}\"\n+    compile \"org.antlr:antlr-runtime:${versions.antlr}\"\n \n-    antlr3 'org.antlr:antlr:3.5.2'\n-    testCompile 'org.hamcrest:hamcrest-all:1.3'\n-    testCompile 'junit:junit:4.11'\n+    antlr3 \"org.antlr:antlr:${versions.antlr}\"\n+    testCompile \"org.hamcrest:hamcrest-all:${versions.hamcrest}\"\n+    testCompile \"junit:junit:${versions.junit}\"\n }\n \n task generateWithANTLR3(type: Exec) {\ndiff --git a/sql/build.gradle b/sql/build.gradle\nindex 40bdd243a7..a600478bbe 100644\n--- a/sql/build.gradle\n+++ b/sql/build.gradle\n@@ -15,11 +15,11 @@ dependencies {\n     compile project(':core')\n     compile project(':blob')\n     compile project(':sql-parser')\n-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'\n-    compile 'org.apache.commons:commons-math3:3.6.1'\n+    compile \"com.amazonaws:aws-java-sdk-s3:${versions.aws}\"\n+    compile \"org.apache.commons:commons-math3:${versions.commonsmath}\"\n     testCompile project(':testing')\n     testCompile 'org.skyscreamer:jsonassert:1.3.0'\n-    testCompile 'org.hamcrest:hamcrest-all:1.3'\n+    testCompile \"org.hamcrest:hamcrest-all:${versions.hamcrest}\"\n \n     testCompile('org.postgresql:postgresql:9.4.1211.jre7') {\n         exclude group: 'org.openjdk.jmh', module: 'jmh-core'\ndiff --git a/testing/build.gradle b/testing/build.gradle\nindex aa68307e41..19ac2541f2 100644\n--- a/testing/build.gradle\n+++ b/testing/build.gradle\n@@ -3,8 +3,8 @@ apply from: \"$rootDir/gradle/javaModule.gradle\"\n archivesBaseName = 'crate-testing'\n \n dependencies {\n-    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'\n-    compile 'org.apache.commons:commons-lang3:3.5'\n+    compile \"org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}\"\n+    compile \"org.apache.commons:commons-lang3:${versions.commonslang3}\"\n \n     compile project(':es')\n     compile project(path: ':es', configuration: 'testCompile')",
    "added Apache license and @ since information .": "diff --git a/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java b/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java\nindex 5d429219..1e7b7165 100644\n--- a/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java\n+++ b/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.ki.web.filter.authz;\n \n import org.apache.ki.config.ConfigurationException;\n@@ -13,7 +31,7 @@ import java.io.IOException;\n  * A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.\n  *\n  * @author Les Hazlewood\n- * @since Mar 30, 2009 10:46:21 AM\n+ * @since 1.0\n  */\n public class PortFilter extends AuthorizationFilter {\n \ndiff --git a/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java b/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java\nindex d54cdd4b..a33cdc25 100644\n--- a/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java\n+++ b/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.apache.ki.web.filter.authz;\n \n /**\n@@ -10,7 +28,7 @@ package org.apache.ki.web.filter.authz;\n  * </pre>\n  *\n  * @author Les Hazlewood\n- * @since Mar 30, 2009 12:16:14 PM\n+ * @since 1.0\n  */\n public class SslFilter extends PortFilter {\n ",
    "Added some error checking .": "diff --git a/pmd/etc/changelog.txt b/pmd/etc/changelog.txt\nindex debefa1872..8ff2bfbe93 100644\n--- a/pmd/etc/changelog.txt\n+++ b/pmd/etc/changelog.txt\n@@ -5,6 +5,7 @@ Fixed bug 779874 - LooseCouplingRule no longer triggers on ArrayList\n Fixed bug 781393 - VariableNameDeclaration no longer throws ClassCastExpression since ASTLocalVariableDeclaration now subclasses AccessNode\n Tweaked CPD time display field\n Made CPD text fields uneditable\n+Added more error checking to CPD GUI input\n TODO - fix it so tests and rules don't duplicate the xpath expressions\n \n August 1, 2003 - 1.2.1:\ndiff --git a/pmd/src/net/sourceforge/pmd/cpd/GUI.java b/pmd/src/net/sourceforge/pmd/cpd/GUI.java\nindex 6560954ccc..72b7eeca6c 100644\n--- a/pmd/src/net/sourceforge/pmd/cpd/GUI.java\n+++ b/pmd/src/net/sourceforge/pmd/cpd/GUI.java\n@@ -204,6 +204,11 @@ public class GUI implements CPDListener {\n \n     private void go() {\n         try {\n+            if (!(new File(rootDirectoryField.getText())).exists()) {\n+                JOptionPane.showMessageDialog(frame, \"Can't read from that root source directory\", \"Error\", JOptionPane.ERROR_MESSAGE);\n+                return;\n+            }\n+\n             Language language = null;\n             LanguageFactory lf = new LanguageFactory();\n             if (languageBox.getSelectedItem().equals(\"Java\")) {",
    "Simplify checks with getClass ( ) method": "diff --git a/h2/src/main/org/h2/mvstore/type/ObjectDataType.java b/h2/src/main/org/h2/mvstore/type/ObjectDataType.java\nindex 6c6314341..6c3bf5b65 100644\n--- a/h2/src/main/org/h2/mvstore/type/ObjectDataType.java\n+++ b/h2/src/main/org/h2/mvstore/type/ObjectDataType.java\n@@ -288,7 +288,7 @@ AutoDetectDataType switchType(Object obj) {\n      * @return true if yes\n      */\n     static boolean isBigInteger(Object obj) {\n-        return obj instanceof BigInteger && obj.getClass() == BigInteger.class;\n+        return obj != null && obj.getClass() == BigInteger.class;\n     }\n \n     /**\n@@ -298,7 +298,7 @@ static boolean isBigInteger(Object obj) {\n      * @return true if yes\n      */\n     static boolean isBigDecimal(Object obj) {\n-        return obj instanceof BigDecimal && obj.getClass() == BigDecimal.class;\n+        return obj != null && obj.getClass() == BigDecimal.class;\n     }\n \n     /**\n@@ -308,7 +308,7 @@ static boolean isBigDecimal(Object obj) {\n      * @return true if yes\n      */\n     static boolean isDate(Object obj) {\n-        return obj instanceof Date && obj.getClass() == Date.class;\n+        return obj != null && obj.getClass() == Date.class;\n     }\n \n     /**\ndiff --git a/h2/src/main/org/h2/value/ValueDecimal.java b/h2/src/main/org/h2/value/ValueDecimal.java\nindex 71fdd653c..1f787c135 100644\n--- a/h2/src/main/org/h2/value/ValueDecimal.java\n+++ b/h2/src/main/org/h2/value/ValueDecimal.java\n@@ -57,7 +57,7 @@ public class ValueDecimal extends Value {\n     private ValueDecimal(BigDecimal value) {\n         if (value == null) {\n             throw new IllegalArgumentException(\"null\");\n-        } else if (!value.getClass().equals(BigDecimal.class)) {\n+        } else if (value.getClass() != BigDecimal.class) {\n             throw DbException.get(ErrorCode.INVALID_CLASS_2,\n                     BigDecimal.class.getName(), value.getClass().getName());\n         }",
    "Add control to the keyboard and focus": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java b/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java\nindex d9f5d03b66..72bb2f61f9 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java\n@@ -1,6 +1,7 @@\n package net.osmand.plus.dashboard;\n \n import android.annotation.SuppressLint;\n+import android.content.Context;\n import android.content.Intent;\n import android.content.res.Resources;\n import android.graphics.drawable.ColorDrawable;\n@@ -20,6 +21,7 @@ import android.view.ViewTreeObserver;\n import android.view.animation.Animation;\n import android.view.animation.Animation.AnimationListener;\n import android.view.animation.TranslateAnimation;\n+import android.view.inputmethod.InputMethodManager;\n import android.widget.AbsListView;\n import android.widget.AdapterView;\n import android.widget.AdapterView.OnItemClickListener;\n@@ -1337,6 +1339,9 @@ public class DashboardOnMap implements ObservableScrollViewCallbacks, DynamicLis\n \n \tprivate void backPressed() {\n \t\tif (previousVisibleType != visibleType && previousVisibleType != null) {\n+\t\t\tif (visibleType == DashboardType.MAPILLARY) {\n+\t\t\t\thideKeyboard();\n+\t\t\t}\n \t\t\tvisibleType = null;\n \t\t\tsetDashboardVisibility(true, previousVisibleType);\n \t\t} else {\n@@ -1344,6 +1349,14 @@ public class DashboardOnMap implements ObservableScrollViewCallbacks, DynamicLis\n \t\t}\n \t}\n \n+\tprivate void hideKeyboard() {\n+\t\tView currentFocus = mapActivity.getCurrentFocus();\n+\t\tif (currentFocus != null) {\n+\t\t\tInputMethodManager imm = (InputMethodManager) mapActivity.getSystemService(Context.INPUT_METHOD_SERVICE);\n+\t\t\timm.hideSoftInputFromWindow(currentFocus.getWindowToken(), 0);\n+\t\t}\n+\t}\n+\n \n \t@Override\n \tpublic void onScrollChanged(int scrollY, boolean firstScroll, boolean dragging) {\ndiff --git a/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java b/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java\nindex e81d7c881c..f6977bbe1b 100644\n--- a/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java\n@@ -17,6 +17,7 @@ import android.view.View;\n import android.view.ViewGroup;\n import android.view.inputmethod.EditorInfo;\n import android.view.inputmethod.InputMethodManager;\n+import android.widget.AdapterView;\n import android.widget.Button;\n import android.widget.CompoundButton;\n import android.widget.DatePicker;\n@@ -102,7 +103,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n                 ResourceManager manager = getMyApplication().getResourceManager();\n                 manager.clearCacheAndTiles(TileSourceManager.getMapillaryVectorSource());\n                 manager.clearCacheAndTiles(TileSourceManager.getMapillaryRasterSource());\n-                plugin.updateLayers(mapActivity.getMapView(), mapActivity);\n+                mapActivity.refreshMap();\n             }\n         });\n \n@@ -120,12 +121,19 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n             textView.setText(selectedUsername);\n             textView.setSelection(selectedUsername.length());\n         }\n+        textView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n+            @Override\n+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n+                hideKeyboard();\n+                mapActivity.getDashboard().refreshContent(true);\n+            }\n+        });\n         textView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n             @Override\n             public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\n                 if (id == EditorInfo.IME_ACTION_DONE) {\n-                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);\n-                    imm.hideSoftInputFromWindow(textView.getWindowToken(), 0);\n+                    hideKeyboard();\n+                    mapActivity.getDashboard().refreshContent(true);\n                     return true;\n                 }\n                 return false;\n@@ -140,7 +148,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n             @Override\n             public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n                 view.findViewById(R.id.warning_linear_layout).setVisibility(View.GONE);\n-                if (charSequence.length() > 0 ||\n+                if (!settings.MAPILLARY_FILTER_USERNAME.get().equals(\"\") ||\n                         settings.MAPILLARY_FILTER_TO_DATE.get() != 0 ||\n                         settings.MAPILLARY_FILTER_FROM_DATE.get() != 0) {\n                     changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);\n@@ -170,6 +178,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n                 dateFromEt.setText(dateFormat.format(from.getTime()));\n                 settings.MAPILLARY_FILTER_FROM_DATE.set(from.getTimeInMillis());\n                 changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);\n+                mapActivity.getDashboard().refreshContent(true);\n             }\n         };\n         dateFromEt.setOnClickListener(new View.OnClickListener() {\n@@ -196,6 +205,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n                 dateToEt.setText(dateFormat.format(to.getTime()));\n                 settings.MAPILLARY_FILTER_TO_DATE.set(to.getTimeInMillis());\n                 changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);\n+                mapActivity.getDashboard().refreshContent(true);\n             }\n         };\n         dateToEt.setOnClickListener(new View.OnClickListener() {\n@@ -234,19 +244,20 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {\n                 if (!settings.MAPILLARY_FILTER_USERNAME.get().equals(\"\") || !dateFrom.equals(\"\") || !dateTo.equals(\"\")) {\n                     settings.USE_MAPILLARY_FILTER.set(true);\n                 }\n-                if (!username.equals(\"\") && settings.MAPILLARY_FILTER_USERNAME.get().equals(\"\")) {\n-                    view.findViewById(R.id.warning_linear_layout).setVisibility(View.VISIBLE);\n-                }\n                 if (dateFrom.equals(\"\")) {\n                     settings.MAPILLARY_FILTER_FROM_DATE.set(0L);\n                 }\n                 if (dateTo.equals(\"\")) {\n                     settings.MAPILLARY_FILTER_TO_DATE.set(0L);\n                 }\n+                if (!username.equals(\"\") && settings.MAPILLARY_FILTER_USERNAME.get().equals(\"\")) {\n+                    view.findViewById(R.id.warning_linear_layout).setVisibility(View.VISIBLE);\n+                } else {\n+                    mapActivity.getDashboard().hideDashboard();\n+                }\n \n                 changeButtonState(apply, .5f, false);\n                 plugin.updateLayers(mapActivity.getMapView(), mapActivity);\n-                mapActivity.getDashboard().hideDashboard();\n             }\n       ",
    "Prevent default action for form submit event in ` PivotConfiguration ` .": "diff --git a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx\nindex 6a7e98c2fb..590f78f35c 100644\n--- a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx\n+++ b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx\n@@ -31,8 +31,11 @@ export default class PivotConfiguration extends React.Component {\n     };\n   }\n \n-  // eslint-disable-next-line react/destructuring-assignment\n-  _onSubmit = () => this.props.onClose(this.state);\n+  _onSubmit = (e) => {\n+    e.preventDefault();\n+    const { onClose } = this.props;\n+    onClose(this.state);\n+  };\n \n   _onChange = (config) => this.setState({ config });\n \ndiff --git a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx\nindex aaf0a3c9fe..e9978818e9 100644\n--- a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx\n+++ b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx\n@@ -15,14 +15,13 @@ export default class EditableTitle extends React.Component {\n     onChange: () => {},\n   };\n \n-  state = {\n-    editing: false,\n-    // eslint-disable-next-line react/destructuring-assignment\n-    value: this.props.value,\n-  };\n-\n-  componentWillReceiveProps(nextProps) {\n-    this.setState({ value: nextProps.value });\n+  constructor(props) {\n+    super(props);\n+    const { value } = props;\n+    this.state = {\n+      editing: false,\n+      value,\n+    };\n   }\n \n   _toggleEditing = () => {\n@@ -42,7 +41,8 @@ export default class EditableTitle extends React.Component {\n     this.setState({ value: evt.target.value });\n   };\n \n-  _onSubmit = () => {\n+  _onSubmit = (e) => {\n+    e.preventDefault();\n     const { value } = this.state;\n     const { onChange, value: propsValue } = this.props;\n     if (value !== '') {\ndiff --git a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx\nindex e6994867d2..db14c2a7d2 100644\n--- a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx\n+++ b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx\n@@ -14,7 +14,7 @@ const LoadingSpinner = styled(Spinner)`\n const WidgetHeader = ({ children, onRename, hideDragHandle, title, loading }) => (\n   <div className={styles.widgetHeader}>\n     {hideDragHandle || <Icon name=\"bars\" className={`widget-drag-handle ${styles.widgetDragHandle}`} />}{' '}\n-    <EditableTitle disabled={!onRename} value={title} onChange={onRename} />\n+    <EditableTitle key={title} disabled={!onRename} value={title} onChange={onRename} />\n     {loading && <LoadingSpinner text=\"\" delay={0} />}\n     <span className={`pull-right ${styles.widgetActionDropdown}`}>\n       {children}",
    "updating release plugin and removing extensions .": "diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml\nindex 112b4f5e..43fb65a5 100644\n--- a/AndroidAnnotations/pom.xml\n+++ b/AndroidAnnotations/pom.xml\n@@ -77,7 +77,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-release-plugin</artifactId>\n-          <version>2.0</version>\n+          <version>2.2.1</version>\n         </plugin>\n         <plugin>\n           <groupId>org.sonatype.plugins</groupId>\n@@ -137,21 +137,6 @@\n         </executions>\n       </plugin>\n     </plugins>\n-    <extensions>\n-\n-      <extension>\n-        <groupId>org.apache.maven.scm</groupId>\n-        <artifactId>maven-scm-provider-git-commons</artifactId>\n-        <version>1.5</version>\n-      </extension>\n-\n-      <extension>\n-        <groupId>org.apache.maven.scm</groupId>\n-        <artifactId>maven-scm-provider-gitexe</artifactId>\n-        <version>1.5</version>\n-      </extension>\n-\n-    </extensions>\n   </build>\n \n   <distributionManagement>\n@@ -166,8 +151,8 @@\n   </distributionManagement>\n \n   <scm>\n-    <connection>scm:git:https://py.ricau@code.google.com/p/androidannotations/AndroidAnnotations</connection>\n-    <developerConnection>scm:git:https://py.ricau@code.google.com/p/androidannotations/AndroidAnnotations</developerConnection>\n+    <connection>scm:git:https://py.ricau@code.google.com/p/androidannotations</connection>\n+    <developerConnection>scm:git:https://py.ricau@code.google.com/p/androidannotations</developerConnection>\n     <url>http://androidannotations.googlecode.com/git</url>\n   </scm>\n ",
    "improve DateParser": "diff --git a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java\nindex ec74e66f8..96262ebd4 100755\n--- a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java\n@@ -2346,8 +2346,44 @@ public final class JSONScanner implements JSONLexer {\n \r\n     public boolean scanISO8601DateIfMatch(boolean strict) {\r\n         int rest = text.length() - bp;\r\n+        \r\n+        if ((!strict) && rest > 13) {\r\n+            char c0 = charAt(bp);\r\n+            char c1 = charAt(bp + 1);\r\n+            char c2 = charAt(bp + 2);\r\n+            char c3 = charAt(bp + 3);\r\n+            char c4 = charAt(bp + 4);\r\n+            char c5 = charAt(bp + 5);\r\n+            \r\n+            char c_r0 = charAt(bp + rest - 1);\r\n+            char c_r1 = charAt(bp + rest - 2);\r\n+            if (c0 == '/' && c1 == 'D' && c2 == 'a' && c3 == 't' && c4 == 'e' && c5 == '(' && c_r0 == '/' && c_r1 == ')') {\r\n+                int plusIndex = -1;\r\n+                for (int i = 6; i < rest; ++i) {\r\n+                    char c = charAt(bp + i);\r\n+                    if (c == '+') {\r\n+                        plusIndex = i;\r\n+                    } else if (c < '0' || c > '9') {\r\n+                        break;\r\n+                    }\r\n+                }\r\n+                if (plusIndex == -1) {\r\n+                    return false;\r\n+                }\r\n+                int offset = bp + 6;\r\n+                String numberText = this.subString(offset, plusIndex - offset);\r\n+                long millis = Long.parseLong(numberText);\r\n+                \r\n+                Locale local = Locale.getDefault();\r\n+                calendar = Calendar.getInstance(TimeZone.getDefault(), local);\r\n+                calendar.setTimeInMillis(millis);\r\n+                \r\n+                token = JSONToken.LITERAL_ISO8601_DATE;\r\n+                return true;\r\n+            }\r\n+        }\r\n \r\n-        if (rest == 8) {\r\n+        if (rest == 8 || rest == 14 || rest == 17) {\r\n             if (strict) {\r\n                 return false;\r\n             }\r\n@@ -2360,26 +2396,54 @@ public final class JSONScanner implements JSONLexer {\n             char M1 = charAt(bp + 5);\r\n             char d0 = charAt(bp + 6);\r\n             char d1 = charAt(bp + 7);\r\n-            \r\n-            if (!checkYear(y0, y1, y2, y3)) {\r\n-                return false;\r\n-            }\r\n \r\n-            if (!checkMonth(M0, M1)) {\r\n-                return false;\r\n-            }\r\n-\r\n-            if (!checkDay(d0, d1)) {\r\n+            if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {\r\n                 return false;\r\n             }\r\n \r\n             setCalendar(y0, y1, y2, y3, M0, M1, d0, d1);\r\n-            \r\n-            calendar.set(Calendar.HOUR_OF_DAY, 0);\r\n-            calendar.set(Calendar.MINUTE, 0);\r\n-            calendar.set(Calendar.SECOND, 0);\r\n-            calendar.set(Calendar.MILLISECOND, 0);\r\n \r\n+            if (rest != 8) {\r\n+                char h0 = charAt(bp + 8);\r\n+                char h1 = charAt(bp + 9);\r\n+                char m0 = charAt(bp + 10);\r\n+                char m1 = charAt(bp + 11);\r\n+                char s0 = charAt(bp + 12);\r\n+                char s1 = charAt(bp + 13);\r\n+\r\n+               if(!checkTime(h0, h1, m0, m1, s0, s1)) {\r\n+                   return false;\r\n+               }\r\n+\r\n+                int millis;\r\n+                if (rest == 17) {\r\n+                    char S0 = charAt(bp + 14);\r\n+                    char S1 = charAt(bp + 15);\r\n+                    char S2 = charAt(bp + 16);\r\n+                    if (S0 < '0' || S0 > '9') {\r\n+                        return false;\r\n+                    }\r\n+                    if (S1 < '0' || S1 > '9') {\r\n+                        return false;\r\n+                    }\r\n+                    if (S2 < '0' || S2 > '9') {\r\n+                        return false;\r\n+                    }\r\n+\r\n+                    millis = digits[S0] * 100 + digits[S1] * 10 + digits[S2];\r\n+                } else {\r\n+                    millis = 0;\r\n+                }\r\n+                \r\n+                int hour = digits[h0] * 10 + digits[h1];\r\n+                int minute = digits[m0] * 10 + digits[m1];\r\n+                int seconds = digits[s0] * 10 + digits[s1];\r\n+                \r\n+                calendar.set(Calendar.HOUR_OF_DAY, hour);\r\n+                calendar.set(Calendar.MINUTE, minute);\r\n+                calendar.set(Calendar.SECOND, seconds);\r\n+                calendar.set(Calendar.MILLISECOND, millis);\r\n+            }\r\n             token = JSONToken.LITERAL_ISO8601_DATE;\r\n             return true;\r\n         }\r\n@@ -2388,31 +2452,22 @@ public final class JSONScanner implements JSONLexer {\n             return false;\r\n         }\r\n \r\n-        char y0 = charAt(bp);\r\n-        char y1 = charAt(bp + 1);\r\n-        char y2 = charAt(bp + 2);\r\n-        char y3 = charAt(bp + 3);\r\n-        if (!checkYear(y0, y1, y2, y3)) {\r\n-            return false;\r\n-        }\r\n-\r\n         if (charAt(bp + 4) != '-') {\r\n             return false;\r\n         }\r\n-\r\n-        char M0 = charAt(bp + 5);\r\n-        char M1 = charAt(bp + 6);\r\n-        if (!checkMonth(M0, M1)) {\r\n-            return false;\r\n-        }\r\n-\r\n         if (charAt(bp + 7) != '-') {\r\n             return false;\r\n         }\r\n \r\n+        char y0 = charAt(bp);\r\n+        char y1 = charAt(bp + 1);\r\n+        char y2 = charAt(bp + 2);\r\n+        char y3 = charAt(bp + 3);\r\n+        char M0 = charAt(bp + 5);\r\n+        char M1 = charAt(bp + 6);\r\n         char d0 = charAt(bp + 8);\r\n         char d1 = charAt(bp + 9);\r\n-        if (!checkDay(d0, d1)) {\r\n+        if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {\r\n             return false;\r\n         }\r\n \r\n@@ -2437,59 +2492,21 @@ public final class JSONScanner implements JSONLexer {\n             return false;\r\n         }\r\n \r\n-        char h0 = charAt(bp + 11);\r\n-        char h1 = charAt(bp + 12);\r\n-        if (h0 == '0') {\r\n-            if (h1 < '0' || h1 > '9') {\r\n-                return false;\r\n-            }\r\n-        } else if (h0 == '1') {\r\n-            if (h1 < '0' || h1 > '9') {\r\n-                return false;\r\n-            }\r\n-        } else if (h0 == '2') {\r\n-            if (h1 < '0' || h1 > '4') {\r\n-                return false;\r\n-            }\r\n-        } else {\r\n-            return false;\r\n-        }\r\n-\r\n         if (charAt(bp + 13) != ':') {\r\n             return false;\r\n         }\r\n-\r\n-        char m0 = charAt(bp + 14);\r\n-        char m1 = charAt(bp + 15);\r\n-        if (m0 >= '0' && m0 <= '5') {\r\n-            if (m1 < '0' || m1 > '9') {\r\n-                return false;\r\n-            }\r\n-        } else if (m0 == '6') {\r\n-            if (m1 != '0') {\r\n-                return false;\r\n-            }\r\n-        } else {\r\n-            return false;\r\n-        }\r\n-\r\n         if (charAt(bp + 16) != ':') {\r\n             return false;\r\n         }\r\n \r\n+        char h0 = charAt(bp + 11);\r\n+        char h1 = charAt(bp + 12);\r\n+        char m0 = charAt(bp + 14);\r\n+        char m1 = charAt(bp + 15);\r\n         char s0 = charAt(bp + 17);\r\n         char s1 = charAt(bp + 18);\r\n-        if (s0 >= '0' && s0 <= '5') {\r\n-            if (s1 < '0' || s1 > '9') {\r\n-                return false;\r\n-            }\r\n-        } else if (s0 == '6') {\r\n-            if (s1 != '0') {\r\n-                return false;\r\n-            }\r\n-        } else {\r\n-            return false;\r\n-        }\r\n+\r\n+        checkTime(h0, h1, m0, m1, s0, s1);\r\n \r\n         int hour = digits[h0] * 10 + digits[h1];\r\n         int minute = digits[m0] * 10 + digits[m1];\r\n@@ -2534,44 +2551,41 @@ public final class JSONScanner implements JSONLexer {\n         return true;\r\n     }\r\n \r\n-    private void setCalendar(char y0, char y1, char y2, char y3, char M0, char M1, char d0, char d1) {\r\n-        Locale local = Locale.getDefault();\r\n-        calendar = Calendar.getInstance(TimeZone.getDefault(), local);\r\n-        int year = digits[y0] * 1000 + digits[y1] * 100 + digits[y2] * 10 + digits[y3];\r\n-        int month = digits[M0] * 10 + digits[M1] - 1;\r\n-        int day = digits[d0] * 10 + digits[d1];\r\n-        calendar.set(Calendar.YEAR, year);\r\n-        calendar.set(Calendar.MONTH, month);\r\n-        calendar.set(Calendar.DAY_OF_MONTH, day);\r\n-    }\r\n-\r\n-    static boolean checkDay(char d0, char d1) {\r\n-        if (d0 == '0') {\r\n-            if (d1 < '1' || d1 > '9') {\r\n+    private boolean checkTime(char h0, char h1, char m0, char m1, char s0, char s1) {\r\n+        if (h0 == '0') {\r\n+            if (h1 < '0' || h1 > '9') {\r\n                 return false;\r\n             }\r\n-        } else if (d0 == '1' || d0 == '2') {\r\n-            if (d1 < '0' || d1 > '9') {\r\n+        } else if (h0 == '1') {\r\n+            if (h1 < '0' || h1 > '9') {\r\n                 return false;\r\n             }\r\n-        } else if (d0 == '3') {\r\n-            if (d1 != '0' && d1 != '1') {\r\n+        } else if (h0 == '2') {\r\n+            if (h1 < '0' || h1 > '4') {\r\n                 return false;\r\n             }\r\n         } else {\r\n             return false;\r\n         }\r\n \r\n-        return true;\r\n-    }\r\n+        if (m0 >= '0' && m0 <= '5') {\r\n+            if (m1 < '0' || m1 > '9') {\r\n+                return false;\r\n+            }\r\n+        } else if (m0 == '6') {\r\n+            if (m1 != '0') {\r\n+                return false;\r\n+            }\r\n+        } else {\r\n+            return false;\r\n+        }\r\n \r\n-    static boolean checkMonth(char M0, char M1) {\r\n-        if (M0 == '0') {\r\n-            if (M1 < '1' || M1 > '9') {\r\n+        if (s0 >= '0' && s0 <= '5') {\r\n+            if (s1 < '0' || s1 > '9') {\r\n                 return false;\r\n             }\r\n-        } else if (M0 == '1') {\r\n-            if (M1 != '0' && M1 != '1' && M1 != '2') {\r\n+        } else if (s0 == '6') {\r\n+            if (s1 != '0') {\r\n                 return false;\r\n",
    "added test for to_date and to_char templates": "diff --git a/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java\nnew file mode 100644\nindex 000000000..1fd1ebbda\n--- /dev/null\n+++ b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java\n@@ -0,0 +1,40 @@\n+package com.mysema.query.sql;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Date;\n+\n+import org.junit.Test;\n+\n+import com.mysema.query.types.ConstantImpl;\n+import com.mysema.query.types.Expression;\n+import com.mysema.query.types.expr.DateExpression;\n+import com.mysema.query.types.expr.StringExpression;\n+import com.mysema.query.types.path.DatePath;\n+import com.mysema.query.types.path.StringPath;\n+import com.mysema.query.types.template.DateTemplate;\n+import com.mysema.query.types.template.StringTemplate;\n+\n+public class TemplateTest {\n+\n+    @Test\n+    public void ToDate(){\n+        StringExpression str = new StringPath(\"str\");\n+        assertEquals(\"to_date(str,'DD-MON-YYYY')\", to_date(str, \"DD-MON-YYYY\").toString());\n+    }\n+\n+    @Test\n+    public void ToChar(){\n+        DateExpression<Date> date = new DatePath<Date>(Date.class,\"date\");\n+        assertEquals(\"to_char(date,'DD-MON-YYYY')\", to_char(date, \"DD-MON-YYYY\").toString());\n+    }\n+\n+    private DateExpression<Date> to_date(Expression<String> expr, String pattern){\n+        return DateTemplate.create(Date.class, \"to_date({0},'{1s}')\", expr, ConstantImpl.create(pattern));\n+    }\n+\n+    private StringExpression to_char(Expression<?> expr, String pattern){\n+        return StringTemplate.create(\"to_char({0},'{1s}')\", expr, ConstantImpl.create(pattern));\n+    }\n+        \n+}",
    "Moving the barrier between graph and stats .": "diff --git a/LICENSE b/LICENSE\nindex f7699dadc69..c2e75c0c6b5 100644\n--- a/LICENSE\n+++ b/LICENSE\n@@ -233,6 +233,7 @@ The Apache Flink project bundles the following files under the MIT License:\n  - moment.js v2.10.6 (http://momentjs.com/docs/) - Copyright (c) 2011-2014 Tim Wood, Iskren Chernev, Moment.js contributors\n  - moment-duration-format v1.3.0 (https://github.com/jsmreese/moment-duration-format) - Copyright (c) 2013 John Madhavan-Reese\n  - qTip2 v2.2.1 (http://qtip2.com) - Copyright (c) 2012 Craig Michael Thompson\n+ - Split.js v1.0.6 (https://nathancahill.github.io/Split.js/) - Copyright (c) 2015 Nathan Cahill\n \n All rights reserved.\n \ndiff --git a/flink-runtime-web/web-dashboard/app/index.jade b/flink-runtime-web/web-dashboard/app/index.jade\nindex ceb5079c369..3faedc25570 100644\n--- a/flink-runtime-web/web-dashboard/app/index.jade\n+++ b/flink-runtime-web/web-dashboard/app/index.jade\n@@ -73,4 +73,4 @@ html(lang='en')\n               | Submit new Job\n \n     #content(ng-class=\"{ 'sidebar-visible': sidebarVisible }\")\n-      div(ui-view='main')\n+      #main(ui-view='main')\ndiff --git a/flink-runtime-web/web-dashboard/app/partials/jobs/job.jade b/flink-runtime-web/web-dashboard/app/partials/jobs/job.jade\nindex d8b4d4ac834..981f2447f83 100644\n--- a/flink-runtime-web/web-dashboard/app/partials/jobs/job.jade\n+++ b/flink-runtime-web/web-dashboard/app/partials/jobs/job.jade\n@@ -62,4 +62,4 @@ nav.navbar.navbar-default.navbar-fixed-top.navbar-main-additional(ng-if=\"job\")\n       a(ui-sref=\".config\") Configuration\n \n #content-inner.has-navbar-main-additional\n-  div(ui-view=\"details\")\n+  #details(ui-view=\"details\")\ndiff --git a/flink-runtime-web/web-dashboard/app/partials/jobs/job.plan.jade b/flink-runtime-web/web-dashboard/app/partials/jobs/job.plan.jade\nindex 646fdf04e34..5db064087fb 100644\n--- a/flink-runtime-web/web-dashboard/app/partials/jobs/job.plan.jade\n+++ b/flink-runtime-web/web-dashboard/app/partials/jobs/job.plan.jade\n@@ -15,28 +15,31 @@\n   See the License for the specific language governing permissions and\n   limitations under the License.\n \n-.canvas-wrapper\n-  div.main-canvas(job-plan, plan=\"plan\", jobid=\"{{jobid}}\", set-node=\"changeNode(nodeid)\")\n+split\n+  .split#canvas\n+    .canvas-wrapper\n+      div.main-canvas(job-plan, plan=\"plan\", jobid=\"{{jobid}}\", set-node=\"changeNode(nodeid)\")\n \n-.panel.panel-default.panel-multi(ng-if=\"plan\")\n-  nav.navbar.navbar-default.navbar-secondary-additional\n-    ul.nav.nav-tabs\n-      li(ui-sref-active='active')\n-        a(ui-sref=\".subtasks({nodeid: nodeid})\") Subtasks\n+  .split#job-panel\n+    .panel.panel-default.panel-multi(ng-if=\"plan\")\n+      nav.navbar.navbar-default.navbar-secondary-additional\n+        ul.nav.nav-tabs\n+          li(ui-sref-active='active')\n+            a(ui-sref=\".subtasks({nodeid: nodeid})\") Subtasks\n \n-      li(ui-sref-active='active')\n-        a(ui-sref=\".metrics({nodeid: nodeid})\") Metrics\n+          li(ui-sref-active='active')\n+            a(ui-sref=\".metrics({nodeid: nodeid})\") Metrics\n \n-      li(ui-sref-active='active')\n-        a(ui-sref=\".taskmanagers({nodeid: nodeid})\") TaskManagers\n+          li(ui-sref-active='active')\n+            a(ui-sref=\".taskmanagers({nodeid: nodeid})\") TaskManagers\n \n-      li(ui-sref-active='active')\n-        a(ui-sref=\".accumulators({nodeid: nodeid})\") Accumulators\n+          li(ui-sref-active='active')\n+            a(ui-sref=\".accumulators({nodeid: nodeid})\") Accumulators\n \n-      li(ui-sref-active='active')\n-        a(ui-sref=\".checkpoints({nodeid: nodeid})\") Checkpoints\n+          li(ui-sref-active='active')\n+            a(ui-sref=\".checkpoints({nodeid: nodeid})\") Checkpoints\n \n-      li(ng-if=\"job.state == 'RUNNING'\" ui-sref-active='active')\n-        a(ui-sref=\".backpressure({nodeid: nodeid})\") Back Pressure\n+          li(ng-if=\"job.state == 'RUNNING'\" ui-sref-active='active')\n+            a(ui-sref=\".backpressure({nodeid: nodeid})\") Back Pressure\n \n-  .panel-body.clean(ui-view=\"node-details\")\n+      .panel-body.clean#node-details(ui-view=\"node-details\")\ndiff --git a/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.ctrl.coffee b/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.ctrl.coffee\nindex 5b183775180..2bcbc13a82c 100644\n--- a/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.ctrl.coffee\n+++ b/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.ctrl.coffee\n@@ -89,7 +89,7 @@ angular.module('flinkApp')\n \n # --------------------------------------\n \n-.controller 'JobPlanController', ($scope, $state, $stateParams, JobsService) ->\n+.controller 'JobPlanController', ($scope, $state, $stateParams, $window, JobsService) ->\n   $scope.nodeid = null\n   $scope.nodeUnfolded = false\n   $scope.stateList = JobsService.stateList()\ndiff --git a/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.dir.coffee b/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.dir.coffee\nindex fa97c421e89..8cd00f4743e 100644\n--- a/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.dir.coffee\n+++ b/flink-runtime-web/web-dashboard/app/scripts/modules/jobs/jobs.dir.coffee\n@@ -120,7 +120,7 @@ angular.module('flinkApp')\n       angular.forEach data, (vertex) ->\n         if vertex['start-time'] > -1\n           if vertex.type is 'scheduled'\n-            testData.push \n+            testData.push\n               times: [\n                 label: translateLabel(vertex.name)\n                 color: \"#cccccc\"\n@@ -130,7 +130,7 @@ angular.module('flinkApp')\n                 type: vertex.type\n               ]\n           else\n-            testData.push \n+            testData.push\n               times: [\n                 label: translateLabel(vertex.name)\n                 color: \"#d9f1f7\"\n@@ -168,6 +168,13 @@ angular.module('flinkApp')\n     return\n \n # ----------------------------------------------\n+.directive 'split', () -> \n+  return compile: (tElem, tAttrs) ->\n+      Split(tElem.children(), (\n+        sizes: [50, 50]\n+        direction: 'vertical'\n+      ))\n+# ----------------------------------------------\n \n .directive 'jobPlan', ($timeout) ->\n   template: \"\n@@ -204,27 +211,27 @@ angular.module('flinkApp')\n \n     scope.zoomIn = ->\n       if mainZoom.scale() < 2.99\n-        \n+\n         # Calculate and store new values in zoom object\n         translate = mainZoom.translate()\n         v1 = translate[0] * (mainZoom.scale() + 0.1 / (mainZoom.scale()))\n         v2 = translate[1] * (mainZoom.scale() + 0.1 / (mainZoom.scale()))\n         mainZoom.scale mainZoom.scale() + 0.1\n         mainZoom.translate [ v1, v2 ]\n-        \n+\n         # Transform svg\n         d3mainSvgG.attr \"transform\", \"translate(\" + v1 + \",\" + v2 + \") scale(\" + mainZoom.scale() + \")\"\n \n     scope.zoomOut = ->\n       if mainZoom.scale() > 0.31\n-        \n+\n         # Calculate and store new values in mainZoom object\n         mainZoom.scale mainZoom.scale() - 0.1\n         translate = mainZoom.translate()\n         v1 = translate[0] * (mainZoom.scale() - 0.1 / (mainZoom.scale()))\n         v2 = translate[1] * (mainZoom.scale() - 0.1 / (mainZoom.scale()))\n         mainZoom.translate [ v1, v2 ]\n-        \n+\n         # Transform svg\n         d3mainSvgG.attr \"transform\", \"translate(\" + v1 + \",\" + v2 + \") scale(\" + mainZoom.scale() + \")\"\n \n@@ -253,7 +260,7 @@ angular.module('flinkApp')\n \n       else\n         'node-normal'\n-      \n+\n     # creates the label of a node, in info is stored, whether it is a special node (like a mirror in an iteration)\n     createLabelNode = (el, info, maxW, maxH) ->\n       # labelValue = \"<a href='#/jobs/\" + jobid + \"/vertex/\" + el.id + \"' class='node-label \" + getNodeType(el, info) + \"'>\"\n@@ -268,21 +275,20 @@ angular.module('flinkApp')\n         labelValue += \"\"\n       else\n         stepName = el.description\n-        \n+\n         # clean stepName\n         stepName = shortenString(stepName)\n         labelValue += \"<h4 class='step-name'>\" + stepName + \"</h4>\"\n-      \n+\n       # If this node is an \"iteration\" we need a different panel-body\n       if el.step_function?\n         labelValue += extendLabelNodeForIteration(el.id, maxW, maxH)\n       else\n-        \n-        # Otherwise add infos    \n+\n+        # Otherwise add infos\n         labelValue += \"<h5>\" + info + \" Node</h5>\"  if isSpecialIterationNode(info)\n         labelValue += \"<h5>Parallelism: \" + el.parallelism + \"</h5>\"  unless el.parallelism is \"\"\n         labelValue += \"<h5>Operation: \" + shortenString(el.operator_strategy) + \"</h5>\" unless el.operator is `undefined` or not el.operator_strategy\n-      \n       # labelValue += \"</a>\"\n       labelValue += \"</div>\"\n       labelValue\n@@ -397,7 +403,7 @@ angular.module('flinkApp')\n         createNode(g, data, el, isParent, maxW, maxH)\n \n         existingNodes.push el.id\n-        \n+\n         # create edges from inputs to current node\n         if el.inputs?\n           for pred in el.inputs\n@@ -410,7 +416,7 @@ angular.module('flinkApp')\n       for i of data.nodes\n         el = data.nodes[i]\n         return el  if el.id is nodeID\n-        \n+\n         # look for nodes that are in iterations\n         if el.step_function?\n           for j of el.step_function\ndiff --git a/flink-runtime-web/web-dashboard/app/styles/graph.styl b/flink-runtime-web/web-dashboard/app/styles/graph.styl\nindex 6de87c2b3ad..85cdc079a1c 100644\n--- a/flink-runtime-web/web-dashboard/app/styles/graph.styl\n+++ b/flink-runtime-web/web-dashboard/app/styles/graph.styl\n@@ -18,6 +18,7 @@\n \n svg.graph\n   overflow hidden\n+  height: 100%\n \n   g\n     &.type-TK\ndiff --git a/flink-runtime-web/web-dashboard/app/styles/index.styl b/flink-runtime-web/web-dashboard/app/styles/index.styl\nindex 29990dc38fa..d7e977d2619 100644\n--- a/flink-runtime-web/web-dashboard/app/styles/index.styl\n+++ b/flink-runtime-web/web-dashboard/app/styles/index.styl\n@@ -21,6 +21,25 @@\n sidebar-width = 250px\n sidebar-width-small = 160px\n \n+html\n+  height: 100%\n+\n+body\n+  height: 100%\n+\n+#main\n+  height: 100%\n+\n+.gutter\n+  background-color: transparent\n+  background-repeat: no-repeat\n+  background-position: 50%\n+\n+.gutter-vertical\n+  cursor: row-resize\n+  background-image: url('/images/grips/horizontal.png')\n+\n+\n #sidebar\n   overflow: hidden\n   position: fixed\n@@ -54,11 +73,11 @@ sidebar-width-small = 160px\n     font-weight: bold\n     color: #ffffff\n     padding-left: 0\n-    \n+\n   .nav > li > a\n     color: #aaaaaa\n     margin-bottom: 1px\n-    \n+\n     &:hover, &:focus\n       background-color: rgba(40, 40, 40, 0.5)\n     &.active\n@@ -69,6 +88,7 @@ sidebar-width-small = 160px\n   overflow: hidden\n   margin-left: 0\n   padding-top: 70px\n+  height: 100%\n \n   transition(400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all)\n \n@@ -82,7 +102,7 @@ sidebar-width-small = 160px\n     .nav-tabs\n       margin: 0 -20px\n       padding: 0 20px\n-      \n+\n   .navbar-secondary-additional\n     border: none\n     padding: 0 20px\n@@ -114,7 +134,7 @@ sidebar-width-small = 160px\n       color: #aaaaaa\n       background-color: transparent\n       border-bottom: 2px solid transparent\n-      \n+\n     &.active\n       > a, > a:hover, > a:focus\n         color: #000000\n@@ -130,7 +150,7 @@ sidebar-width-small = 160px\n   th\n     font-weight: normal\n     color: #999999\n-    \n+\n   td.td-long\n     width: 20%\n     white-space: pre-wrap\n@@ -142,7 +162,7 @@ sidebar-width-small = 160px\n   &.table-clickable\n     tr\n       cursor: pointer\n-        \n+\n   &.table-inner\n     background-color: transparent\n \n@@ -166,7 +186,7 @@ sidebar-width-small = 160px\n           background-color: #f0f0f0\n         td.tab-column li.active\n           background-color: #f0f0f0\n-      \n+\n   &.table-activable\n     th.tab-column, td.tab-column\n       border-top: none\n@@ -174,7 +194,7 @@ sidebar-width-small = 160px\n \n     td.tab-column\n       border-right: 1px solid #dddddd\n-      \n+\n     td\n       position: relative\n \n@@ -289,7 +309,7 @@ span.icon-wrapper\n     display: inline-block\n     border-right: 1px solid #e7e7e7\n     overflow: hidden\n-    \n+\n     .overflow\n       position: absolute\n       display: block\n@@ -307,7 +327,7 @@ span.icon-wrapper\n .panel.panel-multi\n   .panel-heading\n     padding: 0\n-    \n+\n     .panel-info\n       &.thin\n         padding: 8px 10px\n@@ -317,7 +337,7 @@ span.icon-wrapper\n     background-color: #fdfdfd\n     color: #999\n     font-size: 13px\n-    \n+\n     &.clean\n       color: inherit\n       font-size: inherit\n@@ -340,7 +360,7 @@ span.icon-wrapper\n     padding-right: 20px\n     background-color: #fff\n     z-index: 1\n-    \n+\n \n .badge-default[href]:hover,\n .badge-default[href]:focus\n@@ -426,7 +446,7 @@ pre\n       float: none\n       margin-bottom: 0\n       margin-right: -1px\n-      \n+\n       > a\n         margin-right: 0\n         border-radius(0)\n@@ -436,7 +456,7 @@ pre\n       > a:hover, > a:focus\n         border-bottom: none\n         border-left: 2px solid #000000\n-        \n+\n       &.active\n         > a\n           border-bottom: none\n@@ -460,7 +480,7 @@ livechart\n   #sidebar\n     left: 0\n     width: sidebar-width-small\n-    \n+\n     .navbar-static-top\n       .navbar-brand-text\n         display: none\n@@ -517,5 +537,15 @@ livechart\n #job-submit\n   width: 100px\n \n+#content-inner\n+  height: 100%\n \n+#job-panel\n+  overflow-y: auto\n \n+#details\n+  height: 100%\n+\n+#node-details\n+  height: 100%\n+  \ndiff --git a/flink-runtime-web/web-dashboard/app/styles/job.styl b/flink-runtime-web/web-dashboard/app/styles/job.styl\nindex fa21d0e5c94..e0b11fc1c15 100644\n--- a/flink-runtime-web/web-dashboard/app/styles/job.styl\n+++ b/flink-runtime-web/web-dashboard/app/styles/job.styl\n@@ -20,9 +20,10 @@\n   border: 1px solid #ddd\n   position: relative\n   margin-bottom: 20px\n+  height: 100%\n   \n   .main-canvas\n-    height: 400px\n+    height: 100%\n     overflow: hidden\n \n     .zoom-buttons\ndiff --git a/flink-runtime-web/web-dashboard/assets/images/grips/horizontal.png b/flink-runtime-web/web-dashboard/assets/images/grips/horizontal.png\nnew file mode 100644\nindex 00000000000..64a40aeb1d8\nBinary files /dev/null and b/flink-runtime-web/web-dashboard/assets/images/grips/horizontal.png differ\ndiff --git a/flink-runtime-web/web-dashboard/assets/images/grips/vertical.png b/flink-runtime-web/web-dashboard/assets/images/grips/vertical.png\nnew file mode 100644\nindex 00000000000..0ac8fa1e03f\nBinary files /dev/null and b/flink-runtime-web/web-dashboard/assets/images/grips/vertical.png differ\ndiff --git a/flink-runtime-web/web-dashboard/bower.json b/flink-runtime-web/web-dashboard/bower.json\nindex 445d32a2b52..e251f3e86ff 100644\n--- a/flink-runtime-web/web-dashboard/bower.json\n+++ b/flink-runtime-web/web-dashboard/bower.json\n@@ -22,7 +22,8 @@\n     \"moment-duration-format\": \"1.3.0\",\n     \"qtip2\": \"2.2.1\",\n     \"angular-drag-and-drop-lists\": \"^1.4.0\",\n-    \"nvd3\": \"^1.8.4\"\n+    \"nvd3\": \"^1.8.4\",\n+    \"Split.js\": \"1.0.6\"\n   },\n   \"overrides\": {\n     \"dagre-d3\": {\ndiff --git a/flink-runtime-web/web-dashboard/gulpfile.js b/flink-runtime-web/web-dashboard/gulpfile.js\nindex 4264c701e52..2b34e59981e 100644\n--- a/flink-runtime-web/web-dashboard/gulpfile.js\n+++ b/flink-runtime-web/web-dashboard/gulpfile.js\n@@ -56,11 +56,17 @@ gulp.task('set-production', function() {\n \n gulp.task('fonts', function() {\n   return gulp.src(paths.vendor + \"font-awesome/fonts/*\")\n+      .pipe(plumber())\n+      .pipe(gulp.dest(paths.assets + 'fonts'));\n+});\n+\n+gulp.task('images', function() {\n+  return gulp.src(paths.vendor + \"Split.js/grips/*\")\n     .pipe(plumber())\n-    .pipe(gulp.dest(paths.assets + 'fonts'));\n+    .pipe(gulp.dest(paths.assets + 'images/grips'));\n });\n \n-gulp.task('assets', ['fonts'], function() {\n+gulp.task('assets', ['fonts', 'images'], function() {\n   return gulp.src(paths.assets + \"**\")\n     .pipe(plumber())\n     .pipe(gulp.dest(paths.dest));\ndiff --git a/flink-runtime-web/web-dashboard/web/css/index.css b/flink-runtime-web/web-dashboard/web/css/index.css\nindex b017b49b8e7..caae99108a3 100644\n--- a/flink-runtime-web/web-dashboard/web/css/index.css\n+++ b/flink-runtime-web/web-dashboard/web/css/index.css\n@@ -15,6 +15,24 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+html {\n+  height: 100%;\n+}\n+body {\n+  height: 100%;\n+}\n+#main {\n+  height: 100%;\n+}\n+.gutter {\n+  background-color: transparent;\n+  background-repeat: no-repeat;\n+  background-position: 50%;\n+}\n+.gutter-vertical {\n+  cursor: row-resize;\n+  background-image: url(\"/images/grips/horizontal.png\");\n+}\n #sidebar {\n   overflow: hidden;\n   position: fixed;\n@@ -71,6 +89,7 @@\n   overflow: hidden;\n   margin-left: 0;\n   padding-top: 70px;\n+  height: 100%;\n   -webkit-transition: 400ms;\n   -moz-transition: 400ms;\n   -o-transition: 400ms;\n@@ -523,9 +542,10 @@ livechart {\n   border: 1px solid #ddd;\n   position: relative;\n   margin-bottom: 20px;\n+  height: 100%;\n }\n .canvas-wrapper .main-canvas {\n-  height: 400px;\n+  height: 100%;\n   overflow: hidden;\n }\n .canvas-wrapper .main-canvas .zoom-buttons {\n@@ -552,6 +572,7 @@ livechart {\n }\n svg.graph {\n   overflow: hidden;\n+  height: 100%;\n }\n svg.graph g.type-TK > rect {\n   fill: #00ffd0;\n@@ -783,3 +804,15 @@ svg.graph .node-label {\n #job-submit {\n   width: 100px;\n }\n+#content-inner {\n+  height: 100%;\n+}\n+#job-panel {\n+  overflow-y: auto;\n+}\n+#details {\n+  height: 100%;\n+}\n+#node-details {\n+  height: 100%;\n+}\ndiff --git a/flink-runtime-web/web-dashboard/web/images/grips/horizontal.png b/flink-runtime-web/web-dashboard/web/images/grips/horizontal.png\nnew file mode 100644\nindex 00000000000..64a40aeb1d8\nBinary files /dev/null and b/flink-runtime-web/web-dashboard/web/images/grips/horizontal.png differ\ndiff --git a/flink-runtime-web/web-dashboard/web/images/grips/vertical.png b/flink-runtime-web/web-dashboard/web/images/grips/vertical.png\nnew file mode 100644\nindex 00000000000..0ac8fa1e03f\nBinary files /dev/null and b/flink-runtime-web/web-dashboard/web/images/grips/vertical.png differ\ndiff --git a/flink-runtime-web/web-dashboard/web/index.html b/flink-runtime-web/web-dashboard/web/index.html\nindex e3055b35432..fa640fc19c8 100644\n--- a/flink-runtime-web/web-dashboard/web/index.html\n+++ b/flink-runtime-web/web-dashboard/web/index.html\n@@ -51,7 +51,7 @@ limitations under the License.\n       </div>\n     </div>\n     <div id=\"content\" ng-class=\"{ 'sidebar-visible': sidebarVisible }\">\n-      <div ui-view=\"main\"></div>\n+      <div id=\"main\" ui-view=\"main\"></div>\n     </div>\n   </body>\n </html>\n\\ No newline at end of file\ndiff --git a/flink-runtime-web/web-dashboard/web/js/index.js b/flink-runtime-web/web-dashboard/web/js/index.js\nindex 78039451a1c..e460d5cbce8 100644\n--- a/flink-runtime-web/web-dashboard/web/js/index.js\n+++ b/flink-runtime-web/web-dashboard/web/js/index.js\n@@ -520,7 +520,7 @@ angular.module('flinkApp').controller('RunningJobsController', [\"$scope\", \"$stat\n   return $scope.toggleHistory = function() {\n     return $scope.showHistory = !$scope.showHistory;\n   };\n-}]).controller('JobPlanController', [\"$scope\", \"$state\", \"$stateParams\", \"JobsService\", function($scope, $state, $stateParams, JobsService) {\n+}]).controller('JobPlanController', [\"$scope\", \"$state\", \"$stateParams\", \"$window\", \"JobsService\", function($scope, $state, $stateParams, $window, JobsService) {\n   $scope.nodeid = null;\n   $scope.nodeUnfolded = false;\n   $scope.stateList = JobsService.stateList();\n@@ -861,7 +861,16 @@ angular.module('flinkApp').directive('vertex', [\"$state\", function($state) {\n       });\n     }\n   };\n-}]).directive('jobPlan', [\"$timeout\", function($timeout) {\n+}]).directive('split', function() {\n+  return {\n+    compile: function(tElem, tAttrs) {\n+      return Split(tElem.children(), {\n+        sizes: [50, 50],\n+        direction: 'vertical'\n+      });\n+    }\n+  };\n+}).directive('jobPlan', [\"$timeout\", function($timeout) {\n   return {\n     template: \"<svg class='graph' width='500' height='400'><g /></svg> <svg class='tmp' width='1' height='1'><g /></svg> <div class='btn-group zoom-buttons'> <a class='btn btn-default zoom-in' ng-click='zoomIn()'><i class='fa fa-plus' /></a> <a class='btn btn-default zoom-out' ng-click='zoomOut()'><i class='fa fa-minus' /></a> </div>\",\n     scope: {\n@@ -958,7 +967,7 @@ angular.module('flinkApp').directive('vertex', [\"$state\", function($state) {\n           if (el.parallelism !== \"\") {\n             labelValue += \"<h5>Parallelism: \" + el.parallelism + \"</h5>\";\n           }\n-          if (el.operator !== undefined) {\n+          if (!(el.operator === undefined || !el.operator_strategy)) {\n             labelValue += \"<h5>Operation: \" + shortenString(el.operator_strategy) + \"</h5>\";\n           }\n         }\n@@ -2157,4 +2166,4 @@ angular.module('flinkApp').service('TaskManagersService', [\"$http\", \"flinkConfig\n   return this;\n }]);\n \n-//# sourceMappingURL=data:application/json;charset=utf8;base64,\n+//# sourceMappingURL=data:application/json;charset=utf8;base64,\ndiff --git a/flink-runtime-web/web-dashboard/web/js/vendor.js b/flink-runtime-web/web-dashboard/web/js/vendor.js\nindex caf759714a3..5944923b708 100644\n--- a/flink-runtime-web/web-dashboard/web/js/vendor.js\n+++ b/flink-runtime-web/web-dashboard/web/js/vendor.js\n@@ -86578,6 +86578,359 @@ nv.models.sunburstChart = function() {\n \n nv.version = \"1.8.4\";\n })();\n+\n+'use strict';\n+\n+(function() {\n+\n+var global = this\n+  , addEventListener = 'addEventListener'\n+  , removeEventListener = 'removeEventListener'\n+  , getBoundingClientRect = 'getBoundingClientRect'\n+  , isIE8 = global.attachEvent && !global[addEventListener]\n+  , document = global.document\n+\n+  , calc = (function () {\n+        var el\n+          , prefixes = [\"\", \"-webkit-\", \"-moz-\", \"-o-\"]\n+\n+        for (var i = 0; i < prefixes.length; i++) {\n+            el = document.createElement('div')\n+            el.style.cssText = \"width:\" + prefixes[i] + \"calc(9px)\"\n+\n+            if (el.style.length) {\n+                return prefixes[i] + \"calc\"\n+            }\n+        }\n+    })()\n+  , elementOrSelector = function (el) {\n+        if (typeof el === 'string' || el instanceof String) {\n+            return document.querySelector(el)\n+        } else {\n+            return el\n+        }\n+    }\n+\n+  , Split = function (ids, options) {\n+    var dimension\n+      , i\n+      , clientDimension\n+      , clientAxis\n+      , position\n+      , gutterClass\n+      , paddingA\n+      , paddingB\n+      , pairs = []\n+\n+    // Set defaults\n+\n+    options = typeof options !== 'undefined' ?  options : {}\n+\n+    if (!options.gutterSize) options.gutterSize = 10\n+    if (!options.minSize) options.minSize = 100\n+    if (!options.snapOffset) options.snapOffset = 30\n+    if (!options.direction) options.direction = 'horizontal'\n+\n+    if (options.direction == 'horizontal') {\n+        dimension = 'width'\n+        clientDimension = 'clientWidth'\n+        clientAxis = 'clientX'\n+        position = 'left'\n+        gutterClass = 'gutter gutter-horizontal'\n+        paddingA = 'paddingLeft'\n+        paddingB = 'paddingRight'\n+        if (!options.cursor) options.cursor = 'ew-resize'\n+    } else if (options.direction == 'vertical') {\n+        dimension = 'height'\n+        clientDimension = 'clientHeight'\n+        clientAxis = 'clientY'\n+        position = 'top'\n+        gutterClass = 'gutter gutter-vertical'\n+        paddingA = 'paddingTop'\n+        paddingB = 'paddingBottom'\n+        if (!options.cursor) options.cursor = 'ns-resize'\n+    }\n+\n+    // Event listeners for drag events, bound to a pair object.\n+    // Calculate the pair's position and size when dragging starts.\n+    // Prevent selection on start and re-enable it when done.\n+\n+    var startDragging = function (e) {\n+            var self = this\n+              , a = self.a\n+              , b = self.b\n+\n+            if (!self.dragging && options.onDragStart) {\n+                options.onDragStart()\n+            }\n+\n+            e.preventDefault()\n+\n+            self.dragging = true\n+            self.move = drag.bind(self)\n+            self.stop = stopDragging.bind(self)\n+\n+            global[addEventListener]('mouseup', self.stop)\n+            global[addEventListener]('touchend', self.stop)\n+            global[addEventListener]('touchcancel', self.stop)\n+\n+            self.parent[addEventListener]('mousemove', self.move)\n+            self.parent[addEventListener]('touchmove', self.move)\n+\n+            a[addEventListener]('selectstart', preventSelection)\n+            a[addEventListener]('dragstart', preventSelection)\n+            b[addEventListener]('selectstart', preventSelection)\n+            b[addEventListener]('dragstart', preventSelection)\n+\n+            a.style.userSelect = 'none'\n+            a.style.webkitUserSelect = 'none'\n+            a.style.MozUserSelect = 'none'\n+            a.style.pointerEvents = 'none'\n+\n+            b.style.userSelect = 'none'\n+            b.style.webkitUserSelect = 'none'\n+            b.style.MozUserSelect = 'none'\n+            b.style.pointerEvents = 'none'\n+\n+            self.gutter.style.cursor = options.cursor\n+            self.parent.style.cursor = options.cursor\n+\n+            calculateSizes.call(self)\n+        }\n+      , stopDragging = function () {\n+            var self = this\n+              , a = self.a\n+              , b = self.b\n+\n+            if (self.dragging && options.onDragEnd) {\n+               ",
    "Add setterPrefix to Builder annotation": "diff --git a/src/core/lombok/Builder.java b/src/core/lombok/Builder.java\nindex dfa5ecb5..d7fe42a1 100644\n--- a/src/core/lombok/Builder.java\n+++ b/src/core/lombok/Builder.java\n@@ -153,6 +153,16 @@ public @interface Builder {\n \t * @return The builder class will be generated with this access modifier.\n \t */\n \tAccessLevel access() default lombok.AccessLevel.PUBLIC;\n+\n+\t/**\n+\t * Prefix to prepend to set methods in the generated builder class.  By default, generated methods to not include a\n+\t * prefix.  If this value populated, the first letter of the generated method name will be capitalized.\n+\t *\n+\t * For example, a method normally generated as {@code someField(String someField)} would instead be generated as {@code withSomeField(String someField)}\n+\t *\n+\t * @return The prefix to prepend to generated method names.\n+\t */\n+\tString setterPrefix() default \"\";\n \t\n \t/**\n \t * Put on a field (in case of {@code @Builder} on a type) or a parameter (for {@code @Builder} on a constructor or static method) to",
    "added usage of isInDayLightTime ( )": "diff --git a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java\nindex f78ae3b60..f86f7b8fc 100644\n--- a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java\n+++ b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java\n@@ -237,4 +237,42 @@ public abstract class AbstractFormatter implements JdtFormatter {\n \t\t}\n \t\tthrow new IllegalArgumentException(\"Value too big: \" + value);\n \t}\n+\n+\t/**\n+\t * Prints 4 digits and optional minus sign.\n+\t */\n+\tprotected static String printPad4(int value) {\n+\t\tchar[] result = new char[5];\n+\t\tint count = 0;\n+\n+\t\tif (value < 0) {\n+\t\t\tresult[count++] = '-';\n+\t\t\tvalue = -value;\n+\t\t}\n+\n+\t\tString str = Integer.toString(value);\n+\n+\t\tif (value < 10) {\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = str.charAt(0);\n+\t\t} else if (value < 100) {\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = str.charAt(0);\n+\t\t\tresult[count++] = str.charAt(1);\n+\t\t} else if (value < 1000) {\n+\t\t\tresult[count++] = '0';\n+\t\t\tresult[count++] = str.charAt(0);\n+\t\t\tresult[count++] = str.charAt(1);\n+\t\t\tresult[count++] = str.charAt(2);\n+\t\t} else {\n+\t\t\tresult[count++] = str.charAt(0);\n+\t\t\tresult[count++] = str.charAt(1);\n+\t\t\tresult[count++] = str.charAt(2);\n+\t\t\tresult[count++] = str.charAt(3);\n+\t\t}\n+\t\treturn new String(result, 0, count);\n+\t}\n }\ndiff --git a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java\nindex df0796de2..0b5146961 100644\n--- a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java\n+++ b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java\n@@ -4,7 +4,6 @@ package jodd.datetime.format;\n \n import jodd.datetime.DateTimeStamp;\n import jodd.datetime.JDateTime;\n-import jodd.format.Printf;\n import jodd.util.LocaleUtil;\n import jodd.util.DateFormatSymbolsEx;\n \n@@ -77,7 +76,7 @@ public class DefaultFormatter extends AbstractFormatter {\n \t\tDateFormatSymbolsEx dfs = LocaleUtil.getDateFormatSymbols(jdt.getLocale());\n \t\tswitch (patternIndex) {\n \t\t\tcase 0:\n-\t\t\t\treturn Printf.str(\"%~04i\", jdt.getYear());\n+\t\t\t\treturn printPad4(jdt.getYear());\n \t\t\tcase 1:\n \t\t\t\treturn print2(jdt.getMonth());\n \t\t\tcase 2:\n@@ -111,9 +110,15 @@ public class DefaultFormatter extends AbstractFormatter {\n \t\t\tcase 16:\n \t\t\t\treturn jdt.getEra() == 1 ? dfs.getAdEra() : dfs.getBcEra();\n \t\t\tcase 17:\n-\t\t\t\treturn jdt.getTimeZone().getDisplayName(false, TimeZone.LONG, jdt.getLocale());\n+\t\t\t\treturn jdt.getTimeZone().getDisplayName(\n+\t\t\t\t\t\tjdt.isInDaylightTime(),\n+\t\t\t\t\t\tTimeZone.LONG,\n+\t\t\t\t\t\tjdt.getLocale());\n \t\t\tcase 18:\n-\t\t\t\treturn jdt.getTimeZone().getDisplayName(false, TimeZone.SHORT, jdt.getLocale());\n+\t\t\t\treturn jdt.getTimeZone().getDisplayName(\n+\t\t\t\t\t\tjdt.isInDaylightTime(),\n+\t\t\t\t\t\tTimeZone.SHORT,\n+\t\t\t\t\t\tjdt.getLocale());\n \t\t\tdefault:\n \t\t\t\treturn new String(patterns[patternIndex]);\n \t\t}",
    "remove unnecessary code": "diff --git a/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java b/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java\nindex b2d6a8417c..c477cd76aa 100644\n--- a/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java\n+++ b/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java\n@@ -78,9 +78,6 @@ public class ContextInvocationInterceptor implements AroundInterceptor {\n             if (trace == null) {\n                 return;\n             }\n-            if (!trace.canSampled()) {\n-                return;\n-            }\n             final SpanEventRecorder recorder = trace.traceBlockBegin();\n             recorder.recordServiceType(JbossConstants.JBOSS_METHOD);\n         } catch (final Throwable th) {\n@@ -106,9 +103,6 @@ public class ContextInvocationInterceptor implements AroundInterceptor {\n             return;\n         }\n \n-        if (!trace.canSampled()) {\n-            return;\n-        }\n         try {\n             final SpanEventRecorder recorder = trace.currentSpanEventRecorder();\n             recorder.recordApi(methodDescriptor);\ndiff --git a/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java b/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java\nindex c3e0050d34..78961d8b9f 100644\n--- a/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java\n+++ b/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java\n@@ -11,9 +11,10 @@ import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScope;\n import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScopeInvocation;\n import com.navercorp.pinpoint.bootstrap.logging.PLogger;\n import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;\n-import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientPluginConfig;\n import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientConstants;\n+import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientPluginConfig;\n import com.navercorp.pinpoint.plugin.rabbitmq.client.field.accessor.RemoteAddressAccessor;\n+\n import com.rabbitmq.client.AMQP;\n import com.rabbitmq.client.Channel;\n import com.rabbitmq.client.Connection;\n@@ -66,17 +67,15 @@ public class ChannelBasicPublishInterceptor implements AroundInterceptor {\n             return;\n         }\n \n-        if (trace.canSampled()) {\n-            SpanEventRecorder recorder = trace.traceBlockBegin();\n-            recorder.recordServiceType(RabbitMQClientConstants.RABBITMQ_CLIENT);\n+        SpanEventRecorder recorder = trace.traceBlockBegin();\n+        recorder.recordServiceType(RabbitMQClientConstants.RABBITMQ_CLIENT);\n \n-            TraceId nextId = trace.getTraceId().getNextTraceId();\n+        TraceId nextId = trace.getTraceId().getNextTraceId();\n \n-            recorder.recordNextSpanId(nextId.getSpanId());\n+        recorder.recordNextSpanId(nextId.getSpanId());\n \n-            InterceptorScopeInvocation invocation = scope.getCurrentInvocation();\n-            invocation.setAttachment(nextId);\n-        }\n+        InterceptorScopeInvocation invocation = scope.getCurrentInvocation();\n+        invocation.setAttachment(nextId);\n     }\n \n     @Override\n@@ -90,7 +89,7 @@ public class ChannelBasicPublishInterceptor implements AroundInterceptor {\n         }\n \n         final Trace trace = traceContext.currentTraceObject();\n-        if (trace == null || !trace.canSampled()) {\n+        if (trace == null) {\n             return;\n         }\n ",
    "Send response also when config generation is 0 .": "diff --git a/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java b/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java\nindex f20b45cbe45..e57758f3eec 100644\n--- a/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java\n+++ b/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java\n@@ -49,7 +49,8 @@ class ClientUpdater {\n         for (DelayedResponse response : responseDelayQueue.toArray(new DelayedResponse[0])) {\n             JRTServerConfigRequest request = response.getRequest();\n             if (request.getConfigKey().equals(config.getKey())\n-                    && (config.getGeneration() >= request.getRequestGeneration())) {\n+                    // Generation 0 is special, used when returning empty sentinel config\n+                    && (config.getGeneration() >= request.getRequestGeneration() || config.getGeneration() == 0)) {\n                 if (delayedResponses.remove(response)) {\n                     found = true;\n                     log.log(LogLevel.DEBUG, () -> \"Call returnOkResponse for \" + config.getKey() + \",\" + config.getGeneration());\ndiff --git a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java\nindex fdf59a45841..25140afd4cc 100644\n--- a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java\n+++ b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java\n@@ -10,14 +10,13 @@ import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n \n-import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n \n /**\n  * @author hmusum\n  */\n public class ClientUpdaterTest {\n+\n     private MockRpcServer rpcServer;\n     private ConfigProxyStatistics statistics;\n     private DelayedResponses delayedResponses;\n@@ -37,53 +36,83 @@ public class ClientUpdaterTest {\n \n     @Test\n     public void basic() {\n-        assertThat(rpcServer.responses, is(0L));\n-\n         final RawConfig fooConfig = ProxyServerTest.fooConfig;\n-        clientUpdater.updateSubscribers(fooConfig);\n-\n-        // No delayed response, so not returned\n-        assertEquals(0, rpcServer.responses);\n+        configUpdatedSendResponse(fooConfig);\n+        // Nobody asked for the config, so no response sent\n+        assertSentResponses(0);\n \n-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));\n-        clientUpdater.updateSubscribers(fooConfig);\n-        assertEquals(1, rpcServer.responses);\n+        simulateClientRequestingConfig(fooConfig);\n+        configUpdatedSendResponse(fooConfig);\n+        assertSentResponses(1);\n \n-        // Will not find bar config in delayed responses\n+        // Nobody asked for 'bar' config\n         RawConfig barConfig = new RawConfig(new ConfigKey<>(\"bar\", \"id\", \"namespace\"), fooConfig.getDefMd5());\n-        clientUpdater.updateSubscribers(barConfig);\n-        assertEquals(1, rpcServer.responses);\n+        configUpdatedSendResponse(barConfig);\n+        assertSentResponses(1);\n     }\n \n     @Test\n     public void errorResponse() {\n-        assertThat(rpcServer.responses, is(0L));\n-\n-        clientUpdater.updateSubscribers(ProxyServerTest.errorConfig);\n-        assertThat(rpcServer.responses, is(0L));\n-        assertThat(statistics.errors(), is(1L));\n+        configUpdatedSendResponse(ProxyServerTest.errorConfig);\n+        assertSentResponses(0);\n+        assertEquals(1, statistics.errors());\n     }\n \n     @Test\n     public void it_does_not_send_old_config_in_response() {\n-        assertThat(rpcServer.responses, is(0L));\n+        RawConfig fooConfigOldGeneration = ProxyServerTest.fooConfig;\n+\n+        RawConfig fooConfig = createConfigWithNextConfigGeneration(fooConfigOldGeneration);\n+        configUpdatedSendResponse(fooConfig);\n+\n+        // Nobody asked for the config\n+        assertSentResponses(0);\n+\n+        simulateClientRequestingConfig(fooConfig);\n+        configUpdatedSendResponse(fooConfig);\n+        assertSentResponses(1);\n+\n+        simulateClientRequestingConfig(fooConfig);\n+        configUpdatedSendResponse(fooConfigOldGeneration);\n+        // Old config generation, so no response returned\n+        assertSentResponses(1);\n+    }\n \n+    @Test\n+    public void it_does_send_config_with_generation_0_in_response() {\n         RawConfig fooConfigOldGeneration = ProxyServerTest.fooConfig;\n \n-        final RawConfig fooConfig = ProxyServerTest.createConfigWithNextConfigGeneration(fooConfigOldGeneration, 0);\n-        clientUpdater.updateSubscribers(fooConfig);\n+        RawConfig fooConfig = createConfigWithNextConfigGeneration(fooConfigOldGeneration, 1);\n+\n+        simulateClientRequestingConfig(fooConfig);\n+        configUpdatedSendResponse(fooConfig);\n+        assertSentResponses(1);\n+\n+        RawConfig fooConfig2 = createConfigWithNextConfigGeneration(fooConfigOldGeneration, 0);\n+        simulateClientRequestingConfig(fooConfig2);\n+        configUpdatedSendResponse(fooConfig2);\n+        assertSentResponses(2);\n+    }\n+\n+    private void assertSentResponses(int expected) {\n+        assertEquals(expected, rpcServer.responses);\n+    }\n \n-        // No delayed response, so not returned\n-        assertEquals(0, rpcServer.responses);\n+    private void simulateClientRequestingConfig(RawConfig config) {\n+        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(config, -10L).getRequest())));\n+    }\n \n-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));\n-        clientUpdater.updateSubscribers(fooConfig);\n-        assertEquals(1, rpcServer.responses);\n+    private void configUpdatedSendResponse(RawConfig config) {\n+        clientUpdater.updateSubscribers(config);\n+    }\n+\n+    private RawConfig createConfigWithNextConfigGeneration(RawConfig config) {\n+        return createConfigWithNextConfigGeneration(config, config.getGeneration() + 1);\n+    }\n \n-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));\n-        clientUpdater.updateSubscribers(fooConfigOldGeneration);\n-        // Old config generation, so not returned\n-        assertEquals(1, rpcServer.responses);\n+    private RawConfig createConfigWithNextConfigGeneration(RawConfig config, long newConfigGeneration) {\n+        final int errorCode = 0;\n+        return ProxyServerTest.createConfigWithNextConfigGeneration(config, errorCode, ProxyServerTest.fooConfig.getPayload(), newConfigGeneration);\n     }\n \n }\ndiff --git a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java\nindex 513a5caa08d..22488da7c80 100644\n--- a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java\n+++ b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java\n@@ -1,7 +1,6 @@\n // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n package com.yahoo.vespa.config.proxy;\n \n-import com.yahoo.config.subscription.ConfigSourceSet;\n import com.yahoo.vespa.config.*;\n import com.yahoo.vespa.config.protocol.JRTServerConfigRequest;\n import com.yahoo.vespa.config.protocol.Payload;\n@@ -220,9 +219,13 @@ public class ProxyServerTest {\n     }\n \n     private static RawConfig createConfigWithNextConfigGeneration(RawConfig config, int errorCode, Payload payload) {\n+        return createConfigWithNextConfigGeneration(config, errorCode, payload, config.getGeneration() + 1);\n+    }\n+\n+    static RawConfig createConfigWithNextConfigGeneration(RawConfig config, int errorCode, Payload payload, long configGeneration) {\n         return new RawConfig(config.getKey(), config.getDefMd5(),\n                              payload, config.getConfigMd5(),\n-                             config.getGeneration() + 1, false,\n+                             configGeneration, false,\n                              errorCode, config.getDefContent(), Optional.empty());\n     }\n ",
    "Migrate filter file description to new site .": "diff --git a/docs/filter.rst b/docs/filter.rst\nnew file mode 100644\nindex 000000000..b0b5e3869\n--- /dev/null\n+++ b/docs/filter.rst\n@@ -0,0 +1,351 @@\n+Filter file\n+===========\n+\n+Filter files may be used to include or exclude bug reports for particular classes and methods. This chapter explains how to use filter files.\n+\n+Introduction to Filter Files\n+----------------------------\n+\n+Conceptually, a filter matches bug instances against a set of criteria. By defining a filter, you can select bug instances for special treatment;\n+for example, to exclude or include them in a report.\n+\n+A filter file is an XML document with a top-level ``FindBugsFilter`` element which has some number of Match elements as children.\n+Each Match element represents a predicate which is applied to generated bug instances.\n+Usually, a filter will be used to exclude bug instances. For example::\n+\n+    $ spotbugs -textui -exclude myExcludeFilter.xml myApp.jar\n+\n+However, a filter could also be used to select bug instances to specifically report::\n+\n+    $ spotbugs -textui -include myIncludeFilter.xml myApp.jar\n+\n+``Match`` elements contain children, which are conjuncts of the predicate.\n+In other words, each of the children must be ``true`` for the predicate to be ``true``.\n+\n+Types of Match clauses\n+----------------------\n+\n+<Bug>\n+^^^^^\n+\n+This element specifies a particular bug ``pattern or patterns to match. The ``pattern`` attribute is a comma-separated list of bug pattern types.\n+You can find the bug pattern types for particular warnings by looking at the output produced by the **-xml** output option (the type attribute of BugInstance elements), or from the :doc:`bugDescriptions`.\n+\n+For more coarse-grained matching, use ``code`` attribute. It takes a comma-separated list of bug abbreviations. For most-coarse grained matching use ``category`` attriute, that takes a comma separated list of bug category names: ``CORRECTNESS``, ``MT_CORRECTNESS``, ``BAD_PRACTICICE``, ``PERFORMANCE``, ``STYLE``.\n+\n+If more than one of the attributes mentioned above are specified on the same <Bug> element, all bug patterns that match either one of specified pattern names, or abreviations, or categories will be matched.\n+\n+As a backwards compatibility measure, <BugPattern> and <BugCode> elements may be used instead of <Bug> element. Each of these uses a name attribute for specifying accepted values list. Support for these elements may be removed in a future release.\n+\n+<Confidence>\n+^^^^^^^^^^^^\n+\n+This element matches warnings with a particular bug confidence. The ``value`` attribute should be an integer value: 1 to match high-confidence warnings, 2 to match normal-confidence warnings, or 3 to match low-confidence warnings. ``<Confidence>`` replaced ``<Priority>`` in 2.0.0 release.\n+\n+<Priority>\n+^^^^^^^^^^\n+\n+Same as ``<Confidence>``, exists for backward compatibility.\n+\n+<Rank>\n+^^^^^^\n+\n+This element matches warnings with a particular bug rank. The ``value`` attribute should be an integer value between 1 and 20, where 1 to 4 are scariest, 5 to 9 scary, 10 to 14 troubling, and 15 to 20 of concern bugs.\n+\n+<Package>\n+^^^^^^^^^\n+\n+This element matches warnings associated with classes within the package specified using ``name`` attribute. Nested packages are not included (along the lines of Java import statement). However matching multiple packages can be achieved easily using regex name match.\n+\n+<Class>\n+^^^^^^^\n+\n+This element matches warnings associated with a particular class. The ``name`` attribute is used to specify the exact or regex match pattern for the class name. The ``role`` attribute is the class role.\n+\n+As a backward compatibility measure, instead of element of this type, you can use ``class`` attribute on a ``Match`` element to specify exact an class name or ``classregex`` attribute to specify a regular expression to match the class name against.\n+\n+If the ``Match`` element contains neither a ``Class`` element, nor a ``class`` / ``classregex`` attribute, the predicate will apply to all classes. Such predicate is likely to match more bug instances than you want, unless it is refined further down with appropriate method or field predicates.\n+\n+<Source>\n+^^^^^^^^\n+\n+This element matches warnings associated with a particular source file. The ``name`` attribute is used to specify the exact or regex match pattern for the source file name.\n+\n+<Method>\n+^^^^^^^^\n+\n+This element specifies a method. The ``name`` attribute is used to specify the exact or regex match pattern for the method name. The ``params`` attribute is a comma-separated list of the types of the method's parameters. The ``returns`` attribute is the method's return type. The ``role`` attribute is the method role. In ``params`` and ``returns``, class names must be fully qualified. (E.g., ``\"java.lang.String\"`` instead of just ``\"String\"``.) If one of the latter attributes is specified the other is required for creating a method signature. Note that you can provide either ``name`` attribute or ``params`` and ``returns`` attributes or all three of them. This way you can provide various kinds of name and signature based matches.\n+\n+<Field>\n+^^^^^^^\n+\n+This element specifies a field. The ``name`` attribute is used to specify the exact or regex match pattern for the field name. You can also filter fields according to their signature - use ``type`` attribute to specify fully qualified type of the field. You can specify either or both of these attributes in order to perform name / signature based matches. The ``role`` attribute is the field role.\n+\n+<Local>\n+^^^^^^^\n+\n+This element specifies a local variable. The ``name`` attribute is used to specify the exact or regex match pattern for the local variable name. Local variables are variables defined within a method.\n+\n+<Type>\n+^^^^^^\n+\n+This element matches warnings associated with a particular type. The ``descriptor`` attribute is used to specify the exact or regex match pattern for type descriptor. If the descriptor starts with the ~ character the rest of attribute content is interpreted as a Java regular expression. The ``role`` attribute is the class role, and the ``typeParameters`` is the type parameters. Both of ``role`` and ``typeParameters`` are optional attributes.\n+\n+<Or>\n+^^^^\n+\n+This element combines ``Match`` clauses as disjuncts. I.e., you can put two ``Method`` elements in an ``Or`` clause in order to match either method.\n+\n+<And>\n+^^^^^\n+\n+This element combines ``Match`` clauses which both must evaluate to ``true``. I.e., you can put ``Bug`` and ``Confidence`` elements in an ``And`` clause in order to match specific bugs with given confidence only.\n+\n+<Not>\n+^^^^^\n+\n+This element inverts the included child ``Match``. I.e., you can put a ``Bug`` element in a ``Not`` clause in order to match any bug excluding the given one.\n+\n+Java element name matching\n+--------------------------\n+\n+If the ``name`` attribute of ``Class``, ``Source``, ``Method`` or ``Field`` starts with the ``~`` character the rest of attribute content is interpreted as a Java regular expression that is matched against the names of the Java element in question.\n+\n+Note that the pattern is matched against whole element name and therefore ``.*`` clauses need to be used at pattern beginning and/or end to perform substring matching.\n+\n+See `java.util.regex.Pattern <https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html>`_ documentation for pattern syntax.\n+\n+Caveats\n+-------\n+\n+``Match`` clauses can only match information that is actually contained in the bug instances.\n+Every bug instance has a class, so in general, excluding bugs by class will work.\n+\n+Some bug instances have two (or more) classes.\n+For example, the DE (dropped exception) bugs report both the class containing the method where the dropped exception happens, and the class which represents the type of the dropped exception.\n+Only the *first* (primary) class is matched against ``Match`` clauses.\n+So, for example, if you want to suppress IC (initialization circularity) reports for classes \"com.foobar.A\" and \"com.foobar.B\", you would use two ``Match`` clauses:\n+\n+.. code:: xml\n+\n+  <Match>\n+     <Class name=\"com.foobar.A\" />\n+     <Bug code=\"IC\" />\n+  </Match>\n+  <Match>\n+     <Class name=\"com.foobar.B\" />\n+     <Bug code=\"IC\" />\n+  </Match>\n+\n+By explicitly matching both classes, you ensure that the IC bug instance will be matched regardless of which class involved in the circularity happens to be listed first in the bug instance. (Of course, this approach might accidentally supress circularities involving \"com.foobar.A\" or \"com.foobar.B\" and a third class.)\n+\n+Many kinds of bugs report what method they occur in. For those bug instances, you can put Method clauses in the Match element and they should work as expected.\n+\n+Examples\n+--------\n+\n+Match all bug reports for a class\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Class name=\"com.foobar.MyClass\" />\n+  </Match>\n+\n+Match certain tests from a class by specifying their abbreviations\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Class name=\"com.foobar.MyClass\"/ >\n+    <Bug code=\"DE,UrF,SIC\" />\n+  </Match>\n+\n+Match certain tests from all classes by specifying their abbreviations\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Bug code=\"DE,UrF,SIC\" />\n+  </Match>\n+\n+Match certain tests from all classes by specifying their category\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Bug category=\"PERFORMANCE\" />\n+  </Match>\n+\n+Match bug types from specified methods of a class by their abbreviations\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Class name=\"com.foobar.MyClass\" />\n+    <Or>\n+      <Method name=\"frob\" params=\"int,java.lang.String\" returns=\"void\" />\n+      <Method name=\"blat\" params=\"\" returns=\"boolean\" />\n+    </Or>\n+    <Bug code=\"DC\" />\n+  </Match>\n+\n+Match a particular bug pattern in a particular method\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <!-- A method with an open stream false positive. -->\n+  <Match>\n+    <Class name=\"com.foobar.MyClass\" />\n+    <Method name=\"writeDataToFile\" />\n+    <Bug pattern=\"OS_OPEN_STREAM\" />\n+  </Match>\n+\n+Match a particular bug pattern with a given priority in a particular method\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <!-- A method with a dead local store false positive (medium priority). -->\n+  <Match>\n+    <Class name=\"com.foobar.MyClass\" />\n+    <Method name=\"someMethod\" />\n+    <Bug pattern=\"DLS_DEAD_LOCAL_STORE\" />\n+    <Priority value=\"2\" />\n+  </Match>\n+\n+Match minor bugs introduced by AspectJ compiler (you are probably not interested in these unless you are an AspectJ developer)\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <Match>\n+    <Class name=\"~.*\\$AjcClosure\\d+\" />\n+    <Bug pattern=\"DLS_DEAD_LOCAL_STORE\" />\n+    <Method name=\"run\" />\n+  </Match>\n+  <Match>\n+    <Bug pattern=\"UUF_UNUSED_FIELD\" />\n+    <Field name=\"~ajc\\$.*\" />\n+  </Match>\n+\n+Match bugs in specific parts of the code base\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <!-- match unused fields warnings in Messages classes in all packages -->\n+  <Match>\n+    <Class name=\"~.*\\.Messages\" />\n+    <Bug code=\"UUF\" />\n+  </Match>\n+  <!-- match mutable statics warnings in all internal packages -->\n+  <Match>\n+    <Package name=\"~.*\\.internal\" />\n+    <Bug code=\"MS\" />\n+  </Match>\n+  <!-- match anonymoous inner classes warnings in ui package hierarchy -->\n+  <Match>\n+    <Package name=\"~com\\.foobar\\.fooproject\\.ui.*\" />\n+    <Bug pattern=\"SIC_INNER_SHOULD_BE_STATIC_ANON\" />\n+  </Match>\n+\n+Match bugs on fields or methods with specific signatures\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <!-- match System.exit(...) usage warnings in void main(String[]) methods in all classes -->\n+  <Match>\n+    <Method returns=\"void\" name=\"main\" params=\"java.lang.String[]\" />\n+    <Bug pattern=\"DM_EXIT\" />\n+  </Match>\n+  <!-- match UuF warnings on fields of type com.foobar.DebugInfo on all classes -->\n+  <Match>\n+    <Field type=\"com.foobar.DebugInfo\" />\n+    <Bug code=\"UuF\" />\n+  </Match>\n+\n+Match bugs using the Not filter operator\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <!-- ignore all bugs in test classes, except for those bugs specifically relating to JUnit tests -->\n+  <!-- i.e. filter bug if ( classIsJUnitTest && ! bugIsRelatedToJUnit ) -->\n+  <Match>\n+    <!-- the Match filter is equivalent to a logical 'And' -->\n+\n+    <Class name=\"~.*\\.*Test\" />\n+    <!-- test classes are suffixed by 'Test' -->\n+\n+    <Not>\n+        <Bug code=\"IJU\" /> <!-- 'IJU' is the code for bugs related to JUnit test code -->\n+    </Not>\n+  </Match>\n+\n+Full exclusion filter file to match all classes generated from Groovy source files\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. code:: xml\n+\n+  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+  <FindBugsFilter>\n+  <Match>\n+    <Source name=\"~.*\\.groovy\" />\n+  </Match>\n+  </FindBugsFilter>\n+\n+Complete Example\n+----------------\n+\n+.. code:: xml\n+\n+  <FindBugsFilter>\n+    <Match>\n+      <Class name=\"com.foobar.ClassNotToBeAnalyzed\" />\n+    </Match>\n+\n+    <Match>\n+      <Class name=\"com.foobar.ClassWithSomeBugsMatched\" />\n+      <Bug code=\"DE,UrF,SIC\" />\n+    </Match>\n+\n+    <!-- Match all XYZ violations. -->\n+    <Match>\n+      <Bug code=\"XYZ\" />\n+    </Match>\n+\n+    <!-- Match all doublecheck violations in these methods of \"AnotherClass\". -->\n+    <Match>\n+      <Class name=\"com.foobar.AnotherClass\" />\n+      <Or>\n+        <Method name=\"nonOverloadedMethod\" />\n+        <Method name=\"frob\" params=\"int,java.lang.String\" returns=\"void\" />\n+        <Method name=\"blat\" params=\"\" returns=\"boolean\" />\n+      </Or>\n+      <Bug code=\"DC\" />\n+    </Match>\n+\n+    <!-- A method with a dead local store false positive (medium priority). -->\n+    <Match>\n+      <Class name=\"com.foobar.MyClass\" />\n+      <Method name=\"someMethod\" />\n+      <Bug pattern=\"DLS_DEAD_LOCAL_STORE\" />\n+      <Priority value=\"2\" />\n+    </Match>\n+\n+    <!-- All bugs in test classes, except for JUnit-specific bugs -->\n+    <Match>\n+    <Class name=\"~.*\\.*Test\" />\n+    <Not>\n+      <Bug code=\"IJU\" />\n+    </Not>\n+    </Match>\n+  </FindBugsFilter>\ndiff --git a/docs/index.rst b/docs/index.rst\nindex 5a32cbef1..80bafb4a8 100644\n--- a/docs/index.rst\n+++ b/docs/index.rst\n@@ -25,4 +25,5 @@ Contents\n \n    introduction\n    installing\n+   filter\n    migration\ndiff --git a/docs/locale/ja/LC_MESSAGES/filter.po b/docs/locale/ja/LC_MESSAGES/filter.po\nnew file mode 100644\nindex 000000000..0b18dd14f\n--- /dev/null\n+++ b/docs/locale/ja/LC_MESSAGES/filter.po\n@@ -0,0 +1,434 @@\n+# SOME DESCRIPTIVE TITLE.\n+# Copyright (C) 2016-2017, spotbugs community\n+# This file is distributed under the same license as the spotbugs package.\n+# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.\n+#\n+#, fuzzy\n+msgid \"\"\n+msgstr \"\"\n+\"Project-Id-Version: spotbugs 3.1\\n\"\n+\"Report-Msgid-Bugs-To: \\n\"\n+\"POT-Creation-Date: 2017-05-12 17:29+0000\\n\"\n+\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n+\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n+\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"MIME-Version: 1.0\\n\"\n+\"Content-Type: text/plain; charset=utf-8\\n\"\n+\"Content-Transfer-Encoding: 8bit\\n\"\n+\"Generated-By: Babel 1.3\\n\"\n+\n+#: ../../filter.rst:2\n+msgid \"Filter file\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:4\n+msgid \"\"\n+\"Filter files may be used to include or exclude bug reports for particular\"\n+\" classes and methods. This chapter explains how to use filter files.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:7\n+msgid \"Introduction to Filter Files\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:9\n+msgid \"\"\n+\"Conceptually, a filter matches bug instances against a set of criteria. \"\n+\"By defining a filter, you can select bug instances for special treatment;\"\n+\" for example, to exclude or include them in a report.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:12\n+msgid \"\"\n+\"A filter file is an XML document with a top-level ``FindBugsFilter`` \"\n+\"element which has some number of Match elements as children. Each Match \"\n+\"element represents a predicate which is applied to generated bug \"\n+\"instances. Usually, a filter will be used to exclude bug instances. For \"\n+\"example::\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:18\n+msgid \"\"\n+\"However, a filter could also be used to select bug instances to \"\n+\"specifically report::\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:22\n+msgid \"\"\n+\"``Match`` elements contain children, which are conjuncts of the \"\n+\"predicate. In other words, each of the children must be ``true`` for the \"\n+\"predicate to be ``true``.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:26\n+msgid \"Types of Match clauses\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:29\n+msgid \"<Bug>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:31\n+msgid \"\"\n+\"This element specifies a particular bug ``pattern or patterns to match. \"\n+\"The ``pattern`` attribute is a comma-separated list of bug pattern types.\"\n+\" You can find the bug pattern types for particular warnings by looking at\"\n+\" the output produced by the **-xml** output option (the type attribute of\"\n+\" BugInstance elements), or from the :doc:`bugDescriptions`.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:34\n+msgid \"\"\n+\"For more coarse-grained matching, use ``code`` attribute. It takes a \"\n+\"comma-separated list of bug abbreviations. For most-coarse grained \"\n+\"matching use ``category`` attriute, that takes a comma separated list of \"\n+\"bug category names: ``CORRECTNESS``, ``MT_CORRECTNESS``, \"\n+\"``BAD_PRACTICICE``, ``PERFORMANCE``, ``STYLE``.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:36\n+msgid \"\"\n+\"If more than one of the attributes mentioned above are specified on the \"\n+\"same <Bug> element, all bug patterns that match either one of specified \"\n+\"pattern names, or abreviations, or categories will be matched.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:38\n+msgid \"\"\n+\"As a backwards compatibility measure, <BugPattern> and <BugCode> elements\"\n+\" may be used instead of <Bug> element. Each of these uses a name \"\n+\"attribute for specifying accepted values list. Support for these elements\"\n+\" may be removed in a future release.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:41\n+msgid \"<Confidence>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:43\n+msgid \"\"\n+\"This element matches warnings with a particular bug confidence. The \"\n+\"``value`` attribute should be an integer value: 1 to match high-\"\n+\"confidence warnings, 2 to match normal-confidence warnings, or 3 to match\"\n+\" low-confidence warnings. ``<Confidence>`` replaced ``<Priority>`` in \"\n+\"2.0.0 release.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:46\n+msgid \"<Priority>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:48\n+msgid \"Same as ``<Confidence>``, exists for backward compatibility.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:51\n+msgid \"<Rank>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:53\n+msgid \"\"\n+\"This element matches warnings with a particular bug rank. The ``value`` \"\n+\"attribute should be an integer value between 1 and 20, where 1 to 4 are \"\n+\"scariest, 5 to 9 scary, 10 to 14 troubling, and 15 to 20 of concern bugs.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:56\n+msgid \"<Package>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:58\n+msgid \"\"\n+\"This element matches warnings associated with classes within the package \"\n+\"specified using ``name`` attribute. Nested packages are not included \"\n+\"(along the lines of Java import statement). However matching multiple \"\n+\"packages can be achieved easily using regex name match.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:61\n+msgid \"<Class>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:63\n+msgid \"\"\n+\"This element matches warnings associated with a particular class. The \"\n+\"``name`` attribute is used to specify the exact or regex match pattern \"\n+\"for the class name. The ``role`` attribute is the class role.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:65\n+msgid \"\"\n+\"As a backward compatibility measure, instead of element of this type, you\"\n+\" can use ``class`` attribute on a ``Match`` element to specify exact an \"\n+\"class name or ``classregex`` attribute to specify a regular expression to\"\n+\" match the class name against.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:67\n+msgid \"\"\n+\"If the ``Match`` element contains neither a ``Class`` element, nor a \"\n+\"``class`` / ``classregex`` attribute, the predicate will apply to all \"\n+\"classes. Such predicate is likely to match more bug instances than you \"\n+\"want, unless it is refined further down with appropriate method or field \"\n+\"predicates.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:70\n+msgid \"<Source>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:72\n+msgid \"\"\n+\"This element matches warnings associated with a particular source file. \"\n+\"The ``name`` attribute is used to specify the exact or regex match \"\n+\"pattern for the source file name.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:75\n+msgid \"<Method>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:77\n+msgid \"\"\n+\"This element specifies a method. The ``name`` attribute is used to \"\n+\"specify the exact or regex match pattern for the method name. The \"\n+\"``params`` attribute is a comma-separated list of the types of the \"\n+\"method's parameters. The ``returns`` attribute is the method's return \"\n+\"type. The ``role`` attribute is the method role. In ``params`` and \"\n+\"``returns``, class names must be fully qualified. (E.g., \"\n+\"``\\\"java.lang.String\\\"`` instead of just ``\\\"String\\\"``.) If one of the \"\n+\"latter attributes is specified the other is required for creating a \"\n+\"method signature. Note that you can provide either ``name`` attribute or \"\n+\"``params`` and ``returns`` attributes or all three of them. This way you \"\n+\"can provide various kinds of name and signature based matches.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:80\n+msgid \"<Field>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:82\n+msgid \"\"\n+\"This element specifies a field. The ``name`` attribute is used to specify\"\n+\" the exact or regex match pattern for the field name. You can also filter\"\n+\" fields according to their signature - use ``type`` attribute to specify \"\n+\"fully qualified type of the field. You can specify either or both of \"\n+\"these attributes in order to perform name / signature based matches. The \"\n+\"``role`` attribute is the field role.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:85\n+msgid \"<Local>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:87\n+msgid \"\"\n+\"This element specifies a local variable. The ``name`` attribute is used \"\n+\"to specify the exact or regex match pattern for the local variable name. \"\n+\"Local variables are variables defined within a method.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:90\n+msgid \"<Type>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:92\n+msgid \"\"\n+\"This element matches warnings associated with a particular type. The \"\n+\"``descriptor`` attribute is used to specify the exact or regex match \"\n+\"pattern for type descriptor. If the descriptor starts with the ~ \"\n+\"character the rest of attribute content is interpreted as a Java regular \"\n+\"expression. The ``role`` attribute is the class role, and the \"\n+\"``typeParameters`` is the type parameters. Both of ``role`` and \"\n+\"``typeParameters`` are optional attributes.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:95\n+msgid \"<Or>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:97\n+msgid \"\"\n+\"This element combines ``Match`` clauses as disjuncts. I.e., you can put \"\n+\"two ``Method`` elements in an ``Or`` clause in order to match either \"\n+\"method.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:100\n+msgid \"<And>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:102\n+msgid \"\"\n+\"This element combines ``Match`` clauses which both must evaluate to \"\n+\"``true``. I.e., you can put ``Bug`` and ``Confidence`` elements in an \"\n+\"``And`` clause in order to match specific bugs with given confidence \"\n+\"only.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:105\n+msgid \"<Not>\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:107\n+msgid \"\"\n+\"This element inverts the included child ``Match``. I.e., you can put a \"\n+\"``Bug`` element in a ``Not`` clause in order to match any bug excluding \"\n+\"the given one.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:110\n+msgid \"Java element name matching\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:112\n+msgid \"\"\n+\"If the ``name`` attribute of ``Class``, ``Source``, ``Method`` or \"\n+\"``Field`` starts with the ``~`` character the rest of attribute content \"\n+\"is interpreted as a Java regular expression that is matched against the \"\n+\"names of the Java element in question.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:114\n+msgid \"\"\n+\"Note that the pattern is matched against whole element name and therefore\"\n+\" ``.*`` clauses need to be used at pattern beginning and/or end to \"\n+\"perform substring matching.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:116\n+msgid \"\"\n+\"See `java.util.regex.Pattern \"\n+\"<https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html>`_\"\n+\" documentation for pattern syntax.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:119\n+msgid \"Caveats\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:121\n+msgid \"\"\n+\"``Match`` clauses can only match information that is actually contained \"\n+\"in the bug instances. Every bug instance has a class, so in general, \"\n+\"excluding bugs by class will work.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:124\n+msgid \"\"\n+\"Some bug instances have two (or more) classes. For example, the DE \"\n+\"(dropped exception) bugs report both the class containing the method \"\n+\"where the dropped exception happens, and the class which represents the \"\n+\"type of the dropped exception. Only the *first* (primary) class is \"\n+\"matched against ``Match`` clauses. So, for example, if you want to \"\n+\"suppress IC (initialization circularity) reports for classes \"\n+\"\\\"com.foobar.A\\\" and \\\"com.foobar.B\\\", you would use two ``Match`` \"\n+\"clauses:\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:140\n+msgid \"\"\n+\"By explicitly matching both classes, you ensure that the IC bug instance \"\n+\"will be matched regardless of which class involved in the circularity \"\n+\"happens to be listed first in the bug instance. (Of course, this approach\"\n+\" might accidentally supress circularities involving \\\"com.foobar.A\\\" or \"\n+\"\\\"com.foobar.B\\\" and a third class.)\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:142\n+msgid \"\"\n+\"Many kinds of bugs report what method they occur in. For those bug \"\n+\"instances, you can put Method clauses in the Match element and they \"\n+\"should work as expected.\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:145\n+msgid \"Examples\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:148\n+msgid \"Match all bug reports for a class\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:157\n+msgid \"Match certain tests from a class by specifying their abbreviations\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:167\n+msgid \"Match certain tests from all classes by specifying their abbreviations\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:176\n+msgid \"Match certain tests from all classes by specifying their category\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:185\n+msgid \"Match bug types from specified methods of a class by their abbreviations\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:199\n+msgid \"Match a particular bug pattern in a particular method\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:211\n+msgid \"\"\n+\"Match a particular bug pattern with a given priority in a particular \"\n+\"method\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:224\n+msgid \"\"\n+\"Match minor bugs introduced by AspectJ compiler (you are probably not \"\n+\"interested in these unless you are an AspectJ developer)\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:239\n+msgid \"Match bugs in specific parts of the code base\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:260\n+msgid \"Match bugs on fields or methods with specific signatures\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:276\n+msgid \"Match bugs using the Not filter operator\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:294\n+msgid \"\"\n+\"Full exclusion filter file to match all classes generated from Groovy \"\n+\"source files\"\n+msgstr \"\"\n+\n+#: ../../filter.rst:306\n+msgid \"Complete Example\"\n+msgstr \"\"\n+\n+#~ msgid \"\"\n+#~ msgstr \"\"\n+\n+#~ msgid \"<Match>\"\n+#~ msgstr \"\"\n+\n+#~ msgid \"<Class name=\\\"com.foobar.A\\\" /> <Bug code=\\\"IC\\\" />\"\n+#~ msgstr \"\"\n+\n+#~ msgid \"</Match>\"\n+#~ msgstr \"\"\n+\n+#~ msgid \"<Class name=\\\"com.foobar.B\\\" /> <Bug code=\\\"IC\\\" />\"\n+#~ msgstr \"\"\n+\n+#~ msgid \"\"\n+#~ \"This element specifies a particular bug\"\n+#~ \" ``pattern or patterns to match. The\"\n+#~ \" ``pattern`` attribute is a comma-\"\n+#~ \"separated list of bug pattern types. \"\n+#~ \"You can find the bug pattern types\"\n+#~ \" for particular warnings by looking \"\n+#~ \"at the output produced by the \"\n+#~ \"**-xml** output option (the type \"\n+#~ \"attribute of BugInstance elements), or \"\n+#~ \"from the :doc:`bugDescriotions`.\"\n+#~ msgstr \"\"\n+\ndiff --git a/spotbugs/src/doc/FilterFile.txt b/spotbugs/src/doc/FilterFile.txt\nindex c571e0fce..b4499f41d 100644\n--- a/spotbugs/src/doc/FilterFile.txt\n+++ b/spotbugs/src/doc/FilterFile.txt\n@@ -1,125 +1 @@\n-=============\n-How it works:\n-=============\n-\n-A filter file is an XML file with a top-level \"FindBugsFilter\" element\n-which has some number of \"Match\" elements as children.  Each Match\n-element represents a predicate which is applied to generated bug instances.\n-Usually, a filter will be used to exclude bug instances.  For example:\n-\n-  findbugs -textui -exclude myExcludeFilter.xml myApp.jar\n-\n-However, a filter could also be used to select bug instances to specifically\n-report:\n-\n-  findbugs -textui -include myIncludeFilter.xml myApp.jar\n-\n-Match has \"class\" and \"classregex\" attributes specifying what class or classes\n-the predicate applies to.\n-\n-Match contains children, which are conjuncts of the predicate.\n-(I.e., each of the children must be true for the predicate to be true.)\n-\n-=======================\n-Types of Match clauses:\n-=======================\n-\n-   <BugCode> specifies abbreviations of bugs.\n-   The \"name\" attribute is a comma-separated list of abbreviations.\n-\n-   <Method> specifies a method.  The \"name\" attribute is the name\n-   of the method.  The \"params\" attribute is a comma separated list\n-   of the types of the method's parameters.  The \"returns\" attribute is\n-   the method's return type.  In \"params\" and \"returns\", class names\n-   must be fully qualified.  (E.g., \"java.lang.String\" instead of just\n-   \"String\".)  Note that \"params\" and \"returns\" are optional; you can\n-   just specify \"name\", and the clause will match all methods with\n-   that name.  However, if you specify either \"params\" or \"returns\",\n-   you must specify both of them.\n-\n-   <Or> combines Match clauses as disjuncts.  I.e., you can put two\n-   \"Method\" elements in an Or clause in order match either method.\n-\n-========\n-Caveats:\n-========\n-\n-Match clauses can only match information that is actually contained in the\n-bug instances.  Every bug instance has a class, so in general, excluding\n-bugs by class will work.\n-\n-Some bug instances have two classes.  For example, the DE (dropped exception)\n-bugs report both the class containing the method where the dropped exception\n-happens, and the class which represents the type of the dropped exception.\n-Only the FIRST (primary) class is matched against Match clauses.\n-So, for example, if you want to suppress IC (initialization circularity)\n-reports for classes \"com.foobar.A\" and \"com.foobar.B\", you would use\n-two Match clauses:\n-\n-   <Match class=\"com.foobar.A\">\n-      <BugCode name=\"IC\" />\n-   </Match>\n-\n-   <Match class=\"com.foobar.B\">\n-      <BugCode name=\"IC\" />\n-   </Match>\n-\n-Many kinds of bugs report what method they occur in.  For those bug instances,\n-you can put Method clauses in the Match element and they should work\n-as expected.\n-\n-=========\n-Examples:\n-=========\n-\n-  1. Match all bug reports for a class.\n-\n-     <Match class=\"com.foobar.MyClass\" />\n-\n-  2. Match certain tests from a class.\n-     <Match class=\"com.foobar.MyClass\">\n-       <BugCode name=\"DE,UrF,SIC\" />\n-     </Match>\n-\n-  3. Match certain tests from all classes.\n-\n-     <Match classregex=\".*\" >\n-       <BugCode name=\"DE,UrF,SIC\" />\n-     </Match>\n-\n-  4. Match bug types from specified methods of a class.\n-\n-     <Match class=\"com.foobar.MyClass\">\n-       <Or>\n-         <Method name=\"frob\" params=\"int,java.lang.String\" returns=\"void\" />\n-         <Method name=\"blat\" params=\"\" returns=\"boolean\" />\n-       </Or>\n-       <BugCode name=\"DC\" />\n-     </Match>\n-\n-=================\n-Complete Example:\n-=================\n-\n-<FindBugsFilter>\n-     <Match class=\"com.foobar.ClassNotToBeAnalyzed\" />\n-\n-     <Match class=\"com.foobar.ClassWithSomeBugsMatched\">\n-       <BugCode name=\"DE,UrF,SIC\" />\n-     </Match>\n-\n-     <!-- Match all XYZ violations. -->\n-     <Match classregex=\".*\" >\n-       <BugCode name=\"XYZ\" />\n-     </Match>\n-\n-     <!-- Match all doublecheck violations in these methods of \"AnotherClass\". -->\n-     <Match class=\"com.foobar.AnotherClass\">\n-       <Or>\n-         <Method name=\"nonOverloadedMethod\" />\n-         <Method name=\"frob\" params=\"int,java.lang.String\" returns=\"void\" />\n-         <Method name=\"blat\" params=\"\" returns=\"boolean\" />\n-       </Or>\n-       <BugCode name=\"DC\" />\n-     </Match>\n-</FindBugsFilter>\n+Refer docs/filter.rst instead of this file, or visit http://spotbugs.readthedocs.io/en/latest/filter.html to see generated site.",
    "Remove unneeded reference to DiscoveryService which potentially causes circular references": "diff --git a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java\nindex bd9eb0f3674..8cdf2bd3f52 100644\n--- a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java\n+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java\n@@ -86,7 +86,6 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen\n     private final ClusterService clusterService;\n     private AllocationService allocationService;\n     private final ClusterName clusterName;\n-    private final DiscoveryService discoveryService;\n     private final DiscoveryNodeService discoveryNodeService;\n     private final DiscoverySettings discoverySettings;\n     private final ZenPingService pingService;\n@@ -130,14 +129,13 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen\n     @Inject\n     public ZenDiscovery(Settings settings, ClusterName clusterName, ThreadPool threadPool,\n                         TransportService transportService, ClusterService clusterService, NodeSettingsService nodeSettingsService,\n-                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version, DiscoverySettings discoverySettings,\n-                        DiscoveryService discoveryService) {\n+                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version,\n+                        DiscoverySettings discoverySettings) {\n         super(settings);\n         this.clusterName = clusterName;\n         this.threadPool = threadPool;\n         this.clusterService = clusterService;\n         this.transportService = transportService;\n-        this.discoveryService = discoveryService;\n         this.discoveryNodeService = discoveryNodeService;\n         this.discoverySettings = discoverySettings;\n         this.pingService = pingService;\n@@ -649,7 +647,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen\n \n \n                 assert newClusterState.nodes().masterNode() != null : \"received a cluster state without a master\";\n-                assert !newClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : \"received a cluster state with a master block\";\n+                assert !newClusterState.blocks().hasGlobalBlock(discoverySettings.getNoMasterBlock()) : \"received a cluster state with a master block\";\n \n                 clusterService.submitStateUpdateTask(\"zen-disco-receive(from master [\" + newClusterState.nodes().masterNode() + \"])\", Priority.URGENT, new ProcessedClusterStateNonMasterUpdateTask() {\n                     @Override\n@@ -716,7 +714,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen\n                             masterFD.restart(latestDiscoNodes.masterNode(), \"new cluster state received and we",
    "Implementing ability to set an arbitrary platform capability even if it can \\' t be converted to Platform enum in DesiredCapability constructor from Map .": "diff --git a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java\nindex adfb22c587..3271415ac9 100644\n--- a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java\n+++ b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java\n@@ -65,7 +65,11 @@ public DesiredCapabilities(Map<String, ?> rawMap) {\n     capabilities.putAll(rawMap);\n     Object value = capabilities.get(PLATFORM);\n     if (value instanceof String) {\n-      capabilities.put(PLATFORM, Platform.valueOf((String) value));\n+      try {\n+        capabilities.put(PLATFORM, Platform.fromString((String) value));\n+      } catch (WebDriverException ex) {\n+        // unrecognized platform, fallback to string\n+      }\n     }\n   }\n \ndiff --git a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java\nindex 0177b6e262..9855b2e4ec 100644\n--- a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java\n+++ b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java\n@@ -111,4 +111,14 @@ public void shouldNotAutomaticallyConvertPlatformIfItNotConvertible() {\n     assertEquals(caps.getCapability(CapabilityType.PLATFORM), \"FreeBSD\");\n   }\n \n+  @Test\n+  public void shouldNotAutomaticallyConvertPlatformIfItNotConvertibleInConstructor() {\n+    Map<String, Object> capabilitiesMap = new HashMap<String, Object>() {{\n+      put(CapabilityType.PLATFORM, \"FreeBSD\");\n+    }};\n+\n+    DesiredCapabilities caps = new DesiredCapabilities(capabilitiesMap);\n+    assertEquals(caps.getCapability(CapabilityType.PLATFORM), \"FreeBSD\");\n+  }\n+\n }",
    "Add examples for Status": "diff --git a/twitter4j-core/src/main/java/twitter4j/Status.java b/twitter4j-core/src/main/java/twitter4j/Status.java\nindex 97825f6e..7db214e7 100644\n--- a/twitter4j-core/src/main/java/twitter4j/Status.java\n+++ b/twitter4j-core/src/main/java/twitter4j/Status.java\n@@ -20,6 +20,7 @@ import java.util.Date;\n \n /**\n  * A data interface representing one single status of a user.\n+ * (e.g. https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid)\n  *\n  * @author Yusuke Yamamoto - yusuke at mac.com\n  */\n@@ -36,21 +37,21 @@ public interface Status extends Comparable<Status>, TwitterResponse,\n     /**\n      * Returns the id of the status\n      *\n-     * @return the id\n+     * @return the id (e.g. 210462857140252672)\n      */\n     long getId();\n \n     /**\n      * Returns the text of the status\n      *\n-     * @return the text\n+     * @return the text (e.g. Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC)\n      */\n     String getText();\n \n     /**\n      * Returns the source\n      *\n-     * @return the source\n+     * @return the source (e.g. &lt;a href=\"http://twitter.com\" rel=\"nofollow\"&gt;Twitter Web Client&lt;/a&gt;)\n      * @since Twitter4J 1.0.4\n      */\n     String getSource();\n@@ -193,7 +194,7 @@ public interface Status extends Comparable<Status>, TwitterResponse,\n     /**\n      * Returns the lang of the status text if available.\n      *\n-     * @return two-letter iso language code\n+     * @return two-letter iso language code (e.g. en)\n      * @since Twitter4J 3.0.6\n      */\n     String getLang();",
    "Add Benchmark to partial dejetification .": "diff --git a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt\nindex 25b8e8b50b3..ec84188c299 100644\n--- a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt\n+++ b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt\n@@ -30,6 +30,7 @@ val archivesToDejetify = listOf(\n     \"m2repository/androidx/arch/**\",\n     \"m2repository/androidx/arch/core/**\",\n     \"m2repository/androidx/asynclayoutinflater/**\",\n+    \"m2repository/androidx/benchmark/**\",\n     \"m2repository/androidx/biometric/**\",\n     \"m2repository/androidx/browser/**\",\n     \"m2repository/androidx/camera/**\",\ndiff --git a/jetifier/jetifier/migration.config b/jetifier/jetifier/migration.config\nindex 03e7d2abd62..16ac67b77aa 100644\n--- a/jetifier/jetifier/migration.config\n+++ b/jetifier/jetifier/migration.config\n@@ -613,6 +613,10 @@\n       \"from\": \"androidx/wear/(.*)\",\n       \"to\": \"ignore\"\n     },\n+    {\n+      \"from\": \"androidx/benchmark/(.*)\",\n+      \"to\": \"ignore\"\n+    },\n     {\n       \"from\": \"androidx/camera/(.*)\",\n       \"to\": \"ignore\"\n@@ -971,6 +975,10 @@\n       \"from\": \"androidx/sharetarget\",\n       \"to\": \"androidx/sharetarget\"\n     },\n+    {\n+      \"from\": \"androidx/benchmark\",\n+      \"to\": \"androidx/benchmark\"\n+    },\n     {\n       \"from\": \"androidx/camera\",\n       \"to\": \"androidx/camera\"\n@@ -3021,6 +3029,30 @@\n         \"version\": \"{newSlVersion}\"\n       }\n     },\n+    {\n+      \"from\": {\n+        \"groupId\": \"androidx.benchmark\",\n+        \"artifactId\": \"benchmark-common\",\n+        \"version\": \"{newBenchmarkVersion}\"\n+      },\n+      \"to\": {\n+        \"groupId\": \"androidx.benchmark\",\n+        \"artifactId\": \"benchmark-common\",\n+        \"version\": \"{newBenchmarkVersion}\"\n+      }\n+    },\n+    {\n+      \"from\": {\n+        \"groupId\": \"androidx.benchmark\",\n+        \"artifactId\": \"benchmark-junit4\",\n+        \"version\": \"{newBenchmarkVersion}\"\n+      },\n+      \"to\": {\n+        \"groupId\": \"androidx.benchmark\",\n+        \"artifactId\": \"benchmark-junit4\",\n+        \"version\": \"{newBenchmarkVersion}\"\n+      }\n+    },\n     {\n       \"from\": {\n         \"groupId\": \"androidx.camera\",\n@@ -3133,6 +3165,7 @@\n       \"newBiometricVersion\": \"1.0.0-alpha03\",\n       \"newDataBindingVersion\": \"undefined\",\n       \"newWorkManagerVersion\": \"2.0.0\",\n+      \"newBenchmarkVersion\": \"1.0.0-alpha04\",\n       \"newCameraVersion\": \"1.0.0-alpha01\"\n     }\n   },",
    "Bump Neo4j Browser to version 3 . 2 . 9": "diff --git a/community/server/pom.xml b/community/server/pom.xml\nindex ad6ab1b8ab0..54981b19ea0 100644\n--- a/community/server/pom.xml\n+++ b/community/server/pom.xml\n@@ -46,7 +46,7 @@\n     <docs-plugin.filter>true</docs-plugin.filter>\n \n     <neo4j.version>${project.version}</neo4j.version>\n-    <neo4j-browser.version>3.2.8</neo4j-browser.version>\n+    <neo4j-browser.version>3.2.9</neo4j-browser.version>\n \n     <neo4j-server.mainClass>org.neo4j.server.CommunityEntryPoint</neo4j-server.mainClass>\n     <neo-server.home>target/generated-resources/appassembler/jsw</neo-server.home>",
    "prepare release scribejava - 6 . 0 . 0": "diff --git a/pom.xml b/pom.xml\nindex 574a9913..42a99b4c 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -3,7 +3,7 @@\n     <groupId>com.github.scribejava</groupId>\n     <artifactId>scribejava</artifactId>\n     <packaging>pom</packaging>\n-    <version>5.6.1-SNAPSHOT</version>\n+    <version>6.0.0</version>\n     <name>ScribeJava OAuth Library</name>\n     <description>The best OAuth library out there</description>\n     <url>https://github.com/scribejava/scribejava</url>\n@@ -34,7 +34,7 @@\n         <connection>scm:git:git://github.com/scribejava/scribejava.git</connection>\n         <developerConnection>scm:git:git@github.com:scribejava/scribejava.git</developerConnection>\n         <url>https://github.com/scribejava/scribejava</url>\n-        <tag>HEAD</tag>\n+        <tag>scribejava-6.0.0</tag>\n     </scm>\n \n     <developers>\ndiff --git a/scribejava-apis/pom.xml b/scribejava-apis/pom.xml\nindex 3cc2f5f5..88d93147 100644\n--- a/scribejava-apis/pom.xml\n+++ b/scribejava-apis/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     \ndiff --git a/scribejava-core/pom.xml b/scribejava-core/pom.xml\nindex b07f9627..4f866dc8 100644\n--- a/scribejava-core/pom.xml\n+++ b/scribejava-core/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     \ndiff --git a/scribejava-httpclient-ahc/pom.xml b/scribejava-httpclient-ahc/pom.xml\nindex 4828697c..db7d34d1 100644\n--- a/scribejava-httpclient-ahc/pom.xml\n+++ b/scribejava-httpclient-ahc/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/scribejava-httpclient-apache/pom.xml b/scribejava-httpclient-apache/pom.xml\nindex f49a10a1..10c48bf4 100644\n--- a/scribejava-httpclient-apache/pom.xml\n+++ b/scribejava-httpclient-apache/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     \ndiff --git a/scribejava-httpclient-ning/pom.xml b/scribejava-httpclient-ning/pom.xml\nindex dffa0f86..ba1f6a2b 100644\n--- a/scribejava-httpclient-ning/pom.xml\n+++ b/scribejava-httpclient-ning/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     \ndiff --git a/scribejava-httpclient-okhttp/pom.xml b/scribejava-httpclient-okhttp/pom.xml\nindex 3d249abe..640477e1 100644\n--- a/scribejava-httpclient-okhttp/pom.xml\n+++ b/scribejava-httpclient-okhttp/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>com.github.scribejava</groupId>\n         <artifactId>scribejava</artifactId>\n-        <version>5.6.1-SNAPSHOT</version>\n+        <version>6.0.0</version>\n         <relativePath>../pom.xml</relativePath>\n     </parent>\n     ",
    "promoting multidim modules to extension": "diff --git a/doc/en/user/source/community/grib/grib.rst b/doc/en/user/source/community/grib/grib.rst\ndeleted file mode 100644\nindex 2870ae591a..0000000000\n--- a/doc/en/user/source/community/grib/grib.rst\n+++ /dev/null\n@@ -1,26 +0,0 @@\n-.. _community_grib:\n-\n-GRIB format\n-===========\n-\n-Installing the GeoServer GRIB format extension\n-----------------------------------------------\n-\n- #. Download the extension from the `nightly GeoServer community module builds <http://ares.opengeo.org/geoserver/master/community-latest/>`_.\n-\n-    .. warning:: Make sure the version of the extension matches the version of the GeoServer instance!\n-\n- #. Extract the contents of the archive into the ``WEB-INF/lib`` directory of the GeoServer installation.\n-\n-Configuring GRIB dataset\n-------------------------\n-For configuring a GRIB dataset the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.\n-\n-.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.\n- \n- \n-Current limitations\n--------------------\n-\n-* Only WGS84 output CRS is supported\n-* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)\ndiff --git a/doc/en/user/source/community/index.rst b/doc/en/user/source/community/index.rst\nindex 34fc14dfd1..1cd77d3cb0 100644\n--- a/doc/en/user/source/community/index.rst\n+++ b/doc/en/user/source/community/index.rst\n@@ -17,16 +17,13 @@ officially part of the GeoServer releases. They are however built along with the\n \r\n    authkey/index\r\n    dds/index\r\n-   netcdf/netcdf\r\n    python/index\r\n    scripting/index\r\n    spatialite/index\r\n-   netcdf-out/index\r\n    colormap/index\r\n    jdbcconfig/index\r\n    mbtiles/index\r\n    geopkg/index\r\n-   grib/grib\r\n    rest/index\r\n    pgraster/pgraster\r\n    wps-download/index\r\ndiff --git a/doc/en/user/source/extensions/grib/grib.rst b/doc/en/user/source/extensions/grib/grib.rst\nnew file mode 100644\nindex 0000000000..28463e56a7\n--- /dev/null\n+++ b/doc/en/user/source/extensions/grib/grib.rst\n@@ -0,0 +1,46 @@\n+.. _grib:\n+\n+GRIB\n+====\n+\n+Adding a GRIB data store\n+--------------------------\n+To add a GRIB data store the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.\n+\n+.. figure:: gribcreate.png\n+   :align: center\n+\n+   *GRIB in the list of raster data stores*\n+\n+Configuring a GRIB data store\n+-------------------------------\n+\n+.. figure:: gribconfigure.png\n+   :align: center\n+\n+   *Configuring a GRIB data store*\n+\n+.. list-table::\n+   :widths: 20 80\n+\n+   * - **Option**\n+     - **Description**\n+   * - ``Workspace``\n+     - \n+   * - ``Data Source Name``\n+     - \n+   * - ``Description``\n+     - \n+   * - ``Enabled``\n+     -  \n+   * - ``URL``\n+     - \n+-----------------------------\n+\n+.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.\n+ \n+ \n+Current limitations\n+-------------------\n+\n+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)\ndiff --git a/doc/en/user/source/extensions/grib/grib.rst~ b/doc/en/user/source/extensions/grib/grib.rst~\nnew file mode 100644\nindex 0000000000..8c4f96e1e1\n--- /dev/null\n+++ b/doc/en/user/source/extensions/grib/grib.rst~\n@@ -0,0 +1,16 @@\n+.. _grib:\n+\n+GRIB format\n+===========\n+\n+Configuring GRIB dataset\n+------------------------\n+For configuring a GRIB dataset the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.\n+\n+.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.\n+ \n+ \n+Current limitations\n+-------------------\n+\n+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)\ndiff --git a/doc/en/user/source/extensions/grib/gribconfigure.png b/doc/en/user/source/extensions/grib/gribconfigure.png\nnew file mode 100644\nindex 0000000000..02fc8f86c5\nBinary files /dev/null and b/doc/en/user/source/extensions/grib/gribconfigure.png differ\ndiff --git a/doc/en/user/source/extensions/grib/gribcreate.png b/doc/en/user/source/extensions/grib/gribcreate.png\nnew file mode 100644\nindex 0000000000..4a5e14771f\nBinary files /dev/null and b/doc/en/user/source/extensions/grib/gribcreate.png differ\ndiff --git a/doc/en/user/source/extensions/index.rst b/doc/en/user/source/extensions/index.rst\nindex 368c40546f..9892b10162 100644\n--- a/doc/en/user/source/extensions/index.rst\n+++ b/doc/en/user/source/extensions/index.rst\n@@ -19,12 +19,15 @@ see the :ref:`data_vector`, :ref:`data_raster`, and :ref:`data_database` section\n    dxf/index   \r\n    excel\r\n    geosearch\r\n+   grib/grib\r\n    imagemap\r\n    importer/index\r\n    inspire/index\r\n    jp2k/index\r\n    libjpeg-turbo/index\r\n    monitoring/index\r\n+   netcdf/netcdf\r\n+   netcdf-out/index\r\n    ogr\r\n    printing/index\r\n    querylayer/index\r\ndiff --git a/doc/en/user/source/community/netcdf-out/cfnames.png b/doc/en/user/source/extensions/netcdf-out/cfnames.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/cfnames.png\nrename to doc/en/user/source/extensions/netcdf-out/cfnames.png\ndiff --git a/doc/en/user/source/community/netcdf-out/cfunit.png b/doc/en/user/source/extensions/netcdf-out/cfunit.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/cfunit.png\nrename to doc/en/user/source/extensions/netcdf-out/cfunit.png\ndiff --git a/doc/en/user/source/extensions/netcdf-out/index.rst b/doc/en/user/source/extensions/netcdf-out/index.rst\nnew file mode 100644\nindex 0000000000..a56734f836\n--- /dev/null\n+++ b/doc/en/user/source/extensions/netcdf-out/index.rst\n@@ -0,0 +1,93 @@\n+.. _netcdf-out:\n+\n+NetCDF Output format\n+====================\n+This plugin brings in the ability to encode WCS 2.0.1 Multidimensional output as NetCDF files using the Unidata NetCDF Java library. \n+\n+Getting a NetCDF output file\n+----------------------------\n+Make sure to specify application/x-netcdf as value of the format parameter within the getCoverage request using the proper constant.\n+As an instance: \n+http://localhost:8080/geoserver/wcs?request=GetCoverage&service=WCS&version=2.0.1&coverageId=it.geosolutions__V&Format=application/x-netcdf...\n+\n+\n+Current limitations\n+-------------------\n+\n+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)\n+* NetCDF output will be produced only when input coverages come from a StructuredGridCoverage2D reader (This will allows to query the GranuleSource to get the list of granules in order to setup dimensions slices for each sub-coverage)\n+\n+\n+Supporting NetCDF4-Classic output file\n+--------------------------------------\n+Starting with version 2.8 of GeoServer, NetCDF4-Classic output is supported in addition to NetCDF-3.\n+NetCDF4-Classic leverages on the simpler data model of NetCDF-3 by supporting the HDF5-based storage capabilities of NetCDF-4. \n+See :ref:`Installing required NetCDF-4 Native libraries <nc4>` for more info on that.\n+\n+NetCDF Output customization\n+---------------------------\n+\n+Global Settings configuration\n++++++++++++++++++++++++++++++\n+Starting with version 2.8 of GeoServer it is possible to define a few global settings for the NetCDF output format. A new section will be added to the *Global Settings* page.\n+\n+.. figure:: netcdfoutsettings.png\n+   :align: center\n+\n+   *NetCDF Output Global settings section*\n+\n+From this panel, you may configure:\n+\n+* Data Packing (*NONE*, *BYTE*, *SHORT*, *INT*)\n+* Variable attributes\n+* NetCDF4-Classic output specific parameters (they will be taken into account only in case the format specified in the WCS 2.0 GetCoverage request is application/x-netcdf4).\n+\n+Layer configuration\n+++++++++++++++++++++\n+With version 2.8 of GeoServer it is also possible to add more customization to the layer in order to specify some properties of the NetCDF Output.\n+You will notice an additional tab to the layer configuration.\n+\n+.. figure:: netcdfoutpanel.png\n+   :align: center\n+\n+   *NetCDF Output settings panel*\n+\n+.. note:: This tab will be initialized with the parameters defined in the *Global Settings* page. \n+   \n+From this panel, you may configure the same parameters as for the global panel and also other 2 Layer-specific parameters:\n+\n+* Output variable name. \n+* variable's unit of measure.\n+\n+.. note:: This panel will be available for Raster data only.\n+\n+CF Standard names support\n+^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Note that the output name can also be chosen from the list of CF Standard names.\n+Check `CF standard names <http://cfconventions.org/standard-names.html>`_ page for more info on it.\n+\n+Once you click on the dropdown, you may choose from the set of available standard names.\n+\n+.. figure:: cfnames.png\n+   :align: center\n+\n+   *NetCDF CF Standard names list*\n+\n+Note that once you specify the standard name, the unit will be automatically configured, using the canonical unit associated with that standard name.\n+\n+.. figure:: cfunit.png\n+   :align: center\n+\n+   *NetCDF CF Standard names and canonical unit*\n+\n+The list of standard names is populated by taking the entries from a standard name table xml.\n+At time of writing, a valid example is available `Here <http://cfconventions.org/Data/cf-standard-names/27/src/cf-standard-name-table.xml>`_\n+\n+You have three ways to provide it to GeoServer.\n+\n+#. Add a ``-DNETCDF_STANDARD_TABLE=/path/to/the/table/tablename.xml`` property to the startup script.\n+#. Put that xml file within the ``NETCDF_DATA_DIR`` which is the folder where all NetCDF auxiliary files are located. (`More info <http://geoserver.geo-solutions.it/multidim/en/mosaic_config/netcdf_mosaic.html#customizing-netcdf-ancillary-files-location>`_)\n+#. Put that xml file within the ``GEOSERVER_DATA_DIR``.\n+\n+.. note:: Note that for the 2nd and 3rd case, file name must be **cf-standard-name-table.xml**.\ndiff --git a/doc/en/user/source/community/netcdf-out/index.rst b/doc/en/user/source/extensions/netcdf-out/index.rst~\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/index.rst\nrename to doc/en/user/source/extensions/netcdf-out/index.rst~\ndiff --git a/doc/en/user/source/community/netcdf-out/nc4.rst b/doc/en/user/source/extensions/netcdf-out/nc4.rst\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/nc4.rst\nrename to doc/en/user/source/extensions/netcdf-out/nc4.rst\ndiff --git a/doc/en/user/source/community/netcdf-out/netcdfoutpanel.png b/doc/en/user/source/extensions/netcdf-out/netcdfoutpanel.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/netcdfoutpanel.png\nrename to doc/en/user/source/extensions/netcdf-out/netcdfoutpanel.png\ndiff --git a/doc/en/user/source/community/netcdf-out/netcdfoutsettings.png b/doc/en/user/source/extensions/netcdf-out/netcdfoutsettings.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf-out/netcdfoutsettings.png\nrename to doc/en/user/source/extensions/netcdf-out/netcdfoutsettings.png\ndiff --git a/doc/en/user/source/community/netcdf/netcdf.rst b/doc/en/user/source/extensions/netcdf/netcdf.rst\nsimilarity index 98%\nrename from doc/en/user/source/community/netcdf/netcdf.rst\nrename to doc/en/user/source/extensions/netcdf/netcdf.rst\nindex cbf4074d88..494956988d 100644\n--- a/doc/en/user/source/community/netcdf/netcdf.rst\n+++ b/doc/en/user/source/extensions/netcdf/netcdf.rst\n@@ -5,6 +5,7 @@ NetCDF\n \n Adding a NetCDF data store\n --------------------------\n+To add a NetCDF data store the user must go to :guilabel:`Stores --> Add New Store --> NetCDF`.\n \n .. figure:: netcdfcreate.png\n    :align: center\ndiff --git a/doc/en/user/source/extensions/netcdf/netcdf.rst~ b/doc/en/user/source/extensions/netcdf/netcdf.rst~\nnew file mode 100644\nindex 0000000000..47ef1daf11\n--- /dev/null\n+++ b/doc/en/user/source/extensions/netcdf/netcdf.rst~\n@@ -0,0 +1,97 @@\n+.. _netcdf:\n+\n+NetCDF\n+======\n+\n+Adding a NetCDF data store\n+--------------------------\n+To add a NetCDF data store the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.\n+\n+.. figure:: netcdfcreate.png\n+   :align: center\n+\n+   *NetCDF in the list of raster data stores*\n+\n+Configuring a NetCDF data store\n+-------------------------------\n+\n+.. figure:: netcdfconfigure.png\n+   :align: center\n+\n+   *Configuring a NetCDF data store*\n+\n+.. list-table::\n+   :widths: 20 80\n+\n+   * - **Option**\n+     - **Description**\n+   * - ``Workspace``\n+     - \n+   * - ``Data Source Name``\n+     - \n+   * - ``Description``\n+     - \n+   * - ``Enabled``\n+     -  \n+   * - ``URL``\n+     - \n+\t \n+Supporting Custom NetCDF Coordinate Reference Systems\n+-----------------------------------------------------\n+Starting with GeoServer 2.8.x, NetCDF related modules (both NetCDF/GRIB store, imageMosaic store based on NetCDF/GRIB dataset and NetCDF output format) allow to support custom Coordinate Reference Systems and Projections.\n+As reported in the `NetCDF CF documentation, Grid mappings section <http://cfconventions.org/Data/cf-conventions/cf-conventions-1.6/build/cf-conventions.html#appendix-grid-mappings>`_\n+a NetCDF CF file may expose gridMapping attributes to describe the underlying projection. \n+\n+The GeoTools NetCDF machinery will parse the attributes (if any) contained in the underlying NetCDF dataset to setup an OGC CoordinateReferenceSystem object.\n+Once created, a CRS lookup will be made to identify a custom EPSG (if any) defined by the user to match that Projection.\n+In case the NetCDF gridMapping is basically the same of the one exposed as EPSG entry but the matching doesn't happen, you may consider tuning the comparison tolerance: See :ref:`crs_configure`, *Increase Comparison Tolerance section*.\n+\n+User defined NetCDF Coordinate Reference Systems with their custom EPSG need to be provided in :file:`user_projections\\\\netcdf.projections.properties` file inside your data directory (you have to create that file if missing).  \n+\n+A sample entry in that property file could look like this:\n+\n+      971801=PROJCS[\"lambert_conformal_conic_1SP\", GEOGCS[\"unknown\", DATUM[\"unknown\", SPHEROID[\"unknown\", 6371229.0, 0.0]], PRIMEM[\"Greenwich\", 0.0], UNIT[\"degree\", 0.017453292519943295], AXIS[\"Geodetic longitude\", EAST], AXIS[\"Geodetic latitude\", NORTH]], PROJECTION[\"Lambert_Conformal_Conic_1SP\"], PARAMETER[\"central_meridian\", -95.0], PARAMETER[\"latitude_of_origin\", 25.0], PARAMETER[\"scale_factor\", 1.0], PARAMETER[\"false_easting\", 0.0], PARAMETER[\"false_northing\", 0.0], UNIT[\"m\", 1.0], AXIS[\"Easting\", EAST], AXIS[\"Northing\", NORTH], AUTHORITY[\"EPSG\",\"971801\"]]\n+\n+.. note:: Note the \"unknown\" names for GEOGCS, DATUM and SPHEROID elements. This is how the underlying NetCDF machinery will name custom elements.\n+.. note:: Note the number that precedes the WKT. This will determine the EPSG code.  So in this example, the EPSG code is 971801.\n+.. note:: When dealing with records indexing based on PostGIS, make sure the custom code isn't greater than 998999. (It tooks us a while to understand why we had some issues with custom codes using PostGIS as granules index. Some more details, `here <http://gis.stackexchange.com/questions/145017/why-is-there-an-upper-limit-to-the-srid-value-in-the-spatial-ref-sys-table-in-po>`_)\n+.. note:: If a parameter like \"central_meridian\" or \"longitude_of_origin\" or other longitude related value is outside the range [-180,180], make sure you adjust this value to belong to the standard range. As an instance a Central Meridian of 265 should be set as -95.\n+ \n+You may specify further custom NetCDF EPSG references by adding more lines to that file. \n+\n+#. Insert the code WKT for the projection at the end of the file (on a single line or with backslash characters)::\n+     \n+      971802=PROJCS[\"lambert_conformal_conic_2SP\", \\\n+\t    GEOGCS[\"unknown\", \\\n+\t\t  DATUM[\"unknown\", \\\n+\t\t    SPHEROID[\"unknown\", 6377397.0, 299.15550239234693]], \\\n+\t      PRIMEM[\"Greenwich\", 0.0], \\\n+\t\t  UNIT[\"degree\", 0.017453292519943295], \\\n+\t\t  AXIS[\"Geodetic longitude\", EAST], \\\n+\t\t  AXIS[\"Geodetic latitude\", NORTH]], \\\n+\t\tPROJECTION[\"Lambert_Conformal_Conic_2SP\"], \\\n+\t\tPARAMETER[\"central_meridian\", 13.333333015441895], \\\n+\t\tPARAMETER[\"latitude_of_origin\", 46.0], \\\n+\t\tPARAMETER[\"standard_parallel_1\", 46.0], \\\n+\t\tPARAMETER[\"standard_parallel_2\", 49], \\\n+\t\tPARAMETER[\"false_easting\", 0.0], \\\n+\t\tPARAMETER[\"false_northing\", 0.0], \n+\t\tUNIT[\"m\", 1.0], \\\n+\t\tAXIS[\"Easting\", EAST], \\\n+\t\tAXIS[\"Northing\", NORTH], \\\n+\t\tAUTHORITY[\"EPSG\",\"971802\"]]\n+\n+#. Save the file.\n+\n+#. Restart GeoServer.\n+\n+#. Verify that the CRS has been properly parsed by navigating to the :ref:`srs_list` page in the :ref:`web_admin`.\n+\n+#. If the projection wasn't listed, examine the logs for any errors.\n+\n+Specify an external file through system properties\n+--------------------------------------------------\n+You may also specify the NetCDF projections definition file by setting a **Java system property** which links to the specified file.\n+As an instance: :file:`-Dnetcdf.projections.file=/full/path/of/the/customfile.properties`\n+\n+\ndiff --git a/doc/en/user/source/community/netcdf/netcdfconfigure.png b/doc/en/user/source/extensions/netcdf/netcdfconfigure.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf/netcdfconfigure.png\nrename to doc/en/user/source/extensions/netcdf/netcdfconfigure.png\ndiff --git a/doc/en/user/source/community/netcdf/netcdfcreate.png b/doc/en/user/source/extensions/netcdf/netcdfcreate.png\nsimilarity index 100%\nrename from doc/en/user/source/community/netcdf/netcdfcreate.png\nrename to doc/en/user/source/extensions/netcdf/netcdfcreate.png\ndiff --git a/src/community/pom.xml b/src/community/pom.xml\nindex cf7e01edb1..7fbb8725c2 100644\n--- a/src/community/pom.xml\n+++ b/src/community/pom.xml\n@@ -181,11 +181,8 @@\n         <module>script</module>\n         <module>wms-eo</module>\n         <module>colormap</module>\n-        <module>netcdf</module>\n-        <module>netcdf-out</module>\n         <module>mbtiles</module>\n         <module>geopkg</module>\n-        <module>grib</module>\n         <module>pgraster</module>\n         <module>dyndimension</module>\n         <module>rest-ext</module>\n@@ -263,24 +260,6 @@\n       </modules>\n     </profile>\n     <profile>\n-      <id>netcdf-out</id>\n-      <activation>\n-        <property><name>netcdf-out</name></property>\n-      </activation> \n-      <modules>\n-        <module>netcdf-out</module>\n-      </modules>\n-    </profile>\n-    <profile>\n-      <id>netcdf</id>\n-      <activation>\n-        <property><name>netcdf</name></property>\n-      </activation> \n-      <modules>\n-        <module>netcdf</module>\n-      </modules>\n-    </profile>\n-        <profile>\n       <id>pgraster</id>\n       <activation>\n         <property><name>pgraster</name></property>\n@@ -337,15 +316,6 @@\n       <modules>\n         <module>geoserver-sync</module>\n       </modules>\n-    </profile>\n-\t<profile>\n-      <id>grib</id>\n-\t  <activation>\n-        <property><name>grib</name></property>\n-      </activation>\n-      <modules>\n-        <module>grib</module>\n-      </modules>\n     </profile>\n     <profile>\n       <id>dyndimension</id>\ndiff --git a/src/community/grib/pom.xml b/src/extension/grib/pom.xml\nsimilarity index 81%\nrename from src/community/grib/pom.xml\nrename to src/extension/grib/pom.xml\nindex 7390dce81d..1a494c3152 100644\n--- a/src/community/grib/pom.xml\n+++ b/src/extension/grib/pom.xml\n@@ -2,11 +2,12 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n-      <groupId>org.geoserver</groupId>\n-      <artifactId>community</artifactId>\n-      <version>2.9-SNAPSHOT</version>\n-   </parent>\n-   <groupId>org.geoserver.community</groupId>\n+    <groupId>org.geoserver</groupId>\n+    <artifactId>extension</artifactId>\n+    <version>2.9-SNAPSHOT</version>\n+  </parent>\n+\n+   <groupId>org.geoserver.extension</groupId>\n    <artifactId>gs-grib</artifactId>\n    <name>GRIB Coverage Format</name>\n    <packaging>jar</packaging>\n@@ -43,6 +44,13 @@\n          <classifier>tests</classifier>\n          <scope>test</scope>\n       </dependency>\n+      <dependency>\n+         <groupId>org.geoserver.web</groupId>\n+         <artifactId>gs-web-core</artifactId>\n+         <version>${project.version}</version>\n+         <classifier>tests</classifier>\n+         <scope>test</scope>\n+      </dependency>\n       <dependency>\n          <groupId>com.mockrunner</groupId>\n          <artifactId>mockrunner</artifactId>\ndiff --git a/src/community/grib/src/main/java/applicationContext.xml b/src/extension/grib/src/main/java/applicationContext.xml\nsimilarity index 100%\nrename from src/community/grib/src/main/java/applicationContext.xml\nrename to src/extension/grib/src/main/java/applicationContext.xml\ndiff --git a/src/community/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java b/src/extension/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java\nsimilarity index 100%\nrename from src/community/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java\nrename to src/extension/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java\ndiff --git a/src/community/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java b/src/extension/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java\nsimilarity index 100%\nrename from src/community/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java\nrename to src/extension/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java\ndiff --git a/src/community/grib/src/test/java/org/geoserver/catalog/currents.zip b/src/extension/grib/src/test/java/org/geoserver/catalog/currents.zip\nsimilarity index 100%\nrename from src/community/grib/src/test/java/org/geoserver/catalog/currents.zip\nrename to src/extension/grib/src/test/java/org/geoserver/catalog/currents.zip\ndiff --git a/src/community/grib/src/test/java/org/geoserver/grib/GribDataTest.java b/src/extension/grib/src/test/java/org/geoserver/grib/GribDataTest.java\nsimilarity index 100%\nrename from src/community/grib/src/test/java/org/geoserver/grib/GribDataTest.java\nrename to src/extension/grib/src/test/java/org/geoserver/grib/GribDataTest.java\ndiff --git a/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java b/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java\nnew file mode 100644\nindex 0000000000..4fadcdc58e\n--- /dev/null\n+++ b/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java\n@@ -0,0 +1,56 @@\n+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.raster;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.geoserver.catalog.CoverageStoreInfo;\n+import org.geoserver.data.test.MockData;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.grib.GribDataTest;\n+import org.geoserver.web.GeoServerWicketTestSupport;\n+import org.geoserver.web.data.store.CoverageStoreEditPage;\n+import org.geoserver.web.data.store.CoverageStoreNewPage;\n+import org.geotools.coverage.io.grib.GRIBFormat;\n+import org.junit.Test;\n+\n+public class GribRasterEditPanelTest extends GeoServerWicketTestSupport {\n+    \n+    \n+    protected static QName SAMPLE_GRIB = new QName(MockData.SF_URI, \"sampleGrib\",\n+            MockData.SF_PREFIX);\n+\n+    @Override\n+    protected void setUpTestData(SystemTestData testData) throws Exception {\n+        super.setUpTestData(testData);\n+        testData.setUpRasterLayer(SAMPLE_GRIB, \"test-data/sampleGrib.grb2\", null, null, GribDataTest.class);\n+    }\n+    \n+    @Test\n+    public void testGribCreate() throws Exception {\n+        Page page = tester.startPage(new CoverageStoreNewPage(new GRIBFormat().getName()));\n+        tester.assertNoErrorMessage();\n+        print(page, true, true);\n+        Component editor = tester.getComponentFromLastRenderedPage(\"rasterStoreForm:parametersPanel\");\n+        assertThat(editor, instanceOf(GribRasterEditPanel.class));\n+    }\n+    \n+    @Test\n+    public void testGribEdit() throws Exception {\n+        CoverageStoreInfo store = getCatalog().getCoverageStoreByName(SAMPLE_GRIB.getPrefix(), SAMPLE_GRIB.getLocalPart());\n+        assertNotNull(store);\n+        Page page = tester.startPage(new CoverageStoreEditPage(store));\n+        tester.assertNoErrorMessage();\n+        print(page, true, true);\n+        Component editor = tester.getComponentFromLastRenderedPage(\"rasterStoreForm:parametersPanel\");\n+        assertThat(editor, instanceOf(GribRasterEditPanel.class));\n+    }\n+}\ndiff --git a/src/community/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2 b/src/extension/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2\nsimilarity index 100%\nrename from src/community/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2\nrename to src/extension/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2\ndiff --git a/src/community/netcdf-out/pom.xml b/src/extension/netcdf-out/pom.xml\nsimilarity index 95%\nrename from src/community/netcdf-out/pom.xml\nrename to src/extension/netcdf-out/pom.xml\nindex 4bff8a62d8..a5afe05cf4 100644\n--- a/src/community/netcdf-out/pom.xml\n+++ b/src/extension/netcdf-out/pom.xml\n@@ -19,13 +19,13 @@\n       <url>https://artifacts.unidata.ucar.edu/content/repositories/unidata/</url>\n     </repository>\n    </repositories>\n- <parent>\n-  <groupId>org.geoserver</groupId>\n-  <artifactId>community</artifactId>\n-  <version>2.9-SNAPSHOT</version>\n- </parent>\n- \n- <groupId>org.geoserver.community</groupId>\n+  <parent>\n+    <groupId>org.geoserver</groupId>\n+    <artifactId>extension</artifactId>\n+    <version>2.9-SNAPSHOT</version>\n+  </parent>\n+\n+ <groupId>org.geoserver.extension</groupId>\n  <artifactId>gs-netcdf-out</artifactId>\n  <packaging>jar</packaging>\n  <name>WCS NetCDF output Module</name>\ndiff --git a/src/community/netcdf-out/src/main/java/applicationContext.xml b/src/extension/netcdf-out/src/main/java/applicationContext.xml\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/applicationContext.xml\nrename to src/extension/netcdf-out/src/main/java/applicationContext.xml\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java\ndiff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java\nrename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java\ndiff --git a/src/community/netcdf-out/src/main/resources/GeoServerApplication.properties b/src/extension/netcdf-out/src/main/resources/GeoServerApplication.properties\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/GeoServerApplication.properties\nrename to src/extension/netcdf-out/src/main/resources/GeoServerApplication.properties\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd\ndiff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd\nsimilarity index 100%\nrename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd\nrename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java\ndiff --git a/src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java\nrename to src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java\ndiff --git a/src/community/netcdf-out/src/test/resources/applicationContext.xml b/src/extension/netcdf-out/src/test/resources/applicationContext.xml\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/resources/applicationContext.xml\nrename to src/extension/netcdf-out/src/test/resources/applicationContext.xml\ndiff --git a/src/community/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml b/src/extension/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml\nsimilarity index 100%\nrename from src/community/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml\nrename to src/extension/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml\ndiff --git a/src/community/netcdf/pom.xml b/src/extension/netcdf/pom.xml\nsimilarity index 80%\nrename from src/community/netcdf/pom.xml\nrename to src/extension/netcdf/pom.xml\nindex 06b96378e1..41a8383e50 100644\n--- a/src/community/netcdf/pom.xml\n+++ b/src/extension/netcdf/pom.xml\n@@ -10,11 +10,11 @@\n \n   <parent>\n     <groupId>org.geoserver</groupId>\n-    <artifactId>community</artifactId>\n+    <artifactId>extension</artifactId>\n     <version>2.9-SNAPSHOT</version>\n   </parent>\n \n-  <groupId>org.geoserver.community</groupId>\n+  <groupId>org.geoserver.extension</groupId>\n   <artifactId>gs-netcdf</artifactId>\n   <packaging>jar</packaging>\n   <name>NetCDF Coverage format</name>\n@@ -47,12 +47,25 @@\n          </exclusion>\n        </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.geotools</groupId>\n+      <artifactId>gt-sample-data</artifactId>\n+      <version>${gt.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.geoserver</groupId>\n       <artifactId>gs-main</artifactId>\n       <classifier>tests</classifier>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+       <groupId>org.geoserver.web</groupId>\n+       <artifactId>gs-web-core</artifactId>\n+       <version>${project.version}</version>\n+       <classifier>tests</classifier>\n+       <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>com.mockrunner</groupId>\n       <artifactId>mockrunner</artifactId>\ndiff --git a/src/community/netcdf/src/main/java/applicationContext.xml b/src/extension/netcdf/src/main/java/applicationContext.xml\nsimilarity index 100%\nrename from src/community/netcdf/src/main/java/applicationContext.xml\nrename to src/extension/netcdf/src/main/java/applicationContext.xml\ndiff --git a/src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java b/src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java\nsimilarity index 100%\nrename from src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java\nrename to src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java\ndiff --git a/src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties b/src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties\nsimilarity index 100%\nrename from src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties\nrename to src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties\ndiff --git a/src/community/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java b/src/extension/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java\nsimilarity index 100%\nrename from src/community/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java\nrename to src/extension/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java\ndiff --git a/src/community/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory b/src/extension/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory\nsimilarity index 100%\nrename from src/community/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory\nrename to src/extension/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory\ndiff --git a/src/community/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java\nsimilarity index 100%\nrename from src/community/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java\nrename to src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java\ndiff --git a/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java\nnew file mode 100644\nindex 0000000000..4cdbc74079\n--- /dev/null\n+++ b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java\n@@ -0,0 +1,71 @@\n+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.netcdf;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+\n+import javax.imageio.spi.ImageReaderSpi;\n+\n+import junit.framework.TestCase;\n+\n+import org.geotools.coverage.grid.GridCoverage2D;\n+import org.geotools.coverage.grid.io.AbstractGridFormat;\n+import org.geotools.coverage.io.netcdf.NetCDFFormat;\n+import org.geotools.coverage.io.netcdf.NetCDFReader;\n+import org.geotools.imageio.netcdf.NetCDFImageReaderSpi;\n+import org.geotools.test.TestData;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Simple test class for checking if netcdf data are supported.\n+ */\n+public class NetCDFDataTest extends TestCase {\n+\n+    @Test\n+    public void testFormatSupported() throws FileNotFoundException, IOException{\n+\n+        // Selection of the input file\n+        File file = TestData.file(this, \"2DLatLonCoverage.nc\");\n+        // Check if the grib file is accepted by the NetCDF driver\n+        AbstractGridFormat format = new NetCDFFormat();\n+        Assert.assertTrue(format.accepts(file));\n+        // Check if the netcdf reader spi object can read the input file\n+        ImageReaderSpi spi = new NetCDFImageReaderSpi();\n+        Assert.assertTrue(spi.canDecodeInput(file));\n+    }\n+    \n+    @Test\n+    public void testImage() throws FileNotFoundException, IOException {\n+        // Selection of the input file\n+        File file = TestData.file(this, \"2DLatLonCoverage.nc\");\n+        // Creation of a NetCDF reader for the data\n+        NetCDFReader reader = new NetCDFReader(file, null);\n+        Assert.assertNotNull(reader);\n+\n+        try {\n+            // Selection of the coverage names\n+            String[] coverageNames = reader.getGridCoverageNames();\n+            // Check if almost one coverage is present\n+            Assert.assertNotNull(coverageNames);\n+            Assert.assertTrue(coverageNames.length > 0);\n+            // Reading of one coverage\n+            GridCoverage2D coverage = reader.read(coverageNames[0], null);\n+            // Check if the coverage exists\n+            Assert.assertNotNull(coverage);\n+        } finally {\n+            // Reader disposal\n+            if (reader != null) {\n+                try {\n+                    reader.dispose();\n+                } catch (Throwable t) {\n+                    // nothing\n+                }\n+            }\n+        }\n+    }\n+}\ndiff --git a/src/community/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties\nsimilarity index 100%\nrename from src/community/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties\nrename to src/extension/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties\ndiff --git a/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java b/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java\nnew file mode 100644\nindex 0000000000..8e4afd7bed\n--- /dev/null\n+++ b/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java\n@@ -0,0 +1,56 @@\n+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.raster;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.geoserver.catalog.CoverageStoreInfo;\n+import org.geoserver.data.test.MockData;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.netcdf.NetCDFDataTest;\n+import org.geoserver.web.GeoServerWicketTestSupport;\n+import org.geoserver.web.data.store.CoverageStoreEditPage;\n+import org.geoserver.web.data.store.CoverageStoreNewPage;\n+import org.geotools.coverage.io.netcdf.NetCDFFormat;\n+import org.junit.Test;\n+\n+public class NetCDFRasterEditPanelTest extends GeoServerWicketTestSupport {\n+    \n+    \n+    protected static QName SAMPLE_NETCDF = new QName(MockData.SF_URI, \"sampleNetCDF\",\n+            MockData.SF_PREFIX);\n+\n+    @Override\n+    protected void setUpTestData(SystemTestData testData) throws Exception {\n+        super.setUpTestData(testData);\n+        testData.setUpRasterLayer(SAMPLE_NETCDF, \"test-data/2DLatLonCoverage.nc\", null, null, NetCDFDataTest.class);\n+    }\n+    \n+    @Test\n+    public void testNetCDFCreate() throws Exception {\n+        Page page = tester.startPage(new CoverageStoreNewPage(new NetCDFFormat().getName()));\n+        tester.assertNoErrorMessage();\n+        print(page, true, true);\n+        Component editor = tester.getComponentFromLastRenderedPage(\"rasterStoreForm:parametersPanel\");\n+        assertThat(editor, instanceOf(NetCDFRasterEditPanel.class));\n+    }\n+    \n+    @Test\n+    public void testNetCDFEdit() throws Exception {\n+        CoverageStoreInfo store = getCatalog().getCoverageStoreByName(SAMPLE_NETCDF.getPrefix(), SAMPLE_NETCDF.getLocalPart());\n+        assertNotNull(store);\n+        Page page = tester.startPage(new CoverageStoreEditPage(store));\n+        tester.assertNoErrorMessage();\n+        print(page, true, true);\n+        Component editor = tester.getComponentFromLastRenderedPage(\"rasterStoreForm:parametersPanel\");\n+        assertThat(editor, instanceOf(NetCDFRasterEditPanel.class));\n+    }\n+}\ndiff --git a/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc b/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc\nnew file mode 100644\nindex 0000000000..29b6feec3e\nBinary files /dev/null and b/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc differ\ndiff --git a/src/extension/pom.xml b/src/extension/pom.xml\nindex b13015f985..a25d7e3e7f 100644\n--- a/src/extension/pom.xml\n+++ b/src/extension/pom.xml\n@@ -285,6 +285,36 @@\n         <module>importer</module>\n       </modules>\n     </profile>\n+    \n+    <profile>\n+      <id>grib</id>\n+\t  <activation>\n+        <property><name>grib</name></property>\n+      </activation>\n+      <modules>\n+        <module>grib</module>\n+      </modules>\n+    </profile>\n+\n+    <profile>\n+      <id>netcdf</id>\n+    ",
    "Add Camera implementation using CameraView on Android .": "diff --git a/android/build.gradle b/android/build.gradle\nindex 333d69c..28e43a9 100755\n--- a/android/build.gradle\n+++ b/android/build.gradle\n@@ -1,24 +1,27 @@\n buildscript {\n   repositories {\n     jcenter()\n+    maven {\n+      url 'https://maven.google.com'\n+    }\n   }\n \n   dependencies {\n-    classpath 'com.android.tools.build:gradle:1.2.3'\n+    classpath 'com.android.tools.build:gradle:3.0.0'\n   }\n }\n \n apply plugin: 'com.android.library'\n \n android {\n-  compileSdkVersion 25\n-  buildToolsVersion \"25.0.2\"\n+  compileSdkVersion 26\n+    buildToolsVersion \"26.0.2\"\n \n   defaultConfig {\n     minSdkVersion 16\n-    targetSdkVersion 22\n+    targetSdkVersion 26\n     versionCode 1\n-    versionName \"1.0\"\n+    versionName \"1.0.0\"\n   }\n   lintOptions {\n     abortOnError false\n@@ -28,10 +31,18 @@ android {\n \n repositories {\n   mavenCentral()\n+  maven {\n+   url 'https://maven.google.com'\n+  }\n+  maven { url \"https://jitpack.io\" }\n }\n \n dependencies {\n-  compile \"com.facebook.react:react-native:0.19.+\"\n+  compile 'com.facebook.react:react-native:+'\n   compile \"com.google.zxing:core:3.2.1\"\n   compile \"com.drewnoakes:metadata-extractor:2.9.1\"\n+  compile 'com.google.android.gms:play-services-vision:+'\n+  compile \"com.android.support:exifinterface:26.0.2\"\n+\n+  compile 'com.github.react-native-community:cameraview:df60b07573'\n }\ndiff --git a/android/gradle/wrapper/gradle-wrapper.jar b/android/gradle/wrapper/gradle-wrapper.jar\nnew file mode 100644\nindex 0000000..13372ae\nBinary files /dev/null and b/android/gradle/wrapper/gradle-wrapper.jar differ\ndiff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties\nnew file mode 100644\nindex 0000000..bdaabfa\n--- /dev/null\n+++ b/android/gradle/wrapper/gradle-wrapper.properties\n@@ -0,0 +1,6 @@\n+#Sun Dec 31 13:43:56 BRST 2017\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-all.zip\ndiff --git a/android/gradlew b/android/gradlew\nnew file mode 100755\nindex 0000000..9d82f78\n--- /dev/null\n+++ b/android/gradlew\n@@ -0,0 +1,160 @@\n+#!/usr/bin/env bash\n+\n+##############################################################################\n+##\n+##  Gradle start up script for UN*X\n+##\n+##############################################################################\n+\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS=\"\"\n+\n+APP_NAME=\"Gradle\"\n+APP_BASE_NAME=`basename \"$0\"`\n+\n+# Use the maximum available, or set MAX_FD != -1 to use that value.\n+MAX_FD=\"maximum\"\n+\n+warn ( ) {\n+    echo \"$*\"\n+}\n+\n+die ( ) {\n+    echo\n+    echo \"$*\"\n+    echo\n+    exit 1\n+}\n+\n+# OS specific support (must be 'true' or 'false').\n+cygwin=false\n+msys=false\n+darwin=false\n+case \"`uname`\" in\n+  CYGWIN* )\n+    cygwin=true\n+    ;;\n+  Darwin* )\n+    darwin=true\n+    ;;\n+  MINGW* )\n+    msys=true\n+    ;;\n+esac\n+\n+# Attempt to set APP_HOME\n+# Resolve links: $0 may be a link\n+PRG=\"$0\"\n+# Need this for relative symlinks.\n+while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+        PRG=\"$link\"\n+    else\n+        PRG=`dirname \"$PRG\"`\"/$link\"\n+    fi\n+done\n+SAVED=\"`pwd`\"\n+cd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\n+APP_HOME=\"`pwd -P`\"\n+cd \"$SAVED\" >/dev/null\n+\n+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n+\n+# Determine the Java command to use to start the JVM.\n+if [ -n \"$JAVA_HOME\" ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+        # IBM's JDK on AIX uses strange locations for the executables\n+        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+        JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+    if [ ! -x \"$JAVACMD\" ] ; then\n+        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+    fi\n+else\n+    JAVACMD=\"java\"\n+    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+fi\n+\n+# Increase the maximum file descriptors if we can.\n+if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n+    MAX_FD_LIMIT=`ulimit -H -n`\n+    if [ $? -eq 0 ] ; then\n+        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n+            MAX_FD=\"$MAX_FD_LIMIT\"\n+        fi\n+        ulimit -n $MAX_FD\n+        if [ $? -ne 0 ] ; then\n+            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n+        fi\n+    else\n+        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n+    fi\n+fi\n+\n+# For Darwin, add options to specify how the application appears in the dock\n+if $darwin; then\n+    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin ; then\n+    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n+    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n+\n+    # We build the pattern for arguments to be converted via cygpath\n+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n+    SEP=\"\"\n+    for dir in $ROOTDIRSRAW ; do\n+        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n+        SEP=\"|\"\n+    done\n+    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n+    # Add a user-defined pattern to the cygpath arguments\n+    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n+        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n+    fi\n+    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n+    i=0\n+    for arg in \"$@\" ; do\n+        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n+        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n+\n+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n+            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n+        else\n+            eval `echo args$i`=\"\\\"$arg\\\"\"\n+        fi\n+        i=$((i+1))\n+    done\n+    case $i in\n+        (0) set -- ;;\n+        (1) set -- \"$args0\" ;;\n+        (2) set -- \"$args0\" \"$args1\" ;;\n+        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+    esac\n+fi\n+\n+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\n+function splitJvmOpts() {\n+    JVM_OPTS=(\"$@\")\n+}\n+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\n+JVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n+\n+exec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\ndiff --git a/android/gradlew.bat b/android/gradlew.bat\nnew file mode 100644\nindex 0000000..aec9973\n--- /dev/null\n+++ b/android/gradlew.bat\n@@ -0,0 +1,90 @@\n+@if \"%DEBUG%\" == \"\" @echo off\r\n+@rem ##########################################################################\r\n+@rem\r\n+@rem  Gradle startup script for Windows\r\n+@rem\r\n+@rem ##########################################################################\r\n+\r\n+@rem Set local scope for the variables with windows NT shell\r\n+if \"%OS%\"==\"Windows_NT\" setlocal\r\n+\r\n+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\n+set DEFAULT_JVM_OPTS=\r\n+\r\n+set DIRNAME=%~dp0\r\n+if \"%DIRNAME%\" == \"\" set DIRNAME=.\r\n+set APP_BASE_NAME=%~n0\r\n+set APP_HOME=%DIRNAME%\r\n+\r\n+@rem Find java.exe\r\n+if defined JAVA_HOME goto findJavaFromJavaHome\r\n+\r\n+set JAVA_EXE=java.exe\r\n+%JAVA_EXE% -version >NUL 2>&1\r\n+if \"%ERRORLEVEL%\" == \"0\" goto init\r\n+\r\n+echo.\r\n+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\n+echo.\r\n+echo Please set the JAVA_HOME variable in your environment to match the\r\n+echo location of your Java installation.\r\n+\r\n+goto fail\r\n+\r\n+:findJavaFromJavaHome\r\n+set JAVA_HOME=%JAVA_HOME:\"=%\r\n+set JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n+\r\n+if exist \"%JAVA_EXE%\" goto init\r\n+\r\n+echo.\r\n+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\n+echo.\r\n+echo Please set the JAVA_HOME variable in your environment to match the\r\n+echo location of your Java installation.\r\n+\r\n+goto fail\r\n+\r\n+:init\r\n+@rem Get command-line arguments, handling Windowz variants\r\n+\r\n+if not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n+if \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n+\r\n+:win9xME_args\r\n+@rem Slurp the command line arguments.\r\n+set CMD_LINE_ARGS=\r\n+set _SKIP=2\r\n+\r\n+:win9xME_args_slurp\r\n+if \"x%~1\" == \"x\" goto execute\r\n+\r\n+set CMD_LINE_ARGS=%*\r\n+goto execute\r\n+\r\n+:4NT_args\r\n+@rem Get arguments from the 4NT Shell from JP Software\r\n+set CMD_LINE_ARGS=%$\r\n+\r\n+:execute\r\n+@rem Setup the command line\r\n+\r\n+set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n+\r\n+@rem Execute Gradle\r\n+\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n+\r\n+:end\r\n+@rem End local scope for the variables with windows NT shell\r\n+if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n+\r\n+:fail\r\n+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\n+rem the _cmd.exe /c_ return code!\r\n+if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\n+exit /b 1\r\n+\r\n+:mainEnd\r\n+if \"%OS%\"==\"Windows_NT\" endlocal\r\n+\r\n+:omega\r\ndiff --git a/android/src/main/java/org/reactnative/MutableImage.java b/android/src/main/java/org/reactnative/MutableImage.java\nnew file mode 100644\nindex 0000000..8d5fcc3\n--- /dev/null\n+++ b/android/src/main/java/org/reactnative/MutableImage.java\n@@ -0,0 +1,272 @@\n+package org.reactnative;\n+\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.graphics.Matrix;\n+import android.media.ExifInterface;\n+import android.util.Base64;\n+import android.util.Log;\n+\n+import com.drew.imaging.ImageMetadataReader;\n+import com.drew.imaging.ImageProcessingException;\n+import com.drew.metadata.Directory;\n+import com.drew.metadata.Metadata;\n+import com.drew.metadata.MetadataException;\n+import com.drew.metadata.Tag;\n+import com.drew.metadata.exif.ExifIFD0Directory;\n+import com.facebook.react.bridge.ReadableMap;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public class MutableImage {\n+    private static final String TAG = \"RNCamera\";\n+\n+    private final byte[] originalImageData;\n+    private Bitmap currentRepresentation;\n+    private Metadata originalImageMetaData;\n+    private boolean hasBeenReoriented = false;\n+\n+    public MutableImage(byte[] originalImageData) {\n+        this.originalImageData = originalImageData;\n+        this.currentRepresentation = toBitmap(originalImageData);\n+    }\n+\n+    public void mirrorImage() throws ImageMutationFailedException {\n+        Matrix m = new Matrix();\n+\n+        m.preScale(-1, 1);\n+\n+        Bitmap bitmap = Bitmap.createBitmap(\n+                currentRepresentation,\n+                0,\n+                0,\n+                currentRepresentation.getWidth(),\n+                currentRepresentation.getHeight(),\n+                m,\n+                false\n+        );\n+\n+        if (bitmap == null)\n+            throw new ImageMutationFailedException(\"failed to mirror\");\n+\n+        this.currentRepresentation = bitmap;\n+    }\n+\n+    public void fixOrientation() throws ImageMutationFailedException {\n+        try {\n+            Metadata metadata = originalImageMetaData();\n+\n+            ExifIFD0Directory exifIFD0Directory = metadata.getFirstDirectoryOfType(ExifIFD0Directory.class);\n+            if (exifIFD0Directory == null) {\n+                return;\n+            } else if (exifIFD0Directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)) {\n+                int exifOrientation = exifIFD0Directory.getInt(ExifIFD0Directory.TAG_ORIENTATION);\n+                if(exifOrientation != 1) {\n+                    rotate(exifOrientation);\n+                    exifIFD0Directory.setInt(ExifIFD0Directory.TAG_ORIENTATION, 1);\n+                }\n+            }\n+        } catch (ImageProcessingException | IOException | MetadataException e) {\n+            throw new ImageMutationFailedException(\"failed to fix orientation\", e);\n+        }\n+    }\n+\n+    //see http://www.impulseadventure.com/photo/exif-orientation.html\n+    private void rotate(int exifOrientation) throws ImageMutationFailedException {\n+        final Matrix bitmapMatrix = new Matrix();\n+        switch (exifOrientation) {\n+            case 1:\n+                return;//no rotation required\n+            case 2:\n+                bitmapMatrix.postScale(-1, 1);\n+                break;\n+            case 3:\n+                bitmapMatrix.postRotate(180);\n+                break;\n+            case 4:\n+                bitmapMatrix.postRotate(180);\n+                bitmapMatrix.postScale(-1, 1);\n+                break;\n+            case 5:\n+                bitmapMatrix.postRotate(90);\n+                bitmapMatrix.postScale(-1, 1);\n+                break;\n+            case 6:\n+                bitmapMatrix.postRotate(90);\n+                break;\n+            case 7:\n+                bitmapMatrix.postRotate(270);\n+                bitmapMatrix.postScale(-1, 1);\n+                break;\n+            case 8:\n+                bitmapMatrix.postRotate(270);\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        Bitmap transformedBitmap = Bitmap.createBitmap(\n+                currentRepresentation,\n+                0,\n+                0,\n+                currentRepresentation.getWidth(),\n+                currentRepresentation.getHeight(),\n+                bitmapMatrix,\n+                false\n+        );\n+\n+        if (transformedBitmap == null)\n+            throw new ImageMutationFailedException(\"failed to rotate\");\n+\n+        this.currentRepresentation = transformedBitmap;\n+        this.hasBeenReoriented = true;\n+    }\n+\n+    private static Bitmap toBitmap(byte[] data) {\n+        try {\n+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n+            Bitmap photo = BitmapFactory.decodeStream(inputStream);\n+            inputStream.close();\n+            return photo;\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Will not happen\", e);\n+        }\n+    }\n+\n+    public String toBase64(int jpegQualityPercent) {\n+        return Base64.encodeToString(toJpeg(currentRepresentation, jpegQualityPercent), Base64.DEFAULT);\n+    }\n+\n+    public void writeDataToFile(File file, ReadableMap options, int jpegQualityPercent) throws IOException {\n+        FileOutputStream fos = new FileOutputStream(file);\n+        fos.write(toJpeg(currentRepresentation, jpegQualityPercent));\n+        fos.close();\n+\n+        try {\n+            ExifInterface exif = new ExifInterface(file.getAbsolutePath());\n+\n+            // copy original exif data to the output exif...\n+            // unfortunately, this Android ExifInterface class doesn't understand all the tags so we lose some\n+            for (Directory directory : originalImageMetaData().getDirectories()) {\n+                for (Tag tag : directory.getTags()) {\n+                    int tagType = tag.getTagType();\n+                    Object object = directory.getObject(tagType);\n+                    exif.setAttribute(tag.getTagName(), object.toString());\n+                }\n+            }\n+\n+            writeLocationExifData(options, exif);\n+\n+            if(hasBeenReoriented)\n+                rewriteOrientation(exif);\n+\n+            exif.saveAttributes();\n+        } catch (ImageProcessingException  | IOException e) {\n+            Log.e(TAG, \"failed to save exif data\", e);\n+        }\n+    }\n+\n+    private void rewriteOrientation(ExifInterface exif) {\n+        exif.setAttribute(ExifInterface.TAG_ORIENTATION, String.valueOf(ExifInterface.ORIENTATION_NORMAL));\n+    }\n+\n+    private void writeLocationExifData(ReadableMap options, ExifInterface exif) {\n+        if(!options.hasKey(\"metadata\"))\n+            return;\n+\n+        ReadableMap metadata = options.getMap(\"metadata\");\n+        if (!metadata.hasKey(\"location\"))\n+            return;\n+\n+        ReadableMap location = metadata.getMap(\"location\");\n+        if(!location.hasKey(\"coords\"))\n+            return;\n+\n+        try {\n+            ReadableMap coords = location.getMap(\"coords\");\n+            double latitude = coords.getDouble(\"latitude\");\n+            double longitude = coords.getDouble(\"longitude\");\n+\n+            GPS.writeExifData(latitude, longitude, exif);\n+        } catch (IOException e) {\n+            Log.e(TAG, \"Couldn't write location data\", e);\n+        }\n+    }\n+\n+    private Metadata originalImageMetaData() throws ImageProcessingException, IOException {\n+        if(this.originalImageMetaData == null) {//this is expensive, don't do it more than once\n+            originalImageMetaData = ImageMetadataReader.readMetadata(\n+                    new BufferedInputStream(new ByteArrayInputStream(originalImageData)),\n+                    originalImageData.length\n+            );\n+        }\n+        return originalImageMetaData;\n+    }\n+\n+    private static byte[] toJpeg(Bitmap bitmap, int quality) throws OutOfMemoryError {\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);\n+\n+        try {\n+            return outputStream.toByteArray();\n+        } finally {\n+            try {\n+                outputStream.close();\n+            } catch (IOException e) {\n+                Log.e(TAG, \"problem compressing jpeg\", e);\n+            }\n+        }\n+    }\n+\n+    public static class ImageMutationFailedException extends Exception {\n+        public ImageMutationFailedException(String detailMessage, Throwable throwable) {\n+            super(detailMessage, throwable);\n+        }\n+\n+        public ImageMutationFailedException(String detailMessage) {\n+            super(detailMessage);\n+        }\n+    }\n+\n+    private static class GPS {\n+        public static void writeExifData(double latitude, double longitude, ExifInterface exif) throws IOException {\n+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSecods(latitude));\n+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, latitudeRef(latitude));\n+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSecods(longitude));\n+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, longitudeRef(longitude));\n+        }\n+\n+        private static String latitudeRef(double latitude) {\n+            return latitude < 0.0d ? \"S\" : \"N\";\n+        }\n+\n+        private static String longitudeRef(double longitude) {\n+            return longitude < 0.0d ? \"W\" : \"E\";\n+        }\n+\n+        private static String toDegreeMinuteSecods(double latitude) {\n+            latitude = Math.abs(latitude);\n+            int degree = (int) latitude;\n+            latitude *= 60;\n+            latitude -= (degree * 60.0d);\n+            int minute = (int) latitude;\n+            latitude *= 60;\n+            latitude -= (minute * 60.0d);\n+            int second = (int) (latitude * 1000.0d);\n+\n+            StringBuffer sb = new StringBuffer();\n+            sb.append(degree);\n+            sb.append(\"/1,\");\n+            sb.append(minute);\n+            sb.append(\"/1,\");\n+            sb.append(second);\n+            sb.append(\"/1000,\");\n+            return sb.toString();\n+        }\n+    }\n+}\ndiff --git a/android/src/main/java/org/reactnative/camera/CameraModule.java b/android/src/main/java/org/reactnative/camera/CameraModule.java\nnew file mode 100644\nindex 0000000..90e0c1e\n--- /dev/null\n+++ b/android/src/main/java/org/reactnative/camera/CameraModule.java\n@@ -0,0 +1,211 @@\n+package org.reactnative.camera;\n+\n+import android.content.Context;\n+\n+import org.reactnative.facedetector.ExpoFaceDetector;\n+import com.facebook.react.bridge.Arguments;\n+import com.facebook.react.bridge.Promise;\n+import com.facebook.react.bridge.ReactApplicationContext;\n+import com.facebook.react.bridge.ReactContextBaseJavaModule;\n+import com.facebook.react.bridge.ReactMethod;\n+import com.facebook.react.bridge.ReadableMap;\n+import com.facebook.react.bridge.WritableArray;\n+import com.google.android.cameraview.AspectRatio;\n+import com.google.zxing.BarcodeFormat;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+public class CameraModule extends ReactContextBaseJavaModule {\n+  private static final String TAG = \"CameraModule\";\n+\n+  private static ReactApplicationContext mReactContext;\n+\n+//  private static ScopedContext mScopedContext;\n+  static final int VIDEO_2160P = 0;\n+  static final int VIDEO_1080P = 1;\n+  static final int VIDEO_720P = 2;\n+  static final int VIDEO_480P = 3;\n+  static final int VIDEO_4x3 = 4;\n+\n+  public static final Map<String, Object> VALID_BARCODE_TYPES =\n+      Collections.unmodifiableMap(new HashMap<String, Object>() {\n+        {\n+          put(\"aztec\", BarcodeFormat.AZTEC.toString());\n+          put(\"ean13\", BarcodeFormat.EAN_13.toString());\n+          put(\"ean8\", BarcodeFormat.EAN_8.toString());\n+          put(\"qr\", BarcodeFormat.QR_CODE.toString());\n+          put(\"pdf417\", BarcodeFormat.PDF_417.toString());\n+          put(\"upc_e\", BarcodeFormat.UPC_E.toString());\n+          put(\"datamatrix\", BarcodeFormat.DATA_MATRIX.toString());\n+          put(\"code39\", BarcodeFormat.CODE_39.toString());\n+          put(\"code93\", BarcodeFormat.CODE_93.toString());\n+          put(\"interleaved2of5\", BarcodeFormat.ITF.toString());\n+          put(\"codabar\", BarcodeFormat.CODABAR.toString());\n+          put(\"code128\", BarcodeFormat.CODE_128.toString());\n+          put(\"maxicode\", BarcodeFormat.MAXICODE.toString());\n+          put(\"rss14\", BarcodeFormat.RSS_14.toString());\n+          put(\"rssexpanded\", BarcodeFormat.RSS_EXPANDED.toString());\n+          put(\"upc_a\", BarcodeFormat.UPC_A.toString());\n+          put(\"upc_ean\", BarcodeFormat.UPC_EAN_EXTENSION.toString());\n+      ",
    "Improve look of notification GUI , improve StartupQuery API": "diff --git a/src/main/java/net/minecraftforge/fml/StartupQuery.java b/src/main/java/net/minecraftforge/fml/StartupQuery.java\nindex de36cc815..a4d8d3064 100644\n--- a/src/main/java/net/minecraftforge/fml/StartupQuery.java\n+++ b/src/main/java/net/minecraftforge/fml/StartupQuery.java\n@@ -25,6 +25,15 @@ import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import com.google.common.base.Strings;\n+\n import net.minecraft.client.Minecraft;\n import net.minecraft.server.MinecraftServer;\n import net.minecraft.server.dedicated.DedicatedServer;\n@@ -34,31 +43,74 @@ import net.minecraftforge.fml.client.gui.screen.NotificationScreen;\n import net.minecraftforge.fml.common.thread.EffectiveSide;\n import net.minecraftforge.fml.loading.FMLEnvironment;\n import net.minecraftforge.fml.server.ServerLifecycleHooks;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.apache.logging.log4j.Marker;\n-import org.apache.logging.log4j.MarkerManager;\n-\n-import javax.annotation.Nullable;\n \n public class StartupQuery {\n+\n+    public static class QueryBuilder\n+    {\n+        private String header = \"\";\n+        private String text = \"\";\n+        private String action = \"\";\n+\n+        QueryBuilder() {}\n+\n+        public QueryBuilder header(String header)\n+        {\n+            this.header = Strings.nullToEmpty(header);\n+            return this;\n+        }\n+\n+        public QueryBuilder text(String text)\n+        {\n+            this.text = Strings.nullToEmpty(text);\n+            return this;\n+        }\n+\n+        public QueryBuilder action(String action)\n+        {\n+            this.action = Strings.nullToEmpty(action);\n+            return this;\n+        }\n+\n+        public boolean confirm()\n+        {\n+            return build(new AtomicBoolean()).getResult();\n+        }\n+\n+        public void notification()\n+        {\n+            build(null);\n+        }\n+\n+        private StartupQuery build(AtomicBoolean result)\n+        {\n+            StartupQuery query = new StartupQuery(header, text, action, new AtomicBoolean());\n+            query.execute();\n+            return query;\n+        }\n+    }\n+\n     // internal class/functionality, do not use\n     private static final Logger LOGGER = LogManager.getLogger();\n     private static final Marker SQ = MarkerManager.getMarker(\"STARTUPQUERY\");\n \n+    public static QueryBuilder builder()\n+    {\n+        return new QueryBuilder();\n+    }\n+\n+    @Deprecated // TODO 1.16 remove\n     public static boolean confirm(String text)\n     {\n-        StartupQuery query = new StartupQuery(text, new AtomicBoolean());\n-        query.execute();\n-        return query.getResult();\n+        return builder().text(text).confirm();\n     }\n \n     private InterruptedException exception;\n \n+    @Deprecated // TODO 1.16 remove\n     public static void notify(String text)\n     {\n-        StartupQuery query = new StartupQuery(text, null);\n-        query.execute();\n+        builder().text(text).notification();\n     }\n \n     public static void abort()\n@@ -116,9 +168,11 @@ public class StartupQuery {\n     private static volatile boolean aborted = false;\n \n \n-    private StartupQuery(String text, @Nullable AtomicBoolean result)\n+    private StartupQuery(String header, String text, String action, @Nullable AtomicBoolean result)\n     {\n+        this.header = header;\n         this.text = text;\n+        this.action = action;\n         this.result = result;\n     }\n \n@@ -133,11 +187,21 @@ public class StartupQuery {\n         this.result.set(result);\n     }\n \n+    public String getHeader()\n+    {\n+        return header;\n+    }\n+\n     public String getText()\n     {\n         return text;\n     }\n \n+    public String getAction()\n+    {\n+        return action;\n+    }\n+\n     public boolean isSynchronous()\n     {\n         return synchronous;\n@@ -194,7 +258,9 @@ public class StartupQuery {\n         }\n     }\n \n-    private String text;\n+    private final String header;\n+    private final String text;\n+    private final String action;\n     @Nullable\n     private AtomicBoolean result;\n     private CountDownLatch signal = new CountDownLatch(1);\ndiff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java\nindex 37f817fb9..140b7cb5a 100644\n--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java\n+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java\n@@ -30,16 +30,16 @@ public class ConfirmationScreen extends NotificationScreen\n     }\n \n     @Override\n-    public void init()\n+    protected void addConfirmationButtons()\n     {\n-        this.addButton(new Button(this.width / 2 - 104, this.height - 38, 100, 20, ForgeI18n.parseMessage(\"gui.yes\"), b ->\n+        this.addButton(new Button(this.width / 2 - 104, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(\"gui.yes\"), b ->\n             {\n                 ConfirmationScreen.this.minecraft.currentScreen = null;\n                 query.setResult(true);\n                 query.finish();\n             }\n         ));\n-        this.addButton(new Button(this.width / 2 + 4, this.height - 38, 100, 20, ForgeI18n.parseMessage(\"gui.no\"), b ->\n+        this.addButton(new Button(this.width / 2 + 4, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(\"gui.no\"), b ->\n             {\n                 ConfirmationScreen.this.minecraft.currentScreen = null;\n                 query.setResult(false);\ndiff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java\nindex 5b96f14fc..94a0c91a8 100644\n--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java\n+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java\n@@ -20,23 +20,81 @@\n package net.minecraftforge.fml.client.gui.screen;\n \n import net.minecraft.client.gui.widget.button.Button;\n+import net.minecraft.client.renderer.Tessellator;\n+import net.minecraft.client.Minecraft;\n import net.minecraft.client.gui.screen.Screen;\n import net.minecraft.client.resources.I18n;\n import net.minecraft.util.text.TranslationTextComponent;\n+import net.minecraftforge.client.gui.ScrollPanel;\n import net.minecraftforge.fml.StartupQuery;\n \n public class NotificationScreen extends Screen\n {\n+    private class TextPanel extends ScrollPanel\n+    {\n+        TextPanel(Minecraft client, int width, int height, int top, int left)\n+        {\n+            super(client, width, height, top, left);\n+        }\n+\n+        @Override\n+        protected int getContentHeight()\n+        {\n+            int height = 0;\n+            height += (textLines.length * font.FONT_HEIGHT) + 4;\n+            if (height < this.height - 50)\n+                height = this.height - 50;\n+            return height;\n+        }\n+\n+        @Override\n+        protected void drawPanel(int entryRight, int relativeY, Tessellator tess, int mouseX, int mouseY)\n+        {\n+            drawCenteredLines(relativeY, textLines);\n+        }\n+\n+        @Override\n+        protected int getScrollAmount()\n+        {\n+            return font.FONT_HEIGHT * 3;\n+        }\n+    }\n+\n+    protected static final int PADDING = 6;\n+\n+    protected final StartupQuery query;\n+\n+    private final String[] headerLines;\n+    private final String[] textLines;\n+    private final String action;\n+\n+    private ScrollPanel textPanel;\n+\n     public NotificationScreen(StartupQuery query)\n     {\n         super(new TranslationTextComponent(\"fml.menu.notification.title\"));\n         this.query = query;\n+        this.headerLines = query.getHeader().isEmpty() ? new String[0] : query.getHeader().split(\"\\n\");\n+        this.textLines = query.getText().split(\"\\n\");\n+        this.action = query.getAction();\n     }\n \n     @Override\n     public void init()\n     {\n-        this.buttons.add(new Button(this.width / 2 - 100, this.height - 38, 200, 20, I18n.format(\"gui.done\"), b -> {\n+        super.init();\n+        int panelY = PADDING + headerLines.length * font.FONT_HEIGHT + PADDING;\n+        int panelHeight = this.height - PADDING - 20 - panelY;\n+        if (!action.isEmpty()) {\n+            panelHeight = panelHeight - font.FONT_HEIGHT - PADDING; \n+        }\n+        textPanel = new TextPanel(this.minecraft, this.width - (PADDING * 2), panelHeight, panelY, PADDING);\n+        this.children.add(textPanel);\n+        addConfirmationButtons();\n+    }\n+\n+    protected void addConfirmationButtons() {\n+        this.buttons.add(new Button(this.width / 2 - 100, this.height - PADDING - 20, 200, 20, I18n.format(\"gui.done\"), b -> {\n             NotificationScreen.this.minecraft.displayGuiScreen(null);\n             query.finish();\n         }));\n@@ -47,29 +105,28 @@ public class NotificationScreen extends Screen\n     {\n         this.renderBackground();\n \n-        String[] lines = query.getText().split(\"\\n\");\n+        drawCenteredLines(PADDING, headerLines);\n \n-        int spaceAvailable = this.height - 38 - 20;\n-        int spaceRequired = Math.min(spaceAvailable, 10 + 10 * lines.length);\n-\n-        int offset = 10 + (spaceAvailable - spaceRequired) / 2; // vertically centered\n+        if (textPanel != null)\n+        {\n+            textPanel.render(mouseX, mouseY, partialTicks);\n+        }\n \n-        for (String line : lines)\n+        if (!action.isEmpty())\n         {\n-            if (offset >= spaceAvailable)\n-            {\n-                this.drawCenteredString(this.font, \"...\", this.width / 2, offset, 0xFFFFFF);\n-                break;\n-            }\n-            else\n-            {\n-                if (!line.isEmpty()) this.drawCenteredString(this.font, line, this.width / 2, offset, 0xFFFFFF);\n-                offset += 10;\n-            }\n+            drawCenteredString(font, action, this.width / 2, this.height - PADDING - 20 - font.FONT_HEIGHT, -1);\n         }\n \n         super.render(mouseX, mouseY, partialTicks);\n     }\n \n-    protected final StartupQuery query;\n+    protected void drawCenteredLines(int yStart, String... lines)\n+    {\n+        for (String line : lines)\n+        {\n+            if (!line.isEmpty())\n+                this.drawCenteredString(font, line, this.width / 2, yStart, 0xFFFFFF);\n+            yStart += font.FONT_HEIGHT;\n+        }\n+    }\n }\ndiff --git a/src/main/java/net/minecraftforge/registries/GameData.java b/src/main/java/net/minecraftforge/registries/GameData.java\nindex 17b58fb7d..9e14ed1b0 100644\n--- a/src/main/java/net/minecraftforge/registries/GameData.java\n+++ b/src/main/java/net/minecraftforge/registries/GameData.java\n@@ -99,8 +99,6 @@ import java.util.stream.Collectors;\n \n import static net.minecraftforge.registries.ForgeRegistry.REGISTRIES;\n \n-import net.minecraftforge.fml.common.EnhancedRuntimeException.WrappedPrintStream;\n-\n /**\n  * INTERNAL ONLY\n  * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS\n@@ -728,16 +726,23 @@ public class GameData\n             List<ResourceLocation> missingRegs = snapshot.keySet().stream().filter(name -> !RegistryManager.ACTIVE.registries.containsKey(name)).collect(Collectors.toList());\n             if (missingRegs.size() > 0)\n             {\n-                String text = \"Forge Mod Loader detected missing/unknown registrie(s).\\n\\n\" +\n+                String header = \"Forge Mod Loader detected missing/unknown registrie(s).\\n\\n\" +\n                         \"There are \" + missingRegs.size() + \" missing registries in this save.\\n\" +\n                         \"If you continue the missing registries will get removed.\\n\" +\n-                        \"This may cause issues, it is advised that you create a world backup before continuing.\\n\\n\" +\n-                        \"Missing Registries:\\n\";\n+                        \"This may cause issues, it is advised that you create a world backup before continuing.\\n\\n\";\n+\n+                StringBuilder text = new StringBuilder(\"Missing Registries:\\n\");\n \n                 for (ResourceLocation s : missingRegs)\n-                    text += s.toString() + \"\\n\";\n+                    text.append(s).append(\"\\n\");\n+\n+                boolean confirmed = StartupQuery.builder()\n+                        .header(header)\n+                        .text(text.toString())\n+                        .action(\"Continue anyway?\")\n+                        .confirm();\n \n-                if (!StartupQuery.confirm(text))\n+                if (!confirmed)\n                     StartupQuery.abort();\n             }\n         }\n@@ -816,19 +821,24 @@ public class GameData\n \n             if (!defaulted.isEmpty())\n             {\n-                StringBuilder buf = new StringBuilder();\n-                buf.append(\"Forge Mod Loader detected missing registry entries.\\n\\n\")\n-                   .append(\"There are \").append(defaulted.size()).append(\" missing entries in this save.\\n\")\n-                   .append(\"If you continue the missing entries will get removed.\\n\")\n-                   .append(\"A world backup will be automatically created in your saves directory.\\n\\n\");\n+                String header = \"Forge Mod Loader detected missing registry entries.\\n\\n\" +\n+                   \"There are \" + defaulted.size() + \" missing entries in this save.\\n\" +\n+                   \"If you continue the missing entries will get removed.\\n\" +\n+                   \"A world backup will be automatically created in your saves directory.\\n\\n\";\n \n+                StringBuilder buf = new StringBuilder();\n                 defaulted.asMap().forEach((name, entries) ->\n                 {\n                     buf.append(\"Missing \").append(name).append(\":\\n\");\n      ",
    "Remove component that no longer exists .": "diff --git a/maven-project/src/main/resources/META-INF/plexus/components.xml b/maven-project/src/main/resources/META-INF/plexus/components.xml\nindex 7c038c2fe..78b4b6ae6 100644\n--- a/maven-project/src/main/resources/META-INF/plexus/components.xml\n+++ b/maven-project/src/main/resources/META-INF/plexus/components.xml\n@@ -245,17 +245,6 @@ under the License.\n       <implementation>org.apache.maven.project.path.DefaultPathTranslator</implementation>\n     </component>\n     \n-    <component>\n-      <role>org.apache.maven.project.ModelResolver</role>\n-      <role-hint>default</role-hint>\n-      <implementation>org.apache.maven.project.ModelResolver</implementation>\n-      <requirements>\n-        <requirement>\n-\t\t      <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>\n-        </requirement>\n-      </requirements>\n-    </component>\n-    \n     <component>\n       <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>\n       <role-hint>maven</role-hint>",
    "Fix a potential concurrency issue for loading CDB file .": "diff --git a/src/com/android/launcher3/DropTarget.java b/src/com/android/launcher3/DropTarget.java\nindex c1aed9812c..b27abc4369 100644\n--- a/src/com/android/launcher3/DropTarget.java\n+++ b/src/com/android/launcher3/DropTarget.java\n@@ -28,6 +28,7 @@ import com.android.launcher3.folder.FolderNameProvider;\n import com.android.launcher3.logging.InstanceId;\n import com.android.launcher3.logging.InstanceIdSequence;\n import com.android.launcher3.model.data.ItemInfo;\n+import com.android.launcher3.util.Executors;\n \n /**\n  * Interface defining an object that can receive a drag.\n@@ -84,7 +85,9 @@ public interface DropTarget {\n \n         public DragObject(Context context) {\n             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {\n-                folderNameProvider = FolderNameProvider.newInstance(context);\n+                Executors.MODEL_EXECUTOR.post(() -> {\n+                    folderNameProvider = FolderNameProvider.newInstance(context);\n+                });\n             }\n         }\n \ndiff --git a/src/com/android/launcher3/folder/Folder.java b/src/com/android/launcher3/folder/Folder.java\nindex 7998c2d50e..301f79c405 100644\n--- a/src/com/android/launcher3/folder/Folder.java\n+++ b/src/com/android/launcher3/folder/Folder.java\n@@ -1005,7 +1005,8 @@ public class Folder extends AbstractFloatingView implements ClipPathView, DragSo\n         if (!items.isEmpty()) {\n             mLauncher.getModelWriter().moveItemsInDatabase(items, mInfo.id, 0);\n         }\n-        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind) {\n+        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind\n+                && total > 1 /* no need to update if there's one icon */) {\n             Executors.MODEL_EXECUTOR.post(() -> {\n                 FolderNameInfo[] nameInfos =\n                         new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];\ndiff --git a/src/com/android/launcher3/folder/FolderIcon.java b/src/com/android/launcher3/folder/FolderIcon.java\nindex b40b1e2ebc..7af4664a05 100644\n--- a/src/com/android/launcher3/folder/FolderIcon.java\n+++ b/src/com/android/launcher3/folder/FolderIcon.java\n@@ -409,7 +409,7 @@ public class FolderIcon extends FrameLayout implements FolderListener, IconLabel\n             FolderNameInfo[] nameInfos =\n                     new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];\n             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {\n-                Executors.UI_HELPER_EXECUTOR.post(() -> {\n+                Executors.MODEL_EXECUTOR.post(() -> {\n                     d.folderNameProvider.getSuggestedFolderName(\n                             getContext(), mInfo.contents, nameInfos);\n                     showFinalView(finalIndex, item, nameInfos, d.logInstanceId);\ndiff --git a/src/com/android/launcher3/folder/FolderNameProvider.java b/src/com/android/launcher3/folder/FolderNameProvider.java\nindex 7731e6e3f3..2be0bcee17 100644\n--- a/src/com/android/launcher3/folder/FolderNameProvider.java\n+++ b/src/com/android/launcher3/folder/FolderNameProvider.java\n@@ -31,6 +31,7 @@ import com.android.launcher3.model.data.AppInfo;\n import com.android.launcher3.model.data.FolderInfo;\n import com.android.launcher3.model.data.WorkspaceItemInfo;\n import com.android.launcher3.util.IntSparseArrayMap;\n+import com.android.launcher3.util.Preconditions;\n import com.android.launcher3.util.ResourceBasedOverride;\n \n import java.util.ArrayList;\n@@ -64,6 +65,7 @@ public class FolderNameProvider implements ResourceBasedOverride {\n     public static FolderNameProvider newInstance(Context context) {\n         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,\n                 context.getApplicationContext(), R.string.folder_name_provider_class);\n+        Preconditions.assertWorkerThread();\n         fnp.load(context);\n \n         return fnp;\n@@ -71,6 +73,7 @@ public class FolderNameProvider implements ResourceBasedOverride {\n \n     public static FolderNameProvider newInstance(Context context, List<AppInfo> appInfos,\n             IntSparseArrayMap<FolderInfo> folderInfos) {\n+        Preconditions.assertWorkerThread();\n         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,\n                 context.getApplicationContext(), R.string.folder_name_provider_class);\n         fnp.load(appInfos, folderInfos);\n@@ -94,7 +97,7 @@ public class FolderNameProvider implements ResourceBasedOverride {\n     public void getSuggestedFolderName(Context context,\n             ArrayList<WorkspaceItemInfo> workspaceItemInfos,\n             FolderNameInfo[] nameInfos) {\n-\n+        Preconditions.assertWorkerThread();\n         if (DEBUG) {\n             Log.d(TAG, \"getSuggestedFolderName:\" + Arrays.toString(nameInfos));\n         }",
    "removed highwater check from ReadKafkaP and adapted emitCooperatively": "diff --git a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java\nindex 7991e8b9c1..68b36094ec 100644\n--- a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java\n+++ b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java\n@@ -21,22 +21,21 @@ import com.hazelcast.jet.Distributed.Function;\n import com.hazelcast.jet.Processor;\n import com.hazelcast.jet.ProcessorMetaSupplier;\n import com.hazelcast.jet.ProcessorSupplier;\n+import com.hazelcast.jet.Traverser;\n import com.hazelcast.jet.impl.util.Util;\n import com.hazelcast.nio.Address;\n import com.hazelcast.util.Preconditions;\n-import org.apache.kafka.clients.consumer.ConsumerRecord;\n-import org.apache.kafka.clients.consumer.ConsumerRecords;\n import org.apache.kafka.clients.consumer.KafkaConsumer;\n-import org.apache.kafka.common.TopicPartition;\n \n import javax.annotation.Nonnull;\n import java.io.Closeable;\n-import java.util.AbstractMap;\n import java.util.Arrays;\n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Map.Entry;\n import java.util.Properties;\n \n+import static com.hazelcast.jet.Traversers.traverseIterable;\n+import static com.hazelcast.jet.Util.entry;\n import static java.util.stream.Collectors.toList;\n import static java.util.stream.IntStream.range;\n \n@@ -52,7 +51,8 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab\n     private static final int POLL_TIMEOUT_MS = 100;\n     private final Properties properties;\n     private final String[] topicIds;\n-    private KafkaConsumer consumer;\n+    private KafkaConsumer<K, V> consumer;\n+    private Traverser<Entry<K, V>> traverser;\n \n     private ReadKafkaP(String[] topicIds, Properties properties) {\n         this.topicIds = topicIds;\n@@ -85,6 +85,7 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab\n         properties.put(\"enable.auto.commit\", false);\n         consumer = new KafkaConsumer<>(properties);\n         consumer.subscribe(Arrays.asList(topicIds));\n+        traverser = () -> null;\n     }\n \n     @Override\n@@ -94,41 +95,13 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab\n \n     @Override\n     public boolean complete() {\n-        ConsumerRecords<K, V> records = consumer.poll(POLL_TIMEOUT_MS);\n-        if (records.isEmpty()) {\n-            return false;\n+        if (emitCooperatively(traverser)) {\n+            consumer.commitSync();\n+            traverser = traverseIterable(consumer.poll(POLL_TIMEOUT_MS)).map(r -> entry(r.key(), r.value()));\n         }\n-        Iterator<TopicPartition> iterator = records.partitions().iterator();\n-        while (iterator.hasNext()) {\n-            TopicPartition topicPartition = iterator.next();\n-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);\n-            for (ConsumerRecord<K, V> record : partitionRecords) {\n-                K key = record.key();\n-                V value = record.value();\n-                emit(new AbstractMap.SimpleImmutableEntry<>(key, value));\n-                if (getOutbox().isHighWater()) {\n-                    consumer.seek(topicPartition, record.offset() + 1);\n-                    seekToTheBeginning(records, iterator);\n-                    consumer.commitSync();\n-                    return false;\n-                }\n-            }\n-        }\n-        consumer.commitSync();\n         return false;\n     }\n \n-    private void seekToTheBeginning(ConsumerRecords<K, V> records, Iterator<TopicPartition> iterator) {\n-        while (iterator.hasNext()) {\n-            TopicPartition topicPartition = iterator.next();\n-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);\n-            if (!partitionRecords.isEmpty()) {\n-                long offset = partitionRecords.get(0).offset();\n-                consumer.seek(topicPartition, offset);\n-            }\n-        }\n-    }\n-\n     @Override\n     public void close() {\n         consumer.close();\n@@ -146,10 +119,6 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab\n             this.properties.put(\"enable.auto.commit\", false);\n         }\n \n-        @Override\n-        public void init(@Nonnull Context context) {\n-        }\n-\n         @Override @Nonnull\n         public Function<Address, ProcessorSupplier> get(@Nonnull List<Address> addresses) {\n             return address -> new Supplier<>(topicIds, properties);",
    "Add method to rest api interceptors to allow enhancing the DeploymentBuilder": "diff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java\nindex aa186538f9..350a2fff25 100644\n--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java\n+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java\n@@ -15,6 +15,7 @@ package org.flowable.app.rest;\n import org.flowable.app.api.repository.AppDefinition;\n import org.flowable.app.api.repository.AppDefinitionQuery;\n import org.flowable.app.api.repository.AppDeployment;\n+import org.flowable.app.api.repository.AppDeploymentBuilder;\n import org.flowable.app.api.repository.AppDeploymentQuery;\n \n public interface AppRestApiInterceptor {\n@@ -28,6 +29,8 @@ public interface AppRestApiInterceptor {\n     void accessDeploymentsWithQuery(AppDeploymentQuery deploymentQuery);\n     \n     void executeNewDeploymentForTenantId(String tenantId);\n+\n+    void enhanceDeployment(AppDeploymentBuilder deploymentBuilder);\n     \n     void deleteDeployment(AppDeployment deployment);\n     \ndiff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java\nindex ca94247f9b..4663e99792 100644\n--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java\n+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java\n@@ -202,6 +202,10 @@ public class AppDeploymentCollectionResource {\n                 deploymentBuilder.tenantId(tenantId);\n             }\n \n+            if (restApiInterceptor != null) {\n+                restApiInterceptor.enhanceDeployment(deploymentBuilder);\n+            }\n+\n             AppDeployment deployment = deploymentBuilder.deploy();\n             response.setStatus(HttpStatus.CREATED.value());\n \ndiff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java\nindex 824ecef26a..211e1b5ec3 100644\n--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java\n+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java\n@@ -22,6 +22,7 @@ import org.flowable.cmmn.api.history.HistoricVariableInstanceQuery;\n import org.flowable.cmmn.api.repository.CaseDefinition;\n import org.flowable.cmmn.api.repository.CaseDefinitionQuery;\n import org.flowable.cmmn.api.repository.CmmnDeployment;\n+import org.flowable.cmmn.api.repository.CmmnDeploymentBuilder;\n import org.flowable.cmmn.api.repository.CmmnDeploymentQuery;\n import org.flowable.cmmn.api.runtime.CaseInstance;\n import org.flowable.cmmn.api.runtime.CaseInstanceBuilder;\n@@ -87,6 +88,8 @@ public interface CmmnRestApiInterceptor {\n     void accessDeploymentsWithQuery(CmmnDeploymentQuery deploymentQuery);\n     \n     void executeNewDeploymentForTenantId(String tenantId);\n+\n+    void enhanceDeployment(CmmnDeploymentBuilder cmmnDeploymentBuilder);\n     \n     void deleteDeployment(CmmnDeployment deployment);\n     \ndiff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java\nindex 85c832c565..9f0817b614 100644\n--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java\n+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java\n@@ -212,6 +212,10 @@ public class DeploymentCollectionResource {\n                 deploymentBuilder.tenantId(tenantId);\n             }\n \n+            if (restApiInterceptor != null) {\n+                restApiInterceptor.enhanceDeployment(deploymentBuilder);\n+            }\n+\n             CmmnDeployment deployment = deploymentBuilder.deploy();\n \n             response.setStatus(HttpStatus.CREATED.value());\ndiff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java\nindex 86d73dd1bc..d356d41a42 100644\n--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java\n+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java\n@@ -15,6 +15,7 @@ package org.flowable.dmn.rest.service.api;\n import org.flowable.dmn.api.DmnDecisionTable;\n import org.flowable.dmn.api.DmnDecisionTableQuery;\n import org.flowable.dmn.api.DmnDeployment;\n+import org.flowable.dmn.api.DmnDeploymentBuilder;\n import org.flowable.dmn.api.DmnDeploymentQuery;\n import org.flowable.dmn.api.DmnHistoricDecisionExecution;\n import org.flowable.dmn.api.DmnHistoricDecisionExecutionQuery;\n@@ -33,6 +34,8 @@ public interface DmnRestApiInterceptor {\n     void accessDeploymentsWithQuery(DmnDeploymentQuery deploymentQuery);\n     \n     void executeNewDeploymentForTenantId(String tenantId);\n+\n+    void enhanceDeployment(DmnDeploymentBuilder dmnDeploymentBuilder);\n     \n     void deleteDeployment(DmnDeployment deployment);\n     \ndiff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java\nindex 1eca4ea4db..77bd587bfb 100644\n--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java\n+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java\n@@ -183,6 +183,10 @@ public class DmnDeploymentCollectionResource {\n                 deploymentBuilder.tenantId(tenantId);\n             }\n \n+            if (restApiInterceptor != null) {\n+                restApiInterceptor.enhanceDeployment(deploymentBuilder);\n+            }\n+\n             DmnDeployment deployment = deploymentBuilder.deploy();\n \n             response.setStatus(HttpStatus.CREATED.value());\ndiff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java\nindex 154b1612d8..a06e5df1dc 100644\n--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java\n+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java\n@@ -15,6 +15,7 @@ package org.flowable.form.rest;\n import org.flowable.form.api.FormDefinition;\n import org.flowable.form.api.FormDefinitionQuery;\n import org.flowable.form.api.FormDeployment;\n+import org.flowable.form.api.FormDeploymentBuilder;\n import org.flowable.form.api.FormDeploymentQuery;\n import org.flowable.form.api.FormInfo;\n import org.flowable.form.api.FormInstance;\n@@ -41,6 +42,8 @@ public interface FormRestApiInterceptor {\n     void accessDeploymentsWithQuery(FormDeploymentQuery deploymentQuery);\n     \n     void executeNewDeploymentForTenantId(String tenantId);\n+\n+    void enhanceDeployment(FormDeploymentBuilder deploymentBuilder);\n     \n     void deleteDeployment(FormDeployment deployment);\n     \ndiff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java\nindex 6bc3a307c3..09b1e4736c 100644\n--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java\n+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java\n@@ -180,6 +180,10 @@ public class FormDeploymentCollectionResource {\n                 deploymentBuilder.tenantId(tenantId);\n             }\n \n+            if (restApiInterceptor != null) {\n+                restApiInterceptor.enhanceDeployment(deploymentBuilder);\n+            }\n+\n             FormDeployment deployment = deploymentBuilder.deploy();\n             response.setStatus(HttpStatus.CREATED.value());\n \ndiff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java\nindex 3b40aff23f..50aed9d22e 100644\n--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java\n+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java\n@@ -19,6 +19,7 @@ import org.flowable.engine.history.HistoricDetailQuery;\n import org.flowable.engine.history.HistoricProcessInstance;\n import org.flowable.engine.history.HistoricProcessInstanceQuery;\n import org.flowable.engine.repository.Deployment;\n+import org.flowable.engine.repository.DeploymentBuilder;\n import org.flowable.engine.repository.DeploymentQuery;\n import org.flowable.engine.repository.Model;\n import org.flowable.engine.repository.ModelQuery;\n@@ -113,6 +114,8 @@ public interface BpmnRestApiInterceptor {\n     void accessDeploymentsWithQuery(DeploymentQuery deploymentQuery);\n     \n     void executeNewDeploymentForTenantId(String tenantId);\n+\n+    void enhanceDeployment(DeploymentBuilder deploymentBuilder);\n     \n     void deleteDeployment(Deployment deployment);\n     \ndiff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java\nindex 70518860ed..748cf32889 100644\n--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java\n+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java\n@@ -215,6 +215,10 @@ public class DeploymentCollectionResource {\n                 deploymentBuilder.tenantId(tenantId);\n             }\n \n+            if (restApiInterceptor != null) {\n+                restApiInterceptor.enhanceDeployment(deploymentBuilder);\n+            }\n+\n             Deployment deployment = deploymentBuilder.deploy();\n \n             response.setStatus(HttpStatus.CREATED.value());",
    "Remove public visibility from the custom schedule method .": "diff --git a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java\nindex c0fb2fb0..b7e9dd79 100644\n--- a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java\n+++ b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java\n@@ -156,7 +156,7 @@ public abstract class ScheduledReporter implements Closeable, Reporter {\n      * Starts the reporter polling at the given period with the specific runnable action.\n      * Visible only for testing.\n      */\n-    synchronized public void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {\n+    synchronized void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {\n         if (this.scheduledFuture != null) {\n             throw new IllegalArgumentException(\"Reporter already started\");\n         }",
    "add tests": "diff --git a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java\nindex d662c5012b..98ba63fcba 100644\n--- a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java\n+++ b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java\n@@ -13,7 +13,6 @@ import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n import org.springframework.core.io.Resource;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -35,30 +34,25 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n     private final StringSerializer<Map<String, List<OneTimeTokenAccount>>> serializer = new OneTimeAccountSerializer();\n \n     public JsonGoogleAuthenticatorTokenCredentialRepository(final Resource location, final IGoogleAuthenticator googleAuthenticator,\n-                                                            final CipherExecutor<String, String> tokenCredentialCipher) {\n+        final CipherExecutor<String, String> tokenCredentialCipher) {\n         super(tokenCredentialCipher, googleAuthenticator);\n         this.location = location;\n     }\n \n     @Override\n-    public OneTimeTokenAccount get(final String username, final long id) {\n-        return get(username).stream().filter(ac -> ac.getId() == id).findFirst().orElse(null);\n+    public OneTimeTokenAccount get(final long id) {\n+        val accounts = readAccountsFromJsonRepository();\n+        return accounts.values()\n+            .stream()\n+            .flatMap(List::stream)\n+            .filter(ac -> ac.getId() == id)\n+            .findFirst()\n+            .orElse(null);\n     }\n \n     @Override\n-    public OneTimeTokenAccount get(final long id) {\n-        try {\n-            val accounts = readAccountsFromJsonRepository();\n-            return accounts.values()\n-                .stream()\n-                .flatMap(List::stream)\n-                .filter(ac -> ac.getId() == id)\n-                .findFirst()\n-                .orElse(null);\n-        } catch (final Exception e) {\n-            LoggingUtils.error(LOGGER, e);\n-        }\n-        return null;\n+    public OneTimeTokenAccount get(final String username, final long id) {\n+        return get(username).stream().filter(ac -> ac.getId() == id).findFirst().orElse(null);\n     }\n \n     @Override\n@@ -89,6 +83,17 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         return new ArrayList<>(0);\n     }\n \n+    @Override\n+    public Collection<? extends OneTimeTokenAccount> load() {\n+        try {\n+            return readAccountsFromJsonRepository().values()\n+                .stream().flatMap(List::stream).collect(Collectors.toList());\n+        } catch (final Exception e) {\n+            LoggingUtils.error(LOGGER, e);\n+        }\n+        return new ArrayList<>(0);\n+    }\n+\n     @Override\n     public OneTimeTokenAccount save(final OneTimeTokenAccount account) {\n         try {\n@@ -171,33 +176,24 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         return 0;\n     }\n \n-    @Override\n-    public Collection<? extends OneTimeTokenAccount> load() {\n-        try {\n-            return readAccountsFromJsonRepository().values()\n-                .stream().flatMap(List::stream).collect(Collectors.toList());\n-        } catch (final Exception e) {\n-            LoggingUtils.error(LOGGER, e);\n-        }\n-        return new ArrayList<>(0);\n-    }\n-\n     @SneakyThrows\n     private void writeAccountsToJsonRepository(final Map<String, List<OneTimeTokenAccount>> accounts) {\n         LOGGER.debug(\"Saving [{}] google authenticator accounts to JSON file at [{}]\", accounts.size(), location.getFile());\n         this.serializer.to(location.getFile(), accounts);\n     }\n \n-    private Map<String, List<OneTimeTokenAccount>> readAccountsFromJsonRepository() throws IOException {\n-        LOGGER.debug(\"Ensuring JSON repository file exists at [{}]\", location.getFile());\n-        val result = location.getFile().createNewFile();\n+    @SneakyThrows\n+    private Map<String, List<OneTimeTokenAccount>> readAccountsFromJsonRepository() {\n+        val file = location.getFile();\n+        LOGGER.debug(\"Ensuring JSON repository file exists at [{}]\", file);\n+        val result = file.createNewFile();\n         if (result) {\n-            LOGGER.debug(\"Created JSON repository file at [{}]\", location.getFile());\n+            LOGGER.debug(\"Created JSON repository file at [{}]\", file);\n         }\n-        if (location.getFile().length() > 0) {\n-            LOGGER.debug(\"Reading JSON repository file at [{}]\", location.getFile());\n-            val accounts = this.serializer.from(location.getFile());\n-            LOGGER.debug(\"Read [{}] accounts from JSON repository file at [{}]\", accounts.size(), location.getFile());\n+        if (file.length() > 0) {\n+            LOGGER.debug(\"Reading JSON repository file at [{}]\", file);\n+            val accounts = this.serializer.from(file);\n+            LOGGER.debug(\"Read [{}] accounts from JSON repository file at [{}]\", accounts.size(), file);\n             return accounts;\n         }\n         return new HashMap<>(0);\ndiff --git a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java\nindex f3e61bc652..67b3c8d96c 100644\n--- a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java\n+++ b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java\n@@ -53,29 +53,31 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n     private final GoogleAuthenticatorMultifactorProperties gauth;\n \n     public RestGoogleAuthenticatorTokenCredentialRepository(final IGoogleAuthenticator googleAuthenticator,\n-                                                            final GoogleAuthenticatorMultifactorProperties gauth,\n-                                                            final CipherExecutor<String, String> tokenCredentialCipher) {\n+        final GoogleAuthenticatorMultifactorProperties gauth,\n+        final CipherExecutor<String, String> tokenCredentialCipher) {\n         super(tokenCredentialCipher, googleAuthenticator);\n         this.gauth = gauth;\n     }\n \n     @Override\n-    public Collection<? extends OneTimeTokenAccount> load() {\n+    public OneTimeTokenAccount get(final long id) {\n         val rest = gauth.getRest();\n         HttpResponse response = null;\n         try {\n-            response = HttpUtils.executeGet(rest.getUrl(), rest.getBasicAuthUsername(),\n-                rest.getBasicAuthUsername(), Map.of(),\n-                CollectionUtils.wrap(\"Accept\", MediaType.APPLICATION_JSON));\n+            val parameters = new HashMap<String, Object>();\n+            response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),\n+                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n+                parameters, Map.of(\"id\", id));\n+\n             if (response != null) {\n                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n                 if (status.is2xxSuccessful()) {\n                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n                     if (content != null) {\n-                        final TypeReference<List<GoogleAuthenticatorAccount>> values = new TypeReference<>() {\n+                        val values = new TypeReference<GoogleAuthenticatorAccount>() {\n                         };\n-                        val results = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);\n-                        return results.stream().map(this::decode).collect(Collectors.toList());\n+                        val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);\n+                        return decode(Objects.requireNonNull(result));\n                     }\n                 }\n             }\n@@ -84,25 +86,24 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         } finally {\n             HttpUtils.close(response);\n         }\n-        return new ArrayList<>(0);\n+        return null;\n     }\n \n     @Override\n     public OneTimeTokenAccount get(final String username, final long id) {\n-        val rest = gauth.getRest();\n         HttpResponse response = null;\n         try {\n+            val rest = gauth.getRest();\n             val parameters = new HashMap<String, Object>();\n             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),\n                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n                 parameters, Map.of(\"id\", id, \"username\", username));\n-\n             if (response != null) {\n                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n                 if (status.is2xxSuccessful()) {\n                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n                     if (content != null) {\n-                        final TypeReference<GoogleAuthenticatorAccount> values = new TypeReference<>() {\n+                        val values = new TypeReference<GoogleAuthenticatorAccount>() {\n                         };\n                         val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);\n                         return decode(Objects.requireNonNull(result));\n@@ -118,21 +119,21 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n     }\n \n     @Override\n-    public OneTimeTokenAccount get(final long id) {\n+    public Collection<? extends OneTimeTokenAccount> get(final String username) {\n         val rest = gauth.getRest();\n         HttpResponse response = null;\n         try {\n             val parameters = new HashMap<String, Object>();\n             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),\n                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n-                parameters, Map.of(\"id\", id));\n+                parameters, Map.of(\"username\", username));\n \n             if (response != null) {\n                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n                 if (status.is2xxSuccessful()) {\n                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n                     if (content != null) {\n-                        final TypeReference<GoogleAuthenticatorAccount> values = new TypeReference<>() {\n+                        val values = new TypeReference<List<GoogleAuthenticatorAccount>>() {\n                         };\n                         val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);\n                         return decode(Objects.requireNonNull(result));\n@@ -148,24 +149,22 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n     }\n \n     @Override\n-    public Collection<? extends OneTimeTokenAccount> get(final String username) {\n+    public Collection<? extends OneTimeTokenAccount> load() {\n         val rest = gauth.getRest();\n         HttpResponse response = null;\n         try {\n-            val parameters = new HashMap<String, Object>();\n-            response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),\n-                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n-                parameters, Map.of(\"username\", username));\n-\n+            response = HttpUtils.executeGet(rest.getUrl(), rest.getBasicAuthUsername(),\n+                rest.getBasicAuthUsername(), Map.of(),\n+                CollectionUtils.wrap(\"Accept\", MediaType.APPLICATION_JSON));\n             if (response != null) {\n                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n                 if (status.is2xxSuccessful()) {\n                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n                     if (content != null) {\n-                        final TypeReference<List<GoogleAuthenticatorAccount>> values = new TypeReference<>() {\n-                        };\n-                        val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);\n-                        return decode(Objects.requireNonNull(result));\n+                        val results = MAPPER.readValue(JsonValue.readHjson(content).toString(),\n+                            new TypeReference<List<GoogleAuthenticatorAccount>>() {\n+                            });\n+                        return results.stream().map(this::decode).collect(Collectors.toList());\n                     }\n                 }\n             }\n@@ -174,7 +173,7 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         } finally {\n             HttpUtils.close(response);\n         }\n-        return null;\n+        return new ArrayList<>(0);\n     }\n \n     @Override\n@@ -182,6 +181,40 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         return update(account);\n     }\n \n+    @Override\n+    public OneTimeTokenAccount update(final OneTimeTokenAccount accountToUpdate) {\n+        val rest = gauth.getRest();\n+        HttpResponse response = null;\n+        try {\n+            val account = encode(accountToUpdate);\n+            val headers = new HashMap<String, Object>();\n+            headers.put(\"Accept\", MediaType.APPLICATION_JSON);\n+            headers.put(\"username\", CollectionUtils.wrap(account.getUsername()));\n+            headers.put(\"validationCode\", CollectionUtils.wrap(String.valueOf(account.getValidationCode())));\n+            headers.put(\"secretKey\", CollectionUtils.wrap(account.getSecretKey()));\n+            headers.put(\"scratchCodes\", account.getScratchCodes().stream().map(String::valueOf).collect(Collectors.toList()));\n+\n+            val parameters = new HashMap<String, Object>();\n+            response = HttpUtils.execute(rest.getUrl(), HttpMethod.POST.name(),\n+                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n+                parameters, headers);\n+\n+            if (response != null) {\n+                val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());\n+                if (status.is2xxSuccessful()) {\n+                    LOGGER.debug(\"Posted google authenticator account successfully\");\n+                    return account;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            LoggingUtils.error(LOGGER, e);\n+        } finally {\n+            HttpUtils.close(response);\n+        }\n+        LOGGER.warn(\"Failed to save google authenticator account successfully\");\n+        return null;\n+    }\n+\n     @Override\n     public void deleteAll() {\n         val rest = gauth.getRest();\n@@ -191,8 +224,6 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),\n                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n                 parameters, new HashMap<>(0));\n-        } catch (final Exception e) {\n-            LoggingUtils.error(LOGGER, e);\n         } finally {\n             HttpUtils.close(response);\n         }\n@@ -208,8 +239,6 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n                 parameters, CollectionUtils.wrap(\"Accept\", MediaType.APPLICATION_JSON,\n                     \"username\", username));\n-        } catch (final Exception e) {\n-            LoggingUtils.error(LOGGER, e);\n         } finally {\n             HttpUtils.close(response);\n         }\n@@ -271,38 +300,4 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle\n         }\n         return 0;\n     }\n-\n-    @Override\n-    public OneTimeTokenAccount update(final OneTimeTokenAccount accountToUpdate) {\n-        val rest = gauth.getRest();\n-        HttpResponse response = null;\n-        try {\n-            val account = encode(accountToUpdate);\n-            val headers = new HashMap<String, Object>();\n-            headers.put(\"Accept\", MediaType.APPLICATION_JSON);\n-            headers.put(\"username\", CollectionUtils.wrap(account.getUsername()));\n-            headers.put(\"validationCode\", CollectionUtils.wrap(String.valueOf(account.getValidationCode())));\n-            headers.put(\"secretKey\", CollectionUtils.wrap(account.getSecretKey()));\n-            headers.put(\"scratchCodes\", account.getScratchCodes().stream().map(String::valueOf).collect(Collectors.toList()));\n-\n-            val parameters = new HashMap<String, Object>();\n-            response = HttpUtils.execute(rest.getUrl(), HttpMethod.POST.name(),\n-                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),\n-                parameters, headers);\n-\n-            if (response",
    "Fixed test due mockito upgrade": "diff --git a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java\nindex f1ce3483720..7d4c6b8baff 100644\n--- a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java\n+++ b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java\n@@ -52,7 +52,7 @@ public class KinesisFirehoseProducerTest {\n     private Message inMessage;\n     @Mock\n     private PutRecordResult putRecordResult;\n-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)\n+    @Mock(lenient = true, answer = Answers.RETURNS_DEEP_STUBS)\n     private Exchange exchange;\n \n     private KinesisFirehoseProducer kinesisFirehoseProducer;\ndiff --git a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java\nindex 991c5dcb015..bc21e41dfd7 100644\n--- a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java\n+++ b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java\n@@ -57,10 +57,11 @@ public class KinesisProducerTest {\n     private Message inMessage;\n     @Mock\n     private PutRecordResult putRecordResult;\n-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)\n+    @Mock(lenient = true, answer = Answers.RETURNS_DEEP_STUBS)\n     private Exchange exchange;\n \n     private KinesisProducer kinesisProducer;\n+\n     @Before\n     public void setup() throws Exception {\n         when(kinesisEndpoint.getClient()).thenReturn(kinesisClient);",
    "Added more samples": "diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml\nindex a7d337e..127fc05 100755\n--- a/sample/src/main/AndroidManifest.xml\n+++ b/sample/src/main/AndroidManifest.xml\n@@ -1,8 +1,8 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-    package=\"com.loopj.android.http.sample\"\n-    android:versionCode=\"1\"\n-    android:versionName=\"1.0\">\n+          package=\"com.loopj.android.http.sample\"\n+          android:versionCode=\"1\"\n+          android:versionName=\"1.0\">\n \n     <uses-permission android:name=\"android.permission.INTERNET\"/>\n \n@@ -12,18 +12,20 @@\n         android:theme=\"@style/AppTheme\">\n         <activity android:name=\".WaypointsActivity\">\n             <intent-filter>\n-                <action android:name=\"android.intent.action.MAIN\" />\n-                <category android:name=\"android.intent.category.LAUNCHER\" />\n+                <action android:name=\"android.intent.action.MAIN\"/>\n+                <category android:name=\"android.intent.category.LAUNCHER\"/>\n             </intent-filter>\n         </activity>\n-        <activity android:name=\".GetSample\" />\n-        <activity android:name=\".PostSample\" />\n-        <activity android:name=\".DeleteSample\" />\n-        <activity android:name=\".PutSample\" />\n-        <activity android:name=\".JsonSample\" />\n-        <activity android:name=\".FileSample\" />\n-        <activity android:name=\".BinarySample\" />\n-        <activity android:name=\".ThreadingTimeoutSample\" />\n+        <activity android:name=\".GetSample\"/>\n+        <activity android:name=\".PostSample\"/>\n+        <activity android:name=\".DeleteSample\"/>\n+        <activity android:name=\".PutSample\"/>\n+        <activity android:name=\".JsonSample\"/>\n+        <activity android:name=\".FileSample\"/>\n+        <activity android:name=\".BinarySample\"/>\n+        <activity android:name=\".ThreadingTimeoutSample\"/>\n+        <activity android:name=\".CancelAllRequests\"/>\n+        <activity android:name=\".CancelRequestHandle\"/>\n     </application>\n \n </manifest>\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java\nindex e134a1b..4596b39 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java\n@@ -3,6 +3,7 @@ package com.loopj.android.http.sample;\n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n import com.loopj.android.http.BinaryHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -63,7 +64,7 @@ public class BinarySample extends SampleParentActivity {\n     }\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.get(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.get(this, URL, headers, null, responseHandler);\n     }\n }\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java b/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java\nnew file mode 100644\nindex 0000000..35d3727\n--- /dev/null\n+++ b/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java\n@@ -0,0 +1,9 @@\n+package com.loopj.android.http.sample;\n+\n+public class CancelAllRequests extends ThreadingTimeoutSample {\n+\n+    @Override\n+    protected void onCancelButtonPressed() {\n+        getAsyncHttpClient().cancelAllRequests(true);\n+    }\n+}\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java\nnew file mode 100644\nindex 0000000..f710554\n--- /dev/null\n+++ b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java\n@@ -0,0 +1,15 @@\n+package com.loopj.android.http.sample;\n+\n+import com.loopj.android.http.RequestHandle;\n+\n+public class CancelRequestHandle extends ThreadingTimeoutSample {\n+\n+    @Override\n+    protected void onCancelButtonPressed() {\n+        for (RequestHandle handle : getRequestHandles()) {\n+            if (!handle.isCancelled() && !handle.isFinished()) {\n+                handle.cancel(true);\n+            }\n+        }\n+    }\n+}\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java\nindex 4210435..52c4547 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java\n@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -10,8 +11,8 @@ public class DeleteSample extends SampleParentActivity {\n     private static final String LOG_TAG = \"DeleteSample\";\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.delete(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.delete(this, URL, headers, null, responseHandler);\n     }\n \n     @Override\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/FileSample.java b/sample/src/main/java/com/loopj/android/http/sample/FileSample.java\nindex 68c3620..f67b763 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/FileSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/FileSample.java\n@@ -5,6 +5,7 @@ import android.util.Log;\n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n import com.loopj.android.http.FileAsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n import com.loopj.android.http.sample.util.FileUtil;\n \n import org.apache.http.Header;\n@@ -76,7 +77,7 @@ public class FileSample extends SampleParentActivity {\n     }\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.get(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.get(this, URL, headers, null, responseHandler);\n     }\n }\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java\nindex 96ab3e6..98e1a90 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java\n@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -10,8 +11,8 @@ public class GetSample extends SampleParentActivity {\n     private static final String LOG_TAG = \"GetSample\";\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.get(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.get(this, URL, headers, null, responseHandler);\n     }\n \n     @Override\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java\nindex ae701c9..86e0b86 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java\n@@ -5,6 +5,7 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n import com.loopj.android.http.BaseJsonHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n import com.loopj.android.http.sample.util.SampleJSON;\n \n import org.apache.http.Header;\n@@ -15,8 +16,8 @@ public class JsonSample extends SampleParentActivity {\n     private static final String LOG_TAG = \"JsonSample\";\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.get(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.get(this, URL, headers, null, responseHandler);\n     }\n \n     @Override\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java\nindex 202fd48..733d0e3 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java\n@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -10,8 +11,8 @@ public class PostSample extends SampleParentActivity {\n     private static final String LOG_TAG = \"PostSample\";\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.post(this, URL, headers, entity, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.post(this, URL, headers, entity, null, responseHandler);\n     }\n \n     @Override\n@@ -51,7 +52,7 @@ public class PostSample extends SampleParentActivity {\n             }\n \n             @Override\n-            public void onFailure(int statusCode, Header[] headers,\tbyte[] errorResponse, Throwable e) {\n+            public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {\n                 debugHeaders(LOG_TAG, headers);\n                 debugStatusCode(LOG_TAG, statusCode);\n                 debugThrowable(LOG_TAG, e);\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java\nindex f9e6b5d..5c29eb4 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java\n@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -10,8 +11,8 @@ public class PutSample extends SampleParentActivity {\n     private static final String LOG_TAG = \"PutSample\";\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.put(this, URL, headers, entity, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.put(this, URL, headers, entity, null, responseHandler);\n     }\n \n     @Override\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java\nindex 6deff01..bc46031 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java\n@@ -13,6 +13,7 @@ import android.widget.TextView;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -23,6 +24,7 @@ import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.io.UnsupportedEncodingException;\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Locale;\n \n@@ -31,6 +33,7 @@ public abstract class SampleParentActivity extends Activity {\n     private AsyncHttpClient asyncHttpClient = new AsyncHttpClient();\n     private EditText urlEditText, headersEditText, bodyEditText;\n     private LinearLayout responseLayout;\n+    private final List<RequestHandle> requestHandles = new LinkedList<>();\n \n     private static final int LIGHTGREEN = Color.parseColor(\"#00FF66\");\n     private static final int LIGHTRED = Color.parseColor(\"#FF3300\");\n@@ -64,19 +67,31 @@ public abstract class SampleParentActivity extends Activity {\n         }\n     }\n \n+    public List<RequestHandle> getRequestHandles() {\n+        return requestHandles;\n+    }\n+\n+    protected void onRunButtonPressed() {\n+        requestHandles.add(executeSample(getAsyncHttpClient(),\n+                (urlEditText == null || urlEditText.getText() == null) ? getDefaultURL() : urlEditText.getText().toString(),\n+                getRequestHeaders(),\n+                getRequestEntity(),\n+                getResponseHandler()));\n+    }\n+\n+    protected void onCancelButtonPressed() {\n+        asyncHttpClient.cancelRequests(SampleParentActivity.this, true);\n+    }\n+\n     private View.OnClickListener onClickListener = new View.OnClickListener() {\n         @Override\n         public void onClick(View v) {\n             switch (v.getId()) {\n                 case R.id.button_run:\n-                    executeSample(getAsyncHttpClient(),\n-                            (urlEditText == null || urlEditText.getText() == null) ? getDefaultURL() : urlEditText.getText().toString(),\n-                            getRequestHeaders(),\n-                            getRequestEntity(),\n-                            getResponseHandler());\n+                    onRunButtonPressed();\n                     break;\n                 case R.id.button_cancel:\n-                    asyncHttpClient.cancelRequests(SampleParentActivity.this, true);\n+                    onCancelButtonPressed();\n                     break;\n             }\n         }\n@@ -198,5 +213,5 @@ public abstract class SampleParentActivity extends Activity {\n         return this.asyncHttpClient;\n     }\n \n-    protected abstract void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler);\n+    protected abstract RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler);\n }\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java\nindex acf1827..091dc89 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java\n@@ -4,6 +4,7 @@ import android.util.SparseArray;\n \n import com.loopj.android.http.AsyncHttpClient;\n import com.loopj.android.http.AsyncHttpResponseHandler;\n+import com.loopj.android.http.RequestHandle;\n \n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n@@ -86,7 +87,7 @@ public class ThreadingTimeoutSample extends SampleParentActivity {\n     }\n \n     @Override\n-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n-        client.get(this, URL, headers, null, responseHandler);\n+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {\n+        return client.get(this, URL, headers, null, responseHandler);\n     }\n }\ndiff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java\nindex baeceb9..b5dc314 100755\n--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java\n+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java\n@@ -9,7 +9,7 @@ import android.widget.ListView;\n \n public class WaypointsActivity extends ListActivity {\n \n-    private static final String[] samples = new String[]{\"GET\", \"POST\", \"DELETE\", \"PUT\", \"JSON\", \"FILE\", \"BINARY\", \"THREADING TIMEOUTS\"};\n+    private static final String[] samples = new String[]{\"GET\", \"POST\", \"DELETE\", \"PUT\", \"JSON\", \"FILE\", \"BINARY\", \"THREADING TIMEOUTS\", \"CANCEL ALL REQUESTS\", \"CANCEL REQUEST HANDLE\"};\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n@@ -46,6 +46,12 @@ public class WaypointsActivity extends ListActivity {\n             case 7:\n                 targetClass = ThreadingTimeoutSample.class;\n                 break;\n+            case 8:\n+                targetClass = CancelAllRequests.class;\n+                break;\n+            case 9:\n+                targetClass = CancelRequestHandle.class;\n+                break;\n         }\n         if (targetClass != null)\n             startActivity(new Intent(this, targetClass));",
    "Added pubsub entries ( pending review ) .": "diff --git a/src/i18n/wildfire_i18n_en.properties b/src/i18n/wildfire_i18n_en.properties\nindex ddf249ada..271c1831b 100644\n--- a/src/i18n/wildfire_i18n_en.properties\n+++ b/src/i18n/wildfire_i18n_en.properties\n@@ -155,6 +155,7 @@\n ##      Added key: 'sidebar.system-cache'\r\n ##      Added key: 'sidebar.system-cache.descr'\r\n ##      Added key: 'startup.starting.pubsub'\r\n+##      Added section: 'pubsub.*'\r\n ##      Added section: 'system.cache.*'\r\n ##      Added section 'upgrade.database.*'\r\n \r\n@@ -1660,4 +1661,69 @@ upgrade.database.unknown_db=Warning: database type unknown. You must manually up\n upgrade.database.interbase_db=Warning: automatic upgrades of Interbase are not supported. You \\\r\n     must manually upgrade your database.\r\n upgrade.database.success=Database upgraded successfully.\r\n-upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.\n\\ No newline at end of file\n+upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.\r\n+\r\n+# Publish-Subscribe\r\n+\r\n+startup.starting.pubsub=Publish-Subscribe domain: {0}\r\n+pubsub.form.default.title=Default Node configuration\r\n+pubsub.form.default.instruction=Configure the default configuration to apply for newly created nodes.\r\n+pubsub.form.conf.title=Node configuration\r\n+pubsub.form.conf.instruction=Please provide the configuration for node \"{0}\".\r\n+pubsub.form.conf.deliver_payloads=Deliver payloads with event notifications\r\n+pubsub.form.conf.notify_config=Notify subscribers when the node configuration changes\r\n+pubsub.form.conf.notify_delete=Notify subscribers when the node is deleted\r\n+pubsub.form.conf.notify_retract=Notify subscribers when items are removed from the node\r\n+pubsub.form.conf.presence_based=Only deliver notifications to available users\r\n+pubsub.form.conf.send_item_subscribe=Send items to new subscribers\r\n+pubsub.form.conf.subscribe=Whether to allow subscriptions\r\n+pubsub.form.conf.subscription_required=Mandatory to configure new subscriptions\r\n+pubsub.form.conf.persist_items=Persist items to storage\r\n+pubsub.form.conf.max_items=Max number of items to persist\r\n+pubsub.form.conf.max_payload_size=Max payload size in bytes\r\n+pubsub.form.conf.type=Specify the type of payload data to be provided at this node\r\n+pubsub.form.conf.body_xslt=Message body XSLT\r\n+pubsub.form.conf.dataform_xslt=Payload XSLT\r\n+pubsub.form.conf.access_model=Specify who may subscribe and retrieve items\r\n+pubsub.form.conf.publish_model=Specify the publisher model\r\n+pubsub.form.conf.current_approver=Specify the current subscription approver(s)\r\n+pubsub.form.conf.roster_allowed=Roster groups allowed to subscribe\r\n+pubsub.form.conf.contact=People to contact with questions\r\n+pubsub.form.conf.description=Description of the node\r\n+pubsub.form.conf.language=Default language\r\n+pubsub.form.conf.owner=Node owners\r\n+pubsub.form.conf.publisher=Node publishers\r\n+pubsub.form.conf.short_name=Short name for the node\r\n+pubsub.form.conf.itemreply=Select entity that should receive replies to items\r\n+pubsub.form.conf.replyroom=Multi-user chat room to which replies should be sent\r\n+pubsub.form.conf.replyto=Users to which replies should be sent\r\n+pubsub.form.conf.leaf_node_association=Users allowed to associate leaf nodes with the node\r\n+pubsub.form.conf.leaf_node_whitelist=Enter list of users\r\n+pubsub.form.conf.leaf_nodes_max=The maximum number of leaf nodes that can be associated with a collection\r\n+pubsub.notification.message.body=This message contains an event notification\r\n+pubsub.form.subscription.title=Subscription configuration\r\n+pubsub.form.subscription.instruction=Please provide the subscription configuration for node \"{0}\".\r\n+pubsub.form.subscription.deliver=Enable delivery?\r\n+pubsub.form.subscription.digest=Receive digest notifications?\r\n+pubsub.form.subscription.digest_frequency=Minimum number of milliseconds between sending any two notification digests\r\n+pubsub.form.subscription.expire=Requested lease period\r\n+pubsub.form.subscription.include_body=Receive message body in addition to payload?\r\n+pubsub.form.subscription.show-values=Presence types which are allowed to receive notifications\r\n+pubsub.form.subscription.subscription_type=Receive notification of items or nodes\r\n+pubsub.form.subscription.subscription_depth=Receive notification from all or direct child nodes\r\n+pubsub.form.subscription.keywords=Keyword to match\r\n+pubsub.form.authorization.title=PubSub subscriber request\r\n+pubsub.form.authorization.instruction=To approve this entitys subscription request, click \\\r\n+    the OK button. To deny the request, click the cancel button.\r\n+pubsub.form.authorization.node=Node ID\r\n+pubsub.form.authorization.subscriber=Subscriber Address\r\n+pubsub.form.authorization.allow=Allow this JID to subscribe to this pubsub node?\r\n+pubsub.command.pending-subscriptions.label=Authorize Pending Subscriptions\r\n+pubsub.command.pending-subscriptions.title=Authorize Pending Subscriptions\r\n+pubsub.command.pending-subscriptions.instruction=Select node to get pending subscriptions.\r\n+pubsub.command.pending-subscriptions.node=Node\r\n+pubsub.command.pending-subscriptions.error.idrequired=ID of node is missing.\r\n+pubsub.command.pending-subscriptions.error.manyIDs=More than one nodeID was selected.\r\n+pubsub.command.pending-subscriptions.success=Pending subscriptions have been sent.\r\n+pubsub.command.pending-subscriptions.error.forbidden=You do not have enough permissions.\r\n+pubsub.command.pending-subscriptions.error.badid=Invalid node ID was selected.\n\\ No newline at end of file",
    "Expose some proxy settings to GCS Processors .": "diff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java\nindex 995805c0ce..9b9a2531be 100644\n--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java\n+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java\n@@ -55,6 +55,25 @@ public abstract class AbstractGCPProcessor<\n             .addValidator(StandardValidators.INTEGER_VALIDATOR)\n             .build();\n \n+    public static final PropertyDescriptor PROXY_HOST = new PropertyDescriptor\n+            .Builder().name(\"gcp-proxy-host\")\n+            .displayName(\"Proxy host\")\n+            .description(\"IP or hostname of the proxy to be used\")\n+            .required(false)\n+            .expressionLanguageSupported(false)\n+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)\n+            .build();\n+\n+    public static final PropertyDescriptor PROXY_PORT = new PropertyDescriptor\n+            .Builder().name(\"gcp-proxy-port\")\n+            .displayName(\"Proxy port\")\n+            .description(\"Proxy port number\")\n+            .required(false)\n+            .expressionLanguageSupported(false)\n+            .addValidator(StandardValidators.INTEGER_VALIDATOR)\n+            .build();\n+\n+\n     /**\n      * Links to the {@link GCPCredentialsService} which provides credentials for this particular processor.\n      */\n@@ -78,7 +97,9 @@ public abstract class AbstractGCPProcessor<\n         return ImmutableList.of(\n                 GCP_CREDENTIALS_PROVIDER_SERVICE,\n                 PROJECT_ID,\n-                RETRY_COUNT\n+                RETRY_COUNT,\n+                PROXY_HOST,\n+                PROXY_PORT\n         );\n     }\n \ndiff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java\nindex ff368b55df..7cc854d02b 100644\n--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java\n+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java\n@@ -16,6 +16,9 @@\n  */\n package org.apache.nifi.processors.gcp.storage;\n \n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.auth.http.HttpTransportFactory;\n import com.google.auth.oauth2.GoogleCredentials;\n import com.google.cloud.RetryParams;\n import com.google.cloud.storage.Storage;\n@@ -26,7 +29,10 @@ import org.apache.nifi.components.PropertyDescriptor;\n import org.apache.nifi.processor.ProcessContext;\n import org.apache.nifi.processor.Relationship;\n import org.apache.nifi.processors.gcp.AbstractGCPProcessor;\n+import org.apache.nifi.util.StringUtils;\n \n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -66,15 +72,36 @@ public abstract class AbstractGCSProcessor extends AbstractGCPProcessor<Storage,\n     @Override\n     protected StorageOptions getServiceOptions(ProcessContext context, GoogleCredentials credentials) {\n         final String projectId = context.getProperty(PROJECT_ID).getValue();\n-        final Integer retryCount = Integer.valueOf(context.getProperty(RETRY_COUNT).getValue());\n+        final Integer retryCount = context.getProperty(RETRY_COUNT).asInteger();\n \n-        return StorageOptions.newBuilder()\n+        final String proxyHost = context.getProperty(PROXY_HOST).getValue();\n+        final Integer proxyPort = context.getProperty(PROXY_PORT).asInteger();\n+\n+        StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()\n                 .setCredentials(credentials)\n                 .setProjectId(projectId)\n                 .setRetryParams(RetryParams.newBuilder()\n                         .setRetryMaxAttempts(retryCount)\n                         .setRetryMinAttempts(retryCount)\n-                        .build())\n-                .build();\n+                        .build());\n+\n+        if (!StringUtils.isBlank(proxyHost) && proxyPort > 0) {\n+            storageOptionsBuilder.setHttpTransportFactory(new HttpTransportFactory() {\n+                @Override\n+                public HttpTransport create() {\n+                    final HttpTransport transport = new NetHttpTransport.Builder()\n+                            .setProxy(\n+                                    new Proxy(\n+                                            Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort)\n+                     ",
    "show all available languages in preferences using their own language .": "diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\nindex 1ede8a2037..6d1b600205 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java\n@@ -373,6 +373,7 @@ public class AnkiDroidApp extends Application {\n             }\n         } catch (Exception e) {\n             Timber.e(e, \"failed to update context with new language\");\n+            //during AnkiDroidApp.attachBaseContext() ACRA is not initialized, so the exception report will not be sent\n             sendExceptionReport(e,\"AnkiDroidApp.updateContextWithLanguage\");\n             return remoteContext;\n         }\ndiff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java\nindex 526864d431..26c400db22 100644\n--- a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java\n+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java\n@@ -810,22 +810,25 @@ public class Preferences extends AppCompatPreferenceActivity implements Preferen\n \n     private void initializeLanguageDialog(PreferenceScreen screen) {\n         ListPreference languageSelection = (ListPreference) screen.findPreference(LANGUAGE);\n-        Locale currentAppLocale = LanguageUtil.getLocale(AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance())\n-                .getString(Preferences.LANGUAGE, \"\"));\n         if (languageSelection != null) {\n-            Map<String, String> items = new TreeMap<>();\n+            Map<String, List<String>> items = new TreeMap<>();\n             for (String localeCode : LanguageUtil.APP_LANGUAGES) {\n                 Locale loc = LanguageUtil.getLocale(localeCode);\n-                items.put(loc.getDisplayName(currentAppLocale), loc.toString());\n+                //TreeMap always sorted by key.\n+                //      Key is a String: all display names converted to lower case for correct display order.\n+                //      Value is list of 2 strings:\n+                //          1st element is display name with unmodified case\n+                //          2nd element is locale code\n+                items.put(loc.getDisplayName(loc).toLowerCase(), Arrays.asList(loc.getDisplayName(loc), loc.toString()));\n             }\n             CharSequence[] languageDialogLabels = new CharSequence[items.size() + 1];\n             CharSequence[] languageDialogValues = new CharSequence[items.size() + 1];\n             languageDialogLabels[0] = getResources().getString(R.string.language_system);\n             languageDialogValues[0] = \"\";\n             int i = 1;\n-            for (Map.Entry<String, String> e : items.entrySet()) {\n-                languageDialogLabels[i] = e.getKey();\n-              ",
    "Updated tz data to version 2005f . . git - svn - id : https : / / joda - time . svn . sourceforge . net / svnroot / joda - time / trunk @ 733 1e1cfbb7 - 5c0e - 0410 - a2f0 - f98d92ec03a1": "diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt\nindex f072bc35..315ec18e 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt\n+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt\n@@ -1,2 +1,2 @@\n The data files in this directory were obtained from the public tz database,\n-http://www.twinsun.com/tz/tz-link.htm, version 2005c.\n+http://www.twinsun.com/tz/tz-link.htm, version 2005f.\ndiff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia\nindex 0d1439d1..4be50b0a 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/asia\n+++ b/JodaTime/src/java/org/joda/time/tz/src/asia\n@@ -1,4 +1,4 @@\n-# @(#)asia\t7.78\r\n+# @(#)asia\t7.80\r\n \r\n # This data is by no means authoritative; if you think you know better,\r\n # go ahead and edit the file (and please send any changes to\r\n@@ -107,7 +107,7 @@ Zone\tAsia/Baku\t3:19:24 -\tLMT\t1924 May  2\n \t\t\t3:00\t-\tBAKT\t1957 Mar    # Baku Time\r\n \t\t\t4:00 RussiaAsia BAK%sT\t1991 Mar 31 2:00s\r\n \t\t\t3:00\t1:00\tBAKST\t1991 Aug 30 # independence\r\n-\t\t\t3:00 RussiaAsia\tAZ%sT\t1992 Sep lastSun 2:00s\r\n+\t\t\t3:00 RussiaAsia\tAZ%sT\t1992 Sep lastSat 23:00\r\n \t\t\t4:00\t-\tAZT\t1996 # Azerbaijan time\r\n \t\t\t4:00\tEUAsia\tAZ%sT\t1997\r\n \t\t\t4:00\tAzer\tAZ%sT\r\n@@ -337,7 +337,7 @@ Link\tAsia/Nicosia\tEurope/Nicosia\n # President Eduard Shevardnadze decreed Wednesday.\r\n #\r\n # From the BBC via Joseph S. Myers (2004-06-27):\r\n-#  \t\r\n+#\r\n # Georgia moved closer to Western Europe on Sunday...  The former Soviet\r\n # republic has changed its time zone back to that of Moscow.  As a result it\r\n # is now just four hours ahead of Greenwich Mean Time, rather than five hours\r\n@@ -639,7 +639,8 @@ Rule\tZion\t1988\tonly\t-\tApr\t 9\t0:00\t1:00\tD\n Rule\tZion\t1988\tonly\t-\tSep\t 3\t0:00\t0\tS\r\n \r\n # From Ephraim Silverberg <ephraim@cs.huji.ac.il>\r\n-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, and 2004-12-22):\r\n+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,\r\n+# and 2005-02-17):\r\n \r\n # According to the Office of the Secretary General of the Ministry of\r\n # Interior, there is NO set rule for Daylight-Savings/Standard time changes.\r\n@@ -735,91 +736,74 @@ Rule\tZion\t2003\tonly\t-\tOct\t 3\t1:00\t0\tS\n Rule\tZion\t2004\tonly\t-\tApr\t 7\t1:00\t1:00\tD\r\n Rule\tZion\t2004\tonly\t-\tSep\t22\t1:00\t0\tS\r\n \r\n-# Yesterday, the Knesset Interior Committee passed a proposed (originally\r\n-# in March 2004) change to the Time Setting Law that would make the dates\r\n-# for DST from 2005 and beyond so that DST starts on the night _after_ the\r\n-# first night of the Passover holiday at midnight until midnight of the\r\n-# Saturday night _before_ the fast of Yom Kippur.\r\n+# The proposed law agreed upon by the Knesset Interior Committee on\r\n+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the\r\n+# last Friday before April 2nd (i.e. the last Friday in March or April\r\n+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday\r\n+# night _before_ the fast of Yom Kippur.\r\n+#\r\n+# Those who can read Hebrew can view the announcement at:\r\n #\r\n-# Those who can read Hebrew can view the proposal at:\r\n+#\tftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps\r\n+\r\n+# From Paul Eggert (2005-02-22):\r\n+# I used Ephraim Silverberg's dst-israel.el program\r\n+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)\r\n+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,\r\n+# to generate the transitions in this list.\r\n+# (I replaced \"lastFri\" with \"Fri>=26\" by hand.)\r\n+# The spring transitions below all correspond to the following Rule:\r\n #\r\n-#\tftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+.ps\r\n+# Rule\tZion\t2005\tmax\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n #\r\n-# The proposal still has to be passed by the Knesset (three readings) for\r\n-# it to become law....\r\n+# but older zic implementations (e.g., Solaris 8) do not support\r\n+# \"Fri>=26\" to mean April 1 in years like 2005, so for now we list the\r\n+# springtime transitions explicitly.\r\n \r\n-# From Paul Eggert (2004-12-22):\r\n-# For now, guess that the rules proposed on 2004-12-20 will be adopted.\r\n-# This is quite possibly wrong, but it is more likely than no DST at all.\r\n-# I used Ed Reingold's cal-hebrew in GNU Emacs 21.3, along with code\r\n-# written by Ephraim Silverberg, to generate this list.\r\n-# Rule\tNAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S\r\n-Rule\tZion\t2005\tonly\t-\tApr\t25\t0:00\t1:00\tD\r\n-Rule\tZion\t2005\tonly\t-\tOct\t 9\t0:00\t0\tS\r\n-Rule\tZion\t2006\tonly\t-\tApr\t14\t0:00\t1:00\tD\r\n-Rule\tZion\t2006\tonly\t-\tOct\t 1\t0:00\t0\tS\r\n-Rule\tZion\t2007\tonly\t-\tApr\t 4\t0:00\t1:00\tD\r\n-Rule\tZion\t2007\tonly\t-\tSep\t16\t0:00\t0\tS\r\n-Rule\tZion\t2008\tonly\t-\tApr\t21\t0:00\t1:00\tD\r\n-Rule\tZion\t2008\tonly\t-\tOct\t 5\t0:00\t0\tS\r\n-Rule\tZion\t2009\tonly\t-\tApr\t10\t0:00\t1:00\tD\r\n-Rule\tZion\t2009\tonly\t-\tSep\t27\t0:00\t0\tS\r\n-Rule\tZion\t2010\tonly\t-\tMar\t31\t0:00\t1:00\tD\r\n-Rule\tZion\t2010\tonly\t-\tSep\t12\t0:00\t0\tS\r\n-Rule\tZion\t2011\tonly\t-\tApr\t20\t0:00\t1:00\tD\r\n-Rule\tZion\t2011\tonly\t-\tOct\t 2\t0:00\t0\tS\r\n-Rule\tZion\t2012\tonly\t-\tApr\t 8\t0:00\t1:00\tD\r\n-Rule\tZion\t2012\tonly\t-\tSep\t23\t0:00\t0\tS\r\n-Rule\tZion\t2013\tonly\t-\tMar\t27\t0:00\t1:00\tD\r\n-Rule\tZion\t2013\tonly\t-\tSep\t 8\t0:00\t0\tS\r\n-Rule\tZion\t2014\tonly\t-\tApr\t16\t0:00\t1:00\tD\r\n-Rule\tZion\t2014\tonly\t-\tSep\t28\t0:00\t0\tS\r\n-Rule\tZion\t2015\tonly\t-\tApr\t 5\t0:00\t1:00\tD\r\n-Rule\tZion\t2015\tonly\t-\tSep\t20\t0:00\t0\tS\r\n-Rule\tZion\t2016\tonly\t-\tApr\t24\t0:00\t1:00\tD\r\n-Rule\tZion\t2016\tonly\t-\tOct\t 9\t0:00\t0\tS\r\n-Rule\tZion\t2017\tonly\t-\tApr\t12\t0:00\t1:00\tD\r\n-Rule\tZion\t2017\tonly\t-\tSep\t24\t0:00\t0\tS\r\n-Rule\tZion\t2018\tonly\t-\tApr\t 1\t0:00\t1:00\tD\r\n-Rule\tZion\t2018\tonly\t-\tSep\t16\t0:00\t0\tS\r\n-Rule\tZion\t2019\tonly\t-\tApr\t21\t0:00\t1:00\tD\r\n-Rule\tZion\t2019\tonly\t-\tOct\t 6\t0:00\t0\tS\r\n-Rule\tZion\t2020\tonly\t-\tApr\t10\t0:00\t1:00\tD\r\n-Rule\tZion\t2020\tonly\t-\tSep\t27\t0:00\t0\tS\r\n-Rule\tZion\t2021\tonly\t-\tMar\t29\t0:00\t1:00\tD\r\n-Rule\tZion\t2021\tonly\t-\tSep\t12\t0:00\t0\tS\r\n-Rule\tZion\t2022\tonly\t-\tApr\t17\t0:00\t1:00\tD\r\n-Rule\tZion\t2022\tonly\t-\tOct\t 2\t0:00\t0\tS\r\n-Rule\tZion\t2023\tonly\t-\tApr\t 7\t0:00\t1:00\tD\r\n-Rule\tZion\t2023\tonly\t-\tSep\t24\t0:00\t0\tS\r\n-Rule\tZion\t2024\tonly\t-\tApr\t24\t0:00\t1:00\tD\r\n-Rule\tZion\t2024\tonly\t-\tOct\t 6\t0:00\t0\tS\r\n-Rule\tZion\t2025\tonly\t-\tApr\t14\t0:00\t1:00\tD\r\n-Rule\tZion\t2025\tonly\t-\tSep\t28\t0:00\t0\tS\r\n-Rule\tZion\t2026\tonly\t-\tApr\t 3\t0:00\t1:00\tD\r\n-Rule\tZion\t2026\tonly\t-\tSep\t20\t0:00\t0\tS\r\n-Rule\tZion\t2027\tonly\t-\tApr\t23\t0:00\t1:00\tD\r\n-Rule\tZion\t2027\tonly\t-\tOct\t10\t0:00\t0\tS\r\n-Rule\tZion\t2028\tonly\t-\tApr\t12\t0:00\t1:00\tD\r\n-Rule\tZion\t2028\tonly\t-\tSep\t24\t0:00\t0\tS\r\n-Rule\tZion\t2029\tonly\t-\tApr\t 1\t0:00\t1:00\tD\r\n-Rule\tZion\t2029\tonly\t-\tSep\t16\t0:00\t0\tS\r\n-Rule\tZion\t2030\tonly\t-\tApr\t19\t0:00\t1:00\tD\r\n-Rule\tZion\t2030\tonly\t-\tOct\t 6\t0:00\t0\tS\r\n-Rule\tZion\t2031\tonly\t-\tApr\t 9\t0:00\t1:00\tD\r\n-Rule\tZion\t2031\tonly\t-\tSep\t21\t0:00\t0\tS\r\n-Rule\tZion\t2032\tonly\t-\tMar\t28\t0:00\t1:00\tD\r\n-Rule\tZion\t2032\tonly\t-\tSep\t12\t0:00\t0\tS\r\n-Rule\tZion\t2033\tonly\t-\tApr\t15\t0:00\t1:00\tD\r\n-Rule\tZion\t2033\tonly\t-\tOct\t 2\t0:00\t0\tS\r\n-Rule\tZion\t2034\tonly\t-\tApr\t 5\t0:00\t1:00\tD\r\n-Rule\tZion\t2034\tonly\t-\tSep\t17\t0:00\t0\tS\r\n-Rule\tZion\t2035\tonly\t-\tApr\t25\t0:00\t1:00\tD\r\n-Rule\tZion\t2035\tonly\t-\tOct\t 7\t0:00\t0\tS\r\n-Rule\tZion\t2036\tonly\t-\tApr\t13\t0:00\t1:00\tD\r\n-Rule\tZion\t2036\tonly\t-\tSep\t28\t0:00\t0\tS\r\n-Rule\tZion\t2037\tonly\t-\tApr\t 1\t0:00\t1:00\tD\r\n-Rule\tZion\t2037\tonly\t-\tSep\t13\t0:00\t0\tS\r\n+# Rule\tNAME\tFROM\tTO\tTYPE\tIN\tON\tAT\tSAVE\tLETTER/S\r\n+Rule\tZion\t2005\tonly\t-\tApr\t 1\t2:00\t1:00\tD\r\n+Rule\tZion\t2005\tonly\t-\tOct\t 9\t2:00\t0\tS\r\n+Rule\tZion\t2006\t2010\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n+Rule\tZion\t2006\tonly\t-\tOct\t 1\t2:00\t0\tS\r\n+Rule\tZion\t2007\tonly\t-\tSep\t16\t2:00\t0\tS\r\n+Rule\tZion\t2008\tonly\t-\tOct\t 5\t2:00\t0\tS\r\n+Rule\tZion\t2009\tonly\t-\tSep\t27\t2:00\t0\tS\r\n+Rule\tZion\t2010\tonly\t-\tSep\t12\t2:00\t0\tS\r\n+Rule\tZion\t2011\tonly\t-\tApr\t 1\t2:00\t1:00\tD\r\n+Rule\tZion\t2011\tonly\t-\tOct\t 2\t2:00\t0\tS\r\n+Rule\tZion\t2012\t2015\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n+Rule\tZion\t2012\tonly\t-\tSep\t23\t2:00\t0\tS\r\n+Rule\tZion\t2013\tonly\t-\tSep\t 8\t2:00\t0\tS\r\n+Rule\tZion\t2014\tonly\t-\tSep\t28\t2:00\t0\tS\r\n+Rule\tZion\t2015\tonly\t-\tSep\t20\t2:00\t0\tS\r\n+Rule\tZion\t2016\tonly\t-\tApr\t 1\t2:00\t1:00\tD\r\n+Rule\tZion\t2016\tonly\t-\tOct\t 9\t2:00\t0\tS\r\n+Rule\tZion\t2017\t2021\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n+Rule\tZion\t2017\tonly\t-\tSep\t24\t2:00\t0\tS\r\n+Rule\tZion\t2018\tonly\t-\tSep\t16\t2:00\t0\tS\r\n+Rule\tZion\t2019\tonly\t-\tOct\t 6\t2:00\t0\tS\r\n+Rule\tZion\t2020\tonly\t-\tSep\t27\t2:00\t0\tS\r\n+Rule\tZion\t2021\tonly\t-\tSep\t12\t2:00\t0\tS\r\n+Rule\tZion\t2022\tonly\t-\tApr\t 1\t2:00\t1:00\tD\r\n+Rule\tZion\t2022\tonly\t-\tOct\t 2\t2:00\t0\tS\r\n+Rule\tZion\t2023\t2032\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n+Rule\tZion\t2023\tonly\t-\tSep\t24\t2:00\t0\tS\r\n+Rule\tZion\t2024\tonly\t-\tOct\t 6\t2:00\t0\tS\r\n+Rule\tZion\t2025\tonly\t-\tSep\t28\t2:00\t0\tS\r\n+Rule\tZion\t2026\tonly\t-\tSep\t20\t2:00\t0\tS\r\n+Rule\tZion\t2027\tonly\t-\tOct\t10\t2:00\t0\tS\r\n+Rule\tZion\t2028\tonly\t-\tSep\t24\t2:00\t0\tS\r\n+Rule\tZion\t2029\tonly\t-\tSep\t16\t2:00\t0\tS\r\n+Rule\tZion\t2030\tonly\t-\tOct\t 6\t2:00\t0\tS\r\n+Rule\tZion\t2031\tonly\t-\tSep\t21\t2:00\t0\tS\r\n+Rule\tZion\t2032\tonly\t-\tSep\t12\t2:00\t0\tS\r\n+Rule\tZion\t2033\tonly\t-\tApr\t 1\t2:00\t1:00\tD\r\n+Rule\tZion\t2033\tonly\t-\tOct\t 2\t2:00\t0\tS\r\n+Rule\tZion\t2034\t2037\t-\tMar\tFri>=26\t2:00\t1:00\tD\r\n+Rule\tZion\t2034\tonly\t-\tSep\t17\t2:00\t0\tS\r\n+Rule\tZion\t2035\tonly\t-\tOct\t 7\t2:00\t0\tS\r\n+Rule\tZion\t2036\tonly\t-\tSep\t28\t2:00\t0\tS\r\n+Rule\tZion\t2037\tonly\t-\tSep\t13\t2:00\t0\tS\r\n \r\n # Zone\tNAME\t\tGMTOFF\tRULES\tFORMAT\t[UNTIL]\r\n Zone\tAsia/Jerusalem\t2:20:56 -\tLMT\t1880\r\ndiff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia\nindex f265eece..4696d0b2 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/australasia\n+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia\n@@ -1,4 +1,4 @@\n-# @(#)australasia\t7.69\r\n+# @(#)australasia\t7.70\r\n # This file also includes Pacific islands.\r\n \r\n # Notes are at the end of this file\r\n@@ -434,6 +434,17 @@ Zone Pacific/Johnston\t-10:00\t-\tHST\n # uninhabited\r\n \r\n # Midway\r\n+#\r\n+# From Mark Brader (2005-01-23):\r\n+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,\r\n+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]\r\n+# reproduced a Pan American Airways timeables from 1936, for their weekly\r\n+# \"Orient Express\" flights between San Francisco and Manila, and connecting\r\n+# flights to Chicago and the US East Coast.  As it uses some time zone\r\n+# designations that I've never seen before:....\r\n+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.\r\n+#  \"   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  \"\r\n+#\r\n Zone Pacific/Midway\t-11:49:28 -\tLMT\t1901\r\n \t\t\t-11:00\t-\tNST\t1956 Jun  3\r\n \t\t\t-11:00\t1:00\tNDT\t1956 Sep  2\r\ndiff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe\nindex a4ff15ae..f7fd57e9 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/europe\n+++ b/JodaTime/src/java/org/joda/time/tz/src/europe\n@@ -1,4 +1,4 @@\n-# @(#)europe\t7.91\r\n+# @(#)europe\t7.92\r\n \r\n # This data is by no means authoritative; if you think you know better,\r\n # go ahead and edit the file (and please send any changes to\r\n@@ -255,6 +255,35 @@\n #   \"Timeball on the ballast office is down.  Dunsink time.\"\r\n #   -- James Joyce, Ulysses\r\n \r\n+# From Joseph S. Myers (2005-01-26):\r\n+# Irish laws are available online at www.irishstatutebook.ie.  These include \r\n+# various relating to legal time, for example:\r\n+# \r\n+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html\r\n+# \r\n+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html\r\n+# ZZSI27Y1951.html ZZSI73Y1952.html\r\n+# \r\n+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html\r\n+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html\r\n+# ZZA23Y1968.html ZZA17Y1971.html\r\n+# \r\n+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html\r\n+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html\r\n+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html\r\n+#\r\n+# [These are all relative to the root, e.g., the first is\r\n+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]\r\n+# \r\n+# (These are those I found, but there could be more.  In any case these \r\n+# should allow various updates to the comments in the europe file to cover \r\n+# the laws applicable in Ireland.)\r\n+# \r\n+# (Note that the time in the Republic of Ireland since 1968 has been defined \r\n+# in terms of standard time being GMT+1 with a period of winter time when it \r\n+# is GMT, rather than standard time being GMT with a period of summer time \r\n+# being GMT+1.)\r\n+\r\n # From Paul Eggert (1999-03-28):\r\n # Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)\r\n # reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time\r\ndiff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica\nindex 950b46af..3d89e968 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica\n+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica\n@@ -1,4 +1,4 @@\n-# @(#)northamerica\t7.71\r\n+# @(#)northamerica\t7.72\r\n # also includes Central America and the Caribbean\r\n \r\n # This data is by no means authoritative; if you think you know better,\r\n@@ -445,7 +445,7 @@ Link America/Denver America/Shiprock\n # Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,\r\n # Teton, Twin Falls, Valley, Washington counties) and eastern Oregon\r\n # switched four weeks late in 1974.\r\n-# \r\n+#\r\n # Zone\tNAME\t\tGMTOFF\tRULES\tFORMAT\t[UNTIL]\r\n Zone America/Boise\t-7:44:49 -\tLMT\t1883 Nov 18 12:00\r\n \t\t\t-8:00\tUS\tP%sT\t1923 May 13 2:00\r\ndiff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica\nindex bc93e112..c5bd5169 100644\n--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica\n+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica\n@@ -1,4 +1,4 @@\n-# @(#)southamerica\t7.57\r\n+# @(#)southamerica\t7.58\r\n \r\n # This data is by no means authoritative; if you think you know better,\r\n # go ahead and edit the file (and please send any changes to\r\n@@ -964,7 +964,7 @@ Zone America/Asuncion\t-3:50:40 -\tLMT\t1890\n #\r\n # <a href=\"news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net\">\r\n # From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>\r\n-# When we were in Peru in 1985-1986, they apparently switched over \r\n+# When we were in Peru in 1985-1986, they apparently switched over\r\n # sometime between December 29 and January 3 while we were on the Amazon.\r\n #\r\n # From Paul Eggert (2003-11-02):\r",
    "Remove @ NonNull annotation in Consumer method parameter ( <issue_id> ) .": "diff --git a/src/main/java/io/reactivex/functions/Consumer.java b/src/main/java/io/reactivex/functions/Consumer.java\nindex deb4ae804..ff10bbb24 100644\n--- a/src/main/java/io/reactivex/functions/Consumer.java\n+++ b/src/main/java/io/reactivex/functions/Consumer.java\n@@ -13,8 +13,6 @@\n \n package io.reactivex.functions;\n \n-import io.reactivex.annotations.NonNull;\n-\n /**\n  * A functional interface (callback) that accepts a single value.\n  * @param <T> the value type\n@@ -25,5 +23,5 @@ public interface Consumer<T> {\n      * @param t the value\n      * @throws Exception on error\n      */\n-    void accept(@NonNull T t) throws Exception;\n+    void accept(T t) throws Exception;\n }",
    "Reduce wait between same targets to from 1s to 100ms": "diff --git a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp\nindex 93e325a0f21..1b0ec0db073 100644\n--- a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp\n+++ b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp\n@@ -306,7 +306,7 @@ FlushEngine::flushNextTarget(const vespalib::string & name)\n         LOG(info, \"The same target %s out of %ld has been asked to flush again. \"\n                   \"This might indicate flush logic flaw so I will wait 1s before doing it.\",\n                   name.c_str(), lst.first.size());\n-        FastOS_Thread::Sleep(1000);\n+        std::this_thread::sleep_for(100ms);\n     }\n     _executor.execute(std::make_unique<FlushTask>(initFlush(*ctx), *this, ctx));\n     return ctx->getName();",
    "Set new log length when creating file to make the creation faster .": "diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java\nindex 200cd609b..0354df315 100644\n--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java\n+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java\n@@ -50,9 +50,12 @@ class MappedRawLog implements RawLog\n         this.logFile = location;\n         partitions = new RawLogPartition[PARTITION_COUNT];\n \n-        try (final FileChannel logChannel = new RandomAccessFile(logFile, \"rw\").getChannel())\n+\n+        try (final RandomAccessFile raf = new RandomAccessFile(logFile, \"rw\");\n+             final FileChannel logChannel = raf.getChannel())\n         {\n             final long logLength = computeLogLength(termLength);\n+            raf.setLength(logLength);\n             blankTemplate.transferTo(0, logLength, logChannel);\n \n             if (logLength <= Integer.MAX_VALUE)",
    "Move Elasticsearch APIs to REST APIs section .": "diff --git a/docs/reference/api-conventions.asciidoc b/docs/reference/api-conventions.asciidoc\nindex 9e0578ee528..bd556914502 100644\n--- a/docs/reference/api-conventions.asciidoc\n+++ b/docs/reference/api-conventions.asciidoc\n@@ -1,8 +1,6 @@\n [[api-conventions]]\n = API conventions\n \n-[partintro]\n---\n The *Elasticsearch* REST APIs are exposed using <<modules-http,JSON over HTTP>>.\n \n The conventions listed in this chapter can be applied throughout the REST\n@@ -13,8 +11,6 @@ API, unless otherwise specified.\n * <<common-options>>\n * <<url-access-control>>\n \n---\n-\n [[multi-index]]\n == Multiple Indices\n \ndiff --git a/docs/reference/cat.asciidoc b/docs/reference/cat.asciidoc\nindex 743bae7b856..28003ea04d9 100644\n--- a/docs/reference/cat.asciidoc\n+++ b/docs/reference/cat.asciidoc\n@@ -1,9 +1,6 @@\n [[cat]]\n = cat APIs\n \n-[partintro]\n---\n-\n [\"float\",id=\"intro\"]\n == Introduction\n \n@@ -210,8 +207,6 @@ sushi_california_roll [*avocado*]    1     1\n pizza_hawaiian        [*pineapples*] 1\n --------------------------------------------------\n \n---\n-\n include::cat/alias.asciidoc[]\n \n include::cat/allocation.asciidoc[]\ndiff --git a/docs/reference/cluster.asciidoc b/docs/reference/cluster.asciidoc\nindex da5ce2b4102..a53d59e8248 100644\n--- a/docs/reference/cluster.asciidoc\n+++ b/docs/reference/cluster.asciidoc\n@@ -1,8 +1,6 @@\n [[cluster]]\n = Cluster APIs\n \n-[partintro]\n---\n [\"float\",id=\"cluster-nodes\"]\n == Node specification\n \n@@ -81,7 +79,6 @@ GET /_nodes/ra*:2\n GET /_nodes/ra*:2*\n --------------------------------------------------\n // CONSOLE\n---\n \n include::cluster/health.asciidoc[]\n \ndiff --git a/docs/reference/docs.asciidoc b/docs/reference/docs.asciidoc\nindex 5c4c471b0a1..9490e0cd9ff 100644\n--- a/docs/reference/docs.asciidoc\n+++ b/docs/reference/docs.asciidoc\n@@ -1,9 +1,6 @@\n [[docs]]\n = Document APIs\n \n-[partintro]\n---\n-\n This section starts with a short introduction to Elasticsearch's <<docs-replication,data replication model>>, followed by a\n detailed description of the following CRUD APIs:\n \n@@ -23,8 +20,6 @@ detailed description of the following CRUD APIs:\n NOTE: All CRUD APIs are single-index APIs. The `index` parameter accepts a single\n index name, or an `alias` which points to a single index.\n \n---\n-\n include::docs/data-replication.asciidoc[]\n \n include::docs/index_.asciidoc[]\ndiff --git a/docs/reference/index.asciidoc b/docs/reference/index.asciidoc\nindex b2a1a0d51d7..fafbf074610 100644\n--- a/docs/reference/index.asciidoc\n+++ b/docs/reference/index.asciidoc\n@@ -28,20 +28,8 @@ include::setup/bootstrap-checks-xes.asciidoc[]\n \n include::upgrade.asciidoc[]\n \n-include::api-conventions.asciidoc[]\n-\n-include::docs.asciidoc[]\n-\n-include::search.asciidoc[]\n-\n include::aggregations.asciidoc[]\n \n-include::indices.asciidoc[]\n-\n-include::cat.asciidoc[]\n-\n-include::cluster.asciidoc[]\n-\n include::query-dsl.asciidoc[]\n \n include::scripting.asciidoc[]\ndiff --git a/docs/reference/indices.asciidoc b/docs/reference/indices.asciidoc\nindex cda7c41cb42..3d5473b06c3 100644\n--- a/docs/reference/indices.asciidoc\n+++ b/docs/reference/indices.asciidoc\n@@ -1,9 +1,7 @@\n [[indices]]\n = Indices APIs\n \n-[partintro]\n---\n-The indices APIs are used to manage individual indices,\n+Index APIs are used to manage individual indices,\n index settings, aliases, mappings, and index templates.\n \n [float]\n@@ -18,6 +16,9 @@ index settings, aliases, mappings, and index templates.\n * <<indices-shrink-index>>\n * <<indices-split-index>>\n * <<indices-rollover-index>>\n+* <<freeze-index-api>>\n+* <<unfreeze-index-api>>\n+\n \n [float]\n [[mapping-management]]\n@@ -57,8 +58,6 @@ index settings, aliases, mappings, and index templates.\n * <<indices-flush>>\n * <<indices-forcemerge>>\n \n---\n-\n include::indices/create-index.asciidoc[]\n \n include::indices/delete-index.asciidoc[]\n@@ -75,6 +74,12 @@ include::indices/split-index.asciidoc[]\n \n include::indices/rollover-index.asciidoc[]\n \n+:leveloffset: -1\n+include::indices/apis/freeze.asciidoc[]\n+\n+include::indices/apis/unfreeze.asciidoc[]\n+\n+:leveloffset: +1\n include::indices/put-mapping.asciidoc[]\n \n include::indices/get-mapping.asciidoc[]\ndiff --git a/docs/reference/indices/analyze.asciidoc b/docs/reference/indices/analyze.asciidoc\nindex a0d0f3c5b24..45d523db713 100644\n--- a/docs/reference/indices/analyze.asciidoc\n+++ b/docs/reference/indices/analyze.asciidoc\n@@ -139,6 +139,7 @@ GET _analyze\n --------------------------------------------------\n // CONSOLE\n \n+[[explain-analyze-api]]\n === Explain Analyze\n \n If you want to get more advanced details, set `explain` to `true` (defaults to `false`). It will output all token attributes for each token.\ndiff --git a/docs/reference/indices/apis/index.asciidoc b/docs/reference/indices/apis/index.asciidoc\ndeleted file mode 100644\nindex 45060427062..00000000000\n--- a/docs/reference/indices/apis/index.asciidoc\n+++ /dev/null\n@@ -1,11 +0,0 @@\n-[[index-apis]]\n-== Index APIs\n-\n-The index APIs are used to manage individual indices.\n-\n-* <<freeze-index-api>>, <<unfreeze-index-api>>\n-\n-See also <<indices>>.\n-\n-include::freeze.asciidoc[]\n-include::unfreeze.asciidoc[]\n\\ No newline at end of file\ndiff --git a/docs/reference/indices/flush.asciidoc b/docs/reference/indices/flush.asciidoc\nindex ea433fa9cbd..8abe2693faa 100644\n--- a/docs/reference/indices/flush.asciidoc\n+++ b/docs/reference/indices/flush.asciidoc\n@@ -47,7 +47,7 @@ POST _flush\n // CONSOLE\n // TEST[s/^/PUT kimchy\\nPUT elasticsearch\\n/]\n \n-[[indices-synced-flush]]\n+[[synced-flush-api]]\n === Synced Flush\n \n Elasticsearch tracks the indexing activity of each shard. Shards that have not\ndiff --git a/docs/reference/redirects.asciidoc b/docs/reference/redirects.asciidoc\nindex 1985229f065..c030e49cc36 100644\n--- a/docs/reference/redirects.asciidoc\n+++ b/docs/reference/redirects.asciidoc\n@@ -626,6 +626,142 @@ See <<ml-get-filter>> and\n See <<ml-get-calendar-event>> and \n {stack-ov}/ml-calendars.html[Calendars and scheduled events].\n \n+[role=\"exclude\",id=\"index-apis\"]\n+=== Index APIs\n+{es} index APIs are now documented in <<indices>>.\n+\n+[role=\"exclude\",id=\"search-request-docvalue-fields\"]\n+=== Doc value fields parameter for request body search API\n+See <<request-body-search-docvalue-fields>>.\n+\n+[role=\"exclude\",id=\"search-request-explain\"]\n+=== Explain parameter for request body search API\n+See <<request-body-search-explain>>.\n+\n+[role=\"exclude\",id=\"search-request-collapse\"]\n+=== Collapse parameter for request body search API\n+See <<request-body-search-collapse>>.\n+\n+[role=\"exclude\",id=\"search-request-from-size\"]\n+=== From and size parameters for request body search API\n+See <<request-body-search-from-size>>.\n+\n+[role=\"exclude\",id=\"search-request-highlighting\"]\n+=== Highlight parameter for request body search API\n+See <<request-body-search-highlighting>>.\n+\n+[role=\"exclude\",id=\"search-request-index-boost\"]\n+=== Index boost parameter for request body search API\n+See <<request-body-search-index-boost>>.\n+\n+[role=\"exclude\",id=\"search-request-inner-hits\"]\n+=== Inner hits parameter for request body search API\n+See <<request-body-search-inner-hits>>.\n+\n+[role=\"exclude\",id=\"search-request-min-score\"]\n+=== Minimum score parameter for request body search API\n+See <<request-body-search-min-score>>.\n+\n+[role=\"exclude\",id=\"search-request-named-queries-and-filters\"]\n+=== Named query parameter for request body search API\n+See <<request-body-search-queries-and-filters>>.\n+\n+[role=\"exclude\",id=\"search-request-post-filter\"]\n+=== Post filter parameter for request body search API\n+See <<request-body-search-post-filter>>.\n+\n+[role=\"exclude\",id=\"search-request-preference\"]\n+=== Preference parameter for request body search API\n+See <<request-body-search-preference>>.\n+\n+[role=\"exclude\",id=\"search-request-query\"]\n+=== Query parameter for request body search API\n+See <<request-body-search-query>>.\n+\n+[role=\"exclude\",id=\"search-request-rescore\"]\n+=== Rescoring parameter for request body search API\n+See <<request-body-search-rescore>>.\n+\n+[role=\"exclude\",id=\"search-request-script-fields\"]\n+=== Script fields parameter for request body search API\n+See <<request-body-search-script-fields>>.\n+\n+[role=\"exclude\",id=\"search-request-scroll\"]\n+=== Scroll parameter for request body search API\n+See <<request-body-search-scroll>>.\n+\n+[role=\"exclude\",id=\"search-request-search-after\"]\n+=== Search after parameter for request body search API\n+See <<request-body-search-search-after>>.\n+\n+[role=\"exclude\",id=\"search-request-search-type\"]\n+=== Search type parameter for request body search API\n+See <<request-body-search-search-type>>.\n+\n+[role=\"exclude\",id=\"search-request-seq-no-primary-term\"]\n+=== Sequence numbers and primary terms parameter for request body search API\n+See <<request-body-search-search-type>>.\n+\n+[role=\"exclude\",id=\"search-request-sort\"]\n+=== Sort parameter for request body search API\n+See <<request-body-search-sort>>.\n+\n+[role=\"exclude\",id=\"search-request-source-filtering\"]\n+=== Source filtering parameter for request body search API\n+See <<request-body-search-source-filtering>>.\n+\n+[role=\"exclude\",id=\"search-request-stored-fields\"]\n+=== Stored fields parameter for request body search API\n+See <<request-body-search-stored-fields>>.\n+\n+[role=\"exclude\",id=\"search-request-track-total-hits\"]\n+=== Track total hits parameter for request body search API\n+See <<request-body-search-track-total-hits>>.\n+\n+[role=\"exclude\",id=\"search-request-version\"]\n+=== Version parameter for request body search API\n+See <<request-body-search-version>>.\n+\n+[role=\"exclude\",id=\"search-suggesters-term\"]\n+=== Term suggester\n+See <<term-suggester>>.\n+\n+[role=\"exclude\",id=\"search-suggesters-phrase\"]\n+=== Phrase suggester\n+See <<phrase-suggester>>.\n+\n+[role=\"exclude\",id=\"search-suggesters-completion\"]\n+=== Completion suggester\n+See <<completion-suggester>>.\n+\n+[role=\"exclude\",id=\"suggester-context\"]\n+=== Context suggester\n+See <<context-suggester>>.\n+\n+[role=\"exclude\",id=\"returning-suggesters-type\"]\n+=== Return suggester type\n+See <<return-suggesters-type>>.\n+\n+[role=\"exclude\",id=\"search-profile-queries\"]\n+=== Profiling queries\n+See <<profiling-queries>>.\n+\n+[role=\"exclude\",id=\"search-profile-aggregations\"]\n+=== Profiling aggregations\n+See <<profiling-aggregations>>.\n+\n+[role=\"exclude\",id=\"search-profile-considerations\"]\n+=== Profiling considerations\n+See <<profiling-considerations>>.\n+\n+[role=\"exclude\",id=\"_explain_analyze\"]\n+=== Explain analyze API\n+See <<explain-analyze-api>>.\n+\n+[role=\"exclude\",id=\"indices-synced-flush\"]\n+=== Synced flush API\n+See <<synced-flush-api>>.\n+\n [role=\"exclude\",id=\"_repositories\"]\n === Snapshot repositories\n See <<snapshots-repositories>>.\n@@ -633,4 +769,3 @@ See <<snapshots-repositories>>.\n [role=\"exclude\",id=\"_snapshot\"]\n === Snapshot\n See <<snapshots-take-snapshot>>.\n-\ndiff --git a/docs/reference/rest-api/index.asciidoc b/docs/reference/rest-api/index.asciidoc\nindex 7d706088802..3646d848788 100644\n--- a/docs/reference/rest-api/index.asciidoc\n+++ b/docs/reference/rest-api/index.asciidoc\n@@ -10,11 +10,15 @@ directly to configure and access {es} features.\n We are working on including more {es} APIs in this section. Some content might\n not be included yet.\n \n+* <<docs>>\n+* <<search>>\n+* <<indices>>\n+* <<cat>>\n+* <<cluster>>\n * <<info-api,Info API>>\n * <<ccr-apis,{ccr-cap} APIs>>\n * <<data-frame-apis,{dataframe-cap} APIs>>\n * <<graph-explore-api,Graph Explore API>>\n-* <<index-apis>>\n * <<indices-reload-analyzers,Reload Search Analyzers API>>\n * <<index-lifecycle-management-api,Index lifecycle management APIs>>\n * <<snapshot-lifecycle-management-api,Snapshot lifecycle management APIs>>\n@@ -27,14 +31,21 @@ not be included yet.\n * <<migration-api,Migration APIs>>\n --\n \n+:leveloffset: +1\n+include::{es-repo-dir}/api-conventions.asciidoc[]\n+include::{es-repo-dir}/docs.asciidoc[]\n+include::{es-repo-dir}/search.asciidoc[]\n+include::{es-repo-dir}/indices.asciidoc[]\n+include::{es-repo-dir}/cat.asciidoc[]\n+include::{es-repo-dir}/cluster.asciidoc[]\n \n+:leveloffset: -1\n include::info.asciidoc[]\n include::{es-repo-dir}/ccr/apis/ccr-apis.asciidoc[]\n include::{es-repo-dir}/data-frames/apis/index.asciidoc[]\n include::{es-repo-dir}/graph/explore.asciidoc[]\n include::{es-repo-dir}/ilm/apis/ilm-api.asciidoc[]\n include::{es-repo-dir}/ilm/apis/slm-api.asciidoc[]\n-include::{es-repo-dir}/indices/apis/index.asciidoc[]\n include::{es-repo-dir}/licensing/index.asciidoc[]\n include::{es-repo-dir}/migration/migration.asciidoc[]\n include::{es-repo-dir}/ml/apis/ml-api.asciidoc[]\ndiff --git a/docs/reference/search.asciidoc b/docs/reference/search.asciidoc\nindex e99fb6f388d..aac5e5d3bc2 100644\n--- a/docs/reference/search.asciidoc\n+++ b/docs/reference/search.asciidoc\n@@ -1,9 +1,6 @@\n [[search]]\n = Search APIs\n \n-[partintro]\n---\n-\n Most search APIs are <<search-multi-index,multi-index>>, with the\n exception of the <<search-explain>> endpoints.\n \n@@ -160,8 +157,6 @@ overloading a cluster (e.g., a default request will hit all indices in a cluster\n which could cause shard request rejections if the number of shards per node is\n high). This default value is `5`.\n \n---\n-\n include::search/search.asciidoc[]\n \n include::search/uri-request.asciidoc[]\ndiff --git a/docs/reference/search/profile.asciidoc b/docs/reference/search/profile.asciidoc\nindex e5ba1b851cd..c99776bc688 100644\n--- a/docs/reference/search/profile.asciidoc\n+++ b/docs/reference/search/profile.asciidoc\n@@ -227,7 +227,7 @@ NOTE: As with other statistics apis, the Profile API supports human readable out\n `?human=true` to the query string. In this case, the output contains the additional `time` field containing rounded,\n human readable timing information (e.g. `\"time\": \"391,9ms\"`, `\"time\": \"123.3micros\"`).\n \n-[[search-profile-queries]]\n+[[profiling-queries]]\n === Profiling Queries\n \n [NOTE]\n@@ -693,7 +693,7 @@ ignore its children if you find the details too tricky to interpret.\n \n Hopefully this will be fixed in future iterations, but it is a tricky problem to solve and still in-progress :)\n \n-[[search-profile-aggregations]]\n+[[profiling-aggregations]]\n === Profiling Aggregations\n \n [[agg-section]]\n@@ -868,7 +868,7 @@ The meaning of the stats are as follows:\n     Records the number of invocations of the particular method.  For example, `\"collect_count\": 2,`\n     means the `collect()` method was called on two different documents.\n \n-[[search-profile-considerations]]\n+[[profiling-considerations]]\n === Profiling Considerations\n \n ==== Performance Notes\ndiff --git a/docs/reference/search/request/collapse.asciidoc b/docs/reference/search/request/collapse.asciidoc\nindex 1ab79e36c7e..8de0450a4d5 100644\n--- a/docs/reference/search/request/collapse.asciidoc\n+++ b/docs/reference/search/request/collapse.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-collapse]]\n+[[request-body-search-collapse]]\n === Field Collapsing\n \n Allows to collapse search results based on field values.\ndiff --git a/docs/reference/search/request/docvalue-fields.asciidoc b/docs/reference/search/request/docvalue-fields.asciidoc\nindex 784cc940153..7706e9c57b0 100644\n--- a/docs/reference/search/request/docvalue-fields.asciidoc\n+++ b/docs/reference/search/request/docvalue-fields.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-docvalue-fields]]\n+[[request-body-search-docvalue-fields]]\n === Doc value Fields\n \n Allows to return the <<doc-values,doc value>> representation of a field for each hit, for\ndiff --git a/docs/reference/search/request/explain.asciidoc b/docs/reference/search/request/explain.asciidoc\nindex 9bcaecb4840..b82891c8905 100644\n--- a/docs/reference/search/request/explain.asciidoc\n+++ b/docs/reference/search/request/explain.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-explain]]\n+[[request-body-search-explain]]\n === Explain\n \n Enables explanation for each hit on how its score was computed.\ndiff --git a/docs/reference/search/request/from-size.asciidoc b/docs/reference/search/request/from-size.asciidoc\nindex 1c44a7ca8d2..6e249f700e0 100644\n--- a/docs/reference/search/request/from-size.asciidoc\n+++ b/docs/reference/search/request/from-size.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-from-size]]\n+[[request-body-search-from-size]]\n === From / Size\n \n Pagination of results can be done by using the `from` and `size`\ndiff --git a/docs/reference/search/request/highlighting.asciidoc b/docs/reference/search/request/highlighting.asciidoc\nindex ad836c7c535..2197af97d41 100644\n--- a/docs/reference/search/request/highlighting.asciidoc\n+++ b/docs/reference/search/request/highlighting.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-highlighting]]\n+[[request-body-search-highlighting]]\n === Highlighting\n \n Highlighters enable you to get highlighted snippets from one or more fields\ndiff --git a/docs/reference/search/request/index-boost.asciidoc b/docs/reference/search/request/index-boost.asciidoc\nindex 683fe910f5e..93099fc6dc8 100644\n--- a/docs/reference/search/request/index-boost.asciidoc\n+++ b/docs/reference/search/request/index-boost.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-index-boost]]\n+[[request-body-search-index-boost]]\n === Index Boost\n \n Allows to configure different boost level per index when searching\ndiff --git a/docs/reference/search/request/inner-hits.asciidoc b/docs/reference/search/request/inner-hits.asciidoc\nindex 7774e34c2c0..d26bcc9ba3c 100644\n--- a/docs/reference/search/request/inner-hits.asciidoc\n+++ b/docs/reference/search/request/inner-hits.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-inner-hits]]\n+[[request-body-search-inner-hits]]\n === Inner hits\n \n The <<parent-join, parent-join>> and <<nested, nested>> features allow the return of documents that\ndiff --git a/docs/reference/search/request/min-score.asciidoc b/docs/reference/search/request/min-score.asciidoc\nindex d9dbef99ddf..7f7e556e1ea 100644\n--- a/docs/reference/search/request/min-score.asciidoc\n+++ b/docs/reference/search/request/min-score.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-min-score]]\n+[[request-body-search-min-score]]\n === min_score\n \n Exclude documents which have a `_score` less than the minimum specified\ndiff --git a/docs/reference/search/request/named-queries-and-filters.asciidoc b/docs/reference/search/request/named-queries-and-filters.asciidoc\nindex 0fb60253938..c666bd51441 100644\n--- a/docs/reference/search/request/named-queries-and-filters.asciidoc\n+++ b/docs/reference/search/request/named-queries-and-filters.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-named-queries-and-filters]]\n+[[request-body-search-queries-and-filters]]\n === Named Queries\n \n Each filter and query can accept a `_name` in its top level definition.\ndiff --git a/docs/reference/search/request/post-filter.asciidoc b/docs/reference/search/request/post-filter.asciidoc\nindex c46cdb1e522..6bdaac252b2 100644\n--- a/docs/reference/search/request/post-filter.asciidoc\n+++ b/docs/reference/search/request/post-filter.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-post-filter]]\n+[[request-body-search-post-filter]]\n === Post filter\n \n The `post_filter` is applied to the search `hits` at the very end of a search\ndiff --git a/docs/reference/search/request/preference.asciidoc b/docs/reference/search/request/preference.asciidoc\nindex 7412f04844c..c673be52102 100644\n--- a/docs/reference/search/request/preference.asciidoc\n+++ b/docs/reference/search/request/preference.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-preference]]\n+[[request-body-search-preference]]\n === Preference\n \n Controls a `preference` of the shard copies on which to execute the search.  By\ndiff --git a/docs/reference/search/request/query.asciidoc b/docs/reference/search/request/query.asciidoc\nindex fa06d0d9bb4..153608fa3d6 100644\n--- a/docs/reference/search/request/query.asciidoc\n+++ b/docs/reference/search/request/query.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-query]]\n+[[request-body-search-query]]\n === Query\n \n The query element within the search request body allows to define a\ndiff --git a/docs/reference/search/request/rescore.asciidoc b/docs/reference/search/request/rescore.asciidoc\nindex c2277aada3f..4c8f8776c08 100644\n--- a/docs/reference/search/request/rescore.asciidoc\n+++ b/docs/reference/search/request/rescore.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-rescore]]\n+[[request-body-search-rescore]]\n === Rescoring\n \n Rescoring can help to improve precision by reordering just the top (eg\ndiff --git a/docs/reference/search/request/script-fields.asciidoc b/docs/reference/search/request/script-fields.asciidoc\nindex 1bd61e00481..675237a0514 100644\n--- a/docs/reference/search/request/script-fields.asciidoc\n+++ b/docs/reference/search/request/script-fields.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-script-fields]]\n+[[request-body-search-script-fields]]\n === Script Fields\n \n Allows to return a <<modules-scripting,script\ndiff --git a/docs/reference/search/request/scroll.asciidoc b/docs/reference/search/request/scroll.asciidoc\nindex 3503ad2c9c8..3c708f24a91 100644\n--- a/docs/reference/search/request/scroll.asciidoc\n+++ b/docs/reference/search/request/scroll.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-scroll]]\n+[[request-body-search-scroll]]\n === Scroll\n \n While a `search` request returns a single ``page'' of results, the `scroll`\ndiff --git a/docs/reference/search/request/search-after.asciidoc b/docs/reference/search/request/search-after.asciidoc\nindex 53d25c613b9..663212d1c89 100644\n--- a/docs/reference/search/request/search-after.asciidoc\n+++ b/docs/reference/search/request/search-after.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-search-after]]\n+[[request-body-search-search-after]]\n === Search After\n \n Pagination of results can be done by using the `from` and `size` but the cost becomes prohibitive when the deep pagination is reached.\ndiff --git a/docs/reference/search/request/search-type.asciidoc b/docs/reference/search/request/search-type.asciidoc\nindex 7cac034f29c..1000c771022 100644\n--- a/docs/reference/search/request/search-type.asciidoc\n+++ b/docs/reference/search/request/search-type.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-search-type]]\n+[[request-body-search-search-type]]\n === Search Type\n \n There are different execution paths that can be done when executing a\ndiff --git a/docs/reference/search/request/seq-no.asciidoc b/docs/reference/search/request/seq-no.asciidoc\nindex 0ab7bec4487..8c12a3e3476 100644\n--- a/docs/reference/search/request/seq-no.asciidoc\n+++ b/docs/reference/search/request/seq-no.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-seq-no-primary-term]]\n+[[request-body-search-seq-no-primary-term]]\n === Sequence Numbers and Primary Term\n \n Returns the sequence number and primary term of the last modification to each search hit.\ndiff --git a/docs/reference/search/request/sort.asciidoc b/docs/reference/search/request/sort.asciidoc\nindex c12ec3a679a..080bec6f976 100644\n--- a/docs/reference/search/request/sort.asciidoc\n+++ b/docs/reference/search/request/sort.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-sort]]\n+[[request-body-search-sort]]\n === Sort\n \n Allows you to add one or more sorts on specific fields. Each sort can be\ndiff --git a/docs/reference/search/request/source-filtering.asciidoc b/docs/reference/search/request/source-filtering.asciidoc\nindex 483d3311d70..2b46b7ea632 100644\n--- a/docs/reference/search/request/source-filtering.asciidoc\n+++ b/docs/reference/search/request/source-filtering.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-source-filtering]]\n+[[request-body-search-source-filtering]]\n === Source filtering\n \n \ndiff --git a/docs/reference/search/request/stored-fields.asciidoc b/docs/reference/search/request/stored-fields.asciidoc\nindex b55e0fce457..5cc8300afe6 100644\n--- a/docs/reference/search/request/stored-fields.asciidoc\n+++ b/docs/reference/search/request/stored-fields.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-stored-fields]]\n+[[request-body-search-stored-fields]]\n === Stored Fields\n \n WARNING: The `stored_fields` parameter is about fields that are explicitly marked as\ndiff --git a/docs/reference/search/request/track-total-hits.asciidoc b/docs/reference/search/request/track-total-hits.asciidoc\nindex 210f6321816..44e353ded05 100644\n--- a/docs/reference/search/request/track-total-hits.asciidoc\n+++ b/docs/reference/search/request/track-total-hits.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-track-total-hits]]\n+[[request-body-search-track-total-hits]]\n === Track total hits\n \n Generally the total hit count can't be computed accurately without visiting all\ndiff --git a/docs/reference/search/request/version.asciidoc b/docs/reference/search/request/version.asciidoc\nindex 57c6ce27feb..53343394fa3 100644\n--- a/docs/reference/search/request/version.asciidoc\n+++ b/docs/reference/search/request/version.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-request-version]]\n+[[request-body-search-version]]\n === Version\n \n Returns a version for each search hit.\ndiff --git a/docs/reference/search/suggesters/completion-suggest.asciidoc b/docs/reference/search/suggesters/completion-suggest.asciidoc\nindex 0ed0601b086..e72d0e16eac 100644\n--- a/docs/reference/search/suggesters/completion-suggest.asciidoc\n+++ b/docs/reference/search/suggesters/completion-suggest.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-suggesters-completion]]\n+[[completion-suggester]]\n === Completion Suggester\n \n NOTE: In order to understand the format of suggestions, please\ndiff --git a/docs/reference/search/suggesters/context-suggest.asciidoc b/docs/reference/search/suggesters/context-suggest.asciidoc\nindex 63692f0b06f..759266658bf 100644\n--- a/docs/reference/search/suggesters/context-suggest.asciidoc\n+++ b/docs/reference/search/suggesters/context-suggest.asciidoc\n@@ -1,4 +1,4 @@\n-[[suggester-context]]\n+[[context-suggester]]\n === Context Suggester\n \n The completion suggester considers all documents in the index, but it is often\ndiff --git a/docs/reference/search/suggesters/misc.asciidoc b/docs/reference/search/suggesters/misc.asciidoc\nindex 6866df24c09..736f79f010d 100644\n--- a/docs/reference/search/suggesters/misc.asciidoc\n+++ b/docs/reference/search/suggesters/misc.asciidoc\n@@ -1,4 +1,4 @@\n-[[returning-suggesters-type]]\n+[[return-suggesters-type]]\n === Returning the type of the suggester\n \n Sometimes you need to know the exact type of a suggester in order to parse its results. The `typed_keys` parameter\ndiff --git a/docs/reference/search/suggesters/phrase-suggest.asciidoc b/docs/reference/search/suggesters/phrase-suggest.asciidoc\nindex 6b657a9e8ff..cdddf0daaea 100644\n--- a/docs/reference/search/suggesters/phrase-suggest.asciidoc\n+++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-suggesters-phrase]]\n+[[phrase-suggester]]\n === Phrase Suggester\n \n NOTE: In order to understand the format of suggestions, please\ndiff --git a/docs/reference/search/suggesters/term-suggest.asciidoc b/docs/reference/search/suggesters/term-suggest.asciidoc\nindex f9dd0c91335..9be7f111f61 100644\n--- a/docs/reference/search/suggesters/term-suggest.asciidoc\n+++ b/docs/reference/search/suggesters/term-suggest.asciidoc\n@@ -1,4 +1,4 @@\n-[[search-suggesters-term]]\n+[[term-suggester]]\n === Term suggester\n \n NOTE: In order to understand the format of suggestions, please",
    "Try debug CI test failure": "diff --git a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy\nindex 8243c29ac3..89ac1edece 100644\n--- a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy\n+++ b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy\n@@ -43,7 +43,7 @@ import spock.lang.Specification\n  * @author Graeme Rocher\n  * @since 1.0\n  */\n-class RxHttpPostSpec extends Specification {\n+class   RxHttpPostSpec extends Specification {\n \n     @Shared\n     @AutoCleanup\n@@ -181,7 +181,11 @@ class RxHttpPostSpec extends Specification {\n         )\n         User user = flowable.onErrorResumeNext((Function){ t ->\n             if (t instanceof HttpClientResponseException) {\n-                return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())\n+                try {\n+                    return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())\n+                } catch (e) {\n+                    return Flowable.error(e)\n+                }\n          ",
    "Remove old autodeps functions . . Summary : Now that ` buck autodeps ` has landed , we have no need for this anymore . . Test Plan : CI .": "diff --git a/src/com/facebook/buck/json/buck.py b/src/com/facebook/buck/json/buck.py\nindex 1b4e1ae4b2..fb8b6c6471 100644\n--- a/src/com/facebook/buck/json/buck.py\n+++ b/src/com/facebook/buck/json/buck.py\n@@ -421,23 +421,6 @@ def get_base_path(build_env=None):\n     return build_env.base_path\n \n \n-@provide_for_build\n-def add_deps(name, deps=[], build_env=None):\n-    assert build_env.type == BuildContextType.BUILD_FILE, (\n-        \"Cannot use `add_deps()` at the top-level of an included file.\")\n-\n-    if name not in build_env.rules:\n-        raise ValueError(\n-            'Invoked \\'add_deps\\' on non-existent rule %s.' % name)\n-\n-    rule = build_env.rules[name]\n-    if 'deps' not in rule:\n-        raise ValueError(\n-            'Invoked \\'add_deps\\' on rule %s that has no \\'deps\\' field'\n-            % name)\n-    rule['deps'] = rule['deps'] + deps\n-\n-\n GENDEPS_SIGNATURE = re.compile(r'^#@# GENERATED FILE: DO NOT MODIFY ([a-f0-9]{40}) #@#\\n$')\n \n class BuildFileProcessor(object):\ndiff --git a/test/com/facebook/buck/parser/ParserTest.java b/test/com/facebook/buck/parser/ParserTest.java\nindex 2a562e58e0..2a23a11f09 100644\n--- a/test/com/facebook/buck/parser/ParserTest.java\n+++ b/test/com/facebook/buck/parser/ParserTest.java\n@@ -1204,45 +1204,6 @@ public class ParserTest {\n     assertEquals(\"Should have not invalidated cache.\", 1, counter.calls);\n   }\n \n-  @Test\n-  public void testGeneratedDeps() throws Exception {\n-    // Execute buildTargetGraphForBuildTargets() with a target in a valid file but a bad rule name.\n-    tempDir.newFolder(\"java\", \"com\", \"facebook\", \"generateddeps\");\n-\n-    Path testGeneratedDepsBuckFile = tempDir.newFile(\"java/com/facebook/generateddeps/BUCK\");\n-    Files.write(\n-        testGeneratedDepsBuckFile,\n-        (\"java_library(name = 'foo')\\n\" +\n-            \"java_library(name = 'bar')\\n\" +\n-            \"add_deps(name = 'foo', deps = [':bar'])\\n\").getBytes(UTF_8));\n-\n-    BuildTarget fooTarget = BuildTarget.builder(\n-        tempDir.getRoot().toRealPath(),\n-        \"//java/com/facebook/generateddeps\",\n-        \"foo\").build();\n-\n-    BuildTarget barTarget = BuildTarget.builder(\n-        tempDir.getRoot().toRealPath(),\n-        \"//java/com/facebook/generateddeps\",\n-        \"bar\").build();\n-    Iterable<BuildTarget> buildTargets = ImmutableList.of(fooTarget, barTarget);\n-\n-    TargetGraph targetGraph = parser.buildTargetGraph(\n-        eventBus,\n-        cell,\n-        false,\n-        executorService,\n-        buildTargets);\n-    BuildRuleResolver resolver = buildActionGraph(eventBus, targetGraph);\n-\n-    BuildRule fooRule = resolver.requireRule(fooTarget);\n-    assertNotNull(fooRule);\n-    BuildRule barRule = resolver.requireRule(barTarget);\n-    assertNotNull(barRule);\n-\n-    assertEquals(ImmutableSet.of(barRule), fooRule.getDeps());\n-  }\n-\n   @Test\n   public void whenAllRulesAreRequestedWithDifferingIncludesThenRulesAreParsedTwice()\n       throws BuildFileParseException, BuildTargetException, IOException, InterruptedException {",
    "Adjust lastCalculatedSize comment .": "diff --git a/core/src/main/java/org/bitcoinj/wallet/Wallet.java b/core/src/main/java/org/bitcoinj/wallet/Wallet.java\nindex f5c64aa4a..74b84e16e 100644\n--- a/core/src/main/java/org/bitcoinj/wallet/Wallet.java\n+++ b/core/src/main/java/org/bitcoinj/wallet/Wallet.java\n@@ -4829,8 +4829,7 @@ public class Wallet extends BaseTaggableObject\n         TransactionOutput selection2Change = null;\n         CoinSelection selection1 = null;\n         TransactionOutput selection1Change = null;\n-        // We keep track of the last size of the transaction we calculated but only if the act of adding inputs and\n-        // change resulted in the size crossing a 1000 byte boundary. Otherwise it stays at zero.\n+        // We keep track of the last size of the transaction we calculated.\n         int lastCalculatedSize = 0;\n         Coin valueNeeded, valueMissing =",
    "Use the standard coding conventions . . git - svn - id : https : / / svn . apache . org / repos / asf / maven / components / trunk @ 400220 13f79535 - 47bb - 0310 - 9956 - ffa450edef68": "diff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java\nindex cfe8128f4..a16a7f6c7 100644\n--- a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java\n+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java\n@@ -14,18 +14,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n import org.codehaus.plexus.PlexusContainer;\n \n /**\n  * Instances of this interface can be user upon start of the embedder to customize\n  * the components in the plexus container.\n+ *\n  * @author mkleint\n  */\n-public interface ContainerCustomizer {\n+public interface ContainerCustomizer\n+{\n     /**\n      * callback from embedder's start() method that allows to customize the components\n      * in the container.\n      */\n-    void customize(PlexusContainer container);\n-    \n+    void customize( PlexusContainer container );\n+\n }\ndiff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java\nindex 5aae1227c..2c6edb312 100644\n--- a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java\n+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java\n@@ -19,16 +19,20 @@\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n+\n import org.apache.maven.settings.Settings;\n \n /**\n  * Default implementation of MavenEmbedRequest intefrace.\n+ *\n  * @author mkleint\n  */\n-public class DefaultMavenEmbedRequest implements MavenEmbedRequest {\n+public class DefaultMavenEmbedRequest\n+    implements MavenEmbedRequest\n+{\n \n     private List inactives;\n-    \n+\n     private List actives;\n \n     private Settings settings;\n@@ -39,68 +43,85 @@ public class DefaultMavenEmbedRequest implements MavenEmbedRequest {\n \n     private ContainerCustomizer customizer;\n \n-    /** Creates a new instance of DefaultMavenEmbedRequest */\n-    public DefaultMavenEmbedRequest() {\n+    /**\n+     * Creates a new instance of DefaultMavenEmbedRequest\n+     */\n+    public DefaultMavenEmbedRequest()\n+    {\n     }\n-   \n-    public MavenEmbedRequest addActiveProfile(String profile) {\n-        getActiveProfiles().add(profile);\n+\n+    public MavenEmbedRequest addActiveProfile( String profile )\n+    {\n+        getActiveProfiles().add( profile );\n         return this;\n     }\n \n-    public MavenEmbedRequest addInactiveProfile(String profile) {\n-        getInactiveProfiles().add(profile);\n+    public MavenEmbedRequest addInactiveProfile( String profile )\n+    {\n+        getInactiveProfiles().add( profile );\n         return this;\n     }\n \n-    public MavenEmbedRequest addActiveProfiles(List profiles) {\n-        getActiveProfiles().addAll(profiles);\n+    public MavenEmbedRequest addActiveProfiles( List profiles )\n+    {\n+        getActiveProfiles().addAll( profiles );\n         return this;\n     }\n \n-    public MavenEmbedRequest addInactiveProfiles(List profiles) {\n-        getInactiveProfiles().addAll(profiles);\n+    public MavenEmbedRequest addInactiveProfiles( List profiles )\n+    {\n+        getInactiveProfiles().addAll( profiles );\n         return this;\n     }\n \n-    public List getActiveProfiles() {\n-        if (actives == null) {\n+    public List getActiveProfiles()\n+    {\n+        if ( actives == null )\n+        {\n             actives = new ArrayList();\n         }\n         return actives;\n     }\n \n-    public List getInactiveProfiles() {\n-        if (inactives == null) {\n+    public List getInactiveProfiles()\n+    {\n+        if ( inactives == null )\n+        {\n             inactives = new ArrayList();\n         }\n         return inactives;\n     }\n \n-    public MavenEmbedRequest setUserSettingsFile(File user) {\n+    public MavenEmbedRequest setUserSettingsFile( File user )\n+    {\n         userSettings = user;\n         return this;\n     }\n \n-    public MavenEmbedRequest setGlobalSettingsFile(File global) {\n+    public MavenEmbedRequest setGlobalSettingsFile( File global )\n+    {\n         globalSettings = global;\n         return this;\n     }\n \n-    public File getUserSettingsFile() {\n+    public File getUserSettingsFile()\n+    {\n         return userSettings;\n     }\n \n-    public File getGlobalSettingsFile() {\n+    public File getGlobalSettingsFile()\n+    {\n         return globalSettings;\n     }\n \n-    public MavenEmbedRequest setConfigurationCustomizer(ContainerCustomizer customizer) {\n+    public MavenEmbedRequest setConfigurationCustomizer( ContainerCustomizer customizer )\n+    {\n         this.customizer = customizer;\n         return this;\n     }\n \n-    public ContainerCustomizer getContainerCustomizer() {\n+    public ContainerCustomizer getContainerCustomizer()\n+    {\n         return",
    "Return new StringBuffer instead of null ( and avoid checking for null just to create a new StringBuffer )": "diff --git a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java\nindex 4e216c691d..6d0b5bbe3b 100644\n--- a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java\n+++ b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java\n@@ -370,9 +370,6 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {\n                 comp.replaceSelection(\"\");\n \n                 StringBuffer currentword = getCurrentWord(comp);\n-                if (currentword == null) {\n-                    currentword = new StringBuffer();\n-                }\n \n                 // only \"real characters\" end up here\n                 assert (!Character.isISOControl(ch));\n@@ -429,7 +426,7 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {\n                         && Character.isWhitespace(comp.getText().charAt(comp.getCaretPosition()))) {\n                  ",
    "Add MODE_NIGHT_AUTO_BATTERY option for AppCompat .": "diff --git a/appcompat/api/1.1.0-alpha03.txt b/appcompat/api/1.1.0-alpha03.txt\nindex 93a4ae1bbf9..d387b2216e3 100644\n--- a/appcompat/api/1.1.0-alpha03.txt\n+++ b/appcompat/api/1.1.0-alpha03.txt\n@@ -289,7 +289,9 @@ package androidx.appcompat.app {\n     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa\n     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c\n     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d\n-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0\n+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0\n+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3\n+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0\n     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff\n     field public static final int MODE_NIGHT_NO = 1; // 0x1\n     field public static final int MODE_NIGHT_YES = 2; // 0x2\ndiff --git a/appcompat/api/current.txt b/appcompat/api/current.txt\nindex 93a4ae1bbf9..d387b2216e3 100644\n--- a/appcompat/api/current.txt\n+++ b/appcompat/api/current.txt\n@@ -289,7 +289,9 @@ package androidx.appcompat.app {\n     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa\n     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c\n     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d\n-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0\n+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0\n+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3\n+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0\n     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff\n     field public static final int MODE_NIGHT_NO = 1; // 0x1\n     field public static final int MODE_NIGHT_YES = 2; // 0x2\ndiff --git a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java\nindex e16949d5f8a..a536d3097a7 100644\n--- a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java\n+++ b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java\n@@ -102,7 +102,7 @@ public class NightModeTestCase {\n     }\n \n     @Test\n-    public void testNightModeAutoRecreatesOnTimeChange() throws Throwable {\n+    public void testNightModeAutoTimeRecreatesOnTimeChange() throws Throwable {\n         // Create a fake TwilightManager and set it as the app instance\n         final FakeTwilightManager twilightManager = new FakeTwilightManager();\n         TwilightManager.setInstance(twilightManager);\n@@ -113,8 +113,8 @@ public class NightModeTestCase {\n         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));\n \n         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically\n-        final NightModeActivity newActivity =\n-                setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);\n+        final NightModeActivity newActivity = setLocalNightModeAndWaitForRecreate(activity,\n+                        AppCompatDelegate.MODE_NIGHT_AUTO_TIME);\n         final AppCompatDelegateImpl newDelegate =\n                 (AppCompatDelegateImpl) newActivity.getDelegate();\n \n@@ -123,13 +123,13 @@ public class NightModeTestCase {\n             @Override\n             public void run() {\n                 twilightManager.setIsNight(true);\n-                newDelegate.getAutoNightModeManager().dispatchTimeChanged();\n+                newDelegate.getAutoTimeNightModeManager().onChange();\n             }\n         });\n \n         RecreatedAppCompatActivity.sResumed = new CountDownLatch(1);\n         assertTrue(RecreatedAppCompatActivity.sResumed.await(1, TimeUnit.SECONDS));\n-        // At this point recreate that has been triggered by dispatchTimeChanged call\n+        // At this point recreate that has been triggered by onChange call\n         // has completed\n \n         // Check that the text has changed, signifying that night resources are being used\n@@ -137,7 +137,7 @@ public class NightModeTestCase {\n     }\n \n     @Test\n-    public void testNightModeAutoRecreatesOnResume() throws Throwable {\n+    public void testNightModeAutoTimeRecreatesOnResume() throws Throwable {\n         // Create a fake TwilightManager and set it as the app instance\n         final FakeTwilightManager twilightManager = new FakeTwilightManager();\n         TwilightManager.setInstance(twilightManager);\n@@ -145,7 +145,8 @@ public class NightModeTestCase {\n         NightModeActivity activity = mActivityTestRule.getActivity();\n \n         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically\n-        activity = setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);\n+        activity = setLocalNightModeAndWaitForRecreate(activity,\n+                AppCompatDelegate.MODE_NIGHT_AUTO_TIME);\n         // Verify that we're currently in day mode\n         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));\n \ndiff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java\nindex 8dd19486361..1fc56d27ca6 100644\n--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java\n+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java\n@@ -91,39 +91,60 @@ public abstract class AppCompatDelegate {\n     static final String TAG = \"AppCompatDelegate\";\n \n     /**\n-     * Mode which means to not use night mode, and therefore prefer {@code notnight} qualified\n-     * resources where available, regardless of the time.\n-     *\n-     * @see #setLocalNightMode(int)\n-     */\n-    public static final int MODE_NIGHT_NO = 1;\n-\n-    /**\n-     * Mode which means to always use night mode, and therefore prefer {@code night} qualified\n-     * resources where available, regardless of the time.\n+     * Mode which uses the system's night mode setting to determine if it is night or not.\n      *\n      * @see #setLocalNightMode(int)\n      */\n-    public static final int MODE_NIGHT_YES = 2;\n+    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;\n \n     /**\n-     * Mode which means to use night mode when it is determined that it is night or not.\n+     * Night mode which switches between dark and light mode depending on the time of day\n+     * (dark at night, light in the day).\n      *\n      * <p>The calculation used to determine whether it is night or not makes use of the location\n      * APIs (if this app has the necessary permissions). This allows us to generate accurate\n      * sunrise and sunset times. If this app does not have permission to access the location APIs\n      * then we use hardcoded times which will be less accurate.</p>\n      *\n+     * @deprecated Automatic switching of dark/light based on the current time is deprecated.\n+     * Considering using an explicit setting, or {@link #MODE_NIGHT_AUTO_BATTERY}.\n+     */\n+    @Deprecated\n+    public static final int MODE_NIGHT_AUTO_TIME = 0;\n+\n+    /**\n+     * @deprecated Use {@link AppCompatDelegate#MODE_NIGHT_AUTO_TIME} instead\n+     */\n+    @Deprecated\n+    public static final int MODE_NIGHT_AUTO = MODE_NIGHT_AUTO_TIME;\n+\n+    /**\n+     * Night mode which uses always uses a light mode, enabling {@code notnight} qualified\n+     * resources regardless of the time.\n+     *\n      * @see #setLocalNightMode(int)\n      */\n-    public static final int MODE_NIGHT_AUTO = 0;\n+    public static final int MODE_NIGHT_NO = 1;\n \n     /**\n-     * Mode which uses the system's night mode setting to determine if it is night or not.\n+     * Night mode which uses always uses a dark mode, enabling {@code night} qualified\n+     * resources regardless of the time.\n      *\n      * @see #setLocalNightMode(int)\n      */\n-    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;\n+    public static final int MODE_NIGHT_YES = 2;\n+\n+    /**\n+     * Night mode which uses a dark mode when the system's 'Battery Saver' feature is enabled,\n+     * otherwise it uses a 'light mode'. This mode can help the device to decrease power usage,\n+     * depending on the display technology in the device.\n+     *\n+     * <em>Please note: this mode should only be used when running on devices which do not\n+     * provide a similar device-wide setting.</em>\n+     *\n+     * @see #setLocalNightMode(int)\n+     */\n+    public static final int MODE_NIGHT_AUTO_BATTERY = 3;\n \n     static final int MODE_NIGHT_UNSPECIFIED = -100;\n \n@@ -132,8 +153,8 @@ public abstract class AppCompatDelegate {\n \n     /** @hide */\n     @RestrictTo(LIBRARY_GROUP)\n-    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO, MODE_NIGHT_FOLLOW_SYSTEM,\n-            MODE_NIGHT_UNSPECIFIED})\n+    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO_TIME, MODE_NIGHT_FOLLOW_SYSTEM,\n+            MODE_NIGHT_UNSPECIFIED, MODE_NIGHT_AUTO_BATTERY})\n     @Retention(RetentionPolicy.SOURCE)\n     public @interface NightMode {}\n \n@@ -441,8 +462,8 @@ public abstract class AppCompatDelegate {\n      * automatically recreated or its {@link Configuration} updated. Which one depends on how\n      * the component is setup (via {@code android:configChanges} or similar).</p>\n      *\n-     * <p>You can notified when the night changes by overriding the\n-     * {@link AppCompatCallback#onNightModeChanged(int)} method.</p>\n+     * <p>You can be notified when the night changes by overriding the\n+     * {@link AppCompatActivity#onNightModeChanged(int)} method.</p>\n      *\n      * @see #setDefaultNightMode(int)\n      * @see #setLocalNightMode(int)\n@@ -475,10 +496,11 @@ public abstract class AppCompatDelegate {\n      */\n     public static void setDefaultNightMode(@NightMode int mode) {\n         switch (mode) {\n-            case MODE_NIGHT_AUTO:\n             case MODE_NIGHT_NO:\n             case MODE_NIGHT_YES:\n             case MODE_NIGHT_FOLLOW_SYSTEM:\n+            case MODE_NIGHT_AUTO_TIME:\n+            case MODE_NIGHT_AUTO_BATTERY:\n                 sDefaultNightMode = mode;\n                 break;\n             default:\ndiff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java\nindex 88d967cd381..5f91b46b8b2 100644\n--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java\n+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java\n@@ -20,6 +20,8 @@ import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;\n import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;\n import static android.view.Window.FEATURE_OPTIONS_PANEL;\n \n+import static androidx.annotation.RestrictTo.Scope.LIBRARY;\n+\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.app.Dialog;\n@@ -42,6 +44,7 @@ import android.os.Build;\n import android.os.Bundle;\n import android.os.Parcel;\n import android.os.Parcelable;\n+import android.os.PowerManager;\n import android.text.TextUtils;\n import android.util.AndroidRuntimeException;\n import android.util.AttributeSet;\n@@ -71,6 +74,7 @@ import androidx.annotation.IdRes;\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.annotation.RequiresApi;\n+import androidx.annotation.RestrictTo;\n import androidx.annotation.StyleRes;\n import androidx.annotation.VisibleForTesting;\n import androidx.appcompat.R;\n@@ -221,7 +225,8 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n     private boolean mActivityHandlesUiMode;\n     private boolean mActivityHandlesUiModeChecked;\n \n-    private AutoNightModeManager mAutoNightModeManager;\n+    private AutoNightModeManager mAutoTimeNightModeManager;\n+    private AutoNightModeManager mAutoBatteryNightModeManager;\n \n     boolean mInvalidatePanelMenuPosted;\n     int mInvalidatePanelMenuFeatures;\n@@ -448,8 +453,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n         }\n \n         // Make sure we clean up any receivers setup for AUTO mode\n-        if (mAutoNightModeManager != null) {\n-            mAutoNightModeManager.cleanup();\n+        if (mAutoTimeNightModeManager != null) {\n+            mAutoTimeNightModeManager.cleanup();\n+        }\n+        if (mAutoBatteryNightModeManager != null) {\n+            mAutoBatteryNightModeManager.cleanup();\n         }\n     }\n \n@@ -517,8 +525,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n         }\n \n         // Make sure we clean up any receivers setup for AUTO mode\n-        if (mAutoNightModeManager != null) {\n-            mAutoNightModeManager.cleanup();\n+        if (mAutoTimeNightModeManager != null) {\n+            mAutoTimeNightModeManager.cleanup();\n+        }\n+        if (mAutoBatteryNightModeManager != null) {\n+            mAutoBatteryNightModeManager.cleanup();\n         }\n     }\n \n@@ -2021,10 +2032,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n             applied = updateForNightMode(modeToApply);\n         }\n \n-        if (nightMode == MODE_NIGHT_AUTO) {\n+        if (nightMode == MODE_NIGHT_AUTO_TIME) {\n             // If we're already been started, we may need to setup auto mode again\n-            ensureAutoNightModeManager();\n-            mAutoNightModeManager.setup();\n+            getAutoTimeNightModeManager().setup();\n+        } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {\n+            getAutoBatteryNightModeManager().setup();\n         }\n \n         return applied;\n@@ -2033,25 +2045,23 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n     @Override\n     public void setLocalNightMode(@NightMode final int mode) {\n         switch (mode) {\n-            case MODE_NIGHT_AUTO:\n             case MODE_NIGHT_NO:\n             case MODE_NIGHT_YES:\n             case MODE_NIGHT_FOLLOW_SYSTEM:\n+            case MODE_NIGHT_AUTO_TIME:\n+            case MODE_NIGHT_AUTO_BATTERY:\n                 if (mLocalNightMode != mode) {\n                     mLocalNightMode = mode;\n                     applyDayNight();\n                 }\n                 break;\n-            default:\n-                Log.i(TAG, \"setLocalNightMode() called with an unknown mode\");\n-                break;\n         }\n     }\n \n     @ApplyableNightMode\n     int mapNightMode(@NightMode final int mode) {\n         switch (mode) {\n-            case MODE_NIGHT_AUTO:\n+            case MODE_NIGHT_AUTO_TIME:\n                 if (Build.VERSION.SDK_INT >= 23) {\n                     UiModeManager uiModeManager = mContext.getSystemService(UiModeManager.class);\n                     if (uiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO) {\n@@ -2060,14 +2070,14 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n                         return MODE_NIGHT_FOLLOW_SYSTEM;\n                     }\n                 }\n-                ensureAutoNightModeManager();\n-                return mAutoNightModeManager.getApplyableNightMode();\n+                return getAutoTimeNightModeManager().getApplyableNightMode();\n+            case MODE_NIGHT_AUTO_BATTERY:\n+                return getAutoBatteryNightModeManager().getApplyableNightMode();\n             case MODE_NIGHT_UNSPECIFIED:\n                 // If we don't have a mode specified, just let the system handle it\n                 return MODE_NIGHT_FOLLOW_SYSTEM;\n-            default:\n-                return mode;\n         }\n+        return mode;\n     }\n \n     @NightMode\n@@ -2151,16 +2161,24 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n         return handled;\n     }\n \n-    private void ensureAutoNightModeManager() {\n-        if (mAutoNightModeManager == null) {\n-            mAutoNightModeManager = new AutoNightModeManager(TwilightManager.getInstance(mContext));\n+    /**\n+     * @hide\n+     */\n+    @NonNull\n+    @RestrictTo(LIBRARY)\n+    final AutoNightModeManager getAutoTimeNightModeManager() {\n+        if (mAutoTimeNightModeManager == null) {\n+            mAutoTimeNightModeManager = new AutoTimeNightModeManager(\n+                    TwilightManager.getInstance(mContext));\n         }\n+        return mAutoTimeNightModeManager;\n     }\n \n-    @VisibleForTesting\n-    final AutoNightModeManager getAutoNightModeManager() {\n-        ensureAutoNightModeManager();\n-        return mAutoNightModeManager;\n+    private AutoNightModeManager getAutoBatteryNightModeManager() {\n+        if (mAutoBatteryNightModeManager == null) {\n+            mAutoBatteryNightModeManager = new AutoBatteryNightModeManager(mContext);\n+        }\n+        return mAutoBatteryNightModeManager;\n     }\n \n     private boolean isActivityManifestHandlingUiMode() {\n@@ -2699,67 +2717,110 @@ class AppCompatDelegateImpl extends AppCompatDelegate\n         }\n     }\n \n+    /**\n+     * @hide\n+     */\n     @VisibleForTesting\n-    final class AutoNightModeManager {\n-        private TwilightManager mTwilightManager;\n-        private boolean mIsNight;\n-\n-        private BroadcastReceiver mAutoTimeChangeReceiver;\n-        private IntentFilter mAutoTimeChangeReceiverFilter;\n-\n-        AutoNightModeManager(@NonNull TwilightManager twilightManager) {\n-            mTwilightManager = twilightManager;\n-            mIsNight = twilightManager.isNight();\n-        }\n+    @RestrictTo(LIBRARY)\n+    abstract class AutoNightModeManager {\n+        private BroadcastReceiver mReceiver;\n \n         @ApplyableNightMode\n-        int getApplyableNightMode() {\n-            mIsNight = mTwilightManager.isNight();\n-            return mIsNight ? MODE_NIGHT_YES : MODE_NIGHT_NO;\n-        }\n+        abstract int getApplyableNightMode();\n \n-        void dispatchTimeChanged() {\n-            final boolean isNight = mTwilightManager.isNight();\n-            if (isNight != mIsNight) {\n-                mIsNight = isNight;\n-                applyDayNight();\n-            }\n-        }\n+        abstract void onChange();\n \n         void setup() {\n             cleanup();\n \n-            // If we're set to AUTO, we register a receiver to be notified on time changes. The\n-            // system only sends the tick out every minute, but that's enough fidelity for our use\n-            // case\n-            if (mAutoTimeChangeReceiver == null) {\n-                mAutoTimeChangeReceiver = new BroadcastReceiver() {\n+            final IntentFilter filter = createIntentFilterForBroadcastReceiver();\n+            if (filter == null || filter.countActions() == 0) {\n+                // Null or empty IntentFilter, skip\n+                return;\n+            }\n+\n+            if (mReceiver == null) {\n+                mReceiver = new BroadcastReceiver() {\n                     @Override\n                     public void onReceive(Context context, Intent intent) {\n-                        if (DEBUG) {\n-                            Log.d(\"AutoTimeChangeReceiver\", \"onReceive | Intent: \" + intent);\n-                        }\n-                        dispatchTimeChanged();\n+                        onChange();\n                     }\n                 };\n             }\n-            if (mAutoTimeChangeReceiverFilter == null) {\n-                mAutoTimeChangeReceiverFilter = new IntentFilter();\n-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_CHANGED);\n-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);\n-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_TICK);\n-            }\n-            mContext.registerReceiver(mAutoTimeChangeReceiver, mAutoTimeChangeReceiverFilter);\n+            mContext.registerReceiver(mReceiver, filter);\n         }\n \n+        @Nullable\n+        abstract IntentFilter createIntentFilterForBroadcastReceiver();\n+\n         void cleanup() {\n-            if (mAutoTimeChangeReceiver != null) {\n-                mContext.unregisterReceiver(mAutoTimeChangeReceiver);\n-                mAutoTimeChangeReceiver = null;\n+            if (mReceiver != null) {\n+             ",
    "Added unit test .": "diff --git a/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java b/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java\nnew file mode 100644\nindex 00000000000..0e0dc9ba0db\n--- /dev/null\n+++ b/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java\n@@ -0,0 +1,65 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean;\n+\n+import org.apache.camel.ContextTestSupport;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.impl.JndiRegistry;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class BeanExplicitMethodTest extends ContextTestSupport {\n+\n+    @Override\n+    protected JndiRegistry createRegistry() throws Exception {\n+        JndiRegistry jndi = super.createRegistry();\n+        jndi.bind(\"foo\", new MyOtherFooBean());\n+        return jndi;\n+    }\n+\n+    public void testStringEcho() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(\"WorldWorld\");\n+\n+        template.sendBody(\"direct:start\", \"World\");\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    public void testIntegerEcho() throws Exception {\n+        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n+        mock.expectedBodiesReceived(25);\n+\n+        template.sendBody(\"direct:start\", 5);\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:start\")\n+                    .beanRef(\"foo\", \"echo\")\n+                    .to(\"mock:result\");\n+            }\n+        };\n+    }\n+}\ndiff --git a/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java b/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java\nnew file mode 100644\nindex 00000000000..f90f80d20b6\n--- /dev/null\n+++ b/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java\n@@ -0,0 +1,31 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.bean;\n+\n+/**\n+ * @version $Revision$\n+ */\n+public class MyOtherFooBean {\n+\n+    public String echo(String s) {\n+        return s + s;\n+    }\n+\n+    public Integer echo(Integer i) {\n+        return i.intValue() * i.intValue();\n+    }\n+}",
    "exclude SchemaLogEnsureSqlScriptTest .": "diff --git a/qa/test-db-upgrade/pom.xml b/qa/test-db-upgrade/pom.xml\nindex 21f18f60b2..5ea2aaa350 100755\n--- a/qa/test-db-upgrade/pom.xml\n+++ b/qa/test-db-upgrade/pom.xml\n@@ -358,6 +358,10 @@\n \n                 <exclude>**/ProcessDiagramRetrievalTest.java</exclude>\n                 <exclude>**/ProcessDiagramParseTest.java</exclude>\n+\n+                <!-- as the patch scripts of current version are not applied for db-upgrade test suite\n+                     this must be skipped, it is already tested in the unit tests -->\n+                <exclude>**/SchemaLogEnsureSqlScriptTest.java</exclude>\n              ",
    "Added tag jdk8u202 - b26 for changeset d290c0f083ab": "diff --git a/jaxws/.hgtags b/jaxws/.hgtags\nindex 419e26ca52..5b9ee31ae5 100644\n--- a/jaxws/.hgtags\n+++ b/jaxws/.hgtags\n@@ -976,3 +976,4 @@ a24e8384bfc34d7df62b6707b5e8b4d403b6a3b6 jdk8u202-b04\n 7458800f0a265f1b8d939e982ffbed62f8262d22 jdk8u202-b07\n 99fbc435f2faedf1dd68e80d679ebf4abd8c98c9 jdk8u202-b08\n a51e13337c7b4575acf7930ebf80ccbfc405fa17 jdk8u202-b25\n+81d8126f05e5290e3974d4f3ea7360481676a78c jdk8u202-b26",
    "Add support for loading static resources from / META - INF / resources inside JARs bundled with a web application .": "diff --git a/java/org/apache/catalina/Context.java b/java/org/apache/catalina/Context.java\nindex 9e5c467704..ef2bd3cfcf 100644\n--- a/java/org/apache/catalina/Context.java\n+++ b/java/org/apache/catalina/Context.java\n@@ -1183,5 +1183,11 @@ public interface Context extends Container {\n      */\n     public JspConfigDescriptor getJspConfigDescriptor();\n \n+    /**\n+     * Add a URL for a JAR that contains static resources in a\n+     * META-INF/resources directory that should be included in the static\n+     * resources for this context.\n+     */\n+    public void addResourceJarUrl(URL url);\n }\n \ndiff --git a/java/org/apache/catalina/core/LocalStrings.properties b/java/org/apache/catalina/core/LocalStrings.properties\nindex ddabbdff4f..2a774697b7 100644\n--- a/java/org/apache/catalina/core/LocalStrings.properties\n+++ b/java/org/apache/catalina/core/LocalStrings.properties\n@@ -115,6 +115,7 @@ standardContext.loginConfig.loginPage=Form login page {0} must start with a ''/'\n standardContext.loginConfig.loginWarning=WARNING: Form login page {0} must start with a ''/'' in Servlet 2.4\n standardContext.loginConfig.required=LoginConfig cannot be null\n standardContext.mappingError=MAPPING configuration error for relative URI {0}\n+standardContext.noResourceJar=Resource JARs are not supported. The JAR found at [{0}] will no be used to provide static content for context with path [{1}]\n standardContext.notFound=The requested resource ({0}) is not available.\n standardContext.notReloadable=Reloading is disabled on this Context\n standardContext.notStarted=Context has not yet been started\ndiff --git a/java/org/apache/catalina/core/StandardContext.java b/java/org/apache/catalina/core/StandardContext.java\nindex eedc91c1f9..4c1c58bf42 100644\n--- a/java/org/apache/catalina/core/StandardContext.java\n+++ b/java/org/apache/catalina/core/StandardContext.java\n@@ -961,6 +961,21 @@ public class StandardContext\n     }\n \n \n+    /**\n+     * Add a URL for a JAR that contains static resources in a\n+     * META-INF/resources directory that should be included in the static\n+     * resources for this context.\n+     */\n+    public void addResourceJarUrl(URL url) {\n+        if (webappResources instanceof BaseDirContext) {\n+            ((BaseDirContext) webappResources).addResourcesJar(url);\n+        } else {\n+            log.error(sm.getString(\"standardContext.noResourceJar\", url,\n+                    getPath()));\n+        }\n+    }\n+    \n+    \n     /**\n      * Set the current alias configuration. The list of aliases should be of the\n      * form \"/aliasPath1=docBase1,/aliasPath2=docBase2\" where aliasPathN must\n@@ -2122,11 +2137,13 @@ public class StandardContext\n             return;\n \n         if (resources instanceof BaseDirContext) {\n+            // Caching\n             ((BaseDirContext) resources).setCached(isCachingAllowed());\n             ((BaseDirContext) resources).setCacheTTL(getCacheTTL());\n             ((BaseDirContext) resources).setCacheMaxSize(getCacheMaxSize());\n             ((BaseDirContext) resources).setCacheObjectMaxSize(\n                     getCacheObjectMaxSize());\n+            // Alias support\n             ((BaseDirContext) resources).setAliases(getAliases());\n         }\n         if (resources instanceof FileDirContext) {\ndiff --git a/java/org/apache/catalina/startup/ContextConfig.java b/java/org/apache/catalina/startup/ContextConfig.java\nindex b248c68326..81c95aef71 100644\n--- a/java/org/apache/catalina/startup/ContextConfig.java\n+++ b/java/org/apache/catalina/startup/ContextConfig.java\n@@ -38,6 +38,7 @@ import java.util.Properties;\n import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n \n import javax.servlet.ServletContext;\n \n@@ -1237,6 +1238,8 @@ public class ContextConfig\n             if (context.getLogEffectiveWebXml()) {\n                 log.info(\"web.xml:\\n\" + mergedWebXml);\n             }\n+            \n+            processResourceJARs(orderedFragments);\n         } else {\n             // Apply unmerged web.xml to Context\n             webXml.configureContext(context);\n@@ -1244,6 +1247,40 @@ public class ContextConfig\n     }\n \n     \n+    /**\n+     * Scan JARs that contain web-fragment.xml files that will be used to\n+     * configure this application to see if they also contain static resources.\n+     * If static resources are found, add them to the context. Resources are\n+     * added in web-fragment.xml priority order.\n+     */\n+    protected void processResourceJARs(Set<WebXml> fragments) {\n+        for (WebXml fragment : fragments) {\n+            URL jarUrl = fragment.getURL();\n+            JarFile jarFile = null;\n+            try {\n+                JarURLConnection conn =\n+                    (JarURLConnection) jarUrl.openConnection();\n+                jarFile = conn.getJarFile();   \n+                ZipEntry entry = jarFile.getEntry(\"META-INF/resources/\");\n+                if (entry != null) {\n+                    context.addResourceJarUrl(jarUrl);\n+                }\n+            } catch (IOException ioe) {\n+                log.error(sm.getString(\"contextConfig.resourceJarFail\", jarUrl,\n+                        context.getPath()));\n+            } finally {\n+                if (jarFile != null) {\n+                    try {\n+                        jarFile.close();\n+                    } catch (IOException e) {\n+                        // Ignore\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    \n+    \n     /**\n      * Identify the default web.xml to be used and obtain an input source for\n      * it.\ndiff --git a/java/org/apache/catalina/startup/LocalStrings.properties b/java/org/apache/catalina/startup/LocalStrings.properties\nindex 6f3fe5d478..5644b079f9 100644\n--- a/java/org/apache/catalina/startup/LocalStrings.properties\n+++ b/java/org/apache/catalina/startup/LocalStrings.properties\n@@ -46,6 +46,7 @@ contextConfig.jar=Unable to process resource [{0}] for annotations\n contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations\n contextConfig.jndiUrlNotDirContextConn=The connection created for URL [{0}] was not a DirContextURLConnection\n contextConfig.missingRealm=No Realm has been configured to authenticate against\n+contextConfig.resourceJarFail=Failed to processes JAR found at URL [{0}] for static resources to be included in context with path [{0}]\n contextConfig.role.auth=WARNING: Security role name {0} used in an <auth-constraint> without being defined in a <security-role>\n contextConfig.role.link=WARNING: Security role name {0} used in a <role-link> without being defined in a <security-role>\n contextConfig.role.runas=WARNING: Security role name {0} used in a <run-as> without being defined in a <security-role>\ndiff --git a/java/org/apache/naming/resources/BaseDirContext.java b/java/org/apache/naming/resources/BaseDirContext.java\nindex f8b34e5ad0..89e50b3c5d 100644\n--- a/java/org/apache/naming/resources/BaseDirContext.java\n+++ b/java/org/apache/naming/resources/BaseDirContext.java\n@@ -19,11 +19,18 @@\n package org.apache.naming.resources;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.net.JarURLConnection;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Hashtable;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n \n import javax.naming.Binding;\n import javax.naming.Context;\n@@ -131,9 +138,38 @@ public abstract class BaseDirContext implements DirContext {\n         new HashMap<String,BaseDirContext>();\n \n \n+    /**\n+     * Alternate / backup DirContexts for static resources. These will be\n+     * searched in the order they are added if the requested resource cannot be\n+     * found in the primary DirContext. \n+     */\n+    protected List<DirContext> altDirContexts = new ArrayList<DirContext>();\n+    \n+    \n     // ------------------------------------------------------------- Properties\n \n \n+    /**\n+     * Add a resources JAR. The contents of /META-INF/resources/ will be used if\n+     * a requested resource can not be found in the main context.\n+     */\n+    public void addResourcesJar(URL url) {\n+        try {\n+            JarURLConnection conn = (JarURLConnection) url.openConnection();\n+            JarFile jarFile = conn.getJarFile();   \n+            ZipEntry entry = jarFile.getEntry(\"/\");\n+            WARDirContext warDirContext = new WARDirContext(jarFile,\n+                    new WARDirContext.Entry(\"/\", entry));\n+            warDirContext.loadEntries();\n+            altDirContexts.add(warDirContext);\n+        } catch (IOException ioe) {\n+            // TODO: Log failure\n+        } finally {\n+            // TODO: Clean up\n+        }\n+    }\n+    \n+    \n     /**\n      * Add an alias.\n      */\n@@ -350,7 +386,25 @@ public abstract class BaseDirContext implements DirContext {\n                 return result.dirContext.doGetRealPath(result.aliasName);\n             }\n         }\n-        return doGetRealPath(name);\n+        \n+        // Next do a standard getRealPath()\n+        String path = doGetRealPath(name);\n+\n+        if (path != null)\n+            return path;\n+        \n+        // Check the alternate locations\n+        for (DirContext altDirContext : altDirContexts) {\n+            if (altDirContext instanceof BaseDirContext){\n+                path = ((BaseDirContext) altDirContext).getRealPath(\n+                        \"META-INF/resources/\" + name);\n+                if (path != null)\n+                    return path;\n+            }\n+        }\n+        \n+        // Really not found\n+        return null; \n     }\n \n     // -------------------------------------------------------- Context Methods\n@@ -380,13 +434,29 @@ public abstract class BaseDirContext implements DirContext {\n      * @exception NamingException if a naming exception is encountered\n      */\n     public final Object lookup(String name) throws NamingException {\n+        // First check for aliases\n         if (!aliases.isEmpty()) {\n             AliasResult result = findAlias(name);\n             if (result.dirContext != null) {\n                 return result.dirContext.lookup(result.aliasName);\n             }\n         }\n-        return doLookup(name);\n+        \n+        // Next do a standard lookup\n+        Object obj = doLookup(name);\n+\n+        if (obj != null)\n+            return obj;\n+        \n+        // Check the alternate locations\n+        for (DirContext altDirContext : altDirContexts) {\n+            obj = altDirContext.lookup(\"META-INF/resources/\" + name);\n+            if (obj != null)\n+                return obj;\n+        }\n+        \n+        // Really not found\n+        throw new NamingException(sm.getString(\"resources.notFound\", name));\n     }\n \n     /**\n@@ -589,7 +659,31 @@ public abstract class BaseDirContext implements DirContext {\n                 return result.dirContext.listBindings(result.aliasName);\n             }\n         }\n-        return doListBindings(name);\n+        \n+        // Next do a standard lookup\n+        NamingEnumeration<Binding> bindings = doListBindings(name);\n+\n+        if (bindings != null)\n+            return bindings;\n+        \n+        // Check the alternate locations\n+        for (DirContext altDirContext : altDirContexts) {\n+            if (altDirContext instanceof BaseDirContext)\n+                bindings = ((BaseDirContext) altDirContext).doListBindings(\n+                        \"META-INF/resources/\" + name);\n+            else {\n+                try {\n+                    bindings = altDirContext.listBindings(name);\n+                } catch (NamingException ne) {\n+                    // Ignore\n+                }\n+            }\n+            if (bindings != null)\n+                return bindings;\n+        }\n+\n+        // Really not found\n+        throw new NamingException(sm.getString(\"resources.notFound\", name));\n     }\n \n \n@@ -912,6 +1006,8 @@ public abstract class BaseDirContext implements DirContext {\n      */\n     public final Attributes getAttributes(String name, String[] attrIds)\n         throws NamingException {\n+        \n+        // First check for aliases\n         if (!aliases.isEmpty()) {\n             AliasResult result = findAlias(name);\n             if (result.dirContext != null) {\n@@ -919,7 +1015,31 @@ public abstract class BaseDirContext implements DirContext {\n                         result.aliasName, attrIds);\n             }\n         }\n-        return doGetAttributes(name, attrIds);\n+        \n+        // Next do a standard lookup\n+        Attributes attrs = doGetAttributes(name, attrIds);\n+\n+        if (attrs != null)\n+            return attrs;\n+        \n+        // Check the alternate locations\n+        for (DirContext altDirContext : altDirContexts) {\n+            if (altDirContext instanceof BaseDirContext)\n+                attrs = ((BaseDirContext) altDirContext).doGetAttributes(\n+                        \"META-INF/resources/\" + name, attrIds);\n+            else {\n+                try {\n+                    attrs = altDirContext.getAttributes(name, attrIds);\n+                } catch (NamingException ne) {\n+                    // Ignore\n+                }\n+            }\n+            if (attrs != null)\n+                return attrs;\n+        }\n+        \n+        // Really not found\n+        throw new NamingException(sm.getString(\"resources.notFound\", name));\n     }\n \n     /**\ndiff --git a/java/org/apache/naming/resources/FileDirContext.java b/java/org/apache/naming/resources/FileDirContext.java\nindex 1f2c872da0..ba02c11603 100644\n--- a/java/org/apache/naming/resources/FileDirContext.java\n+++ b/java/org/apache/naming/resources/FileDirContext.java\n@@ -202,8 +202,7 @@ public class FileDirContext extends BaseDirContext {\n         File file = file(name);\n \n         if (file == null)\n-            throw new NamingException\n-                (sm.getString(\"resources.notFound\", name));\n+            return null;\n \n         if (file.isDirectory()) {\n             FileDirContext tempContext = new FileDirContext(env);\n@@ -326,9 +325,8 @@ public class FileDirContext extends BaseDirContext {\n         File file = file(name);\n \n         if (file == null)\n-    ",
    "Avoid defensive checks against java . time API .": "diff --git a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\nindex cad28903a6..c28a2cf269 100644\n--- a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\n+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java\n@@ -26,6 +26,7 @@ import java.net.URI;\n import java.net.URL;\n import java.nio.charset.Charset;\n import java.nio.file.Path;\n+import java.time.ZoneId;\n import java.util.Collection;\n import java.util.Currency;\n import java.util.HashMap;\n@@ -89,19 +90,6 @@ import org.springframework.util.ClassUtils;\n  */\n public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {\n \n-\tprivate static Class<?> zoneIdClass;\n-\n-\tstatic {\n-\t\ttry {\n-\t\t\tzoneIdClass = ClassUtils.forName(\"java.time.ZoneId\", PropertyEditorRegistrySupport.class.getClassLoader());\n-\t\t}\n-\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t// Java 8 ZoneId class not available\n-\t\t\tzoneIdClass = null;\n-\t\t}\n-\t}\n-\n-\n \tprivate ConversionService conversionService;\n \n \tprivate boolean defaultEditorsActive = false;\n@@ -222,9 +210,7 @@ public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {\n \t\tthis.defaultEditors.put(URI.class, new URIEditor());\n \t\tthis.defaultEditors.put(URL.class, new URLEditor());\n \t\tthis.defaultEditors.put(UUID.class, new UUIDEditor());\n-\t\tif (zoneIdClass != null) {\n-\t\t\tthis.defaultEditors.put(zoneIdClass, new ZoneIdEditor());\n-\t\t}\n+\t\tthis.defaultEditors.put(ZoneId.class, new ZoneIdEditor());\n \n \t\t// Default instances of collection editors.\n \t\t// Can be overridden by registering custom instances of those as custom editors.\ndiff --git a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java\nindex 2c7c60a041..ed7194c7cb 100644\n--- a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java\n+++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2015 the original author or authors.\n+ * Copyright 2002-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -21,10 +21,10 @@ import org.springframework.format.FormatterRegistry;\n import org.springframework.format.datetime.DateFormatterRegistrar;\n import org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar;\n import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar;\n+import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;\n import org.springframework.format.number.money.CurrencyUnitFormatter;\n import org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory;\n import org.springframework.format.number.money.MonetaryAmountFormatter;\n-import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.StringValueResolver;\n \n@@ -49,9 +49,6 @@ public class DefaultFormattingConversionService extends FormattingConversionServ\n \tprivate static final boolean jsr354Present = ClassUtils.isPresent(\n \t\t\t\"javax.money.MonetaryAmount\", DefaultFormattingConversionService.class.getClassLoader());\n \n-\tprivate static final boolean jsr310Present = ClassUtils.isPresent(\n-\t\t\t\"java.time.LocalDate\", DefaultFormattingConversionService.class.getClassLoader());\n-\n \tprivate static final boolean jodaTimePresent = ClassUtils.isPresent(\n \t\t\t\"org.joda.time.LocalDate\", DefaultFormattingConversionService.class.getClassLoader());\n \n@@ -112,10 +109,10 @@ public class DefaultFormattingConversionService extends FormattingConversionServ\n \t\t}\n \n \t\t// Default handling of date-time values\n-\t\tif (jsr310Present) {\n-\t\t\t// just handling JSR-310 specific date and time types\n-\t\t\tnew DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);\n-\t\t}\n+\n+\t\t// just handling JSR-310 specific date and time types\n+\t\tnew DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);\n+\n \t\tif (jodaTimePresent) {\n \t\t\t// handles Joda-specific types as well as Date, Calendar, Long\n \t\t\tnew JodaTimeFormatterRegistrar().registerFormatters(formatterRegistry);\ndiff --git a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java\nindex 2cc1c5b3fa..1530b8daad 100644\n--- a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java\n+++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java\n@@ -23,7 +23,6 @@ import java.util.UUID;\n \n import org.springframework.core.convert.ConversionService;\n import org.springframework.core.convert.converter.ConverterRegistry;\n-import org.springframework.util.ClassUtils;\n \n /**\n  * A specialization of {@link GenericConversionService} configured by default with\n@@ -40,11 +39,6 @@ import org.springframework.util.ClassUtils;\n  */\n public class DefaultConversionService extends GenericConversionService {\n \n-\t/** Java 8's java.time package available? */\n-\tprivate static final boolean jsr310Available =\n-\t\t\tClassUtils.isPresent(\"java.time.ZoneId\", DefaultConversionService.class.getClassLoader());\n-\n-\n \t/**\n \t * Create a new {@code DefaultConversionService} with the set of\n \t * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}.\n@@ -67,9 +61,9 @@ public class DefaultConversionService extends GenericConversionService {\n \t\taddCollectionConverters(converterRegistry);\n \n \t\tconverterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));\n-\t\tif (jsr310Available) {\n-\t\t\tJsr310ConverterRegistrar.registerJsr310Converters(converterRegistry);\n-\t\t}\n+\t\tconverterRegistry.addConverter(new StringToTimeZoneConverter());\n+\t\tconverterRegistry.addConverter(new ZoneIdToTimeZoneConverter());\n+\t\tconverterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());\n \n \t\tconverterRegistry.addConverter(new ObjectToObjectConverter());\n \t\tconverterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));\n@@ -149,17 +143,4 @@ public class DefaultConversionService extends GenericConversionService {\n \t\tconverterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());\n \t}\n \n-\n-\t/**\n-\t * Inner class to avoid a hard-coded dependency on Java 8's {@code java.time} package.\n-\t */\n-\tprivate static final class Jsr310ConverterRegistrar {\n-\n-\t\tpublic static void registerJsr310Converters(ConverterRegistry converterRegistry) {\n-\t\t\tconverterRegistry.addConverter(new StringToTimeZoneConverter());\n-\t\t\tconverterRegistry.addConverter(new ZoneIdToTimeZoneConverter());\n-\t\t\tconverterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());\n-\t\t}\n-\t}\n-\n }\ndiff --git a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\nindex e840fa2ff6..b115d854d7 100644\n--- a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java\n@@ -753,16 +753,13 @@ public class Jackson2ObjectMapperBuilder {\n \t\t\t// jackson-datatype-jdk8 not available\n \t\t}\n \n-\t\t// Java 8 java.time package present?\n-\t\tif (ClassUtils.isPresent(\"java.time.LocalDate\", this.moduleClassLoader)) {\n-\t\t\ttry {\n-\t\t\t\tClass<? extends Module> javaTimeModule = (Class<? extends Module>)\n-\t\t\t\t\t\tClassUtils.forName(\"com.fasterxml.jackson.datatype.jsr310.JavaTimeModule\", this.moduleClassLoader);\n-\t\t\t\tobjectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));\n-\t\t\t}\n-\t\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t\t// jackson-datatype-jsr310 not available\n-\t\t\t}\n+\t\ttry {\n+\t\t\tClass<? extends Module> javaTimeModule = (Class<? extends Module>)\n+\t\t\t\t\tClassUtils.forName(\"com.fasterxml.jackson.datatype.jsr310.JavaTimeModule\", this.moduleClassLoader);\n+\t\t\tobjectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));\n+\t\t}\n+\t\tcatch (ClassNotFoundException ex) {\n+\t\t\t// jackson-datatype-jsr310 not available\n \t\t}\n \n \t\t// Joda-Time present?\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java\nindex a87660869b..b2c561a272 100644\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java\n@@ -70,7 +70,7 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume\n \t\t\t\tPrincipal.class.isAssignableFrom(paramType) ||\n \t\t\t\tLocale.class == paramType ||\n \t\t\t\tTimeZone.class == paramType ||\n-\t\t\t\t\"java.time.ZoneId\".equals(paramType.getName()) ||\n+\t\t\t\tZoneId.class == paramType ||\n \t\t\t\tInputStream.class.isAssignableFrom(paramType) ||\n \t\t\t\tReader.class.isAssignableFrom(paramType) ||\n \t\t\t\tHttpMethod.class == paramType);\n@@ -110,8 +110,9 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume\n \t\t\tTimeZone timeZone = RequestContextUtils.getTimeZone(request);\n \t\t\treturn (timeZone != null ? timeZone : TimeZone.getDefault());\n \t\t}\n-\t\telse if (\"java.time.ZoneId\".equals(paramType.getName())) {\n-\t\t\treturn ZoneIdResolver.resolveZoneId(request);\n+\t\telse if (ZoneId.class == paramType) {\n+\t\t\tTimeZone timeZone = RequestContextUtils.getTimeZone(request);\n+\t\t\treturn (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());\n \t\t}\n \t\telse if (InputStream.class.isAssignableFrom(paramType)) {\n \t\t\treturn request.getInputStream();\n@@ -126,16 +127,4 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume\n \t\t}\n \t}\n \n-\n-\t/**\n-\t * Inner class to avoid a hard-coded dependency on Java 8's {@link java.time.ZoneId}.\n-\t */\n-\tprivate static class ZoneIdResolver {\n-\n-\t\tpublic static Object resolveZoneId(HttpServletRequest request) {\n-\t\t\tTimeZone timeZone = RequestContextUtils.getTimeZone(request);\n-\t\t\treturn (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());\n-\t\t}\n-\t}\n-\n }",
    "update favorites right drawer layout": "diff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java\nindex dd20f009..9e9f4d8d 100644\n--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java\n+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java\n@@ -29,6 +29,7 @@ import android.support.annotation.Nullable;\n import android.support.design.widget.FloatingActionButton;\n import android.support.v4.widget.DrawerLayout;\n import android.support.v7.app.AlertDialog;\n+import android.support.v7.widget.DividerItemDecoration;\n import android.support.v7.widget.LinearLayoutManager;\n import android.support.v7.widget.RecyclerView;\n import android.support.v7.widget.Toolbar;\n@@ -43,9 +44,6 @@ import android.view.LayoutInflater;\n import android.view.MenuItem;\n import android.view.View;\n import android.view.ViewGroup;\n-import android.widget.AdapterView;\n-import android.widget.ArrayAdapter;\n-import android.widget.ListView;\n import android.widget.TextView;\n \n import com.github.amlcurran.showcaseview.ShowcaseView;\n@@ -55,7 +53,6 @@ import com.hippo.annotation.Implemented;\n import com.hippo.drawable.DrawerArrowDrawable;\n import com.hippo.easyrecyclerview.EasyRecyclerView;\n import com.hippo.easyrecyclerview.FastScroller;\n-import com.hippo.easyrecyclerview.LinearDividerItemDecoration;\n import com.hippo.ehviewer.EhApplication;\n import com.hippo.ehviewer.EhDB;\n import com.hippo.ehviewer.R;\n@@ -70,6 +67,7 @@ import com.hippo.ehviewer.ui.MainActivity;\n import com.hippo.ehviewer.ui.annotation.DrawerLifeCircle;\n import com.hippo.ehviewer.ui.annotation.ViewLifeCircle;\n import com.hippo.ehviewer.ui.annotation.WholeLifeCircle;\n+import com.hippo.ehviewer.widget.EhDrawerLayout;\n import com.hippo.ehviewer.widget.SearchBar;\n import com.hippo.refreshlayout.RefreshLayout;\n import com.hippo.ripple.Ripple;\n@@ -80,9 +78,7 @@ import com.hippo.util.DrawableManager;\n import com.hippo.widget.ContentLayout;\n import com.hippo.widget.FabLayout;\n import com.hippo.widget.SearchBarMover;\n-import com.hippo.yorozuya.LayoutUtils;\n import com.hippo.yorozuya.ObjectUtils;\n-import com.hippo.yorozuya.ResourcesUtils;\n import com.hippo.yorozuya.SimpleHandler;\n import com.hippo.yorozuya.ViewUtils;\n \n@@ -96,7 +92,7 @@ import java.util.List;\n public class FavoritesScene extends BaseScene implements\n         EasyRecyclerView.OnItemClickListener, EasyRecyclerView.OnItemLongClickListener,\n         FastScroller.OnDragHandlerListener, SearchBarMover.Helper, SearchBar.Helper,\n-        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener, AdapterView.OnItemClickListener {\n+        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener {\n \n     private static final long ANIMATE_TIME = 300L;\n \n@@ -129,12 +125,11 @@ public class FavoritesScene extends BaseScene implements\n     private DrawerArrowDrawable mLeftDrawable;\n \n     @Nullable\n-    @DrawerLifeCircle\n-    private ArrayAdapter<String> mDrawerAdapter;\n+    private EhDrawerLayout mDrawerLayout;\n+\n     @Nullable\n     @DrawerLifeCircle\n-    private List<String> mDrawerList;\n-\n+    private FavDrawerAdapter mDrawerAdapter;\n     @Nullable\n     @WholeLifeCircle\n     private EhClient mClient;\n@@ -143,13 +138,16 @@ public class FavoritesScene extends BaseScene implements\n     private String[] mFavCatArray;\n     @Nullable\n     @WholeLifeCircle\n+    private int[] mFavCountArray;\n+    @Nullable\n+    @WholeLifeCircle\n     private FavListUrlBuilder mUrlBuilder;\n \n     public int current; // -1 for error\n     public int limit; // -1 for error\n \n-    @Nullable\n-    private int[] mFavCountArray;\n+    private int mLocalSize = 0;\n+    private int mCloudSize = 0;\n \n     private boolean mHasFirstRefresh;\n     private boolean mSearchMode;\n@@ -206,7 +204,7 @@ public class FavoritesScene extends BaseScene implements\n     }\n \n     @Override\n-    public void onSaveInstanceState(Bundle outState) {\n+    public void onSaveInstanceState(@NonNull Bundle outState) {\n         super.onSaveInstanceState(outState);\n \n         boolean hasFirstRefresh;\n@@ -236,6 +234,7 @@ public class FavoritesScene extends BaseScene implements\n             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.scene_favorites, container, false);\n         ContentLayout contentLayout = (ContentLayout) view.findViewById(R.id.content_layout);\n+        mDrawerLayout = (EhDrawerLayout) ViewUtils.$$(getActivity2(), R.id.draw_view);\n         mRecyclerView = contentLayout.getRecyclerView();\n         FastScroller fastScroller = contentLayout.getFastScroller();\n         RefreshLayout refreshLayout = contentLayout.getRefreshLayout();\n@@ -410,95 +409,73 @@ public class FavoritesScene extends BaseScene implements\n         mOldKeyword = null;\n     }\n \n-    private class InfoHolder extends RecyclerView.ViewHolder {\n+    private class FavDrawerHolder extends RecyclerView.ViewHolder {\n \n         private final TextView key;\n         private final TextView value;\n \n-        public InfoHolder(View itemView) {\n+        private FavDrawerHolder(View itemView) {\n             super(itemView);\n             key = (TextView) ViewUtils.$$(itemView, R.id.key);\n             value = (TextView) ViewUtils.$$(itemView, R.id.value);\n         }\n     }\n \n-    private class InfoAdapter extends RecyclerView.Adapter<InfoHolder> {\n-\n-        private static final int TYPE_HEADER = 0;\n-        private static final int TYPE_DATA = 1;\n+    private class FavDrawerAdapter extends RecyclerView.Adapter<FavDrawerHolder> {\n \n         private final LayoutInflater mInflater;\n \n-        public InfoAdapter(LayoutInflater inflater) {\n+        private FavDrawerAdapter(LayoutInflater inflater) {\n             mInflater = inflater;\n         }\n \n         @Override\n         public int getItemViewType(int position) {\n-            return 0 == position ? TYPE_HEADER : TYPE_DATA;\n+            return position;\n         }\n \n+        @NonNull\n         @Override\n-        public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-            return new InfoHolder(mInflater.inflate(TYPE_HEADER == viewType ?\n-                    R.layout.item_favorite_info_header : R.layout.item_favorite_info_data, parent, false));\n+        public FavDrawerHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+            return new FavDrawerHolder(mInflater.inflate(R.layout.item_favorite_list, parent, false));\n         }\n \n         @Override\n         @SuppressLint(\"SetTextI18n\")\n-        public void onBindViewHolder(InfoHolder holder, int position) {\n+        public void onBindViewHolder(@NonNull FavDrawerHolder holder, int position) {\n             if (0 == position) {\n-                holder.key.setText(R.string.collections);\n-                holder.value.setText(R.string.count);\n-                holder.itemView.setEnabled(false);\n+                holder.key.setText(R.string.local_favorites);\n+                holder.value.setText(Integer.toString(mLocalSize));\n+                holder.itemView.setEnabled(true);\n+            } else if (1 == position){\n+                holder.key.setText(R.string.cloud_favorites);\n+                holder.value.setText(Integer.toString(mCloudSize));\n+                holder.itemView.setEnabled(true);\n             } else {\n                 if (null == mFavCatArray || null == mFavCountArray ||\n-                        mFavCatArray.length < position || mFavCountArray.length < position) {\n+                        mFavCatArray.length < (position - 1) ||\n+                        mFavCountArray.length < (position - 1)) {\n                     return;\n                 }\n-                holder.key.setText(mFavCatArray[position - 1]);\n-                holder.value.setText(Integer.toString(mFavCountArray[position - 1]));\n+                holder.key.setText(mFavCatArray[position - 2]);\n+                holder.value.setText(Integer.toString(mFavCountArray[position - 2]));\n                 holder.itemView.setEnabled(true);\n             }\n         }\n \n         @Override\n         public int getItemCount() {\n-            return 11;\n+            return 12;\n         }\n     }\n \n-    @SuppressLint(\"InflateParams\")\n-    private void showFavoritesInfoDialog() {\n-        Context context = getContext2();\n-        if (null == context || null == mFavCatArray || null == mFavCountArray) {\n-            return;\n-        }\n-\n-        AlertDialog.Builder builder = new AlertDialog.Builder(context);\n-        context = builder.getContext();\n-        final LayoutInflater inflater = LayoutInflater.from(context);\n-        EasyRecyclerView rv = (EasyRecyclerView) inflater.inflate(R.layout.dialog_recycler_view, null);\n-        rv.setAdapter(new InfoAdapter(inflater));\n-        rv.setLayoutManager(new LinearLayoutManager(context));\n-        LinearDividerItemDecoration decoration = new LinearDividerItemDecoration(\n-                LinearDividerItemDecoration.VERTICAL, context.getResources().getColor(R.color.divider),\n-                LayoutUtils.dp2pix(context, 1));\n-        decoration.setPadding(ResourcesUtils.getAttrDimensionPixelOffset(context, R.attr.dialogPreferredPadding));\n-        rv.addItemDecoration(decoration);\n-        rv.setSelector(Ripple.generateRippleDrawable(context, false));\n-        rv.setClipToPadding(false);\n-        builder.setView(rv).show();\n-    }\n-\n     @Override\n     public View onCreateDrawerView(LayoutInflater inflater,\n             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n-        View view = inflater.inflate(R.layout.drawer_list, container, false);\n+        View view = inflater.inflate(R.layout.drawer_list_fav, container, false);\n+        final Context context = getContext2();\n         Toolbar toolbar = (Toolbar) ViewUtils.$$(view, R.id.toolbar);\n-        ListView listView = (ListView) view.findViewById(R.id.list_view);\n \n-        final Context context = getContext2();\n         Assert.assertNotNull(context);\n \n         toolbar.setTitle(R.string.collections);\n@@ -508,9 +485,6 @@ public class FavoritesScene extends BaseScene implements\n             public boolean onMenuItemClick(MenuItem item) {\n                 int id = item.getItemId();\n                 switch (id) {\n-                    case R.id.action_info:\n-                        showFavoritesInfoDialog();\n-                        return true;\n                     case R.id.action_default_favorites_slot:\n                         String[] items = new String[12];\n                         items[0] = getString(R.string.let_me_select);\n@@ -531,15 +505,13 @@ public class FavoritesScene extends BaseScene implements\n             }\n         });\n \n-        mDrawerList = new ArrayList<>(12);\n-        mDrawerList.add(getString(R.string.local_favorites));\n-        mDrawerList.add(getString(R.string.cloud_favorites));\n-        if (mFavCatArray != null) {\n-            Collections.addAll(mDrawerList, mFavCatArray);\n-        }\n-        mDrawerAdapter = new ArrayAdapter<>(context, R.layout.item_simple_list, mDrawerList);\n-        listView.setAdapter(mDrawerAdapter);\n-        listView.setOnItemClickListener(this);\n+        EasyRecyclerView recyclerView = (EasyRecyclerView) view.findViewById(R.id.recycler_view_drawer);\n+        recyclerView.setLayoutManager(new LinearLayoutManager(context));\n+        recyclerView.addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.VERTICAL));\n+\n+        mDrawerAdapter = new FavDrawerAdapter(inflater);\n+        recyclerView.setAdapter(mDrawerAdapter);\n+        recyclerView.setOnItemClickListener(this);\n \n         return view;\n     }\n@@ -549,7 +521,6 @@ public class FavoritesScene extends BaseScene implements\n         super.onDestroyDrawerView();\n \n         mDrawerAdapter = null;\n-        mDrawerList = null;\n     }\n \n     @Override\n@@ -590,19 +561,53 @@ public class FavoritesScene extends BaseScene implements\n     @Override\n     @Implemented(EasyRecyclerView.OnItemClickListener.class)\n     public boolean onItemClick(EasyRecyclerView parent, View view, int position, long id) {\n-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {\n-            mRecyclerView.toggleItemChecked(position);\n-        } else if (mHelper != null) {\n-            GalleryInfo gi = mHelper.getDataAt(position);\n-            Bundle args = new Bundle();\n-            args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);\n-            args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);\n-            Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);\n-            View thumb;\n-            if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {\n-                announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));\n+        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)){\n+            // Skip if in search mode\n+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {\n+                return true;\n+            }\n+\n+            if (mUrlBuilder == null || mHelper == null) {\n+                return true;\n+            }\n+\n+            // Local favorite position is 0, All favorite position is 1, so position - 2 is OK\n+            int newFavCat = position - 2;\n+\n+            // Check is the same\n+            if (mUrlBuilder.getFavCat() == newFavCat) {\n+                return true;\n+            }\n+\n+            // Ensure outOfCustomChoiceMode to avoid error\n+            if (mRecyclerView != null) {\n+                mRecyclerView.isInCustomChoice();\n+            }\n+\n+            exitSearchMode(true);\n+\n+            mUrlBuilder.setKeyword(null);\n+            mUrlBuilder.setFavCat(newFavCat);\n+            updateSearchBar();\n+            mHelper.refresh();\n+\n+            closeDrawer(Gravity.RIGHT);\n+\n+        } else {\n+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {\n+                mRecyclerView.toggleItemChecked(position);\n+            } else if (mHelper != null) {\n+                GalleryInfo gi = mHelper.getDataAt(position);\n+                Bundle args = new Bundle();\n+                args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);\n+                args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);\n+                Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);\n+                View thumb;\n+                if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {\n+                    announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));\n+                }\n+                startScene(announcer);\n             }\n-            startScene(announcer);\n         }\n         return true;\n     }\n@@ -805,41 +810,6 @@ public class FavoritesScene extends BaseScene implements\n         }\n     }\n \n-    @Override\n-    @Implemented(AdapterView.OnItemClickListener.class)\n-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n-        // Skip if in search mode\n-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {\n-            return;\n-        }\n-\n-        if (mUrlBuilder == null || mHelper == null) {\n-            return;\n-        }\n-\n-        // Local favorite position is 0, All favorite position is 1, so position - 2 is OK\n-        int newFavCat = position - 2;\n-\n-        // Check is the same\n-        if (mUrlBuilder.getFavCat() == newFavCat) {\n-            return;\n-        }\n-\n-        // Ensure outOfCustomChoiceMode to avoid error\n-        if (mRecyclerView != null) {\n-            mRecyclerView.isInCustomChoice();\n-        }\n-\n-        exitSearchMode(true);\n-\n-        mUrlBuilder.setKeyword(null);\n-        mUrlBuilder.setFavCat(newFavCat);\n-        updateSearchBar();\n-        mHelper.refresh();\n-\n-        closeDrawer(Gravity.RIGHT);\n-    }\n-\n     private void enterSearchMode(boolean animation) {\n         if (mSearchMode ||mSearchBar == null || mSearchBarMover == null || mLeftDrawable == null) {\n             return;\n@@ -864,11 +834,9 @@ public class FavoritesScene extends BaseScene implements\n         if (mHelper != null && mSearchBarMover != null &&\n                 mHelper.isCurrentTask(taskId)) {\n \n-            if (mFavCatArray != null && mDrawerList != null) {\n-                for (int i = 0; i < 10; i++) {\n-                    mFavCatArray[i] = result.catArray[i];\n-                    mDrawerList.set(i + 2, result.catArray[i]);\n-                }\n+            if (mFavCatArray != null) {\n+\n+                System.arraycopy(result.catArray, 0, mFavCatArray, 0,10);\n \n                 if (mDrawerAdapter != null) {\n                     mDrawerAdapter.notifyDataSetChanged();\n@@ -876,6 +844,12 @@ public class FavoritesScene extends BaseScene implements\n             }\n \n             mFavCountArray = result.countArray;\n+            if (mFavCountArray != null){\n+                mCloudSize = 0;\n+                for (int i = 0; i < 10; i++ ){\n+                    mCloudSize = mCloudSize + mFavCountArray[i];\n+                }\n+            }\n \n             updateSearchBar();\n             mHelper.setPages(taskId, result.pages);\n@@ -903,6 +877,7 @@ public class FavoritesScene extends BaseScene implements\n                 mHelper.setPages(taskId, 0);\n                 mHelper.onGetPageData(taskId, Collections.EMPTY_LIST);\n             } else {\n+                mLocalSize = list.size();\n                 mHelper.setPages(taskId, 1);\n                 mHelper.onGetPageData(taskId, list);\n             }\ndiff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java\nindex cea1072b..a784a2ae 100644\n--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java\n+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java\n@@ -322,7 +322,7 @@ public final class GalleryCommentsScene extends ToolbarScene\n         rv.setAdapter(new RecyclerView.Adapter<InfoHolder>() {\n             @Override\n             public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n-                return new InfoHolder(inflater.inflate(R.layout.item_favorite_info_data, parent, false));\n+                return new InfoHolder(inflater.inflate(R.layout.item_favorite_list, parent, false));\n             }\n \n             @Override\ndiff --git a/app/src/main/res/layout-v21/drawer_list_fav.xml b/app/src/main/res/layout-v21/drawer_list_fav.xml\nnew file mode 100644\nindex 00000000..7e01e8b4\n--- /dev/null\n+++ b/app/src/main/res/layout-v21/drawer_list_fav.xml\n@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  ~ Copyright 2016 Hippo Seven\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<LinearLayout\n+    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    android:orientation=\"vertical\">\n+\n+    <android.support.v7.widget.Toolbar\n+        android:id=\"@+id/toolbar\"\n+        android:layout_height=\"?attr/actionBarSize\"\n+        android:layout_width=\"match_parent\"\n+        android:background=\"?attr/colorPrimary\"\n+        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n+        android:elevation=\"8dp\"\n+        android:saveEnabled=\"false\"/>\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"0dp\"\n+        android:layout_weight=\"1\">\n+\n+        <TextView\n+            android:id=\"@+id/tip\"\n+            android:layout_width=\"wrap_content\"\n+            android:layout_height=\"wrap_content\"\n+            android:layout_gravity=\"center\"\n+            android:visibility=\"gone\"/>\n+\n+      ",
    "delete useless fescar - common in fescar - core because fescar - config had imported it ( <issue_id> ) .": "diff --git a/core/pom.xml b/core/pom.xml\nindex 2d80f0b9..cbb93e63 100644\n--- a/core/pom.xml\n+++ b/core/pom.xml\n@@ -45,10 +45,6 @@\n             <groupId>${project.groupId}</groupId>\n             <artifactId>fescar-config</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>${project.groupId}</groupId>\n-            <artifactId>fescar-common</artifactId>\n-        </dependency>\n         <dependency>\n             <groupId>org.apache.commons</groupId>\n      ",
    "added support for auto config reloadig of native profiles": "diff --git a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java\nindex 7a919fdaf8..939660a257 100644\n--- a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java\n+++ b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java\n@@ -1,5 +1,6 @@\n package org.apereo.cas.support.events;\n \n+import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apereo.cas.authentication.Authentication;\n import org.springframework.context.ApplicationEvent;\n \n@@ -22,10 +23,14 @@ public abstract class AbstractCasEvent extends ApplicationEvent implements Seria\n     /**\n      * Instantiates a new Abstract cas sso event.\n      *\n-     * @param source                 the source\n+     * @param source the source\n      */\n     public AbstractCasEvent(final Object source) {\n         super(source);\n     }\n \n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).toString();\n+    }\n }\ndiff --git a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java\nindex 23c7cda0ae..d395da1c8a 100644\n--- a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java\n+++ b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java\n@@ -2,6 +2,7 @@ package org.apereo.cas.support.events.listener;\n \n import org.apereo.cas.authentication.adaptive.geo.GeoLocationRequest;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.events.CasConfigurationModifiedEvent;\n import org.apereo.cas.support.events.CasRiskyAuthenticationDetectedEvent;\n import org.apereo.cas.support.events.CasTicketGrantingTicketCreatedEvent;\n import org.apereo.cas.support.events.dao.CasEvent;\n@@ -18,9 +19,11 @@ import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor;\n import org.springframework.cloud.bus.event.RefreshRemoteApplicationEvent;\n import org.springframework.cloud.context.environment.EnvironmentChangeEvent;\n+import org.springframework.cloud.endpoint.RefreshEndpoint;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.event.EventListener;\n \n+import java.util.Collection;\n import java.util.Map;\n \n /**\n@@ -37,6 +40,9 @@ public class DefaultCasEventListener {\n     @Autowired\n     private ConfigurationPropertiesBindingPostProcessor binder;\n \n+    @Autowired\n+    private RefreshEndpoint refreshEndpoint;\n+\n     @Autowired\n     private ApplicationContext applicationContext;\n \n@@ -78,6 +84,19 @@ public class DefaultCasEventListener {\n         rebindCasConfigurationProperties();\n     }\n \n+    /**\n+     * Handle configuration modified event.\n+     *\n+     * @param event the event\n+     */\n+    @EventListener\n+    public void handleConfigurationModifiedEvent(final CasConfigurationModifiedEvent event) {\n+        LOGGER.debug(\"Received event [{}]. Refreshing CAS configuration...\", event);\n+        final Collection<String> keys = this.refreshEndpoint.invoke();\n+        LOGGER.info(\"The following settings were refreshed/updated: [{}]. CAS will attempt to rebind it configuration...\", keys);\n+        rebindCasConfigurationProperties();\n+    }\n+\n     /**\n      * Rebind cas configuration properties.\n      */\ndiff --git a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java\nindex c9b84d0628..a089911507 100644\n--- a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java\n+++ b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java\n@@ -9,13 +9,13 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n+import java.io.File;\n import java.nio.file.FileSystems;\n import java.nio.file.Path;\n import java.nio.file.StandardWatchEventKinds;\n import java.nio.file.WatchEvent;\n import java.nio.file.WatchKey;\n import java.nio.file.WatchService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;\n import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;\n@@ -32,6 +32,7 @@ import static java.nio.file.StandardWatchEventKinds.OVERFLOW;\n  */\n public class ConfigurationDirectoryPathWatchService implements Runnable {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationDirectoryPathWatchService.class);\n+    private static final long MONITOR_INTERVAL = 5_000;\n \n     private final WatchService watcher;\n     private final Path directory;\n@@ -56,10 +57,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {\n      * Watch the directory for changes.\n      */\n     public void watch() {\n-        final AtomicBoolean eventFired = new AtomicBoolean();\n-\n         while (true) {\n-\n             final WatchKey key;\n             try {\n                 key = watcher.take();\n@@ -68,7 +66,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {\n                 return;\n             }\n \n-\n+            long lastModified = 0;\n             for (final WatchEvent<?> event : key.pollEvents()) {\n                 final WatchEvent.Kind<?> kind = event.kind();\n \n@@ -83,24 +81,24 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {\n                 try {\n                     LOGGER.debug(\"Detected configuration change [{}]\", kind.name());\n                     final Path child = this.directory.resolve(filename);\n-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name()) && !eventFired.get()) {\n-                        this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));\n-                        eventFired.set(true);\n-                    }\n-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name()) && !eventFired.get()) {\n-                        this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));\n-                        eventFired.set(true);\n-                    }\n-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name()) && !eventFired.get()) {\n-                        this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));\n-                        eventFired.set(true);\n+                    final File childFile = child.toFile();\n+                    if (childFile.lastModified() - lastModified > MONITOR_INTERVAL) {\n+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name())) {\n+                            this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));\n+                        }\n+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name())) {\n+                            this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));\n+                        }\n+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name())) {\n+                            this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));\n+                        }\n                     }\n+                    lastModified = childFile.lastModified();\n                 } catch (final Exception e) {\n                     LOGGER.warn(e.getMessage(), e);\n                     continue;\n                 }\n             }\n-            eventFired.set(false);\n             final boolean valid = key.reset();\n             if (!valid) {\n                 break;",
    "Decode missing parameters": "diff --git a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java\nindex 1e0a4603c..f66669a98 100644\n--- a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java\n+++ b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java\n@@ -67,9 +67,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {\n             .number(\"(d+),\")                     // satellites\n             .groupBegin()\n             .number(\"(d+.?d*),\")                 // altitude\n-            .number(\"d+.?d*,\")                   // pdop\n-            .number(\"d+.?d*,\")                   // hdop\n-            .expression(\"[^,]*,\")                // operator\n+            .number(\"(d+.?d*),\")                 // pdop\n+            .number(\"(d+.?d*),\")                 // hdop\n+            .expression(\"([^,]+)?,\")             // operator\n             .number(\"([01]),\")                   // ignition\n             .number(\"([01]),\")                   // charging\n             .number(\"(d+.?d*),\")                 // power\n@@ -81,6 +81,15 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {\n             .number(\"([01]{2}),\")                // outputs\n             .groupBegin()\n             .number(\"d+,\")                       // index\n+            .number(\"(d+.?d*),\")                 // odometer\n+            .number(\"(d+.?d*),\")                 // adc1\n+            .number(\"(-?d+.?d*),\")               // acceleration x\n+            .number(\"(-?d+.?d*),\")               // acceleration y\n+            .number(\"(-?d+.?d*),\")               // acceleration z\n+            .number(\"(-?d+),\")                   // tilt y\n+            .number(\"(-?d+),\")                   // tilt x\n+            .or()\n+            .number(\"d+,\")                       // index\n             .number(\"(d+.?d*),\")                 // adc1\n             .number(\"(d+.?d*),\")                 // adc2\n             .groupEnd(\"?\")\n@@ -188,6 +197,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {\n \n         if (parser.hasNext(8)) {\n             position.setAltitude(parser.nextDouble());\n+            position.set(Position.KEY_PDOP, parser.nextDouble());\n+   ",
    "Add onion address for @ robkaandorp \\' s btcnode .": "diff --git a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java\nindex 4f99850054..a14b10e4da 100644\n--- a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java\n+++ b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java\n@@ -77,7 +77,10 @@ public class BtcNodes {\n                         new BtcNode(\"node100.wiz.network\", \"m3yqzythryowgedc.onion\", \"103.99.168.100\", BtcNode.DEFAULT_PORT, \"@wiz\"),\n                         new BtcNode(\"node130.wiz.network\", \"22tg6ufbwz6o3l2u.onion\", \"103.99.168.130\", BtcNode.DEFAULT_PORT, \"@wiz\"),\n                         new BtcNode(\"node140.wiz.network\", \"jiuuuislm7ooesic.onion\", \"103.99.168.140\", BtcNode.DEFAULT_PORT, \"@wiz\"),\n-                        new BtcNode(\"node150.wiz.network\", \"zyhtr2ffbzn5yeg3.onion\", \"103.99.168.150\", BtcNode.DEFAULT_PORT, \"@wiz\")\n+                        new BtcNode(\"node150.wiz.network\", \"zyhtr2ffbzn5yeg3.onion\", \"103.99.168.150\", BtcNode.DEFAULT_PORT, \"@wiz\"),\n+\n+                        // Rob Kaandorp\n+                        new BtcNode(null, \"2pj2o2mrawj7yotg.onion\", null, BtcNode.DEFAULT_PORT, \"@robkaandorp\") // cannot provide IP because no static IP\n                 ) :\n                 new ArrayList<>();\n     }",
    "Integrate LoadPlans into UniqueEntityLoader ( PoC )": "diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java\nindex 47b8eca1a6..4b315785c4 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader.plan.spi;\n+package org.hibernate.test.loadplans.plans;\n \n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java\nindex b54b87899b..7b92fc5d3d 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader.plan.spi;\n+package org.hibernate.test.loadplans.plans;\n \n import org.hibernate.LockMode;\n import org.hibernate.LockOptions;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java\nsimilarity index 95%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java\nindex 94fc7ca20b..cabb5798fb 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java\n@@ -21,20 +21,15 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader.plan.spi;\n+package org.hibernate.test.loadplans.plans;\n \n import org.hibernate.cfg.Configuration;\n import org.hibernate.engine.spi.SessionFactoryImplementor;\n-import org.hibernate.test.loader.EncapsulatedCompositeIdResultSetProcessorTest;\n-import org.hibernate.test.loader.Helper;\n+import org.hibernate.test.loadplans.process.EncapsulatedCompositeIdResultSetProcessorTest;\n \n-import org.hibernate.loader.plan2.build.internal.returns.SimpleEntityIdentifierDescriptionImpl;\n-import org.hibernate.loader.plan2.exec.process.internal.ResultSetProcessorImpl;\n-import org.hibernate.loader.plan2.exec.spi.EntityLoadQueryDetails;\n //import org.hibernate.loader.plan2.spi.BidirectionalEntityFetch;\n import org.hibernate.loader.plan2.build.internal.returns.CollectionFetchableElementEntityGraph;\n import org.hibernate.loader.plan2.spi.CollectionFetch;\n-import org.hibernate.loader.plan2.spi.CompositeFetch;\n import org.hibernate.loader.plan2.spi.EntityFetch;\n import org.hibernate.loader.plan2.spi.EntityReturn;\n import org.hibernate.loader.plan2.spi.FetchSource;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java\nindex 6d28809d84..499ce5d6cf 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java\nindex 979051ae25..81a465fe5b 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.Embeddable;\n import javax.persistence.EmbeddedId;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java\nindex 3c0e673c2a..a89f00f3f4 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java\nindex d1b2a7205d..a8c37c4f33 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java\nindex e78263c1c0..80b877995e 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java\nindex baca9557cf..c757f2642c 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java\nsimilarity index 98%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java\nindex d2ecd1f90f..fb82f15d5f 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import org.hibernate.LockMode;\n import org.hibernate.LockOptions;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java\nindex 1679043cb4..c256a39ddd 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import java.sql.Connection;\n import java.sql.PreparedStatement;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java\nsimilarity index 99%\nrename from hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java\nindex 3cfa050bfb..d945048e66 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.loader;\n+package org.hibernate.test.loadplans.process;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java\nsimilarity index 97%\nrename from hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java\nindex 426b6b2ba2..5316e73de4 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.walking;\n+package org.hibernate.test.loadplans.walking;\n \n import javax.persistence.Entity;\n import javax.persistence.Id;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java\nnew file mode 100644\nindex 0000000000..56cc34100a\n--- /dev/null\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java\n@@ -0,0 +1,52 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * Copyright (c) 2013, Red Hat Inc. or third-party contributors as\n+ * indicated by the @author tags or express copyright attribution\n+ * statements applied by the authors.  All third-party contributions are\n+ * distributed under license by Red Hat Inc.\n+ *\n+ * This copyrighted material is made available to anyone wishing to use, modify,\n+ * copy, or redistribute it subject to the terms and conditions of the GNU\n+ * Lesser General Public License, as published by the Free Software Foundation.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n+ * for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this distribution; if not, write to:\n+ * Free Software Foundation, Inc.\n+ * 51 Franklin Street, Fifth Floor\n+ * Boston, MA  02110-1301  USA\n+ */\n+package org.hibernate.test.loadplans.walking;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.cfg.Configuration;\n+import org.hibernate.persister.entity.EntityPersister;\n+import org.hibernate.persister.walking.spi.MetamodelGraphWalker;\n+\n+import org.junit.Test;\n+\n+import org.hibernate.testing.junit4.BaseUnitTestCase;\n+import org.hibernate.test.annotations.collectionelement.TestCourse;\n+\n+/**\n+ * @author Steve Ebersole\n+ */\n+public class CompositesWalkingTest extends BaseUnitTestCase {\n+\t/**\n+\t * Test one-level composites defined as part of an entity.\n+\t */\n+\t@Test\n+\tpublic void testEntityComposite() {\n+\t\tfinal SessionFactory sf = new Configuration()\n+\t\t\t\t.addAnnotatedClass( TestCourse.class )\n+\t\t\t\t.buildSessionFactory();\n+\t\tfinal EntityPersister ep = (EntityPersister) sf.getClassMetadata( TestCourse.class );\n+\n+\t\tMetamodelGraphWalker.visitEntity( new LoggingAssociationVisitationStrategy(), ep );\n+\t}\n+}\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java\nsimilarity index 97%\nrename from hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java\nindex 3ace4cc72c..d47e424c45 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.walking;\n+package org.hibernate.test.loadplans.walking;\n \n import org.hibernate.persister.entity.EntityPersister;\n import org.hibernate.persister.walking.spi.MetamodelGraphWalker;\ndiff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java\nsimilarity index 97%\nrename from hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java\nrename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java\nindex cdbfa7a203..fd4991e196 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java\n@@ -21,7 +21,7 @@\n  * 51 Franklin Street, Fifth Floor\n  * Boston, MA  02110-1301  USA\n  */\n-package org.hibernate.test.walking;\n+package org.hibernate.test.loadplans.walking;\n \n import org.hibernate.annotations.common.util.StringHelper;\n import org.hibernate.persister.walking.spi.AnyMappingDefinition;\n@@ -41,7 +41,7 @@ import org.hibernate.persister.walking.spi.EntityIdentifierDefinition;\n  * @author Steve Ebersole\n  */\n public class LoggingAssociationVisitationStrategy implements AssociationVisitationStrategy {\n-\tprivate int depth = 0;\n+\tprivate int depth = 1;\n \n \t@Override\n \tpublic void start() {\n@@ -176,7 +176,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati\n \t\tSystem.out.println(\n \t\t\t\tString.format(\n \t\t\t\t\t\t\"%s Finishing collection index (%s)\",\n-\t\t\t\t\t\tStringHelper.repeat( \">>\", ++depth ),\n+\t\t\t\t\t\tStringHelper.repeat( \"<<\", depth-- ),\n \t\t\t\t\t\tcollectionIndexDefinition.getCollectionDefinition().getCollectionPersister().getRole()\n \t\t\t\t)\n \t\t);\n@@ -198,7 +198,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati\n \t\tSystem.out.println(\n \t\t\t\tString.format(\n \t\t\t\t\t\t\"%s Finishing collection elements (%s)\",\n-\t\t\t\t\t\tStringHelper.repeat( \">>\", ++depth ),\n+\t\t\t\t\t\tStringHelper.repeat( \"<<\", depth-- ),\n \t\t\t\t\t\telementDefinition.getCollectionDefinition().getCollectionPersister().getRole()\n \t\t\t\t)\n \t\t);\n@@ -223,7 +223,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati\n \t\tSystem.out.println(\n \t\t\t\tString.format(\n \t\t\t\t\t\t\"%s Finishing composite (%s)\",\n-\t\t\t\t\t\tStringHelper.repeat( \">>\", depth-- ),\n+\t\t\t\t\t\tStringHelper.repeat( \"<<\", depth-- ),\n \t\t\t\t\t\tcompositionElementDefinition.getCollectionDefinition().getCollectionPersister().getRole()\n \t\t\t\t)\n \t\t);",
    "fixed my bad attempt to apply Sam \\' s patch : ) .": "diff --git a/src/main/org/codehaus/groovy/ant/Groovyc.java b/src/main/org/codehaus/groovy/ant/Groovyc.java\nindex ad7d930b2c..9903bf5d12 100644\n--- a/src/main/org/codehaus/groovy/ant/Groovyc.java\n+++ b/src/main/org/codehaus/groovy/ant/Groovyc.java\n@@ -380,9 +380,9 @@ public class Groovyc extends MatchingTask {\n             }\n \n             try {\n-                String classpath = getClasspath().toString();\n+                Path classpath = getClasspath();\n                 if (classpath != null) {\n-                 ",
    "Call Robolectric . getFakeHttpLayer ( ) . logHttpRequests ( ) to get some hints about what \\' s going on internally .": "diff --git a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java\nindex ab3d14770..ca610298c 100644\n--- a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java\n+++ b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java\n@@ -18,6 +18,7 @@ public class FakeHttpLayer {\n     List<HttpEntityStub.ResponseRule> httpResponseRules = new ArrayList<HttpEntityStub.ResponseRule>();\n     HttpResponse defaultHttpResponse;\n     private HttpResponse defaultResponse;\n+    private boolean logHttpRequests = false;\n \n     public void addPendingHttpResponse(int statusCode, String responseBody) {\n         addPendingHttpResponse(new TestHttpResponse(statusCode, responseBody));\n@@ -72,8 +73,14 @@ public class FakeHttpLayer {\n     }\n \n     public HttpResponse emulateRequest(HttpHost httpHost, HttpRequest httpRequest, HttpContext httpContext, RequestDirector requestDirector) throws HttpException, IOException {\n+        if (logHttpRequests) {\n+            System.out.println(\"  <-- \" + httpRequest.getRequestLine());\n+        }\n         HttpResponse httpResponse = findResponse(httpRequest);\n-\n+        if (logHttpRequests) {\n+            System.out.println(\"  --> \" + (httpResponse == null ? null : httpResponse.getStatusLine().getStatusCode()));\n+        }\n+        \n         if (httpResponse == null) {\n             throw new RuntimeException(\"Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse().\");\n         }\n@@ -110,6 +117,14 @@ public class FakeHttpLayer {\n         httpResponseRules.clear();\n     }\n \n+    public void logHttpRequests() {\n+        logHttpRequests = true;\n+    }\n+\n+    public void silence() {\n+        logHttpRequests = false;\n+    }\n+\n     public static class RequestMatcherResponseRule implements HttpEntityStub.ResponseRule {\n         private RequestMatcher requestMatcher;\n         private HttpResponse responseToGive;",
    "Add URLs from parent classloader in executable jar .": "diff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml\nindex 2fffa60044..b32c0e5d4c 100644\n--- a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml\n+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml\n@@ -63,7 +63,7 @@\n \t\t\t\t\t</descriptors>\n \t\t\t\t\t<archive>\n \t\t\t\t\t\t<manifest>\n-\t\t\t\t\t\t\t<mainClass>org.springframework.boot.load.JarLauncher</mainClass>\n+\t\t\t\t\t\t\t<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>\n \t\t\t\t\t\t</manifest>\n \t\t\t\t\t\t<manifestEntries>\n \t\t\t\t\t\t\t<Start-Class>org.springframework.boot.load.it.jar.EmbeddedJarStarter</Start-Class>\ndiff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml\nindex 193173d667..efa6e7b048 100644\n--- a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml\n+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml\n@@ -27,7 +27,7 @@\n \t\t\t\t<configuration>\n \t\t\t\t\t<archive>\n \t\t\t\t\t\t<manifest>\n-\t\t\t\t\t\t\t<mainClass>org.springframework.boot.load.WarLauncher</mainClass>\n+\t\t\t\t\t\t\t<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>\n \t\t\t\t\t\t</manifest>\n \t\t\t\t\t\t<manifestEntries>\n \t\t\t\t\t\t\t<Start-Class>org.springframework.boot.load.it.war.embedded.EmbeddedWarStarter</Start-Class>\ndiff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java\nindex c50a13e6f5..ed93d835e0 100644\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java\n@@ -16,8 +16,12 @@\n \n package org.springframework.boot.loader;\n \n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n import java.util.List;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n \n import org.springframework.boot.loader.archive.Archive;\n@@ -64,6 +68,21 @@ public abstract class ExecutableArchiveLauncher extends Launcher {\n \t\treturn archives;\n \t}\n \n+\t@Override\n+\tprotected ClassLoader createClassLoader(URL[] urls) throws Exception {\n+\t\tSet<URL> copy = new LinkedHashSet<URL>();\n+\t\tClassLoader loader = getDefaultClassLoader();\n+\t\tif (loader instanceof URLClassLoader) {\n+\t\t\tfor (URL url : ((URLClassLoader) loader).getURLs()) {\n+\t\t\t\tcopy.add(url);\n+\t\t\t}\n+\t\t}\n+\t\tfor (URL url : urls) {\n+\t\t\tcopy.add(url);\n+\t\t}\n+\t\treturn super.createClassLoader(copy.toArray(new URL[copy.size()]));\n+\t}\n+\n \t/**\n \t * Determine if the specified {@link JarEntry} is a nested item that should be added\n \t * to the classpath. The method is called once for each entry.\n@@ -81,4 +100,20 @@ public abstract class ExecutableArchiveLauncher extends Launcher {\n \tprotected void postProcessClassPathArchives(List<Archive> archives) throws Exception {\n \t}\n \n+\tprivate static ClassLoader getDefaultClassLoader() {\n+\t\tClassLoader cl = null;\n+\t\ttry {\n+\t\t\tcl = Thread.currentThread().getContextClassLoader();\n+\t\t}\n+\t\tcatch (Throwable ex) {\n+\t\t\t// Cannot access thread context ClassLoader - falling back to system class\n+\t\t\t// loader...\n+\t\t}\n+\t\tif (cl == null) {\n+\t\t\t// No thread context class loader -> use class loader of this class.\n+\t\t\tcl = ExecutableArchiveLauncher.class.getClassLoader();\n+\t\t}\n+\t\treturn cl;\n+\t}\n+\n }\ndiff --git a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar\nindex c7c485ae5d..fb02c02701 100644\nBinary files a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar and b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar differ",
    "Add version and master_node parameter to _cluster / state": "diff --git a/rest-api-spec/api/cluster.state.json b/rest-api-spec/api/cluster.state.json\nindex 97d68480b51..ff145d0b97f 100644\n--- a/rest-api-spec/api/cluster.state.json\n+++ b/rest-api-spec/api/cluster.state.json\n@@ -16,7 +16,7 @@\n         },\n         \"metric\" : {\n           \"type\" : \"list\",\n-          \"options\" : [\"_all\", \"blocks\", \"metadata\", \"nodes\", \"routing_table\"],\n+          \"options\" : [\"_all\", \"blocks\", \"metadata\", \"nodes\", \"routing_table\", \"master_node\", \"version\"],\n           \"description\" : \"Limit the information returned to the specified metrics\"\n         }\n       },",
    "Add optimized util . Bits for Java 9 and later versions": "diff --git a/h2/src/java9/precompiled/org/h2/util/Bits.class b/h2/src/java9/precompiled/org/h2/util/Bits.class\nnew file mode 100644\nindex 000000000..bff3d08b4\nBinary files /dev/null and b/h2/src/java9/precompiled/org/h2/util/Bits.class differ\ndiff --git a/h2/src/java9/src/org/h2/util/Bits.java b/h2/src/java9/src/org/h2/util/Bits.java\nnew file mode 100644\nindex 000000000..ce96d5ffd\n--- /dev/null\n+++ b/h2/src/java9/src/org/h2/util/Bits.java\n@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0,\n+ * and the EPL 1.0 (http://h2database.com/html/license.html).\n+ * Initial Developer: H2 Group\n+ */\n+package org.h2.util;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import java.util.UUID;\n+\n+/**\n+ * Manipulations with bytes and arrays. Specialized implementation for Java 9\n+ * and later versions.\n+ */\n+public final class Bits {\n+\n+    /**\n+     * VarHandle giving access to elements of a byte[] array viewed as if it were a\n+     * int[] array on big-endian system.\n+     */\n+    private static final VarHandle INT_VH = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);\n+\n+    /**\n+     * VarHandle giving access to elements of a byte[] array viewed as if it were a\n+     * long[] array on big-endian system.\n+     */\n+    private static final VarHandle LONG_VH = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN);\n+\n+    /**\n+     * Reads a int value from the byte array at the given position in big-endian\n+     * order.\n+     *\n+     * @param buff\n+     *            the byte array\n+     * @param pos\n+     *            the position\n+     * @return the value\n+     */\n+    public static int readInt(byte[] buff, int pos) {\n+        return (int) INT_VH.get(buff, pos);\n+    }\n+\n+    /**\n+     * Reads a long value from the byte array at the given position in big-endian\n+     * order.\n+     *\n+     * @param buff\n+     *            the byte array\n+     * @param pos\n+     *            the position\n+     * @return the value\n+     */\n+    public static long readLong(byte[] buff, int pos) {\n+        return (long) LONG_VH.get(buff, pos);\n+    }\n+\n+    /**\n+     * Converts UUID value to byte array in big-endian order.\n+     *\n+     * @param msb\n+     *            most significant part of UUID\n+     * @param lsb\n+     *            least significant part of UUID\n+     * @return byte array representation\n+     */\n+    public static byte[] uuidToBytes(long msb, long lsb) {\n+        byte[] buff = new byte[16];\n+        LONG_VH.set(buff, 0, msb);\n+        LONG_VH.set(buff, 8, lsb);\n+        return buff;\n+    }\n+\n+    /**\n+     * Converts UUID value to byte array in big-endian order.\n+     *\n+     * @param uuid\n+     *            UUID value\n+     * @return byte array representation\n+     */\n+    public static byte[] uuidToBytes(UUID uuid) {\n+        return uuidToBytes(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());\n+    }\n+\n+    /**\n+     * Writes a int value to the byte array at the given position in big-endian\n+     * order.\n+     *\n+     * @param buff\n+     *            the byte array\n+     * @param pos\n+     *            the position\n+     * @param x\n+     *            the value to write\n+     */\n+    public static void writeInt(byte[] buff, int pos, int x) {\n+        INT_VH.set(buff, pos, x);\n+    }\n+\n+    /**\n+     * Writes a long value to the byte array at the given position in big-endian\n+     * order.\n+     *\n+     * @param buff\n+     *            the byte array\n+     * @param pos\n+     *            the position\n+     * @param x\n+     *            the value to write\n+     */\n+    public static void writeLong(byte[] buff, int pos, long x) {\n+        LONG_VH.set(buff, pos, x);\n+    }\n+\n+    private Bits() {\n+    }\n+}\ndiff --git a/h2/src/java9/src/org/h2/util/package.html b/h2/src/java9/src/org/h2/util/package.html\nnew file mode 100644\nindex 000000000..ab7c51146\n--- /dev/null\n+++ b/h2/src/java9/src/org/h2/util/package.html\n@@ -0,0 +1,14 @@\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n+<!--\n+Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0, Version 1.0,\n+and under the Eclipse Public License, Version 1.0\n+Initial Developer: H2 Group\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\n+<head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" /><title>\n+Javadoc package documentation\n+</title></head><body style=\"font: 9pt/130% Tahoma, Arial, Helvetica, sans-serif; font-weight: normal;\"><p>\n+\n+Internal utility classes reimplemented for Java 9 and later versions.\n+\n+</p></body></html>\n\\ No newline at end of file\ndiff --git a/h2/src/main/META-INF/MANIFEST.MF b/h2/src/main/META-INF/MANIFEST.MF\nindex b01ded397..365074859 100644\n--- a/h2/src/main/META-INF/MANIFEST.MF\n+++ b/h2/src/main/META-INF/MANIFEST.MF\n@@ -13,6 +13,7 @@ Bundle-Vendor: H2 Group\n Bundle-Version: ${version}\n Bundle-License: http://www.h2database.com/html/license.html\n Bundle-Category: jdbc\n+Multi-Release: true\n Import-Package: javax.management,\n  javax.naming;resolution:=optional,\n  javax.naming.spi;resolution:=optional,\ndiff --git a/h2/src/main/org/h2/util/Bits.java b/h2/src/main/org/h2/util/Bits.java\nindex d780cc923..3e3e7262d 100644\n--- a/h2/src/main/org/h2/util/Bits.java\n+++ b/h2/src/main/org/h2/util/Bits.java\n@@ -14,6 +14,12 @@\n  */\n public final class Bits {\n \n+    /*\n+     * Signatures of methods should match with\n+     * h2/src/java9/src/org/h2/util/Bits.java and precompiled\n+     * h2/src/java9/precompiled/org/h2/util/Bits.class.\n+     */\n+\n     /**\n      * Reads a int value from the byte array at the given position in big-endian\n      * order.\ndiff --git a/h2/src/tools/org/h2/build/Build.java b/h2/src/tools/org/h2/build/Build.java\nindex 798e60390..3da20f606 100644\n--- a/h2/src/tools/org/h2/build/Build.java\n+++ b/h2/src/tools/org/h2/build/Build.java\n@@ -446,8 +446,10 @@ private FileList excludeTestMetaInfFiles(FileList files) {\n     @Description(summary = \"Create the regular h2.jar file.\")\n     public void jar() {\n         compile();\n+        FileList files = files(\"src/java9/precompiled\");\n+        copy(\"temp/META-INF/versions/9\", files, \"src/java9/precompiled\");\n         manifest(\"H2 Database Engine\", \"org.h2.tools.Console\");\n-        FileList files = files(\"temp\").\n+        files = files(\"temp\").\n             exclude(\"temp/android/*\").\n             exclude(\"temp/org/h2/android/*\").\n             exclude(\"temp/org/h2/build/*\").\ndiff --git a/h2/src/tools/org/h2/build/code/CheckTextFiles.java b/h2/src/tools/org/h2/build/code/CheckTextFiles.java\nindex e4f4e8d21..9c7f7cd5e 100644\n--- a/h2/src/tools/org/h2/build/code/CheckTextFiles.java\n+++ b/h2/src/tools/org/h2/build/code/CheckTextFiles.java\n@@ -30,7 +30,7 @@ public class CheckTextFiles {\n             \"Driver\", \"Processor\", \"prefs\" };\n     private static final String[] SUFFIX_IGNORE = { \"gif\", \"png\", \"odg\", \"ico\",\n             \"sxd\", \"layout\", \"res\", \"win\", \"jar\", \"task\", \"svg\", \"MF\", \"mf\",\n-            \"sh\", \"DS_Store\", \"prop\" };\n+            \"sh\", \"DS_Store\", \"prop\", \"class\" };\n     private static final String[] SUFFIX_CRLF = { \"bat\" };\n \n     private static final boolean ALLOW_TAB = false;\ndiff --git a/h2/src/tools/org/h2/build/doc/SpellChecker.java b/h2/src/tools/org/h2/build/doc/SpellChecker.java\nindex 0cfb98478..70e4895b5 100644\n--- a/h2/src/tools/org/h2/build/doc/SpellChecker.java\n+++ b/h2/src/tools/org/h2/build/doc/SpellChecker.java\n@@ -31,7 +31,7 @@ public class SpellChecker {\n             \"properties\", \"task\", \"MF\", \"mf\", \"sh\", \"\" };\n     private static final String[] IGNORE = { \"dev\", \"nsi\", \"gif\", \"png\", \"odg\",\n             \"ico\", \"sxd\", \"zip\", \"bz2\", \"rc\", \"layout\", \"res\", \"dll\", \"jar\",\n-            \"svg\", \"prefs\", \"prop\", \"iml\" };\n+            \"svg\", \"prefs\", \"prop\", \"iml\", \"class\" };\n     private static final String DELIMITERS =\n             \" \\n.();-\\\"=,*/{}_<>+\\r:'@[]&\\\\!#|?$^%~`\\t\";\n     private static final String PREFIX_IGNORE = \"abc\";",
    "Remove unused config definition": "diff --git a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def b/config-provisioning/src/main/resources/configdefinitions/config-server-security.def\ndeleted file mode 100644\nindex cfd5c9c04e5..00000000000\n--- a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-# Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n-namespace=config.provisioning\n-\n-athenzProviderHostname      string\n-controllerHostIdentity      string\n-configServerHostIdentity    string\n-proxyHostIdentity           string\n-tenantHostIdentity          string\n-tenantIdentity              string",
    "Fix the SuperficialValidator to properly handle unreasonable AnnotationValues ( specifically \\\" < any > \\\" and \\\" < error > \\\" strings appearing instead of real values where there are missing imports or other upstream compilation issues ) .": "diff --git a/common/src/main/java/com/google/auto/common/MoreTypes.java b/common/src/main/java/com/google/auto/common/MoreTypes.java\nindex ca6b99b21..6df1acdc6 100644\n--- a/common/src/main/java/com/google/auto/common/MoreTypes.java\n+++ b/common/src/main/java/com/google/auto/common/MoreTypes.java\n@@ -39,6 +39,10 @@ import javax.lang.model.type.ArrayType;\n import javax.lang.model.type.DeclaredType;\n import javax.lang.model.type.ErrorType;\n import javax.lang.model.type.ExecutableType;\n+import javax.lang.model.type.NoType;\n+import javax.lang.model.type.NullType;\n+import javax.lang.model.type.PrimitiveType;\n+import javax.lang.model.type.TypeKind;\n import javax.lang.model.type.TypeMirror;\n import javax.lang.model.type.TypeVariable;\n import javax.lang.model.type.TypeVisitor;\n@@ -389,5 +393,183 @@ public final class MoreTypes {\n     return builder.build();\n   }\n \n+  /**\n+   * Returns a {@link ArrayType} if the {@link TypeMirror} represents a primitive array or\n+   * throws an {@link IllegalArgumentException}.\n+   */\n+  public static ArrayType asArray(TypeMirror maybeArrayType) {\n+    return maybeArrayType.accept(new CastingTypeVisitor<ArrayType>() {\n+      @Override public ArrayType visitArray(ArrayType type, String ignore) {\n+        return type;\n+      }\n+    }, \"primitive array\");\n+  }\n+\n+  /**\n+   * Returns a {@link DeclaredType} if the {@link TypeMirror} represents a declared type such\n+   * as a class, interface, union/compound, or enum or throws an {@link IllegalArgumentException}.\n+   */\n+  public static DeclaredType asDeclared(TypeMirror maybeDeclaredType) {\n+    return maybeDeclaredType.accept(new CastingTypeVisitor<DeclaredType>() {\n+      @Override public DeclaredType visitDeclared(DeclaredType type, String ignored) {\n+        return type;\n+      }\n+    }, \"declared type\");\n+  }\n+\n+  /**\n+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such\n+   * as may result from missing code, or bad compiles or throws an {@link IllegalArgumentException}.\n+   */\n+  public static ErrorType asError(TypeMirror maybeErrorType) {\n+    return maybeErrorType.accept(new CastingTypeVisitor<ErrorType>() {\n+      @Override public ErrorType visitError(ErrorType type, String p) {\n+        return type;\n+      }\n+    }, \"error type\");\n+  }\n+\n+  /**\n+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such\n+   * as a method, constructor, or initializer or throws an {@link IllegalArgumentException}.\n+   */\n+  public static ExecutableType asExecutable(TypeMirror maybeExecutableType) {\n+    return maybeExecutableType.accept(new CastingTypeVisitor<ExecutableType>() {\n+      @Override public ExecutableType visitExecutable(ExecutableType type, String p) {\n+        return type;\n+      }\n+    }, \"executable type\");\n+  }\n+\n+  /**\n+   * Returns a {@link NoType} if the {@link TypeMirror} represents an non-type such\n+   * as void, or package, etc. or throws an {@link IllegalArgumentException}.\n+   */\n+  public static NoType asNoType(TypeMirror maybeNoType) {\n+    return maybeNoType.accept(new CastingTypeVisitor<NoType>() {\n+      @Override public NoType visitNoType(NoType noType, String p) {\n+        return noType;\n+      }\n+    }, \"non-type\");\n+  }\n+\n+  /**\n+   * Returns a {@link NullType} if the {@link TypeMirror} represents the null type\n+   * or throws an {@link IllegalArgumentException}.\n+   */\n+  public static NullType asNullType(TypeMirror maybeNullType) {\n+    return maybeNullType.accept(new CastingTypeVisitor<NullType>() {\n+      @Override public NullType visitNull(NullType nullType, String p) {\n+        return nullType;\n+      }\n+    }, \"null\");\n+  }\n+\n+  /**\n+   * Returns a {@link PrimitiveType} if the {@link TypeMirror} represents a primitive type\n+   * or throws an {@link IllegalArgumentException}.\n+   */\n+  public static PrimitiveType asPrimitiveType(TypeMirror maybePrimitiveType) {\n+    return maybePrimitiveType.accept(new CastingTypeVisitor<PrimitiveType>() {\n+      @Override public PrimitiveType visitPrimitive(PrimitiveType type, String p) {\n+        return type;\n+      }\n+    }, \"primitive type\");\n+  }\n+\n+  //\n+  // visitUnionType would go here, but it is a 1.7 API.\n+  //\n+\n+  /**\n+   * Returns a {@link TypeVariable} if the {@link TypeMirror} represents a type variable\n+   * or throws an {@link IllegalArgumentException}.\n+   */\n+  public static TypeVariable asTypeVariable(TypeMirror maybeTypeVariable) {\n+    return maybeTypeVariable.accept(new CastingTypeVisitor<TypeVariable>() {\n+      @Override public TypeVariable visitTypeVariable(TypeVariable type, String p) {\n+        return type;\n+      }\n+    }, \"type variable\");\n+  }\n+\n+  /**\n+   * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type\n+   * or throws an {@link IllegalArgumentException}.\n+   */\n+  public static WildcardType asWildcard(WildcardType maybeWildcardType) {\n+    return maybeWildcardType.accept(new CastingTypeVisitor<WildcardType>() {\n+      @Override public WildcardType visitWildcard(WildcardType type, String p) {\n+        return type;\n+      }\n+    }, \"wildcard type\");\n+  }\n+\n+  /**\n+   *\n+   * Returns true if the raw type underlying the given {@link TypeMirror} represents the\n+   * same raw type as the given {@link Class} and throws an IllegalArgumentException if the\n+   * {@link TypeMirror} does not represent a type that can be referenced by a {@link Class}\n+   */\n+  public static boolean isTypeOf(final Class<?> clazz, TypeMirror type) {\n+    checkNotNull(clazz);\n+    return type.accept(new SimpleTypeVisitor6<Boolean, Void>() {\n+      @Override protected Boolean defaultAction(TypeMirror type, Void ignored) {\n+        throw new IllegalArgumentException(type + \" cannot be represented as a Class<?>.\");\n+      }\n+\n+      @Override public Boolean visitNoType(NoType noType, Void p) {\n+        if (noType.getKind().equals(TypeKind.VOID)) {\n+          return clazz.equals(Void.TYPE);\n+        }\n+        throw new IllegalArgumentException(noType + \" cannot be represented as a Class<?>.\");\n+      }\n+\n+      @Override public Boolean visitPrimitive(PrimitiveType type, Void p) {\n+        switch (type.getKind()) {\n+          case BOOLEAN:\n+            return clazz.equals(Boolean.TYPE);\n+          case BYTE:\n+            return clazz.equals(Byte.TYPE);\n+          case CHAR:\n+            return clazz.equals(Character.TYPE);\n+          case DOUBLE:\n+            return clazz.equals(Double.TYPE);\n+          case FLOAT:\n+            return clazz.equals(Float.TYPE);\n+          case INT:\n+            return clazz.equals(Integer.TYPE);\n+          case LONG:\n+            return clazz.equals(Long.TYPE);\n+          case SHORT:\n+            return clazz.equals(Short.TYPE);\n+          default:\n+            throw new IllegalArgumentException(type + \" cannot be represented as a Class<?>.\");\n+        }\n+      }\n+\n+      @Override public Boolean visitArray(ArrayType array, Void p) {\n+        return clazz.isArray()\n+            && isTypeOf(clazz.getComponentType(), array.getComponentType());\n+      }\n+\n+      @Override public Boolean visitDeclared(DeclaredType type, Void ignored) {\n+        TypeElement typeElement;\n+        try {\n+          typeElement = MoreElements.asType(type.asElement());\n+        } catch (IllegalArgumentException iae) {\n+          throw new IllegalArgumentException(type + \" does not represent a class or interface.\");\n+        }\n+        return typeElement.getQualifiedName().contentEquals(clazz.getCanonicalName());\n+      }\n+    }, null);\n+  }\n+\n+  private static class CastingTypeVisitor<T> extends SimpleTypeVisitor6<T, String> {\n+    @Override protected T defaultAction(TypeMirror e, String label) {\n+      throw new IllegalArgumentException(e + \" does not represent a \" + label);\n+    }\n+  }\n+\n   private MoreTypes() {}\n }\ndiff --git a/common/src/main/java/com/google/auto/common/SuperficialValidation.java b/common/src/main/java/com/google/auto/common/SuperficialValidation.java\nindex 43193c944..e87930818 100644\n--- a/common/src/main/java/com/google/auto/common/SuperficialValidation.java\n+++ b/common/src/main/java/com/google/auto/common/SuperficialValidation.java\n@@ -16,6 +16,7 @@\n package com.google.auto.common;\n \n import java.util.List;\n+import java.util.Map;\n import javax.lang.model.element.AnnotationMirror;\n import javax.lang.model.element.AnnotationValue;\n import javax.lang.model.element.AnnotationValueVisitor;\n@@ -30,6 +31,7 @@ import javax.lang.model.type.ArrayType;\n import javax.lang.model.type.DeclaredType;\n import javax.lang.model.type.ErrorType;\n import javax.lang.model.type.ExecutableType;\n+import javax.lang.model.type.TypeKind;\n import javax.lang.model.type.TypeMirror;\n import javax.lang.model.type.TypeVisitor;\n import javax.lang.model.type.WildcardType;\n@@ -73,7 +75,7 @@ public final class SuperficialValidation {\n         @Override public Boolean visitExecutable(ExecutableElement e, Void p) {\n           AnnotationValue defaultValue = e.getDefaultValue();\n           return isValidBaseElement(e)\n-              && (defaultValue == null || validateAnnotationValue(defaultValue))\n+              && (defaultValue == null || validateAnnotationValue(defaultValue, e.getReturnType()))\n               && validateType(e.getReturnType())\n               && validateTypes(e.getThrownTypes())\n               && validateElements(e.getTypeParameters())\n@@ -85,8 +87,7 @@ public final class SuperficialValidation {\n               && validateTypes(e.getBounds());\n         }\n \n-        @Override\n-        public Boolean visitUnknown(Element e, Void p) {\n+        @Override public Boolean visitUnknown(Element e, Void p) {\n           // just assume that unknown elements are OK\n           return true;\n         }\n@@ -177,41 +178,49 @@ public final class SuperficialValidation {\n \n   private static boolean validateAnnotation(AnnotationMirror annotationMirror) {\n     return validateType(annotationMirror.getAnnotationType())\n-        && validateAnnotationValues(annotationMirror.getElementValues().values());\n+        && validateAnnotationValues(annotationMirror.getElementValues());\n   }\n \n   private static boolean validateAnnotationValues(\n-      Iterable<? extends AnnotationValue> annotationValues) {\n-    for (AnnotationValue annotationMirror : annotationValues) {\n-      if (!validateAnnotationValue(annotationMirror)) {\n+      Map<? extends ExecutableElement, ? extends AnnotationValue> valueMap) {\n+    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> valueEntry :\n+        valueMap.entrySet()) {\n+      TypeMirror expectedType = valueEntry.getKey().getReturnType();\n+      if (!validateAnnotationValue(valueEntry.getValue(), expectedType)) {\n         return false;\n       }\n     }\n     return true;\n   }\n \n-  private static final AnnotationValueVisitor<Boolean, Void> ANNOTATION_VALUE_VALIDATING_VISITOR =\n-      new SimpleAnnotationValueVisitor6<Boolean, Void>() {\n-        @Override\n-        protected Boolean defaultAction(Object o, Void p) {\n-          return true;\n+  private static final AnnotationValueVisitor<Boolean, TypeMirror> VALUE_VALIDATING_VISITOR =\n+      new SimpleAnnotationValueVisitor6<Boolean, TypeMirror>() {\n+        @Override protected Boolean defaultAction(Object o, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(o.getClass(), expectedType);\n         }\n \n-        @Override\n-        public Boolean visitUnknown(AnnotationValue av, Void p) {\n+        @Override public Boolean visitUnknown(AnnotationValue av, TypeMirror expectedType) {\n           // just take the default action for the unknown\n-          return defaultAction(av, p);\n+          return defaultAction(av, expectedType);\n         }\n \n-        @Override\n-        public Boolean visitAnnotation(AnnotationMirror a, Void p) {\n-          return validateAnnotation(a);\n+        @Override public Boolean visitAnnotation(AnnotationMirror a, TypeMirror expectedType) {\n+          return MoreTypes.equivalence().equivalent(a.getAnnotationType(), expectedType)\n+              && validateAnnotation(a);\n         }\n \n         @Override\n-        public Boolean visitArray(List<? extends AnnotationValue> values, Void p) {\n+        public Boolean visitArray(List<? extends AnnotationValue> values, TypeMirror expectedType) {\n+          if (!expectedType.getKind().equals(TypeKind.ARRAY)) {\n+            return false;\n+          }\n+          try {\n+            expectedType = MoreTypes.asArray(expectedType).getComponentType();\n+          } catch (IllegalArgumentException e) {\n+            return false; // Not an array expected, ergo invalid.\n+          }\n           for (AnnotationValue value : values) {\n-            if (!value.accept(this, null)) {\n+            if (!value.accept(this, expectedType)) {\n               return false;\n             }\n           }\n@@ -219,17 +228,54 @@ public final class SuperficialValidation {\n         }\n \n         @Override\n-        public Boolean visitEnumConstant(VariableElement c, Void p) {\n-          return validateElement(c);\n+        public Boolean visitEnumConstant(VariableElement enumConstant, TypeMirror expectedType) {\n+          return MoreTypes.equivalence().equivalent(enumConstant.asType(), expectedType)\n+              && validateElement(enumConstant);\n         }\n \n-        @Override\n-        public Boolean visitType(TypeMirror t, Void p) {\n-          return validateType(t);\n+        @Override public Boolean visitType(TypeMirror type, TypeMirror ignored) {\n+          // We could check assignability here, but would require a Types instance. Since this\n+          // isn't really the sort of thing that shows up in a bad AST from upstream compilation\n+          // we ignore the expected type and just validate the type.  It might be wrong, but\n+          // it's valid.\n+          return validateType(type);\n+        }\n+\n+        @Override public Boolean visitBoolean(boolean b, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Boolean.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitByte(byte b, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Byte.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitChar(char c, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Character.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitDouble(double d, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Double.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitFloat(float f, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Float.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitInt(int i, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Integer.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitLong(long l, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Long.TYPE, expectedType);\n+        }\n+\n+        @Override public Boolean visitShort(short s, TypeMirror expectedType) {\n+          return MoreTypes.isTypeOf(Short.TYPE, expectedType);\n         }\n       };\n \n-  private static boolean validateAnnotationValue(AnnotationValue annotationValue) {\n-    return annotationValue.accept(ANNOTATION_VALUE_VALIDATING_VISITOR, null);\n+  private static boolean validateAnnotationValue(\n+      AnnotationValue annotationValue, TypeMirror expectedType) {\n+    return annotationValue.accept(VALUE_VALIDATING_VISITOR, expectedType);\n   }\n }\ndiff --git a/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java\nnew file mode 100644\nindex 000000000..b067f1e74\n--- /dev/null\n+++ b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java\n@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (C) 2014 Google, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.auto.common;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assert_;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.testing.compile.CompilationRule;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.util.Elements;\n+\n+/**\n+ * Tests {@link MoreTypes#isTypeOf}.\n+ */\n+@RunWith(JUnit4.class)\n+public class MoreTypesIsTypeOfTest {\n+\n+  @Rule public CompilationRule compilationRule = new CompilationRule();\n+\n+  private Elements elements;\n+\n+  @Before public void setUp() {\n+    this.elements = compilationRule.getElements();\n+  }\n+\n+  private interface TestType {}\n+\n+  @Test public void isTypeOf_DeclaredType() {\n+    assertThat(MoreTypes.isTypeOf(TestType.class, typeElementFor(TestType.class).asType()))\n+        .named(\"mirror represents the TestType\")\n+        .isTrue();\n+    assertThat(MoreTypes.isTypeOf(String.class, typeElementFor(TestType.class).asType()))\n+        .named(\"mirror does not represent a String\")\n+        .isFalse();\n+  }\n+\n+  private interface ArrayType {\n+    String[] array();\n+  }\n+\n+  @Test public void isTypeOf_ArrayType() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(ArrayType.class));\n+    assertThat(MoreTypes.isTypeOf(new String[] {}.getClass(), type))\n+        .named(\"array mirror represents an array Class object\")\n+        .isTrue();\n+  }\n+\n+  private interface PrimitiveBoolean {\n+    boolean method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveBoolean() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveBoolean.class));\n+    assertThat(MoreTypes.isTypeOf(Boolean.TYPE, type)).named(\"mirror of a boolean\").isTrue();\n+  }\n+\n+  private interface PrimitiveByte {\n+    byte method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveByte() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveByte.class));\n+    assertThat(MoreTypes.isTypeOf(Byte.TYPE, type)).named(\"mirror of a byte\").isTrue();\n+  }\n+\n+  private interface PrimitiveChar {\n+    char method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveChar() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveChar.class));\n+    assertThat(MoreTypes.isTypeOf(Character.TYPE, type)).named(\"mirror of a char\").isTrue();\n+  }\n+\n+  private interface PrimitiveDouble {\n+    double method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveDouble() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveDouble.class));\n+    assertThat(MoreTypes.isTypeOf(Double.TYPE, type)).named(\"mirror of a double\").isTrue();\n+  }\n+\n+  private interface PrimitiveFloat {\n+    float method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveFloat() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveFloat.class));\n+    assertThat(MoreTypes.isTypeOf(Float.TYPE, type)).named(\"mirror of a float\").isTrue();\n+  }\n+\n+  private interface PrimitiveInt {\n+    int method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveInt() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveInt.class));\n+    assertThat(MoreTypes.isTypeOf(Integer.TYPE, type)).named(\"mirror of a int\").isTrue();\n+  }\n+\n+  private interface PrimitiveLong {\n+    long method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveLong() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveLong.class));\n+    assertThat(MoreTypes.isTypeOf(Long.TYPE, type)).named(\"mirror of a long\").isTrue();\n+  }\n+\n+  private interface PrimitiveShort {\n+    short method();\n+  }\n+\n+  @Test public void isTypeOf_PrimitiveShort() {\n+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveShort.class));\n+    assertThat(MoreTypes.isTypeOf(Short.TYPE, type)).named(\"mirror of a short\").isTrue();\n+  }\n+\n+  private interface PrimitiveVoid {\n+    void method();\n+  }\n+\n+  @Test public void isTypeOf_void() {\n+    TypeMirror primitive = extractReturnTypeFromHolder(typeElementFor(PrimitiveVoid.class));\n+    assertThat(MoreTypes.isTypeOf(Void.TYPE, primitive)).named(\"mirror of a void\").isTrue();\n+  }\n+\n+  private interface DeclaredVoid {\n+    Void method();\n+  }\n+\n+  @Test public void isTypeOf_Void() {\n+    TypeMirror declared = extractReturnTypeFromHolder(typeElementFor(DeclaredVoid.class));\n+    assertThat(MoreTypes.isTypeOf(Void.class, declared)).named(\"mirror of a void\").isTrue();\n+  }\n+\n+  @Test public void isTypeOf_fail() {\n+    TypeMirror method =\n+        getOnlyElement(typeElementFor(DeclaredVoid.class).getEnclosedElements()).asType();\n+    try {\n+      MoreTypes.isTypeOf(String.class, method);\n+      assert_().fail();\n+    } catch (IllegalArgumentException expected) {}\n+  }\n+\n+  // Utility methods for this test.\n+\n+  private TypeMirror extractReturnTypeFromHolder(TypeElement typeElement) {\n+    Element element = Iterables.getOnlyElement(typeElement.getEnclosedElements());\n+    TypeMirror arrayType = MoreElements.asExecutable(element).getReturnType();\n+    return arrayType;\n+  }\n+\n+  private TypeElement typeElementFor(Class<?> clazz) {\n+    return elements.getTypeElement(clazz.getCanonicalName());\n+  }\n+}\ndiff --git a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java\nindex dfe32373f..0ddf66467 100644\n--- a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java\n+++ b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java\n@@ -203,6 +203,32 @@ public class SuperficialValidationTest {\n         .failsToCompile();\n   }\n \n+  @Test\n+  public void invalidAnnotationValue() {\n+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(\"test.Outer\",\n+        \"package test;\",\n+        \"\",\n+        \"final class Outer {\",\n+        \"  @interface TestAnnotation {\",\n+        \"    Class[] classes();\",\n+        \"  }\",\n+        \"\",\n+        \"  @TestAnnotation(classes = Foo)\",\n+        \"  static class TestClass {}\",\n+        \"}\");\n+    assert_().about(javaSource())\n+        .that(javaFileObject)\n+        .processedWith(new AssertingProcessor() {\n+          @Override void runAssertions() {\n+            TypeElement testClassElement =\n+                processingEnv.getElementUtils().getTypeElement(\"test.Outer.TestClass\");\n+            assert_().that(SuperficialValidation.validateElement(testClassElement))\n+                .named(\"testClassElement is valid\").isFalse();\n+          }\n+        }).failsToCompile();\n+  }\n+\n+\n   private static abstract class AssertingProcessor extends AbstractProcessor {\n     @Override\n     public Set<String> getSupportedAnnotationTypes() {",
    "Reduce the number of threads in StressUpdateDelete test .": "diff --git a/src/test/java/org/elasticsearch/update/UpdateTests.java b/src/test/java/org/elasticsearch/update/UpdateTests.java\nindex e6d01a3d606..4f8df988586 100644\n--- a/src/test/java/org/elasticsearch/update/UpdateTests.java\n+++ b/src/test/java/org/elasticsearch/update/UpdateTests.java\n@@ -568,7 +568,7 @@ public class UpdateTests extends ElasticsearchIntegrationTest {\n                 .execute().actionGet();\n         ensureGreen();\n \n-        final int numberOfThreads = scaledRandomIntBetween(5,10);\n+        final int numberOfThreads = scaledRandomIntBetween(3,5);\n         final int numberOfIdsPerThread = scaledRandomIntBetween(3,10);\n         final int numberOfUpdatesPerId = scaledRandomIntBetween(100,200);\n         final int retryOnConflict = randomIntBetween(0,1);",
    "use nicer icon": "diff --git a/README.md b/README.md\nindex 5ec42331e..472c7187b 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,6 +1,6 @@\n <a name=\"README\">[<img src=\"https://rawgithub.com/robolectric/robolectric/master/images/robolectric-horizontal.png\"/>](http://robolectric.org)</a>\n \n-[![Build Status](https://secure.travis-ci.org/robolectric/robolectric.png?branch=master)](http://travis-ci.org/robolectric/robolectric)\n+[![Build Status](https://travis-ci.org/robolectric/robolectric.svg?branch=master)](https://travis-ci.org/robolectric/robolectric)\n \n Robolectric is a testing framework that de-fangs the Android SDK so you can test-drive the development of your Android app.\n ",
    "prepare release jsonschema2pojo - 0 . 1 . 5": "diff --git a/jsonschema2pojo-cli/pom.xml b/jsonschema2pojo-cli/pom.xml\nindex fdffd727..9fd39db2 100644\n--- a/jsonschema2pojo-cli/pom.xml\n+++ b/jsonschema2pojo-cli/pom.xml\n@@ -5,12 +5,12 @@\n     <parent>\n         <artifactId>jsonschema2pojo</artifactId>\n         <groupId>com.googlecode.jsonschema2pojo</groupId>\n-        <version>0.1.5-SNAPSHOT</version>\n+        <version>0.1.5</version>\n     </parent>\n \n     <groupId>com.googlecode.jsonschema2pojo</groupId>\n     <artifactId>jsonschema2pojo-cli</artifactId>\n-    <version>0.1.5-SNAPSHOT</version>\n+    <version>0.1.5</version>\n \n     <name>jsonschema2pojo-cli</name>\n \n@@ -105,7 +105,7 @@\n         <dependency>\n             <groupId>com.googlecode.jsonschema2pojo</groupId>\n             <artifactId>jsonschema2pojo-core</artifactId>\n-            <version>0.1.5-SNAPSHOT</version>\n+            <version>0.1.5</version>\n         </dependency>\n         <dependency>\n             <groupId>commons-cli</groupId>\ndiff --git a/jsonschema2pojo-core/pom.xml b/jsonschema2pojo-core/pom.xml\nindex fc3c8977..f33f2440 100644\n--- a/jsonschema2pojo-core/pom.xml\n+++ b/jsonschema2pojo-core/pom.xml\n@@ -5,12 +5,12 @@\n     <parent>\n         <artifactId>jsonschema2pojo</artifactId>\n         <groupId>com.googlecode.jsonschema2pojo</groupId>\n-        <version>0.1.5-SNAPSHOT</version>\n+        <version>0.1.5</version>\n     </parent>\n \n     <groupId>com.googlecode.jsonschema2pojo</groupId>\n     <artifactId>jsonschema2pojo-core</artifactId>\n-    <version>0.1.5-SNAPSHOT</version>\n+    <version>0.1.5</version>\n \n     <name>jsonschema2pojo-core</name>\n \ndiff --git a/jsonschema2pojo-maven-plugin/pom.xml b/jsonschema2pojo-maven-plugin/pom.xml\nindex 6e91af1b..cb5f8176 100644\n--- a/jsonschema2pojo-maven-plugin/pom.xml\n+++ b/jsonschema2pojo-maven-plugin/pom.xml\n@@ -5,12 +5,12 @@\n     <parent>\n         <artifactId>jsonschema2pojo</artifactId>\n         <groupId>com.googlecode.jsonschema2pojo</groupId>\n-        <version>0.1.5-SNAPSHOT</version>\n+        <version>0.1.5</version>\n     </parent>\n \n     <groupId>com.googlecode.jsonschema2pojo</groupId>\n     <artifactId>jsonschema2pojo-maven-plugin</artifactId>\n-    <version>0.1.5-SNAPSHOT</version>\n+    <version>0.1.5</version>\n \n     <packaging>maven-plugin</packaging>\n \ndiff --git a/pom.xml b/pom.xml\nindex cff411cb..9491617e 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -10,7 +10,7 @@\n \n \t<groupId>com.googlecode.jsonschema2pojo</groupId>\n \t<artifactId>jsonschema2pojo</artifactId>\n-\t<version>0.1.5-SNAPSHOT</version>\n+\t<version>0.1.5</version>\n \n \t<packaging>pom</packaging>\n \t<name>jsonschema2pojo</name>",
    "remove git - describe plugin for the machines that doesn \\' t have full git tree": "diff --git a/hazelcast/pom.xml b/hazelcast/pom.xml\nindex f47eeddd17..adfcb5f5a5 100644\n--- a/hazelcast/pom.xml\n+++ b/hazelcast/pom.xml\n@@ -55,11 +55,7 @@\n                     <failOnNoGitDirectory>false</failOnNoGitDirectory>\n                     <abbrevLength>7</abbrevLength>\n                     <gitDescribe>\n-                        <skip>false</skip>\n-                  ",
    "Prepare next development version : 7 . 8 . 0 - SNAPSHOT": "diff --git a/model-api/dmn-model/pom.xml b/model-api/dmn-model/pom.xml\nindex 864260a1ba..8c7b6a7d27 100644\n--- a/model-api/dmn-model/pom.xml\n+++ b/model-api/dmn-model/pom.xml\n@@ -11,7 +11,7 @@\n \n   <groupId>org.camunda.bpm.model</groupId>\n   <artifactId>camunda-dmn-model</artifactId>\n-  <version>7.8.0-alpha4</version>\n+  <version>7.8.0-SNAPSHOT</version>\n   <name>camunda BPM - DMN Model API</name>\n   <packaging>jar</packaging>\n \n@@ -178,7 +178,7 @@\n     <url>https://github.com/camunda/camunda-dmn-model</url>\n     <connection>scm:git:git@github.com:camunda/camunda-dmn-model.git</connection>\n     <developerConnection>scm:git:git@github.com:camunda/camunda-dmn-model.git</developerConnection>\n-    <tag>7.8.0-alpha4</tag>\n+    <tag>HEAD</tag>\n   </scm>\n \n   <issueManagement>",
    "Remove CollectionUtils .": "diff --git a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java\nindex 805b9e414c..b80a99f77c 100644\n--- a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java\n+++ b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java\n@@ -14,7 +14,6 @@\n  */\n package io.netty.handler.codec;\n \n-import io.netty.util.collection.CollectionUtils;\n import io.netty.util.collection.IntObjectHashMap;\n import io.netty.util.collection.IntObjectMap;\n import io.netty.util.concurrent.FastThreadLocal;\n@@ -1147,7 +1146,7 @@ public class DefaultHeaders<T> implements Headers<T> {\n         // because we want to force the keyComparator to be used for all comparisons\n         List<T> namesList = namesList();\n         List<T> otherNamesList = h2.namesList();\n-        if (!CollectionUtils.equals(namesList, otherNamesList, keyComparator)) {\n+        if (!equals(namesList, otherNamesList, keyComparator)) {\n             return false;\n         }\n \n@@ -1156,7 +1155,7 @@ public class DefaultHeaders<T> implements Headers<T> {\n         Set<T> names = new TreeSet<T>(keyComparator);\n         names.addAll(namesList);\n         for (T name : names) {\n-            if (!CollectionUtils.equals(getAll(name), h2.getAll(name), valueComparator)) {\n+            if (!equals(getAll(name), h2.getAll(name), valueComparator)) {\n                 return false;\n             }\n         }\n@@ -1164,6 +1163,31 @@ public class DefaultHeaders<T> implements Headers<T> {\n         return true;\n     }\n \n+    /**\n+     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)\n+     * @param lhs Left hand side\n+     * @param rhs Right hand side\n+     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)\n+     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.\n+     */\n+    private static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {\n+        final int lhsSize = lhs.size();\n+        if (lhsSize != rhs.size()) {\n+            return false;\n+        }\n+\n+        // Don't use a TreeSet to do the comparison.  We want to force the comparator\n+        // to be used instead of the object's equals()\n+        Collections.sort(lhs, comparator);\n+        Collections.sort(rhs, comparator);\n+        for (int i = 0; i < lhsSize; ++i) {\n+            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n     @Override\n     public int hashCode() {\n         int result = 1;\ndiff --git a/common/src/main/java/io/netty/util/collection/CollectionUtils.java b/common/src/main/java/io/netty/util/collection/CollectionUtils.java\ndeleted file mode 100644\nindex b9e11044c4..0000000000\n--- a/common/src/main/java/io/netty/util/collection/CollectionUtils.java\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-/*\n- * Copyright 2014 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n- * copy of the License at:\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package io.netty.util.collection;\n-\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-\n-/**\n- * Provides utilities for the primitive collection types that are not supplied by the JDK\n- */\n-public final class CollectionUtils {\n-\n-    private CollectionUtils() { }\n-\n-    /**\n-     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)\n-     * @param lhs Left hand side\n-     * @param rhs Right hand side\n-     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)\n-     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.\n-     */\n-    public static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {\n-        final int lhsSize = lhs.size();\n-        if (lhsSize != rhs.size()) {\n-            return false;\n-        }\n-\n-        // Don't use a TreeSet to do the comparison.  We want to force the comparator\n-        // to be used instead of the object's equals()\n-        Collections.sort(lhs, comparator);\n-        Collections.sort(rhs, comparator);\n-        for (int i = 0; i < lhsSize; ++i) {\n-            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-}",
    "Remove values - v24 folder for now .": "diff --git a/v7/appcompat/res/values-v24/styles_base.xml b/v7/appcompat/res/values-v24/styles_base.xml\ndeleted file mode 100644\nindex dca71dd331b..00000000000\n--- a/v7/appcompat/res/values-v24/styles_base.xml\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<!--\n-     Copyright (C) 2016 The Android Open Source Project\n-\n-     Licensed under the Apache License, Version 2.0 (the \"License\");\n-     you may not use this file except in compliance with the License.\n-     You may obtain a copy of the License at\n-\n-          http://www.apache.org/licenses/LICENSE-2.0\n-\n-     Unless required by applicable law or agreed to in writing, software\n-     distributed under the License is distributed on an \"AS IS\" BASIS,\n-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-     See the License for the specific language governing permissions and\n-     limitations under the License.\n--->\n-\n-<resources>\n-\n-    <style name=\"Base.Widget.AppCompat.SeekBar.Discrete\" parent=\"android:Widget.Material.SeekBar.Discrete\" />\n-\n-</resources>",
    "Reset output key after executing a caching rule .": "diff --git a/src/com/facebook/buck/rules/AbstractBuildRule.java b/src/com/facebook/buck/rules/AbstractBuildRule.java\nindex e28630e6f7..a5f0a55fec 100644\n--- a/src/com/facebook/buck/rules/AbstractBuildRule.java\n+++ b/src/com/facebook/buck/rules/AbstractBuildRule.java\n@@ -174,6 +174,10 @@ abstract class AbstractBuildRule implements BuildRule {\n     return outputKey;\n   }\n \n+  protected void resetOutputKey() {\n+    outputKey = null;\n+  }\n+\n   /**\n    * getRuleKey() calls the most derived implementation of this method to lazily construct a\n    * RuleKey. Every subclass that extends the rule state in a way that matters to idempotency must\ndiff --git a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java\nindex 9595ecb89e..f3533df56b 100644\n--- a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java\n+++ b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java\n@@ -340,6 +340,8 @@ abstract class AbstractCachingBuildRule extends AbstractBuildRule implements Bui\n         for (Command command : commands) {\n           commandRunner.runCommand(command);\n         }\n+        // Drop our cached output key, since it probably changed.\n+        resetOutputKey();\n \n         // Write the success file.\n         buildRule.writeSuccessFile();",
    "Allow admins to bypass the playerlimit [ server ] ( <issue_id> )": "diff --git a/core/src/mindustry/core/NetServer.java b/core/src/mindustry/core/NetServer.java\nindex 818fc0fa5..5734ee788 100644\n--- a/core/src/mindustry/core/NetServer.java\n+++ b/core/src/mindustry/core/NetServer.java\n@@ -131,7 +131,7 @@ public class NetServer implements ApplicationListener{\n                 return;\n             }\n \n-            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit()){\n+            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit() && !netServer.admins.isAdmin(uuid, packet.usid)){\n                 con.kick(KickReason.playerLimit);\n                 return;\n      ",
    "move standard getDisplayString impl to GenericUDF ( Alexander Pivovarov via Jason Dere ) .": "diff --git a/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java b/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java\nindex 1a541471ec..76b1fa57b0 100644\n--- a/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java\n+++ b/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java\n@@ -29,7 +29,6 @@\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.ql.udf.UDFType;\n import org.apache.hadoop.hive.ql.udf.generic.GenericUDF;\n-import org.apache.hadoop.hive.ql.udf.generic.GenericUDFUtils;\n import org.apache.hadoop.hive.serde.serdeConstants;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n@@ -159,17 +158,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"dboutput(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"dboutput\", children, \",\");\n   }\n \n }\ndiff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java\nindex 4080c9f38d..c9763b64ac 100644\n--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java\n+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java\n@@ -76,6 +76,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 1);\n-    return \"evaluate_npe(\" + children[0] + \")\";\n+    return getStandardDisplayString(\"evaluate_npe\", children);\n   }\n }\ndiff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java\nindex bf6c7c2325..68cd57a1ee 100644\n--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java\n+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java\n@@ -54,6 +54,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 1);\n-    return \"TestGetJavaBoolean(\" + children[0] + \")\";\n+    return getStandardDisplayString(\"TestGetJavaBoolean\", children);\n   }\n }\ndiff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java\nindex 914cebf4c4..9de5ee7f6a 100644\n--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java\n+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java\n@@ -50,6 +50,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 1);\n-    return \"GenericUDFTestGetJavaString(\" + children[0] + \")\";\n+    return getStandardDisplayString(\"GenericUDFTestGetJavaString\", children);\n   }\n }\ndiff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java\nindex 0ab8d0b068..22a16eaccf 100644\n--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java\n+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java\n@@ -119,7 +119,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 3);\n-    return \"translate(\" + children[0] + \",\" + children[1] + \",\" + children[2]\n-        + \")\";\n+    return getStandardDisplayString(\"translate\", children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java\nindex 58ea3bac80..de7ebf74fc 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java\n@@ -141,16 +141,6 @@ protected List<LongWritable> bitmapToWordArray(EWAHCompressedBitmap bitmap) {\n   \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(name);\n-    sb.append(\"(\");\n-    for (int i = 0; i < children.length; i++) {\n-      sb.append(children[i]);\n-      if (i + 1 != children.length) {\n-        sb.append(\",\");\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(name, children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java\nindex 8d731965b2..1e044b4dcd 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java\n@@ -101,16 +101,7 @@ Method findMethod(Class clazz, String name, Class<?> retType, boolean memberOnly\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(functionName()).append('(');\n-    for (int i = 0; i < children.length; i++) {\n-      if (i > 0) {\n-        sb.append(',');\n-      }\n-      sb.append(children[i]);\n-    }\n-    sb.append(')');\n-    return sb.toString();\n+    return getStandardDisplayString(functionName(), children, \",\");\n   }\n \n   protected abstract String functionName();\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java\nindex e3fb55872c..8a0f573648 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java\n@@ -210,4 +210,23 @@ public void copyToNewInstance(Object newInstance) throws UDFArgumentException {\n           + \" and \" + newInstance.getClass().getName());\n     }\n   }\n+\n+  protected String getStandardDisplayString(String name, String[] children) {\n+    return getStandardDisplayString(name, children, \", \");\n+  }\n+\n+  protected String getStandardDisplayString(String name, String[] children, String delim) {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(name);\n+    sb.append(\"(\");\n+    if (children.length > 0) {\n+      sb.append(children[0]);\n+      for (int i = 1; i < children.length; i++) {\n+        sb.append(delim);\n+        sb.append(children[i]);\n+      }\n+    }\n+    sb.append(\")\");\n+    return sb.toString();\n+  }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java\nindex d655683715..1fdd41cef7 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java\n@@ -150,17 +150,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"abs(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"abs\", children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java\nindex c746a143e1..c5968835a7 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java\n@@ -156,17 +156,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"add_months(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"add_months\", children);\n   }\n \n   protected Calendar addMonth(Date d, int numMonths) {\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java\nindex 44eb44ce77..55a47fb920 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java\n@@ -80,15 +80,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"array(\");\n-    for (int i = 0; i < children.length; i++) {\n-      sb.append(children[i]);\n-      if (i + 1 != children.length) {\n-        sb.append(\",\");\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"array\", children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java\nindex e5999d6818..b952205834 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java\n@@ -75,15 +75,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n  @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"assert_true(\");\n-    for (int i = 0; i < children.length; ++i) {\n-      sb.append(children[i]);\n-      if (i != children.length - 1) {\n-        sb.append(\", \");\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"assert_true\", children);\n   }  \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java\nindex 39875fcca4..1daf57e9c1 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java\n@@ -22,7 +22,6 @@\n import java.util.List;\n \n import org.apache.hadoop.hive.common.type.HiveDecimal;\n-import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.ql.exec.Description;\n import org.apache.hadoop.hive.ql.exec.FunctionRegistry;\n import org.apache.hadoop.hive.ql.exec.NoMatchingMethodException;\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java\nindex c86a9bd149..3904ca4127 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java\n@@ -18,16 +18,15 @@\n \n package org.apache.hadoop.hive.ql.udf.generic;\n \n-import org.apache.commons.lang.StringUtils;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentException;\n import org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;\n import org.apache.hadoop.hive.ql.metadata.HiveException;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;\n-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;\n+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;\n import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;\n+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;\n import org.apache.hadoop.io.IntWritable;\n import org.apache.hadoop.io.Text;\n \n@@ -85,7 +84,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    return udfName + \"(\" + StringUtils.join(children, \", \") + \")\";\n+    return getStandardDisplayString(udfName, children);\n   }\n \n   protected abstract void performOp(byte[] data, byte[] txt, byte[] padTxt, int len, Text str,\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java\nindex b12f856756..cafdd3ea12 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java\n@@ -78,7 +78,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    return udfName + \"(\" + StringUtils.join(children, \", \") + \")\";\n+    return getStandardDisplayString(udfName, children);\n   }\n \n   protected abstract String performOp(String val);\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java\nindex 03e5b70a51..8890e69163 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java\n@@ -69,17 +69,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"COALESCE(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"COALESCE\", children, \",\");\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java\nindex fac13ba02f..62869844de 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java\n@@ -205,17 +205,7 @@ public String stringEvaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"concat(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"concat\", children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java\nindex 8763942528..606cb22b35 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java\n@@ -142,12 +142,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length >= 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"concat_ws(\");\n-    for (int i = 0; i < children.length - 1; i++) {\n-      sb.append(children[i]).append(\", \");\n-    }\n-    sb.append(children[children.length - 1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"concat_ws\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java\nindex 9ee9480191..86a0714517 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java\n@@ -131,17 +131,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"to_date(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"to_date\", children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java\nindex 00738120f0..92a72bf69f 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java\n@@ -196,16 +196,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"date_add(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"date_add\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java\nindex 1ecd835569..403cf11e69 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java\n@@ -96,17 +96,7 @@ public IntWritable evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"datediff(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"datediff\", children);\n   }\n \n   private Date convertToDate(PrimitiveCategory inputType, Converter converter, DeferredObject argument)\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java\nindex 290a5bc85a..db0f4cdb79 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java\n@@ -196,16 +196,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"date_sub(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"date_sub\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java\nindex 2f4be491b0..9858b4f41f 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java\n@@ -113,10 +113,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"decode(\");\n-    sb.append(children[0]).append(\",\");\n-    sb.append(children[1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"decode\", children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java\nindex 4a14a65c67..60e0567e4a 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java\n@@ -95,15 +95,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"EWAH_BITMAP_EMPTY(\");\n-    for (int i = 0; i < children.length; i++) {\n-      sb.append(children[i]);\n-      if (i + 1 != children.length) {\n-        sb.append(\",\");\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"EWAH_BITMAP_EMPTY\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java\nindex 85ba993480..2dc6ffe390 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java\n@@ -92,12 +92,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length >= 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"elt(\");\n-    for (int i = 0; i < children.length - 1; i++) {\n-      sb.append(children[i]).append(\", \");\n-    }\n-    sb.append(children[children.length - 1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"elt\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java\nindex e254e6798f..64f8a14f89 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java\n@@ -113,10 +113,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"encode(\");\n-    sb.append(children[0]).append(\",\");\n-    sb.append(children[1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"encode\", children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java\nindex d7e65fa662..0552be7cdc 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java\n@@ -90,12 +90,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length >= 2);\n-\n-    final StringBuilder sb = new StringBuilder();\n-    sb.append(\"field(\");\n-    sb.append(StringUtils.join(children, \", \"));\n-    sb.append(\")\");\n-\n-    return sb.toString();\n+    return getStandardDisplayString(\"field\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java\nindex 894b649952..754648dcb8 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java\n@@ -128,7 +128,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 1);\n-    return opDisplayName + \"(\" + children[0] + \")\";\n+    return getStandardDisplayString(opDisplayName, children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java\nindex 3586b8d3ae..ce0c9d5f89 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java\n@@ -220,12 +220,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"format_number(\");\n-    for (int i = 0; i < children.length - 1; i++) {\n-      sb.append(children[i]).append(\", \");\n-    }\n-    sb.append(children[children.length - 1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"format_number\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java\nindex 5d6925b789..e919345bca 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java\n@@ -94,17 +94,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(getFuncName()).append(\"(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(getFuncName(), children, \",\");\n   }\n \n   protected String getFuncName() {\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java\nindex 3e04951aab..474f404652 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java\n@@ -58,7 +58,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    return \"hash(\" + StringUtils.join(children, ',') + \")\";\n+    return getStandardDisplayString(\"hash\", children, \",\");\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java\nindex 7009026a66..568fd465b8 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java\n@@ -139,11 +139,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 3);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"if(\");\n-    sb.append(children[0]).append(\", \");\n-    sb.append(children[1]).append(\", \");\n-    sb.append(children[2]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"if\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java\nindex 5163cefd36..aad4f18437 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java\n@@ -165,6 +165,6 @@ public void copyToNewInstance(Object newInstance) throws UDFArgumentException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    return \"in_file(\" + children[0] + \", \" + children[1] + \")\";\n+    return getStandardDisplayString(\"in_file\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java\nindex 067f3d1ed4..406fcd608a 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java\n@@ -108,16 +108,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"initcap(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"initcap\", children);\n   }\n }\n\\ No newline at end of file\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java\nindex db5b8c9449..0a13ac928e 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java\n@@ -93,6 +93,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    return \"instr(\" + children[0] + children[1] + \")\";\n+    return getStandardDisplayString(\"instr\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java\nindex c5669a1571..3a43c571ae 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java\n@@ -133,17 +133,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"last_day(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"last_day\", children);\n   }\n \n   protected Calendar lastDay(Date d) {\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java\nindex ec49f05a65..4740b81565 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java\n@@ -165,14 +165,7 @@ public void setAmt(int amt) {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(_getFnName());\n-    sb.append(\"(\");\n-    sb.append(children[0]);\n-    sb.append(\", \");\n-    sb.append(children[1]);\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(_getFnName(), children);\n   }\n \n   protected abstract String _getFnName();\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java\nindex aaf6dce7f0..094f280fe2 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java\n@@ -109,7 +109,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2 || children.length == 3);\n-    return \"locate(\" + children[0] + children[1]\n-        + (children.length == 3 ? children[2] : \"\") + \")\";\n+    return getStandardDisplayString(\"locate\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java\nindex aa04b38ca6..659d4797e3 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java\n@@ -105,17 +105,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"lower(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\",\");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"lower\", children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java\nindex 9400962a01..3f505f2f55 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java\n@@ -128,17 +128,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(macroName);\n-      sb.append(\"(\");\n-      for (int i = 0; i < children.length; i++) {\n-        sb.append(children[i]);\n-        if (i + 1 < children.length) {\n-          sb.append(\", \");\n-        }\n-      }\n-      sb.append(\")\");\n-      return sb.toString();\n+      return getStandardDisplayString(macroName, children);\n   }\n \n   public void setMacroName(String macroName) {\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java\nindex 1d4bceff27..d8afd74c74 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java\n@@ -68,6 +68,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert children.length == 1;\n-    return \"map_keys(\" + children[0] + \")\";\n+    return getStandardDisplayString(\"map_keys\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java\nindex bd08a21e10..096ceac612 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java\n@@ -68,6 +68,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert children.length == 1;\n-    return \"map_values(\" + children[0] + \")\";\n+    return getStandardDisplayString(\"map_values\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java\nindex 7b18d8234e..d58ecb4b05 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java\n@@ -75,15 +75,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"named_struct(\");\n-    for (int i = 0; i < children.length; i++) {\n-      if (i > 0) {\n-        sb.append(',');\n-      }\n-      sb.append(children[i]);\n-    }\n-    sb.append(')');\n-    return sb.toString();\n+    return getStandardDisplayString(\"named_struct\", children, \",\");\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java\nindex c1fe4aa471..0d4fea1388 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java\n@@ -41,7 +41,6 @@\n @VectorizedExpressions({FuncPowerLongToDouble.class, FuncPowerDoubleToDouble.class})\n public class GenericUDFPower extends GenericUDF {\n   private final String opName;\n-  private final String opDisplayName;\n \n   private transient PrimitiveObjectInspector baseOI;\n   private transient PrimitiveObjectInspector powerOI;\n@@ -54,7 +53,6 @@ public class GenericUDFPower extends GenericUDF {\n \n   public GenericUDFPower() {\n     opName = getClass().getSimpleName();\n-    opDisplayName = \"power\";\n     resultOI = PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;\n   }\n \n@@ -103,7 +101,7 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 2);\n-    return opDisplayName + \"(\" + children[0] + \", \" + children[1] + \")\";\n+    return getStandardDisplayString(\"power\", children);\n   }\n \n   @Override\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java\nindex e9c0cc4e9c..cb6dd627f8 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java\n@@ -141,12 +141,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length >= 2);\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"printf(\");\n-    for (int i = 0; i < children.length - 1; i++) {\n-      sb.append(children[i]).append(\", \");\n-    }\n-    sb.append(children[children.length - 1]).append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"printf\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java\nindex fecd6c50bb..963e4a87c4 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java\n@@ -263,17 +263,7 @@ private static DoubleWritable round(DoubleWritable input, int scale) {\n \n   @Override\n   public String getDisplayString(String[] children) {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"round(\");\n-    if (children.length > 0) {\n-      sb.append(children[0]);\n-      for (int i = 1; i < children.length; i++) {\n-        sb.append(\", \");\n-        sb.append(children[i]);\n-      }\n-    }\n-    sb.append(\")\");\n-    return sb.toString();\n+    return getStandardDisplayString(\"round\", children);\n   }\n \n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java\nindex c24c0ec194..3c5a473d39 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java\n@@ -128,14 +128,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length >= 1 && children.length <= 3);\n-    String display = \"sentences(\" + children[0];\n-    if(children.length > 1) {\n-      display += \", \" + children[1];\n-      if(children.length > 2) {\n-        display += \", \" + children[2];\n-      }\n-    }\n-    display += \")\";\n-    return display;\n+    return getStandardDisplayString(\"sentences\", children);\n   }\n }\ndiff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java\nindex c31ab54b29..45434297f0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java\n@@ -79,6 +79,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {\n   @Override\n   public String getDisplayString(String[] children) {\n     assert (children.length == 1);\n-    return \"size(\" + children[0] + \")\";\n+    return",
    "Make ImageClassLoader . forName ( ) more resilient .": "diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java\nindex 00bf8165223..a3c6de93638 100644\n--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java\n+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java\n@@ -363,7 +363,7 @@ public final class ImageClassLoader {\n                 }\n             }\n             return forName(name);\n-        } catch (ClassNotFoundException ex) {\n+        } catch (ClassNotFoundException | NoClassDefFoundError ex) {\n             if (failIfClassMissing) {\n                 throw",
    "Show full condition source on condition hover": "diff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx\nindex 8808dd08bf3..addc6f9cb73 100644\n--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx\n+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx\n@@ -57,7 +57,6 @@ class WhileNode extends React.Component {\n                     expression={expression}\n                     editorOptions={editorOptions}\n                     model={model}\n-                    body={model.body}\n                 />\n             </g>\n         );\ndiff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx\nindex 644d49c33c2..d6dbdb9eda8 100644\n--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx\n+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx\n@@ -170,8 +170,6 @@ class WhileStatementDecorator extends React.Component {\n         const pointX = bBox.getRight() - breakpointHalf;\n         const { model: { viewState } } = this.props;\n         const statementBBox = viewState.components['statement-box'];\n-        const { designer } = this.context;\n-        const headerHeight = viewState.components['block-header'].h;\n         const pointY = statementBBox.y - breakpointHalf;\n         return (\n             <Breakpoint\n@@ -348,7 +346,7 @@ class WhileStatementDecorator extends React.Component {\n                     width={statementBBox.w}\n                     height={statementBBox.h}\n                     baseComponent='rect'\n-                    dropTarget={this.props.body}\n+                    dropTarget={this.props.model.body}\n                     enableDragBg\n                     enableCenterOverlayLine={!this.props.disableDropzoneMiddleLineOverlay}\n                 />\n@@ -361,7 +359,7 @@ class WhileStatementDecorator extends React.Component {\n                         onClick={this.openExpressionEditor}\n                         className='invisible-rect'\n                     />\n-                    {expression && <title> {expression.text} </title>}\n+                    {expression && <title> {this.props.editorOptions.model.getSource(true)} </title>}\n                 </g>\n                 { isBreakpoint && this.renderBreakpointIndicator() }\n                 {this.props.children}\n@@ -383,7 +381,6 @@ WhileStatementDecorator.defaultProps = {\n     draggable: null,\n     children: null,\n     undeletable: false,\n-    editorOptions: null,\n     parameterEditorOptions: null,\n     utilities: null,\n     parameterBbox: null,\n@@ -394,17 +391,14 @@ WhileStatementDecorator.defaultProps = {\n         jump: false,\n     },\n     disableDropzoneMiddleLineOverlay: false,\n+    isDebugHit: false,\n };\n \n WhileStatementDecorator.propTypes = {\n-    draggable: PropTypes.func,\n     title: PropTypes.string.isRequired,\n     model: PropTypes.instanceOf(Node).isRequired,\n     children: PropTypes.arrayOf(React.PropTypes.node),\n-    utilities: PropTypes.element,\n",
    "Set jdiff version .": "diff --git a/JodaTime/project.properties b/JodaTime/project.properties\nindex f8b4e692..cca8e169 100644\n--- a/JodaTime/project.properties\n+++ b/JodaTime/project.properties\n@@ -12,4 +12,4 @@ maven.javadoc.public=true\n maven.javadoc.package=false\n maven.javadoc.private=false\n \n-maven.jdiff.old.tag=v0_9_900\n+maven.jdiff.old.tag=v1_0_000",
    "Added untitledAutoSave , autoSave to preferences": "diff --git a/pdex/src/processing/mode/experimental/DebugEditor.java b/pdex/src/processing/mode/experimental/DebugEditor.java\nindex 7ab11b682..51e7341d1 100755\n--- a/pdex/src/processing/mode/experimental/DebugEditor.java\n+++ b/pdex/src/processing/mode/experimental/DebugEditor.java\n@@ -1079,8 +1079,11 @@ public class DebugEditor extends JavaEditor implements ActionListener {\n     @Override\n     public void prepareRun() {\n         super.prepareRun();\n+        if (!ExperimentalMode.autoSaveEnabled)\n+          return;\n+        \n         try {\n-            if (sketch.isUntitled()) {\n+            if (sketch.isUntitled() && ExperimentalMode.untitledAutoSaveEnabled) {\n                 if (handleSave(true))\n                     statusTimedNotice(\"Saved. Running...\", 5);\n                 else\n@@ -1118,20 +1121,6 @@ public class DebugEditor extends JavaEditor implements ActionListener {\n      * @param secs\n      */\n     public void statusTimedNotice(final String msg, final int secs) {\n-//        EventQueue.invokeLater(new Runnable() {\n-//            \n-//            @Override\n-//            public void run() {\n-//                statusNotice(msg);\n-//                try {\n-//                    Thread.sleep(secs * 1000);\n-//                } catch (InterruptedException e) {\n-//                    e.printStackTrace();\n-//                }\n-//                statusEmpty();\n-//                \n-//            }\n-//        });\n         SwingWorker s = new SwingWorker<Void, Void>() {\n \n             @Override\ndiff --git a/pdex/src/processing/mode/experimental/ExperimentalMode.java b/pdex/src/processing/mode/experimental/ExperimentalMode.java\nindex 5b04896d3..b90b5a519 100755\n--- a/pdex/src/processing/mode/experimental/ExperimentalMode.java\n+++ b/pdex/src/processing/mode/experimental/ExperimentalMode.java\n@@ -127,13 +127,15 @@ public class ExperimentalMode extends JavaMode {\n   }\n   \n   volatile public static boolean errorCheckEnabled = true, warningsEnabled = true,\n-      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false;\n+      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false,\n+      untitledAutoSaveEnabled = false, autoSaveEnabled = true;\n   public static int autoSaveInterval = 3; //in minutes\n \n   public static final String prefErrorCheck = \"pdex.errorCheckEnabled\",\n       prefWarnings = \"pdex.warningsEnabled\",\n       prefCodeCompletionEnabled = \"pdex.ccEnabled\",\n-      prefDebugOP = \"pdex.dbgOutput\", prefErrorLogs = \"pdex.writeErrorLogs\", prefAutoSaveInterval = \"pdex.autoSaveInterval\";\n+      prefDebugOP = \"pdex.dbgOutput\", prefErrorLogs = \"pdex.writeErrorLogs\", prefAutoSaveInterval = \"pdex.autoSaveInterval\",\n+      prefUntitledAutoSave = \"pdex.autoSave.untitledAutoSaveEnabled\", prefAutoSave = \"pdex.autoSaveEnabled\";\n   \n   public void loadPreferences(){\n     log(\"Load PDEX prefs\");\n@@ -144,6 +146,8 @@ public class ExperimentalMode extends JavaMode {\n     DEBUG = Preferences.getBoolean(prefDebugOP);\n     errorLogsEnabled = Preferences.getBoolean(prefErrorLogs);\n     autoSaveInterval = Preferences.getInteger(prefAutoSaveInterval);\n+    untitledAutoSaveEnabled = Preferences.getBoolean(prefUntitledAutoSave);\n+    autoSaveEnabled = Preferences.getBoolean(prefAutoSave);\n   }\n   \n   public void savePreferences(){\n@@ -154,6 +158,8 @@ public class ExperimentalMode extends JavaMode {\n     Preferences.setBoolean(prefDebugOP, DEBUG);\n     Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);\n     Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);\n+    Preferences.setBoolean(prefUntitledAutoSave,untitledAutoSaveEnabled);\n+    Preferences.setBoolean(prefAutoSave,autoSaveEnabled);\n   }\n   \n   public void ensurePrefsExist(){\n@@ -169,6 +175,10 @@ public class ExperimentalMode extends JavaMode {\n       Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);\n     if(Preferences.get(prefAutoSaveInterval) == null) \n       Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);\n+    if(Preferences.get(prefUntitledAutoSave) == null) \n+   ",
    "Added tag jdk8u101 - b12 for changeset 43db847133ec": "diff --git a/.hgtags-top-repo b/.hgtags-top-repo\nindex e9ce41d71d..bc166aa988 100644\n--- a/.hgtags-top-repo\n+++ b/.hgtags-top-repo\n@@ -603,3 +603,4 @@ fe901996777f50198be2c785cd7e3b8198692bbe jdk8u101-b04\n 0b1358bc93ca7a30bab6cf2d7da09bb5a11f5a93 jdk8u101-b09\n 1db5081d8ee77caffa0f534496af5fb908e9b61f jdk8u101-b10\n 81cdb3e279f8f245f740e7d3e79a1629b6599325 jdk8u101-b11\n+d6f920823feb4d44e67cec383d8c6e4a5dba9d76 jdk8u101-b12",
    "Add integration test to ensure - XepDisableAllChecks .": "diff --git a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java\nindex a62375ffd6..085e0f04f6 100644\n--- a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java\n+++ b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java\n@@ -637,6 +637,60 @@ public class ErrorProneCompilerIntegrationTest {\n     }\n   }\n \n+  @Test\n+  public void pluginWithFlag() throws Exception {\n+\n+    Path base = tmpFolder.newFolder().toPath();\n+    Path source = base.resolve(\"test/Test.java\");\n+    Files.createDirectories(source.getParent());\n+    Files.write(\n+        source,\n+        Arrays.asList(\n+            \"package test;\", //\n+            \"public class Test {\",\n+            \"  int f() { return 42; }\",\n+            \"}\"),\n+        UTF_8);\n+\n+    Path jar = base.resolve(\"libproc.jar\");\n+    try (JarOutputStream jos = new JarOutputStream(Files.newOutputStream(jar))) {\n+      jos.putNextEntry(new JarEntry(\"META-INF/services/\" + BugChecker.class.getName()));\n+      jos.write((CPSChecker.class.getName() + \"\\n\").getBytes(UTF_8));\n+      String classFile = CPSChecker.class.getName().replace('.', '/') + \".class\";\n+      jos.putNextEntry(new JarEntry(classFile));\n+      ByteStreams.copy(getClass().getClassLoader().getResourceAsStream(classFile), jos);\n+    }\n+\n+    // Plugin jar is on classpath, disabled.\n+    {\n+      List<String> args =\n+          ImmutableList.of(\n+              source.toAbsolutePath().toString(),\n+              \"-processorpath\",\n+              jar.toAbsolutePath().toString(),\n+              \"-XepDisableAllChecks\");\n+      StringWriter out = new StringWriter();\n+      Result result =\n+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));\n+      assertThat(result).isEqualTo(Result.OK);\n+    }\n+    // Plugin is disabled by -XepDisableAllChecks and re-enabled with -Xep:CPSChecker:ERROR\n+    {\n+      List<String> args =\n+          ImmutableList.of(\n+              source.toAbsolutePath().toString(),\n+              \"-processorpath\",\n+              jar.toAbsolutePath().toString(),\n+              \"-XepDisableAllChecks\",\n+              \"-Xep:CPSChecker:ERROR\");\n+      StringWriter out = new StringWriter();\n+      Result result =\n+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));\n+      assertThat(out.toString()).contains(\"Using 'return' is considered harmful\");\n+      assertThat(result).isEqualTo(Result.ERROR);\n+    }\n+  }\n+\n   @Test\n   public void paramsFiles() throws IOException {\n     Path dir = tmpFolder.newFolder(\"tmp\").toPath();",
    "Add more rest client tests ( <issue_id> ) ( <issue_id> )": "diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java\nindex 10e75d88307..92ed0ea8307 100644\n--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java\n+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java\n@@ -21,6 +21,12 @@ package org.elasticsearch.client;\n \n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.client.methods.HttpPut;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;\n+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;\n+import org.elasticsearch.action.bulk.BulkRequest;\n+import org.elasticsearch.action.bulk.BulkResponse;\n+import org.elasticsearch.action.index.IndexRequest;\n+import org.elasticsearch.action.support.WriteRequest;\n import org.elasticsearch.client.eql.EqlSearchRequest;\n import org.elasticsearch.client.eql.EqlSearchResponse;\n import org.elasticsearch.client.eql.EqlStatsRequest;\n@@ -28,51 +34,132 @@ import org.elasticsearch.client.eql.EqlStatsResponse;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.common.time.DateUtils;\n import org.elasticsearch.index.IndexSettings;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.search.SearchHit;\n import org.junit.Before;\n \n+import java.io.IOException;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n+import java.util.Map;\n \n+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n+import static org.hamcrest.Matchers.anyOf;\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.greaterThan;\n \n public class EqlIT extends ESRestHighLevelClientTestCase {\n \n+    private static final String INDEX_NAME = \"index\";\n+    private static final int RECORD_COUNT = 40;\n+    private static final int DIVIDER = 4;\n+\n     @Before\n-    public void setupRemoteClusterConfig() throws Exception {\n+    public void setup() throws Exception {\n         setupRemoteClusterConfig(\"local_cluster\");\n+        setupData();\n     }\n \n-    public void testBasicSearch() throws Exception {\n-        Request doc1 = new Request(HttpPut.METHOD_NAME, \"/index/_doc/1\");\n-        doc1.setJsonEntity(\"{\\\"event_subtype_full\\\": \\\"already_running\\\", \" +\n-                \"\\\"event\\\": {\" +\n-                    \"\\\"category\\\": \\\"process\\\"\" +\n-                \"},\" +\n-                \"\\\"event_type_full\\\": \\\"process_event\\\", \" +\n-                \"\\\"opcode\\\": 3,\" +\n-                \"\\\"pid\\\": 0,\" +\n-                \"\\\"process_name\\\": \\\"System Idle Process\\\",\" +\n-                \"\\\"serial_event_id\\\": 1,\" +\n-                \"\\\"subtype\\\": \\\"create\\\",\" +\n-                \"\\\"@timestamp\\\": 116444736000000000,\" +\n-                \"\\\"unique_pid\\\": 1}\");\n-        client().performRequest(doc1);\n-        client().performRequest(new Request(HttpPost.METHOD_NAME, \"/_refresh\"));\n+    private void setupData() throws IOException {\n+        final BulkRequest bulkRequest = new BulkRequest();\n+        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n+        for (int i = 0; i < RECORD_COUNT; i++) {\n+            final IndexRequest indexRequest = new IndexRequest(INDEX_NAME);\n+            indexRequest.source(jsonBuilder()\n+                    .startObject()\n+                    .field(\"event_subtype_full\", \"already_running\")\n+                    .startObject(\"event\")\n+                    .field(\"category\", \"process\")\n+                    .endObject()\n+                    .field(\"event_type\", \"foo\")\n+                    .field(\"event_type_full\", \"process_event\")\n+                    .field(\"opcode\", ((i % DIVIDER) == 0) ? 1 : 0)\n+                    .field(\"pid\", ((i % DIVIDER) == 0) ? 100 : 0)\n+                    .field(\"process_name\", \"System Idle Process\")\n+                    .field(\"serial_event_id\", i + 1)\n+                    .field(\"subtype\", \"create\")\n+                    .field(\"@timestamp\", String.format(Locale.ROOT, \"2018-01-01T00:00:%02dZ\", i))\n+                    .field(\"unique_pid\", ((i % DIVIDER) == 0) ? 101 : 0)\n+                    .endObject());\n+            bulkRequest.add(indexRequest);\n+        }\n+        BulkResponse bulkResponse = highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT);\n+        assertEquals(RestStatus.OK, bulkResponse.status());\n+        assertFalse(bulkResponse.hasFailures());\n \n-        EqlClient eql = highLevelClient().eql();\n-        EqlSearchRequest request = new EqlSearchRequest(\"index\", \"process where true\");\n-        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);\n+        RefreshResponse refreshResponse = highLevelClient().indices().refresh(new RefreshRequest(INDEX_NAME), RequestOptions.DEFAULT);\n+        assertEquals(0, refreshResponse.getFailedShards());\n+    }\n+\n+    private void assertResponse(EqlSearchResponse response, int count) {\n         assertNotNull(response);\n         assertFalse(response.isTimeout());\n         assertNotNull(response.hits());\n         assertNull(response.hits().sequences());\n         assertNull(response.hits().counts());\n         assertNotNull(response.hits().events());\n-        assertThat(response.hits().events().size(), equalTo(1));\n+        assertThat(response.hits().events().size(), equalTo(count));\n+    }\n+\n+    public void testBasicSearch() throws Exception {\n+        EqlClient eql = highLevelClient().eql();\n+        EqlSearchRequest request = new EqlSearchRequest(\"index\", \"process where true\");\n+        assertResponse(execute(request, eql::search, eql::searchAsync), RECORD_COUNT);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSimpleConditionSearch() throws Exception {\n+        EqlClient eql = highLevelClient().eql();\n+\n+        // test simple conditional\n+        EqlSearchRequest request = new EqlSearchRequest(\"index\", \"foo where pid > 0\");\n+\n+        // test with non-default event.category mapping\n+        request.eventCategoryField(\"event_type\");\n+\n+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);\n+        assertResponse(response, RECORD_COUNT / DIVIDER);\n+\n+        // test the content of the hits\n+        for (SearchHit hit : response.hits().events()) {\n+            final Map<String, Object> source = hit.getSourceAsMap();\n+\n+            final Map<String, Object> event = (Map<String, Object>) source.get(\"event\");\n+            assertThat(event.get(\"category\"), equalTo(\"process\"));\n+            assertThat(source.get(\"event_type\"), equalTo(\"foo\"));\n+            assertThat(source.get(\"event_type_full\"), equalTo(\"process_event\"));\n+            assertThat(source.get(\"opcode\"), equalTo(1));\n+            assertThat(source.get(\"pid\"), equalTo(100));\n+            assertThat(source.get(\"process_name\"), equalTo(\"System Idle Process\"));\n+            assertThat((int) source.get(\"serial_event_id\"), greaterThan(0));\n+            assertThat(source.get(\"unique_pid\"), equalTo(101));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEqualsInFilterConditionSearch() throws Exception {\n+        EqlClient eql = highLevelClient().eql();\n+\n+        EqlSearchRequest request = new EqlSearchRequest(\"index\",\n+                \"process where event_type_full = \\\"process_event\\\" and serial_event_id in (1,3,5)\");\n+\n+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);\n+        assertResponse(response, 3);\n+\n+        // test the content of the hits\n+        for (SearchHit hit : response.hits().events()) {\n+            final Map<String, Object> source = hit.getSourceAsMap();\n+\n+            final Map<String, Object> event = (Map<String, Object>) source.get(\"event\");\n+            assertThat(event.get(\"category\"), equalTo(\"process\"));\n+            assertThat(source.get(\"serial_event_id\"), anyOf(equalTo(1), equalTo(3), equalTo(5)));\n+        }\n     }\n \n     public void testLargeMapping() throws Exception {\n-        Request doc1 = new Request(HttpPut.METHOD_NAME, \"/index/_doc/1\");\n+        final String index = \"large_mapping_index\";\n+\n+        Request doc1 = new Request(HttpPut.METHOD_NAME, \"/\" + index + \"/_doc/1\");\n         // use more exact fields (dates) than the default to verify that retrieval works and requesting doc values\n         // would fail\n         int PASS_DEFAULT_DOC_VALUES = IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.get(Settings.EMPTY) + 50;\n@@ -94,7 +181,7 @@ public class EqlIT extends ESRestHighLevelClientTestCase {\n \n \n         EqlClient eql = highLevelClient().eql();\n-        EqlSearchRequest request = new EqlSearchRequest(\"index\", \"process where true\");\n+        EqlSearchRequest request = new EqlSearchRequest(index, \"process where true\");\n         EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);\n         assertNotNull(response);\n         assertNotNull(response.hits());",
    "Added svm - js - tck into gates . . PullRequest : graal / 5781": "diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java\nindex adbd7d0b8fd..218756cc47e 100644\n--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java\n+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java\n@@ -122,6 +122,7 @@ final class HostFunction implements TruffleObject {\n     }\n \n     @ExportMessage\n+    @TruffleBoundary\n     static int identityHashCode(HostFunction receiver) {\n         return System.identityHashCode(receiver.method);\n     }\ndiff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java\nindex 1102db658c3..b15a6655704 100644\n--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java\n+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java\n@@ -1156,6 +1156,7 @@ final class HostObject implements TruffleObject {\n     }\n \n     @ExportMessage\n+    @TruffleBoundary\n     static int identityHashCode(HostObject receiver) {\n         return System.identityHashCode(receiver.obj);\n     }\ndiff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java\nindex 517f59bf3f0..a8f2d29004c 100644\n--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java\n+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java\n@@ -841,6 +841,7 @@ final class PolyglotProxy implements TruffleObject {\n     }\n \n     @ExportMessage\n+    @TruffleBoundary\n     static int identityHashCode(PolyglotProxy receiver) {\n         return System.identityHashCode(receiver.proxy);\n     }\ndiff --git a/vm/mx.vm/mx_vm_gate.py b/vm/mx.vm/mx_vm_gate.py\nindex 78f3ea5ad40..f2bb90974eb 100644\n--- a/vm/mx.vm/mx_vm_gate.py\n+++ b/vm/mx.vm/mx_vm_gate.py\n@@ -216,6 +216,7 @@ def _svm_truffle_tck(native_image, svm_suite, language_suite, language_id):\n             '-cp',\n             cp,\n             '--no-server',\n+            '-H:+TruffleCheckBlackListedMethods',\n             '-H:-FoldSecurityManagerGetter',\n             '-H:TruffleTCKPermissionsReportFile={}'.format(report_file),\n             '-H:Path={}'.format(svmbuild),\ndiff --git a/vm/mx.vm/suite.py b/vm/mx.vm/suite.py\nindex e82e3214fff..b3ed96d1140 100644\n--- a/vm/mx.vm/suite.py\n+++ b/vm/mx.vm/suite.py\n@@ -39,7 +39,7 @@ suite = {\n                 \"name\": \"graal-nodejs\",\n                 \"subdir\": True,\n                 \"dynamic\": True,\n-                \"version\": \"d32479e630ef43d44a9ad7d23edfc4cd630d5aa1\",\n+                \"version\": \"5f456692c853c6cc851614496e6d77a3a60a5eba\",\n                 \"urls\" : [\n                     {\"url\" : \"https://github.com/graalvm/graaljs.git\", \"kind\" : \"git\"},\n                     {\"url\": \"https://curio.ssw.jku.at/nexus/content/repositories/snapshots\", \"kind\": \"binary\"},\n@@ -49,7 +49,7 @@ suite = {\n                 \"name\": \"graal-js\",\n                 \"subdir\": True,\n                 \"dynamic\": True,\n-                \"version\": \"d32479e630ef43d44a9ad7d23edfc4cd630d5aa1\",\n+                \"version\": \"5f456692c853c6cc851614496e6d77a3a60a5eba\",\n                 \"urls\": [\n                     {\"url\": \"https://github.com/graalvm/graaljs.git\", \"kind\" : \"git\"},\n                     {\"url\": \"https://curio.ssw.jku.at/nexus/content/repositories/snapshots\", \"kind\": \"binary\"},",
    "revise OrderServiceImpl .": "diff --git a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java\nindex 355b839c43e..c81cdc3f618 100755\n--- a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java\n+++ b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java\n@@ -17,12 +17,17 @@\n \n package org.apache.shardingsphere.example.core.jdbc.service;\n \n-import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;\n import org.apache.shardingsphere.example.core.api.entity.Order;\n import org.apache.shardingsphere.example.core.api.entity.OrderItem;\n+import org.apache.shardingsphere.example.core.api.repository.AddressRepository;\n+import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;\n import org.apache.shardingsphere.example.core.api.repository.OrderRepository;\n import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;\n+import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n+import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n \n+import javax.sql.DataSource;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -33,9 +38,18 @@ public final class OrderServiceImpl implements ExampleService {\n     \n     private OrderItemRepository orderItemRepository;\n     \n-    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository) {\n+    private AddressRepository addressRepository;\n+    \n+    public OrderServiceImpl(final DataSource dataSource) {\n+        this.orderRepository = new OrderRepositoryImpl(dataSource);\n+        this.orderItemRepository = new OrderItemRepositoryImpl(dataSource);\n+        this.addressRepository = new AddressRepositoryImpl(dataSource);\n+    }\n+    \n+    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository, final AddressRepository addressRepository) {\n         this.orderRepository = orderRepository;\n         this.orderItemRepository = orderItemRepository;\n+        this.addressRepository = addressRepository;\n     }\n     \n     @Override\ndiff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java\nindex 1f0b57cdc4b..f045147ebde 100755\n--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java\n+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java\n@@ -17,11 +17,9 @@\n \n package org.apache.shardingsphere.example.orchestration.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n-import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.example.config.ExampleConfiguration;\n+import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.RegistryCenterConfigurationUtil;\n import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudEncryptConfiguration;\n import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudMasterSlaveConfiguration;\n@@ -88,7 +86,7 @@ public class JavaConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n     \n     private static void closeDataSource(final DataSource dataSource) throws Exception {\ndiff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java\nindex 94bf1f8a289..c58bb8d60db 100755\n--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java\n+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java\n@@ -17,10 +17,8 @@\n \n package org.apache.shardingsphere.example.orchestration.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.type.RegistryCenterType;\n import org.apache.shardingsphere.example.type.ShardingType;\n import org.apache.shardingsphere.shardingjdbc.jdbc.adapter.AbstractDataSourceAdapter;\n@@ -81,7 +79,7 @@ public class YamlConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n     \n     private static void closeDataSource(final DataSource dataSource) throws Exception {\ndiff --git a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java\nindex 34c15cb0399..aecd9c4c36a 100755\n--- a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java\n+++ b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java\n@@ -17,11 +17,9 @@\n \n package org.apache.shardingsphere.example.hint.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n-import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.api.hint.HintManager;\n+import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlMasterSlaveDataSourceFactory;\n import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;\n \n@@ -64,7 +62,7 @@ public class YamlConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n     \n     private static void processWithHintValue(final DataSource dataSource) throws SQLException {\ndiff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java\nindex c2d115cc156..1aa7e8507c8 100755\n--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java\n+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java\n@@ -17,10 +17,8 @@\n \n package org.apache.shardingsphere.example.sharding.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.DataSourceFactory;\n import org.apache.shardingsphere.example.type.ShardingType;\n \n@@ -47,6 +45,6 @@ public class JavaConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n }\ndiff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java\nindex fec4eb1f59d..201200db737 100755\n--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java\n+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java\n@@ -17,10 +17,11 @@\n \n package org.apache.shardingsphere.example.sharding.raw.jdbc;\n \n+import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n-import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.RangeDataSourceFactory;\n import org.apache.shardingsphere.example.type.ShardingType;\n \n@@ -47,6 +48,6 @@ public class JavaRangeConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource), new AddressRepositoryImpl(dataSource));\n     }\n }\ndiff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java\nindex d3fe064d04b..058cbc2913e 100755\n--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java\n+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java\n@@ -17,10 +17,8 @@\n \n package org.apache.shardingsphere.example.sharding.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlDataSourceFactory;\n import org.apache.shardingsphere.example.type.ShardingType;\n \n@@ -48,6 +46,6 @@ public class YamlConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n }\ndiff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java\nindex 99a748513fa..601d3133d8a 100755\n--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java\n+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java\n@@ -17,10 +17,8 @@\n \n package org.apache.shardingsphere.example.sharding.raw.jdbc;\n \n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;\n-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.core.api.service.ExampleService;\n+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlRangeDataSourceFactory;\n import org.apache.shardingsphere.example.type.ShardingType;\n \n@@ -48,6 +46,6 @@ public class YamlRangeConfigurationExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n }\ndiff --git a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java\nindex 6eef4068543..021710ed403 100755\n--- a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java\n+++ b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java\n@@ -18,10 +18,9 @@\n package org.apache.shardingsphere.example.transaction.xa.raw.jdbc;\n \n import org.apache.shardingsphere.example.core.api.entity.Order;\n-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n+import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n-import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;\n import org.apache.shardingsphere.transaction.core.TransactionType;\n import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;\n@@ -53,7 +52,7 @@ public class YamlConfigurationTransactionExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n     \n     private static void processXATransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {\ndiff --git a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java\nindex 88aadc90fa9..dfc40f07215 100755\n--- a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java\n+++ b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java\n@@ -19,10 +19,10 @@ package org.apache.shardingsphere.example.transaction.base.seata.raw.jdbc;\n \n import org.apache.shardingsphere.example.core.api.entity.Order;\n import org.apache.shardingsphere.example.core.api.entity.OrderItem;\n+import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;\n import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;\n-import org.apache.shardingsphere.example.core.api.service.ExampleService;\n import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;\n import org.apache.shardingsphere.transaction.core.TransactionType;\n import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;\n@@ -59,7 +59,7 @@ public class YamlConfigurationTransactionExample {\n     }\n     \n     private static ExampleService getExampleService(final DataSource dataSource) {\n-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));\n+        return new OrderServiceImpl(dataSource);\n     }\n     \n     private static void processSeataTransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {",
    "update Ant to use Servlet API 3 . 1 . 0": "diff --git a/.gitignore b/.gitignore\nindex 36300faf43b..68aa41a5bd6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -30,7 +30,7 @@ jdepend/report.xml\n lib/derby.jar\n lib/jrcs.jar\n lib/lucene-*\n-lib/servlet-api-*\n+lib/javax.servlet-api-*\n lib/bcel-*\n lib/junit-*\n lib/hamcrest-core-*\ndiff --git a/build.xml b/build.xml\nindex db5fe2cb088..b43cecd3e6d 100644\n--- a/build.xml\n+++ b/build.xml\n@@ -585,7 +585,7 @@ Portions Copyright (c) 2017-2018, Chris Fraire <cfraire@me.com>.\n                 <include name=\"servlet-api-*.jar\"/>\n             </fileset>\n         </delete>\n-        <get src=\"${mvn.repository}/javax/servlet/servlet-api/${servlet-api.version}/${servlet-api.jar}\"\n+        <get src=\"${mvn.repository}/javax/servlet/javax.servlet-api/${servlet-api.version}/${servlet-api.jar}\"\n              dest=\"lib/${servlet-api.jar}\" verbose=\"true\" usetimestamp=\"true\"/>\n     </target>\n \ndiff --git a/nbproject/project.properties b/nbproject/project.properties\nindex 8e4e4c0b4f5..91604127495 100644\n--- a/nbproject/project.properties\n+++ b/nbproject/project.properties\n@@ -74,7 +74,7 @@ dist.jar=${dist.dir}/opengrok.jar\n platform.active=default_platform\n build.test.reposroots=${build.dir}/test/reposroots\n annotation.processing.enabled=true\n-servlet-api.jar=servlet-api-${servlet-api.version}.jar\n+servlet-api.jar=javax.servlet-api-${servlet-api.version}.jar\n main.class=org.opensolaris.opengrok.index.Indexer\n dist.javadoc.dir=${dist.dir}/javadoc\n lucene-suggest.jar=lucene-suggest-${lucene.version}.jar\n@@ -113,7 +113,7 @@ annotation.processing.run.all.processors=true\n excludes=\n application.title=OpenGrok\n jnlp.codebase.type=local\n-servlet-api.version=2.5\n+servlet-api.version=3.1.0\n bcel.version=6.2\n bcel.jar=bcel-${bcel.version}.jar\n file.reference.bcel.jar=lib/${bcel.jar}\ndiff --git a/opengrok-web-nbproject/nbproject/project.properties b/opengrok-web-nbproject/nbproject/project.properties\nindex 0bd37975b13..309c064e672 100644\n--- a/opengrok-web-nbproject/nbproject/project.properties\n+++ b/opengrok-web-nbproject/nbproject/project.properties\n@@ -36,7 +36,7 @@ bcel.version=6.2\n bcel.jar=bcel-${bcel.version}.jar\n file.reference.bcel.jar=../lib/${bcel.jar}\n file.reference.json-simple-1.1.1.jar=../lib/json-simple-1.1.1.jar\n-j2ee.platform.classpath=${j2ee.server.home}/lib/annotations-api.jar:${j2ee.server.home}/lib/catalina-ant.jar:${j2ee.server.home}/lib/catalina-ha.jar:${j2ee.server.home}/lib/catalina-storeconfig.jar:${j2ee.server.home}/lib/catalina-tribes.jar:${j2ee.server.home}/lib/catalina.jar:${j2ee.server.home}/lib/ecj-4.4.2.jar:${j2ee.server.home}/lib/el-api.jar:${j2ee.server.home}/lib/jasper-el.jar:${j2ee.server.home}/lib/jasper.jar:${j2ee.server.home}/lib/jsp-api.jar:${j2ee.server.home}/lib/servlet-api.jar:${j2ee.server.home}/lib/tomcat-api.jar:${j2ee.server.home}/lib/tomcat-coyote.jar:${j2ee.server.home}/lib/tomcat-dbcp.jar:${j2ee.server.home}/lib/tomcat-i18n-es.jar:${j2ee.server.home}/lib/tomcat-i18n-fr.jar:${j2ee.server.home}/lib/tomcat-i18n-ja.jar:${j2ee.server.home}/lib/tomcat-jdbc.jar:${j2ee.server.home}/lib/tomcat-jni.jar:${j2ee.server.home}/lib/tomcat-util-scan.jar:${j2ee.server.home}/lib/tomcat-util.jar:${j2ee.server.home}/lib/tomcat-websocket.jar:${j2ee.server.home}/lib/websocket-api.jar\n+j2ee.platform.classpath=${j2ee.server.home}/lib/annotations-api.jar:${j2ee.server.home}/lib/catalina-ant.jar:${j2ee.server.home}/lib/catalina-ha.jar:${j2ee.server.home}/lib/catalina-storeconfig.jar:${j2ee.server.home}/lib/catalina-tribes.jar:${j2ee.server.home}/lib/catalina.jar:${j2ee.server.home}/lib/ecj-4.6.3.jar:${j2ee.server.home}/lib/el-api.jar:${j2ee.server.home}/lib/jasper-el.jar:${j2ee.server.home}/lib/jasper.jar:${j2ee.server.home}/lib/jsp-api.jar:${j2ee.server.home}/lib/servlet-api.jar:${j2ee.server.home}/lib/tomcat-api.jar:${j2ee.server.home}/lib/tomcat-coyote.jar:${j2ee.server.home}/lib/tomcat-dbcp.jar:${j2ee.server.home}/lib/tomcat-i18n-es.jar:${j2ee.server.home}/lib/tomcat-i18n-fr.jar:${j2ee.server.home}/lib/tomcat-i18n-ja.jar:${j2ee.server.home}/lib/tomcat-jdbc.jar:${j2ee.server.home}/lib/tomcat-jni.jar:${j2ee.server.home}/lib/tomcat-util-scan.jar:${j2ee.server.home}/lib/tomcat-util.jar:${j2ee.server.home}/lib/tomcat-websocket.jar:${j2ee.server.home}/lib/websocket-api.jar\n lucene.version=7.3.1\n lucene-core.jar=lucene-core-${lucene.version}.jar\n lucene-analyzers-common.jar=lucene-analyzers-common-${lucene.version}.jar",
    "Add support for addtional props upon showing custom tabs": "diff --git a/modules/web/src/core/editor/model/CustomEditor.js b/modules/web/src/core/editor/model/CustomEditor.js\nindex 6d0ec1e4188..3abccf703cd 100644\n--- a/modules/web/src/core/editor/model/CustomEditor.js\n+++ b/modules/web/src/core/editor/model/CustomEditor.js\n@@ -13,15 +13,17 @@ class CustomEditor extends EventChannel {\n      * @param {String} icon \n      * @param {Object} component \n      * @param {Function} propsProvider\n+     * @param {Function} additionalProps\n      * @param {string} customTitleClass\n      */\n-    constructor(id, title, icon, component, propsProvider, customTitleClass) {\n+    constructor(id, title, icon, component, propsProvider, additionalProps, customTitleClass) {\n         super();\n         this._id = id;\n         this._title = title;\n         this._icon = icon;\n         this._component = component;\n         this._propsProvider = propsProvider;\n+        this._additionalProps = additionalProps;\n         this._customTitleClass = customTitleClass;\n     }\n \n@@ -45,6 +47,14 @@ class CustomEditor extends EventChannel {\n         return this._propsProvider;\n     }\n \n+    set additionalProps(additionalProps) {\n+        this._additionalProps = additionalProps;\n+    }\n+\n+    get additionalProps() {\n+        return this._additionalProps;\n+    }\n+\n     get customTitleClass() {\n         return this._customTitleClass;\n     }\ndiff --git a/modules/web/src/core/editor/plugin.js b/modules/web/src/core/editor/plugin.js\nindex 3d68511aa48..a9896f58c65 100644\n--- a/modules/web/src/core/editor/plugin.js\n+++ b/modules/web/src/core/editor/plugin.js\n@@ -229,15 +229,18 @@ class EditorPlugin extends Plugin {\n      * @param {Object} command args\n      */\n     onOpenCustomEditorTab(args) {\n-        const { id, title, icon, component, propsProvider, customTitleClass, activate } = args;\n-        if (!this.getEditorByID(id)) {\n-            const editor = new CustomEditor(id, title, icon, component, propsProvider, customTitleClass);\n+        const { id, title, icon, component, propsProvider, additionalProps, customTitleClass, activate } = args;\n+        const existingEditor = this.getEditorByID(id);\n+        if (!existingEditor) {\n+            const editor = new CustomEditor(id, title, icon, component, propsProvider,\n+                additionalProps, customTitleClass);\n             this.openedEditors.push(editor);\n             if (activate || _.isNil(this.activeEditorID)) {\n                 this.setActiveEditor(editor);\n             }\n         } else if (activate) {\n-            this.setActiveEditor(this.getEditorByID(id));\n+            existingEditor.additionalProps = additionalProps;\n+            this.setActiveEditor(existingEditor);\n         }\n         this.reRender();\n     }\ndiff --git a/modules/web/src/core/editor/views/EditorTabs.jsx b/modules/web/src/core/editor/views/EditorTabs.jsx\nindex 186e97889ec..588b7d06ae8 100644\n--- a/modules/web/src/core/editor/views/EditorTabs.jsx\n+++ b/modules/web/src/core/editor/views/EditorTabs.jsx\n@@ -163,7 +163,7 @@ class EditorTabs extends View {\n                 </TabPane>\n             );\n         } else if (editor instanceof CustomEditor) {\n-            const { id, title, icon, propsProvider } = editor;\n+            const { id, title, icon, propsProvider, additionalProps } = editor;\n             const customTabDimensions = {\n                 width: this.props.width, // custom tabs doesn't support split view hence full width\n                 height: this.props.height - tabTitleHeight,\n@@ -198,6 +198,7 @@ class EditorTabs extends View {\n                         <editor.component\n                             isActive={activeEditorID === id}\n                             {...propsProvider()}\n+                            {...additionalProps}\n                             {...customTabDimensions}\n                             panelResizeInProgress={this.props.panelResizeInProgress || this.state.panelResizeInProgress}\n                         />\ndiff --git a/modules/web/src/core/layout/commands.js b/modules/web/src/core/layout/commands.js\nindex bbec8bb359d..671cd6018d7 100644\n--- a/modules/web/src/core/layout/commands.js\n+++ b/modules/web/src/core/layout/commands.js\n@@ -13,6 +13,7 @@ export function getCommandDefinitions() {\n             id: COMMANDS.SHOW_VIEW,\n             argTypes: {\n                 id: PropTypes.string.isRequired,\n+                additionalProps: PropTypes.objectOf(Object),\n             },\n         },\n         {\ndiff --git a/modules/web/src/core/layout/handlers.js b/modules/web/src/core/layout/handlers.js\nindex 5b324dab9c1..949978ce386 100644\n--- a/modules/web/src/core/layout/handlers.js\n+++ b/modules/web/src/core/layout/handlers.js\n@@ -16,7 +16,7 @@ export function getHandlerDefinitions(layoutManager) {\n     return [\n         {\n             cmdID: COMMANDS.SHOW_VIEW,\n-            handler: (id) => {\n+            handler: ({ id, additionalProps }) => {\n                 const view = _.find(layoutManager.views, ['id', id]);\n                 if (!_.isNil(view)) {\n                     const { region, component, propsProvider, pluginID,\n@@ -31,6 +31,7 @@ export function getHandlerDefinitions(layoutManager) {\n                                 customTitleClass,\n                                 component: withViewFeatures(component, pluginID),\n                                 propsProvider,\n+                                additionalProps,\n                                 activate: true,\n                             });\n                             break;\ndiff --git a/modules/web/src/plugins/debugger/handlers.js b/modules/web/src/plugins/debugger/handlers.js\nindex e3dfa645d03..76b0413fa4b 100644\n--- a/modules/web/src/plugins/debugger/handlers.js\n+++ b/modules/web/src/plugins/debugger/handlers.js\n@@ -40,7 +40,7 @@ export function getHandlerDefinitions(debuggerPlugin) {\n                         file: activeEditor.file,\n                         onSaveSuccess: () => {\n                             dispatch(LAYOUT_COMMANDS.SHOW_BOTTOM_PANEL);\n-                        ",
    "fixed a few more bugs . . git - svn - id : https : / / hudson . dev . java . net / svn / hudson / trunk / hudson / main @ 1044 71c3de6d - 444a - 0410 - be80 - ed276b4c234a": "diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar\nnew file mode 100644\nindex 0000000000..86cd10cdc2\nBinary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar differ\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5\nnew file mode 100644\nindex 0000000000..9545f222ce\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5\n@@ -0,0 +1 @@\n+072cf84a77d0147842730b93dd9fcd39\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1\nnew file mode 100644\nindex 0000000000..581ff5eae6\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1\n@@ -0,0 +1 @@\n+c3f2e4799b56685158e5a73dcd8c7722d7dc76ad\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar\nnew file mode 100644\nindex 0000000000..b5713f0919\nBinary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar differ\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5\nnew file mode 100644\nindex 0000000000..4b620789df\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5\n@@ -0,0 +1 @@\n+1c6a5bccddc9a561fcf8538a64295827\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1\nnew file mode 100644\nindex 0000000000..86529e6241\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1\n@@ -0,0 +1 @@\n+d4a7756cfaed55f88d2a4530ec9863090ccbe31c\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar\nnew file mode 100644\nindex 0000000000..1f6da30c50\nBinary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar differ\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5\nnew file mode 100644\nindex 0000000000..01755c4776\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5\n@@ -0,0 +1 @@\n+c542d1d94a9414332b48a2acbc67f102\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1\nnew file mode 100644\nindex 0000000000..c9a35c9959\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1\n@@ -0,0 +1 @@\n+ee8a52eb16efe7128f25b7bb40cc1874f81569fc\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar\nnew file mode 100644\nindex 0000000000..9ef80c4afa\nBinary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar differ\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5\nnew file mode 100644\nindex 0000000000..73196af557\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5\n@@ -0,0 +1 @@\n+fed5044bb581894f692eb769c7c4cde2\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1\nnew file mode 100644\nindex 0000000000..98870e0599\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1\n@@ -0,0 +1 @@\n+1d6db1a40716be247008a700efcab520e2e048a2\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom\nnew file mode 100644\nindex 0000000000..0b3f1be858\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom\n@@ -0,0 +1,101 @@\n+<project>\n+  <pomVersion>3</pomVersion>\n+  <groupId>org.kohsuke.stapler</groupId>\n+  <artifactId>stapler</artifactId>\n+  <currentVersion>1.10-SNAPSHOT</currentVersion>\n+  <shortDescription>Stapler HTTP request handling engine</shortDescription>\n+  <description>Stapler HTTP request handling engine</description>\n+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>\n+  <mailingLists>\n+    <mailingList>\n+      <name>Users List</name>\n+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>\n+    </mailingList>\n+    <mailingList>\n+      <name>Issues List</name>\n+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>\n+    </mailingList>\n+    <mailingList>\n+      <name>CVS List</name>\n+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>\n+    </mailingList>\n+  </mailingLists>\n+  <developers>\n+    <developer>\n+      <id>kohsuke</id>\n+      <name>Kohsuke Kawaguchi</name>\n+      <email>kk@kohsuke.org</email>\n+    </developer>\n+  </developers>\n+  <reports>\n+    <report>maven-license-plugin</report>\n+    <report>maven-changelog-plugin</report>\n+    <report>maven-changes-plugin</report>\n+    <report>maven-developer-activity-plugin</report>\n+    <report>maven-file-activity-plugin</report>\n+    <report>maven-javadoc-plugin</report>\n+    <report>maven-jellydoc-plugin</report>\n+    <report>maven-junit-report-plugin</report>\n+    <report>maven-linkcheck-plugin</report>\n+  </reports>\n+  <organization>\n+    <url>http://www.java.net/</url>\n+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>\n+  </organization>\n+  <package>org.kohsuke.stapler</package>\n+  <build>\n+    <sourceDirectory>src</sourceDirectory>\n+    <unitTest />\n+    <resources>\n+      <resource>\n+        <directory>src</directory>\n+        <includes>\n+          <include>META-INF/taglib.tld</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>servlet-api</artifactId>\n+      <version>2.3</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jsp-api</artifactId>\n+      <version>2.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-jelly</groupId>\n+      <artifactId>commons-jelly</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>dom4j</groupId>\n+      <artifactId>dom4j</artifactId>\n+      <version>1.6.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-jexl</groupId>\n+      <artifactId>commons-jexl</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-beanutils</groupId>\n+      <artifactId>commons-beanutils</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>groovy</groupId>\n+      <artifactId>groovy-all</artifactId>\n+      <version>1.0-jsr-06</version>\n+    </dependency>\n+  </dependencies>\n+</project>\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5\nnew file mode 100644\nindex 0000000000..ffe9e03fe2\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5\n@@ -0,0 +1 @@\n+4252d528de5ef2faa907d61f26604e81\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1\nnew file mode 100644\nindex 0000000000..10646d21de\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1\n@@ -0,0 +1 @@\n+a9b30bcfbf91151c47720124b756b25e137cfb4d\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom\nnew file mode 100644\nindex 0000000000..4873d4a1f7\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom\n@@ -0,0 +1,101 @@\n+<project>\n+  <pomVersion>3</pomVersion>\n+  <groupId>org.kohsuke.stapler</groupId>\n+  <artifactId>stapler</artifactId>\n+  <currentVersion>1.10</currentVersion>\n+  <shortDescription>Stapler HTTP request handling engine</shortDescription>\n+  <description>Stapler HTTP request handling engine</description>\n+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>\n+  <mailingLists>\n+    <mailingList>\n+      <name>Users List</name>\n+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>\n+    </mailingList>\n+    <mailingList>\n+      <name>Issues List</name>\n+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>\n+    </mailingList>\n+    <mailingList>\n+      <name>CVS List</name>\n+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>\n+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>\n+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>\n+    </mailingList>\n+  </mailingLists>\n+  <developers>\n+    <developer>\n+      <id>kohsuke</id>\n+      <name>Kohsuke Kawaguchi</name>\n+      <email>kk@kohsuke.org</email>\n+    </developer>\n+  </developers>\n+  <reports>\n+    <report>maven-license-plugin</report>\n+    <report>maven-changelog-plugin</report>\n+    <report>maven-changes-plugin</report>\n+    <report>maven-developer-activity-plugin</report>\n+    <report>maven-file-activity-plugin</report>\n+    <report>maven-javadoc-plugin</report>\n+    <report>maven-jellydoc-plugin</report>\n+    <report>maven-junit-report-plugin</report>\n+    <report>maven-linkcheck-plugin</report>\n+  </reports>\n+  <organization>\n+    <url>http://www.java.net/</url>\n+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>\n+  </organization>\n+  <package>org.kohsuke.stapler</package>\n+  <build>\n+    <sourceDirectory>src</sourceDirectory>\n+    <unitTest />\n+    <resources>\n+      <resource>\n+        <directory>src</directory>\n+        <includes>\n+          <include>META-INF/taglib.tld</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>servlet-api</artifactId>\n+      <version>2.3</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jsp-api</artifactId>\n+      <version>2.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-jelly</groupId>\n+      <artifactId>commons-jelly</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>dom4j</groupId>\n+      <artifactId>dom4j</artifactId>\n+      <version>1.6.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-jexl</groupId>\n+      <artifactId>commons-jexl</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-beanutils</groupId>\n+      <artifactId>commons-beanutils</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>groovy</groupId>\n+      <artifactId>groovy-all</artifactId>\n+      <version>1.0-jsr-06</version>\n+    </dependency>\n+  </dependencies>\n+</project>\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5\nnew file mode 100644\nindex 0000000000..e5f694f5bb\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5\n@@ -0,0 +1 @@\n+6a403564d86482a0a0e77338aa2d021d\n\\ No newline at end of file\ndiff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1\nnew file mode 100644\nindex 0000000000..32a4aa5552\n--- /dev/null\n+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1\n@@ -0,0 +1 @@\n+1e636393906fc019a4a3132112daa18a8fb14145\n\\ No newline at end of file",
    "Updated SoftwareSerial examples so that they work easier with Leonardo and Mega": "diff --git a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino\nindex 69bcc01a1..6101bb1ad 100644\n--- a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino\n+++ b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino\n@@ -5,11 +5,20 @@\n  Receives from software serial, sends to hardware serial.\n  \n  The circuit: \n- * RX is digital pin 2 (connect to TX of other device)\n- * TX is digital pin 3 (connect to RX of other device)\n+ * RX is digital pin 10 (connect to TX of other device)\n+ * TX is digital pin 11 (connect to RX of other device)\n+ \n+ Note:\n+ Not all pins on the Mega and Mega 2560 support change interrupts, \n+ so only the following can be used for RX: \n+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69\n+ \n+ Not all pins on the Leonardo support change interrupts, \n+ so only the following can be used for RX: \n+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).\n  \n  created back in the mists of time\n- modified 9 Apr 2012\n+ modified 25 May 2012\n  by Tom Igoe\n  based on Mikal Hart's example\n  \n@@ -18,17 +27,17 @@\n  */\n #include <SoftwareSerial.h>\n \n-SoftwareSerial mySerial(2, 3); // RX, TX\n+SoftwareSerial mySerial(10, 11); // RX, TX\n \n void setup()  \n {\n- // Open serial communications and wait for port to open:\n+  // Open serial communications and wait for port to open:\n   Serial.begin(57600);\n-   while (!Serial) {\n+  while (!Serial) {\n     ; // wait for serial port to connect. Needed for Leonardo only\n   }\n \n-  \n+\n   Serial.println(\"Goodnight moon!\");\n \n   // set the data rate for the SoftwareSerial port\n@@ -43,3 +52,4 @@ void loop() // run over and over\n   if (Serial.available())\n     mySerial.write(Serial.read());\n }\n+\ndiff --git a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino\nindex d9f8f453f..d607ee622 100644\n--- a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino\n+++ b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino\n@@ -16,8 +16,17 @@\n  * First serial device's TX attached to digital pin 2, RX to pin 3\n  * Second serial device's TX attached to digital pin 4, RX to pin 5\n  \n+ Note:\n+ Not all pins on the Mega and Mega 2560 support change interrupts, \n+ so only the following can be used for RX: \n+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69\n+ \n+ Not all pins on the Leonardo support change interrupts, \n+ so only the following can be used for RX: \n+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).\n+ \n  created 18 Apr. 2011\n- modified 9 Apr 2012\n+ modified 25 May 2012\n  by Tom Igoe\n  based on Mikal Hart's twoPortRXExample\n  \n@@ -26,11 +35,12 @@\n  */\n \n #include <SoftwareSerial.h>\n-// software serial #1: TX = digital pin 2, RX = digital pin 3\n-SoftwareSerial portOne(2, 3);\n+// software serial #1: TX = digital pin 10, RX = digital pin 11\n+SoftwareSerial portOne(10,11);\n \n-// software serial #2: TX = digital pin 4, RX = digital pin 5\n-SoftwareSerial portTwo(4, 5);\n+// software serial #2: TX = digital pin 8, RX = digital pin 9\n+// on the Mega, use other pins instead, since 8 and 9 don't work on the Mega\n+SoftwareSerial portTwo(8,9);\n \n void setup()\n {",
    "Renamed projects to remove spaces in their names . . git - svn - id : http : / / google - refine . googlecode . com / svn / trunk @ 987 7d457c2a - affb - 35e4 - 300a - 418c747d4874": "diff --git a/appengine/.project b/appengine/.project\nindex c7fc93149..e964d8042 100644\n--- a/appengine/.project\n+++ b/appengine/.project\n@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-\t<name>gridworks appengine</name>\n+\t<name>gridworks-appengine</name>\n \t<comment></comment>\n \t<projects>\n \t</projects>\ndiff --git a/extensions/jython/.project b/extensions/jython/.project\nindex 8999f66f4..6deffdf48 100644\n--- a/extensions/jython/.project\n+++ b/extensions/jython/.project\n@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-\t<name>gridworks jython</name>\n+\t<name>gridworks-jython</name>\n \t<comment></comment>\n \t<projects>\n \t</projects>\ndiff --git a/extensions/sample-extension/.project b/extensions/sample-extension/.project\nindex 294e44993..1c17169c4 100644\n--- a/extensions/sample-extension/.project\n+++ b/extensions/sample-extension/.project\n@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-\t<name>gridworks sample-extension</name>\n+\t<name>gridworks-sample-extension</name>\n \t<comment></comment>\n \t<projects>\n \t</projects>\ndiff --git a/main/.classpath b/main/.classpath\nindex 067c64ff7..d96531809 100644\n--- a/main/.classpath\n+++ b/main/.classpath\n@@ -28,7 +28,7 @@\n \t<classpathentry kind=\"lib\" path=\"webapp/WEB-INF/lib/jrdf-0.5.6.jar\"/>\n \t<classpathentry kind=\"lib\" path=\"tests/server/lib/mockito-all-1.8.4.jar\" sourcepath=\"tests/server/lib-src/mockito-all-1.8.4-sources.jar\"/>\n \t<classpathentry kind=\"lib\" path=\"tests/server/lib/testng-5.12.1.jar\" sourcepath=\"tests/server/lib-src/testng-5.12.1-sources.jar\"/>\n-\t<classpathentry kind=\"lib\" path=\"/gridworks server/lib/servlet-api-2.5.jar\" sourcepath=\"/gridworks server/lib-src/servlet-api-2.5-sources.jar\"/>\n+\t<classpathentry kind=\"lib\" path=\"/Users/dfhuynh/dev/standalones/gridworks/server/lib/servlet-api-2.5.jar\" sourcepath=\"/gridworks server/lib-src/servlet-api-2.5-sources.jar\"/>\n \t<classpathentry kind=\"lib\" path=\"webapp/WEB-INF/lib/jcl-over-slf4j-1.5.6.jar\" sourcepath=\"webapp/WEB-INF/lib-src/jcl-over-slf4j-1.5.6-sources.jar\"/>\n \t<classpathentry kind=\"lib\" path=\"webapp/WEB-INF/lib/slf4j-api-1.5.6.jar\" sourcepath=\"webapp/WEB-INF/lib/slf4j-api-1.5.6.jar\"/>\n \t<classpathentry kind=\"lib\" path=\"webapp/WEB-INF/lib/slf4j-log4j12-1.5.6.jar\" sourcepath=\"webapp/WEB-INF/lib-src/slf4j-log4j12-1.5.6-sources.jar\"/>\ndiff --git a/server/.project b/server/.project\nindex be4b2f9d5..e3c41ddb0 100644\n--- a/server/.project\n+++ b/server/.project\n@@ -1,12 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-  <name>gridworks server</name>\n-  <projects/>\n-  <buildSpec>\n-    <buildCommand>\n-      <name>org.eclipse.jdt.core.javabuilder</name>\n-    </buildCommand>\n-  </buildSpec>\n-  <natures>\n-    <nature>org.eclipse.jdt.core.javanature</nature>\n-  </natures>\n-</projectDescription>\n\\ No newline at end of file\n+\t<name>gridworks-server</name>\n+\t<comment></comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature</nature>\n+\t</natures>\n+</projectDescription>\ndiff --git a/server/IDEs/eclipse/Gridworks.launch b/server/IDEs/eclipse/Gridworks.launch\nindex bde9d67c1..f7465acd7 100644\n--- a/server/IDEs/eclipse/Gridworks.launch\n+++ b/server/IDEs/eclipse/Gridworks.launch\n@@ -1,13 +1,13 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n-<listEntry value=\"/gridworks server/src/com/metaweb/gridworks/Gridworks.java\"/>\n+<listEntry value=\"/gridworks-server/src/com/metaweb/gridworks/Gridworks.java\"/>\n </listAttribute>\n <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n <listEntry value=\"1\"/>\n </listAttribute>\n <stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"com.metaweb.gridworks.Gridworks\"/>\n-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"gridworks server\"/>\n+<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"gridworks-server\"/>\n <stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-Dgridworks.autoreloading=true\"/>\n <stringAttribute key=\"org.eclipse.jdt.launching.WORKING_DIRECTORY\" value=\"${workspace_loc:gridworks}\"/>\n </launchConfiguration>",
    "Remove deprecated code for pre - assigned resource IDs .": "diff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java\nindex 4456f208c7..c2bd937272 100644\n--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java\n+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java\n@@ -15,7 +15,6 @@ package com.google.devtools.build.android;\n \n import com.android.resources.ResourceType;\n import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.base.Optional;\n import com.google.devtools.build.android.AndroidFrameworkAttrIdProvider.AttrLookupException;\n import com.google.devtools.build.android.resources.FieldInitializers;\n import com.google.devtools.build.android.resources.RClassGenerator;\n@@ -99,11 +98,6 @@ public class AndroidResourceClassWriter implements Flushable, AndroidResourceSym\n     generator.addSimpleResource(dependencyInfo, type, name);\n   }\n \n-  @Override\n-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {\n-    generator.addPublicResource(type, name, value);\n-  }\n-\n   @Override\n   public void acceptStyleableResource(\n       DependencyInfo dependencyInfo,\ndiff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java\nindex bba4f323cb..0ceacf34c3 100644\n--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java\n+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java\n@@ -14,7 +14,6 @@\n package com.google.devtools.build.android;\n \n import com.android.resources.ResourceType;\n-import com.google.common.base.Optional;\n import java.util.Map;\n \n /** Defines a sink for collecting data about resource symbols. */\n@@ -29,13 +28,4 @@ public interface AndroidResourceSymbolSink {\n       DependencyInfo dependencyInfo,\n       FullyQualifiedName key,\n       Map<FullyQualifiedName, /*inlineable=*/ Boolean> attrs);\n-\n-  /**\n-   * Marks a resource as public.\n-   *\n-   * <p>This is orthogonal to the two methods above, and omits the 'DependencyInfo' parameter since\n-   * a 'public' declaration must also have a matching definition (which triggers a call to one of\n-   * the above methods).\n-   */\n-  void acceptPublicResource(ResourceType type, String name, Optional<Integer> value);\n }\ndiff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java\nindex f31e3a78cd..28ff6b5f39 100644\n--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java\n+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java\n@@ -14,7 +14,6 @@\n package com.google.devtools.build.android;\n \n import com.android.resources.ResourceType;\n-import com.google.common.base.Optional;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n@@ -37,7 +36,6 @@ import java.util.Set;\n import java.util.SortedMap;\n import java.util.TreeMap;\n import java.util.TreeSet;\n-import java.util.logging.Logger;\n \n /**\n  * Generates {@link FieldInitializer}s placeholder unique ids. The real ids will be assigned when\n@@ -110,45 +108,8 @@ class PlaceholderIdFieldInitializerBuilder {\n \n   private static final int APP_PACKAGE_MASK = 0x7f000000;\n   private static final int ATTR_TYPE_ID = 1;\n-  private static final Logger logger =\n-      Logger.getLogger(PlaceholderIdFieldInitializerBuilder.class.getName());\n   private static final String NORMALIZED_ANDROID_PREFIX = \"android_\";\n \n-  /**\n-   * Assign any public ids to the given idBuilder.\n-   *\n-   * @param nameToId where to store the final name -> id mappings\n-   * @param publicIds known public resources (can contain null values, if ID isn't reserved)\n-   * @param typeId the type slot for the current resource type.\n-   * @return the final set of assigned resource ids (includes those without apriori assignments).\n-   */\n-  private static Set<Integer> assignPublicIds(\n-      Map<String, Integer> nameToId, SortedMap<String, Optional<Integer>> publicIds, int typeId) {\n-    LinkedHashMap<Integer, String> assignedIds = new LinkedHashMap<>();\n-    int prevId = getInitialIdForTypeId(typeId);\n-    for (Map.Entry<String, Optional<Integer>> entry : publicIds.entrySet()) {\n-      Optional<Integer> id = entry.getValue();\n-      if (id.isPresent()) {\n-        prevId = id.get();\n-      } else {\n-        prevId = nextFreeId(prevId + 1, assignedIds.keySet());\n-      }\n-      String previousMapping = assignedIds.put(prevId, entry.getKey());\n-      if (previousMapping != null) {\n-        logger.warning(\n-            String.format(\n-                \"Multiple entry names declared for public entry identifier 0x%x (%s and %s)\",\n-                prevId, previousMapping, entry.getKey()));\n-      }\n-      nameToId.put(entry.getKey(), prevId);\n-    }\n-    return assignedIds.keySet();\n-  }\n-\n-  private static int extractTypeId(int fullID) {\n-    return (fullID & 0x00FF0000) >> 16;\n-  }\n-\n   private static int getInitialIdForTypeId(int typeId) {\n     return APP_PACKAGE_MASK | (typeId << 16);\n   }\n@@ -176,9 +137,6 @@ class PlaceholderIdFieldInitializerBuilder {\n   private final Map<ResourceType, SortedMap<String, DependencyInfo>> innerClasses =\n       new EnumMap<>(ResourceType.class);\n \n-  private final Map<ResourceType, SortedMap<String, Optional<Integer>>> publicIds =\n-      new EnumMap<>(ResourceType.class);\n-\n   private final Map<String, Map<String, /*inlineable=*/ Boolean>> styleableAttrs =\n       new LinkedHashMap<>();\n \n@@ -186,29 +144,6 @@ class PlaceholderIdFieldInitializerBuilder {\n     this.androidIdProvider = androidIdProvider;\n   }\n \n-  public void addPublicResource(ResourceType type, String name, Optional<Integer> value) {\n-    SortedMap<String, Optional<Integer>> publicMappings = publicIds.get(type);\n-    if (publicMappings == null) {\n-      publicMappings = new TreeMap<>();\n-      publicIds.put(type, publicMappings);\n-    }\n-    Optional<Integer> oldValue = publicMappings.put(name, value);\n-    // AAPT should issue an error, but do a bit of sanity checking here just in case.\n-    if (oldValue != null && !oldValue.equals(value)) {\n-      // Enforce a consistent ordering on the warning message.\n-      Integer lower = oldValue.orNull();\n-      Integer higher = value.orNull();\n-      if (Ordering.natural().compare(oldValue.orNull(), value.orNull()) > 0) {\n-        lower = higher;\n-        higher = oldValue.orNull();\n-      }\n-      logger.warning(\n-          String.format(\n-              \"resource %s/%s has conflicting public identifiers (0x%x vs 0x%x)\",\n-              type, name, lower, higher));\n-    }\n-  }\n-\n   public void addSimpleResource(DependencyInfo dependencyInfo, ResourceType type, String name) {\n     innerClasses\n         .computeIfAbsent(type, t -> new TreeMap<>())\n@@ -255,9 +190,6 @@ class PlaceholderIdFieldInitializerBuilder {\n     // After assigning public IDs, we count up monotonically, so we don't need to track additional\n     // assignedIds to avoid collisions (use an ImmutableSet to ensure we don't add more).\n     Set<Integer> assignedIds = ImmutableSet.of();\n-    if (publicIds.containsKey(ResourceType.ATTR)) {\n-      assignedIds = assignPublicIds(attrToId, publicIds.get(ResourceType.ATTR), attrTypeId);\n-    }\n     Set<String> inlineAttrs = new LinkedHashSet<>();\n     Set<String> styleablesWithInlineAttrs = new TreeSet<>();\n     for (Map.Entry<String, Map<String, Boolean>> styleableAttrEntry : styleableAttrs.entrySet()) {\n@@ -291,65 +223,6 @@ class PlaceholderIdFieldInitializerBuilder {\n     return ImmutableMap.copyOf(attrToId);\n   }\n \n-  private Map<ResourceType, Integer> assignTypeIdsForPublic() {\n-    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);\n-    if (publicIds.isEmpty()) {\n-      return allocatedTypeIds;\n-    }\n-    // Keep track of the reverse mapping from Int -> Type for validation.\n-    Map<Integer, ResourceType> assignedIds = new LinkedHashMap<>();\n-    for (Map.Entry<ResourceType, SortedMap<String, Optional<Integer>>> publicTypeEntry :\n-        publicIds.entrySet()) {\n-      ResourceType currentType = publicTypeEntry.getKey();\n-      Integer reservedTypeSlot = null;\n-      String previousResource = null;\n-      for (Map.Entry<String, Optional<Integer>> publicEntry :\n-          publicTypeEntry.getValue().entrySet()) {\n-        Optional<Integer> reservedId = publicEntry.getValue();\n-        if (!reservedId.isPresent()) {\n-          continue;\n-        }\n-        Integer typePortion = extractTypeId(reservedId.get());\n-        if (reservedTypeSlot == null) {\n-          reservedTypeSlot = typePortion;\n-          previousResource = publicEntry.getKey();\n-        } else {\n-          if (!reservedTypeSlot.equals(typePortion)) {\n-            logger.warning(\n-                String.format(\n-                    \"%s has conflicting type codes for its public identifiers (%s=%s vs %s=%s)\",\n-                    currentType.getName(),\n-                    previousResource,\n-                    reservedTypeSlot,\n-                    publicEntry.getKey(),\n-                    typePortion));\n-          }\n-        }\n-      }\n-      if (currentType == ResourceType.ATTR\n-          && reservedTypeSlot != null\n-          && !reservedTypeSlot.equals(ATTR_TYPE_ID)) {\n-        logger.warning(\n-            String.format(\n-                \"Cannot force ATTR to have type code other than 0x%02x (got 0x%02x from %s)\",\n-                ATTR_TYPE_ID, reservedTypeSlot, previousResource));\n-      }\n-      if (reservedTypeSlot == null) {\n-        logger.warning(String.format(\"Invalid public resource of type %s - ignoring\", currentType));\n-      } else {\n-        allocatedTypeIds.put(currentType, reservedTypeSlot);\n-        ResourceType alreadyAssigned = assignedIds.put(reservedTypeSlot, currentType);\n-        if (alreadyAssigned != null) {\n-          logger.warning(\n-              String.format(\n-                  \"Multiple type names declared for public type identifier 0x%x (%s vs %s)\",\n-                  reservedTypeSlot, alreadyAssigned, currentType));\n-        }\n-      }\n-    }\n-    return allocatedTypeIds;\n-  }\n-\n   public FieldInitializers build() throws AttrLookupException {\n     Map<ResourceType, Collection<FieldInitializer>> initializers =\n         new EnumMap<>(ResourceType.class);\n@@ -366,7 +239,7 @@ class PlaceholderIdFieldInitializerBuilder {\n         fields = getAttrInitializers(attrAssignments, sortedFields);\n       } else {\n         int typeId = typeIdMap.get(type);\n-        fields = getResourceInitializers(type, typeId, sortedFields);\n+        fields = getResourceInitializers(typeId, sortedFields);\n       }\n       // The maximum number of Java fields is 2^16.\n       // See the JVM reference \"4.11. Limitations of the Java Virtual Machine.\"\n@@ -377,9 +250,7 @@ class PlaceholderIdFieldInitializerBuilder {\n   }\n \n   private Map<ResourceType, Integer> chooseTypeIds() {\n-    // Go through public entries. Those may have forced certain type assignments, so take those\n-    // into account first.\n-    Map<ResourceType, Integer> allocatedTypeIds = assignTypeIdsForPublic();\n+    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);\n     Set<Integer> reservedTypeSlots = ImmutableSet.copyOf(allocatedTypeIds.values());\n     // ATTR always takes up slot #1, even if it isn't present.\n     allocatedTypeIds.put(ResourceType.ATTR, ATTR_TYPE_ID);\n@@ -416,13 +287,10 @@ class PlaceholderIdFieldInitializerBuilder {\n   }\n \n   private ImmutableList<FieldInitializer> getResourceInitializers(\n-      ResourceType type, int typeId, SortedMap<String, DependencyInfo> sortedFields) {\n+      int typeId, SortedMap<String, DependencyInfo> sortedFields) {\n     ImmutableList.Builder<FieldInitializer> initList = ImmutableList.builder();\n     Map<String, Integer> publicNameToId = new LinkedHashMap<>();\n     Set<Integer> assignedIds = ImmutableSet.of();\n-    if (publicIds.containsKey(type)) {\n-      assignedIds = assignPublicIds(publicNameToId, publicIds.get(type), typeId);\n-    }\n     int resourceIds = nextFreeId(getInitialIdForTypeId(typeId), assignedIds);\n     for (Map.Entry<String, DependencyInfo> entry : sortedFields.entrySet()) {\n       String field = entry.getKey();\ndiff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java\nindex e66a2e6052..744163380b 100644\n--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java\n+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java\n@@ -16,7 +16,6 @@ package com.google.devtools.build.android;\n import static java.nio.charset.StandardCharsets.UTF_8;\n \n import com.android.resources.ResourceType;\n-import com.google.common.base.Optional;\n import java.io.BufferedWriter;\n import java.io.Flushable;\n import java.io.IOException;\n@@ -70,9 +69,6 @@ final class PlaceholderRTxtWriter implements Flushable, AndroidResourceSymbolSin\n     }\n   }\n \n-  @Override\n-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {}\n-\n   @Override\n   public void flush() throws IOException {\n     try (BufferedWriter writer = Files.newBufferedWriter(rTxtOut, UTF_8)) {\ndiff --git a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java\nindex 00062cde13..6de515849f 100644\n--- a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java\n+++ b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java\n@@ -92,11 +92,7 @@ public class PublicXmlResourceValue implements XmlResourceValue {\n \n   @Override\n   public void writeResourceToClass(\n-      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {\n-    for (Map.Entry<ResourceType, Optional<Integer>> entry : typeToId.entrySet()) {\n-      sink.acceptPublicResource(entry.getKey(), key.name(), entry.getValue());\n-    }\n-  }\n+      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {}\n \n   @Override\n   public int hashCode() {",
    "remove console log statements finish up the logic of stepping back and forward in a running node": "diff --git a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx\nindex ab4fd14ea..cdfaad2e6 100644\n--- a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx\n+++ b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx\n@@ -1,7 +1,7 @@\n import React, { Component, PropTypes } from 'react';\n import { PipelineGraph } from '@jenkins-cd/design-language';\n \n-const { string, array, object, any, func } = PropTypes;\n+const { string, array, any, func } = PropTypes;\n \n \n function badNode(jenkinsNode) {\n@@ -149,22 +149,6 @@ export default class PipelineRunGraph extends Component {\n                   stages={graphNodes}\n                   onNodeClick={\n                     (name, id) => {\n-                        const pathname = this.props.location.pathname;\n-                        // if path ends with pipeline we simply add the node id\n-                        if (pathname.endsWith('pipeline/')) {\n-                            this.props.router.push(`${pathname}${id}`);\n-                        } else if (pathname.endsWith('pipeline')) {\n-                            this.props.router.push(`${pathname}/${id}`);\n-                        } else {\n-                            // remove last bit and replace it with node\n-                            const pathArray = pathname.split('/');\n-                            pathArray.pop();\n-                            if (pathname.endsWith('/')) {\n-                                pathArray.pop();\n-                            }\n-                            pathArray.shift();\n-                            this.props.router.push(`${pathArray.join('/')}/${id}`);\n-                        }\n                         this.props.callback(id);\n                     }\n                   }\n@@ -181,6 +165,4 @@ PipelineRunGraph.propTypes = {\n     nodes: array,\n     node: any,\n     callback: func,\n-    router: object.isRequired, // From react-router\n-    location: object.isRequired, // From react-router\n };\ndiff --git a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx\nindex 41169d006..f609ef2cc 100644\n--- a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx\n+++ b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx\n@@ -63,7 +63,6 @@ export class RunDetailsPipeline extends Component {\n                             // if the step_stage_id has changed we need to change the focus\n                             if (event.pipeline_step_stage_id !== this.mergedConfig.node) {\n                                 delete this.mergedConfig.node;\n-                                console.log('only nodes', this.mergedConfig.node);\n                                 fetchNodes({ ...this.mergedConfig, refetch });\n                             } else {\n                                 // console.log('only steps');\n@@ -97,14 +96,12 @@ export class RunDetailsPipeline extends Component {\n     componentDidMount() {\n         const onScrollHandler = (elem) => {\n             if (elem.deltaY < 0 && this.state.followAlong) {\n-                console.log('this.setState({ followAlong: false });');\n                 this.setState({ followAlong: false });\n             }\n         };\n \n         const _handleKeys = (event) => {\n             if (event.keyCode === 38 && this.state.followAlong) {\n-                console.log('this.setState({ followAlong: false });');\n                 this.setState({ followAlong: false });\n             }\n         };\n@@ -113,18 +110,15 @@ export class RunDetailsPipeline extends Component {\n         document.addEventListener('keydown', _handleKeys, false);\n     }\n \n-    // shouldComponentUpdate(nextProps, nextState) {\n-    // }\n-\n     componentWillReceiveProps(nextProps) {\n         const followAlong = this.state.followAlong;\n         this.mergedConfig = this.generateConfig({ ...nextProps, followAlong });\n \n-        // console.log('       this.pipelineListener', this.mergedConfig, this.props);\n         if (!this.state.followAlong && this.timeout) {\n             // console.log('clearTO');\n             clearTimeout(this.timeout);\n         }\n+\n         const nodeAction = calculateNode(this.props, nextProps, this.mergedConfig);\n         if (nodeAction && nodeAction.action) {\n             // use updated config\n@@ -145,8 +139,8 @@ export class RunDetailsPipeline extends Component {\n                 if (Number(newStart) > 0) {\n                     // kill current  timeout if any\n                     // console.log('prefollow', this.state.followAlong);\n-                    clearTimeout(this.timeout);\n                     if (this.state.followAlong) {\n+                        clearTimeout(this.timeout);\n                         // console.log('follow', this.state.followAlong);\n                         this.timeout = setTimeout(() => fetchLog({ ...logGeneral, newStart }), 1000);\n                     }\n@@ -156,7 +150,6 @@ export class RunDetailsPipeline extends Component {\n     }\n \n     componentWillUnmount() {\n-        // console.log('unmounting');\n         if (this.pipelineListener) {\n             sse.unsubscribe(this.pipelineListener);\n             delete this.pipelineListener;\n@@ -167,15 +160,12 @@ export class RunDetailsPipeline extends Component {\n \n     generateConfig(props) {\n         const {\n-            location,\n             config = {},\n         } = this.context;\n         const followAlong = this.state.followAlong;\n         const {\n-            steps,\n             isMultiBranch,\n             params: { pipeline: name, branch, runId, node: nodeParam },\n-            result,\n         } = props;\n         // we would use default properties however the node can be null so no default properties will be triggered\n         let { nodeReducer } = props;\n@@ -183,43 +173,12 @@ export class RunDetailsPipeline extends Component {\n             nodeReducer = { id: null, displayName: 'Steps' };\n         }\n         // if we have a node param we do not want the calculation of the focused node\n-        let node = nodeParam || nodeReducer.id;\n-        if (followAlong) {\n-            node = nodeReducer.id;\n-        }\n-        // however if we follow along we actually do want to change the focus\n-        if (result.state === 'RUNNING' && nodeReducer && nodeReducer.id > Number(node)) {\n-            console.log('leo', nodeReducer, steps, followAlong, location);\n-            const pathname = location.pathname;\n-            // if path ends with pipeline we simply add the node id\n-            let xxx;\n-            if (pathname.endsWith('pipeline/')) {\n-                // router.push(`${pathname}${node}`);\n-                xxx = `${pathname}${nodeReducer.id}`;\n-            } else if (pathname.endsWith('pipeline')) {\n-                // router.push(`${pathname}/${node}`);\n-                xxx = `${pathname}/${nodeReducer.id}`;\n-            } else {\n-                // remove last bit and replace it with node\n-                const pathArray = pathname.split('/');\n-                pathArray.pop();\n-                if (pathname.endsWith('/')) {\n-                    pathArray.pop();\n-                }\n-                pathArray.shift();\n-                // router.push(`${pathArray.join('/')}/${node}`);\n-                xxx = `${pathArray.join('/')}/${nodeReducer.id}`;\n-            }\n-            console.log('xxx', xxx);\n-        }\n+        const node = nodeParam || nodeReducer.id;\n+\n         const mergedConfig = { ...config, name, branch, runId, isMultiBranch, node, nodeReducer, followAlong };\n         return mergedConfig;\n     }\n \n-    nodeInformation() {\n-\n-    }\n-\n     render() {\n         const {\n             location,\n@@ -244,43 +203,61 @@ export class RunDetailsPipeline extends Component {\n             || (resultRun.toLowerCase() === 'running' && followAlong)\n         ;\n \n-\n         const nodeKey = calculateNodeBaseUrl(this.mergedConfig);\n         const key = calculateStepsBaseUrl(this.mergedConfig);\n         const logGeneral = calculateRunLogURLObject(this.mergedConfig);\n         const log = logs ? logs[logGeneral.url] : null;\n-        // console.log('merged', this.mergedConfig.node, key);\n         let title = this.mergedConfig.nodeReducer.displayName;\n         if (log) {\n             title = 'Logs';\n         } else if (this.mergedConfig.nodeReducer.id !== null) {\n             title = `Steps - ${title}`;\n         }\n-        /*\n-        const stopFollowing = (event) => {\n-            console.log(this.refs, event, !followAlong);\n-            this.setState({ followAlong: !followAlong });\n-        };\n-        */\n         const currentSteps = steps ? steps[key] : null;\n-        console.log('steps to render', key, steps, nodeKey);\n-        if (steps && steps[key]) {\n-            console.log('steps to render found', steps[key]);\n-        }\n         const afterClick = (id) => {\n             const nodeInfo = nodes[nodeKey].model.filter((item) => item.id === id)[0];\n-            console.log('clickID', id, nodeInfo);\n+            const pathname = location.pathname;\n+            let newPath;\n+            // if path ends with pipeline we simply add the node id\n+            if (pathname.endsWith('pipeline/')) {\n+                if (nodeInfo.state === 'FINISHED') {\n+                    newPath = `${pathname}${id}`;\n+                } else {\n+                    newPath = pathname;\n+                }\n+            } else if (pathname.endsWith('pipeline')) {\n+                if (nodeInfo.state === 'FINISHED') {\n+                    newPath = `${pathname}/${id}`;\n+                } else {\n+                    newPath = pathname;\n+                }\n+            } else {\n+                // remove last bit and replace it with node\n+                const pathArray = pathname.split('/');\n+                pathArray.pop();\n+                if (pathname.endsWith('/')) {\n+                    pathArray.pop();\n+                }\n+                pathArray.shift();\n+                if (nodeInfo.state !== 'FINISHED') {\n+                    newPath = pathArray.join('/');\n+                } else {\n+                    newPath = `${pathArray.join('/')}/${id}`;\n+                }\n+            }\n+            if (nodeInfo.state === 'FINISHED' && followAlong) {\n+                this.setState({ followAlong: false });\n+            }\n             if (nodeInfo.state !== 'FINISHED' && !followAlong) {\n                 this.setState({ followAlong: true });\n             }\n+            router.push(newPath);\n         };\n         return (\n             <div ref=\"scrollArea\">\n                 { nodes && nodes[nodeKey] && <Extensions.Renderer\n                   extensionPoint=\"jenkins.pipeline.run.result\"\n                   callback={afterClick}\n-                  router={router}\n-                  location={location}\n                   nodes={nodes[nodeKey].model}\n                   pipelineName={name}\n                   branchName={isMultiBranch ? branch : undefined}\ndiff --git a/blueocean-dashboard/src/main/js/components/Step.jsx b/blueocean-dashboard/src/main/js/components/Step.jsx\nindex e6a1984c8..444a2c49e 100644\n--- a/blueocean-dashboard/src/main/js/components/Step.jsx\n+++ b/blueocean-dashboard/src/main/js/components/Step.jsx\n@@ -18,13 +18,9 @@ export default class Node extends Component {\n \n     componentWillReceiveProps(nextProps) {\n         const { node, logs, nodesBaseUrl, fetchLog, followAlong } = nextProps;\n-        if (followAlong) {\n-            // kill current timeout if any\n-            this.clearThisTimeout();\n-        }\n         const { config = {} } = this.context;\n         const mergedConfig = { ...config, node, nodesBaseUrl };\n-        if (logs !== this.props.logs) {\n+        if (logs && logs !== this.props.logs) {\n             const key = calculateLogUrl(mergedConfig);\n             const log = logs ? logs[key] : null;\n             if (log && log !== null) {\n@@ -32,10 +28,9 @@ export default class Node extends Component {\n                 // kill current  timeout if any\n                 this.clearThisTimeout();\n                 if (number > 0 && followAlong) {\n-                    // we turn on refetch so we always fetch a new Node result\n-                    const refetch = true;\n                     mergedConfig.newStart = log.newStart;\n-                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig, refetch }), 1000);\n+                    this.clearThisTimeout();\n+                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig }), 1000);\n                 }\n             }\n         }\n@@ -70,11 +65,8 @@ export default class Node extends Component {\n         const resultRun = result === 'UNKNOWN' || !result ? state : result;\n         const log = logs ? logs[calculateLogUrl({ ...config, node, nodesBaseUrl })] : null;\n         const getLogForNode = () => {\n-// console.log('ddd',followAlong, log)\n-            if (!log || followAlong) {\n-                // we turn on refetch so we always fetch a new Node result\n-                const refetch = true;\n-                fetchLog({ ...config, node, nodesBaseUrl, refetch });\n+            if (!log || !log.logArray) {\n+                fetchLog({ ...config, node, nodesBaseUrl });\n             }\n         };\n         const runResult = resultRun.toLowerCase();\ndiff --git a/blueocean-dashboard/src/main/js/components/Steps.jsx b/blueocean-dashboard/src/main/js/components/Steps.jsx\nindex 0f8ac1456..33bb01cb8 100644\n--- a/blueocean-dashboard/src/main/js/components/Steps.jsx\n+++ b/blueocean-dashboard/src/main/js/components/Steps.jsx\n@@ -12,7 +12,6 @@ export default class Nodes extends Component {\n             model,\n             nodesBaseUrl,\n         } = nodeInformation;\n-        console.log('renderSteps', model, nodesBaseUrl);\n         return (<div>\n             {\n               model.map((item, index) =>\ndiff --git a/blueocean-dashboard/src/main/js/redux/actions.js b/blueocean-dashboard/src/main/js/redux/actions.js\nindex b8b32e76d..21e23a5f2 100644\n--- a/blueocean-dashboard/src/main/js/redux/actions.js\n+++ b/blueocean-dashboard/src/main/js/redux/actions.js\n@@ -61,7 +61,6 @@ export const actionHandlers = {\n         return state.set('currentRuns', payload);\n     },\n     [ACTION_TYPES.SET_NODE](state, { payload }): State {\n-     ",
    "Updated russian and hungarian translation": "diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties\nindex 8f34909c5..63031015d 100644\n--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties\n+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties\n@@ -336,4 +336,4 @@ startup.selectopen = Click open icon on the top panel or drag SWF file to this w\n \n error.font.nocharacter = Selected source font does not contain character \"%char%\".\n \n-warning.initializers = WARNING:\\nStatic fields and consts are often initialized in initializers.\\nEditing value here is usually not enough!\n\\ No newline at end of file\n+warning.initializers = WARNING:\\nStatic fields and consts are often initialized in initializers.\\nEditing value here is usually not enough!\ndiff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties\nindex 8c6396a10..1456070c2 100644\n--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties\n+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties\n@@ -45,7 +45,7 @@ menu.settings.gotoMainClassOnStartup = Dokumentum oszt\\u00e1ly kiemel\\u00e9se in\n menu.help = S\\u00fag\\u00f3\n menu.help.checkupdates = Friss\\u00edt\\u00e9sek keres\\u00e9se...\n menu.help.helpus = Seg\\u00edts nek\\u00fcnk!\n-menu.help.homepage = Honlap megyit\\u00e1sa\n+menu.help.homepage = Honlap megnyit\\u00e1sa\n menu.help.about = N\\u00e9vjegy...\n \n contextmenu.remove = Elt\\u00e1vol\\u00edt\\u00e1s\n@@ -60,7 +60,7 @@ notavailonthisplatform = Ennek az objektumnak az el\\u0151n\\u00e9zete nem el\\u00e\n swfpreview = SWF el\\u0151n\\u00e9zet\n swfpreview.internal = SWF el\\u0151n\\u00e9zet (Be\\u00e9p\\u00edtett n\\u00e9z\\u0151ke)\n \n-parameters = Parameterek\n+parameters = Param\\u00e9terek\n \n rename.enternew = \\u00cdrja be az \\u00faj nevet:\n \n@@ -87,7 +87,7 @@ message.confirm.on = BE szeretn\\u00e9 kapcsolni?\n message.confirm.off = KI szeretn\\u00e9 kapcsolni?\n message.confirm = Meger\\u0151s\\u00edt\\u00e9s\n \n-message.confirm.autodeobfuscate = Automatikus deobfuszk\\u00e1l\\u00e1s egy m\\u00f3d az obfuszk\\u00e1lt k\\u00f3d visszaford\\u00edt\\u00e1s\\u00e1ra.\\r\\nDeobfuszk\\u00e1l\\u00e1s lassabb visszaford\\u00edt\\u00e1st eredm\\u00e9nyez, \\u00e9s n\\u00e9h\\u00e1ny halott k\\u00f3dr\\u00e9szlet elt\\u00e1vol\\u00edt\\u00e1sra ker\\u00fclhet.\\r\\nHa a k\\u00f3d nincs obfuzk\\u00e1lva jobb kikapcsolni az automatikus deobfuszk\\u00e1l\\u00e1st.\n+message.confirm.autodeobfuscate = Automatikus deobfuszk\\u00e1l\\u00e1s egy m\\u00f3d az obfuszk\\u00e1lt k\\u00f3d visszaford\\u00edt\\u00e1s\\u00e1ra.\\r\\nDeobfuszk\\u00e1l\\u00e1s lassabb visszaford\\u00edt\\u00e1st eredm\\u00e9nyez, \\u00e9s n\\u00e9h\\u00e1ny halott k\\u00f3dr\\u00e9szlet elt\\u00e1vol\\u00edt\\u00e1sra ker\\u00fclhet.\\r\\nHa a k\\u00f3d nincs obfuszk\\u00e1lva jobb kikapcsolni az automatikus deobfuszk\\u00e1l\\u00e1st.\n \n message.parallel = P\\u00e1rhuzamos\\u00edt\\u00e1s\n message.trait.saved = Jellemz\\u0151 sikeresen lementve\n@@ -97,13 +97,13 @@ message.constant.new.string = Karakterl\\u00e1nc \"%value%\" nem tal\\u00e1lhat\\u00f\n message.constant.new.string.title = Karakterl\\u00e1nc hozz\\u00e1ad\\u00e1sa\n message.constant.new.integer = Eg\\u00e9sz \\u00e9rt\\u00e9k \"%value%\" nem tal\\u00e1lhat\\u00f3 a konstans t\\u00e1bl\\u00e1ban. Szeretn\\u00e9 hozz\\u00e1adni?\n message.constant.new.integer.title = Eg\\u00e9sz hozz\\u00e1ad\\u00e1sa\n-message.constant.new.unsignedinteger = El\\u0151jel n\\u00e1lk\\u00fcli eg\\u00e9sz \\u00e9rt\\u00e9k \"%value%\" nem tal\\u00e1lhat\\u00f3 a konstans t\\u00e1bl\\u00e1ban. Szeretn\\u00e9 hozz\\u00e1adni?\n+message.constant.new.unsignedinteger = El\\u0151jel n\\u00e9lk\\u00fcli eg\\u00e9sz \\u00e9rt\\u00e9k \"%value%\" nem tal\\u00e1lhat\\u00f3 a konstans t\\u00e1bl\\u00e1ban. Szeretn\\u00e9 hozz\\u00e1adni?\n message.constant.new.unsignedinteger.title = El\\u0151jel n\\u00e9lk\\u00fcli eg\\u00e9sz hozz\\u00e1ad\\u00e1sa\n message.constant.new.double = Lebeg\\u0151pontos \\u00e9rt\\u00e9k \"%value%\" nem tal\\u00e1lhat\\u00f3 a konstans t\\u00e1bl\\u00e1ban. Szeretn\\u00e9 hozz\\u00e1adni?\n message.constant.new.double.title = Lebeg\\u0151pontos \\u00e9rt\\u00e9k hozz\\u00e1ad\\u00e1sa\n \n work.buffering = Pufferel\\u00e9s\n-work.waitingfordissasembly = V\\u00e1rakot\\u00e1s a visszafejt\\u00e9sre\n+work.waitingfordissasembly = V\\u00e1rakoz\\u00e1s a visszafejt\\u00e9sre\n work.gettinghilights = Kiemel\\u00e9sek elk\\u00e9sz\\u00edt\\u00e9se\n work.disassembling = Visszafejt\\u00e9s\n work.exporting = Export\\u00e1l\\u00e1s\n@@ -175,10 +175,10 @@ abc.detail.traitname = N\\u00e9v:\n \n abc.detail.body.params.maxstack = Maximum stack:\n abc.detail.body.params.localregcount = Lok\\u00e1lis regiszterek sz\\u00e1ma:\n-abc.detail.body.params.minscope = \\u00c9rv\\u00e9nyess\\u00e1gi k\\u00f6r minimum m\\u00e9lys\\u00e9ge:\n-abc.detail.body.params.maxscope = \\u00c9rv\\u00e9nyess\\u00e1gi k\\u00f6r maximum m\\u00e9lys\\u00e9ge:\n-abc.detail.body.params.autofill = Automtikus kit\\u00f6lt\\u00e9s k\\u00f3d ment\\u00e9sekor (GLOB\\u00c1LIS BE\\u00c1LL\\u00cdT\\u00c1S)\n-abc.detail.body.params.autofill.experimental = ...K\\u00cdS\\u00c1RLETI\n+abc.detail.body.params.minscope = \\u00c9rv\\u00e9nyess\\u00e9gi k\\u00f6r minimum m\\u00e9lys\\u00e9ge:\n+abc.detail.body.params.maxscope = \\u00c9rv\\u00e9nyess\\u00e9gi k\\u00f6r maximum m\\u00e9lys\\u00e9ge:\n+abc.detail.body.params.autofill = Automatikus kit\\u00f6lt\\u00e9s k\\u00f3d ment\\u00e9sekor (GLOB\\u00c1LIS BE\\u00c1LL\\u00cdT\\u00c1S)\n+abc.detail.body.params.autofill.experimental = ...K\\u00cdS\\u00c9RLETI\n \n abc.detail.methodinfo.methodindex = Met\\u00f3dus Index:\n abc.detail.methodinfo.parameters = Param\\u00e9terek:\n@@ -198,7 +198,7 @@ error.slotconst.typevalue = SlotConst t\\u00edpus\\u00e9rt\\u00e9k Hiba\n \n \n message.autofill.failed = K\\u00f3d statisztika nem el\\u00e9rhet\\u0151 az automatikus t\\u00f6rzs param\\u00e9terekhez.\\r\\nVegye ki a pip\\u00e1t az az automatikus kit\\u00f6lt\\u00e9s mell\\u0151l ennek az \\u00fczenetnek az elket\\u00fcl\\u00e9s\\u00e9hez.\n-info.selecttrait = V\\u00e1lasszon ki egy oszt\\u00e1lyt \\u00e9s kattintson egy jellemz\\u0151re az Actionscript forr\\u00e1sban a szerkeszt\\u00e9shez.\n+info.selecttrait = V\\u00e1lasszon ki egy oszt\\u00e1lyt \\u00e9s kattintson egy jellemz\\u0151re az ActionScript forr\\u00e1sban a szerkeszt\\u00e9shez.\n \n button.viewgraph = Gr\\u00e1f mutat\\u00e1sa\n button.viewhex = Hexa mutat\\u00e1sa\n@@ -206,7 +206,7 @@ button.viewhex = Hexa mutat\\u00e1sa\n abc.traitslist.instanceinitializer = p\\u00e9ld\\u00e1ny inicializ\\u00e1l\\u00f3\n abc.traitslist.classinitializer = oszt\\u00e1ly inicializ\\u00e1l\\u00f3\n \n-action.edit.experimental = (Kis\\u00e9rleti)\n+action.edit.experimental = (K\\u00eds\\u00e9rleti)\n \n message.action.saved = K\\u00f3d sikeresen lementve\n \n@@ -264,13 +264,13 @@ FileChooser.fileAttrHeaderText = Tulajdons\\u00e1gok\n FileChooser.openDialogTitleText = Megnyit\\u00e1s\n FileChooser.directoryDescriptionText = K\\u00f6nyvt\\u00e1r\n FileChooser.directoryOpenButtonText = Megnyit\\u00e1s\n-FileChooser.directoryOpenButtonToolTipText = A kiv\\u00e1laszott k\\u00f6nyvt\\u00e1r megnyit\\u00e1sa\n+FileChooser.directoryOpenButtonToolTipText = A kiv\\u00e1lasztott k\\u00f6nyvt\\u00e1r megnyit\\u00e1sa\n FileChooser.fileDescriptionText = \\u00c1ltal\\u00e1nos f\\u00e1jl\n FileChooser.fileNameLabelText = F\\u00e1jln\\u00e9v:\n FileChooser.helpButtonText = S\\u00fag\\u00f3\n FileChooser.helpButtonToolTipText = FileChooser s\\u00fag\\u00f3\n FileChooser.newFolderAccessibleName = \\u00daj mappa\n-FileChooser.newFolderErrorText = Hiva az \\u00faj mappa l\\u00e9trehoz\\u00e1sakor\n+FileChooser.newFolderErrorText = Hiba az \\u00faj mappa l\\u00e9trehoz\\u00e1sakor\n FileChooser.newFolderToolTipText = \\u00daj mappa l\\u00e9trehoz\\u00e1sa\n FileChooser.other.newFolder = \\u00dajMappa\n FileChooser.other.newFolder.subsequent = \\u00dajMappa.{0}\n@@ -322,4 +322,16 @@ button.abort = Megszak\\u00edt\n button.retry = Ism\\u00e9t\n button.ignore = Mell\\u0151z\n \n-font.source = Forr\\u00e1s bet\\u0171t\\u00edpus:\n\\ No newline at end of file\n+font.source = Forr\\u00e1s bet\\u0171t\\u00edpus:\n+\n+#after version 1.6.7:\n+menu.export = Export\\u00e1l\\u00e1s\n+menu.general = \\u00c1ltal\\u00e1nos\n+menu.language = Nyelv\n+\n+startup.welcometo = \\u00dcdv\\u00f6zli az\n+startup.selectopen = A kezd\\u00e9shez kattintson a megnyit\\u00e1s ikonra a fels\\u0151 panelen, vagy h\\u00fazzon egy SWF f\\u00e1jlt ebbe az ablakba.\n+\n+error.font.nocharacter = A kiv\\u00e1lasztott forr\\u00e1s bet\\u0171t\\u00edpus nem tartalmazza a \"%char%\" karaktert.\n+\n+warning.initializers = WARNING:\\nA statikus mez\\u0151k \\u00e9s konstansok gyakram az initializerekben vannak inicializ\\u00e1lva.\\nAz \\u00e9rt\\u00e9k szerkeszt\\u00e9se csak itt \\u00e1ltal\\u00e1ban nem elegend\\u0151!\n\\ No newline at end of file\ndiff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties\nindex 033b48cc1..ee20fe515 100644\n--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties\n+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties\n@@ -313,4 +313,16 @@ button.abort = \\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c\n button.retry = \\u041f\\u043e\\u0432\\u0442\\u043e\\u0440\\u0438\\u0442\\u044c\n button.ignore = \\u0418\\u0433\\u043d\\u043e\\u0440\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c\n \n-font.source = \\u0418\\u043c\\u043f\\u043e\\u0440\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0438\\u0437 \\u0448\\u0440\\u0438\\u0444\\u0442\\u0430:\n\\ No newline at end of file\n+font.source = \\u0418\\u043c\\u043f\\u043e\\u0440\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0438\\u0437 \\u0448\\u0440\\u0438\\u0444\\u0442\\u0430:\n+\n+#after version 1.6.7:\n+menu.export = \\u042d\\u043a\\u0441\\u043f\\u043e\\u0440\\u0442\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c\n+menu.general = \\u041e\\u0431\\u0449\\u0438\\u0435\n+menu.language = \\u042f\\u0437\\u044b\\u043a\n+\n+startup.welcometo = \\u0414\\u043e\\u0431\\u0440\\u043e \\u043f\\u043e\\u0436\\u0430\\u043b\\u043e\\u0432\\u0430\\u0442\\u044c \\u0432\n+startup.selectopen = \\u041d\\u0430\\u0436\\u043c\\u0438\\u0442\\u0435 \\u0437\\u043d\\u0430\\u0447\\u0435\\u043a \"\\u043e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044c\" \\u043d\\u0430 \\u0432\\u0435\\u0440\\u0445\\u043d\\u0435\\u0439 \\u043f\\u0430\\u043d\\u0435\\u043b\\u0438 \\u0438\\u043b\\u0438 \\u043f\\u0435\\u0440\\u0435\\u0442\\u0430\\u0449\\u0438\\u0442\\u0435 SWF \\u0444\\u0430\\u0439\\u043b \\u0432 \\u044d\\u0442\\u043e \\u043e\\u043a\\u043d\\u043e.\n+\n+error.font.nocharacter = \\u0421\\u0438\\u043c\\u0432\\u043e\\u043b \"%char%\" \\u043e\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0432 \\u0432\\u044b\\u0431\\u0440\\u0430\\u043d\\u043d\\u043e\\u043c \\u0448\\u0440\\u0438\\u0444\\u0442\\u0435.\n+\n+warning.initializers = \\u0412\\u041d\\u0418\\u041c\\u0410\\u041d\\u0418\\u0415:\\n\\u0421\\u0442\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0435 \\u043f\\u043e\\u043b\\u044f \\u0438 \\u043a\\u043e\\u043d\\u0441\\u0442\\u0430\\u043d\\u0442\\u044b \\u0437\\u0430\\u0447\\u0430\\u0441\\u0442\\u0443\\u044e \\u0438\\u043d\\u0438\\u0446\\u0438\\u0430\\u043b\\u0438\\u0437\\u0438\\u0440\\u0443\\u044e\\u0442\\u0441\\u044f \\u0432 \\u0438\\u043d\\u0438\\u0446\\u0438\\u0430\\u043b\\u0438\\u0437\\u0430\\u0442\\u043e\\u0440\\u0430\\u0445.\\n\\u0421\\u043a\\u043e\\u0440\\u0435\\u0435 \\u0432\\u0441\\u0435\\u0433\\u043e, \\u043f\\u043e\\u0442\\u0440\\u0435\\u0431\\u0443\\u0435\\u0442\\u0441\\u044f \\u0438\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u0438\\u0445 \\u043d\\u0435 \\u0442\\u043e\\u043b\\u044c\\u043a\\u043e \\u0437\\u0434\\u0435\\u0441\\u044c, \\u043d\\u043e \\u0438 \\u0442\\u0430\\u043c!\n\\ No newline at end of file",
    "Adding test cases to core without transport dependency": "diff --git a/modules/ballerina-core/pom.xml b/modules/ballerina-core/pom.xml\nindex 77446ee1620..68d49cccdd9 100644\n--- a/modules/ballerina-core/pom.xml\n+++ b/modules/ballerina-core/pom.xml\n@@ -116,11 +116,6 @@\n             <groupId>org.apache.commons</groupId>\n             <artifactId>commons-lang3</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>org.apache.activemq</groupId>\n-            <artifactId>activemq-broker</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n     </dependencies>\n \n     <build>\ndiff --git a/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java\nnew file mode 100644\nindex 00000000000..5e4bb0ac17a\n--- /dev/null\n+++ b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java\n@@ -0,0 +1,60 @@\n+package org.wso2.ballerina.lang.service;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerina.core.EnvironmentInitializer;\n+import org.wso2.ballerina.core.exception.BallerinaException;\n+import org.wso2.ballerina.core.model.Application;\n+import org.wso2.ballerina.core.runtime.ServerConnectorMessageHandler;\n+import org.wso2.ballerina.core.runtime.dispatching.jms.Constants;\n+import org.wso2.carbon.messaging.CarbonMessage;\n+import org.wso2.carbon.messaging.TextCarbonMessage;\n+\n+/**\n+ * Testing the JMS Service Dispatcher.\n+ */\n+public class JMSServiceTest {\n+    private Application application;\n+\n+    @BeforeClass\n+    public void setup() {\n+        application = EnvironmentInitializer.setup(\"lang/service/serviceLevelVariable.bal\");\n+    }\n+\n+    @Test(description = \"Test for exceptions when a jms message does not have a service id\")\n+    public void testJMSServiceAvailabilityCheckWithoutJmsServiceId() {\n+        try {\n+            CarbonMessage cMsg = new TextCarbonMessage(\"test\");\n+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);\n+            ServerConnectorMessageHandler.handleInbound(cMsg, null);\n+            Assert.fail(\"Exception is not thrown when a message is passed without jms service id\");\n+        } catch (BallerinaException ex) {\n+            Assert.assertEquals(ex.getCause().getMessage(), \"org.wso2.ballerina.core.exception.BallerinaException: \"\n+                            + \"error in ballerina program: service Id is not found in JMS Message\",\n+                    \"Exception message does not match when the message is passed without service id\");\n+        }\n+    }\n+\n+    @Test(description = \"est for exceptions when a jms message contains non-existing service id\")\n+    public void testJMSServiceAvailabilityWithWrongServiceId() {\n+        try {\n+            CarbonMessage cMsg = new TextCarbonMessage(\"test\");\n+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);\n+            cMsg.setProperty(Constants.JMS_SERVICE_ID, \"testabc\");\n+            ServerConnectorMessageHandler.handleInbound(cMsg, null);\n+            Assert.fail(\"Exception is not thrown when a non-existing service is called\");\n+        } catch (BallerinaException ex) {\n+            Assert.assertEquals(ex.getCause().getMessage(), \"org.wso2.ballerina.core.exception.BallerinaException: \"\n+                    + \"error in ballerina program: no jms service is registered with the service id testabc\",\n+                    \"Exception message does not match when the message is passed is dispatched to non-existing \"\n+                    + \"service\");\n+        }\n+    }\n+\n+    @AfterClass\n+    public void tearDown() {\n+        EnvironmentInitializer.cleanup(application);\n+    }\n+}\ndiff --git a/modules/ballerina-core/src/test/resources/testng.xml b/modules/ballerina-core/src/test/resources/testng.xml\nindex 3b0ba42742f..15ae323e24d 100644\n--- a/modules/ballerina-core/src/test/resources/testng.xml\n+++ b/modules/ballerina-core/src/test/resources/testng.xml\n@@ -93,6 +93,7 @@ under the License.\n         <classes>\n             <class name=\"org.wso2.ballerina.TestConfigurationUtil\" />\n             <class name=\"org.wso2.ballerina.lang.service.ServiceVariableTest\"/>\n+            <class name=\"org.wso2.ballerina.lang.service.JMSServiceTest\" />\n         </classes>\n     </test>\n ",
    "added deploy profile": "diff --git a/pom.xml b/pom.xml\nindex abf278304c..d0e9c75401 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -348,6 +348,14 @@\n \t\t\t  <properties>\n \t\t\t    <maven.test.failure.ignore>true</maven.test.failure.ignore>\n \t\t\t  </properties>\n+    </profile>\n+    <profile>\n+      <id>deploy</id>\n+      <modules>\n+        <module>modules/activiti-spring</module>\n+        <module>modules/activiti-cxf</module>\n+        <module>modules/activiti-mule</module>\n+      </modules>\n     </profile>\n \t\t<profile>\n \t\t\t<id>check</id>",
    "Added some more grandfathering tests": "diff --git a/src/java/voldemort/client/protocol/admin/AdminClient.java b/src/java/voldemort/client/protocol/admin/AdminClient.java\nindex f16315d46..3787176be 100644\n--- a/src/java/voldemort/client/protocol/admin/AdminClient.java\n+++ b/src/java/voldemort/client/protocol/admin/AdminClient.java\n@@ -546,11 +546,20 @@ public class AdminClient {\n         }\n     }\n \n+    /**\n+     * For a particular store and node, runs the replication job\n+     * \n+     * @param restoringNodeId The node which we want to restore\n+     * @param cluster The cluster metadata\n+     * @param storeDef The definition of the store which we want to restore\n+     * @param executorService An executor to allow us to run the replication job\n+     */\n     private void restoreStoreFromReplication(final int restoringNodeId,\n                                              final Cluster cluster,\n                                              final StoreDefinition storeDef,\n                                              final ExecutorService executorService) {\n-        logger.info(\"Restoring data for store:\" + storeDef.getName());\n+        logger.info(\"Restoring data for store \" + storeDef.getName() + \" on node \"\n+                    + restoringNodeId);\n         RoutingStrategyFactory factory = new RoutingStrategyFactory();\n         RoutingStrategy strategy = factory.updateRoutingStrategy(storeDef, cluster);\n \n@@ -589,9 +598,18 @@ public class AdminClient {\n         }\n     }\n \n-    private Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,\n-                                                              int nodeId,\n-                                                              RoutingStrategy strategy) {\n+    /**\n+     * For a particular node and routing strategy, generates a mapping of node\n+     * to their corresponding list of replica partitions.\n+     * \n+     * @param cluster The cluster metadata\n+     * @param nodeId The id of the node\n+     * @param strategy The routing strategy used\n+     * @return Mapping of node to replica partitions of nodeId\n+     */\n+    public Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,\n+                                                             int nodeId,\n+                                                             RoutingStrategy strategy) {\n         Map<Integer, Integer> partitionsToNodeMapping = RebalanceUtils.getCurrentPartitionMapping(cluster);\n         HashMap<Integer, List<Integer>> restoreMapping = new HashMap<Integer, List<Integer>>();\n \n@@ -618,6 +636,23 @@ public class AdminClient {\n         return restoreMapping;\n     }\n \n+    /**\n+     * For a particular node id and routing strategy, finds all the partitions\n+     * which are replicas to the partitions belonging to this particular node.\n+     * This returned list includes the partitions belonging to the particular\n+     * node as well. <br>\n+     * \n+     * For example, say we have 4 nodes, N_0 => P_3, N_1 => P_0, N_2 => P_1 and\n+     * N_3 => P_2 and if zone routing is being used then the replica mapping is\n+     * P_3 => P_1, P_0 => P_1, P_1 => P_3 and P_2 => P_3. So if we're moving\n+     * node N_0, the replicas of partition P_3 would be P_1 and P_2 ( in other\n+     * words we need to read from nodes N_2 and N_3 respectively)\n+     * \n+     * @param cluster The cluster metadata\n+     * @param nodeId The id of the node\n+     * @param strategy Routing strategy used\n+     * @return List of replica partitions\n+     */\n     private List<Integer> getNodePartitions(Cluster cluster, int nodeId, RoutingStrategy strategy) {\n         List<Integer> partitionsList = new ArrayList<Integer>(cluster.getNodeById(nodeId)\n                                                                      .getPartitionIds());\ndiff --git a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java\nindex 239f4174d..60273a500 100644\n--- a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java\n+++ b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java\n@@ -276,13 +276,13 @@ public class RebalanceClusterPlan {\n     public static void main(String args[]) throws IOException {\n         OptionParser parser = new OptionParser();\n         parser.accepts(\"help\", \"print help information\");\n-        parser.accepts(\"cluster-xml\", \"[REQUIRED] cluster xml file location\")\n+        parser.accepts(\"cluster-xml\", \"[REQUIRED] old cluster xml file location\")\n               .withRequiredArg()\n               .describedAs(\"path\");\n         parser.accepts(\"stores-xml\", \"[REQUIRED] stores xml file location\")\n               .withRequiredArg()\n               .describedAs(\"path\");\n-        parser.accepts(\"old-cluster-xml\", \"[REQUIRED] old cluster xml file location\")\n+        parser.accepts(\"target-cluster-xml\", \"[REQUIRED] new cluster xml file location\")\n               .withRequiredArg()\n               .describedAs(\"path\");\n \n@@ -296,20 +296,21 @@ public class RebalanceClusterPlan {\n         Set<String> missing = CmdUtils.missing(options,\n                                                \"cluster-xml\",\n                                                \"stores-xml\",\n-                                               \"old-cluster-xml\");\n+                                               \"target-cluster-xml\");\n         if(missing.size() > 0) {\n             System.err.println(\"Missing required arguments: \" + Joiner.on(\", \").join(missing));\n             parser.printHelpOn(System.err);\n             System.exit(1);\n         }\n \n-        String newClusterXml = (String) options.valueOf(\"cluster-xml\");\n-        String oldClusterXml = (String) options.valueOf(\"old-cluster-xml\");\n+        String newClusterXml = (String) options.valueOf(\"target-cluster-xml\");\n+        String oldClusterXml = (String) options.valueOf(\"cluster-xml\");\n         String storesXml = (String) options.valueOf(\"stores-xml\");\n \n         if(!Utils.isReadableFile(newClusterXml) || !Utils.isReadableFile(oldClusterXml)\n            || !Utils.isReadableFile(storesXml)) {\n             System.err.println(\"Could not read files\");\n+            parser.printHelpOn(System.err);\n             System.exit(1);\n         }\n \ndiff --git a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java\nindex 1a428a99a..fc91cb3a8 100644\n--- a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java\n+++ b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java\n@@ -51,7 +51,6 @@ import voldemort.store.ErrorCodeMapper;\n import voldemort.store.StorageEngine;\n import voldemort.store.StoreDefinition;\n import voldemort.store.StoreOperationFailureException;\n-import voldemort.store.grandfather.GrandfatherState;\n import voldemort.store.metadata.MetadataStore;\n import voldemort.store.readonly.FileFetcher;\n import voldemort.store.readonly.ReadOnlyStorageConfiguration;\n@@ -259,8 +258,8 @@ public class AdminServiceRequestHandler implements RequestHandler {\n \n             if(metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {\n                 // If normal, set the state + rebalancer state\n-                metadataStore.put(MetadataStore.GRANDFATHERING_INFO,\n-                                  new GrandfatherState(plans, storeDefs));\n+                // metadataStore.put(MetadataStore.GRANDFATHERING_INFO,\n+                // new GrandfatherState(plans, storeDefs));\n                 metadataStore.put(MetadataStore.SERVER_STATE_KEY,\n                                   MetadataStore.VoldemortState.GRANDFATHERING_SERVER);\n             }\ndiff --git a/src/java/voldemort/store/metadata/MetadataStore.java b/src/java/voldemort/store/metadata/MetadataStore.java\nindex 69b1b1339..615e03367 100644\n--- a/src/java/voldemort/store/metadata/MetadataStore.java\n+++ b/src/java/voldemort/store/metadata/MetadataStore.java\n@@ -496,8 +496,9 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {\n             RebalancerState rebalancerState = (RebalancerState) value.getValue();\n             valueStr = rebalancerState.toJsonString();\n         } else if(GRANDFATHERING_INFO.equals(key)) {\n-            GrandfatherState grandfatherState = (GrandfatherState) value.getValue();\n-            valueStr = grandfatherState.toJsonString();\n+            // GrandfatherState grandfatherState = (GrandfatherState)\n+            // value.getValue();\n+            // valueStr = grandfatherState.toJsonString();\n         } else if(SERVER_STATE_KEY.equals(key) || NODE_ID_KEY.equals(key)) {\n             valueStr = value.getValue().toString();\n         } else {\n@@ -537,12 +538,13 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {\n                 valueObject = new RebalancerState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));\n             }\n         } else if(GRANDFATHERING_INFO.equals(key)) {\n-            String valueString = value.getValue();\n-            if(valueString.startsWith(\"[\")) {\n-                valueObject = GrandfatherState.create(valueString);\n-            } else {\n-                valueObject = new GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));\n-            }\n+            // String valueString = value.getValue();\n+            // if(valueString.startsWith(\"[\")) {\n+            // valueObject = GrandfatherState.create(valueString);\n+            // } else {\n+            // valueObject = new\n+            // GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));\n+            // }\n         } else {\n             throw new VoldemortException(\"Unhandled key:'\" + key\n                                          + \"' for String to Object serialization.\");\ndiff --git a/test/common/voldemort/ServerTestUtils.java b/test/common/voldemort/ServerTestUtils.java\nindex 77b1b1197..10d324d1a 100644\n--- a/test/common/voldemort/ServerTestUtils.java\n+++ b/test/common/voldemort/ServerTestUtils.java\n@@ -22,8 +22,10 @@ import java.io.IOException;\n import java.io.StringReader;\n import java.net.ServerSocket;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.Properties;\n \n@@ -40,6 +42,7 @@ import voldemort.client.protocol.admin.AdminClient;\n import voldemort.client.protocol.admin.AdminClientConfig;\n import voldemort.cluster.Cluster;\n import voldemort.cluster.Node;\n+import voldemort.cluster.Zone;\n import voldemort.routing.RoutingStrategyType;\n import voldemort.serialization.SerializerDefinition;\n import voldemort.server.AbstractSocketService;\n@@ -72,6 +75,7 @@ import voldemort.xml.ClusterMapper;\n import voldemort.xml.StoreDefinitionsMapper;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n \n /**\n  * Helper functions for testing with real server implementations\n@@ -277,6 +281,64 @@ public class ServerTestUtils {\n         return new Cluster(\"test-cluster\", nodes);\n     }\n \n+    /**\n+     * Returns a cluster with <b>numberOfNodes</b> nodes in <b>numberOfZones</b>\n+     * zones. It is important that <b>numberOfNodes</b> be divisible by\n+     * <b>numberOfZones</b>\n+     * \n+     * @param numberOfNodes Number of nodes in the cluster\n+     * @param numberOfZones Number of zones\n+     * @return Cluster\n+     */\n+    public static Cluster getLocalCluster(int numberOfNodes, int numberOfZones) {\n+\n+        if(numberOfZones > 0 && numberOfNodes > 0 && numberOfNodes % numberOfZones != 0) {\n+            throw new VoldemortException(\"The number of nodes (\" + numberOfNodes\n+                      ",
    "Fixing test case": "diff --git a/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java b/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java\nindex cd1105914d0..54dabecb1a7 100644\n--- a/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java\n+++ b/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java\n@@ -29,6 +29,7 @@ import org.wso2.siddhi.core.query.extension.util.StringConcatAggregatorString;\n import org.wso2.siddhi.core.query.output.callback.QueryCallback;\n import org.wso2.siddhi.core.stream.input.InputHandler;\n import org.wso2.siddhi.core.util.EventPrinter;\n+import org.wso2.siddhi.query.api.exception.ExecutionPlanValidationException;\n \n public class ExtensionTestCase {\n     static final Logger log = Logger.getLogger(ExtensionTestCase.class);\n@@ -119,7 +120,7 @@ public class ExtensionTestCase {\n         executionPlanRuntime.shutdown();\n     }\n \n-    @Test\n+    @Test(expected = ExecutionPlanValidationException.class)\n     public void extensionTest3() throws InterruptedException {\n         log.info(\"extension test3\");\n         SiddhiManager siddhiManager = new SiddhiManager();",
    "update error message , update test script": "diff --git a/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache b/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache\nindex 04f0a006356..b0c3c9b5d39 100644\n--- a/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache\n+++ b/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache\n@@ -7,7 +7,7 @@ use utf8;\n use LWP::UserAgent;\n use HTTP::Headers;\n use HTTP::Response;\n-use HTTP::Request::Common;\n+use HTTP::Request::Common qw(DELETE POST GET HEAD PUT);\n use HTTP::Status;\n use URI::Query;\n use JSON;\n@@ -75,7 +75,8 @@ sub call_api {\n   }\n \n   # body data\n-  my $_body_data = %$post_params ? $post_params : to_json($body_data->to_hash);\n+  $body_data = to_json($body_data->to_hash) if defined $body_data && $body_data->can('to_hash'); # model to json string\n+  my $_body_data = %$post_params ? $post_params : $body_data;\n \n   # Make the HTTP request\n   my $_request;\n@@ -84,6 +85,7 @@ sub call_api {\n       # multipart\n       my $_content_type = lc $header_params->{'Content-Type'} eq 'multipart/form' ? \n           'form-data' : $header_params->{'Content-Type'};\n+\n       $_request = POST($_url, Accept => $header_params->{Accept},\n         Content_Type => $_content_type, Content => $_body_data);\n     }\n@@ -98,9 +100,17 @@ sub call_api {\n       $_request = GET($_url, Accept => $header_params->{'Accept'},\n         Content_Type => $header_params->{'Content-Type'});\n     }\n-    case 'PUT' {\n-\n+    case 'HEAD' {\n+      $_request = HEAD($_url, Accept => $header_params->{'Accept'},\n+        Content_Type => $header_params->{'Content-Type'});\n     }\n+    case 'DELETE' { #TODO support form data\n+      $_request = DELETE($_url, Accept => $header_params->{'Accept'},\n+        Content_Type => $header_params->{'Content-Type'}, Content => $_body_data);\n+    }\n+    case 'PATCH' { #TODO\n+    }\n+\n   }\n  \n   $ua->timeout($http_timeout); \n@@ -109,8 +119,7 @@ sub call_api {\n   my $_response = $ua->request($_request);\n \n   unless ($_response->is_success) {\n-    croak(\"Can't connect to the server\");\n-    #croak(\"Can't connect to the api ($_response{code}): $_response{message}\");\n+    croak(\"API Exception(\".$_response->code.\"): \".$_response->message);\n   }\n      \n   return $_response->content;\ndiff --git a/modules/swagger-codegen/src/main/resources/perl/api.mustache b/modules/swagger-codegen/src/main/resources/perl/api.mustache\nindex 7eb16b8a1a5..25c0d80fb95 100644\n--- a/modules/swagger-codegen/src/main/resources/perl/api.mustache\n+++ b/modules/swagger-codegen/src/main/resources/perl/api.mustache\n@@ -112,7 +112,11 @@ sub new {\n       }{{/pathParams}}\n       {{#formParams}} # form params\n       if ( exists $args->{'{{paramName}}'} ) {\n-        $form_params->{'{{baseName}}'} = {{#isFile}}'@' . {{/isFile}}WWW::{{invokerPackage}}::APIClient::to_form_value($args->{'{{paramName}}'});\n+        {{#isFile}}$form_params->{'{{baseName}}'} = [] unless defined $form_params->{'{{baseName}}'};\n+        push $form_params->{'{{baseName}}'}, $args->{'{{paramName}}'};\n+        {{/isFile}}\n+        {{^isFile}}$form_params->{'{{baseName}}'} = WWW::{{invokerPackage}}::APIClient::to_form_value($args->{'{{paramName}}'});\n+        {{/isFile}}\n       }{{/formParams}}\n       my $_body_data;\n       {{#bodyParams}} # body params\ndiff --git a/samples/client/petstore/perl/http.pl b/samples/client/petstore/perl/http.pl\ndeleted file mode 100644\nindex 282b06ba3e5..00000000000\n--- a/samples/client/petstore/perl/http.pl\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-use LWP::UserAgent;\n- \n-my $ua = LWP::UserAgent->new;\n- \n-my $server_endpoint = \"http://petstore.swagger.io/v2/pet/10002\";\n- \n-# set custom HTTP request header fields\n-my $req = HTTP::Request->new(GET => $server_endpoint);\n-$req->header('content-type' => 'application/json');\n-\n-use Data::Dumper;\n-print Dumper($req);\n- \n-my $resp = $ua->request($req);\n-if ($resp->is_success) {\n-    my $message = $resp->decoded_content;\n-    print \"Received reply: $message\\n\";\n-}\n-else {\n-    print \"HTTP GET error code: \", $resp->code, \"\\n\";\n-    print \"HTTP GET error message: \", $resp->message, \"\\n\";\n-}\n-\n-\n-\ndiff --git a/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm b/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm\nindex 577bd23003f..6d0ecc44dc6 100644\n--- a/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm\n+++ b/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm\n@@ -7,7 +7,7 @@ use utf8;\n use LWP::UserAgent;\n use HTTP::Headers;\n use HTTP::Response;\n-use HTTP::Request::Common;\n+use HTTP::Request::Common qw(DELETE POST GET HEAD PUT);\n use HTTP::Status;\n use URI::Query;\n use JSON;\n@@ -75,7 +75,8 @@ sub call_api {\n   }\n \n   # body data\n-  my $_body_data = %$post_params ? $post_params : to_json($body_data->to_hash);\n+  $body_data = to_json($body_data->to_hash) if defined $body_data && $body_data->can('to_hash'); # model to json string\n+  my $_body_data = %$post_params ? $post_params : $body_data;\n \n   # Make the HTTP request\n   my $_request;\n@@ -84,6 +85,7 @@ sub call_api {\n       # multipart\n       my $_content_type = lc $header_params->{'Content-Type'} eq 'multipart/form' ? \n           'form-data' : $header_params->{'Content-Type'};\n+\n       $_request = POST($_url, Accept => $header_params->{Accept},\n         Content_Type => $_content_type, Content => $_body_data);\n     }\n@@ -98,9 +100,17 @@ sub call_api {\n       $_request = GET($_url, Accept => $header_params->{'Accept'},\n         Content_Type => $header_params->{'Content-Type'});\n     }\n-    case 'PUT' {\n-\n+    case 'HEAD' {\n+      $_request = HEAD($_url, Accept => $header_params->{'Accept'},\n+        Content_Type => $header_params->{'Content-Type'});\n     }\n+    case 'DELETE' { #TODO support form data\n+      $_request = DELETE($_url, Accept => $header_params->{'Accept'},\n+        Content_Type => $header_params->{'Content-Type'}, Content => $_body_data);\n+    }\n+    case 'PATCH' { #TODO\n+    }\n+\n   }\n  \n   $ua->timeout($http_timeout); \n@@ -109,8 +119,7 @@ sub call_api {\n   my $_response = $ua->request($_request);\n \n   unless ($_response->is_success) {\n-    croak(\"Can't connect to the server\");\n-    #croak(\"Can't connect to the api ($_response{code}): $_response{message}\");\n+    croak(\"API Exception(\".$_response->code.\"): \".$_response->message);\n   }\n      \n   return $_response->content;\ndiff --git a/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm b/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm\nindex 8b02083e637..bd7c0b5fc6b 100644\n--- a/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm\n+++ b/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm\n@@ -385,10 +385,14 @@ sub new {\n       }\n        # form params\n       if ( exists $args->{'name'} ) {\n+        \n         $form_params->{'name'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'name'});\n+        \n       } # form params\n       if ( exists $args->{'status'} ) {\n+        \n         $form_params->{'status'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'status'});\n+        \n       }\n       my $_body_data;\n       \n@@ -513,10 +517,15 @@ sub new {\n       }\n        # form params\n       if ( exists $args->{'additional_metadata'} ) {\n+        \n         $form_params->{'additionalMetadata'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'additional_metadata'});\n+        \n       } # form params\n       if ( exists $args->{'file'} ) {\n-        $form_params->{'file'} = '@' . WWW::SwaggerClient::APIClient::to_form_value($args->{'file'});\n+        $form_params->{'file'} = [] unless defined $form_params->{'file'};\n+        push $form_params->{'file'}, $args->{'file'};\n+        \n+        \n       }\n       my $_body_data;\n       \ndiff --git a/samples/client/petstore/perl/test.pl b/samples/client/petstore/perl/test.pl\nindex 3fb7c3e0a08..504461710cd 100644\n--- a/samples/client/petstore/perl/test.pl\n+++ b/samples/client/petstore/perl/test.pl\n@@ -1,7 +1,7 @@\n #!/usr/bin/perl\n #\n #\n-\n+use lib 'lib';\n use strict;\n use warnings;\n use WWW::SwaggerClient::PetApi;\n@@ -15,46 +15,26 @@ use DateTime;\n \n my $api = WWW::SwaggerClient::PetApi->new();\n \n-#print WWW::SwaggerClient::APIClient::to_form_value('testing 123');\n-\n my $pet_id = 88;\n-my $dt = DateTime->new(\n-  year      => 1972,\n-  month     => 12,\n-  day       => 31,\n-  hour      => 23,\n-  minute    => 59,\n-  second    => 30,\n-  time_zone => 'UTC'\n-);\n-\n-print \"dt = $dt\\n\";\n-print \"dt = \".$dt->datetime().\"\\n\";\n-\n-\n-my $category =  WWW::SwaggerClient::Object::Category->new({'id' => '2', 'name' => 'pending'});\n-my $tag =  WWW::SwaggerClient::Object::Tag->new({'id' => '1', 'name' => 'just kidding', \n-    \"photoUrls\" => ['123', 'oop']});\n+\n+my $category =  WWW::SwaggerClient::Object::Category->new({'id' => '2', 'name' => 'perl'});\n+my $tag =  WWW::SwaggerClient::Object::Tag->new({'id' => '1', 'name' => 'just kidding'}); \n my $pet =  WWW::SwaggerClient::Object::Pet->new({'id' => $pet_id, 'name' => 'perl test', \n-    \"photoUrls\" => ['123', 'oop'], 'tags' => [$tag], 'status' => 'pending'});\n+    \"photoUrls\" => ['123', 'oop'], 'tags' => [$tag], 'status' => 'pending', 'category' => $category});\n \n-print Dumper $pet;\n+print \"\\npet(object)=\".Dumper $pet;\n my $json = JSON->new->convert_blessed;\n \n-#print $json->convert_blessed->encode($pet);\n-#print $json->get_convert_blessed;\n-print Dumper($pet->to_hash);\n-#my $pet2 = WWW::SwaggerClient::Model::Pet->from_json($pet->to_hash);\n-my $pet2 = WWW::SwaggerClient::Object::Pet->new();\n-$pet2 = $pet2->from_hash($pet->to_hash);\n-#$pet2->from_json($pet->to_hash);\n-print Dumper($pet2->to_hash);\n-#exit;\n-print \"============================\\n\";\n-print Dumper $api->add_pet({body => $pet});\n-#print Dumper $api->get_pet_by_id({pet_id => $pet_id});\n-#print Dumper $api->update_pet_with_form({pet_id => $pet_id, name => 'test_name', status => 'test status'});\n-#print Dumper $api->delete_pet({pet_id => $pet_id});\n+my $new_pet = WWW::SwaggerClient::Object::Pet->new();\n+$new_pet = $new_pet->from_hash($pet->to_hash);\n+print \"new_pet(hash):\".Dumper($new_pet->to_hash);\n+\n+print \"\\nTest Petstore endpoints\\n\";\n+#print \"\\nupload_file:\".Dumper $api->upload_file({pet_id => $pet_id, additional_metadata => 'testabc', file => '/var/tmp/f5.jpg'});\n+print \"\\nadd_pet:\".Dumper $api->add_pet({body => $pet});\n+print \"\\nget_pet_by_id:\".Dumper $api->get_pet_by_id({pet_id => $pet_id});\n+print \"\\nupdate_pet_with_form:\".Dumper $api->update_pet_with_form({pet_id => $pet_id, name => 'test_name', status => 'test status'});\n+print \"\\ndelete_pet:\".Dumper $api->delete_pet({pet_id => $pet_id});\n \n \n ",
    "Fixed some warnings .": "diff --git a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java\nindex 4c11d194a..958fd94f5 100644\n--- a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java\n+++ b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java\n@@ -18,11 +18,8 @@\n \n package com.sk89q.bukkit.util;\n \n-import com.sk89q.minecraft.util.commands.Command;\n import org.bukkit.command.CommandExecutor;\n import org.bukkit.command.CommandSender;\n-import org.bukkit.plugin.Plugin;\n-\n import java.util.Arrays;\n \n /**",
    "Convert RestIntegTestTask to Java ( <issue_id> ) ( <issue_id> ) .": "diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy\ndeleted file mode 100644\nindex 99e4a2be5bc..00000000000\n--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy\n+++ /dev/null\n@@ -1,96 +0,0 @@\n-/*\n- * Licensed to Elasticsearch under one or more contributor\n- * license agreements. See the NOTICE file distributed with\n- * this work for additional information regarding copyright\n- * ownership. Elasticsearch licenses this file to you under\n- * the Apache License, Version 2.0 (the \"License\"); you may\n- * not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.elasticsearch.gradle.test\n-\n-import org.elasticsearch.gradle.testclusters.ElasticsearchCluster\n-import org.elasticsearch.gradle.testclusters.RestTestRunnerTask\n-import org.gradle.api.DefaultTask\n-import org.gradle.api.Task\n-import org.gradle.api.tasks.testing.Test\n-\n-/**\n- * A wrapper task around setting up a cluster and running rest tests.\n- */\n-class RestIntegTestTask extends DefaultTask {\n-\n-    protected Test runner\n-\n-    RestIntegTestTask() {\n-        runner = project.tasks.create(\"${name}Runner\", RestTestRunnerTask.class)\n-        super.dependsOn(runner)\n-\n-        ElasticsearchCluster cluster = project.testClusters.create(name)\n-        runner.useCluster cluster\n-\n-        runner.include('**/*IT.class')\n-        runner.systemProperty('tests.rest.load_packaged', 'false')\n-\n-        if (System.getProperty(\"tests.rest.cluster\") == null) {\n-            if (System.getProperty(\"tests.cluster\") != null) {\n-                throw new IllegalArgumentException(\"tests.rest.cluster and tests.cluster must both be null or non-null\")\n-            }\n-\n-            runner.nonInputProperties.systemProperty('tests.rest.cluster', \"${-> cluster.allHttpSocketURI.join(\",\")}\")\n-            runner.nonInputProperties.systemProperty('tests.cluster', \"${-> cluster.transportPortURI}\")\n-            runner.nonInputProperties.systemProperty('tests.clustername', \"${-> cluster.getName()}\")\n-        } else {\n-            if (System.getProperty(\"tests.cluster\") == null) {\n-                throw new IllegalArgumentException(\"tests.rest.cluster and tests.cluster must both be null or non-null\")\n-            }\n-            // an external cluster was specified and all responsibility for cluster configuration is taken by the user\n-            runner.systemProperty('tests.rest.cluster', System.getProperty(\"tests.rest.cluster\"))\n-            runner.systemProperty('test.cluster', System.getProperty(\"tests.cluster\"))\n-        }\n-\n-        // this must run after all projects have been configured, so we know any project\n-        // references can be accessed as a fully configured\n-        project.gradle.projectsEvaluated {\n-            if (enabled == false) {\n-                runner.enabled = false\n-                return // no need to add cluster formation tasks if the task won't run!\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Task dependsOn(Object... dependencies) {\n-        runner.dependsOn(dependencies)\n-        for (Object dependency : dependencies) {\n-            if (dependency instanceof Fixture) {\n-                runner.finalizedBy(((Fixture)dependency).getStopTask())\n-            }\n-        }\n-        return this\n-    }\n-\n-    @Override\n-    public void setDependsOn(Iterable<?> dependencies) {\n-        runner.setDependsOn(dependencies)\n-        for (Object dependency : dependencies) {\n-            if (dependency instanceof Fixture) {\n-                runner.finalizedBy(((Fixture)dependency).getStopTask())\n-            }\n-        }\n-    }\n-\n-    public void runner(Closure configure) {\n-        project.tasks.getByName(\"${name}Runner\").configure(configure)\n-    }\n-\n-}\ndiff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java\nindex 7e808724035..cfabb5575f6 100644\n--- a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java\n@@ -5,11 +5,16 @@ import org.gradle.process.CommandLineArgumentProvider;\n \n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n public class SystemPropertyCommandLineArgumentProvider implements CommandLineArgumentProvider {\n     private final Map<String, Object> systemProperties = new LinkedHashMap<>();\n \n+    public void systemProperty(String key, Supplier<String> value) {\n+        systemProperties.put(key, value);\n+    }\n+\n     public void systemProperty(String key, Object value) {\n         systemProperties.put(key, value);\n     }\n@@ -18,7 +23,12 @@ public class SystemPropertyCommandLineArgumentProvider implements CommandLineArg\n     public Iterable<String> asArguments() {\n         return systemProperties.entrySet()\n             .stream()\n-            .map(entry -> \"-D\" + entry.getKey() + \"=\" + entry.getValue())\n+            .map(\n+                entry -> \"-D\"\n+                    + entry.getKey()\n+                    + \"=\"\n+                    + (entry.getValue() instanceof Supplier ? ((Supplier) entry.getValue()).get() : entry.getValue())\n+            )\n             .collect(Collectors.toList());\n     }\n \ndiff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java\nsimilarity index 89%\nrename from buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy\nrename to buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java\nindex 498a1627b35..551acec4e75 100644\n--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java\n@@ -7,7 +7,7 @@\n  * not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n@@ -16,7 +16,8 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.elasticsearch.gradle.test\n+\n+package org.elasticsearch.gradle.test;\n \n /**\n  * Any object that can produce an accompanying stop task, meant to tear down\n@@ -25,6 +26,6 @@ package org.elasticsearch.gradle.test\n public interface Fixture {\n \n     /** A task which will stop this fixture. This should be used as a finalizedBy for any tasks that use the fixture. */\n-    public Object getStopTask()\n+    Object getStopTask();\n \n }\ndiff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java\nnew file mode 100644\nindex 00000000000..4a05067df45\n--- /dev/null\n+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java\n@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gradle.test;\n+\n+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;\n+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;\n+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;\n+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;\n+import org.gradle.api.Action;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.NamedDomainObjectContainer;\n+import org.gradle.api.Project;\n+import org.gradle.api.Task;\n+\n+public class RestIntegTestTask extends DefaultTask {\n+\n+    protected RestTestRunnerTask runner;\n+    private static final String TESTS_REST_CLUSTER = \"tests.rest.cluster\";\n+    private static final String TESTS_CLUSTER = \"tests.cluster\";\n+    private static final String TESTS_CLUSTER_NAME = \"tests.clustername\";\n+\n+    public RestIntegTestTask() {\n+        Project project = getProject();\n+        String name = getName();\n+        runner = project.getTasks().create(name + \"Runner\", RestTestRunnerTask.class);\n+        super.dependsOn(runner);\n+        @SuppressWarnings(\"unchecked\")\n+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project\n+            .getExtensions()\n+            .getByName(TestClustersPlugin.EXTENSION_NAME);\n+        ElasticsearchCluster cluster = testClusters.create(name);\n+        runner.useCluster(cluster);\n+        runner.include(\"**/*IT.class\");\n+        runner.systemProperty(\"tests.rest.load_packaged\", Boolean.FALSE.toString());\n+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {\n+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner\n+                .getExtensions()\n+                .getByName(\"nonInputProperties\");\n+            runnerNonInputProperties.systemProperty(TESTS_REST_CLUSTER, () -> String.join(\",\", cluster.getAllHttpSocketURI()));\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER, () -> String.join(\",\", cluster.getAllTransportPortURI()));\n+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, cluster::getName);\n+        } else {\n+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {\n+                throw new IllegalArgumentException(\n+                    String.format(\"%s, %s, and %s must all be null or non-null\", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)\n+                );\n+            }\n+        }\n+        // this must run after all projects have been configured, so we know any project\n+        // references can be accessed as a fully configured\n+        project.getGradle().projectsEvaluated(x -> {\n+            if (isEnabled() == false) {\n+                runner.setEnabled(false);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Task dependsOn(Object... dependencies) {\n+        runner.dependsOn(dependencies);\n+        for (Object dependency : dependencies) {\n+            if (dependency instanceof Fixture) {\n+                runner.finalizedBy(((Fixture) dependency).getStopTask());\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public void setDependsOn(Iterable<?> dependencies) {\n+        runner.setDependsOn(dependencies);\n+        for (Object dependency : dependencies) {\n+            if (dependency instanceof Fixture) {\n+                runner.finalizedBy(((Fixture) dependency).getStopTask());\n+            }\n+        }\n+    }\n+\n+    public void runner(Action<? super RestTestRunnerTask> configure) {\n+        configure.execute(runner);\n+    }\n+}",
    "Introduce Whale hook for Android": "diff --git a/edxp-core/build.gradle b/edxp-core/build.gradle\nindex 9e1a3998..01b3910c 100644\n--- a/edxp-core/build.gradle\n+++ b/edxp-core/build.gradle\n@@ -69,6 +69,27 @@ afterEvaluate {\n         }\n \n         pushTask.dependsOn(zipTask)\n+\n+        zipTask = task(\"zipWhale${nameCapped}\", type: Exec, dependsOn: \":edxp-whale:makeAndCopy${nameCapped}\") {\n+            workingDir '..'\n+            commandLine 'sh', 'build.sh',    \\\n+                        project.name,    \\\n+                        \"Whale-${project.version}-${nameLowered}\",    \\\n+                        \"${project.extensions['module_name']}\"\n+        }\n+\n+        pushTask = task(\"pushWhale${nameCapped}\", type: Exec) {\n+            workingDir 'release'\n+            def commands = [\"adb\", \"push\", \"magisk-${project.extensions['module_name']}-Whale\" +\n+                    \"-${project.version}-${nameLowered}.zip\", \"/sdcard/\"]\n+            if (OperatingSystem.current().isWindows()) {\n+                commandLine 'cmd', '/c', commands.join(\" \")\n+            } else {\n+                commandLine commands\n+            }\n+        }\n+\n+        pushTask.dependsOn(zipTask)\n     }\n \n }\ndiff --git a/edxp-core/jni/main/native_hook/native_hook.h b/edxp-core/jni/main/native_hook/native_hook.h\nindex 0a79f2c2..eb6f7a9a 100644\n--- a/edxp-core/jni/main/native_hook/native_hook.h\n+++ b/edxp-core/jni/main/native_hook/native_hook.h\n@@ -5,10 +5,10 @@\n \n #if defined(__LP64__)\n static constexpr const char *kLibArtPath = \"/system/lib64/libart.so\";\n-static constexpr const char *kLibWhalePath = \"/system/lib64/libwhale.so\";\n+static constexpr const char *kLibWhalePath = \"/system/lib64/libwhale.edxp.so\";\n #else\n static constexpr const char *kLibArtPath = \"/system/lib/libart.so\";\n-static constexpr const char *kLibWhalePath = \"/system/lib/libwhale.so\";\n+static constexpr const char *kLibWhalePath = \"/system/lib/libwhale.edxp.so\";\n #endif\n \n #define XHOOK_REGISTER(NAME) \\\ndiff --git a/edxp-core/template_override/system/etc/public.libraries-edxp.txt b/edxp-core/template_override/system/etc/public.libraries-edxp.txt\nindex 3c8badba..03b2c76d 100644\n--- a/edxp-core/template_override/system/etc/public.libraries-edxp.txt\n+++ b/edxp-core/template_override/system/etc/public.libraries-edxp.txt\n@@ -1 +1,2 @@\n libsandhook.edxp.so\n+libwhale.edxp.so\ndiff --git a/edxp-core/template_override/system/lib/libwhale.so b/edxp-core/template_override/system/lib/libwhale.edxp.so\nsimilarity index 100%\nrename from edxp-core/template_override/system/lib/libwhale.so\nrename to edxp-core/template_override/system/lib/libwhale.edxp.so\ndiff --git a/edxp-core/template_override/system/lib64/libwhale.so b/edxp-core/template_override/system/lib64/libwhale.edxp.so\nsimilarity index 100%\nrename from edxp-core/template_override/system/lib64/libwhale.so\nrename to edxp-core/template_override/system/lib64/libwhale.edxp.so\ndiff --git a/edxp-core/template_override/system_x86/lib/libwhale.so b/edxp-core/template_override/system_x86/lib/libwhale.edxp.so\nsimilarity index 100%\nrename from edxp-core/template_override/system_x86/lib/libwhale.so\nrename to edxp-core/template_override/system_x86/lib/libwhale.edxp.so\ndiff --git a/edxp-core/template_override/system_x86/lib64/libwhale.so b/edxp-core/template_override/system_x86/lib64/libwhale.edxp.so\nsimilarity index 100%\nrename from edxp-core/template_override/system_x86/lib64/libwhale.so\nrename to edxp-core/template_override/system_x86/lib64/libwhale.edxp.so\ndiff --git a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java\nindex da08315b..967b2410 100644\n--- a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java\n+++ b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java\n@@ -2,12 +2,10 @@ package com.elderdrivers.riru.edxp.sandhook.config;\n \n import com.elderdrivers.riru.edxp.hook.HookProvider;\n import com.elderdrivers.riru.edxp.sandhook.dexmaker.DexMakerUtils;\n-import com.elderdrivers.riru.edxp.sandhook.dexmaker.DynamicBridge;\n import com.elderdrivers.riru.edxp.sandhook.util.PrebuiltMethodsDeopter;\n import com.swift.sandhook.xposedcompat.XposedCompat;\n import com.swift.sandhook.xposedcompat.methodgen.SandHookXposedBridge;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Member;\n \n import de.robv.android.xposed.XposedBridge;\n@@ -19,7 +17,7 @@ public class SandHookProvider implements HookProvider {\n     }\n \n     @Override\n-    public Object invokeOriginalMethod(Member method, Object thisObject, Object[] args) throws Throwable {\n+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {\n         return SandHookXposedBridge.invokeOriginalMethod(method, thisObject, args);\n     }\n \n@@ -32,4 +30,9 @@ public class SandHookProvider implements HookProvider {\n     public void deoptMethods(String packageName, ClassLoader classLoader) {\n         PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);\n     }\n+\n+    @Override\n+    public long getMethodId(Member member) {\n+        return 0;\n+    }\n }\ndiff --git a/edxp-whale/.gitignore b/edxp-whale/.gitignore\nnew file mode 100644\nindex 00000000..796b96d1\n--- /dev/null\n+++ b/edxp-whale/.gitignore\n@@ -0,0 +1 @@\n+/build\ndiff --git a/edxp-whale/build.gradle b/edxp-whale/build.gradle\nnew file mode 100644\nindex 00000000..7087eedb\n--- /dev/null\n+++ b/edxp-whale/build.gradle\n@@ -0,0 +1,61 @@\n+apply plugin: 'com.android.application'\n+\n+android {\n+    compileSdkVersion 28\n+\n+    defaultConfig {\n+        applicationId \"com.elderdrivers.riru.edxp.whale\"\n+        minSdkVersion 26\n+        targetSdkVersion 28\n+        versionCode 1\n+        versionName \"1.0\"\n+    }\n+\n+    buildTypes {\n+        release {\n+            minifyEnabled false\n+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n+        }\n+    }\n+\n+}\n+\n+dependencies {\n+    compileOnly files(\"libs/framework-stub.jar\")\n+    implementation project(':edxp-common')\n+    implementation project(':xposed-bridge')\n+}\n+\n+\n+preBuild.doLast {\n+    def imlFile = file(project.name + \".iml\")\n+    println 'Change ' + project.name + '.iml order'\n+    try {\n+        def parsedXml = (new groovy.util.XmlParser()).parse(imlFile)\n+        def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }\n+        parsedXml.component[1].remove(jdkNode)\n+        def sdkString = \"Android API \" + android.compileSdkVersion.substring(\"android-\".length()) + \" Platform\"\n+        new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])\n+        groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))\n+    } catch (FileNotFoundException e) {\n+        // nop, iml not found\n+    }\n+}\n+\n+afterEvaluate {\n+\n+    tasks.withType(JavaCompile) {\n+        options.compilerArgs.add(\"-Xbootclasspath/p:${projectDir.absolutePath}/libs/framework-stub.jar\")\n+    }\n+\n+    android.applicationVariants.all { variant ->\n+        def nameCapped = variant.name.capitalize()\n+        def nameLowered = variant.name.toLowerCase()\n+\n+        def makeAndCopyTask = task(\"makeAndCopy${nameCapped}\", type: Jar, dependsOn: \"assemble${nameCapped}\") {\n+            from \"build/intermediates/dex/${nameLowered}/mergeDex${nameCapped}/out/\"\n+            destinationDir file(\"../edxp-core/template_override/system/framework/\")\n+            baseName \"edxp\"\n+        }\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/edxp-whale/libs/framework-stub.jar b/edxp-whale/libs/framework-stub.jar\nnew file mode 100644\nindex 00000000..36cd86b3\nBinary files /dev/null and b/edxp-whale/libs/framework-stub.jar differ\ndiff --git a/edxp-whale/proguard-rules.pro b/edxp-whale/proguard-rules.pro\nnew file mode 100644\nindex 00000000..1d01a7a1\n--- /dev/null\n+++ b/edxp-whale/proguard-rules.pro\n@@ -0,0 +1,33 @@\n+# Add project specific ProGuard rules here.\n+# You can control the set of applied configuration files using the\n+# proguardFiles setting in build.gradle.\n+#\n+# For more details, see\n+#   http://developer.android.com/guide/developing/tools/proguard.html\n+\n+# If your project uses WebView with JS, uncomment the following\n+# and specify the fully qualified class name to the JavaScript interface\n+# class:\n+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n+#   public *;\n+#}\n+\n+# Uncomment this to preserve the line number information for\n+# debugging stack traces.\n+#-keepattributes SourceFile,LineNumberTable\n+\n+# If you keep the line number information, uncomment this to\n+# hide the original source file name.\n+#-renamesourcefileattribute SourceFile\n+\n+-dontobfuscate\n+-keep class de.robv.android.xposed.** {*;}\n+-keep class android.** { *; }\n+\n+-keep interface com.elderdrivers.riru.common.KeepAll\n+-keep interface com.elderdrivers.riru.common.KeepMembers\n+\n+-keep class * implements com.elderdrivers.riru.common.KeepAll { *; }\n+-keepclassmembers class * implements com.elderdrivers.riru.common.KeepMembers { *; }\n+\n+-keep class * com.lody.** {*;}\n\\ No newline at end of file\ndiff --git a/edxp-whale/src/main/AndroidManifest.xml b/edxp-whale/src/main/AndroidManifest.xml\nnew file mode 100644\nindex 00000000..38b7acf3\n--- /dev/null\n+++ b/edxp-whale/src/main/AndroidManifest.xml\n@@ -0,0 +1 @@\n+<manifest package=\"com.elderdrivers.riru.edxp.whale\" />\ndiff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java\nnew file mode 100644\nindex 00000000..33d4939e\n--- /dev/null\n+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java\n@@ -0,0 +1,146 @@\n+package com.elderdrivers.riru.edxp;\n+\n+import android.annotation.SuppressLint;\n+import android.os.Build;\n+import android.os.Process;\n+\n+import com.elderdrivers.riru.common.KeepAll;\n+import com.elderdrivers.riru.edxp.BuildConfig;\n+import com.elderdrivers.riru.edxp.config.InstallerChooser;\n+import com.elderdrivers.riru.edxp.yahfa.core.HookMethodResolver;\n+import com.elderdrivers.riru.edxp.yahfa.entry.Router;\n+import com.elderdrivers.riru.edxp.yahfa.proxy.BlackWhiteListProxy;\n+import com.elderdrivers.riru.edxp.yahfa.proxy.NormalProxy;\n+import com.elderdrivers.riru.edxp.util.Utils;\n+import com.lody.whale.WhaleRuntime;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+@SuppressLint(\"DefaultLocale\")\n+public class Main implements KeepAll {\n+\n+    public static String appDataDir = \"\";\n+    public static String niceName = \"\";\n+    public static String appProcessName = \"\";\n+    private static String forkAndSpecializePramsStr = \"\";\n+    private static String forkSystemServerPramsStr = \"\";\n+\n+    static {\n+        init(Build.VERSION.SDK_INT);\n+        HookMethodResolver.init();\n+        Router.injectConfig();\n+        InstallerChooser.setInstallerPackageName(getInstallerPkgName());\n+        try {\n+        WhaleRuntime.getMethodSlot(null);\n+        } catch (Throwable throwable) {}\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////////\n+    // entry points\n+    ///////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public static void forkAndSpecializePre(int uid, int gid, int[] gids, int debugFlags,\n+                                            int[][] rlimits, int mountExternal, String seInfo,\n+                                            String niceName, int[] fdsToClose, int[] fdsToIgnore,\n+                                            boolean startChildZygote, String instructionSet,\n+                                            String appDataDir) {\n+        if (BuildConfig.DEBUG) {\n+            forkAndSpecializePramsStr = String.format(\n+                    \"Zygote#forkAndSpecialize(%d, %d, %s, %d, %s, %d, %s, %s, %s, %s, %s, %s, %s)\",\n+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),\n+                    mountExternal, seInfo, niceName, Arrays.toString(fdsToClose),\n+                    Arrays.toString(fdsToIgnore), startChildZygote, instructionSet, appDataDir);\n+        }\n+        if (isBlackWhiteListEnabled()) {\n+            BlackWhiteListProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits,\n+                    mountExternal, seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote,\n+                    instructionSet, appDataDir);\n+        } else {\n+            NormalProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits, mountExternal,\n+                    seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote, instructionSet,\n+                    appDataDir);\n+        }\n+    }\n+\n+    public static void forkAndSpecializePost(int pid, String appDataDir, String niceName) {\n+        if (pid == 0) {\n+            Utils.logD(forkAndSpecializePramsStr + \" = \" + Process.myPid());\n+            if (isBlackWhiteListEnabled()) {\n+                BlackWhiteListProxy.forkAndSpecializePost(pid, appDataDir, niceName);\n+            } else {\n+                NormalProxy.forkAndSpecializePost(pid, appDataDir, niceName);\n+            }\n+        } else {\n+            // in zygote process, res is child zygote pid\n+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66\n+        }\n+    }\n+\n+    public static void forkSystemServerPre(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits,\n+                                           long permittedCapabilities, long effectiveCapabilities) {\n+        if (BuildConfig.DEBUG) {\n+            forkSystemServerPramsStr = String.format(\"Zygote#forkSystemServer(%d, %d, %s, %d, %s, %d, %d)\",\n+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),\n+                    permittedCapabilities, effectiveCapabilities);\n+        }\n+        if (isBlackWhiteListEnabled()) {\n+            BlackWhiteListProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,\n+                    permittedCapabilities, effectiveCapabilities);\n+        } else {\n+            NormalProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,\n+                    permittedCapabilities, effectiveCapabilities);\n+        }\n+    }\n+\n+    public static void forkSystemServerPost(int pid) {\n+        if (pid == 0) {\n+            Utils.logD(forkSystemServerPramsStr + \" = \" + Process.myPid());\n+            if (isBlackWhiteListEnabled()) {\n+                BlackWhiteListProxy.forkSystemServerPost(pid);\n+            } else {\n+                NormalProxy.forkSystemServerPost(pid);\n+            }\n+        } else {\n+            // in zygote process, res is child zygote pid\n+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66\n+        }\n+    }\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////////\n+    // native methods\n+    ///////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    public static native boolean backupAndHookNative(Object target, Method hook, Method backup);\n+\n+    public static native void setMethodNonCompilable(Object member);\n+\n+    public static native void ensureMethodCached(Method hook, Method backup);\n+\n+    // JNI.ToReflectedMethod() could return either Method or Constructor\n+    public static native Object findMethodNative(Class targetClass, String methodName, String methodSig);\n+\n+    private static native void init(int SDK_version);\n+\n+    public static native String getInstallerPkgName();\n+\n+    public static native boolean isBlackWhiteListEnabled();\n+\n+    public static native boolean isDynamicModulesEnabled();\n+\n+    public static native boolean isAppNeedHook(String appDataDir);\n+\n+    // prevent from fatal error caused by holding not whitelisted file descriptors when forking zygote\n+    // https://github.com/rovo89/Xposed/commit/b3ba245ad04cd485699fb1d2ebde7117e58214ff\n+    public static native void closeFilesBeforeForkNative();\n+\n+    public static native void reopenFilesAfterForkNative();\n+\n+    public static native void deoptMethodNative(Object object);\n+\n+    public static native long suspendAllThreads();\n+\n+    public static native void resumeAllThreads(long obj);\n+\n+    public static native int waitForGcToComplete(long thread);\n+}\ndiff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java\nnew file mode 100644\nindex 00000000..60f364bd\n--- /dev/null\n+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java\n@@ -0,0 +1,23 @@\n+package com.elderdrivers.riru.edxp.yahfa.config;\n+\n+import com.elderdrivers.riru.edxp.config.EdXpConfig;\n+import com.elderdrivers.riru.edxp.config.InstallerChooser;\n+import com.elderdrivers.riru.edxp.Main;\n+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.XposedBlackListHooker;\n+\n+public class WhaleEdxpConfig implements EdXpConfig {\n+    @Override\n+    public String getInstallerBaseDir() {\n+        return InstallerChooser.INSTALLER_DATA_BASE_DIR;\n+    }\n+\n+    @Override\n+    public String getBlackListModulePackageName() {\n+        return XposedBlackListHooker.BLACK_LIST_PACKAGE_NAME;\n+    }\n+\n+    @Override\n+    public boolean isDynamicModulesMode() {\n+        return Main.isDynamicModulesEnabled();\n+    }\n+}\ndiff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java\nnew file mode 100644\nindex 00000000..cb94160b\n--- /dev/null\n+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java\n@@ -0,0 +1,37 @@\n+package com.elderdrivers.riru.edxp.yahfa.config;\n+\n+import com.elderdrivers.riru.edxp.hook.HookProvider;\n+import com.elderdrivers.riru.edxp.yahfa.util.PrebuiltMethodsDeopter;\n+import com.lody.whale.WhaleRuntime;\n+\n+import java.lang.reflect.Member;\n+\n+import de.robv.android.xposed.XposedBridge;\n+\n+public class WhaleHookProvider implements HookProvider {\n+\n+    @Override\n+    public void hookMethod(Member method, XposedBridge.AdditionalHookInfo additionalInfo) {\n+        WhaleRuntime.hookMethodNative(method.getDeclaringClass(), method, additionalInfo);\n+    }\n+\n+    @Override\n+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {\n+        return WhaleRuntime.invokeOriginalMethodNative(methodId, thisObject, args);\n+    }\n+\n+    @Override\n+    public Member findMethodNative(Member hookMethod) {\n+        return hookMethod;\n+    }\n+\n+    @Override\n+    public void deoptMethods(String packageName, ClassLoader classLoader) {\n+        PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);\n+    }\n+\n+    @Override\n+    public long getMethodId(Member member) {\n+        return WhaleRuntime.getMethodSlot(member);\n+    }\n+}\ndiff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java\nnew file mode 100644\nindex 00000000..13da190a\n--- /dev/null\n+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java\n@@ -0,0 +1,186 @@\n+package com.elderdrivers.riru.edxp.yahfa.core;\n+\n+import com.elderdrivers.riru.edxp.Main;\n+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.OnePlusWorkAroundHooker;\n+import com.elderdrivers.riru.edxp.util.Utils;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import de.robv.android.xposed.XposedHelpers;\n+\n+import static com.elderdrivers.riru.edxp.Main.backupAndHookNative;\n+import static com.elderdrivers.riru.edxp.Main.findMethodNative;\n+\n+public class HookMain {\n+\n+    private static Set<String> hookItemWhiteList = Collections.singleton(OnePlusWorkAroundHooker.class.getName());\n+\n+    public static void doHookDefault(ClassLoader patchClassLoader, ClassLoader originClassLoader, String hookInfoClassName) {\n+        try {\n+            Class<?> hookInfoClass = Class.forName(hookInfoClassName, true, patchClassLoader);\n+            String[] hookItemNames = (String[]) hookInfoClass.getField(\"hookItemNames\").get(null);\n+            for (String hookItemName : hookItemNames) {\n+                doHookItemDefault(patchClassLoader, hookItemName, originClassLoader);\n+            }\n+        } catch (Throwable e) {\n+            Utils.logE(\"error when hooking all in: \" + hookInfoClassName, e);\n+        }\n+    }\n+\n+    private static void doHookItemDefault(ClassLoader patchClassLoader, String hookItemName, ClassLoader originClassLoader) {\n+        try {\n+            Utils.logD(\"Start hooking with item \" + hookItemName);\n+            Class<?> hookItem = Class.forName(hookItemName, true, patchClassLoader);\n+\n+            String className = (String) hookItem.getField(\"className\").get(null);\n+            String methodName = (String) hookItem.getField(\"methodName\").get(null);\n+            String methodSig = (String) hookItem.getField(\"methodSig\").get(null);\n+\n+            if (className == null || className.equals(\"\")) {\n+                Utils.logW(\"No target class. Skipping...\");\n+                return;\n+            }\n+            Class<?> clazz = null;\n+            try {\n+                clazz = Class.forName(className, true, originClassLoader);\n+            } catch (ClassNotFoundException cnfe) {\n+                Utils.logE(className + \" not found in \" + originClassLoader);\n+                return;\n+            }\n+            if (Modifier.isAbstract(clazz.getModifiers())) {\n+                Utils.logW(\"Hook may fail for abstract class: \" + className);\n+            }\n+\n+            Method hook = null;\n+            Method backup = null;\n+            for (Method method : hookItem.getDeclaredMethods()) {\n+                if (method.getName().equals(\"hook\") && Modifier.isStatic(method.getModifiers())) {\n+                    hook = method;\n+                } else if (method.getName().equals(\"backup\") && Modifier.isStatic(method.getModifiers())) {\n+                    backup = method;\n+                }\n+            }\n+            if (hook == null) {\n+                Utils.logE(\"Cannot find hook for \" + methodName);\n+                return;\n+            }\n+            findAndBackupAndHook(clazz, methodName, methodSig, hook, backup);\n+        } catch (Throwable e) {\n+            if (!hookItemWhiteList.contains(hookItemName)) {\n+                Utils.logE(\"error when hooking \" + hookItemName, e);\n+            }\n+        }\n+    }\n+\n+    public static void findAndHook(Class targetClass, String methodName, String methodSig, Method hook) {\n+        hook(findMethod(targetClass, methodName, methodSig), hook);\n+    }\n+\n+    public static void findAndBackupAndHook(Class targetClass, String methodName, String methodSig,\n+                                            Method hook, Method backup) {\n+        backupAndHook(findMethod(targetClass, methodName, methodSig), hook, backup);\n+    }\n+\n+    public static void hook(Object target, Method hook) {\n+        backupAndHook(target, hook, null);\n+    }\n+\n+    public static void backupAndHook(Object target, Method hook, Method backup) {\n+        Utils.logD(String.format(\"target=%s, hook=%s, backup=%s\", target, hook, backup));\n+        if (target == null) {\n+            throw new IllegalArgumentException(\"null target method\");\n+        }\n+        if (hook == null) {\n+            throw new IllegalArgumentException(\"null hook method\");\n+        }\n+\n+        if (!Modifier.isStatic(hook.getModifiers())) {\n+            throw new IllegalArgumentException(\"Hook must be a static method: \" + hook);\n+        }\n+        checkCompatibleMethods(target, hook, \"Original\", \"Hook\");\n+        if (backup != null) {\n+            if (!Modifier.isStatic(backup.getModifiers())) {\n+                throw new IllegalArgumentException(\"Backup must be a static method: \" + backup);\n+            }\n+            // backup is just a placeholder and the constraint could be less strict\n+            checkCompatibleMethods(target, backup, \"Original\", \"Backup\");\n+        }\n+        if (backup != null) {\n+            HookMethodResolver.resolveMethod(hook, backup);\n+        }\n+        // make sure GC completed before hook\n+        Thread currentThread = Thread.currentThread();\n+        int lastGcType = Main.waitForGcToComplete(\n+                XposedHelpers.getLongField(currentThread, \"nativePeer\"));\n+        if (lastGcType < 0) {\n+            Utils.logW(\"waitForGcToComplete failed, using fallback\");\n+            Runtime.getRuntime().gc();\n+        }\n+        if (!backupAndHookNative(target, hook, backup)) {\n+            throw new RuntimeException(\"Failed to hook \" + target + \" with \" + hook);\n+        }\n+    }\n+\n+    public static Object findMethod(Class cls, String methodName, String methodSig) {\n+        if (cls == null) {\n+            throw new IllegalArgumentException(\"null class\");\n+        }\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\"null method name\");\n+        }\n+        if (methodSig == null) {\n+            throw new IllegalArgumentException(\"null method signature\");\n+        }\n+        return findMethodNative(cls, methodName, methodSig);\n+    }\n+\n+    private static void checkCompatibleMethods(Object original, Method replacement, String originalName, String replacementName) {\n+        ArrayList<Class<?>> originalParams;\n+        if (original instanceof Method) {\n+            originalParams = new ArrayList<>(Arrays.asList(((Method) original).getParameterTypes()));\n+        } else if (original instanceof Constructor) {\n+            originalParams = new ArrayList<>(Arrays.asList(((Constructor<?>) original).getParameterTypes()));\n+        } else",
    "do all the operations on SQLite connections in a single thread , remove reset from ShadowSQLiteConnection .": "diff --git a/src/main/java/org/robolectric/Robolectric.java b/src/main/java/org/robolectric/Robolectric.java\nindex de8203987..a674be4a6 100644\n--- a/src/main/java/org/robolectric/Robolectric.java\n+++ b/src/main/java/org/robolectric/Robolectric.java\n@@ -1317,7 +1317,6 @@ public class Robolectric {\n     ShadowStatFs.reset();\n     ShadowTypeface.reset();\n     ShadowCursorWindow.reset();\n-    //ShadowSQLiteConnection.reset();\n   }\n \n   public static <T extends Activity> ActivityController<T> buildActivity(Class<T> activityClass) {\ndiff --git a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java\nindex 02b8dcfdd..80237a12d 100644\n--- a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java\n+++ b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java\n@@ -11,7 +11,12 @@ import org.robolectric.util.SQLiteLibraryLoader;\n \n import java.io.File;\n import java.util.Map;\n+import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n@@ -31,10 +36,6 @@ public class ShadowSQLiteConnection {\n     SQLiteLibraryLoader.load();\n   }\n \n-  public static void reset() {\n-    CONNECTIONS.reset();\n-  }\n-\n   private static SQLiteConnection connection(final int pointer) {\n     return CONNECTIONS.getConnection(pointer);\n   }\n@@ -68,138 +69,150 @@ public class ShadowSQLiteConnection {\n   }\n \n   @Implementation\n-  public static int nativeGetParameterCount(int connectionPtr, int statementPtr) {\n+  public static int nativeGetParameterCount(final int connectionPtr, final int statementPtr) {\n     if (statementPtr == IGNORED_REINDEX_STMT) { return 0; } // TODO\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      return stmt.getBindParameterCount();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot get parameters count in prepared statement\", e);\n-      return 0;\n-    }\n+    return CONNECTIONS.execute(\"get parameters count in prepared statement\", new Callable<Integer>() {\n+      @Override\n+      public Integer call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        return stmt.getBindParameterCount();\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static boolean nativeIsReadOnly(int connectionPtr, int statementPtr) {\n+  public static boolean nativeIsReadOnly(final int connectionPtr, final int statementPtr) {\n     if (statementPtr == IGNORED_REINDEX_STMT) { return true; } // TODO\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      return stmt.isReadOnly();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot call isReadOnly\", e);\n-      return false;\n-    }\n+    return CONNECTIONS.execute(\"call isReadOnly\", new Callable<Boolean>() {\n+      @Override\n+      public Boolean call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        return stmt.isReadOnly();\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static long nativeExecuteForLong(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      if (!stmt.step()) {\n-        throw new SQLiteDoneException();\n+  public static long nativeExecuteForLong(final int connectionPtr, final int statementPtr) {\n+    return CONNECTIONS.execute(\"execute for long\", new Callable<Long>() {\n+      @Override\n+      public Long call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        if (!stmt.step()) {\n+          throw new SQLiteDoneException();\n+        }\n+        return stmt.columnLong(0);\n       }\n-      return stmt.columnLong(0);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute for long\", e);\n-      return -1;\n-    }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeExecute(int connectionPtr, int statementPtr) {\n-    if (statementPtr == IGNORED_REINDEX_STMT) { return; }\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.stepThrough();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute\", e);\n-    }\n+  public static void nativeExecute(final int connectionPtr, final int statementPtr) {\n+    if (statementPtr == IGNORED_REINDEX_STMT) { return; } // TODO\n+    CONNECTIONS.execute(\"execute\", new Callable<Object>() {\n+      @Override\n+      public Object call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.stepThrough();\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static String nativeExecuteForString(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      if (!stmt.step()) {\n-        throw new SQLiteDoneException();\n+  public static String nativeExecuteForString(final int connectionPtr, final int statementPtr) {\n+    return CONNECTIONS.execute(\"execute for string\", new Callable<String>() {\n+      @Override\n+      public String call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        if (!stmt.step()) {\n+          throw new SQLiteDoneException();\n+        }\n+        return stmt.columnString(0);\n       }\n-      return stmt.columnString(0);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute for string\", e);\n-      return null;\n-    }\n+    });\n   }\n \n   @Implementation\n-  public static int nativeGetColumnCount(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      return stmt.columnCount();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot get columns count\", e);\n-      return 0;\n-    }\n+  public static int nativeGetColumnCount(final int connectionPtr, final int statementPtr) {\n+    return CONNECTIONS.execute(\"get columns count\", new Callable<Integer>() {\n+      @Override\n+      public Integer call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        return stmt.columnCount();\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static String nativeGetColumnName(int connectionPtr, int statementPtr, int index) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      return stmt.getColumnName(index);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot get column name at index \" + index, e);\n-      return null;\n-    }\n+  public static String nativeGetColumnName(final int connectionPtr, final int statementPtr, final int index) {\n+    return CONNECTIONS.execute(\"get column name at index \" + index, new Callable<String>() {\n+      @Override\n+      public String call() throws SQLiteException {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        return stmt.getColumnName(index);\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeBindNull(int connectionPtr, int statementPtr, int index) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.bindNull(index);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot bind null at index \" + index, e);\n-    }\n+  public static void nativeBindNull(final int connectionPtr, final int statementPtr, final int index) {\n+    CONNECTIONS.execute(\"bind null at index \" + index, new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.bindNull(index);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeBindLong(int connectionPtr, int statementPtr, int index, long value) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.bind(index, value);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot bind long at index \" + index, e);\n-    }\n+  public static void nativeBindLong(final int connectionPtr, final int statementPtr, final int index, final long value) {\n+    CONNECTIONS.execute(\"bind long at index \" + index + \" with value \" + value, new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.bind(index, value);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeBindDouble(int connectionPtr, int statementPtr, int index, double value) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.bind(index, value);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot bind double at index \" + index, e);\n-    }\n+  public static void nativeBindDouble(final int connectionPtr, final int statementPtr, final int index, final double value) {\n+    CONNECTIONS.execute(\"bind double at index \" + index + \" with value \" + value, new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.bind(index, value);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeBindString(int connectionPtr, int statementPtr, int index, String value) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.bind(index, value);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot bind string at index \" + index, e);\n-    }\n+  public static void nativeBindString(final int connectionPtr, final int statementPtr, final int index, final String value) {\n+    CONNECTIONS.execute(\"bind string at index \" + index, new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.bind(index, value);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static void nativeBindBlob(int connectionPtr, int statementPtr, int index, byte[] value) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.bind(index, value);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot bind blob at index \" + index, e);\n-    }\n+  public static void nativeBindBlob(final int connectionPtr, final int statementPtr, final int index, final byte[] value) {\n+    CONNECTIONS.execute(\"bind blob at index \" + index, new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.bind(index, value);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n@@ -210,50 +223,53 @@ public class ShadowSQLiteConnection {\n   }\n \n   @Implementation\n-  public static int nativeExecuteForChangedRowCount(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.stepThrough();\n-      return connection(connectionPtr).getChanges();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute for changed row count\", e);\n-      return 0;\n-    }\n+  public static int nativeExecuteForChangedRowCount(final int connectionPtr, final int statementPtr) {\n+    return CONNECTIONS.execute(\"execute for changed row count\", new Callable<Integer>() {\n+      @Override\n+      public Integer call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.stepThrough();\n+        return connection(connectionPtr).getChanges();\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static long nativeExecuteForLastInsertedRowId(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.stepThrough();\n-      return connection(connectionPtr).getLastInsertId();\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute for last inserted row ID\", e);\n-      return 0;\n-    }\n+  public static long nativeExecuteForLastInsertedRowId(final int connectionPtr, final int statementPtr) {\n+    return CONNECTIONS.execute(\"execute for last inserted row ID\", new Callable<Long>() {\n+      @Override\n+      public Long call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.stepThrough();\n+        return connection(connectionPtr).getLastInsertId();\n+      }\n+    });\n   }\n \n   @Implementation\n-  public static long nativeExecuteForCursorWindow(int connectionPtr, int statementPtr, int windowPtr,\n-                                                  int startPos, int requiredPos, boolean countAllRows) {\n-\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      return ShadowCursorWindow.setData(windowPtr, stmt);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot execute for cursor window\", e);\n-      return 0;\n-    }\n+  public static long nativeExecuteForCursorWindow(final int connectionPtr, final int statementPtr, final int windowPtr,\n+                                                  final int startPos, final int requiredPos, final boolean countAllRows) {\n+\n+    return CONNECTIONS.execute(\"execute for cursor window\", new Callable<Integer>() {\n+      @Override\n+      public Integer call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        return ShadowCursorWindow.setData(windowPtr, stmt);\n+      }\n+    });\n+\n   }\n \n   @Implementation\n-  public static void nativeResetStatementAndClearBindings(int connectionPtr, int statementPtr) {\n-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n-    try {\n-      stmt.reset(true);\n-    } catch (SQLiteException e) {\n-      rethrow(\"Cannot reset statement\", e);\n-    }\n+  public static void nativeResetStatementAndClearBindings(final int connectionPtr, final int statementPtr) {\n+    CONNECTIONS.execute(\"reset statement\", new Callable<Object>() {\n+      @Override\n+      public Object call() throws Exception {\n+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);\n+        stmt.reset(true);\n+        return null;\n+      }\n+    });\n   }\n \n   @Implementation\n@@ -291,11 +307,13 @@ public class ShadowSQLiteConnection {\n     private final Map<Integer, SQLiteStatement> statementsMap = new ConcurrentHashMap<Integer, SQLiteStatement>();\n     private final Map<Integer, SQLiteConnection> connectionsMap = new ConcurrentHashMap<Integer, SQLiteConnection>();\n \n+    private final ExecutorService dbExecutor = Executors.newSingleThreadExecutor();\n+\n     public SQLiteConnection getConnection(final int pointer) {\n       SQLiteConnection connection = connectionsMap.get(pointer);\n       if (connection == null) {\n         throw new IllegalStateException(\"Illegal connection pointer \" + pointer\n-            + \". Current posinters for thread \" + Thread.currentThread() + \" \" + connectionsMap.keySet());\n+            + \". Current pointers for thread \" + Thread.currentThread() + \" \" + connectionsMap.keySet());\n       }\n       return connection;\n     }\n@@ -314,68 +332,134 @@ public class ShadowSQLiteConnection {\n       return stmt;\n     }\n \n-    public int open(String path) {\n-      SQLiteConnection dbConnection = IN_MEMORY_PATH.equals(path)\n-          ? new SQLiteConnection()\n-          : new SQLiteConnection(new File(path));\n+    public int open(final String path) {\n \n-      try {\n-        dbConnection.open();\n-      } catch (SQLiteException e) {\n-        rethrow(\"Cannot open SQLite connection\", e);\n-      }\n+      SQLiteConnection dbConnection = execute(\"open SQLite connection\", new Callable<SQLiteConnection>() {\n+        @Override\n+        public SQLiteConnection call() throws Exception {\n+          SQLiteConnection connection = IN_MEMORY_PATH.equals(path)\n+              ? new SQLiteConnection()\n+              : new SQLiteConnection(new File(path));\n+\n+          connection.open();\n+\n+          return connection;\n+        }\n+      });\n \n       int ptr = pointerCounter.incrementAndGet();\n       connectionsMap.put(ptr, dbConnection);\n       return ptr;\n     }\n \n-    public int prepareStatement(int connectionPtr, String sql) {\n+    public int prepareStatement(final int connectionPtr, final String sql) {\n       // TODO: find a way to create collators\n       if (\"REINDEX LOCALIZED\".equals(sql)) {\n         return IGNORED_REINDEX_STMT;\n       }\n \n-      SQLiteConnection connection = getConnection(connectionPtr);\n-      try {\n-        SQLiteStatement stmt = connection.prepare(sql);\n-        int pointer = pointerCounter.incrementAndGet();\n-        statementsMap.put(pointer, stmt);\n-        return pointer;\n-      } catch (SQLiteException e) {\n-        rethrow(\"Cannot prepare statement \" + sql, e);\n-        return 0;\n-      }\n+      SQLiteStatement stmt = execute(\"prepare statement\", new Callable<SQLiteStatement>() {\n+        @Override\n+        public SQLiteStatement call() throws Exception {\n+          SQLiteConnection connection = getConnection(connectionPtr);\n+          return connection.prepare(sql);\n+        }\n+      });\n+\n+      int pointer = pointerCounter.incrementAndGet();\n+      statementsMap.put(pointer, stmt);\n+      return pointer;\n     }\n \n-    public void close(int ptr) {\n-      SQLiteConnection connection = getConnection(ptr);\n-      connection.dispose();\n+    public void close(final int ptr) {\n+      execute(\"close connection\", new Callable<Object>() {\n+        @Override\n+        public Object call() throws Exception {\n+          SQLiteConnection connection = getConnection(ptr);\n+          connection.dispose();\n+          return null;\n+        }\n+      });\n     }\n \n-    public void finalizeStmt(int connectionPtr, int statementPtr) {\n+    public void finalizeStmt(final int connectionPtr, final int statementPtr) {\n       if (statementPtr == IGNORED_REINDEX_STMT) {\n         return;\n       }\n-      SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);\n-      statementsMap.remove(statementPtr);\n-      stmt.dispose();\n+      execute(\"finalize statement\", new Callable<Object>() {\n+        @Override\n+        public Object call() throws Exception {\n+          SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);\n+          statementsMap.remove(statementPtr);\n+          stmt.dispose();\n+          return null;\n+        }\n+      });\n     }\n \n     public void cancel(int connectionPtr) {\n       getConnection(connectionPtr); // check connection\n \n-      SQLiteStatement statement = statementsMap.get(pointerCounter.get());\n-      if (statement != null) {\n-        statement.cancel();\n-      }\n+      execute(\"cancel\", new Callable<Object>() {\n+        @Override\n+        public Object call() throws Exception {\n+          SQLiteStatement statement = statementsMap.get(pointerCounter.get());\n+          if (statement != null) {\n+            statement.cancel();\n+          }\n+          return null;\n+        }\n+      });\n     }\n \n-    public void reset() {\n-      statementsMap.clear();\n-      connectionsMap.clear();\n+    public <T> T execute(final String comment, final Callable<T> work) {\n+      Future<DbOperationResult<T>> future = dbExecutor.submit(new Callable<DbOperationResult<T>>() {\n+        @Override\n+        public DbOperationResult<T> call() throws Exception {\n+          T result = null;\n+          Exception error = null;\n+          try {\n+            result = work.call();\n+          } catch (Exception e) {\n+            error = e;\n+          }\n+          return new DbOperationResult<T>(result, error);\n+        }\n+      });\n+\n+      DbOperationResult<T> execResult;\n+      try {\n+        execResult = future.get();\n+\n+        if (execResult.error != null) {\n+          if (execResult.error instanceof SQLiteException) {\n+            rethrow(\"Cannot \" + comment, (SQLiteException) execResult.error);\n+          } else if (execResult.error instanceof android.database.sqlite.SQLiteException) {\n+            throw (android.database.sqlite.SQLiteException) execResult.error;\n+          } else {\n+            throw new RuntimeException(execResult.error);\n+          }\n+        }\n+\n+        return execResult.value;\n+\n+      } catch (ExecutionException e) {\n+        throw new RuntimeException(e);\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+\n     }\n \n+    private static class DbOperationResult<T> {\n+      final T value;\n+      final Exception error;\n+\n+      DbOperationResult(T value, Exception error) {\n+        this.value = value;\n+        this.error = error;\n+      }\n+    }\n   }\n \n }\ndiff --git a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java\nindex 7f50988e6..8a65d2390 100644\n--- a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java\n+++ b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java\n@@ -15,6 +15,7 @@ import org.robolectric.Robolectric;\n import org.robolectric.TestRunners;\n \n import java.io.File;\n+import java.util.concurrent.CountDownLatch;\n \n import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;\n import static org.fest.assertions.api.Assertions.assertThat;\n@@ -687,6 +688,37 @@ public class SQLiteDatabaseTest extends DatabaseTestBase {\n     }\n   }\n \n+\n+  @Test\n+  public void shouldBeAbleToBeUsedFromDifferentThread() {\n+    final CountDownLatch sync = new CountDownLatch(1);\n+    final Throwable[] error = {null};\n+\n+    new Thread() {\n+      @Override\n+      public void run() {\n+        try {\n+          executeQuery(\"select * from table_name\");\n+        } catch (Throwable e) {\n+          e.printStackTrace();\n+          error[0] = e;\n+        } finally {\n+          sync.countDown();\n+        }\n+      }\n+    }\n+    .start();\n+\n+    try {\n+      sync.await();\n+    }",
    "Fixing some remaining Cypherland stuff around temporal values .": "diff --git a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java\nindex 115938955ac..a1c05e040a8 100644\n--- a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java\n+++ b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java\n@@ -296,43 +296,57 @@ public class Neo4jPackV1 implements Neo4jPack\n         @Override\n         public void writeDuration( long months, long days, long seconds, int nanos ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"Duration is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeDate( long epochDay ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"Date is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeLocalTime( long nanoOfDay ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"LocalTime is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"Time is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeLocalDateTime( long epochSecond, int nano ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"LocalDateTime is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"DateTime is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\n         public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws IOException\n         {\n-            throw new UnsupportedOperationException( \"not implemented\" );\n+            error = new Error( Status.Request.Invalid,\n+                    \"DateTime is not yet supported as a return type in Bolt\" );\n+            packNull();\n         }\n \n         @Override\ndiff --git a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java\nindex 57f9dcebc31..1f7c321a99f 100644\n--- a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java\n+++ b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java\n@@ -20,8 +20,14 @@\n package org.neo4j.cypher.internal.codegen;\n \n import java.lang.reflect.Array;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetTime;\n import java.time.ZoneId;\n import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -38,19 +44,15 @@ import org.neo4j.helpers.collection.ReverseArrayIterator;\n import org.neo4j.kernel.impl.core.EmbeddedProxySPI;\n import org.neo4j.values.AnyValueWriter;\n import org.neo4j.values.storable.CoordinateReferenceSystem;\n-import org.neo4j.values.storable.DateTimeValue;\n-import org.neo4j.values.storable.DateValue;\n import org.neo4j.values.storable.DurationValue;\n-import org.neo4j.values.storable.LocalDateTimeValue;\n-import org.neo4j.values.storable.LocalTimeValue;\n import org.neo4j.values.storable.TextArray;\n import org.neo4j.values.storable.TextValue;\n-import org.neo4j.values.storable.TimeValue;\n import org.neo4j.values.storable.Values;\n-import org.neo4j.values.virtual.RelationshipValue;\n import org.neo4j.values.virtual.MapValue;\n import org.neo4j.values.virtual.NodeValue;\n+import org.neo4j.values.virtual.RelationshipValue;\n \n+import static java.time.ZoneOffset.UTC;\n import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n /**\n@@ -365,37 +367,37 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n     @Override\n     public void writeDate( long epochDay ) throws RuntimeException\n     {\n-        writeValue( DateValue.epochDate( epochDay ) );\n+        writeValue( LocalDate.ofEpochDay( epochDay ) );\n     }\n \n     @Override\n     public void writeLocalTime( long nanoOfDay ) throws RuntimeException\n     {\n-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );\n+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );\n     }\n \n     @Override\n     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException\n     {\n-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n     }\n \n     @Override\n     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException\n     {\n-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );\n+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );\n     }\n \n     @Override\n     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException\n     {\n-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n     }\n \n     @Override\n     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException\n     {\n-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );\n+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );\n     }\n \n     private interface Writer\ndiff --git a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala\nindex d94a0ffcd1c..7ea08c68ea1 100644\n--- a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala\n+++ b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala\n@@ -19,6 +19,8 @@\n  */\n package org.neo4j.cypher.internal.compatibility.v3_4.runtime.executionplan.procs\n \n+import java.time.temporal.TemporalAmount\n+import java.time._\n import java.util\n \n import org.neo4j.cypher.internal.util.v3_4.{ProfilerStatisticsNotReadyException, TaskCloser}\n@@ -35,7 +37,7 @@ import org.neo4j.graphdb.spatial.{Geometry, Point}\n import org.neo4j.kernel.impl.util.ValueUtils\n import org.neo4j.kernel.impl.util.ValueUtils._\n import org.neo4j.values.AnyValue\n-import org.neo4j.values.storable.Values\n+import org.neo4j.values.storable._\n import org.neo4j.values.storable.Values.{of => DONT_USE_OMG, _}\n \n /**\n@@ -108,6 +110,12 @@ class ProcedureExecutionResult(context: QueryContext,\n           case CTBoolean => transform(res(pos), booleanValue)\n           case CTPoint => transform(res(pos), (p: Point) => asPointValue(p))\n           case CTGeometry => transform(res(pos), (g: Geometry) => asGeometryValue(g))\n+          case CTDateTime => transform(res(pos), (g: ZonedDateTime) => DateTimeValue.datetime(g))\n+          case CTLocalDateTime => transform(res(pos), (g: LocalDateTime) => LocalDateTimeValue.localDateTime(g))\n+          case CTDate => transform(res(pos), (g: LocalDate) => DateValue.date(g))\n+          case CTTime => transform(res(pos), (g: OffsetTime) => TimeValue.time(g))\n+          case CTLocalTime => transform(res(pos), (g: LocalTime) => LocalTimeValue.localTime(g))\n+          case CTDuration => transform(res(pos), (g: TemporalAmount) => Values.durationValue(g))\n           case CTMap => transform(res(pos), asMapValue)\n           case ListType(_) => transform(res(pos), asListValue)\n           case CTAny => transform(res(pos), ValueUtils.of)\ndiff --git a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java\nindex a6cc6f05cd9..de5bb613db5 100644\n--- a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java\n+++ b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java\n@@ -22,6 +22,11 @@ package org.neo4j.cypher.internal.codegen;\n import org.junit.Before;\n import org.junit.Test;\n \n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetTime;\n+import java.time.ZonedDateTime;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n@@ -34,7 +39,13 @@ import org.neo4j.kernel.impl.core.NodeProxy;\n import org.neo4j.kernel.impl.core.RelationshipProxy;\n import org.neo4j.values.AnyValue;\n import org.neo4j.values.storable.CoordinateReferenceSystem;\n+import org.neo4j.values.storable.DateTimeValue;\n+import org.neo4j.values.storable.DateValue;\n+import org.neo4j.values.storable.DurationValue;\n+import org.neo4j.values.storable.LocalDateTimeValue;\n+import org.neo4j.values.storable.LocalTimeValue;\n import org.neo4j.values.storable.LongArray;\n+import org.neo4j.values.storable.TimeValue;\n import org.neo4j.values.storable.Values;\n import org.neo4j.values.virtual.RelationshipValue;\n import org.neo4j.values.virtual.ListValue;\n@@ -198,6 +209,96 @@ public class ParameterConverterTest\n         assertThat( point.getCRS().getCode(), equalTo( 4326 ) );\n     }\n \n+    @Test\n+    public void shouldHandleDateTime()\n+    {\n+        // Given\n+        DateTimeValue dvalue = DateTimeValue.datetime( 1, 2, 3, 4, 5, 6, 7, \"+00:00\" );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( ZonedDateTime.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n+    @Test\n+    public void shouldHandleLocalDateTime()\n+    {\n+        // Given\n+        LocalDateTimeValue dvalue = LocalDateTimeValue.localDateTime( 1, 2, 3, 4, 5, 6, 7 );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( LocalDateTime.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n+    @Test\n+    public void shouldHandleDate()\n+    {\n+        // Given\n+        DateValue dvalue = DateValue.date( 1, 2, 3 );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( LocalDate.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n+    @Test\n+    public void shouldHandleTime()\n+    {\n+        // Given\n+        TimeValue dvalue = TimeValue.time( 1, 2, 3, 4, \"+00:00\" );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( OffsetTime.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n+    @Test\n+    public void shouldHandleLocalTime()\n+    {\n+        // Given\n+        LocalTimeValue dvalue = LocalTimeValue.localTime( 1, 2, 3, 4 );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( LocalTime.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n+    @Test\n+    public void shouldHandleDurations()\n+    {\n+        // Given\n+        DurationValue dvalue = DurationValue.duration( 1, 2, 3, 4 );\n+\n+        // When\n+        dvalue.writeTo( converter );\n+\n+        // Then\n+        Object value = converter.value();\n+        assertThat( value, instanceOf( DurationValue.class ) );\n+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );\n+    }\n+\n     @Test\n     public void shouldHandleLists()\n     {\ndiff --git a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala\nindex 15ea2e65066..bd9c1fe1a55 100644\n--- a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala\n+++ b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala\n@@ -19,13 +19,16 @@\n  */\n package org.neo4j.cypher.internal.runtime.interpreted\n \n+import java.time._\n+import java.time.temporal.TemporalAmount\n+\n import org.neo4j.cypher.internal.util.v3_4.Eagerly\n import org.neo4j.cypher.internal.util.v3_4.symbols._\n import org.neo4j.graphdb.spatial.{Geometry, Point}\n import org.neo4j.graphdb.{Node, Path, Relationship}\n import org.neo4j.kernel.impl.util.ValueUtils\n import org.neo4j.values.AnyValue\n-import org.neo4j.values.storable.Values\n+import org.neo4j.values.storable._\n import org.neo4j.values.storable.Values.byteArray\n import org.neo4j.values.virtual.VirtualValues.fromArray\n import org.neo4j.values.virtual.{MapValue, VirtualValues}\n@@ -48,6 +51,12 @@ object ValueConversion {\n       case CTAny => o => ValueUtils.of(o)\n       case CTPoint => o => ValueUtils.asPointValue(o.asInstanceOf[Point])\n       case CTGeometry => o => ValueUtils.asGeometryValue(o.asInstanceOf[Geometry])\n+      case CTDateTime => o => DateTimeValue.datetime(o.asInstanceOf[ZonedDateTime])\n+      case CTLocalDateTime => o => LocalDateTimeValue.localDateTime(o.asInstanceOf[LocalDateTime])\n+      case CTDate => o => DateValue.date(o.asInstanceOf[LocalDate])\n+      case CTTime => o => TimeValue.time(o.asInstanceOf[OffsetTime])\n+      case CTLocalTime => o => LocalTimeValue.localTime(o.asInstanceOf[LocalTime])\n+      case CTDuration => o => Values.durationValue(o.asInstanceOf[TemporalAmount])\n     }\n \n     (v) => if (v == null) Values.NO_VALUE else converter(v)\n@@ -67,6 +76,12 @@ object ValueConversion {\n     case p: Path => ValueUtils.asPathValue(p)\n     case p: Point => ValueUtils.asPointValue(p)\n     case p: Geometry => ValueUtils.asGeometryValue(p)\n+    case x: ZonedDateTime => DateTimeValue.datetime(x)\n+    case x: LocalDateTime => LocalDateTimeValue.localDateTime(x)\n+    case x: LocalDate => DateValue.date(x)\n+    case x: OffsetTime => TimeValue.time(x)\n+    case x: LocalTime => LocalTimeValue.localTime(x)\n+    case x: TemporalAmount => Values.durationValue(x)\n     case m: Map[_, _] => VirtualValues.map(Eagerly.immutableMapValues(m.asInstanceOf[Map[String, Any]], asValue).asJava)\n     case m: java.util.Map[_, _] => ValueUtils.asMapValue(m.asInstanceOf[java.util.Map[String, AnyRef]])\n     case a: TraversableOnce[_] => VirtualValues.list(a.map(asValue).toArray:_*)\ndiff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java\nindex dcc7c4b5b43..660ea1cf7ff 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java\n@@ -20,8 +20,14 @@\n package org.neo4j.kernel.impl.util;\n \n import java.lang.reflect.Array;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetTime;\n import java.time.ZoneId;\n import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -41,18 +47,14 @@ import org.neo4j.graphdb.traversal.Paths;\n import org.neo4j.helpers.collection.ReverseArrayIterator;\n import org.neo4j.values.AnyValueWriter;\n import org.neo4j.values.storable.CoordinateReferenceSystem;\n-import org.neo4j.values.storable.DateTimeValue;\n-import org.neo4j.values.storable.DateValue;\n import org.neo4j.values.storable.DurationValue;\n-import org.neo4j.values.storable.LocalDateTimeValue;\n-import org.neo4j.values.storable.LocalTimeValue;\n import org.neo4j.values.storable.TextArray;\n import org.neo4j.values.storable.TextValue;\n-import org.neo4j.values.virtual.RelationshipValue;\n-import org.neo4j.values.storable.TimeValue;\n import org.neo4j.values.virtual.MapValue;\n import org.neo4j.values.virtual.NodeValue;\n+import org.neo4j.values.virtual.RelationshipValue;\n \n+import static java.time.ZoneOffset.UTC;\n import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n /**\n@@ -417,37 +419,37 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An\n     @Override\n     public void writeDate( long epochDay ) throws RuntimeException\n     {\n-        writeValue( DateValue.epochDate( epochDay ) );\n+        writeValue( LocalDate.ofEpochDay( epochDay ) );\n     }\n \n     @Override\n     public void writeLocalTime( long nanoOfDay ) throws RuntimeException\n     {\n-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );\n+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );\n     }\n \n     @Override\n     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException\n     {\n-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n     }\n \n     @Override\n     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException\n     {\n-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );\n+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );\n     }\n \n     @Override\n     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException\n     {\n-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );\n     }\n \n     @Override\n     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException\n     {\n-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );\n+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );\n     }\n \n     private interface Writer",
    "improve db migration to avoid deleting special snapshots ( like pacbase projects )": "diff --git a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb\nindex 623f1c8087f..e14e0dfa506 100644\n--- a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb\n+++ b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb\n@@ -24,17 +24,14 @@\n class DeleteUnvalidProjectSnapshots < ActiveRecord::Migration\n \n   def self.up\n-   metric=Metric.find(:first, :conditions => ['name=?','lines'])\n-   if metric\n-     snapshots=select_snapshots_without_measures(metric)\n-     delete_snapshots(snapshots)\n-   end\n+    snapshots=select_snapshots_without_measures\n+    delete_snapshots(snapshots)\n   end\n \n-  def self.select_snapshots_without_measures(metric)\n+  def self.select_snapshots_without_measures\n    snapshots=nil\n    say_with_time \"Select project snapshots without measures...\" do\n-     snapshots=Snapshot.find_by_sql [\"SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id AND m.metric_id=?)\", false, metric.id]\n+     snapshots=Snapshot.find_by_sql [\"SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id)\", false]\n    end\n    snapshots\n   end",
    "Fix more cases where blips show up in All Apps .": "diff --git a/src/com/android/launcher2/AppsCustomizePagedView.java b/src/com/android/launcher2/AppsCustomizePagedView.java\nindex 3fcff726f..a44765acd 100644\n--- a/src/com/android/launcher2/AppsCustomizePagedView.java\n+++ b/src/com/android/launcher2/AppsCustomizePagedView.java\n@@ -32,7 +32,6 @@ import android.content.res.Resources;\n import android.content.res.TypedArray;\n import android.graphics.Bitmap;\n import android.graphics.Bitmap.Config;\n-import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n import android.graphics.MaskFilter;\n import android.graphics.Matrix;\n@@ -170,7 +169,8 @@ class AppsCustomizeAsyncTask extends AsyncTask<AsyncTaskPageData, Void, AsyncTas\n  */\n public class AppsCustomizePagedView extends PagedViewWithDraggableItems implements\n         AllAppsView, View.OnClickListener, View.OnKeyListener, DragSource,\n-        PagedViewIcon.PressedCallback, PagedViewWidget.ShortPressListener {\n+        PagedViewIcon.PressedCallback, PagedViewWidget.ShortPressListener,\n+        LauncherTransitionable {\n     static final String LOG_TAG = \"AppsCustomizePagedView\";\n \n     /**\n@@ -241,6 +241,11 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n     PendingAddWidgetInfo mCreateWidgetInfo = null;\n     private boolean mDraggingWidget = false;\n \n+    // Deferral of loading widget previews during launcher transitions\n+    private boolean mInTransition;\n+    private ArrayList<AsyncTaskPageData> mDeferredSyncWidgetPageItems =\n+        new ArrayList<AsyncTaskPageData>();\n+\n     public AppsCustomizePagedView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n         mLayoutInflater = LayoutInflater.from(context);\n@@ -731,6 +736,32 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n         mLauncher.unlockScreenOrientationOnLargeUI();\n     }\n \n+    @Override\n+    public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWorkspace) {\n+        mInTransition = true;\n+        if (toWorkspace) {\n+            cancelAllTasks();\n+        }\n+    }\n+\n+    @Override\n+    public View getContent() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void onLauncherTransitionStep(Launcher l, float t) {\n+    }\n+\n+    @Override\n+    public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {\n+        mInTransition = false;\n+        for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {\n+            onSyncWidgetPageItems(d);\n+        }\n+        mDeferredSyncWidgetPageItems.clear();\n+    }\n+\n     @Override\n     public void onDropCompleted(View target, DragObject d, boolean success) {\n         endDragging(target, success);\n@@ -785,6 +816,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();\n             task.cancel(false);\n             iter.remove();\n+            mDirtyPageContent.set(task.page, true);\n         }\n     }\n \n@@ -804,7 +836,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n         Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();\n         while (iter.hasNext()) {\n             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();\n-            int pageIndex = task.page + mNumAppsPages;\n+            int pageIndex = task.page;\n             if ((mNextPage > mCurrentPage && pageIndex >= mCurrentPage) ||\n                 (mNextPage < mCurrentPage && pageIndex <= mCurrentPage)) {\n                 task.setThreadPriority(getThreadPriorityForPage(pageIndex));\n@@ -906,7 +938,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n         int minPageDiff = Integer.MAX_VALUE;\n         while (iter.hasNext()) {\n             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();\n-            minPageDiff = Math.abs(task.page + mNumAppsPages - toPage);\n+            minPageDiff = Math.abs(task.page - toPage);\n         }\n \n         int rawPageDiff = Math.abs(page - toPage);\n@@ -941,7 +973,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n         Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();\n         while (iter.hasNext()) {\n             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();\n-            int taskPage = task.page + mNumAppsPages;\n+            int taskPage = task.page;\n             if (taskPage < getAssociatedLowerPageBound(mCurrentPage) ||\n                     taskPage > getAssociatedUpperPageBound(mCurrentPage)) {\n                 task.cancel(false);\n@@ -952,7 +984,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n         }\n \n         // We introduce a slight delay to order the loading of side pages so that we don't thrash\n-        final int sleepMs = getSleepForPage(page + mNumAppsPages);\n+        final int sleepMs = getSleepForPage(page);\n         AsyncTaskPageData pageData = new AsyncTaskPageData(page, widgets, cellWidth, cellHeight,\n             new AsyncTaskCallback() {\n                 @Override\n@@ -972,20 +1004,17 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n             new AsyncTaskCallback() {\n                 @Override\n                 public void run(AppsCustomizeAsyncTask task, AsyncTaskPageData data) {\n-                    try {\n-                        mRunningTasks.remove(task);\n-                        if (task.isCancelled()) return;\n-                        onSyncWidgetPageItems(data);\n-                    } finally {\n-                        data.cleanup(task.isCancelled());\n-                    }\n+                    mRunningTasks.remove(task);\n+                    if (task.isCancelled()) return;\n+                    // do cleanup inside onSyncWidgetPageItems\n+                    onSyncWidgetPageItems(data);\n                 }\n             });\n \n         // Ensure that the task is appropriately prioritized and runs in parallel\n         AppsCustomizeAsyncTask t = new AppsCustomizeAsyncTask(page,\n                 AsyncTaskPageData.Type.LoadWidgetPreviewData);\n-        t.setThreadPriority(getThreadPriorityForPage(page + mNumAppsPages));\n+        t.setThreadPriority(getThreadPriorityForPage(page));\n         t.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, pageData);\n         mRunningTasks.add(t);\n     }\n@@ -1128,13 +1157,13 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n                 - ((mWidgetCountY - 1) * mWidgetHeightGap)) / mWidgetCountY);\n \n         // Prepare the set of widgets to load previews for in the background\n-        int offset = page * numItemsPerPage;\n+        int offset = (page - mNumAppsPages) * numItemsPerPage;\n         for (int i = offset; i < Math.min(offset + numItemsPerPage, mWidgets.size()); ++i) {\n             items.add(mWidgets.get(i));\n         }\n \n         // Prepopulate the pages with the other widget info, and fill in the previews later\n-        final PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page + mNumAppsPages);\n+        final PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page);\n         layout.setColumnCount(layout.getCellCountX());\n         for (int i = 0; i < items.size(); ++i) {\n             Object rawInfo = items.get(i);\n@@ -1245,29 +1274,38 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen\n             }\n         }\n     }\n-    private void onSyncWidgetPageItems(AsyncTaskPageData data) {\n-        int page = data.page;\n-        PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page + mNumAppsPages);\n \n-        ArrayList<Object> items = data.items;\n-        int count = items.size();\n-        for (int i = 0; i < count; ++i) {\n-            PagedViewWidget widget = (PagedViewWidget) layout.getChildAt(i);\n-            if (widget != null) {\n-                Bitmap preview = data.generatedImages.get(i);\n-                widget.applyPreview(new FastBitmapDrawable(preview), i);\n-            }\n+    private void onSyncWidgetPageItems(AsyncTaskPageData data) {\n+        if (mInTransition) {\n+            mDeferredSyncWidgetPageItems.add(data);\n+            return;\n         }\n+        try {\n+            int page = data.page;\n+            PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page);\n+\n+            ArrayList<Object> items = data.items;\n+            int count = items.size();\n+            for (int i = 0; i < count; ++i) {\n+                PagedViewWidget widget = (PagedViewWidget) layout.getChildAt(i);\n+                if (widget != null) {\n+                    Bitmap preview = data.generatedImages.get(i);\n+                    widget.applyPreview(new FastBitmapDrawable(preview), i);\n+                }\n+            }\n \n-        layout.createHardwareLayer();\n-        invalidate();\n+            layout.createHardwareLayer();\n+            invalidate();\n \n-        // Update all thread priorities\n-        Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();\n-        while (iter.hasNext()) {\n-            AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();\n-            int pageIndex = task.page + mNumAppsPages;\n-      ",
    "Add a new Maven profile to support Jetty ALPN on jdk8u161 ( <issue_id> ) .": "diff --git a/dropwizard-http2/pom.xml b/dropwizard-http2/pom.xml\nindex b69a786ee..59600a69a 100644\n--- a/dropwizard-http2/pom.xml\n+++ b/dropwizard-http2/pom.xml\n@@ -13,7 +13,7 @@\n \n     <properties>\n         <!-- Default alpn-boot version. See <profiles> for specific profiles. -->\n-        <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>\n+        <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>\n     </properties>\n \n     <build>\n@@ -459,5 +459,53 @@\n                 <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>\n             </properties>\n         </profile>\n+        <profile>\n+            <id>jdk-1.8.0_151</id>\n+            <activation>\n+                <property>\n+                    <name>java.version</name>\n+                    <value>1.8.0_151</value>\n+                </property>\n+            </activation>\n+            <properties>\n+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>\n+            </properties>\n+        </profile>\n+        <profile>\n+            <id>jdk-1.8.0_152</id>\n+            <activation>\n+                <property>\n+                    <name>java.version</name>\n+                    <value>1.8.0_152</value>\n+                </property>\n+            </activation>\n+            <properties>\n+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>\n+            </properties>\n+        </profile>\n+        <profile>\n+            <id>jdk-1.8.0_161</id>\n+            <activation>\n+                <property>\n+                    <name>java.version</name>\n+                    <value>1.8.0_161</value>\n+                </property>\n+            </activation>\n+            <properties>\n+                <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>\n+            </properties>\n+   ",
    "Prepare release : set version to 7 . 6 . 0": "diff --git a/webapps/package.json b/webapps/package.json\nindex 0fe36d990c..b1a512c259 100644\n--- a/webapps/package.json\n+++ b/webapps/package.json\n@@ -1,7 +1,7 @@\n {\n   \"name\": \"camunda-bpm-webapp\",\n   \"private\": true,\n-  \"version\": \"7.6.0-SNAPSHOT\",\n+  \"version\": \"7.6.0\",\n   \"gruntConfig\": {\n     \"connectPort\": 8020,\n     \"livereloadPort\": 8021,\n@@ -27,7 +27,7 @@\n     \"angular-data-depend\": \"git://github.com/camunda-third-party/angular-data-depend#8e3b66914c611069e3698fd5d4275e6cf8055d01\",\n     \"angular-moment\": \"0.9.0\",\n     \"angular-route\": \"1.2.29\",\n-    \"camunda-commons-ui\": \"git://github.com/camunda/camunda-commons-ui#master\",\n+    \"camunda-commons-ui\": \"git://github.com/camunda/camunda-commons-ui#7.6.0\",\n     \"events\": \"1.1.0\",\n     \"jquery\": \"2.1.1\",\n     \"jquery-ui\": \"1.10.5\",\ndiff --git a/webapps/pom.xml b/webapps/pom.xml\nindex 7840680be7..6336d70012 100644\n--- a/webapps/pom.xml\n+++ b/webapps/pom.xml\n@@ -6,7 +6,7 @@\n   <parent>\n     <groupId>org.camunda.bpm</groupId>\n     <artifactId>camunda-database-settings</artifactId>\n-    <version>7.6.0-SNAPSHOT</version>\n+    <version>7.6.0</version>\n     <relativePath>../camunda-bpm-platform/database</relativePath>\n   </parent>\n ",
    "Fix the links to the docs about sinks and sources CLI ( <issue_id> )": "diff --git a/site2/docs/reference-pulsar-admin.md b/site2/docs/reference-pulsar-admin.md\nindex d64b131211..419b5071d3 100644\n--- a/site2/docs/reference-pulsar-admin.md\n+++ b/site2/docs/reference-pulsar-admin.md\n@@ -21,10 +21,10 @@ Commands\n * `ns-isolation-policy`\n * `sources`\n \n-    For more information, see [here](reference-connector-admin.md#sources)\n+  For more information, see [here](io-cli.md#sources)\n * `sinks`\n   \n-  For more information, see [here](reference-connector-admin.md#sinks)\n+  For more information, see [here](io-cli.md#sinks)\n * `topics`\n * `tenants`\n * `resource-quotas`\ndiff --git a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md\nindex 5c3a4207ff..422d8a53b8 100644\n--- a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md\n+++ b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md\n@@ -22,10 +22,10 @@ Commands\n * `ns-isolation-policy`\n * `sources`\n \n-    For more information, see [here](reference-connector-admin.md#sources)\n+  For more information, see [here](io-cli.md#sources)\n * `sinks`\n   \n-  For more information, see [here](reference-connector-admin.md#sinks)\n+  For more information, see [here](io-cli.md#sinks)\n * `topics`\n * `tenants`\n * `resource-quotas`\ndiff --git a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md\nindex 959e62d679..86e1b95186 100644\n--- a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md\n+++ b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md\n@@ -22,10 +22,10 @@ Commands\n * `ns-isolation-policy`\n * `sources`\n \n-    For more information, see [here](reference-connector-admin.md#sources)\n+  For more information, see [here](io-cli.md#sources)\n * `sinks`\n   \n-  For more information, see [here](reference-connector-admin.md#sinks)\n+  For more information, see [here](io-cli.md#sinks)\n * `topics`\n * `tenants`\n * `resource-quotas`\ndiff --git a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md\nindex 7323c17cb0..d9be03abac 100644\n--- a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md\n+++ b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md\n@@ -22,10 +22,10 @@ Commands\n * `ns-isolation-policy`\n * `sources`\n \n-    For more information, see [here](reference-connector-admin.md#sources)\n+  For more information, see [here](io-cli.md#sources)\n * `sinks`\n   \n-  For more information, see [here](reference-connector-admin.md#sinks)\n+  For more information, see [here](io-cli.md#sinks)\n * `topics`\n * `tenants`\n * `resource-quotas`",
    "handle config changes / process termination": "diff --git a/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java b/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java\nindex 4109d64e..d0c495e2 100644\n--- a/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java\n+++ b/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java\n@@ -1,3 +1,17 @@\n+/***\n+ Copyright (c) 2008-2016 CommonsWare, LLC\n+ Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ use this file except in compliance with the License. You may obtain a copy\n+ of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required\n+ by applicable law or agreed to in writing, software distributed under the\n+ License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n+ OF ANY KIND, either express or implied. See the License for the specific\n+ language governing permissions and limitations under the License.\n+\n+ From _The Busy Coder's Guide to Android Development_\n+ https://commonsware.com/Android\n+ */\n+\n package com.commonsware.android.camcon;\n \n import android.app.Activity;\n@@ -9,6 +23,9 @@ import android.provider.MediaStore;\n import java.io.File;\n \n public class CameraContentDemoActivity extends Activity {\n+  private static final String EXTRA_FILENAME=\n+    \"com.commonsware.android.camcon.EXTRA_FILENAME\";\n+  private static final String FILENAME=\"CameraContentDemo.jpeg\";\n   private static final int CONTENT_REQUEST=1337;\n   private File output=null;\n \n@@ -17,15 +34,34 @@ public class CameraContentDemoActivity extends Activity {\n     super.onCreate(savedInstanceState);\n \n     Intent i=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n-    File dir=\n+\n+    if (savedInstanceState==null) {\n+      File dir=\n         Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\n \n-    output=new File(dir, \"CameraContentDemo.jpeg\");\n+      dir.mkdirs();\n+      output=new File(dir, FILENAME);\n+    }\n+    else {\n+      output=(File)savedInstanceState.getSerializable(EXTRA_FILENAME);\n+    }\n+\n+    if (output.exists()) {\n+      output.delete();\n+    }\n+\n     i.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(output));\n \n     startActivityForResult(i, CONTENT_REQUEST);\n   }\n \n+  @Override\n+  protected void onSaveInstanceState(Bundle outState) {\n+    super.onSaveInstanceState(outState);\n+\n+    outState.putSerializable(EXTRA_FILENAME, output);\n+  }\n+\n   @Override\n   protected void onActivityResult(int requestCode, int resultCode,\n                                   Intent data) {",
    "updated changelog for release": "diff --git a/changelog.html b/changelog.html\nindex 7427f622d0..7ec010eda8 100644\n--- a/changelog.html\n+++ b/changelog.html\n@@ -46,7 +46,10 @@ Upcoming changes</a>\n \n <!-- these changes are controlled by the release process. DO NOT MODIFY -->\n <div id=\"rc\" style=\"display:none;\"><!--=BEGIN=-->\n-<h3><a name=v1.394>What's new in 1.394</a> <!--=DATE=--></h3>\n+<h3><a name=v1.395>What's new in 1.395</a> <!--=DATE=--></h3>\n+<!--=RC-CHANGES=-->\n+</div><!--=END=-->\n+<h3><a name=v1.394>What's new in 1.394</a> (2011/01/15)</h3>\n <ul class=image>\n   <li class=bug> Parsing poms fails if a module is a path to a pom (and not to a directory)\n    (<a href=\"http://issues.hudson-ci.org/browse/HUDSON-8445\">issue 8445</a>)\n@@ -69,7 +72,6 @@ Upcoming changes</a>\n    Maven 3 support : display same logging output as a maven build with the cli\n    (<a href=\"http://issues.hudson-ci.org/browse/HUDSON-8490\">issue 8490</a>)           \n </ul>\n-</div><!--=END=-->\n <h3><a name=v1.393>What's new in 1.393</a> (2011/01/09)</h3>\n <ul class=image>\n   <li class=rfe>",
    "Add an info item to show the currently inherited client environment .": "diff --git a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java\nindex 73c00d3fa2..1208995695 100644\n--- a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java\n+++ b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java\n@@ -166,10 +166,10 @@ public final class CommandEnvironment {\n   }\n \n   /**\n-   * Return an ordered version of the client environment restricted to those variables\n-   * whitelisted by the command-line options to be inheritable by actions.\n+   * Return an ordered version of the client environment restricted to those variables whitelisted\n+   * by the command-line options to be inheritable by actions.\n    */\n-  private Map<String, String> getCommandlineWhitelistedClientEnv() {\n+  public Map<String, String> getWhitelistedClientEnv() {\n     Map<String, String> visibleEnv = new TreeMap<>();\n     for (String var : visibleClientEnv) {\n       String value = clientEnv.get(var);\n@@ -426,7 +426,7 @@ public final class CommandEnvironment {\n         getCommandId(),\n         // TODO(bazel-team): this optimization disallows rule-specified additional dependencies\n         // on the client environment!\n-        getCommandlineWhitelistedClientEnv(),\n+        getWhitelistedClientEnv(),\n         timestampGranularityMonitor);\n   }\n \ndiff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java\nindex 0d7fb6abab..b5e596fb88 100644\n--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java\n+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java\n@@ -193,29 +193,31 @@ public class InfoCommand implements BlazeCommand {\n \n   static Map<String, InfoItem> getHardwiredInfoItemMap(OptionsProvider commandOptions,\n       String productName) {\n-    List<InfoItem> hardwiredInfoItems = ImmutableList.<InfoItem>of(\n-        new InfoItem.WorkspaceInfoItem(),\n-        new InfoItem.InstallBaseInfoItem(),\n-        new InfoItem.OutputBaseInfoItem(productName),\n-        new InfoItem.ExecutionRootInfoItem(),\n-        new InfoItem.OutputPathInfoItem(),\n-        new InfoItem.BlazeBinInfoItem(productName),\n-        new InfoItem.BlazeGenfilesInfoItem(productName),\n-        new InfoItem.BlazeTestlogsInfoItem(productName),\n-        new InfoItem.CommandLogInfoItem(),\n-        new InfoItem.MessageLogInfoItem(),\n-        new InfoItem.ReleaseInfoItem(productName),\n-        new InfoItem.ServerPidInfoItem(productName),\n-        new InfoItem.PackagePathInfoItem(commandOptions),\n-        new InfoItem.UsedHeapSizeInfoItem(),\n-        new InfoItem.UsedHeapSizeAfterGcInfoItem(),\n-        new InfoItem.CommitedHeapSizeInfoItem(),\n-        new InfoItem.MaxHeapSizeInfoItem(),\n-        new InfoItem.GcTimeInfoItem(),\n-        new InfoItem.GcCountInfoItem(),\n-        new InfoItem.DefaultsPackageInfoItem(),\n-        new InfoItem.BuildLanguageInfoItem(),\n-        new InfoItem.DefaultPackagePathInfoItem(commandOptions));\n+    List<InfoItem> hardwiredInfoItems =\n+        ImmutableList.<InfoItem>of(\n+            new InfoItem.WorkspaceInfoItem(),\n+            new InfoItem.InstallBaseInfoItem(),\n+            new InfoItem.OutputBaseInfoItem(productName),\n+            new InfoItem.ExecutionRootInfoItem(),\n+            new InfoItem.OutputPathInfoItem(),\n+            new InfoItem.ClientEnv(),\n+            new InfoItem.BlazeBinInfoItem(productName),\n+            new InfoItem.BlazeGenfilesInfoItem(productName),\n+            new InfoItem.BlazeTestlogsInfoItem(productName),\n+            new InfoItem.CommandLogInfoItem(),\n+            new InfoItem.MessageLogInfoItem(),\n+            new InfoItem.ReleaseInfoItem(productName),\n+            new InfoItem.ServerPidInfoItem(productName),\n+            new InfoItem.PackagePathInfoItem(commandOptions),\n+            new InfoItem.UsedHeapSizeInfoItem(),\n+            new InfoItem.UsedHeapSizeAfterGcInfoItem(),\n+            new InfoItem.CommitedHeapSizeInfoItem(),\n+            new InfoItem.MaxHeapSizeInfoItem(),\n+            new InfoItem.GcTimeInfoItem(),\n+            new InfoItem.GcCountInfoItem(),\n+            new InfoItem.DefaultsPackageInfoItem(),\n+            new InfoItem.BuildLanguageInfoItem(),\n+            new InfoItem.DefaultPackagePathInfoItem(commandOptions));\n     ImmutableMap.Builder<String, InfoItem> result = new ImmutableMap.Builder<>();\n     for (InfoItem item : hardwiredInfoItems) {\n       result.put(item.getName(), item);\ndiff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java\nindex e8dc77f352..e8836e554f 100644\n--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java\n+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java\n@@ -46,6 +46,7 @@ import java.lang.management.ManagementFactory;\n import java.lang.management.MemoryMXBean;\n import java.lang.management.MemoryUsage;\n import java.util.Collection;\n+import java.util.Map;\n \n /**\n  * An item that is returned by <code>blaze info</code>.\n@@ -482,6 +483,29 @@ public abstract class InfoItem {\n     }\n   }\n \n+  /** Info item for the effective current client environment. */\n+  public static final class ClientEnv extends InfoItem {\n+    public ClientEnv() {\n+      super(\n+          \"client-env\",\n+          \"The specifications that need to be added to the project-specific rc file to freeze the\"\n+              + \" current client environment\",\n+          true);\n+    }\n+\n+    @Override\n+    public byte[] get(Supplier<BuildConfiguration> configurationSupplier, CommandEnvironment env)\n+        throws AbruptExitException {\n+      String result = \"\";\n+      for (Map.Entry<String, String> entry : env.getWhitelistedClientEnv().entrySet()) {\n+        // TODO(bazel-team): as the syntax of our rc-files does not support to express new-lines in\n+        // values, we produce syntax errors if the value of the entry contains a newline character.\n+        result += \"common --action_env=\" + entry.getKey() + \"=\" + entry.getValue() + \"\\n\";\n+      }\n+      return print(result);\n+    }\n+  }\n+\n   /**\n    * Info item for the default package. It is deprecated, it still works, when\n    * explicitly requested, but are not shown by default. It prints multi-line messages and thus\ndiff --git a/src/test/shell/integration/action_env_test.sh b/src/test/shell/integration/action_env_test.sh\nindex 017aa892d3..80976ed34b 100755\n--- a/src/test/shell/integration/action_env_test.sh\n+++ b/src/test/shell/integration/action_env_test.sh\n@@ -121,4 +121,26 @@ function test_latest_wins_env() {\n   expect_not_log \"FOO=foo\"\n }\n \n+function test_env_freezing() {\n+  cat > .${PRODUCT_NAME}rc <<EOF\n+common --action_env=FREEZE_TEST_FOO\n+common --action_env=FREEZE_TEST_BAR=is_fixed\n+common --action_env=FREEZE_TEST_BAZ=will_be_overridden\n+build --action_env=FREEZE_TEST_BUILD\n+EOF\n+\n+  export FREEZE_TEST_FOO=client_foo\n+  export FREEZE_TEST_BAR=client_bar\n+  export FREEZE_TEST_BAZ=client_baz\n+  export FREEZE_TEST_BUILD=client_build\n+\n+  $bazel info --action_env=FREEZE_TEST_BAZ client-env > $TEST_log\n+  expect_log \"common --action_env=FREEZE_TEST_FOO=client_foo\"\n+  expect_not_log \"FREEZE_TEST_BAR\"\n+  expect_log \"common --action_env=FREEZE_TEST_BAZ=client_baz\"\n+  expect_log \"common --action_env=FREEZE_TEST_BUILD=client_build\"\n+\n+  rm -f .${PRODUCT_NAME}rc\n+}\n+\n run_suite \"Tests for bazel's handling of environment variables in actions\"",
    "Added tracking of sending operations .": "diff --git a/src/java/org/jivesoftware/messenger/net/SocketConnection.java b/src/java/org/jivesoftware/messenger/net/SocketConnection.java\nindex b47b4144a..0001ae92a 100644\n--- a/src/java/org/jivesoftware/messenger/net/SocketConnection.java\n+++ b/src/java/org/jivesoftware/messenger/net/SocketConnection.java\n@@ -88,6 +88,8 @@ public class SocketConnection implements Connection {\n         }\n         try {\n             synchronized (writer) {\n+                // Register that we started sending data on the connection\n+                SocketSendingTracker.getInstance().socketStartedSending(socket);\n                 writer.write(\" \");\n                 writer.flush();\n             }\n@@ -96,6 +98,10 @@ public class SocketConnection implements Connection {\n             Log.warn(\"Closing no longer valid connection\" + \"\\n\" + this.toString(), e);\n             close();\n         }\n+        finally {\n+            // Register that we finished sending data on the connection\n+            SocketSendingTracker.getInstance().socketFinishedSending(socket);\n+        }\n         return !isClosed();\n     }\n \n@@ -197,6 +203,8 @@ public class SocketConnection implements Connection {\n                     }\n                     synchronized (writer) {\n                         try {\n+                            // Register that we started sending data on the connection\n+                            SocketSendingTracker.getInstance().socketStartedSending(socket);\n                             writer.write(\"</stream:stream>\");\n                             if (flashClient) {\n                                 writer.write('\\0');\n@@ -204,6 +212,10 @@ public class SocketConnection implements Connection {\n                             xmlSerializer.flush();\n                         }\n                         catch (IOException e) {}\n+                        finally {\n+                            // Register that we finished sending data on the connection\n+                            SocketSendingTracker.getInstance().socketFinishedSending(socket);\n+                        }\n                     }\n                 }\n                 catch (Exception e) {\n@@ -236,6 +248,8 @@ public class SocketConnection implements Connection {\n           ",
    "Added unwrap method to ClusterManagerDelegate .": "diff --git a/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java b/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java\nindex d883e7e05..4d5200023 100644\n--- a/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java\n+++ b/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java\n@@ -112,4 +112,8 @@ public class ClusterManagerDelegate implements ClusterManager {\n   public Future<RegistrationListener> registrationListener(String address) {\n     return clusterManager.registrationListener(address);\n   }\n+\n+  public ClusterManager unwrap() {\n+    return clusterManager;\n+  }\n }",
    "restore LocalWorkspaceCatalog . getLayerGroupByName to its original form , have interpreted it wrong , and make sure LayerGroupResource uses the specified workspace .": "diff --git a/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java b/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java\nindex 95564889d7..1086f6b178 100644\n--- a/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java\n+++ b/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java\n@@ -129,14 +129,15 @@ public LayerGroupInfo getLayerGroup(String id) {\n \n     @Override\n     public LayerGroupInfo getLayerGroupByName(String name) {\n-        WorkspaceInfo workspace = LocalWorkspace.get();// may be null\n-        LayerGroupInfo lgi;\n-        if (null == workspace) {\n-            lgi = super.getLayerGroupByName(name);\n-        } else {\n-            lgi = super.getLayerGroupByName(workspace, name);\n+        if (LocalWorkspace.get() != null) {\n+            LayerGroupInfo layerGroup = super.getLayerGroupByName(LocalWorkspace.get(), name);\n+            if (layerGroup != null) {\n+                return wrap(layerGroup);\n+            }\n+            // else fall back on unqualified lookup\n         }\n-        return wrap(lgi);\n+\n+        return wrap(super.getLayerGroupByName(name));\n     }\n \n     /*\ndiff --git a/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java b/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java\nindex ed96c7d3ff..55da669859 100644\n--- a/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java\n+++ b/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java\n@@ -86,7 +86,7 @@ protected void handleObjectPut(Object object) throws Exception {\n                 + workspace == null ? \", workspace \" + workspace : \"\");\n         \n         LayerGroupInfo lg = (LayerGroupInfo) object;\n-        LayerGroupInfo original = catalog.getLayerGroupByName( layergroup );\n+        LayerGroupInfo original = catalog.getLayerGroupByName(workspace, layergroup );\n        \n         //ensure not a name change\n         if ( lg.getName() != null && !lg.getName().equals( original.getName() ) ) {",
    "Evaluate state if sheetView shrinks while expanded": "diff --git a/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java b/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java\nindex 925a741..32a712a 100644\n--- a/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java\n+++ b/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java\n@@ -594,6 +594,10 @@ public class BottomSheetLayout extends FrameLayout {\n                 int newSheetViewHeight = sheetView.getMeasuredHeight();\n                 if (state != State.HIDDEN) {\n                     if (newSheetViewHeight < currentSheetViewHeight) {\n+                        // The sheet can no longer be in the expanded state if it has shrunk\n+            ",
    "add a textarea test .": "diff --git a/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java b/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java\nnew file mode 100644\nindex 0000000000..7da1d284b5\n--- /dev/null\n+++ b/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java\n@@ -0,0 +1,13 @@\n+package com.thoughtworks.selenium;\r\n+\r\n+public class TestSomeStuff extends SeleneseTestCase {\r\n+    public void testTextArea() throws Throwable {\r\n+        selenium.setContext(\"Test text area\", \"error\");\r\n+        selenium.open(\"/selenium-server/tests/html/test_verifications.html\");\r\n+        String s = selenium.getText(\"theTextarea\");\r\n+        boolean b = \"Line 1\\nLine 2\".equals(s)  // IE\r\n+        || \"Line 1 Line 2\".equals(s);           // firefox\r\n+        assertTrue(\"text area\", b);\r\n+        System.out.println(s);\r\n+    }\r\n+}\r",
    "Simplify RecursiveDirectoryTraversalFunction : neither of its use cases were using the env variable passed into their visitors \\' methods , which means that we can stop passing them , and simplify the code a bit . . Just a cleanup I noticed . . PiperOrigi": "diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java\nindex 347cbf93e8..214daf54c1 100644\n--- a/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java\n+++ b/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java\n@@ -19,7 +19,6 @@ import com.google.common.collect.Iterables;\n import com.google.devtools.build.lib.analysis.BlazeDirectories;\n import com.google.devtools.build.lib.cmdline.RepositoryName;\n import com.google.devtools.build.lib.packages.NoSuchPackageException;\n-import com.google.devtools.build.lib.packages.Package;\n import com.google.devtools.build.lib.skyframe.RecursivePkgValue.RecursivePkgKey;\n import com.google.devtools.build.lib.vfs.PathFragment;\n import com.google.devtools.build.lib.vfs.RootedPath;\n@@ -49,15 +48,16 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {\n   }\n \n   private class MyTraversalFunction\n-      extends RecursiveDirectoryTraversalFunction<MyVisitor, CollectPackagesUnderDirectoryValue> {\n+      extends RecursiveDirectoryTraversalFunction<\n+          MyPackageDirectoryConsumer, CollectPackagesUnderDirectoryValue> {\n \n     private MyTraversalFunction() {\n       super(directories);\n     }\n \n     @Override\n-    protected MyVisitor getInitialVisitor() {\n-      return new MyVisitor();\n+    protected MyPackageDirectoryConsumer getInitialConsumer() {\n+      return new MyPackageDirectoryConsumer();\n     }\n \n     @Override\n@@ -71,7 +71,7 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {\n \n     @Override\n     protected CollectPackagesUnderDirectoryValue aggregateWithSubdirectorySkyValues(\n-        MyVisitor visitor, Map<SkyKey, SkyValue> subdirectorySkyValues) {\n+        MyPackageDirectoryConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues) {\n       // Aggregate the child subdirectory package state.\n       ImmutableMap.Builder<RootedPath, Boolean> builder = ImmutableMap.builder();\n       for (SkyKey key : subdirectorySkyValues.keySet()) {\n@@ -91,30 +91,30 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {\n         builder.put(recursivePkgKey.getRootedPath(), packagesOrErrorsInSubdirectory);\n       }\n       ImmutableMap<RootedPath, Boolean> subdirectories = builder.build();\n-      String errorMessage = visitor.getErrorMessage();\n+      String errorMessage = consumer.getErrorMessage();\n       if (errorMessage != null) {\n         return CollectPackagesUnderDirectoryValue.ofError(errorMessage, subdirectories);\n       }\n       return CollectPackagesUnderDirectoryValue.ofNoError(\n-          visitor.isDirectoryPackage(), subdirectories);\n+          consumer.isDirectoryPackage(), subdirectories);\n     }\n   }\n \n-  private static class MyVisitor implements RecursiveDirectoryTraversalFunction.Visitor {\n+  private static class MyPackageDirectoryConsumer\n+      implements RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer {\n \n     private boolean isDirectoryPackage;\n     @Nullable private String errorMessage;\n \n-    private MyVisitor() {}\n+    private MyPackageDirectoryConsumer() {}\n \n     @Override\n-    public void visitPackageValue(Package pkg, Environment env) {\n+    public void notePackage(PathFragment pkgPath) {\n       isDirectoryPackage = true;\n     }\n \n     @Override\n-    public void visitPackageError(NoSuchPackageException e, Environment env)\n-        throws InterruptedException {\n+    public void notePackageError(NoSuchPackageException e) {\n       errorMessage = e.getMessage();\n     }\n \ndiff --git a/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java\nindex fcdccbd04a..f72e436f02 100644\n--- a/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java\n+++ b/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java\n@@ -40,7 +40,7 @@ import java.util.Map;\n  * customized by classes that derive from it.\n  */\n abstract class RecursiveDirectoryTraversalFunction<\n-    TVisitor extends RecursiveDirectoryTraversalFunction.Visitor, TReturn> {\n+    TConsumer extends RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer, TReturn> {\n \n   private final ProcessPackageDirectory processPackageDirectory;\n \n@@ -61,12 +61,12 @@ abstract class RecursiveDirectoryTraversalFunction<\n   }\n \n   /**\n-   * Called by {@link #visitDirectory}, which will next call {@link Visitor#visitPackageValue} if\n-   * the {@code recursivePkgKey} specifies a directory with a package, and which will lastly be\n-   * provided to {@link #aggregateWithSubdirectorySkyValues} to compute the {@code TReturn} value\n-   * returned by {@link #visitDirectory}.\n+   * Called by {@link #visitDirectory}, which will next call {@link\n+   * PackageDirectoryConsumer#notePackage} if the {@code recursivePkgKey} specifies a directory with\n+   * a package, and which will lastly be provided to {@link #aggregateWithSubdirectorySkyValues} to\n+   * compute the {@code TReturn} value returned by {@link #visitDirectory}.\n    */\n-  protected abstract TVisitor getInitialVisitor();\n+  protected abstract TConsumer getInitialConsumer();\n \n   /**\n    * Called by {@link #visitDirectory} to get the {@link SkyKey}s associated with recursive\n@@ -80,29 +80,22 @@ abstract class RecursiveDirectoryTraversalFunction<\n \n   /**\n    * Called by {@link #visitDirectory} to compute the {@code TReturn} value it returns, as a\n-   * function of {@code visitor} and the {@link SkyValue}s computed for subdirectories\n-   * of the directory specified by {@code recursivePkgKey}, contained in\n-   * {@code subdirectorySkyValues}.\n+   * function of {@code consumer} and the {@link SkyValue}s computed for subdirectories of the\n+   * directory specified by {@code recursivePkgKey}, contained in {@code subdirectorySkyValues}.\n    */\n   protected abstract TReturn aggregateWithSubdirectorySkyValues(\n-      TVisitor visitor, Map<SkyKey, SkyValue> subdirectorySkyValues);\n+      TConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues);\n \n   /**\n-   * A type of value used by {@link #visitDirectory} as it checks for a package in the directory\n-   * specified by {@code recursivePkgKey}; if such a package exists, {@link #visitPackageValue}\n-   * is called.\n+   * A type of consumer used by {@link #visitDirectory} as it checks for a package in the directory\n+   * specified by {@code recursivePkgKey}; if such a package exists, {@link #notePackage} is called.\n    *\n-   * <p>The value is then provided to {@link #aggregateWithSubdirectorySkyValues} to compute the\n+   * <p>The consumer is then provided to {@link #aggregateWithSubdirectorySkyValues} to compute the\n    * value returned by {@link #visitDirectory}.\n    */\n-  interface Visitor {\n-\n-    /**\n-     * Called iff the directory contains a package. Provides an {@link Environment} {@code env} so\n-     * that the visitor may do additional lookups. {@link Environment#valuesMissing} will be checked\n-     * afterwards.\n-     */\n-    void visitPackageValue(Package pkg, Environment env) throws InterruptedException;\n+  interface PackageDirectoryConsumer {\n+    /** Called iff the directory contains a package. */\n+    void notePackage(PathFragment pkgPath) throws InterruptedException;\n \n     /**\n      * Called iff the directory contains a BUILD file but *not* a package, which can happen under\n@@ -114,19 +107,19 @@ abstract class RecursiveDirectoryTraversalFunction<\n      *       cycle\n      * </ol>\n      */\n-    void visitPackageError(NoSuchPackageException e, Environment env) throws InterruptedException;\n+    void notePackageError(NoSuchPackageException e);\n   }\n \n   /**\n    * Looks in the directory specified by {@code recursivePkgKey} for a package, does some work as\n-   * specified by {@link Visitor} if such a package exists, then recursively does work in each\n-   * non-excluded subdirectory as specified by {@link #getSkyKeyForSubdirectory}, and finally\n-   * aggregates the {@link Visitor} value along with values from each subdirectory as specified by\n-   * {@link #aggregateWithSubdirectorySkyValues}, and returns that aggregation.\n+   * specified by {@link PackageDirectoryConsumer} if such a package exists, then recursively does\n+   * work in each non-excluded subdirectory as specified by {@link #getSkyKeyForSubdirectory}, and\n+   * finally aggregates the {@link PackageDirectoryConsumer} value along with values from each\n+   * subdirectory as specified by {@link #aggregateWithSubdirectorySkyValues}, and returns that\n+   * aggregation.\n    *\n    * <p>Returns null if {@code env.valuesMissing()} is true, checked after each call to one of\n    * {@link RecursiveDirectoryTraversalFunction}'s abstract methods that were given {@code env}.\n-   * (And after each of {@code visitDirectory}'s own uses of {@code env}, of course.)\n    */\n   TReturn visitDirectory(RecursivePkgKey recursivePkgKey, Environment env)\n       throws InterruptedException {\n@@ -140,7 +133,7 @@ abstract class RecursiveDirectoryTraversalFunction<\n \n     Iterable<SkyKey> childDeps = packageExistenceAndSubdirDeps.getChildDeps();\n \n-    TVisitor visitor = getInitialVisitor();\n+    TConsumer consumer = getInitialConsumer();\n \n     Map<SkyKey, SkyValue> subdirectorySkyValues;\n     if (packageExistenceAndSubdirDeps.packageExists()) {\n@@ -155,28 +148,22 @@ abstract class RecursiveDirectoryTraversalFunction<\n       if (env.valuesMissing()) {\n         return null;\n       }\n-      Package pkg = null;\n       try {\n         PackageValue pkgValue = (PackageValue) dependentSkyValues.get(packageKey).get();\n         if (pkgValue == null) {\n           return null;\n         }\n-        pkg = pkgValue.getPackage();\n+        Package pkg = pkgValue.getPackage();\n         if (pkg.containsErrors()) {\n           env.getListener()\n               .handle(Event.error(\"package contains errors: \" + rootRelativePath.getPathString()));\n         }\n+        consumer.notePackage(rootRelativePath);\n       } catch (NoSuchPackageException e) {\n         // The package had errors, but don't fail-fast as there might be subpackages below the\n         // current directory.\n         env.getListener().handle(Event.error(e.getMessage()));\n-        visitor.visitPackageError(e, env);\n-        if (env.valuesMissing()) {\n-          return null;\n-        }\n-      }\n-      if (pkg != null) {\n-        visitor.visitPackageValue(pkg, env);\n+        consumer.notePackageError(e);\n         if (env.valuesMissing()) {\n           return null;\n         }\n@@ -198,6 +185,6 @@ abstract class RecursiveDirectoryTraversalFunction<\n     if (env.valuesMissing()) {\n       return null;\n     }\n-    return aggregateWithSubdirectorySkyValues(visitor, subdirectorySkyValues);\n+    return aggregateWithSubdirectorySkyValues(consumer, subdirectorySkyValues);\n   }\n }\ndiff --git a/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java\nindex 58f79be753..8430c286a5 100644\n--- a/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java\n+++ b/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java\n@@ -20,7 +20,6 @@ import com.google.devtools.build.lib.collect.nestedset.NestedSet;\n import com.google.devtools.build.lib.collect.nestedset.NestedSetBuilder;\n import com.google.devtools.build.lib.collect.nestedset.Order;\n import com.google.devtools.build.lib.packages.NoSuchPackageException;\n-import com.google.devtools.build.lib.packages.Package;\n import com.google.devtools.build.lib.skyframe.RecursivePkgValue.RecursivePkgKey;\n import com.google.devtools.build.lib.vfs.PathFragment;\n import com.google.devtools.build.lib.vfs.RootedPath;\n@@ -51,15 +50,15 @@ public class RecursivePkgFunction implements SkyFunction {\n   }\n \n   private class MyTraversalFunction\n-      extends RecursiveDirectoryTraversalFunction<MyVisitor, RecursivePkgValue> {\n+      extends RecursiveDirectoryTraversalFunction<MyPackageDirectoryConsumer, RecursivePkgValue> {\n \n     private MyTraversalFunction() {\n       super(directories);\n     }\n \n     @Override\n-    protected MyVisitor getInitialVisitor() {\n-      return new MyVisitor();\n+    protected MyPackageDirectoryConsumer getInitialConsumer() {\n+      return new MyPackageDirectoryConsumer();\n     }\n \n     @Override\n@@ -70,28 +69,28 @@ public class RecursivePkgFunction implements SkyFunction {\n     }\n \n     @Override\n-    protected RecursivePkgValue aggregateWithSubdirectorySkyValues(MyVisitor visitor,\n-        Map<SkyKey, SkyValue> subdirectorySkyValues) {\n+    protected RecursivePkgValue aggregateWithSubdirectorySkyValues(\n+        MyPackageDirectoryConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues) {\n       // Aggregate the transitive subpackages.\n       for (SkyValue childValue : subdirectorySkyValues.values()) {\n-        visitor.addTransitivePackages(((RecursivePkgValue) childValue).getPackages());\n+        consumer.addTransitivePackages(((RecursivePkgValue) childValue).getPackages());\n       }\n-      return visitor.createRecursivePkgValue();\n+      return consumer.createRecursivePkgValue();\n     }\n   }\n \n-  private static class MyVisitor implements RecursiveDirectoryTraversalFunction.Visitor {\n+  private static class MyPackageDirectoryConsumer\n+      implements RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer {\n \n     private final NestedSetBuilder<String> packages = new NestedSetBuilder<>(Order.STABLE_ORDER);\n \n     @Override\n-    public void visitPackageValue(Package pkg, Environment env) {\n-      packages.add(pkg.getName());\n+    public void notePackage(PathFragment pkgPath) {\n+      packages.add(pkgPath.getPathString());\n     }\n \n     @Override\n-    public void visitPackageError(NoSuchPackageException e, Environment env)\n-        throws InterruptedException {\n+    public void notePackageError(NoSuchPackageException e) {\n       // Nothing to do because the RecursiveDirectoryTraversalFunction has already emitted an error\n       // event.\n     }",
    "Added RequestCollapser metrics to Yammer Metrics Publisher": "diff --git a/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java b/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java\nnew file mode 100644\nindex 00000000..86fc0540\n--- /dev/null\n+++ b/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java\n@@ -0,0 +1,202 @@\n+/**\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.hystrix.contrib.yammermetricspublisher;\n+\n+import com.netflix.hystrix.HystrixCollapserKey;\n+import com.netflix.hystrix.HystrixCollapserMetrics;\n+import com.netflix.hystrix.HystrixCollapserProperties;\n+import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherCollapser;\n+import com.netflix.hystrix.util.HystrixRollingNumberEvent;\n+import com.yammer.metrics.core.Gauge;\n+import com.yammer.metrics.core.MetricName;\n+import com.yammer.metrics.core.MetricsRegistry;\n+\n+/**\n+ * Implementation of {@link HystrixMetricsPublisherCollapser} using Yammer Metrics\n+ */\n+public class HystrixYammerMetricsPublisherCollapser implements HystrixMetricsPublisherCollapser {\n+    private final HystrixCollapserKey key;\n+    private final HystrixCollapserMetrics metrics;\n+    private final HystrixCollapserProperties properties;\n+    private final MetricsRegistry metricsRegistry;\n+    private final String metricType;\n+\n+    public HystrixYammerMetricsPublisherCollapser(HystrixCollapserKey collapserKey, HystrixCollapserMetrics metrics, HystrixCollapserProperties properties, MetricsRegistry metricsRegistry) {\n+        this.key = collapserKey;\n+        this.metrics = metrics;\n+        this.properties = properties;\n+        this.metricsRegistry = metricsRegistry;\n+        this.metricType = key.name();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // allow monitor to know exactly at what point in time these stats are for so they can be plotted accurately\n+        metricsRegistry.newGauge(createMetricName(\"currentTime\"), new Gauge<Long>() {\n+            @Override\n+            public Long value() {\n+                return System.currentTimeMillis();\n+            }\n+        });\n+\n+        // cumulative counts\n+        createCumulativeCountForEvent(\"countRequestsBatched\", HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED);\n+        createCumulativeCountForEvent(\"countBatches\", HystrixRollingNumberEvent.COLLAPSER_BATCH);\n+        createCumulativeCountForEvent(\"countResponsesFromCache\", HystrixRollingNumberEvent.RESPONSE_FROM_CACHE);\n+\n+        // rolling counts\n+        createRollingCountForEvent(\"rollingRequestsBatched\", HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED);\n+        createRollingCountForEvent(\"rollingBatches\", HystrixRollingNumberEvent.COLLAPSER_BATCH);\n+        createRollingCountForEvent(\"rollingCountResponsesFromCache\", HystrixRollingNumberEvent.RESPONSE_FROM_CACHE);\n+\n+        // batch size metrics\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_mean\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizeMean();\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_25\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(25);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_50\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(50);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_75\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(75);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_90\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(90);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_99\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(99);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"batchSize_percentile_995\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getBatchSizePercentile(99.5);\n+            }\n+        });\n+\n+        // shard size metrics\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_mean\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizeMean();\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_25\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(25);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_50\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(50);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_75\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(75);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_90\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(90);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_99\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(99);\n+            }\n+        });\n+        metricsRegistry.newGauge(createMetricName(\"shardSize_percentile_995\"), new Gauge<Integer>() {\n+            @Override\n+            public Integer value() {\n+                return metrics.getShardSizePercentile(99.5);\n+            }\n+        });\n+\n+        // properties (so the values can be inspected and monitored)\n+        metricsRegistry.newGauge(createMetricName(\"propertyValue_rollingStatisticalWindowInMilliseconds\"), new Gauge<Number>() {\n+            @Override\n+            public Number value() {\n+                return properties.metricsRollingStatisticalWindowInMilliseconds().get();\n+            }\n+        });\n+\n+        metricsRegistry.newGauge(createMetricName(\"propertyValue_requestCacheEnabled\"), new Gauge<Boolean>() {\n+            @Override\n+            public Boolean value() {\n+                return properties.requestCacheEnabled().get();\n+            }\n+        });\n+\n+        metricsRegistry.newGauge(createMetricName(\"propertyValue_maxRequestsInBatch\"), new Gauge<Number>() {\n+            @Override\n+            public Number value() {\n+                return properties.maxRequestsInBatch().get();\n+            }\n+        });\n+\n+        metricsRegistry.newGauge(createMetricName(\"propertyValue_timerDelayInMilliseconds\"), new Gauge<Number>() {\n+            @Override\n+            public Number value() {\n+",
    "generate a more specific msg when an issue is not persisted to the cloud .": "diff --git a/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java b/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java\nindex 0cd62ec80..a4e4762e6 100644\n--- a/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java\n+++ b/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java\n@@ -1836,7 +1836,25 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {\n     }\n \n     public boolean isInCloud(BugInstance b) {\n-        return instanceMap.get(b.getInstanceHash()).inDatabase;\n+    \tif (b == null)\n+    \t\tthrow new NullPointerException(\"null bug\");\n+        String instanceHash = b.getInstanceHash();\n+\t\tBugData bugData = instanceMap.get(instanceHash);\n+\t\treturn bugData != null && bugData.inDatabase;\n+    }\n+\n+    @Override\n+    public String notInCloudeMsg(BugInstance b) {\n+    \tif (isInCloud(b)) {\n+    \t\tassert false;\n+    \t\treturn \"Is in cloud\";\n+    \t}\n+    \tint rank = BugRanker.findRank(b);\n+\t\tif (rank > MAX_DB_RANK) \n+    \t\treturn \n+    \t\tString.format(\"This issue is rank %d, only issues up to rank %d are recorded in the cloud\",\n+    \t\t\t\trank, MAX_DB_RANK);\n+\t\treturn \"Issue is not recorded in cloud\";\n     }\n \n     public boolean isOnlineCloud() {",
    "Remove the last few references to setInlineFunctions ( boolean ) .": "diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java\nindex bc4aa7ad8..8c7680cef 100644\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n@@ -460,7 +460,7 @@ public final class IntegrationTest extends IntegrationTestCase {\n   public void testBug31448683() {\n     CompilerOptions options = createCompilerOptions();\n     WarningLevel.QUIET.setOptionsForWarningLevel(options);\n-    options.setInlineFunctions(true);\n+    options.setInlineFunctions(Reach.ALL);\n     test(\n         options,\n         LINE_JOINER.join(\n@@ -2444,7 +2444,7 @@ public final class IntegrationTest extends IntegrationTestCase {\n     String code = \"function f() { return 3; } f(); \";\n     testSame(options, code);\n \n-    options.setInlineFunctions(true);\n+    options.setInlineFunctions(Reach.ALL);\n     test(options, code, \"3;\");\n   }\n \n@@ -2808,7 +2808,7 @@ public final class IntegrationTest extends IntegrationTestCase {\n   // https://github.com/google/closure-compiler/issues/2388\n   public void testNoCrash_varInCatch() {\n     CompilerOptions options = createCompilerOptions();\n-    options.setInlineFunctions(true);\n+    options.setInlineFunctions(Reach.ALL);\n \n     test(\n         options,\n@@ -4524,7 +4524,7 @@ public final class IntegrationTest extends IntegrationTestCase {\n \n   public void testMaxFunSizeAfterInliningUsage() {\n     CompilerOptions options = new CompilerOptions();\n-    options.setInlineFunctions(false);\n+    options.setInlineFunctions(Reach.NONE);\n     options.setMaxFunctionSizeAfterInlining(1);\n     try {\n       test(options, \"\", \"\");",
    "Initialize id controller in replica edition .": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java\nindex a0ee7029266..df419ceebea 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java\n@@ -262,7 +262,7 @@ public abstract class EditionModule\n         return new BufferedIdController( idGeneratorFactory, scheduler );\n     }\n \n-    private DefaultIdController createDefaultIdController()\n+    protected DefaultIdController createDefaultIdController()\n     {\n         return new DefaultIdController();\n     }\ndiff --git a/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java b/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java\nindex 4938ef2766c..7fad82cc4ff 100644\n--- a/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java\n+++ b/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java\n@@ -144,6 +144,7 @@ public class EnterpriseReadReplicaEditionModule extends EditionModule\n         idTypeConfigurationProvider = new EnterpriseIdTypeConfigurationProvider( config );\n         idGeneratorFactory = dependencies\n                 .satisfyDependency( new DefaultIdGeneratorFactory( fileSystem, idTypeConfigurationProvider ) );\n+        idController = createDefaultIdController();\n         dependencies.satisfyDependency( new IdBasedStoreEntityCounters( this.idGeneratorFactory ) );\n \n         propertyKeyTokenHolder = life.add(",
    "removed datasource from SqlSessionUtils . getSqlSession": "diff --git a/src/main/java/org/mybatis/spring/SqlSessionUtils.java b/src/main/java/org/mybatis/spring/SqlSessionUtils.java\nindex b5521b7c..4c53a102 100644\n--- a/src/main/java/org/mybatis/spring/SqlSessionUtils.java\n+++ b/src/main/java/org/mybatis/spring/SqlSessionUtils.java\n@@ -65,41 +65,8 @@ public final class SqlSessionUtils {\n      *             {@literal SqlSessionFactory} is not using a {@literal SpringManagedTransactionFactory}\n      */\n     public static SqlSession getSqlSession(SqlSessionFactory sqlSessionFactory) {\n-        DataSource dataSource = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource();\n         ExecutorType executorType = sqlSessionFactory.getConfiguration().getDefaultExecutorType();\n-        return getSqlSession(sqlSessionFactory, dataSource, executorType);\n-    }\n-\n-    /**\n-     * Creates a new MyBatis {@link SqlSession} with a different {@link DataSource} than\n-     * the one holden into {@link SqlSessionFactory}. \n-     * It is just for testing purposes. Using this can cause runtime errors.\n-     *\n-     * @param sessionFactory a MyBatis {@literal SqlSessionFactory} to create new sessions\n-     * @param dataSource overrides MyBatis {@literal SqlSessionFactory} {@literal DataSource}\n-     * @return a MyBatis {@literal SqlSession}\n-     * @throws TransientDataAccessResourceException if a transaction is active and the\n-     *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}\n-     */\n-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, DataSource dataSource) {\n-        ExecutorType executorType = sessionFactory.getConfiguration().getDefaultExecutorType();\n-        return getSqlSession(sessionFactory, dataSource, executorType);\n-    }\n-\n-    /**\n-     * Creates a new MyBatis {@link SqlSession} from the provided {@link SqlSessionFactory}\n-     * using the {@link ExecutorType} provided as an argument and the {@link DataSource}\n-     * configured in the {@link SqlSessionFactory}\n-     *\n-     * @param sessionFactory a MyBatis {@literal SqlSessionFactory} to create new sessions\n-     * @param executorType type of executor to use BATCH, REUSE, SIMPLE..\n-     * @return\n-     * @throws TransientDataAccessResourceException if a transaction is active and the\n-     *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}\n-     */\n-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType) {\n-        DataSource dataSource = sessionFactory.getConfiguration().getEnvironment().getDataSource();\n-        return getSqlSession(sessionFactory, dataSource, executorType);\n+        return getSqlSession(sqlSessionFactory, executorType);\n     }\n \n     /**\n@@ -113,7 +80,7 @@ public final class SqlSessionUtils {\n      *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}\n      * @see org.mybatis.spring.transaction.SpringManagedTransactionFactory\n      */\n-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, DataSource dataSource, ExecutorType executorType) {\n+    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType) {\n         // either return the existing SqlSession or create a new one\n         SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);\n \n@@ -131,6 +98,7 @@ public final class SqlSessionUtils {\n             return holder.getSqlSession();\n         }\n \n+        DataSource dataSource = sessionFactory.getConfiguration().getEnvironment().getDataSource();\n         boolean transactionAware = (dataSource instanceof TransactionAwareDataSourceProxy);\n         Connection conn;\n \ndiff --git a/src/test/java/org/mybatis/spring/MyBatisSpringTest.java b/src/test/java/org/mybatis/spring/MyBatisSpringTest.java\nindex a056b375..eafcd572 100644\n--- a/src/test/java/org/mybatis/spring/MyBatisSpringTest.java\n+++ b/src/test/java/org/mybatis/spring/MyBatisSpringTest.java\n@@ -15,9 +15,6 @@\n  */\n package org.mybatis.spring;\n \n-import org.junit.Test;\n-import org.junit.After;\n-\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.fail;\n@@ -25,11 +22,13 @@ import static org.junit.Assert.fail;\n import org.apache.ibatis.mapping.Environment;\n import org.apache.ibatis.session.ExecutorType;\n import org.apache.ibatis.session.SqlSession;\n-\n+import org.apache.ibatis.session.SqlSessionFactory;\n import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;\n-\n+import org.junit.After;\n+import org.junit.Test;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n import org.springframework.dao.TransientDataAccessResourceException;\n-\n import org.springframework.transaction.TransactionStatus;\n import org.springframework.transaction.support.DefaultTransactionDefinition;\n \n@@ -134,7 +133,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n     @Test\n     public void testWithSameDataSource() {\n         // use the same DataSource the SqlSession is configured with\n-        session = SqlSessionUtils.getSqlSession(sqlSessionFactory, dataSource);\n+        session = SqlSessionUtils.getSqlSession(sqlSessionFactory);\n         session.getMapper(TestMapper.class).findTest();\n         SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);\n \n@@ -142,28 +141,6 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n         assertSingleConnection();\n     }\n \n-    @Test\n-    public void testWithDifferentDataSource() {\n-        try {\n-            CountingMockDataSource ds = new CountingMockDataSource();\n-            ds.setupConnection(createMockConnection());\n-\n-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);\n-            session.getMapper(TestMapper.class).findTest();\n-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);\n-\n-            assertNoCommit();\n-            assertEquals(\"should only call DataSource.getConnection() once\", 1, ds.getConnectionCount());\n-            assertEquals(\"should not call DataSource.getConnection() on SqlSession DataSource\", 0, dataSource\n-                    .getConnectionCount());\n-            assertConnectionClosed(ds.getMockConnection());\n-        } finally {\n-            // null the connection since it was not used\n-            // this avoids failing in validateConnectionClosed()\n-            connection = null;\n-        }\n-    }\n-\n     // Spring API should work with a MyBatis TransactionFactories, as long as there is not a Spring\n     // TX is progress\n     @Test\n@@ -271,24 +248,31 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n         final PooledMockDataSource ds = new PooledMockDataSource();\n         ds.addConnection(connection1);\n         ds.addConnection(connection2);\n-\n+        \n+        // session not in existing tx, should use first connection\n+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();\n+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(\"org/mybatis/spring/TestMapper.xml\") });\n+        sfb1.setDataSource(ds);\n+  \n+        SqlSessionFactory sf1 = sfb1.getObject();\n+  \n         try {\n             txManager.setDataSource(ds);\n             TransactionStatus status = txManager.getTransaction(new DefaultTransactionDefinition());\n \n-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);\n+            session = SqlSessionUtils.getSqlSession(sf1);\n \n             // start a new tx while the other is in progress\n             DefaultTransactionDefinition txRequiresNew = new DefaultTransactionDefinition();\n             txRequiresNew.setPropagationBehaviorName(\"PROPAGATION_REQUIRES_NEW\");\n             TransactionStatus status2 = txManager.getTransaction(txRequiresNew);\n \n-            SqlSession session2 = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds, ExecutorType.BATCH);\n+            SqlSession session2 = SqlSessionUtils.getSqlSession(sf1, ExecutorType.BATCH);\n \n-            SqlSessionUtils.closeSqlSession(session2, sqlSessionFactory);\n+            SqlSessionUtils.closeSqlSession(session2, sf1);\n             txManager.rollback(status2);\n \n-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);\n+            SqlSessionUtils.closeSqlSession(session, sf1);\n             txManager.rollback(status);\n \n         } finally {\n@@ -298,6 +282,9 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n             // null the connection since it was not used\n             // this avoids failing in validateConnectionClosed()\n             connection = null;\n+            \n+            // Don't check if session is closed?\n+            session = null;\n         }\n     }\n \n@@ -362,7 +349,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n     }\n \n     @Test\n-    public void testWithOtherTx() {\n+    public void testWithOtherTx() throws Exception {\n         MockConnection connection1 = createMockConnection();\n         MockConnection connection2 = createMockConnection();\n \n@@ -371,7 +358,15 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n         ds.addConnection(connection2);\n \n         // session not in existing tx, should use first connection\n-        session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);\n+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();\n+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(\"org/mybatis/spring/TestMapper.xml\") });\n+        sfb1.setDataSource(ds);\n+        ExecutorInterceptor ei = new ExecutorInterceptor();\n+\n+        SqlSessionFactory sf1 = sfb1.getObject();\n+        sf1.getConfiguration().addInterceptor(ei);\n+\n+        session = SqlSessionUtils.getSqlSession(sf1);\n \n         try {\n             // this transaction should use another Connection\n@@ -381,7 +376,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n             // all MyBatis work happens during the tx, but should not be participating\n             session.getMapper(TestMapper.class).findTest();\n             session.commit(true);\n-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);\n+            SqlSessionUtils.closeSqlSession(session, sf1);\n \n             // this should succeed\n             // SpringManagedTransaction (from SqlSession.commit()) should not interfere with tx\n@@ -398,8 +393,8 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n             assertEquals(\"should not call rollback on Connection 2\", 0, connection2.getNumberRollbacks());\n \n             // the SqlSession should have also committed\n-            assertEquals(\"should call commit on SqlSession\", 1, executorInterceptor.getCommitCount());\n-            assertEquals(\"should call rollback on SqlSession\", 0, executorInterceptor.getRollbackCount());\n+            assertEquals(\"should call commit on SqlSession\", 1, ei.getCommitCount());\n+            assertEquals(\"should call rollback on SqlSession\", 0, ei.getRollbackCount());\n \n             assertConnectionClosed(connection1);\n             assertConnectionClosed(connection2);\n@@ -410,11 +405,15 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n             // null the connection since it was not used\n             // this avoids failing in validateConnectionClosed()\n             connection = null;\n+            \n+            // null the session since it was not used\n+            // this avoids failing in validateSessionClosed()\n+            session = null;\n         }\n     }\n \n     @Test\n-    public void testSuspendAndResume() {\n+    public void testSuspendAndResume() throws Exception {\n         MockConnection connection1 = createMockConnection();\n         MockConnection connection2 = createMockConnection();\n \n@@ -422,27 +421,36 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n         ds.addConnection(connection1);\n         ds.addConnection(connection2);\n \n+        // session not in existing tx, should use first connection\n+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();\n+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(\"org/mybatis/spring/TestMapper.xml\") });\n+        sfb1.setDataSource(ds);\n+  \n+        ExecutorInterceptor ei = new ExecutorInterceptor();\n+        SqlSessionFactory sf1 = sfb1.getObject();\n+        sf1.getConfiguration().addInterceptor(ei);\n+\n         try {\n             txManager.setDataSource(ds);\n             TransactionStatus status = txManager.getTransaction(new DefaultTransactionDefinition());\n \n-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);\n+            session = SqlSessionUtils.getSqlSession(sf1);\n \n             // start a new tx while the other is in progress\n             DefaultTransactionDefinition txRequiresNew = new DefaultTransactionDefinition();\n             txRequiresNew.setPropagationBehaviorName(\"PROPAGATION_REQUIRES_NEW\");\n             TransactionStatus status2 = txManager.getTransaction(txRequiresNew);\n \n-            SqlSession session2 = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);\n+            SqlSession session2 = SqlSessionUtils.getSqlSession(sf1);\n \n             assertNotSame(\"getSqlSession() should not return suspended SqlSession\", session, session2);\n \n-            SqlSessionUtils.closeSqlSession(session2, sqlSessionFactory);\n+            SqlSessionUtils.closeSqlSession(session2, sf1);\n             txManager.commit(status2);\n \n             // first tx should be resumed now and this should succeed\n             session.getMapper(TestMapper.class).findTest();\n-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);\n+            SqlSessionUtils.closeSqlSession(session, sf1);\n             txManager.commit(status);\n \n             // two transactions should have completed, each using their own Connection\n@@ -456,8 +464,8 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {\n       ",
    "make term / prefix / wildcard / regex query parsing more lenient ( <issue_id> ) .": "diff --git a/docs/reference/query-dsl/prefix-query.asciidoc b/docs/reference/query-dsl/prefix-query.asciidoc\nindex e168bb4de0d..9d28dfb6b42 100644\n--- a/docs/reference/query-dsl/prefix-query.asciidoc\n+++ b/docs/reference/query-dsl/prefix-query.asciidoc\n@@ -43,7 +43,8 @@ information, see the <<query-dsl-multi-term-rewrite, `rewrite` parameter>>.\n \n `case_insensitive`::\n (Optional, boolean) allows ASCII case insensitive matching of the\n-value with the indexed field values when set to true. Setting to false is disallowed.\n+value with the indexed field values when set to true. Default is false which means\n+the case sensitivity of matching depends on the underlying field's mapping.\n \n [[prefix-query-notes]]\n ==== Notes\ndiff --git a/docs/reference/query-dsl/regexp-query.asciidoc b/docs/reference/query-dsl/regexp-query.asciidoc\nindex a0ead3ea9df..c50207299f2 100644\n--- a/docs/reference/query-dsl/regexp-query.asciidoc\n+++ b/docs/reference/query-dsl/regexp-query.asciidoc\n@@ -70,7 +70,8 @@ expression syntax>>.\n \n `case_insensitive`::\n (Optional, boolean) allows case insensitive matching of the regular expression\n-value with the indexed field values when set to true. Setting to false is disallowed.\n+value with the indexed field values when set to true. Default is false which means\n+the case sensitivity of matching depends on the underlying field's mapping.\n \n `max_determinized_states`::\n +\ndiff --git a/docs/reference/query-dsl/term-query.asciidoc b/docs/reference/query-dsl/term-query.asciidoc\nindex 62de4d835ed..40f8d5e5ed7 100644\n--- a/docs/reference/query-dsl/term-query.asciidoc\n+++ b/docs/reference/query-dsl/term-query.asciidoc\n@@ -64,7 +64,8 @@ increases the relevance score.\n \n `case_insensitive`::\n (Optional, boolean) allows ASCII case insensitive matching of the\n-value with the indexed field values when set to true. Setting to false is disallowed.\n+value with the indexed field values when set to true. Default is false which means\n+the case sensitivity of matching depends on the underlying field's mapping\n \n [[term-query-notes]]\n ==== Notes\ndiff --git a/docs/reference/query-dsl/wildcard-query.asciidoc b/docs/reference/query-dsl/wildcard-query.asciidoc\nindex 8d3c0f2630a..56daf53e120 100644\n--- a/docs/reference/query-dsl/wildcard-query.asciidoc\n+++ b/docs/reference/query-dsl/wildcard-query.asciidoc\n@@ -71,7 +71,8 @@ increases the relevance score.\n \n `case_insensitive`::\n (Optional, boolean) allows case insensitive matching of the\n-pattern with the indexed field values when set to true. Setting to false is disallowed.\n+pattern with the indexed field values when set to true. Default is false which means\n+the case sensitivity of matching depends on the underlying field's mapping.\n \n [[wildcard-query-notes]]\n ==== Notes\ndiff --git a/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java\nindex 2e8f6606a33..1134fe4a753 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java\n@@ -109,9 +109,6 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>\n     }\n \n     public PrefixQueryBuilder caseInsensitive(boolean caseInsensitive) {\n-        if (caseInsensitive == false) {\n-            throw new IllegalArgumentException(\"The case insensitive setting cannot be set to false.\");\n-        }\n         this.caseInsensitive = caseInsensitive;\n         return this;\n     }\n@@ -175,10 +172,6 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>\n                             rewrite = parser.textOrNull();\n                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                             caseInsensitive = parser.booleanValue();\n-                            if (caseInsensitive == false) {\n-                                throw new ParsingException(parser.getTokenLocation(),\n-                                    \"[prefix] query does not support [\" + currentFieldName + \"] = false\");\n-                            }\n                         } else {\n                             throw new ParsingException(parser.getTokenLocation(),\n                                     \"[prefix] query does not support [\" + currentFieldName + \"]\");\n@@ -196,9 +189,7 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>\n                 .rewrite(rewrite)\n                 .boost(boost)\n                 .queryName(queryName);\n-        if (caseInsensitive) {\n-            result.caseInsensitive(caseInsensitive);\n-        }\n+        result.caseInsensitive(caseInsensitive);\n         return result;\n     }\n \ndiff --git a/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java\nindex f9403de0def..d4dfce79f56 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java\n@@ -154,9 +154,6 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>\n     }\n \n     public RegexpQueryBuilder caseInsensitive(boolean caseInsensitive) {\n-        if (caseInsensitive == false) {\n-            throw new IllegalArgumentException(\"The case insensitive setting cannot be set to false.\");\n-        }\n         this.caseInsensitive = caseInsensitive;\n         return this;\n     }\n@@ -240,10 +237,6 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>\n                             flagsValue = parser.intValue();\n                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                             caseInsensitive = parser.booleanValue();\n-                            if (caseInsensitive == false) {\n-                                throw new ParsingException(parser.getTokenLocation(),\n-                                    \"[regexp] query does not support [\" + currentFieldName + \"] = false\");\n-                            }\n                         } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                             queryName = parser.text();\n                         } else {\n@@ -265,9 +258,7 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>\n                 .rewrite(rewrite)\n                 .boost(boost)\n                 .queryName(queryName);\n-        if (caseInsensitive) {\n-            result.caseInsensitive(caseInsensitive);\n-        }\n+        result.caseInsensitive(caseInsensitive);\n         return result;\n     }\n \ndiff --git a/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java\nindex 3730efa7d01..73e85b34bd4 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java\n@@ -86,9 +86,6 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {\n     }\n \n     public TermQueryBuilder caseInsensitive(boolean caseInsensitive) {\n-        if (caseInsensitive == false) {\n-            throw new IllegalArgumentException(\"The case insensitive setting cannot be set to false.\");\n-        }\n         this.caseInsensitive = caseInsensitive;\n         return this;\n     }\n@@ -143,10 +140,6 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {\n                             boost = parser.floatValue();\n                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                             caseInsensitive = parser.booleanValue();\n-                            if (caseInsensitive == false) {\n-                                throw new ParsingException(parser.getTokenLocation(),\n-                                    \"[term] query does not support [\" + currentFieldName + \"] = false\");\n-                            }\n                         } else {\n                             throw new ParsingException(parser.getTokenLocation(),\n                                     \"[term] query does not support [\" + currentFieldName + \"]\");\n@@ -167,9 +160,7 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {\n         if (queryName != null) {\n             termQuery.queryName(queryName);\n         }\n-        if (caseInsensitive) {\n-            termQuery.caseInsensitive(caseInsensitive);\n-        }\n+        termQuery.caseInsensitive(caseInsensitive);\n         return termQuery;\n     }\n \ndiff --git a/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java\nindex 099a8c3a6e5..08db089a844 100644\n--- a/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java\n+++ b/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java\n@@ -128,9 +128,6 @@ public class WildcardQueryBuilder extends AbstractQueryBuilder<WildcardQueryBuil\n     }\n \n     public WildcardQueryBuilder caseInsensitive(boolean caseInsensitive) {\n-        if (caseInsensitive == false) {\n-            throw new IllegalArgumentException(\"The case insensitive setting cannot be set to false.\");\n-        }\n         this.caseInsensitive = caseInsensitive;\n         return this;\n   ",
    "Remove bitcointalk forum link": "diff --git a/README.md b/README.md\nindex 8f441a836e..566eff19e5 100644\n--- a/README.md\n+++ b/README.md\n@@ -34,7 +34,6 @@ Contact the team and keep up to date using any of the following:\n  - Our [mailing list](https://groups.google.com/forum/#!forum/bitsquare)\n  - [@bitsquare_](https://twitter.com/bitsquare_) on Twitter\n  - [team@bitsquare.io](mailto:team@bitsquare.io)\n- - The [Bitsquare thread](https://bitcointalk.org/index.php?topic=647457) on the Bitcointalk forum\n  - GitHub [Issues](https://github.com/bitsquare/bitsquare/issues)\n \n ",
    "Remove imports": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java\nindex 54077c82c09..a164e8156f6 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java\n@@ -19,24 +19,16 @@\n  */\n package org.neo4j.kernel.impl.api.integrationtest;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.neo4j.graphdb.GraphDatabaseService;\n-import org.neo4j.graphdb.Label;\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.Transaction;\n-import org.neo4j.graphdb.TransactionFailureException;\n import org.neo4j.internal.kernel.api.IndexReference;\n-import org.neo4j.internal.kernel.api.LabelSet;\n import org.neo4j.internal.kernel.api.NodeCursor;\n-import org.neo4j.internal.kernel.api.NodeLabelIndexCursor;\n import org.neo4j.internal.kernel.api.SchemaWrite;\n import org.neo4j.internal.kernel.api.TokenWrite;\n import org.neo4j.internal.kernel.api.exceptions.InvalidTransactionTypeKernelException;\n@@ -48,13 +40,9 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n import org.neo4j.kernel.internal.GraphDatabaseAPI;\n \n import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n-import static org.neo4j.graphdb.Label.label;\n import static org.neo4j.internal.kernel.api.security.LoginContext.AUTH_DISABLED;\n import static org.neo4j.kernel.api.schema.SchemaDescriptorFactory.forLabel;\n import static org.neo4j.test.assertion.Assert.assertEventually;",
    "Added multichat operation set definition and Gibberish protocol implementation .": "diff --git a/lib/felix.client.run.properties b/lib/felix.client.run.properties\nindex 7ab9a0cde..9900f3edd 100644\n--- a/lib/felix.client.run.properties\n+++ b/lib/felix.client.run.properties\n@@ -65,6 +65,7 @@ felix.auto.start.50= \\\n  reference:file:sc-bundles/protocol-jabber.jar \\\n  reference:file:sc-bundles/protocol-msn.jar \\\n  reference:file:sc-bundles/protocol-yahoo.jar \\\n+ reference:file:sc-bundles/protocol-gibberish.jar \\\n  reference:file:sc-bundles/netaddr.jar \\\n  reference:file:sc-bundles/meta-cl.jar\n \n@@ -78,13 +79,14 @@ felix.auto.start.60= \\\n  felix.auto.start.66= \\\n  reference:file:sc-bundles/swing-ui.jar \\\n  reference:file:sc-bundles/systray.jar\n- \n+\n  felix.auto.start.67= \\\n  reference:file:sc-bundles/icqaccregwizz.jar \\\n  reference:file:sc-bundles/sipaccregwizz.jar \\\n  reference:file:sc-bundles/jabberaccregwizz.jar \\\n  reference:file:sc-bundles/msnaccregwizz.jar \\\n  reference:file:sc-bundles/yahooaccregwizz.jar \\\n+ reference:file:sc-bundles/gibberishaccregwizz.jar \\\n  reference:file:sc-bundles/shutdown.jar\n \n # Uncomment the following lines if you want to run the architect viewer",
    "Add support for a configurable list of repo for dependencies .": "diff --git a/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java\nindex 16bd0f04a..c4614bf68 100644\n--- a/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java\n+++ b/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java\n@@ -68,6 +68,9 @@ public class DepInterpreter extends Interpreter {\n         DepInterpreter.class.getName(),\n         new InterpreterPropertyBuilder()\n             .add(\"zeppelin.dep.localrepo\", \"local-repo\", \"local repository for dependency loader\")\n+            .add(\"zeppelin.dep.additionalRemoteRepository\",\n+                \"spark-packages,http://dl.bintray.com/spark-packages/maven,false;\",\n+                \"A list of 'id,remote-repository-URL,is-snapshot;' for each remote repository.\")\n             .build());\n \n   }\n@@ -146,7 +149,8 @@ public class DepInterpreter extends Interpreter {\n     intp.setContextClassLoader();\n     intp.initializeSynchronous();\n \n-    depc = new DependencyContext(getProperty(\"zeppelin.dep.localrepo\"));\n+    depc = new DependencyContext(getProperty(\"zeppelin.dep.localrepo\"),\n+                                 getProperty(\"zeppelin.dep.additionalRemoteRepository\"));\n     completor = new SparkJLineCompletion(intp);\n \n     intp.interpret(\"@transient var _binder = new java.util.HashMap[String, Object]()\");\ndiff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java\nindex a2e31fb22..77d4986bf 100644\n--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java\n+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java\n@@ -228,7 +228,10 @@ public class SparkInterpreter extends Interpreter {\n \n   public DependencyResolver getDependencyResolver() {\n     if (dep == null) {\n-      dep = new DependencyResolver(intp, sc, getProperty(\"zeppelin.dep.localrepo\"));\n+      dep = new DependencyResolver(intp,\n+                                   sc,\n+                                   getProperty(\"zeppelin.dep.localrepo\"),\n+                                   getProperty(\"zeppelin.dep.additionalRemoteRepository\"));\n     }\n     return dep;\n   }\ndiff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java\nindex 053380459..ece39c3c9 100644\n--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java\n+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java\n@@ -67,4 +67,9 @@ public class Booter {\n   public static RemoteRepository newCentralRepository() {\n     return new RemoteRepository(\"central\", \"default\", \"http://repo1.maven.org/maven2/\");\n   }\n+\n+  public static RemoteRepository newLocalRepository() {\n+    return new RemoteRepository(\"local\",\n+        \"default\", \"file://\" + System.getProperty(\"user.home\") + \"/.m2/repository\");\n+  }\n }\ndiff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java\nindex f0fd31325..0f465f1c2 100644\n--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java\n+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java\n@@ -49,13 +49,13 @@ public class DependencyContext {\n   List<File> filesDist = new LinkedList<File>();\n   private RepositorySystem system = Booter.newRepositorySystem();\n   private RepositorySystemSession session;\n-  private RemoteRepository mavenCentral = new RemoteRepository(\"central\",\n-      \"default\", \"http://repo1.maven.org/maven2/\");\n-  private RemoteRepository mavenLocal = new RemoteRepository(\"local\",\n-      \"default\", \"file://\" + System.getProperty(\"user.home\") + \"/.m2/repository\");\n+  private RemoteRepository mavenCentral = Booter.newCentralRepository();\n+  private RemoteRepository mavenLocal = Booter.newLocalRepository();\n+  private List<RemoteRepository> additionalRepos = new LinkedList<RemoteRepository>();\n \n-  public DependencyContext(String localRepoPath) {\n+  public DependencyContext(String localRepoPath, String additionalRemoteRepository) {\n     session =  Booter.newRepositorySystemSession(system, localRepoPath);\n+    addRepoFromProperty(additionalRemoteRepository);\n   }\n \n   public Dependency load(String lib) {\n@@ -82,6 +82,24 @@ public class DependencyContext {\n     filesDist = new LinkedList<File>();\n   }\n \n+  private void addRepoFromProperty(String listOfRepo) {\n+    if (listOfRepo != null) {\n+      String[] repos = listOfRepo.split(\";\");\n+      for (String repo : repos) {\n+        String[] parts = repo.split(\",\");\n+        if (parts.length == 3) {\n+          String id = parts[0].trim();\n+          String url = parts[1].trim();\n+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());\n+          if (id.length() > 1 && url.length() > 1) {\n+            RemoteRepository rr = new RemoteRepository(id, \"default\", url);\n+            rr.setPolicy(isSnapshot, null);\n+            additionalRepos.add(rr);\n+          }\n+        }\n+      }\n+    }\n+  }\n \n   /**\n    * fetch all artifacts\n@@ -129,6 +147,9 @@ public class DependencyContext {\n \n     collectRequest.addRepository(mavenCentral);\n     collectRequest.addRepository(mavenLocal);\n+    for (RemoteRepository repo : additionalRepos) {\n+      collectRequest.addRepository(repo);\n+    }\n     for (Repository repo : repositories) {\n       RemoteRepository rr = new RemoteRepository(repo.getName(), \"default\", repo.getUrl());\n       rr.setPolicy(repo.isSnapshot(), null);\ndiff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java\nindex 0702948fb..0a305300d 100644\n--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java\n+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java\n@@ -83,14 +83,15 @@ public class DependencyResolver {\n                                                     \"org.apache.zeppelin:zeppelin-spark\",\n                                                     \"org.apache.zeppelin:zeppelin-server\"};\n \n-  public DependencyResolver(SparkIMain intp, SparkContext sc, String localRepoPath) {\n+  public DependencyResolver(SparkIMain intp, SparkContext sc, String localRepoPath,\n+                            String additionalRemoteRepository) {\n     this.intp = intp;\n     this.global = intp.global();\n     this.sc = sc;\n     session = Booter.newRepositorySystemSession(system, localRepoPath);\n     repos.add(Booter.newCentralRepository()); // add maven central\n-    repos.add(new RemoteRepository(\"local\", \"default\", \"file://\"\n-        + System.getProperty(\"user.home\") + \"/.m2/repository\"));\n+    repos.add(Booter.newLocalRepository());\n+    addRepoFromProperty(additionalRemoteRepository);\n   }\n \n   public void addRepo(String id, String url, boolean snapshot) {\n@@ -116,6 +117,23 @@ public class DependencyResolver {\n     return null;\n   }\n \n+  private void addRepoFromProperty(String listOfRepo) {\n+    if (listOfRepo != null) {\n+      String[] repos = listOfRepo.split(\";\");\n+      for (String repo : repos) {\n+        String[] parts = repo.split(\",\");\n+        if (parts.length == 3) {\n+          String id = parts[0].trim();\n+          String url = parts[1].trim();\n+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());\n+          if (id.length() > 1 && url.length() > 1) {\n+            addRepo(id, url, isSnapshot);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n   private void updateCompilerClassPath(URL[] urls) throws IllegalAccessException,\n       IllegalArgumentException, InvocationTargetException {\n \ndiff --git a/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java b/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java\nindex 6adaa14f7..efa8fae25 100644\n--- a/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java\n+++ b/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java\n@@ -90,5 +90,12 @@ public class DepInterpreterTest {\n \n     assertEquals(1, dep.getDependencyContext().getFiles().size());\n     assertEquals(1, dep.getDependencyContext().getFilesDist().size());\n+\n+    // Add a test for the spark-packages repo - default in additionalRemoteRepository\n+    ret = dep.interpret(\"z.load(\\\"amplab:spark-indexedrdd:0.3\\\")\", context);\n+    assertEquals(Code.SUCCESS, ret.code());\n+\n+    // Reset at the end of the test\n+    dep.getDependencyContext().reset();\n   }\n }",
    "Deprecated JdbcTemplate \\' s queryForInt / Long operations in favor of queryForObject ( following NamedParameterJdbcTemplate ) .": "diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java\nindex 8f5a9964cd..6db102fc64 100644\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -133,7 +133,8 @@ public interface JdbcOperations {\n \t * object via a RowMapper.\n \t * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to\n \t * execute a static query with a PreparedStatement, use the overloaded\n-\t * {@code queryForObject} method with {@code null} as argument array.\n+\t * {@link #queryForObject(String, RowMapper, Object...)} method with\n+\t * {@code null} as argument array.\n \t * @param sql SQL query to execute\n \t * @param rowMapper object that will map one object per row\n \t * @return the single mapped object\n@@ -148,7 +149,8 @@ public interface JdbcOperations {\n \t * Execute a query for a result object, given static SQL.\n \t * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to\n \t * execute a static query with a PreparedStatement, use the overloaded\n-\t * {@code queryForObject} method with {@code null} as argument array.\n+\t * {@link #queryForObject(String, Class, Object...)} method with\n+\t * {@code null} as argument array.\n \t * <p>This method is useful for running static SQL with a known outcome.\n \t * The query is expected to be a single row/single column query; the returned\n \t * result will be directly mapped to the corresponding object type.\n@@ -166,7 +168,8 @@ public interface JdbcOperations {\n \t * Execute a query for a result Map, given static SQL.\n \t * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to\n \t * execute a static query with a PreparedStatement, use the overloaded\n-\t * {@code queryForMap} method with {@code null} as argument array.\n+\t * {@link #queryForMap(String, Object...)} method with {@code null}\n+\t * as argument array.\n \t * <p>The query is expected to be a single row query; the result row will be\n \t * mapped to a Map (one entry for each column, using the column name as the key).\n \t * @param sql SQL query to execute\n@@ -194,7 +197,9 @@ public interface JdbcOperations {\n \t * exactly one row, or does not return exactly one column in that row\n \t * @throws DataAccessException if there is any problem executing the query\n \t * @see #queryForLong(String, Object[])\n+\t * @deprecated in favor of {@link #queryForObject(String, Class)}\n \t */\n+\t@Deprecated\n \tlong queryForLong(String sql) throws DataAccessException;\n \n \t/**\n@@ -211,7 +216,9 @@ public interface JdbcOperations {\n \t * exactly one row, or does not return exactly one column in that row\n \t * @throws DataAccessException if there is any problem executing the query\n \t * @see #queryForInt(String, Object[])\n+\t * @deprecated in favor of {@link #queryForObject(String, Class)}\n \t */\n+\t@Deprecated\n \tint queryForInt(String sql) throws DataAccessException;\n \n \t/**\n@@ -712,7 +719,9 @@ public interface JdbcOperations {\n \t * @throws DataAccessException if the query fails\n \t * @see #queryForLong(String)\n \t * @see java.sql.Types\n+\t * @deprecated in favor of {@link #queryForObject(String, Object[], int[], Class)} )}\n \t */\n+\t@Deprecated\n \tlong queryForLong(String sql, Object[] args, int[] argTypes) throws DataAccessException;\n \n \t/**\n@@ -730,7 +739,9 @@ public interface JdbcOperations {\n \t * exactly one row, or does not return exactly one column in that row\n \t * @throws DataAccessException if the query fails\n \t * @see #queryForLong(String)\n+\t * @deprecated in favor of {@link #queryForObject(String, Class, Object[])} )}\n \t */\n+\t@Deprecated\n \tlong queryForLong(String sql, Object... args) throws DataAccessException;\n \n \t/**\n@@ -748,7 +759,9 @@ public interface JdbcOperations {\n \t * @throws DataAccessException if the query fails\n \t * @see #queryForInt(String)\n \t * @see java.sql.Types\n+\t * @deprecated in favor of {@link #queryForObject(String, Object[], int[], Class)} )}\n \t */\n+\t@Deprecated\n \tint queryForInt(String sql, Object[] args, int[] argTypes) throws DataAccessException;\n \n \t/**\n@@ -766,7 +779,9 @@ public interface JdbcOperations {\n \t * exactly one row, or does not return exactly one column in that row\n \t * @throws DataAccessException if the query fails\n \t * @see #queryForInt(String)\n+\t * @deprecated in favor of {@link #queryForObject(String, Class, Object[])} )}\n \t */\n+\t@Deprecated\n \tint queryForInt(String sql, Object... args) throws DataAccessException;\n \n \t/**\ndiff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\nindex 3f0085cebf..910d206872 100644\n--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -477,11 +477,13 @@ public class JdbcTemplate extends JdbcAccessor implements JdbcOperations {\n \t\treturn queryForObject(sql, getSingleColumnRowMapper(requiredType));\n \t}\n \n+\t@Deprecated\n \tpublic long queryForLong(String sql) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, Long.class);\n \t\treturn (number != null ? number.longValue() : 0);\n \t}\n \n+\t@Deprecated\n \tpublic int queryForInt(String sql) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, Integer.class);\n \t\treturn (number != null ? number.intValue() : 0);\n@@ -757,21 +759,25 @@ public class JdbcTemplate extends JdbcAccessor implements JdbcOperations {\n \t\treturn queryForObject(sql, args, getColumnMapRowMapper());\n \t}\n \n+\t@Deprecated\n \tpublic long queryForLong(String sql, Object[] args, int[] argTypes) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, args, argTypes, Long.class);\n \t\treturn (number != null ? number.longValue() : 0);\n \t}\n \n+\t@Deprecated\n \tpublic long queryForLong(String sql, Object... args) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, args, Long.class);\n \t\treturn (number != null ? number.longValue() : 0);\n \t}\n \n+\t@Deprecated\n \tpublic int queryForInt(String sql, Object[] args, int[] argTypes) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, args, argTypes, Integer.class);\n \t\treturn (number != null ? number.intValue() : 0);\n \t}\n \n+\t@Deprecated\n \tpublic int queryForInt(String sql, Object... args) throws DataAccessException {\n \t\tNumber number = queryForObject(sql, args, Integer.class);\n \t\treturn (number != null ? number.intValue() : 0);",
    "Add position for resource and service": "diff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java\nindex b6f086708d0..890a84f78f4 100644\n--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java\n+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java\n@@ -63,6 +63,7 @@ import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;\n import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;\n import org.wso2.ballerinalang.compiler.tree.BLangNameReference;\n import org.wso2.ballerinalang.compiler.tree.BLangPackageDeclaration;\n+import org.wso2.ballerinalang.compiler.tree.BLangResource;\n import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.BLangStruct;\n import org.wso2.ballerinalang.compiler.tree.BLangVariable;\n@@ -1372,10 +1373,11 @@ public class BLangPackageBuilder {\n                 .forEach(varDef -> serviceNode.addVariable((VariableDefinitionNode) varDef));\n     }\n \n-    public void endServiceDef(Set<Whitespace> ws, String protocolPkg, String serviceName) {\n+    public void endServiceDef(DiagnosticPos pos, Set<Whitespace> ws, String protocolPkg, String serviceName) {\n         ServiceNode serviceNode = serviceNodeStack.pop();\n         serviceNode.setName(createIdentifier(serviceName));\n         serviceNode.setProtocolPackageIdentifier(createIdentifier(protocolPkg));\n+        ((BLangService) serviceNode).pos = pos;\n         serviceNode.addWS(ws);\n         this.compUnit.addTopLevelNode(serviceNode);\n     }\n@@ -1385,10 +1387,11 @@ public class BLangPackageBuilder {\n         invokableNodeStack.push(resourceNode);\n     }\n \n-    public void endResourceDef(Set<Whitespace> ws, String resourceName, int annotCount) {\n+    public void endResourceDef(DiagnosticPos pos, Set<Whitespace> ws, String resourceName, int annotCount) {\n         ResourceNode resourceNode = (ResourceNode) invokableNodeStack.pop();\n         resourceNode.addWS(ws);\n         resourceNode.setName(createIdentifier(resourceName));\n+        ((BLangResource) resourceNode).pos = pos;\n         attachAnnotations(resourceNode, annotCount);\n         varListStack.pop().forEach(resourceNode::addParameter);\n         serviceNodeStack.peek().addResource(resourceNode);\ndiff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\nindex 12ccbb3104a..62b1f95bf6c 100644\n--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n@@ -182,7 +182,8 @@ public class BLangParserListener extends BallerinaParserBaseListener {\n         if (ctx.exception != null) {\n             return;\n         }\n-        this.pkgBuilder.endServiceDef(getWS(ctx), ctx.Identifier(0).getText(), ctx.Identifier(1).getText());\n+        this.pkgBuilder.endServiceDef(getCurrentPos(ctx), getWS(ctx), ctx.Identifier(0).getText(),\n+                ctx.Identifier(1).getText());\n     }\n \n     /**\n@@ -236,7 +237,8 @@ public class BLangParserListener extends BallerinaParserBaseListener {\n         if (ctx.exception != null) {\n             return;\n         }\n-        this.pkgBuilder.endResourceDef(getWS(ctx), ctx.Identifier().getText(), ctx.annotationAttachment().size());\n+        this.pkgBuilder.endResourceDef(getCurrentPos(ctx), getWS(ctx), ctx.Identifier().getText(),\n+                ctx.annotationAttachment().size());\n     }\n \n     /**\ndiff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java\nindex 230fff678be..3b85a923ab6 100644\n--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java\n+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java\n@@ -124,7 +124,7 @@ public class BallerinaParserErrorStrategy extends DefaultErrorStrategy {\n      * \n      * @param parser Current parser\n      */\n-    private void setContextException(Parser parser) {\n+    protected void setContextException(Parser parser) {\n         // Here the type of the exception is not important.\n         InputMismatchException e = new InputMismatchException(parser);\n         for (ParserRuleContext context = parser.getContext(); context != null; context = context.getParent()) {",
    "Remove ParseFieldMatcher usages from IndexSettings": "diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java\nindex bccfd97e534..2cb04260125 100644\n--- a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java\n+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java\n@@ -20,7 +20,6 @@\n package org.elasticsearch.cluster.routing.allocation.command;\n \n import org.elasticsearch.common.ParseField;\n-import org.elasticsearch.common.ParseFieldMatcherSupplier;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n import org.elasticsearch.common.xcontent.ObjectParser;\ndiff --git a/core/src/main/java/org/elasticsearch/index/IndexSettings.java b/core/src/main/java/org/elasticsearch/index/IndexSettings.java\nindex dbe6d3505a4..25751cfc771 100644\n--- a/core/src/main/java/org/elasticsearch/index/IndexSettings.java\n+++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java\n@@ -22,7 +22,6 @@ import org.apache.logging.log4j.Logger;\n import org.apache.lucene.index.MergePolicy;\n import org.elasticsearch.Version;\n import org.elasticsearch.cluster.metadata.IndexMetaData;\n-import org.elasticsearch.common.ParseFieldMatcher;\n import org.elasticsearch.common.logging.Loggers;\n import org.elasticsearch.common.settings.IndexScopedSettings;\n import org.elasticsearch.common.settings.Setting;\n@@ -136,7 +135,6 @@ public final class IndexSettings {\n     private final Settings nodeSettings;\n     private final int numberOfShards;\n     private final boolean isShadowReplicaIndex;\n-    private final ParseFieldMatcher parseFieldMatcher;\n     // volatile fields are updated via #updateIndexMetaData(IndexMetaData) under lock\n     private volatile Settings settings;\n     private volatile IndexMetaData indexMetaData;\n@@ -237,7 +235,6 @@ public final class IndexSettings {\n         this.queryStringLenient = QUERY_STRING_LENIENT_SETTING.get(settings);\n         this.queryStringAnalyzeWildcard = QUERY_STRING_ANALYZE_WILDCARD.get(nodeSettings);\n         this.queryStringAllowLeadingWildcard = QUERY_STRING_ALLOW_LEADING_WILDCARD.get(nodeSettings);\n-        this.parseFieldMatcher = new ParseFieldMatcher(settings);\n         this.defaultAllowUnmappedFields = scopedSettings.get(ALLOW_UNMAPPED);\n         this.durability = scopedSettings.get(INDEX_TRANSLOG_DURABILITY_SETTING);\n         syncInterval = INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.get(settings);\n@@ -388,11 +385,6 @@ public final class IndexSettings {\n         return nodeSettings;\n     }\n \n-    /**\n-     * Returns a {@link ParseFieldMatcher} for this index.\n-     */\n-    public ParseFieldMatcher getParseFieldMatcher() { return parseFieldMatcher; }\n-\n     /**\n      * Updates the settings and index metadata and notifies all registered settings consumers with the new settings iff at least one setting has changed.\n      *\ndiff --git a/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java b/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java\nindex 543a02d3e86..5cb9f6111f5 100644\n--- a/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java\n+++ b/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java\n@@ -22,7 +22,6 @@ package org.elasticsearch.ingest;\n import org.elasticsearch.cluster.AbstractDiffable;\n import org.elasticsearch.cluster.Diff;\n import org.elasticsearch.common.ParseField;\n-import org.elasticsearch.common.ParseFieldMatcherSupplier;\n import org.elasticsearch.common.bytes.BytesReference;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n@@ -40,7 +39,7 @@ import java.util.Map;\n  */\n public final class PipelineConfiguration extends AbstractDiffable<PipelineConfiguration> implements ToXContent {\n \n-    private static final ObjectParser<Builder, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(\"pipeline_config\", Builder::new);\n+    private static final ObjectParser<Builder, Void> PARSER = new ObjectParser<>(\"pipeline_config\", Builder::new);\n     static {\n         PARSER.declareString(Builder::setId, new ParseField(\"id\"));\n         PARSER.declareField((parser, builder, aVoid) -> {\ndiff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java\nindex 00f0f2667e0..87c7404c088 100644\n--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java\n+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java\n@@ -20,7 +20,6 @@\n package org.elasticsearch.search.aggregations.bucket.histogram;\n \n import org.elasticsearch.common.ParseField;\n-import org.elasticsearch.common.ParseFieldMatcherSupplier;\n import org.elasticsearch.common.ParsingException;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n@@ -51,7 +50,7 @@ public class HistogramAggregationBuilder\n         extends ValuesSourceAggregationBuilder<ValuesSource.Numeric, HistogramAggregationBuilder> {\n     public static final String NAME = \"histogram\";\n \n-    private static final ObjectParser<double[], ParseFieldMatcherSupplier> EXTENDED_BOUNDS_PARSER = new ObjectParser<>(\n+    private static final ObjectParser<double[], Void> EXTENDED_BOUNDS_PARSER = new ObjectParser<>(\n             Histogram.EXTENDED_BOUNDS_FIELD.getPreferredName(),\n             () -> new double[]{ Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY });\n     static {\ndiff --git a/core/src/main/java/org/elasticsearch/tasks/TaskResult.java b/core/src/main/java/org/elasticsearch/tasks/TaskResult.java\nindex 362eb7a4b07..5df43b7485c 100644\n--- a/core/src/main/java/org/elasticsearch/tasks/TaskResult.java\n+++ b/core/src/main/java/org/elasticsearch/tasks/TaskResult.java\n@@ -22,7 +22,6 @@ import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.common.Nullable;\n import org.elasticsearch.common.ParseField;\n-import org.elasticsearch.common.ParseFieldMatcherSupplier;\n import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.bytes.BytesReference;\n import org.elasticsearch.common.io.stream.StreamInput;\ndiff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java\nindex f88ecc981a8..32f6ad6f360 100644\n--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java\n+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java\n@@ -94,7 +94,7 @@ public class RestSearchTemplateAction extends BaseRestHandler {\n \n         // Creates the search request with all required params\n         SearchRequest searchRequest = new SearchRequest();\n-        RestSearchAction.parseSearchRequest(searchRequest, request, parseFieldMatcher, null);\n+        RestSearchAction.parseSearchRequest(searchRequest, request, null);\n \n         // Creates the search template request\n         SearchTemplateRequest searchTemplateRequest;\ndiff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java\nindex 1b6b8c74a78..4a786907f71 100644\n--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java\n+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java\n@@ -62,7 +62,7 @@ public abstract class AbstractBulkByQueryRestHandler<\n              * the generated parser probably is a noop but we should do the accounting just in case. It doesn't hurt to close twice but it\n              * really hurts not to close if by some miracle we have to. */\n             try {\n-                RestSearchAction.parseSearchRequest(searchRequest, restRequest, parseFieldMatcher, searchRequestParser);\n+                RestSearchAction.parseSearchRequest(searchRequest, restRequest, searchRequestParser);\n             } finally {\n                 IOUtils.close(searchRequestParser);\n             }",
    "Remove useless interface": "diff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java\nsimilarity index 82%\nrename from docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java\nrename to docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java\nindex a56c1e41a51..738a65bc08b 100644\n--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java\n+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java\n@@ -10,14 +10,14 @@ import java.util.Optional;\n  *\n  * @author freva\n  */\n-public class ContainerStatsImpl implements Docker.ContainerStats {\n+public class ContainerStats {\n     private final Map<String, Object> networks;\n     private final Map<String, Object> cpuStats;\n     private final Map<String, Object> memoryStats;\n     private final Map<String, Object> blkioStats;\n \n-    public ContainerStatsImpl(Map<String, Object> networks, Map<String, Object> cpuStats,\n-                              Map<String, Object> memoryStats, Map<String, Object> blkioStats) {\n+    public ContainerStats(Map<String, Object> networks, Map<String, Object> cpuStats,\n+                          Map<String, Object> memoryStats, Map<String, Object> blkioStats) {\n         // Network stats are null when container uses host network\n         this.networks = Optional.ofNullable(networks).orElse(Collections.emptyMap());\n         this.cpuStats = cpuStats;\ndiff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java\nindex 5e8a0feb099..64f804e0d02 100644\n--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java\n+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java\n@@ -61,13 +61,6 @@ public interface Docker {\n             ContainerName containerName,\n             String hostName);\n \n-    interface ContainerStats {\n-        Map<String, Object> getNetworks();\n-        Map<String, Object> getCpuStats();\n-        Map<String, Object> getMemoryStats();\n-        Map<String, Object> getBlkioStats();\n-    }\n-\n     default boolean networkNATed() {\n         return false;\n     }\ndiff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java\nindex c5c4547f796..d118ce30b68 100644\n--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java\n+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java\n@@ -273,7 +273,7 @@ public class DockerImpl implements Docker {\n             DockerStatsCallback statsCallback = dockerClient.statsCmd(containerName.asString()).exec(new DockerStatsCallback());\n             statsCallback.awaitCompletion(5, TimeUnit.SECONDS);\n \n-            return statsCallback.stats.map(stats -> new ContainerStatsImpl(\n+            return statsCallback.stats.map(stats -> new ContainerStats(\n                     stats.getNetworks(), stats.getCpuStats(), stats.getMemoryStats(), stats.getBlkioStats()));\n         } catch (NotFoundException ignored) {\n             return Optional.empty();\ndiff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java\nindex 90d71c067bc..a76733a6947 100644\n--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java\n+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java\n@@ -3,7 +3,7 @@ package com.yahoo.vespa.hosted.node.admin.docker;\n \n import com.yahoo.vespa.hosted.dockerapi.Container;\n import com.yahoo.vespa.hosted.dockerapi.ContainerName;\n-import com.yahoo.vespa.hosted.dockerapi.Docker;\n+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;\n import com.yahoo.vespa.hosted.dockerapi.DockerImage;\n import com.yahoo.vespa.hosted.dockerapi.ProcessResult;\n import com.yahoo.vespa.hosted.node.admin.configserver.noderepository.NodeSpec;\n@@ -38,7 +38,7 @@ public interface DockerOperations {\n \n     void trySuspendNode(ContainerName containerName);\n \n-    Optional<Docker.ContainerStats> getContainerStats(ContainerName containerName);\n+    Optional<ContainerStats> getContainerStats(ContainerName containerName);\n \n     /**\n      * Returns the list of containers managed by node-admin\ndiff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java\nindex a197eafe923..ccecb4e1d67 100644\n--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java\n+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java\n@@ -8,6 +8,7 @@ import com.yahoo.system.ProcessExecuter;\n import com.yahoo.vespa.hosted.dockerapi.Container;\n import com.yahoo.vespa.hosted.dockerapi.ContainerName;\n import com.yahoo.vespa.hosted.dockerapi.ContainerResources;\n+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;\n import com.yahoo.vespa.hosted.dockerapi.Docker;\n import com.yahoo.vespa.hosted.dockerapi.DockerImage;\n import com.yahoo.vespa.hosted.dockerapi.DockerNetworkCreator;\n@@ -323,7 +324,7 @@ public class DockerOperationsImpl implements DockerOperations {\n     }\n \n     @Override\n-    public Optional<Docker.ContainerStats> getContainerStats(ContainerName containerName) {\n+    public Optional<ContainerStats> getContainerStats(ContainerName containerName) {\n         return docker.getContainerStats(containerName);\n     }\n \ndiff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java\nindex 7c84150009e..07b2e3ec193 100644\n--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java\n+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java\n@@ -6,7 +6,7 @@ import com.yahoo.concurrent.ThreadFactoryFactory;\n import com.yahoo.vespa.hosted.dockerapi.Container;\n import com.yahoo.vespa.hosted.dockerapi.ContainerName;\n import com.yahoo.vespa.hosted.dockerapi.ContainerResources;\n-import com.yahoo.vespa.hosted.dockerapi.Docker;\n+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;\n import com.yahoo.vespa.hosted.dockerapi.DockerException;\n import com.yahoo.vespa.hosted.dockerapi.DockerExecTimeoutException;\n import com.yahoo.vespa.hosted.dockerapi.DockerImage;\n@@ -554,7 +554,7 @@ public class NodeAgentImpl implements NodeAgent {\n         final NodeSpec node = lastNode;\n         if (node == null || containerState != UNKNOWN) return;\n \n-        Optional<Docker.ContainerStats> containerStats = dockerOperations.getContainerStats(containerName);\n+        Optional<ContainerStats> containerStats = dockerOperations.getContainerStats(containerName);\n         if (!containerStats.isPresent()) return;\n \n         Dimensions.Builder dimensionsBuilder = new Dimensions.Builder()\n@@ -566,7 +566,7 @@ public class NodeAgentImpl implements NodeAgent {\n                 dimensionsBuilder.add(\"orchestratorState\", allowed ? \"ALLOWED_TO_BE_DOWN\" : \"NO_REMARKS\"));\n         Dimensions dimensions = dimensionsBuilder.build();\n \n-        Docker.ContainerStats stats = containerStats.get();\n+        ContainerStats stats = containerStats.get();\n         final String APP = MetricReceiverWrapper.APPLICATION_NODE;\n         final int totalNumCpuCores = ((List<Number>) ((Map) stats.getCpuStats().get(\"cpu_usage\")).get(\"percpu_usage\")).size();\n         final long cpuContainerKernelTime = ((Number) ((Map) stats.getCpuStats().get(\"cpu_usage\")).get(\"usage_in_kernelmode\")).longValue();\ndiff --git a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java\nindex 4b4ef05593d..38d83a219f1 100644\n--- a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java\n+++ b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java\n@@ -4,6 +4,7 @@ package com.yahoo.vespa.hosted.node.admin.integrationTests;\n import com.yahoo.vespa.hosted.dockerapi.Container;\n import com.yahoo.vespa.hosted.dockerapi.ContainerName;\n import com.yahoo.vespa.hosted.dockerapi.ContainerResources;\n+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;\n import com.yahoo.vespa.hosted.dockerapi.Docker;\n import com.yahoo.vespa.hosted.dockerapi.DockerImage;\n import com.yahoo.vespa.hosted.dockerapi.ProcessResult;\ndiff --git a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java\nindex ebed20326a3..626b9e9cf85 100644\n--- a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java\n+++ b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java\n@@ -8,8 +8,7 @@ import com.yahoo.test.ManualClock;\n import com.yahoo.vespa.hosted.dockerapi.Container;\n import com.yahoo.vespa.hosted.dockerapi.ContainerName;\n import com.yahoo.vespa.hosted.dockerapi.ContainerResources;\n-import com.yahoo.vespa.hosted.dockerapi.ContainerStatsImpl;\n-import com.yahoo.vespa.hosted.dockerapi.Docker;\n+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;\n import com.yahoo.vespa.hosted.dockerapi.DockerException;\n import com.yahoo.vespa.hosted.dockerapi.DockerImage;\n import com.yahoo.vespa.hosted.dockerapi.metrics.MetricReceiverWrapper;\n@@ -29,8 +28,8 @@ import com.yahoo.vespa.hosted.provision.Node;\n import org.junit.Test;\n import org.mockito.InOrder;\n \n-import java.io.File;\n import java.io.IOException;\n+import java.net.URL;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -78,7 +77,7 @@ public class NodeAgentImplTest {\n     private final StorageMaintainer storageMaintainer = mock(StorageMaintainer.class);\n     private final MetricReceiverWrapper metricReceiver = new MetricReceiverWrapper(MetricReceiver.nullImplementation);\n     private final AclMaintainer aclMaintainer = mock(AclMaintainer.class);\n-    private final Docker.ContainerStats emptyContainerStats = new ContainerStatsImpl(Collections.emptyMap(),\n+    private final ContainerStats emptyContainerStats = new ContainerStats(Collections.emptyMap(),\n             Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());\n     private final AthenzCredentialsMaintainer athenzCredentialsMaintainer = mock(AthenzCredentialsMaintainer.class);\n \n@@ -598,7 +597,7 @@ public class NodeAgentImplTest {\n     public void testGetRelevantMetrics() throws Exception {\n         final ObjectMapper objectMapper = new ObjectMapper();\n         ClassLoader classLoader = getClass().getClassLoader();\n-        File statsFile = new File(classLoader.getResource(\"docker.stats.json\").getFile());\n+        URL statsFile = classLoader.getResource(\"docker.stats.json\");\n         Map<String, Map<String, Object>> dockerStats = objectMapper.readValue(statsFile, Map.class);\n \n         Map<String, Object> networks = dockerStats.get(\"networks\");\n@@ -606,8 +605,8 @@ public class NodeAgentImplTest {\n         Map<String, Object> cpu_stats = dockerStats.get(\"cpu_stats\");\n         Map<String, Object> memory_stats = dockerStats.get(\"memory_stats\");\n         Map<String, Object> blkio_stats = dockerStats.get(\"blkio_stats\");\n-        Docker.ContainerStats stats1 = new ContainerStatsImpl(networks, precpu_stats, memory_stats, blkio_stats);\n-        Docker.ContainerStats stats2 = new ContainerStatsImpl(networks, cpu_stats, memory_stats, blkio_stats);\n+        ContainerStats stats1 = new ContainerStats(networks, precpu_stats, memory_stats, blkio_stats);\n+        ContainerStats stats2 = new ContainerStats(networks, cpu_stats, memory_stats, blkio_stats);\n \n         NodeSpec.Owner owner = new NodeSpec.Owner(\"tester\", \"testapp\", \"testinstance\");\n         NodeSpec.Membership membership = new NodeSpec.Membership(\"clustType\", \"clustId\", \"grp\", 3, false);",
    "Fix test case to recover from exception properly": "diff --git a/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java b/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java\nindex a9a002703e..63d62705f5 100644\n--- a/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java\n+++ b/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java\n@@ -57,18 +57,18 @@ public class NonUniqueIdTest extends BaseNonConfigCoreFunctionalTestCase {\n \t@Test\n \t@TestForIssue( jiraKey = \"HHH-12802\" )\n \tpublic void testLoadEntityWithNonUniqueId() {\n-\t\tdoInHibernate(\n-\t\t\t\tthis::sessionFactory,\n-\t\t\t\tsession -> {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tsession.get( Category.class, 1 );\n-\t\t\t\t\t\tfail( \"should have failed because there are 2 entities with id == 1\" );\n+\t\ttry {\n+\t\t\tdoInHibernate(\n+\t\t\t\t\tthis::sessionFactory,\n+\t\t\t\t\tsession -> {\n+\t\t\t\t\t\t\tsession.get( Category.class, 1 );\n+\t\t\t\t\t\t\tfail( \"should have failed because there are 2 entities with id == 1\" );\n \t\t\t\t\t}\n-\t\t\t\t\tcatch ( HibernateException ex) {\n-\t\t\t\t\t\t// expected\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t);\n+\t\t\t);\n+\t\t}\n+\t\tcatch ( HibernateException ex) {\n+\t\t\t// expected\n+\t\t}\n \t}\n \n \t@Entity",
    "Add cloning for nillable types": "diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java\nindex 9af0e9d6be7..29ad27a84ab 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java\n@@ -1249,7 +1249,7 @@ public class CodeGenerator extends BLangNodeVisitor {\n         } else if (iExpr.builtInMethod == BLangBuiltInMethod.DETAIL) {\n             emit(InstructionCodes.DETAIL, iExpr.expr.regIndex, regIndex);\n         } else if (iExpr.builtInMethod == BLangBuiltInMethod.CLONE) {\n-            Operand typeCPIndex = getTypeCPIndex(iExpr.expr.type);\n+            Operand typeCPIndex = getTypeCPIndex(iExpr.type);\n             emit(InstructionCodes.CLONE, iExpr.expr.regIndex, typeCPIndex, regIndex);\n         }\n     }\ndiff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\nindex dd695e60b51..13bbd6aad4f 100644\n--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java\n@@ -1777,6 +1777,8 @@ public class TypeChecker extends BLangNodeVisitor {\n                 }\n                 break;\n             case CLONE:\n+                iExpr.originalType = type;\n+                iExpr.type = type;\n                 if (iExpr.argExprs.size() > 0) {\n                     dlog.error(iExpr.pos, DiagnosticCode.TOO_MANY_ARGS_FUNC_CALL, function.getName());\n                 }\n@@ -1803,6 +1805,7 @@ public class TypeChecker extends BLangNodeVisitor {\n             case TypeTags.XML:\n             case TypeTags.TABLE:\n             case TypeTags.JSON:\n+            case TypeTags.NIL:\n                 break;\n             case TypeTags.UNION:\n                 BUnionType unionType = (BUnionType) type;\ndiff --git a/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java b/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java\nindex f0cb3118844..2d573e46fa5 100644\n--- a/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java\n+++ b/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java\n@@ -292,4 +292,13 @@ public class CloneBuiltInMethodTest {\n         Assert.assertEquals(tmpId, id);\n         Assert.assertEquals(tmpAge, age);\n     }\n+\n+    @Test\n+    public void testCloneNil() {\n+        BValue[] outputEmployeeEvents = BRunUtil.invoke(result, \"cloneNil\");\n+        Assert.assertNotNull(outputEmployeeEvents);\n+        Assert.assertEquals(((BInteger)outputEmployeeEvents[0]).intValue(), 4);\n+        Assert.assertEquals(((BInteger)outputEmployeeEvents[1]).intValue(), 10);\n+        Assert.assertEquals(((BInteger)outputEmployeeEvents[2]).intValue(), 5);\n+    }\n }\ndiff --git a/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal b/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal\nindex f73d061df19..99973d1604b 100644\n--- a/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal\n+++ b/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal\n@@ -168,3 +168,12 @@ public function cloneConstrainedJSON() returns (json, json, json) {\n     y.salary = 400.5;\n     return (a, x, y);\n }\n+\n+public function cloneNil() returns (any, any, any) {\n+    int? a = 10;\n+    int? x = a.clone();\n+    int? y = a.clone();\n+    a = 4;\n+    y = 5;\n+    return (a, x, y);\n+}\n\\ No newline at end of file",
    "rename parameters in annotations ( <issue_id> )": "diff --git a/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java\nindex 305befc1..e7bb32d3 100644\n--- a/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java\n+++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java\n@@ -5,6 +5,8 @@\n import java.util.Map;\n import java.util.Map.Entry;\n \n+import org.jetbrains.annotations.Nullable;\n+\n import jadx.core.Consts;\n import jadx.core.dex.attributes.AType;\n import jadx.core.dex.attributes.IAttributeNode;\n@@ -72,27 +74,45 @@ private void add(IAttributeNode node, CodeWriter code) {\n \n \tprivate void formatAnnotation(CodeWriter code, Annotation a) {\n \t\tcode.add('@');\n-\t\tclassGen.useType(code, a.getType());\n+\t\tClassNode annCls = cls.dex().resolveClass(a.getType());\n+\t\tif (annCls != null) {\n+\t\t\tclassGen.useClass(code, annCls);\n+\t\t} else {\n+\t\t\tclassGen.useType(code, a.getType());\n+\t\t}\n+\n \t\tMap<String, Object> vl = a.getValues();\n \t\tif (!vl.isEmpty()) {\n \t\t\tcode.add('(');\n-\t\t\tif (vl.size() == 1 && vl.containsKey(\"value\")) {\n-\t\t\t\tencodeValue(code, vl.get(\"value\"));\n-\t\t\t} else {\n-\t\t\t\tfor (Iterator<Entry<String, Object>> it = vl.entrySet().iterator(); it.hasNext(); ) {\n-\t\t\t\t\tEntry<String, Object> e = it.next();\n-\t\t\t\t\tcode.add(e.getKey());\n+\t\t\tfor (Iterator<Entry<String, Object>> it = vl.entrySet().iterator(); it.hasNext(); ) {\n+\t\t\t\tEntry<String, Object> e = it.next();\n+\t\t\t\tString paramName = getParamName(annCls, e.getKey());\n+\t\t\t\tif (paramName.equals(\"value\") && vl.size() == 1) {\n+\t\t\t\t\t// don't add \"value = \" if no other parameters\n+\t\t\t\t} else {\n+\t\t\t\t\tcode.add(paramName);\n \t\t\t\t\tcode.add(\" = \");\n-\t\t\t\t\tencodeValue(code, e.getValue());\n-\t\t\t\t\tif (it.hasNext()) {\n-\t\t\t\t\t\tcode.add(\", \");\n-\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tencodeValue(code, e.getValue());\n+\t\t\t\tif (it.hasNext()) {\n+\t\t\t\t\tcode.add(\", \");\n \t\t\t\t}\n \t\t\t}\n \t\t\tcode.add(')');\n \t\t}\n \t}\n \n+\tprivate String getParamName(@Nullable ClassNode annCls, String paramName) {\n+\t\tif (annCls != null) {\n+\t\t\t// TODO: save value type and search using signature\n+\t\t\tMethodNode mth = annCls.searchMethodByShortName(paramName);\n+\t\t\tif (mth != null) {\n+\t\t\t\treturn mth.getAlias();\n+\t\t\t}\n+\t\t}\n+\t\treturn paramName;\n+\t}\n+\n \t@SuppressWarnings(\"unchecked\")\n \tpublic void addThrows(MethodNode mth, CodeWriter code) {\n \t\tAnnotation an = mth.getAnnotation(Consts.DALVIK_THROWS);\ndiff --git a/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java\nindex f22e3672..09066ce8 100644\n--- a/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java\n+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java\n@@ -490,10 +490,20 @@ public void useClass(CodeWriter code, ArgType type) {\n \tpublic void useClass(CodeWriter code, ClassInfo classInfo) {\n \t\tClassNode classNode = cls.dex().resolveClass(classInfo);\n \t\tif (classNode != null) {\n-\t\t\tcode.attachAnnotation(classNode);\n+\t\t\tuseClass(code, classNode);\n+\t\t} else {\n+\t\t\taddClsName(code, classInfo);\n \t\t}\n-\t\tString baseClass = useClassInternal(cls.getAlias(), classInfo.getAlias());\n-\t\tcode.add(baseClass);\n+\t}\n+\n+\tpublic void useClass(CodeWriter code, ClassNode classNode) {\n+\t\tcode.attachAnnotation(classNode);\n+\t\taddClsName(code, classNode.getClassInfo());\n+\t}\n+\n+\tprivate void addClsName(CodeWriter code, ClassInfo classInfo) {\n+\t\tString clsName = useClassInternal(cls.getAlias(), classInfo.getAlias());\n+\t\tcode.add(clsName);\n \t}\n \n \tprivate String useClassInternal(ClassInfo useCls, ClassInfo extClsInfo) {\ndiff --git a/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java b/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java\nindex afb2fbcf..bfa5206b 100644\n--- a/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java\n+++ b/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java\n@@ -127,4 +127,9 @@ private Deque<PackageNode> getParentPackages() {\n \t\t}\n \t\treturn pp;\n \t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn packageAlias;\n+\t}\n }\ndiff --git a/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java\nindex fb9d1f91..7992e9a3 100644\n--- a/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java\n+++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java\n@@ -63,12 +63,16 @@ public static ClassInfo extCls(RootNode root, ArgType type) {\n \t}\n \n \tpublic void rename(RootNode root, String fullName) {\n-\t\tClassInfo newAlias = new ClassInfo(root, ArgType.object(fullName), isInner());\n+\t\tArgType clsType = ArgType.object(fullName);\n+\t\tClassInfo newAlias = root.getInfoStorage().getCls(clsType);\n+\t\tif (newAlias == null) {\n+\t\t\tnewAlias = new ClassInfo(root, clsType, isInner());\n+\t\t\troot.getInfoStorage().putCls(newAlias);\n+\t\t}\n \t\tif (!alias.getFullName().equals(newAlias.getFullName())) {\n \t\t\tthis.alias = newAlias;\n \t\t}\n \t}\n-\n \tpublic boolean isRenamed() {\n \t\treturn alias != this;\n \t}\n@@ -171,6 +175,10 @@ public void notInner(RootNode root) {\n \t\tsplitNames(root, false);\n \t}\n \n+\tpublic void updateNames(RootNode root) {\n+\t\tsplitNames(root, isInner());\n+\t}\n+\n \tpublic ArgType getType() {\n \t\treturn type;\n \t}\ndiff --git a/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java\nindex 3ae9e8de..b791ad55 100644\n--- a/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java\n+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java\n@@ -344,7 +344,7 @@ public MethodNode searchMethod(MethodInfo mth) {\n \t\treturn mthInfoMap.get(mth);\n \t}\n \n-\tpublic MethodNode searchMethodByName(String shortId) {\n+\tpublic MethodNode searchMethodByShortId(String shortId) {\n \t\tfor (MethodNode m : methods) {\n \t\t\tif (m.getMethodInfo().getShortId().equals(shortId)) {\n \t\t\t\treturn m;\n@@ -353,8 +353,22 @@ public MethodNode searchMethodByName(String shortId) {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Return first method by original short name\n+\t * Note: methods are not unique by name (class can have several methods with same name but different signature)\n+\t */\n+\t@Nullable\n+\tpublic MethodNode searchMethodByShortName(String name) {\n+\t\tfor (MethodNode m : methods) {\n+\t\t\tif (m.getMethodInfo().getName().equals(name)) {\n+\t\t\t\treturn m;\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n \tpublic MethodNode searchMethodById(int id) {\n-\t\treturn searchMethodByName(MethodInfo.fromDex(dex, id).getShortId());\n+\t\treturn searchMethodByShortId(MethodInfo.fromDex(dex, id).getShortId());\n \t}\n \n \tpublic ClassNode getParentClass() {\n@@ -420,7 +434,7 @@ private static void markAnonymousClass(ClassNode cls) {\n \n \t@Nullable\n \tpublic MethodNode getClassInitMth() {\n-\t\treturn searchMethodByName(\"<clinit>()V\");\n+\t\treturn searchMethodByShortId(\"<clinit>()V\");\n \t}\n \n \t@Nullable\ndiff --git a/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java\nindex 832ec122..a93b68a6 100644\n--- a/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java\n+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java\n@@ -2,6 +2,7 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -48,6 +49,8 @@ public void loadClasses() {\n \t\tfor (ClassDef cls : dexBuf.classDefs()) {\n \t\t\taddClassNode(new ClassNode(this, cls));\n \t\t}\n+\t\t// sort classes by name, expect top classes before inner\n+\t\tclasses.sort(Comparator.comparing(ClassNode::getFullName));\n \t}\n \n \tpublic void addClassNode(ClassNode clsNode) {\n@@ -63,6 +66,7 @@ void initInnerClasses() {\n \t\t\t\tinner.add(cls);\n \t\t\t}\n \t\t}\n+\t\tList<ClassNode> updated = new ArrayList<>();\n \t\tfor (ClassNode cls : inner) {\n \t\t\tClassInfo clsInfo = cls.getClassInfo();\n \t\t\tClassNode parent = resolveClass(clsInfo.getParentClass());\n@@ -70,10 +74,17 @@ void initInnerClasses() {\n \t\t\t\tclsMap.remove(clsInfo);\n \t\t\t\tclsInfo.notInner(root);\n \t\t\t\tclsMap.put(clsInfo, cls);\n+\t\t\t\tupdated.add(cls);\n \t\t\t} else {\n \t\t\t\tparent.addInnerClass(cls);\n \t\t\t}\n \t\t}\n+\t\t// reload names for inner classes of updated parents\n+\t\tfor (ClassNode updCls : updated) {\n+\t\t\tfor (ClassNode innerCls : updCls.getInnerClasses()) {\n+\t\t\t\tinnerCls.getClassInfo().updateNames(root);\n+\t\t\t}\n+\t\t}\n \t}\n \n \tpublic List<ClassNode> getClasses() {\ndiff --git a/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java\nindex 88783b39..77c1142d 100644\n--- a/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java\n+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java\n@@ -195,7 +195,7 @@ private static void processInvoke(MethodNode mth, BlockNode block, int insnNumbe\n \t\tif (co.isSuper() && (co.getArgsCount() == 0 || parentClass.isEnum())) {\n \t\t\tremove = true;\n \t\t} else if (co.isThis() && co.getArgsCount() == 0) {\n-\t\t\tMethodNode defCo = parentClass.searchMethodByName(callMth.getShortId());\n+\t\t\tMethodNode defCo = parentClass.searchMethodByShortId(callMth.getShortId());\n \t\t\tif (defCo == null || defCo.isNoCode()) {\n \t\t\t\t// default constructor not implemented\n \t\t\t\tremove = true;\n@@ -347,7 +347,7 @@ private static ConstructorInsn processConstructor(MethodNode mth, ConstructorIns\n \t\t}\n \t\tboolean passThis = co.getArgsCount() >= 1 && co.getArg(0).isThis();\n \t\tString ctrId = \"<init>(\" + (passThis ? TypeGen.signature(co.getArg(0).getType()) : \"\") + \")V\";\n-\t\tMethodNode defCtr = classNode.searchMethodByName(ctrId);\n+\t\tMethodNode defCtr = classNode.searchMethodByShortId(ctrId);\n \t\tif (defCtr == null) {\n \t\t\treturn null;\n \t\t}\ndiff --git a/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java\nnew file mode 100644\nindex 00000000..88cd3fcf\n--- /dev/null\n+++ b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java\n@@ -0,0 +1,49 @@\n+package jadx.tests.integration.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import jadx.core.dex.nodes.ClassNode;\n+import jadx.tests.api.IntegrationTest;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class TestAnnotationsRename extends IntegrationTest {\n+\n+\tpublic static class TestCls {\n+\n+\t\t@Target({ElementType.METHOD})\n+\t\t@Retention(RetentionPolicy.RUNTIME)\n+\t\tpublic @interface A {\n+\t\t\tint x();\n+\t\t}\n+\n+\t\t@A(x = 5)\n+\t\tvoid test() {\n+\t\t}\n+\n+\t\tpublic void check() throws NoSuchMethodException {\n+\t\t\tMethod test = TestCls.class.getDeclaredMethod(\"test\");\n+\t\t\tA annotation = test.getAnnotation(A.class);\n+\t\t\tassertThat(annotation.x(), is(5));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void test() {\n+\t\tenableDeobfuscation();\n+\t\tClassNode cls = getClassNode(TestCls.class);\n+\t\tString code = cls.getCode().toString();\n+\n+\t\tassertThat(code, containsString(\"public @interface \"));\n+\t\tassertThat(code, not(containsString(\"(x = 5)\")));\n+\t}\n+}\ndiff --git a/jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java\nsimilarity index 66%\nrename from jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java\nrename to jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java\nindex 477dd961..5e87b50f 100644\n--- a/jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java\n+++ b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java\n@@ -7,7 +7,6 @@\n \n import org.junit.jupiter.api.Test;\n \n-import jadx.NotYetImplemented;\n import jadx.core.dex.nodes.ClassNode;\n import jadx.tests.api.IntegrationTest;\n \n@@ -15,30 +14,32 @@\n import static org.hamcrest.CoreMatchers.not;\n import static org.hamcrest.MatcherAssert.assertThat;\n \n-public class AnnotationsRenaming extends IntegrationTest {\n+public class TestAnnotationsRenameDef extends IntegrationTest {\n \n \tpublic static class TestCls {\n \n \t\t@Target({ElementType.METHOD})\n \t\t@Retention(RetentionPolicy.RUNTIME)\n-\t\tpublic static @interface A {\n-\t\t\tint x();\n+\t\tpublic @interface A {\n+\t\t\tint value();\n \t\t}\n \n-\t\t@A(x = 5)\n+\t\t@A(5)\n \t\tvoid test() {\n \t\t}\n-\n \t}\n \n \t@Test\n-\t@NotYetImplemented\n-\tpublic void test504() {\n+\tpublic void test() {\n \t\tenableDeobfuscation();\n+\t\t// force rename 'value' method\n+\t\targs.setDeobfuscationMinLength(20);\n+\n \t\tClassNode cls = getClassNode(TestCls.class);\n \t\tString code = cls.getCode().toString();\n \n-\t\tassertThat(code, containsString(\"public static @interface \"));\n-\t\tassertThat(code, not(containsString(\"(x = 5)\")));\n+\t\tassertThat(code, containsString(\"public @interface \"));\n+\t\tassertThat(code, not(containsString(\"int value();\")));\n+\t\tassertThat(code, not(containsString(\"(5)\")));\n \t}\n }\ndiff --git a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java\nindex ae788644..330ce08b 100644\n--- a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java\n+++ b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java\n@@ -46,11 +46,11 @@ public void test() {\n \t\tString code = cls.getCode().toString();\n \n \t\tFieldNode field = cls.searchFieldByName(\"field\");\n-\t\tMethodNode func = cls.searchMethodByName(\"func()V\");\n+\t\tMethodNode func = cls.searchMethodByShortId(\"func()V\");\n \t\tClassNode inner = cls.getInnerClasses().get(0);\n-\t\tMethodNode innerFunc = inner.searchMethodByName(\"innerFunc()V\");\n-\t\tMethodNode innerFunc2 = inner.searchMethodByName(\"innerFunc2()V\");\n-\t\tMethodNode innerFunc3 = inner.searchMethodByName(\"innerFunc3()V\");\n+\t\tMethodNode innerFunc = inner.searchMethodByShortId(\"innerFunc()V\");\n+\t\tMethodNode innerFunc2 = inner.searchMethodByShortId(\"innerFunc2()V\");\n+\t\tMethodNode innerFunc3 = inner.searchMethodByShortId(\"innerFunc3()V\");\n \t\tFieldNode innerField = inner.searchFieldByName(\"innerField\");\n \n \t\t// check source lines (available only for instructions and methods)\ndiff --git a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java\nindex 82dfb7d4..e0feb6e9 100644\n--- a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java\n+++ b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java\n@@ -1,10 +1,5 @@\n package jadx.tests.integration.debuginfo;\n \n-import static jadx.tests.api.utils.JadxMatchers.containsOne;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n import org.junit.jupiter.api.Test;\n \n import jadx.NotYetImplemented;\n@@ -14,6 +9,11 @@\n import jadx.core.dex.nodes.MethodNode;\n import jadx.tests.api.IntegrationTest;\n \n+import static jadx.tests.api.utils.JadxMatchers.containsOne;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n public class TestReturnSourceLine extends IntegrationTest {\n \n \tpublic static class TestCls {\n@@ -55,10 +55,10 @@ public void test() {\n \t\tString code = codeWriter.toString();\n \t\tString[] lines = code.split(CodeWriter.NL);\n \n-\t\tMethodNode test1 = cls.searchMethodByName(\"test1(Z)I\");\n+\t\tMethodNode test1 = cls.searchMethodByShortId(\"test1(Z)I\");\n \t\tcheckLine(lines, codeWriter, test1, 3, \"return 1;\");\n \n-\t\tMethodNode test2 = cls.searchMethodByName(\"test2(I)I\");\n+\t\tMethodNode test2 = cls.searchMethodByShortId(\"test2(I)I\");\n \t\tcheckLine(lines, codeWriter, test2, 3, \"return v - 1;\");\n \t}\n \n@@ -70,7 +70,7 @@ public void test2() {\n \t\tString code = codeWriter.toString();\n \t\tString[] lines = code.split(CodeWriter.NL);\n \n-\t\tMethodNode test3 = cls.searchMethodByName(\"test3(I)I\");\n+\t\tMethodNode test3 = cls.searchMethodByShortId(\"test3(I)I\");\n \t\tcheckLine(lines, codeWriter, test3, 3, \"return v;\");\n \t}\n \ndiff --git a/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java b/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java\nindex e0538e7f..44147cf5 100644\n--- a/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java\n+++ b/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java\n@@ -30,10 +30,7 @@ public void test() {\n \t\tClassNode cls = getClassNode(TestCls.class);\n \t\tString code = cls.getCode().toString();\n \n-\t\tassertThat(code, containsString(\"public abstract void mo1a();\"));\n \t\tassertThat(code, not(containsString(\"public abstract void a();\")));\n-\n-\t\tassertThat(code, containsString(\".mo1a();\"));\n \t\tassertThat(code, not(containsString(\".a();\")));\n \t}\n }",
    "Remove System . out .": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java\nindex be563a2388..42aafdc326 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java\n@@ -71,7 +71,6 @@ class OriginTrackedPropertiesLoader {\n \t\t\tStringBuilder buffer = new StringBuilder();\n \t\t\twhile (reader.read()) {\n \t\t\t\tString key = loadKey(buffer, reader).trim();\n-\t\t\t\tSystem.out.println(key);\n \t\t\t\tif (expandLists && key.endsWith(\"[]\")) {\n \t\t\t\t\tkey = key.substring(0, key.length() - 2);\n \t\t\t\t\tint index = 0;",
    "Customizing subfolders and encoding for source roots": "diff --git a/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java b/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java\nindex 7ce0e66aa..220ecee3f 100644\n--- a/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java\n+++ b/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java\n@@ -24,6 +24,7 @@\n  */\n package org.graalvm.visualvm.sources;\n \n+import java.io.File;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import org.graalvm.visualvm.sources.impl.SourceRoots;\n@@ -42,47 +43,67 @@ import java.util.logging.Logger;\n  */\n public final class SourcesRoot {\n     \n-    private static final String ENCODING_PREFIX = \"[encoding=\";                 // NOI18N\n-    private static final String ENCODING_SUFFIX = \"]\";                          // NOI18N\n+    private static final String SUBPATHS_PREFIX = \"[subpaths=\";                  // NOI18N\n+    private static final String SUBPATHS_SUFFIX = \"]\";                           // NOI18N\n+    \n+    private static final String ENCODING_PREFIX = \"[encoding=\";                  // NOI18N\n+    private static final String ENCODING_SUFFIX = \"]\";                           // NOI18N\n     \n     \n     private static final Logger LOGGER = Logger.getLogger(SourcesRoot.class.getName());\n     \n     \n     private final String rootPath;\n+    private final String[] subPaths;\n+    private final Charset encoding;\n     \n     \n     private SourcesRoot(String rootPath) {\n-        this.rootPath = rootPath;\n+        Object[] resolved = resolve(rootPath);\n+        this.rootPath = (String)resolved[0];\n+        this.subPaths = (String[])resolved[1];\n+        this.encoding = (Charset)resolved[2];\n     }\n     \n     \n     private SourcePathHandle getSourceHandle(String resourcePath) {\n-        Object[] resourceWithEncoding = resolveEncoding(resourcePath);\n-        String resource = (String)resourceWithEncoding[0];\n-        Charset encoding = (Charset)resourceWithEncoding[1];\n-        \n         Path root = Paths.get(rootPath);\n         \n         try {\n-            if (Files.isDirectory(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInDirectory(root, resource, encoding);\n-            else if (Files.isRegularFile(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInArchive(root, resource, encoding);\n+            if (Files.isDirectory(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInDirectory(root, resourcePath, subPaths, encoding);\n+            else if (Files.isRegularFile(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInArchive(root, resourcePath, subPaths, encoding);\n         } catch (Throwable t) {\n-            LOGGER.log(Level.INFO, \"Failed resolving source file \" + resource + \" in \" + root, t); // NOI18N\n+            LOGGER.log(Level.INFO, \"Failed resolving source file \" + resourcePath + \" in \" + root, t); // NOI18N\n         }\n         \n         return null;\n     }\n     \n-    private static SourcePathHandle getHandleInDirectory(Path directory, String sourcePath, Charset encoding) throws Throwable {\n-        Path sourceFile = directory.resolve(sourcePath);\n-        return isFile(sourceFile) ? new SourcePathHandle(sourceFile, false, encoding) : null;\n+    private static SourcePathHandle getHandleInDirectory(Path directory, String sourcePath, String[] subPaths, Charset encoding) throws Throwable {\n+        if (subPaths == null) {\n+            Path sourceFile = directory.resolve(sourcePath);\n+            return isFile(sourceFile) ? new SourcePathHandle(sourceFile, false, encoding) : null;\n+        } else {\n+            for (String subPath : subPaths) {\n+                Path sourceFile = directory.resolve(subPath + \"/\" + sourcePath); // NOI18N\n+                if (isFile(sourceFile)) return new SourcePathHandle(sourceFile, false, encoding);\n+            }\n+            return null;\n+        }\n     }\n     \n-    private static SourcePathHandle getHandleInArchive(Path archive, String sourcePath, Charset encoding) throws Throwable {\n+    private static SourcePathHandle getHandleInArchive(Path archive, String sourcePath, String[] subPaths, Charset encoding) throws Throwable {\n         FileSystem archiveFileSystem = FileSystems.newFileSystem(archive, null);\n-        Path sourceFile = archiveFileSystem.getPath(sourcePath);\n-        return isFile(sourceFile) ? new SourcePathHandle(sourceFile, true, encoding) : null;\n+        if (subPaths == null) {\n+            Path sourceFile = archiveFileSystem.getPath(sourcePath);\n+            return isFile(sourceFile) ? new SourcePathHandle(sourceFile, true, encoding) : null;\n+        } else {\n+            for (String subPath : subPaths) {\n+                Path sourceFile = archiveFileSystem.getPath(subPath, sourcePath);\n+                if (isFile(sourceFile)) return new SourcePathHandle(sourceFile, true, encoding);\n+            }\n+            return null;\n+        }\n     }\n     \n     \n@@ -94,8 +115,8 @@ public final class SourcesRoot {\n     \n     \n     public static SourcePathHandle getPathHandle(String resourcePath) {\n-        for (String string : SourceRoots.getRoots()) {\n-            SourcesRoot root = new SourcesRoot(string);\n+        for (String rootPath : SourceRoots.getRoots()) {\n+            SourcesRoot root = new SourcesRoot(rootPath);\n             SourcePathHandle handle = root.getSourceHandle(resourcePath);\n             if (handle != null) return handle;\n         }\n@@ -104,22 +125,88 @@ public final class SourcesRoot {\n     }\n     \n     \n+    public static String createString(String rootPath, String[] subPaths, String encoding) {\n+        if ((subPaths == null || subPaths.length == 0) && encoding == null) return rootPath;\n+        \n+        StringBuilder sb = new StringBuilder();\n+        \n+        if (subPaths != null && subPaths.length > 0) {\n+            normalizeSubpaths(subPaths);\n+            \n+            for (String subPath : subPaths) {\n+                if (sb.length() > 0) sb.append(\":\");                            // NOI18N\n+                sb.append(subPath);\n+            }\n+            \n+            sb.insert(0, SUBPATHS_PREFIX);\n+            sb.append(SUBPATHS_SUFFIX);\n+        }\n+        \n+        if (StandardCharsets.UTF_8.name().equals(encoding)) encoding = null;\n+        if (encoding != null) sb.append(ENCODING_PREFIX).append(encoding).append(ENCODING_SUFFIX);\n+        \n+        sb.insert(0, rootPath);\n+        \n+        return sb.toString();\n+    }\n+    \n+    \n     private static boolean isFile(Path path) {\n         return Files.isRegularFile(path, LinkOption.NOFOLLOW_LINKS);\n     }\n     \n-    private static Object[] resolveEncoding(String resourcePath) {\n-        int idx = resourcePath.endsWith(ENCODING_SUFFIX) ? resourcePath.indexOf(ENCODING_PREFIX) : -1;\n-        if (idx == -1) return new Object[] { resourcePath, StandardCharsets.UTF_8 };\n+    \n+    private static Object[] resolve(String root) {\n+        int idx = root.indexOf(\"[\");                                            // NOI18N\n+        String[] subpaths = null;\n+        Charset encoding = StandardCharsets.UTF_8;\n+        \n+        if (idx != -1) {\n+            String params = root.substring(idx);\n+            root = root.substring(0, idx);\n+            \n+            String[] paramsArr = params.split(\"\\\\]\\\\[\");                        // NOI18N\n+            for (String paramS : paramsArr) {\n+                if (!paramS.startsWith(\"[\")) paramS = \"[\" + paramS;             // NOI18N\n+                paramS = paramS.replace(\"]\", \"\");                               // NOI18N\n+                \n+                if (paramS.startsWith(SUBPATHS_PREFIX)) {\n+                    paramS = paramS.substring(SUBPATHS_PREFIX.length());\n+                    subpaths = subpaths(paramS);\n+                } else if (paramS.startsWith(ENCODING_PREFIX)) {\n+                    paramS = paramS.substring(ENCODING_PREFIX.length());\n+                    encoding = charset(paramS);\n+                }\n+            }\n+        }\n         \n-        String resource = resourcePath.substring(0, idx);\n-        String charset = resourcePath.substring(idx + ENCODING_PREFIX.length(), resourcePath.length() - ENCODING_SUFFIX.length());\n+        return new Object[] { root, subpaths, encoding };\n+    }\n+    \n+    private static String[] subpaths(String subpaths) {\n+        if (subpaths.isEmpty()) return null;\n         \n-        Charset encoding;\n-        try { encoding = Charset.forName(charset); }\n-        catch (Exception e) { encoding = StandardCharsets.UTF_8; }\n+        String[] paths = subpaths.split(\":\");                                   // NOI18N\n+        normalizeSubpaths(paths);\n         \n-        return new Object[] { resource, encoding };\n+        return paths;\n+    }\n+    \n+    private static void normalizeSubpaths(String[] subpaths) {\n+        for (int i = 0; i < subpaths.length; i++) {\n+            String path = subpaths[i];\n+            \n+            if (!\"/\".equals(File.separator)) path = path.replace(File.separator, \"/\"); // NOI18N\n+            if (path.startsWith(\"/\")) path = path.substring(1);                 // NOI18N\n+            if (path.endsWith(\"/\")) path = path.substring(0, path.length() - 1); // NOI18N\n+            \n+            subpaths[i] = path;\n+        }\n+    }\n+    \n+    private static Charset charset(String charset) {\n+        try { return Charset.forName(charset); }\n+        catch (Exception e) { return StandardCharsets.UTF_8; }\n     }\n     \n }\ndiff --git a/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java b/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java\nindex bf51e4425..e78722724 100644\n--- a/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java\n+++ b/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java\n@@ -27,20 +27,38 @@ package org.graalvm.visualvm.sources.options;\n import java.awt.BorderLayout;\n import java.awt.Component;\n import java.awt.Dimension;\n+import java.awt.Font;\n import java.awt.GridBagConstraints;\n import java.awt.GridBagLayout;\n import java.awt.Insets;\n import java.awt.KeyboardFocusManager;\n import java.awt.event.ActionEvent;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n import java.awt.event.ItemEvent;\n import java.awt.event.ItemListener;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n import java.io.File;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.Objects;\n import java.util.prefs.Preferences;\n+import java.util.stream.Collectors;\n+import javax.swing.ButtonGroup;\n import javax.swing.DefaultComboBoxModel;\n+import javax.swing.DefaultListCellRenderer;\n import javax.swing.DefaultListModel;\n+import javax.swing.Icon;\n import javax.swing.JButton;\n import javax.swing.JComboBox;\n import javax.swing.JComponent;\n@@ -48,7 +66,10 @@ import javax.swing.JFileChooser;\n import javax.swing.JLabel;\n import javax.swing.JList;\n import javax.swing.JPanel;\n+import javax.swing.JRadioButton;\n import javax.swing.JScrollPane;\n+import javax.swing.JTextField;\n+import javax.swing.ListModel;\n import javax.swing.SwingUtilities;\n import javax.swing.event.ListSelectionEvent;\n import javax.swing.event.ListSelectionListener;\n@@ -58,12 +79,14 @@ import org.graalvm.visualvm.core.ui.components.SectionSeparator;\n import org.graalvm.visualvm.lib.profiler.api.icons.GeneralIcons;\n import org.graalvm.visualvm.lib.profiler.api.icons.Icons;\n import org.graalvm.visualvm.lib.ui.swing.SmallButton;\n+import org.graalvm.visualvm.sources.SourcesRoot;\n import org.graalvm.visualvm.sources.impl.SourceRoots;\n import org.graalvm.visualvm.sources.impl.SourceViewers;\n import org.graalvm.visualvm.sources.SourcesViewer;\n import org.openide.awt.Mnemonics;\n import org.openide.util.NbBundle;\n import org.openide.util.NbPreferences;\n+import org.openide.util.RequestProcessor;\n import org.openide.windows.WindowManager;\n \n /**\n@@ -83,8 +106,16 @@ import org.openide.windows.WindowManager;\n     \"SourcesOptionsPanel_SelectRootsCaption=Select Source Roots\",               // NOI18N\n     \"SourcesOptionsPanel_SelectButton=Select\",                                  // NOI18N\n     \"SourcesOptionsPanel_SourceDirectoriesFilter=Directories or Archives\",      // NOI18N\n-    \"SourcesOptionsPanel_ForcedRoots=Source roots have been set automatically for this session\",    // NOI18N\n-    \"SourcesOptionsPanel_ForcedViewer=Sources viewer has been set automatically for this session\"   // NOI18N\n+    \"SourcesOptionsPanel_ForcedRoots=Source roots have been set automatically for this session\", // NOI18N\n+    \"SourcesOptionsPanel_ForcedViewer=Sources viewer has been set automatically for this session\", // NOI18N\n+    \"SourcesOptionsPanel_SourcesLocation=Sources Location:\",                    // NOI18N\n+    \"SourcesOptionsPanel_SelectedRootsChoice=&Selected root(s)\",                // NOI18N\n+    \"SourcesOptionsPanel_SelectedRootsToolTip=Sources are directly in the source root(s)\",// NOI18N\n+    \"SourcesOptionsPanel_SubdirectoriesChoice=S&ubdirectories:\",                // NOI18N\n+    \"SourcesOptionsPanel_SubdirectoriesToolTip=Sources are in the selected subdirectories of the source root(s)\", // NOI18N\n+    \"SourcesOptionsPanel_CustomSubpathsChoice=&Custom subpaths:\",               // NOI18N\n+    \"SourcesOptionsPanel_CustomSubpathsToolTip=Sources are in the defined subdirectories of the source root(s) - no wildcards allowed\", // NOI18N\n+    \"SourcesOptionsPanel_SourcesEncoding=Sources Encoding:\"                     // NOI18N\n })\n final class SourcesOptionsPanel extends JPanel {\n     \n@@ -286,12 +317,10 @@ final class SourcesOptionsPanel extends JPanel {\n                         return Bundle.SourcesOptionsPanel_SourceDirectoriesFilter() + \" (*.zip, *.jar)\"; // NOI18N\n                     }\n                 });\n-//                fileChooser.addPropertyChangeListener(new PropertyChangeListener() {\n-//                    @Override\n-//                    public void propertyChange(PropertyChangeEvent evt) {\n-//                        System.err.println(\">>> PROPERTY \" + evt.getPropertyName() + \" changed -- \" + evt);\n-//                    }\n-//                });\n+                \n+                SourceRootsCustomizer customizer = new SourceRootsCustomizer();\n+                fileChooser.setAccessory(customizer);\n+                fileChooser.addPropertyChangeListener(JFileChooser.SELECTED_FILES_CHANGED_PROPERTY, customizer);\n \n                 String lastDirS = NbPreferences.forModule(SourcesOptionsPanel.class).get(PROP_LAST_SOURCES_DIR, null);\n                 File lastDir = lastDirS == null ? null : new File(lastDirS);\n@@ -299,13 +328,20 @@ final class SourcesOptionsPanel extends JPanel {\n \n                 if (fileChooser.showOpenDialog(WindowManager.getDefault().getMainWindow()) == JFileChooser.APPROVE_OPTION) {\n                     String first = null;\n+                    String firstC = null;\n                     for (File selected : fileChooser.getSelectedFiles()) {\n                         String path = selected.getAbsolutePath();\n-                        if (!rootsListModel.contains(path)) rootsListModel.addElement(path);\n-                        if (first == null) first = path;\n+                        String pathC = customizer.createRootString(path);\n+                        \n+                        if (first == null) {\n+                            first = path;\n+                            firstC = pathC;\n+                        }\n+                        \n+                        if (!rootsListModel.contains(pathC)) rootsListModel.addElement(pathC);\n                     }\n                     if (first != null) {\n-                        rootsList.setSelectedValue(first, true);\n+                        rootsList.setSelectedValue(firstC, true);\n                         \n                         File dir = new File(first).getParentFile();\n                         String dirS = dir.isDirectory() ? dir.getAbsolutePath() : null;\n@@ -513,4 +549,269 @@ final class SourcesOptionsPanel extends JPanel {\n     private JPanel viewerSettings;\n     private JLabel viewerForcedHint;\n     \n+    \n+    private static final class SourceRootsCustomizer extends JPanel implements PropertyChangeListener {\n+        \n+        private static final String PREDEFINED_JDKSRC_DIR1 = \"java.base\";       // NOI18N\n+        private static final String PREDEFINED_JDKSRC_DIR2 = \"java.se\";         // NOI18N\n+        \n+        private static final String PREDEFINED_SRC_DIR = \"src\";                 // NOI18N\n+        \n+        \n+        private RequestProcessor processor;\n+        \n+        \n+        SourceRootsCustomizer() {\n+            super(null);\n+            \n+            initUI();\n+        }\n+        \n+        \n+        String createRootString(String root) {\n+            String[] subpaths;\n+            if (commonFolderChoice.isSelected()) {\n+                subpaths = subdirectoryList.getSelectedValuesList().toArray(new String[0]);\n+            } else if (customFolderChoice.isSelected()) {\n+                subpaths = customFolderField.getText().trim().replace(File.separator, \"/\") // NOI18N\n+                                                             .replace(File.pathSeparator, \":\") // NOI18N\n+                                                             .split(\":\");        // NOI18N\n+            } else {\n+                subpaths = null;\n+            }\n+            \n+            String encoding = encodingSelector.getEditor().getItem().toString().trim();\n+            \n+            return SourcesRoot.createString(root, subpaths, encoding);\n+        }\n+       ",
    "Add circle crop": "diff --git a/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java b/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java\nindex fc2aadc..6dfc9f4 100644\n--- a/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java\n+++ b/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java\n@@ -89,6 +89,9 @@ public class MainActivity extends Activity {\n                 case R.id.buttonFree:\n                     mCropView.setCropMode(CropImageView.CropMode.RATIO_FREE);\n                     break;\n+                case R.id.buttonCircle:\n+                    mCropView.setCropMode(CropImageView.CropMode.CIRCLE);\n+                    break;\n                 case R.id.buttonChangeImage:\n                     incrementImageIndex();\n                     mCropView.setImageBitmap(getImageForIndex(mImageIndex));\n@@ -115,6 +118,7 @@ public class MainActivity extends Activity {\n         findViewById(R.id.buttonChangeImage).setOnClickListener(btnListener);\n         findViewById(R.id.buttonRotateImage).setOnClickListener(btnListener);\n         findViewById(R.id.buttonCustom).setOnClickListener(btnListener);\n+        findViewById(R.id.buttonCircle).setOnClickListener(btnListener);\n         mRootLayout = (RelativeLayout) findViewById(R.id.layout_root);\n     }\n \ndiff --git a/simplecropview-sample/src/main/res/layout/activity_main.xml b/simplecropview-sample/src/main/res/layout/activity_main.xml\nindex 2d36809..50008c7 100644\n--- a/simplecropview-sample/src/main/res/layout/activity_main.xml\n+++ b/simplecropview-sample/src/main/res/layout/activity_main.xml\n@@ -146,6 +146,18 @@\n                 android:layout_width=\"wrap_content\"\n                 android:layout_height=\"@dimen/button_height\"/>\n \n+            <Button\n+                android:id=\"@+id/buttonCircle\"\n+                android:layout_gravity=\"center_vertical\"\n+                android:layout_margin=\"8dp\"\n+                android:padding=\"8dp\"\n+                android:textSize=\"@dimen/text_size_s\"\n+                android:text=\"CIRCLE\"\n+                android:textColor=\"@color/base\"\n+                android:background=\"@color/text\"\n+                android:layout_width=\"wrap_content\"\n+                android:layout_height=\"@dimen/button_height\"/>\n+\n \n         </LinearLayout>\n     </HorizontalScrollView>\ndiff --git a/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java b/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java\nindex 829d4bc..c3c5300 100644\n--- a/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java\n+++ b/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java\n@@ -7,7 +7,11 @@ import android.graphics.BitmapFactory;\n import android.graphics.Canvas;\n import android.graphics.Matrix;\n import android.graphics.Paint;\n+import android.graphics.Path;\n import android.graphics.PointF;\n+import android.graphics.PorterDuff;\n+import android.graphics.PorterDuffXfermode;\n+import android.graphics.Rect;\n import android.graphics.RectF;\n import android.graphics.drawable.BitmapDrawable;\n import android.graphics.drawable.Drawable;\n@@ -52,6 +56,7 @@ public class CropImageView extends ImageView {\n     private RectF mImageRect;\n     private PointF mCenter = new PointF();\n     private float mLastX, mLastY;\n+    private PointF mCircleHandlePos = new PointF();\n \n     // Instance variables for customizable attributes //////////////////////////////////////////////\n \n@@ -252,14 +257,27 @@ public class CropImageView extends ImageView {\n \n     private void drawEditFrame(Canvas canvas) {\n         if(!mIsCropEnabled)return;\n-        mPaintTransparent.setFilterBitmap(true);\n-        mPaintTransparent.setColor(mOverlayColor);\n-        mPaintTransparent.setStyle(Paint.Style.FILL);\n \n-        canvas.drawRect(mImageRect.left, mImageRect.top, mImageRect.right, mFrameRect.top, mPaintTransparent);\n-        canvas.drawRect(mImageRect.left, mFrameRect.bottom, mImageRect.right, mImageRect.bottom, mPaintTransparent);\n-        canvas.drawRect(mImageRect.left, mFrameRect.top, mFrameRect.left, mFrameRect.bottom, mPaintTransparent);\n-        canvas.drawRect(mFrameRect.right, mFrameRect.top, mImageRect.right, mFrameRect.bottom, mPaintTransparent);\n+        if(mCropMode == CropMode.CIRCLE){\n+            mPaintTransparent.setFilterBitmap(true);\n+            mPaintTransparent.setColor(mOverlayColor);\n+            mPaintTransparent.setStyle(Paint.Style.FILL);\n+\n+            Path path = new Path();\n+            path.addRect(mImageRect.left, mImageRect.top, mImageRect.right, mImageRect.bottom, Path.Direction.CW);\n+            path.addCircle((mFrameRect.left + mFrameRect.right) / 2, (mFrameRect.top + mFrameRect.bottom) / 2, (mFrameRect.right - mFrameRect.left) / 2, Path.Direction.CCW);\n+            canvas.drawPath(path, mPaintTransparent);\n+\n+        }else{\n+            mPaintTransparent.setFilterBitmap(true);\n+            mPaintTransparent.setColor(mOverlayColor);\n+            mPaintTransparent.setStyle(Paint.Style.FILL);\n+\n+            canvas.drawRect(mImageRect.left, mImageRect.top, mImageRect.right, mFrameRect.top, mPaintTransparent);\n+            canvas.drawRect(mImageRect.left, mFrameRect.bottom, mImageRect.right, mImageRect.bottom, mPaintTransparent);\n+            canvas.drawRect(mImageRect.left, mFrameRect.top, mFrameRect.left, mFrameRect.bottom, mPaintTransparent);\n+            canvas.drawRect(mFrameRect.right, mFrameRect.top, mImageRect.right, mFrameRect.bottom, mPaintTransparent);\n+        }\n \n         mPaintFrame.setAntiAlias(true);\n         mPaintFrame.setFilterBitmap(true);\n@@ -798,6 +816,7 @@ public class CropImageView extends ImageView {\n             case RATIO_9_16:\n                 return 9.0f;\n             case RATIO_1_1:\n+            case CIRCLE:\n                 return 1.0f;\n             case RATIO_CUSTOM:\n                 return mCustomRatio.x;\n@@ -821,6 +840,7 @@ public class CropImageView extends ImageView {\n             case RATIO_9_16:\n                 return 16.0f;\n             case RATIO_1_1:\n+            case CIRCLE:\n                 return 1.0f;\n             case RATIO_CUSTOM:\n                 return mCustomRatio.y;\n@@ -842,6 +862,7 @@ public class CropImageView extends ImageView {\n             case RATIO_9_16:\n                 return 9.0f;\n             case RATIO_1_1:\n+            case CIRCLE:\n                 return 1.0f;\n             case RATIO_CUSTOM:\n                 return mCustomRatio.x;\n@@ -863,6 +884,7 @@ public class CropImageView extends ImageView {\n             case RATIO_9_16:\n                 return 16.0f;\n             case RATIO_1_1:\n+            case CIRCLE:\n                 return 1.0f;\n             case RATIO_CUSTOM:\n                 return mCustomRatio.y;\n@@ -870,7 +892,6 @@ public class CropImageView extends ImageView {\n                 return 1.0f;\n         }\n     }\n-\n     // Utility methods /////////////////////////////////////////////////////////////////////////////\n \n     private float getDensity() {\n@@ -954,7 +975,36 @@ public class CropImageView extends ImageView {\n             w = r - l;\n             h = b - t;\n         }\n-        return Bitmap.createBitmap(mBitmap, x, y, w, h, null, false);\n+        Bitmap cropped = Bitmap.createBitmap(mBitmap, x, y, w, h, null, false);\n+        if(mCropMode != CropMode.CIRCLE) return cropped;\n+        return getCircularBitmap(cropped);\n+    }\n+\n+    /**\n+     * Crop the square image in a circular\n+     * @param square\n+     * @return\n+     */\n+    public static Bitmap getCircularBitmap(Bitmap square) {\n+        if (square == null) return null;\n+        Bitmap output = Bitmap.createBitmap(square.getWidth(), square.getHeight(),\n+                Bitmap.Config.ARGB_8888);\n+\n+        final Rect rect = new Rect(0, 0, square.getWidth(), square.getHeight());\n+        Canvas canvas = new Canvas(output);\n+\n+        int halfWidth = square.getWidth() / 2;\n+        int halfHeight = square.getHeight() / 2;\n+\n+        final Paint paint = new Paint();\n+        paint.setAntiAlias(true);\n+        paint.setFilterBitmap(true);\n+\n+        canvas.drawCircle(halfWidth, halfHeight, Math.min(halfWidth, halfHeight), paint);\n+        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n+\n+        canvas.drawBitmap(square, rect, rect, paint);\n+        return output;\n     }\n \n     /**\n@@ -1153,7 +1203,7 @@ public class CropImageView extends ImageView {\n     }\n \n     public enum CropMode {\n-        RATIO_FIT_IMAGE(0), RATIO_4_3(1), RATIO_3_4(2), RATIO_1_1(3), RATIO_16_9(4), RATIO_9_16(5), RATIO_FREE(6), RATIO_CUSTOM(7);\n+        RATIO_FIT_IMAGE(0), RATIO_4_3(1), RATIO_3_4(2), RATIO_1_1(3), RATIO_16_9(4), RATIO_9_16(5), RATIO_FREE(6), RATIO_CUSTOM(7), CIRCLE(8);\n         private final int ID;\n \n         private CropMode(final int id) {\ndiff --git a/simplecropview/src/main/res/values/attrs_crop_image_view.xml b/simplecropview/src/main/res/values/attrs_crop_image_view.xml\nindex 8a0e41e..c32c3d4 100644\n--- a/simplecropview/src/main/res/values/attrs_crop_image_view.xml\n+++ b/simplecropview/src/main/res/values/attrs_crop_image_view.xml\n@@ -11,6 +11,7 @@\n             <enum name=\"ratio_9_16\" value=\"5\"/>\n             <enum name=\"ratio_free\" value=\"6\"/>\n             <enum name=\"ratio_custom\" value=\"7\"/>\n+            <enum name=\"circle\" value=\"8\"/>\n         </attr>\n         <attr name=\"backgroundColor\" format=\"color\"/>\n         <attr name=\"overlayColor\" format=\"color\"/>",
    "Handle the case where the HC client is shutdown": "diff --git a/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java b/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java\nindex 190483df4d6..0349782f501 100644\n--- a/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java\n+++ b/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java\n@@ -77,10 +77,16 @@ class HazelcastClient extends LifecycleAdapter implements TopologyService\n     {\n         if ( hazelcastInstance != null )\n         {\n-            hazelcastInstance.getMap( EDGE_SERVER_BOLT_ADDRESS_MAP_NAME )\n-                    .remove( hazelcastInstance.getLocalEndpoint().getUuid() );\n-\n-            hazelcastInstance.shutdown();\n+            try\n+            {\n+                String uuid = hazelcastInstance.getLocalEndpoint().getUuid();\n+                hazelcastInstance.getMap( EDGE_SERVER_BOLT_ADDRESS_MAP_NAME ).remove( uuid );\n+                hazelcastInstance.shutdown();\n+            }\n+ ",
    "disable String . equals intrinsic if RegisterPressure is enabled": "diff --git a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\nindex b2ad0465161..0da38301d8f 100644\n--- a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\n+++ b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java\n@@ -202,7 +202,7 @@ public final class GraalOptions {\n     public static final OptionValue<Boolean> HotSpotPrintInlining = new OptionValue<>(false);\n \n     // Register allocator debugging\n-    @Option(help = \"Comma separated list of register that the allocation is limited to.\", type = OptionType.Debug)\n+    @Option(help = \"Comma separated list of registers that register allocation is limited to.\", type = OptionType.Debug)\n     public static final OptionValue<String> RegisterPressure = new OptionValue<>(null);\n \n     @Option(help = \"\", type = OptionType.Debug)\ndiff --git a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\nindex 4f7cf4220df..5896fc77b6c 100644\n--- a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\n+++ b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java\n@@ -23,6 +23,7 @@\n package com.oracle.graal.replacements;\n \n import static com.oracle.graal.api.code.MemoryBarriers.*;\n+import static com.oracle.graal.compiler.common.GraalOptions.*;\n \n import java.lang.reflect.*;\n import java.util.*;\n@@ -96,17 +97,23 @@ public class StandardGraphBuilderPlugins {\n     }\n \n     private static void registerStringPlugins(InvocationPlugins plugins) {\n-        Registration r = new Registration(plugins, String.class);\n-        r.registerMethodSubstitution(StringSubstitutions.class, \"equals\", Receiver.class, Object.class);\n-\n-        r = new Registration(plugins, StringSubstitutions.class);\n-        r.register1(\"getValue\", String.class, new InvocationPlugin() {\n-            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n-                ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);\n-                b.addPush(new LoadFieldNode(value, field));\n-                return true;\n-            }\n-        });\n+        /*\n+         * AMD64's String.equals substitution needs about 8 registers so we disable it if there is\n+         * some artificial register pressure.\n+         */\n+        if (RegisterPressure.getValue() == null) {\n+            Registration r = new Registration(plugins, String.class);\n+            r.registerMethodSubstitution(StringSubstitutions.class, \"equals\", Receiver.class, Object.class);\n+\n+            r = new Registration(plugins, StringSubstitutions.class);\n+            r.register1(\"getValue\", String.class, new InvocationPlugin() {\n+                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {\n+                    ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);\n+                    b.addPush(new LoadFieldNode(value, field));\n+                    return true;\n+                }\n+            });\n+        }\n     }\n \n     private static void registerArraysPlugins(InvocationPlugins plugins) {",
    "removed stats on how often OptionKeys are read": "diff --git a/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java b/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java\nindex f522d86f1d6..24bd67e90fd 100644\n--- a/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java\n+++ b/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java\n@@ -28,15 +28,11 @@ import java.io.File;\n import java.io.FileReader;\n import java.io.IOException;\n import java.lang.reflect.Field;\n-import java.util.Comparator;\n import java.util.Map;\n import java.util.Properties;\n import java.util.ServiceLoader;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n \n import org.graalvm.compiler.options.Option;\n-import org.graalvm.compiler.options.OptionDescriptor;\n import org.graalvm.compiler.options.OptionDescriptors;\n import org.graalvm.compiler.options.OptionKey;\n import org.graalvm.compiler.options.OptionValues;\n@@ -153,29 +149,6 @@ public class HotSpotGraalOptionValues implements OptionValuesAccess {\n             }\n \n             OptionsParser.parseOptions(optionSettings, values, loader);\n-\n-            Runtime.getRuntime().addShutdownHook(new Thread() {\n-                @Override\n-                public void run() {\n-                    SortedSet<OptionKey<?>> sortedOptions = new TreeSet<>(new Comparator<OptionKey<?>>() {\n-\n-                        @Override\n-                        public int compare(OptionKey<?> o1, OptionKey<?> o2) {\n-                            return o1.getReads() - o2.getReads();\n-                        }\n-\n-                    });\n-                    for (OptionDescriptors opts : loader) {\n-                        for (OptionDescriptor desc : opts) {\n-                            sortedOptions.add(desc.getOptionKey());\n-                        }\n-                    }\n-                    for (OptionKey<?> k : sortedOptions) {\n-                        System.out.printf(\"%d\\t%s%n\", k.getReads(), k);\n-                    }\n-                }\n-            });\n-\n             return new OptionValues(values);\n         }\n     }\ndiff --git a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java\nindex 4db4eb6d71c..ad220a194f6 100644\n--- a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java\n+++ b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java\n@@ -31,8 +31,6 @@ import org.graalvm.util.EconomicMap;\n  */\n public class OptionKey<T> {\n \n-    int reads;\n-\n     private final T defaultValue;\n \n     private OptionDescriptor descriptor;\n@@ -140,8 +138,4 @@ public class OptionKey<T> {\n      */\n     protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, T oldValue, T newValue) {\n     }\n-\n-    public int getReads() {\n-        return reads;\n-    }\n }\ndiff --git a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java\nindex fd4a681a047..ce09486f05c 100644\n--- a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java\n+++ b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java\n@@ -108,7 +108,6 @@ public class OptionValues {\n \n     @SuppressWarnings(\"unchecked\")\n     <T> T get(OptionKey<T> key) {\n-        key.reads++;\n         Object value = values.get(key);\n         if (value == null) {\n             return",
    "Retry test runner and retry rule for flaky tests ( Prasanth Jayachandran reviewed by Jesus Camacho Rodriguez )": "diff --git a/common/src/test/org/apache/hive/common/util/Retry.java b/common/src/test/org/apache/hive/common/util/Retry.java\nnew file mode 100644\nindex 0000000000..9474e90e2a\n--- /dev/null\n+++ b/common/src/test/org/apache/hive/common/util/Retry.java\n@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.common.util;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * JUnit test rule that reruns test on failure. With Retry test rule only the test method will be retried,\n+ * the test class will not be re-initialized.\n+ */\n+public class Retry implements TestRule {\n+\n+  private final int retryCount;\n+\n+  public Retry() {\n+    this(RetryTestRunner.DEFAULT_RETRY_COUNT);\n+  }\n+\n+  public Retry(final int retryCount) {\n+    this.retryCount = retryCount;\n+  }\n+\n+  @Override\n+  public Statement apply(Statement base, Description description) {\n+    return new RetryingStatement(base, description);\n+  }\n+\n+  private class RetryingStatement extends Statement {\n+    private final Statement wrappedStatement;\n+    private final Description description;\n+\n+    private RetryingStatement(Statement wrappedStatement, final Description description) {\n+      this.wrappedStatement = wrappedStatement;\n+      this.description = description;\n+    }\n+\n+    @Override\n+    public void evaluate() throws Throwable {\n+      int failedAttempts = 0;\n+      boolean retry;\n+      do {\n+        try {\n+          wrappedStatement.evaluate();\n+          retry = false;\n+        } catch (Throwable throwable) {\n+          if (retryCount > failedAttempts) {\n+            failedAttempts++;\n+            retry = true;\n+            System.out.println(description + \" Caught: \" + throwable.getMessage() + \". Retrying test \" +\n+              failedAttempts + \"/\" + retryCount);\n+          } else {\n+            throw throwable;\n+          }\n+        }\n+      } while (retry);\n+    }\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/common/src/test/org/apache/hive/common/util/RetryTestRunner.java b/common/src/test/org/apache/hive/common/util/RetryTestRunner.java\nnew file mode 100644\nindex 0000000000..32ab1af48e\n--- /dev/null\n+++ b/common/src/test/org/apache/hive/common/util/RetryTestRunner.java\n@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hive.common.util;\n+\n+import org.junit.Ignore;\n+import org.junit.internal.AssumptionViolatedException;\n+import org.junit.internal.runners.model.EachTestNotifier;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.RunNotifier;\n+import org.junit.runner.notification.StoppedByUserException;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+import org.junit.runners.model.FrameworkMethod;\n+import org.junit.runners.model.InitializationError;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * JUnit test runner that reruns test on failure.\n+ */\n+public class RetryTestRunner extends BlockJUnit4ClassRunner {\n+  // TODO: should this be configurable via annotation or extending @RunWith annotation?\n+  static final int DEFAULT_RETRY_COUNT = 2; // test is executed 3 times in worst case 1 original + 2 retries\n+  private final int retryCount;\n+  private int failedAttempts = 0;\n+\n+  public RetryTestRunner(final Class<?> klass) throws InitializationError {\n+    super(klass);\n+    this.retryCount = DEFAULT_RETRY_COUNT;\n+  }\n+\n+  // from ParentRunner, retried under exception (notified only after exhausting retryCount)\n+  // invoked for test classes\n+  @Override\n+  public void run(final RunNotifier notifier) {\n+    final Description description = getDescription();\n+    final EachTestNotifier testNotifier = new EachTestNotifier(notifier, description);\n+    final Statement statement = classBlock(notifier);\n+    try {\n+      statement.evaluate();\n+    } catch (AssumptionViolatedException e) {\n+      testNotifier.fireTestIgnored();\n+    } catch (StoppedByUserException e) {\n+      // not retrying when user explicitly stops the test\n+      throw e;\n+    } catch (Throwable e) {\n+      // retry on any other exception\n+      retry(description, testNotifier, statement, e);\n+    }\n+  }\n+\n+  // invoked for test methods\n+  @Override\n+  protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {\n+    final Description description = describeChild(method);\n+    if (method.getAnnotation(Ignore.class) != null) {\n+      notifier.fireTestIgnored(description);\n+    } else {\n+      runTestUnit(methodBlock(method), description, notifier);\n+    }\n+  }\n+\n+  private void runTestUnit(final Statement statement, final Description description, final RunNotifier notifier) {\n+    final EachTestNotifier eachNotifier = new EachTestNotifier(notifier, description);\n+    eachNotifier.fireTestStarted();\n+    try {\n+      statement.evaluate();\n+    } catch (AssumptionViolatedException e) {\n+      eachNotifier.addFailedAssumption(e);\n+    } catch (Throwable e) {\n+      retry(description, eachNotifier, statement, e);\n+    } finally {\n+      eachNotifier.fireTestFinished();\n+    }\n+  }\n+\n+  private void retry(final Description description, final EachTestNotifier notifier,\n+    final Statement statement, final Throwable currentThrowable) {\n+    Throwable caughtThrowable = currentThrowable;\n+    while (retryCount > failedAttempts) {\n+      try {\n+        System.out.println(description + \" Caught: \" + (currentThrowable == null ? \"exception\" :\n+          currentThrowable.getMessage()) + \". Retrying test \" + failedAttempts + \"/\" + retryCount);\n+        statement.evaluate();\n+        return;\n+      } catch (Throwable t) {\n+        failedAttempts++;\n+        caughtThrowable = t;\n+      }\n+    }\n+    notifier.addFailure(caughtThrowable);\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java\nindex 7e17d5d888..de61d717fc 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java\n@@ -78,6 +78,8 @@\n import org.apache.hadoop.hive.ql.processors.CommandProcessorResponse;\n import org.apache.hadoop.hive.ql.session.SessionState;\n import org.apache.hadoop.mapred.JobConf;\n+import org.apache.hive.common.util.Retry;\n+import org.apache.hive.common.util.RetryTestRunner;\n import org.apache.hive.hcatalog.common.HCatUtil;\n import org.apache.hive.hcatalog.streaming.DelimitedInputWriter;\n import org.apache.hive.hcatalog.streaming.HiveEndPoint;\n@@ -121,6 +123,10 @@ public TestCompactor(boolean newStreamingAPI) {\n \n   @Rule\n   public TemporaryFolder stagingFolder = new TemporaryFolder();\n+\n+  @Rule\n+  public Retry retry = new Retry(2);\n+\n   private HiveConf conf;\n   IMetaStoreClient msClient;\n   private IDriver driver;\ndiff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java\nindex e017e6382f..40af04fd50 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java\n@@ -39,13 +39,16 @@\n import org.apache.hadoop.hive.ql.wm.Expression;\n import org.apache.hadoop.hive.ql.wm.ExpressionFactory;\n import org.apache.hadoop.hive.ql.wm.Trigger;\n+import org.apache.hive.common.util.RetryTestRunner;\n import org.apache.hive.jdbc.miniHS2.MiniHS2;\n import org.apache.hive.jdbc.miniHS2.MiniHS2.MiniClusterType;\n import org.junit.BeforeClass;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n import com.google.common.collect.Lists;\n \n+@RunWith(RetryTestRunner.class)\n public class TestTriggersMoveWorkloadManager extends AbstractJdbcTriggersTest {\n \n   @BeforeClass",
    "Added the usage of links in the documentation for the remaining classes of the tachyon - servers module": "diff --git a/servers/src/main/java/tachyon/MasterStorageTierAssoc.java b/servers/src/main/java/tachyon/MasterStorageTierAssoc.java\nindex 93816bf721..8e873af6ee 100644\n--- a/servers/src/main/java/tachyon/MasterStorageTierAssoc.java\n+++ b/servers/src/main/java/tachyon/MasterStorageTierAssoc.java\n@@ -20,7 +20,7 @@ import java.util.List;\n import tachyon.conf.TachyonConf;\n \n /**\n- * StorageTierAssoc for masters\n+ * {@link StorageTierAssoc} for masters\n  */\n public class MasterStorageTierAssoc extends StorageTierAssoc {\n   public MasterStorageTierAssoc(TachyonConf conf) {\ndiff --git a/servers/src/main/java/tachyon/StorageTierAssoc.java b/servers/src/main/java/tachyon/StorageTierAssoc.java\nindex ba3be80872..124cff4e15 100644\n--- a/servers/src/main/java/tachyon/StorageTierAssoc.java\n+++ b/servers/src/main/java/tachyon/StorageTierAssoc.java\n@@ -23,8 +23,8 @@ import com.google.common.collect.ImmutableBiMap;\n import tachyon.conf.TachyonConf;\n \n /**\n- * Creates a two-way mapping between StorageTier aliases and ordinal numbers from the given\n- * TachyonConf. This class is thread safe.\n+ * Creates a two-way mapping between {@link tachyon.worker.block.meta.StorageTier} aliases and\n+ * ordinal numbers from the given {@link TachyonConf}. This class is thread safe.\n  */\n public abstract class StorageTierAssoc {\n   /*\ndiff --git a/servers/src/main/java/tachyon/ValidateConf.java b/servers/src/main/java/tachyon/ValidateConf.java\nindex fcdd35737c..fbf6427f37 100644\n--- a/servers/src/main/java/tachyon/ValidateConf.java\n+++ b/servers/src/main/java/tachyon/ValidateConf.java\n@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;\n import tachyon.conf.TachyonConf;\n \n /**\n- * Validate the TachyonConf object.\n+ * Validate the {@link TachyonConf} object.\n  *\n  */\n public class ValidateConf {\ndiff --git a/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java b/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java\nindex 64daa03acf..ddb031b46d 100644\n--- a/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java\n+++ b/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java\n@@ -20,7 +20,7 @@ import java.util.List;\n import tachyon.conf.TachyonConf;\n \n /**\n- * StorageTierAssoc for workers\n+ * {@link StorageTierAssoc} for workers\n  */\n public class WorkerStorageTierAssoc extends StorageTierAssoc {\n   public WorkerStorageTierAssoc(TachyonConf conf) {\ndiff --git a/servers/src/main/java/tachyon/worker/WorkerContext.java b/servers/src/main/java/tachyon/worker/WorkerContext.java\nindex a05d98875a..21007736b4 100644\n--- a/servers/src/main/java/tachyon/worker/WorkerContext.java\n+++ b/servers/src/main/java/tachyon/worker/WorkerContext.java\n@@ -18,14 +18,14 @@ package tachyon.worker;\n import tachyon.conf.TachyonConf;\n \n /**\n- * A WorkerContext object stores TachyonConf.\n+ * A WorkerContext object stores {@link TachyonConf}.\n  */\n public final class WorkerContext {\n   private WorkerContext() {} // to prevent initialization\n \n   /**\n-   * The static configuration object. There is only one TachyonConf object shared within the same\n-   * worker process.\n+   * The static configuration object. There is only one {@link TachyonConf} object shared within the\n+   * same worker process.\n    */\n   private static TachyonConf sTachyonConf = new TachyonConf();\n \ndiff --git a/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java b/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java\nindex 3e21286ed2..073e9dc608 100644\n--- a/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java\n+++ b/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java\n@@ -217,13 +217,13 @@ public final class DataServerHandler extends SimpleChannelInboundHandler<RPCMess\n   }\n \n   /**\n-   * Returns the appropriate DataBuffer representing the data to send, depending on the configurable\n-   * transfer type.\n+   * Returns the appropriate {@link DataBuffer} representing the data to send, depending on the\n+   * configurable transfer type.\n    *\n-   * @param req The initiating RPCBlockReadRequest\n+   * @param req The initiating {@link RPCBlockReadRequest}\n    * @param reader The BlockHandler for the block to read\n    * @param readLength The length, in bytes, of the data to read from the block\n-   * @return a DataBuffer representing the data\n+   * @return a {@link DataBuffer} representing the data\n    * @throws IOException\n    * @throws IllegalArgumentException\n    */",
    "Add deposit column to OfferBookView": "diff --git a/core/src/main/resources/i18n/displayStrings.properties b/core/src/main/resources/i18n/displayStrings.properties\nindex 7767f3644d..0860b75039 100644\n--- a/core/src/main/resources/i18n/displayStrings.properties\n+++ b/core/src/main/resources/i18n/displayStrings.properties\n@@ -357,6 +357,8 @@ shared.notSigned.noNeed=This account type doesn't use signing\n \n offerbook.nrOffers=No. of offers: {0}\n offerbook.volume={0} (min - max)\n+offerbook.deposit=Deposit\n+offerbook.deposit.help=Deposit paid by each trader to guarantee the trade. Will be returned when the trade is completed.\n \n offerbook.createOfferToBuy=Create new offer to buy {0}\n offerbook.createOfferToSell=Create new offer to sell {0}\ndiff --git a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\nindex f91c593dd0..af810592cc 100644\n--- a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n+++ b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java\n@@ -38,7 +38,6 @@ import bisq.desktop.main.offer.OfferView;\n import bisq.desktop.main.overlays.popups.Popup;\n import bisq.desktop.main.overlays.windows.OfferDetailsWindow;\n import bisq.desktop.util.CssTheme;\n-import bisq.desktop.util.DisplayUtils;\n import bisq.desktop.util.FormBuilder;\n import bisq.desktop.util.GUIUtil;\n import bisq.desktop.util.Layout;\n@@ -130,7 +129,7 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi\n     private AutocompleteComboBox<PaymentMethod> paymentMethodComboBox;\n     private AutoTooltipButton createOfferButton;\n     private AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> amountColumn, volumeColumn, marketColumn,\n-            priceColumn, paymentMethodColumn, signingStateColumn, avatarColumn;\n+            priceColumn, paymentMethodColumn, depositColumn, signingStateColumn, avatarColumn;\n     private TableView<OfferBookListItem> tableView;\n \n     private OfferView.OfferActionHandler offerActionHandler;\n@@ -224,6 +223,8 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi\n         tableView.getColumns().add(volumeColumn);\n         paymentMethodColumn = getPaymentMethodColumn();\n         tableView.getColumns().add(paymentMethodColumn);\n+        depositColumn = getDepositColumn();\n+        tableView.getColumns().add(depositColumn);\n         signingStateColumn = getSigningStateColumn();\n         tableView.getColumns().add(signingStateColumn);\n         avatarColumn = getAvatarColumn();\n@@ -927,6 +928,52 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi\n         return column;\n     }\n \n+\n+    private AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> getDepositColumn() {\n+        AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> column = new AutoTooltipTableColumn<>(\n+                Res.get(\"offerbook.deposit\"),\n+                Res.get(\"offerbook.deposit.help\")) {\n+            {\n+                setMinWidth(70);\n+                setSortable(true);\n+            }\n+        };\n+\n+        column.getStyleClass().add(\"number-column\");\n+        column.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));\n+        column.setCellFactory(\n+                new Callback<>() {\n+                    @Override\n+                    public TableCell<OfferBookListItem, OfferBookListItem> call(\n+                            TableColumn<OfferBookListItem, OfferBookListItem> column) {\n+                        return new TableCell<>() {\n+                            @Override\n+                            public void updateItem(final OfferBookListItem item, boolean empty) {\n+                                super.updateItem(item, empty);\n+                                if (item != null && !empty) {\n+                                    var isSellOffer = item.getOffer().getDirection() == OfferPayload.Direction.SELL;\n+                                    var deposit = isSellOffer ? item.getOffer().getBuyerSecurityDeposit() :\n+                                            item.getOffer().getSellerSecurityDeposit();\n+                                    if (deposit == null) {\n+                                        setText(Res.get(\"shared.na\"));\n+                                        setGraphic(null);\n+                                    } else {\n+                                        setText(\"\");\n+                                        setGraphic(new ColoredDecimalPlacesWithZerosText(model.formatDepositString(\n+                                                deposit, item.getOffer().getAmount().getValue()),\n+                                                GUIUtil.AMOUNT_DECIMALS_WITH_ZEROS));\n+                                    }\n+                                } else {\n+                                    setText(\"\");\n+    ",
    "Treat report type as hex": "diff --git a/src/org/traccar/protocol/Gl200TextProtocolDecoder.java b/src/org/traccar/protocol/Gl200TextProtocolDecoder.java\nindex 21020ee6d..70627d65d 100644\n--- a/src/org/traccar/protocol/Gl200TextProtocolDecoder.java\n+++ b/src/org/traccar/protocol/Gl200TextProtocolDecoder.java\n@@ -320,7 +320,7 @@ public class Gl200TextProtocolDecoder extends BaseProtocolDecoder {\n             .number(\"(d{15}|x{14}),\")            // imei\n             .expression(\"[^,]*,\")                // device name\n             .number(\"d*,\")\n-            .number(\"(d{1,2}),\")                 // report type\n+            .number(\"(x{1,2}),\")                 // report type\n             .number(\"d{1,2},\")                   // count\n             .expression(PATTERN_LOCATION.pattern())\n             .groupBegin()\n@@ -966,15 +966,15 @@ public class Gl200TextProtocolDecoder extends BaseProtocolDecoder {\n             return null;\n         }\n \n-        int reportType = parser.nextInt();\n+        int reportType = parser.nextHexInt();\n         if (type.equals(\"NMR\")) {\n             position.set(Position.KEY_MOTION, reportType == 1);\n         } else if (type.equals(\"SOS\")) {\n             position.set(Position.KEY_ALARM, Position.ALARM_SOS);\n         } else if (type.equals(\"DIS\")) {\n-            position.set(Position.PREFIX_IN + reportType / 10, reportType % 10 == 1);\n+            position.set(Position.PREFIX_IN + reportType / 0x10, reportType % 0x10 == 1);\n ",
    "initialize file lock config earlier for session": "diff --git a/src/cpp/session/SessionMain.cpp b/src/cpp/session/SessionMain.cpp\nindex 9ec411b6ea..a983fc81bc 100644\n--- a/src/cpp/session/SessionMain.cpp\n+++ b/src/cpp/session/SessionMain.cpp\n@@ -1655,9 +1655,6 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)\n    s_waitForMethodNames.push_back(kChooseFileCompleted);\n    s_waitForMethodNames.push_back(kUserPromptCompleted);\n    s_waitForMethodNames.push_back(kHandleUnsavedChangesCompleted);\n-   \n-   // initialize lockfile management\n-   FileLock::initialize();\n \n    // execute core initialization functions\n    using boost::bind;\n@@ -3149,6 +3146,9 @@ int main (int argc, char * const argv[])\n       if (error)\n          return sessionExitFailure(error, ERROR_LOCATION);\n       \n+      // initialize file lock config\n+      FileLock::initialize();\n+      \n       // start http connection listener\n       error = startHttpConnectionListener();\n       if (error)",
    "Activates update for reloadable audio systems in order to activate them if the number of devices changes from 0 to something greater .": "diff --git a/lib/installer-exclude/libjitsi.jar b/lib/installer-exclude/libjitsi.jar\nindex 64fb2ea96..cee1f5f46 100644\nBinary files a/lib/installer-exclude/libjitsi.jar and b/lib/installer-exclude/libjitsi.jar differ\ndiff --git a/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java b/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java\nindex 47ace2235..415c694ff 100644\n--- a/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java\n+++ b/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java\n@@ -226,8 +226,11 @@ private AudioSystem[] getAudioSystems()\n         if (type != AUDIO)\r\n             throw new IllegalStateException(\"type\");\r\n \r\n-        if (audioSystems == null)\r\n-            audioSystems = deviceConfiguration.getAvailableAudioSystems();\r\n+        // This must updated at each call to allows hotplug device system to be\r\n+        // enabled (if the number of devices change to someting greater than 0)\r\n+        // or disabled (if the number of available device changes to 0).\r\n+        audioSystems = deviceConfiguration.getAvailableAudioSystems();\r\n+\r\n         return audioSystems;\r\n     }\r\n \r",
    "fix test case": "diff --git a/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java b/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java\nindex 62ed8c3e4..2175a20b2 100644\n--- a/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java\n+++ b/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java\n@@ -96,7 +96,7 @@ public final class ZookeeperRegistryCenterModifyTest extends AbstractNestedZooke\n         assertThat(actual.size(), is(2));\n         for (String each : actual) {\n             assertThat(each, startsWith(\"test_sequential\"));\n-            assertThat(zkRegCenter.get(each), startsWith(\"test_value\"));\n+            assertThat(zkRegCenter.get(\"/sequential/\" + each), startsWith(\"test_value\"));\n         }\n     }\n     ",
    "improve DE_AGREEMENT": "diff --git a/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java b/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java\nindex c2f2f2793c..8b943200b4 100644\n--- a/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java\n+++ b/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java\n@@ -443,7 +443,7 @@ public class AgreementRule extends Rule {\n \n   private void replacePrepositionsByArticle (AnalyzedTokenReadings[] tokens) {\n   \tfor (int i = 0; i < tokens.length; i++) {\n-  \t\tif (StringUtils.equalsAny(tokens[i].getToken(), \"ins\", \"ans\")) {\n+      if (StringUtils.equalsAny(tokens[i].getToken(), \"ins\", \"ans\", \"aufs\", \"vors\", \"durchs\")) {\n   \t\t\ttokens[i] = new AnalyzedTokenReadings(INS_REPLACEMENT, tokens[i].getStartPos());\n   \t\t} else if (StringUtils.equalsAny(tokens[i].getToken(), \"zur\")) {\n   \t\t\ttokens[i] = new AnalyzedTokenReadings(ZUR_REPLACEMENT, tokens[i].getStartPos());",
    "tweaks event loop processor request task": "diff --git a/src/main/java/reactor/core/publisher/EventLoopProcessor.java b/src/main/java/reactor/core/publisher/EventLoopProcessor.java\nindex a2e08e62d..4e3940189 100644\n--- a/src/main/java/reactor/core/publisher/EventLoopProcessor.java\n+++ b/src/main/java/reactor/core/publisher/EventLoopProcessor.java\n@@ -36,6 +36,8 @@ import reactor.core.Exceptions;\n import reactor.core.MultiProducer;\n import reactor.core.Producer;\n import reactor.core.Receiver;\n+import reactor.util.Logger;\n+import reactor.util.Loggers;\n import reactor.util.concurrent.QueueSupplier;\n import reactor.util.concurrent.RingBuffer;\n import reactor.util.concurrent.RingBufferReader;\n@@ -543,6 +545,7 @@ abstract class EventLoopProcessor<IN> extends FluxProcessor<IN, IN>\n \t\t\tthis.prefetch = prefetch;\n \t\t}\n \n+\t\tstatic Logger logger = Loggers.getLogger(RequestTask.class);\n \t\t@Override\n \t\tpublic void run() {\n \t\t\tfinal long bufferSize = prefetch;\n@@ -552,14 +555,15 @@ abstract class EventLoopProcessor<IN> extends FluxProcessor<IN, IN>\n \t\t\t\tspinObserver.run();\n \t\t\t\tupstream.request(bufferSize - 1);\n \n+\t\t\t\tlong c;\n \t\t\t\tfor (; ; ) {\n-\t\t\t\t\tcursor = cursor + limit;\n-\t\t\t\t\twaitStrategy.waitFor(cursor, readCount, spinObserver);\n+\t\t\t\t\tc = cursor + limit;\n+\t\t\t\t\tcursor = waitStrategy.waitFor(c, readCount, spinObserver);\n \t\t\t\t\tif (postWaitCallback != null) {\n \t\t\t\t\t\tpostWaitCallback.accept(cursor);\n \t\t\t\t\t}\n \t\t\t\t\t//spinObserver.accept(null);\n-\t\t\t\t\tupstream.request(limit);\n+\t\t\t\t\tupstream.request(limit + (cursor - (c - limit)));\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (InterruptedException e) {",
    "Enable SQL variables by default .": "diff --git a/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java b/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java\nindex cd8ba3f3e2..4e1c7e0bcd 100644\n--- a/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java\n+++ b/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java\n@@ -207,7 +207,7 @@ public final class ModelPreferences\n         PrefUtils.setDefaultPreferenceValue(store, SQL_ANONYMOUS_PARAMETERS_MARK, String.valueOf(SQLConstants.DEFAULT_PARAMETER_MARK));\r\n         PrefUtils.setDefaultPreferenceValue(store, SQL_NAMED_PARAMETERS_PREFIX, String.valueOf(SQLConstants.DEFAULT_PARAMETER_PREFIX));\r\n         PrefUtils.setDefaultPreferenceValue(store, SQL_CONTROL_COMMAND_PREFIX, String.valueOf(SQLConstants.DEFAULT_CONTROL_COMMAND_PREFIX));\r\n-        PrefUtils.setDefaultPreferenceValue(store, SQL_VARIABLES_ENABLED, false);\r\n+        PrefUtils.setDefaultPreferenceValue(store, SQL_VARIABLES_ENABLED, true);\r\n         PrefUtils.setDefaultPreferenceValue(store, SQL_FILTER_FORCE_SUBSELECT, false);\r\n \r\n         PrefUtils.setDefaultPreferenceValue(store, SQL_FORMAT_FORMATTER, SQLFormatterTokenized.FORMATTER_ID);\r",
    "Added phantomjs to dependency": "diff --git a/tools/apt_deps.sh b/tools/apt_deps.sh\nindex 2b377791..6cb71412 100755\n--- a/tools/apt_deps.sh\n+++ b/tools/apt_deps.sh\n@@ -76,4 +76,5 @@ apt-get install -y zlib1g-dev \\\n                    libbz2-dev \\\n                 ",
    "Add readme . md in Collections sections": "diff --git a/helloworlds/1.6-usefull-libraries/collections/readme.md b/helloworlds/1.6-usefull-libraries/collections/readme.md\nnew file mode 100644\nindex 0000000..1ea2c9e\n--- /dev/null\n+++ b/helloworlds/1.6-usefull-libraries/collections/readme.md\n@@ -0,0 +1,83 @@\n+## **Alternative java collections overview**\n+*In progress*\n+\n+### 1. General overview\n+*In progress*\n+\n+### 2. New collections types\n+#### 2.1 MultiSet/Bag in Guava, Apache Commons Collections and Eclipse (GS) Collections\n+\n+| **Type** | **Guava** | **Apache Commons Collections** | **GS Collections** | **JDK** |\n+| -------------\t | \t-------------| \t-------------| -------------| \t-------------|\n+| Order not defined | [HashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/HashMultiset.html) | [HashBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/HashBag.html) | [HashBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/HashBag.html) | [HashMap](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html) |\n+| Sorted  | [TreeMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/TreeMultiset.html) | [TreeBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/TreeBag.html) | [TreeBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/sorted/mutable/TreeBag.html) | [TreeMap](https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html) |\n+| Insertion-order  | [LinkedHashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/LinkedHashMultiset.html) | - | - | [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html) |\n+| Concurrent variant | [ConcurrentHashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ConcurrentHashMultiset.html) | [SynchronizedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/SynchronizedBag.html) | [SynchronizedBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/SynchronizedBag.html) | [Collections.synchronizedMap(HashMap<string, integer=\"\">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |\n+| Concurrent and sorted | - | [SynchronizedSortedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/SynchronizedSortedBag.html) | [SynchronizedSortedBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/sorted/mutable/SynchronizedSortedBag.html) | [Collections.synchronizedSortedMap(TreeMap<string ,=\"\" integer=\"\">)</string>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |\n+| Immutable collection | [ImmutableMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableMultiset.html) | [UnmodifiableBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/UnmodifiableBag.html) | [UnmodifiableBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/UnmodifiableBag.html) | [Collections.unmodifiableMap(HashMap<string, integer=\"\">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |\n+| Immutable and sorted | [ImmutableSortedMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableSortedMultiset.html) | [UnmodifiableSortedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/UnmodifiableSortedBag.html) | [UnmodifiableSortedBag](UnmodifiableSortedBag) | [Collections.unmodifiableSortedMap(TreeMap<string, integer=\"\">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |\n+\n+##### **Examples using MultiSet/Bag**\n+*In progress*\n+        \n+\n+#### 2.2 Multimap in Guava, Apache Commons Collections and Eclipse (GS) Collections\n+\n+| Key's order |  Value's order | Duplicate | Analog key | Analog value | Guava | Apache | Eclipse (GS) Collections | JDK |\n+| ----------  | -------------  | ----------| -----------| \t ----------|-------| -------| -------------------------|-----|\n+| not defined | Insertion-order | yes | `HashMap` | `ArrayList` | `ArrayListMultimap` | `MultiValueMap` | `FastListMultimap` | `HashMap<K, ArrayList<V>>` |\n+| not defined | not defined | no | `HashMap` | `HashSet` | `HashMultimap` | `MultiValueMap. multiValueMap( new HashMap<K, Set>(), HashSet.class);` | `UnifiedSetMultimap` | `HashMap<K, HashSet<V>>` |\n+| not defined | sorted | no | `HashMap` | `TreeSet` | `Multimaps. newMultimap( HashMap, Supplier <TreeSet>)` | `MultiValueMap. multiValueMap( new HashMap<K, Set>(), TreeSet.class)` | `TreeSortedSet- Multimap` | `HashMap<K, TreeSet<V>>` |\n+| Insertion-order | Insertion-order | yes | Linked HashMap | ArrayList | LinkedList- Multimap | MultiValueMap. multiValueMap(new LinkedHashMap<K, List>(), ArrayList.class); | |LinkedHashMap< K, ArrayList<V>> |\n+| Insertion-order | Insertion-order | no | `LinkedHash- Multimap` | `Linked- HashSet` | `LinkedHash- Multimap` | `MultiValueMap. multiValueMap(new LinkedHashMap<K, Set>(), LinkedHashSet.class)` | |`LinkedHashMap<K, LinkedHashSet<V>>` |\n+| sorted | sorted | no | `TreeMap` | `TreeSet` | `TreeMultima` | `MultiValueMap. multiValueMap( new TreeMap<K, Set>(),TreeSet.class)` | |`TreeMap<K, TreeSet<V>>` |\n+\n+\n+##### **Examples using Multimap**\n+*In progress*\n+\n+####  **2.3 Using BiMap in Guava, Apache Commons Collections and GS Collections**\n+\n+##### **Examples using BiMap**\n+*In progress*\n+\n+### 3. Compare operation with collections\n+\n+#### 3.1 Create collections\n+\n+| Description | JDK | guava | gs-collections |\n+| -------------\t | \t-------------| \t-------------| -------------|\n+| Create empty list | new ArrayList<>() | Lists.newArrayList() | FastList.newList() |\n+| Create list from values | Arrays.asList(\"1\", \"2\", \"3\") | Lists.newArrayList(\"1\", \"2\", \"3\") | FastList.newListWith(\"1\", \"2\", \"3\") |\n+| Create list with capacity = 100 | new ArrayList<>(100) | Lists.newArrayListWithCapacity(100) | FastList.newList(100) |\n+| Create list from any collectin | new ArrayList<>(collection) | Lists.newArrayList(collection) | FastList.newList(collection) |\n+| Create list from any Iterable | - | Lists.newArrayList(iterable) | FastList.newList(iterable) |\n+| Create list from Iterator | - | Lists.newArrayList(iterator) | - |\n+| Create list from array | Arrays.asList(array) | Lists.newArrayList(array) | FastList.newListWith(array) |\n+| Create list using factory | - | - | FastList.newWithNValues(10, () -> \"1\") |\n+\n+**Examples:** \n+*In progress*\n+\n+| Description | JDK | guava | gs-collections |\n+| -------------\t | \t-------------| \t-------------| -------------|\n+| Create empty set | new HashSet<>() | Sets.newHashSet() | UnifiedSet.newSet() |\n+| Creatre set from values | new HashSet<>(Arrays.asList(\"alpha\", \"beta\", \"gamma\")) | Sets.newHashSet(\"alpha\", \"beta\", \"gamma\") | UnifiedSet.newSetWith(\"alpha\", \"beta\", \"gamma\") |\n+| Create set from any collections | new HashSet<>(collection) | Sets.newHashSet(collection) | UnifiedSet.newSet(collection) |\n+| Create set from any Iterable | - | Sets.newHashSet(iterable) | UnifiedSet.newSet(iterable) |\n+| Create set from any Iterator | - | Sets.newHashSet(iterator); | - |\n+| Create set from Array | new HashSet<>(Arrays.asList(array)) | Sets.newHashSet(array) | UnifiedSet.newSetWith(array) |\n+\n+**Examples:** \n+*In progress*\n+\n+| Description | JDK | guava | gs-collections |\n+| -------------\t | \t-------------| \t-------------| -------------|\n+| Create empty map | new HashMap<>() | Maps.newHashMap() | UnifiedMap.newMap() |\n+| Create map with capacity = 130 | new HashMap<>(130) | Maps.newHashMapWithExpectedSize(100) | UnifiedMap.newMap(130) |\n+| Create map from other map | new HashMap<>(map) | Maps.newHashMap(map) | UnifiedMap.newMap(map) |\n+| Create map from keys | - | - | UnifiedMap.newWithKeysValues(\"1\", \"a\", \"2\", \"b\") |\n+\n+**Examples:** \n+*In progress*\n+",
    "Make the setEmbeddedTitleBar fall - back work on pre - API16 , too": "diff --git a/src/com/nobu_games/android/view/web/TitleBarWebView.java b/src/com/nobu_games/android/view/web/TitleBarWebView.java\nindex 510605e49..2df1c99dd 100644\n--- a/src/com/nobu_games/android/view/web/TitleBarWebView.java\n+++ b/src/com/nobu_games/android/view/web/TitleBarWebView.java\n@@ -58,7 +58,7 @@ public class TitleBarWebView extends WebView {\n             if(!mTouchInTitleBar) {\n                 return false;\n             } else {\n-                switch(ev.getActionMasked()) {\n+                switch(ev.getAction() & MotionEvent.ACTION_MASK) {\n                     case MotionEvent.ACTION_UP:\n                     case MotionEvent.ACTION_CANCEL:\n                         mTouchInTitleBar = false;\n@@ -110,7 +110,7 @@ public class TitleBarWebView extends WebView {\n             final float x = event.getX();\n             float y = event.getY();\n \n-            switch(event.getActionMasked()) {\n+            switch(event.getAction() & MotionEvent.ACTION_MASK) {\n                 case MotionEvent.ACTION_DOWN:\n                     if(y <= visTitleHeight) {\n                         mTouchInTitleBar = true;\n@@ -305,16 +305,12 @@ public class TitleBarWebView extends WebView {\n                     ViewGroup.LayoutParams.MATCH_PARENT,\n                     ViewGroup.LayoutParams.WRAP_CONTENT, 0, 0);\n \n-  ",
    "Add some logs for recording": "diff --git a/src/main/java/io/antmedia/rest/BroadcastRestService.java b/src/main/java/io/antmedia/rest/BroadcastRestService.java\nindex c243954da..01a3389c0 100644\n--- a/src/main/java/io/antmedia/rest/BroadcastRestService.java\n+++ b/src/main/java/io/antmedia/rest/BroadcastRestService.java\n@@ -748,16 +748,20 @@ public class BroadcastRestService extends RestServiceBase{\n \t\t\t\t\tif (broadcast.getMp4Enabled() != RECORD_ENABLE) \n \t\t\t\t\t{\n \t\t\t\t\t\tresult = getDataStore().setMp4Muxing(streamId, RECORD_ENABLE);\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tstreamId = streamId.replaceAll(REPLACE_CHARS, \"_\");\n \t\t\t\t\t\t//if it's not enabled, start it\n \t\t\t\t\t\tif (broadcast.getStatus().equals(AntMediaApplicationAdapter.BROADCAST_STATUS_BROADCASTING))\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\tresult = startRecord(streamId, RecordType.MP4);\n \t\t\t\t\t\t\tif (!result) \n \t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tstreamId = streamId.replaceAll(REPLACE_CHARS, \"_\");\n \t\t\t\t\t\t\t\tlogger.warn(\"Mp4 recording could not be started for stream: {}\", streamId);\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tlogger.info(\"Broadcast is not broadcasting status so recording only saved to the database for stream:{}\", streamId);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\telse \n \t\t\t\t\t{",
    "Rewrite substitution resolver , use explicit immutable ResolveSource .": "diff --git a/config/.gitignore b/config/.gitignore\nnew file mode 100644\nindex 0000000..5e56e04\n--- /dev/null\n+++ b/config/.gitignore\n@@ -0,0 +1 @@\n+/bin\ndiff --git a/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java b/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java\nindex 394931d..bcda80d 100644\n--- a/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java\n+++ b/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java\n@@ -17,7 +17,7 @@ import com.typesafe.config.ConfigRenderOptions;\n import com.typesafe.config.ConfigValue;\n import com.typesafe.config.ConfigValueType;\n \n-abstract class AbstractConfigObject extends AbstractConfigValue implements ConfigObject {\n+abstract class AbstractConfigObject extends AbstractConfigValue implements ConfigObject, Container {\n \n     final private SimpleConfig config;\n \n@@ -56,7 +56,8 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi\n     /**\n      * This looks up the key with no transformation or type conversion of any\n      * kind, and returns null if the key is not present. The object must be\n-     * resolved; use attemptPeekWithPartialResolve() if it is not.\n+     * resolved along the nodes needed to get the key or\n+     * ConfigException.NotResolved will be thrown.\n      *\n      * @param key\n      * @return the unmodified raw value or null\n@@ -78,67 +79,34 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi\n      *            key to look up\n      * @return the value of the key, or null if known not to exist\n      * @throws ConfigException.NotResolved\n-     *             if can't figure out key's value or can't know whether it\n-     *             exists\n+     *             if can't figure out key's value (or existence) without more\n+     *             resolving\n      */\n-    protected abstract AbstractConfigValue attemptPeekWithPartialResolve(String key);\n+    abstract AbstractConfigValue attemptPeekWithPartialResolve(String key);\n \n     /**\n-     * Looks up the path with no transformation, type conversion, or exceptions\n-     * (just returns null if path not found). Does however resolve the path, if\n-     * resolver != null.\n-     *\n-     * @throws NotPossibleToResolve\n-     *             if context is not null and resolution fails\n+     * Looks up the path with no transformation or type conversion. Returns null\n+     * if the path is not found; throws ConfigException.NotResolved if we need\n+     * to go through an unresolved node to look up the path.\n      */\n-    protected AbstractConfigValue peekPath(Path path, ResolveContext context) throws NotPossibleToResolve {\n-        return peekPath(this, path, context);\n+    protected AbstractConfigValue peekPath(Path path) {\n+        return peekPath(this, path);\n     }\n \n-    /**\n-     * Looks up the path. Doesn't do any resolution, will throw if any is\n-     * needed.\n-     */\n-    AbstractConfigValue peekPath(Path path) {\n+    private static AbstractConfigValue peekPath(AbstractConfigObject self, Path path) {\n         try {\n-            return peekPath(this, path, null);\n-        } catch (NotPossibleToResolve e) {\n-            throw new ConfigException.BugOrBroken(\n-                    \"NotPossibleToResolve happened though we had no ResolveContext in peekPath\");\n-        }\n-    }\n+            // we'll fail if anything along the path can't\n+            // be looked at without resolving.\n+            Path next = path.remainder();\n+            AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());\n \n-    // as a side effect, peekPath() will have to resolve all parents of the\n-    // child being peeked, but NOT the child itself. Caller has to resolve\n-    // the child itself if needed.\n-    private static AbstractConfigValue peekPath(AbstractConfigObject self, Path path,\n-            ResolveContext context) throws NotPossibleToResolve {\n-        try {\n-            if (context != null) {\n-                // walk down through the path resolving only things along that\n-                // path, and then recursively call ourselves with no resolve\n-                // context.\n-                AbstractConfigValue partiallyResolved = context.restrict(path).resolve(self);\n-                if (partiallyResolved instanceof AbstractConfigObject) {\n-                    return peekPath((AbstractConfigObject) partiallyResolved, path, null);\n-                } else {\n-                    throw new ConfigException.BugOrBroken(\"resolved object to non-object \" + self\n-                            + \" to \" + partiallyResolved);\n-                }\n+            if (next == null) {\n+                return v;\n             } else {\n-                // with no resolver, we'll fail if anything along the path can't\n-                // be looked at without resolving.\n-                Path next = path.remainder();\n-                AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());\n-\n-                if (next == null) {\n-                    return v;\n+                if (v instanceof AbstractConfigObject) {\n+                    return peekPath((AbstractConfigObject) v, next);\n                 } else {\n-                    if (v instanceof AbstractConfigObject) {\n-                        return peekPath((AbstractConfigObject) v, next, null);\n-                    } else {\n-                        return null;\n-                    }\n+                    return null;\n                 }\n             }\n         } catch (ConfigException.NotResolved e) {\n@@ -209,7 +177,8 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi\n     }\n \n     @Override\n-    abstract AbstractConfigObject resolveSubstitutions(ResolveContext context) throws NotPossibleToResolve;\n+    abstract AbstractConfigObject resolveSubstitutions(ResolveContext context, ResolveSource source)\n+            throws NotPossibleToResolve;\n \n     @Override\n     abstract AbstractConfigObject relativized(final Path prefix);\ndiff --git a/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java b/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java\nindex 9b6b1fd..1eb05c8 100644\n--- a/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java\n+++ b/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java\n@@ -68,9 +68,11 @@ abstract class AbstractConfigValue implements ConfigValue, MergeableValue {\n      *\n      * @param context\n      *            state of the current resolve\n+     * @param source\n+     *            where to look up values\n      * @return a new value if there were changes, or this if no changes\n      */\n-    AbstractConfigValue resolveSubstitutions(ResolveContext context)\n+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source)\n             throws NotPossibleToResolve {\n         return this;\n     }\n@@ -79,6 +81,38 @@ abstract class AbstractConfigValue implements ConfigValue, MergeableValue {\n         return ResolveStatus.RESOLVED;\n     }\n \n+    protected static List<AbstractConfigValue> replaceChildInList(List<AbstractConfigValue> list,\n+            AbstractConfigValue child, AbstractConfigValue replacement) {\n+        int i = 0;\n+        while (i < list.size() && list.get(i) != child)\n+            ++i;\n+        if (i == list.size())\n+            throw new ConfigException.BugOrBroken(\"tried to replace \" + child + \" which is not in \" + list);\n+        List<AbstractConfigValue> newStack = new ArrayList<AbstractConfigValue>(list);\n+        if (replacement != null)\n+            newStack.set(i, replacement);\n+        else\n+            newStack.remove(i);\n+\n+        if (newStack.isEmpty())\n+            return null;\n+        else\n+            return newStack;\n+    }\n+\n+    protected static boolean hasDescendantInList(List<AbstractConfigValue> list, AbstractConfigValue descendant) {\n+        for (AbstractConfigValue v : list) {\n+            if (v == descendant)\n+                return true;\n+        }\n+        // now the expensive traversal\n+        for (AbstractConfigValue v : list) {\n+            if (v instanceof Container && ((Container) v).hasDescendant(descendant))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n     /**\n      * This is used when including one file in another; the included file is\n      * relativized to the path it's included into in the parent file. The point\ndiff --git a/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java b/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java\nindex 8cb1575..e4f031e 100644\n--- a/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java\n+++ b/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java\n@@ -22,7 +22,7 @@ import com.typesafe.config.ConfigValueType;\n  * concatenations of objects, but ConfigDelayedMerge should be used for that\n  * since a concat of objects really will merge, not concatenate.\n  */\n-final class ConfigConcatenation extends AbstractConfigValue implements Unmergeable {\n+final class ConfigConcatenation extends AbstractConfigValue implements Unmergeable, Container {\n \n     final private List<AbstractConfigValue> pieces;\n \n@@ -170,7 +170,7 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab\n     }\n \n     @Override\n-    AbstractConfigValue resolveSubstitutions(ResolveContext context) throws NotPossibleToResolve {\n+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source) throws NotPossibleToResolve {\n         if (ConfigImpl.traceSubstitutionsEnabled()) {\n             int indent = context.depth() + 2;\n             ConfigImpl.trace(indent - 1, \"concatenation has \" + pieces.size() + \" pieces:\");\n@@ -181,11 +181,16 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab\n             }\n         }\n \n+        // Right now there's no reason to pushParent here because the\n+        // content of ConfigConcatenation should not need to replaceChild,\n+        // but if it did we'd have to do this.\n+        ResolveSource sourceWithParent = source; // .pushParent(this);\n+\n         List<AbstractConfigValue> resolved = new ArrayList<AbstractConfigValue>(pieces.size());\n         for (AbstractConfigValue p : pieces) {\n             // to concat into a string we have to do a full resolve,\n             // so unrestrict the context\n-            AbstractConfigValue r = context.unrestricted().resolve(p);\n+            AbstractConfigValue r = context.unrestricted().resolve(p, sourceWithParent);\n             if (ConfigImpl.traceSubstitutionsEnabled())\n                 ConfigImpl.trace(context.depth(), \"resolved concat piece to \" + r);\n             if (r == null) {\n@@ -215,6 +220,20 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab\n         return ResolveStatus.UNRESOLVED;\n     }\n \n+    @Override\n+    public ConfigConcatenation replaceChild(AbstractConfigValue child, AbstractConfigValue replacement) {\n+        List<AbstractConfigValue> newPieces = replaceChildInList(pieces, child, replacement);\n+        if (newPieces == null)\n+            return null;\n+        else\n+            return new ConfigConcatenation(origin(), newPieces);\n+    }\n+\n+    @Override\n+    public boolean hasDescendant(AbstractConfigValue descendant) {\n+        return hasDescendantInList(pieces, descendant);\n+    }\n+\n     // when you graft a substitution into another object,\n     // you have to prefix it with the location in that object\n     // where you grafted it; but save prefixLength so\ndiff --git a/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java b/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java\nindex 206f18b..32a8ea6 100644\n--- a/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java\n+++ b/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java\n@@ -54,20 +54,19 @@ final class ConfigDelayedMerge extends AbstractConfigValue implements Unmergeabl\n     }\n \n     @Override\n-    AbstractConfigValue resolveSubstitutions(ResolveContext context)\n+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source)\n             throws NotPossibleToResolve {\n-        return resolveSubstitutions(this, stack, context);\n+        return resolveSubstitutions(this, stack, context, source);\n     }\n \n     // static method also used by ConfigDelayedMergeObject\n-    static AbstractConfigValue resolveSubstitutions(ReplaceableMergeStack replaceable,\n-            List<AbstractConfigValue> stack, ResolveContext context) throws NotPossibleToResolve {\n+    static AbstractConfigValue resolveSubstitutions(ReplaceableMergeStack replaceable, List<AbstractConfigValue> stack,\n+            ResolveContext context, ResolveSource source) throws NotPossibleToResolve {\n         if (ConfigImpl.traceSubstitutionsEnabled()) {\n-            int indent = context.depth() + 2;\n-            ConfigImpl.trace(indent - 1, \"delayed merge stack has \" + stack.size() + \" items:\");\n+            ConfigImpl.trace(context.depth(), \"delayed merge stack has \" + stack.size() + \" items:\");\n             int count = 0;\n             for (AbstractConfigValue v : stack) {\n-                ConfigImpl.trace(indent, count + \": \" + v);\n+                ConfigImpl.trace(context.depth() + 1, count + \": \" + v);\n                 count += 1;\n             }\n         }\n@@ -75,91 +74,93 @@ final class ConfigDelayedMerge extends AbstractConfigValue implements Unmergeabl\n         // to resolve substitutions, we need to recursively resolve\n         // the stack of stuff to merge, and merge the stack so\n         // we won't be a delayed merge anymore. If restrictToChildOrNull\n-        // is non-null, we may remain a delayed merge though.\n+        // is non-null, or resolve options allow partial resolves,\n+        // we may remain a delayed merge though.\n \n         int count = 0;\n         AbstractConfigValue merged = null;\n-        for (AbstractConfigValue v : stack) {\n-            if (v instanceof ReplaceableMergeStack)\n-                throw new ConfigException.BugOrBroken(\n-                        \"A delayed merge should not contain another one: \" + replaceable);\n-\n-            boolean replaced = false;\n-            // we only replace if we have a substitution, or\n-            // value-concatenation containing one. The Unmergeable\n-            // here isn't a delayed merge stack since we can't contain\n-            // another stack (see assertion above).\n-            if (v instanceof Unmergeable) {\n-                // If, while resolving 'v' we come back to the same\n-                // merge stack, we only want to look _below_ 'v'\n+        for (AbstractConfigValue end : stack) {\n+            // the end value may or may not be resolved already\n+\n+            ResolveSource sourceForEnd;\n+\n+            if (end instanceof ReplaceableMergeStack)\n+                throw new ConfigException.BugOrBroken(\"A delayed merge should not contain another one: \" + replaceable);\n+            else if (end instanceof Unmergeable) {\n+                // the remainder could be any kind of value, including another\n+                // ConfigDelayedMerge\n+                AbstractConfigValue remainder = replaceable.makeReplacement(context, count + 1);\n+\n+                if (ConfigImpl.traceSubstitutionsEnabled())\n+                    ConfigImpl.trace(context.depth(), \"remainder portion: \" + remainder);\n+\n+                // If, while resolving 'end' we come back to the same\n+                // merge stack, we only want to look _below_ 'end'\n                 // in the stack. So we arrange to replace the\n                 // ConfigDelayedMerge with a value that is only\n                 // the remainder of the stack below this one.\n \n                 if (ConfigImpl.traceSubstitutionsEnabled())\n-                    ConfigImpl.trace(context.depth() + 1, \"because item \" + count\n-                            + \" in this stack is unresolved, resolving it can only look at remaining \"\n-                            + (stack.size() - count - 1) + \" items\");\n-                context.source().replace((AbstractConfigValue) replaceable,\n-                        replaceable.makeReplacer(count + 1));\n-                replaced = true;\n-            }\n+                    ConfigImpl.trace(context.depth(), \"building sourceForEnd\");\n \n-            AbstractConfigValue resolved;\n-            try {\n+                // we resetParents() here because we'll be resolving \"end\"\n+                // against a root which does NOT contain \"end\"\n+                sourceForEnd = source.replaceWithinCurrentParent((AbstractConfigValue) replaceable, remainder);\n+\n+                if (ConfigImpl.traceSubstitutionsEnabled())\n+                    ConfigImpl.trace(context.depth(), \"  sourceForEnd before reset parents but after replace: \"\n+                            + sourceForEnd);\n+\n+                sourceForEnd = sourceForEnd.resetParents();\n+            } else {\n                 if (ConfigImpl.traceSubstitutionsEnabled())\n-                    ConfigImpl.trace(context.depth() + 1, \"resolving item \" + count + \" in merge stack of \"\n-                            + stack.size());\n-                resolved = context.resolve(v);\n-            } finally {\n-                if (replaced)\n-                    context.source().unreplace((AbstractConfigValue) replaceable);\n+                    ConfigImpl\n+                            .trace(context.depth(), \"will resolve end against the original source with parent pushed\");\n+\n+                sourceForEnd = source.pushParent(replaceable);\n             }\n \n-            if (resolved != null) {\n+            if (ConfigImpl.traceSubstitutionsEnabled()) {\n+                ConfigImpl.trace(context.depth(), \"sourceForEnd      =\" + sourceForEnd);\n+            }\n+\n+            if (ConfigImpl.traceSubstitutionsEnabled())\n+  ",
    "Migrate Maven Archetypes to new build system": "diff --git a/parent/pom.xml b/parent/pom.xml\nindex b1698018b0e..b6dde191ff0 100644\n--- a/parent/pom.xml\n+++ b/parent/pom.xml\n@@ -396,6 +396,7 @@\n     <maven-resources-plugin-version>2.7</maven-resources-plugin-version>\n     <maven-reporting-api-version>2.2.1</maven-reporting-api-version>\n     <maven-reporting-impl-version>2.0.5</maven-reporting-impl-version>\n+    <maven-scr-plugin-version>1.19.0</maven-scr-plugin-version>\n     <maven-shade-plugin-version>2.4.1</maven-shade-plugin-version>\n     <maven-surefire-report-plugin-version>2.13</maven-surefire-report-plugin-version>\n     <maven-war-plugin-version>2.6</maven-war-plugin-version>\ndiff --git a/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml b/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml\nindex b926d12b3a0..9dfd796b910 100644\n--- a/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml\n+++ b/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml\n@@ -25,20 +25,17 @@\n         <requiredProperty key=\"camel-version\">\n           <defaultValue>${project.version}</defaultValue>\n         </requiredProperty>\n-        <requiredProperty key=\"commons-lang-version\">\n-          <defaultValue>2.6</defaultValue>\n-        </requiredProperty>\n-        <requiredProperty key=\"slf4j-version\">\n-          <defaultValue>${slf4j-version}</defaultValue>\n-        </requiredProperty>\n         <requiredProperty key=\"log4j-version\">\n           <defaultValue>${log4j-version}</defaultValue>\n         </requiredProperty>\n-        <requiredProperty key=\"maven-scm-provider-gitexe-version\">\n-          <defaultValue>1.9</defaultValue>\n-        </requiredProperty>\n         <requiredProperty key=\"maven-bundle-plugin-version\">\n-          <defaultValue>${maven-bundle-version}</defaultValue>\n+          <defaultValue>${maven-bundle-plugin-version}</defaultValue>\n+        </requiredProperty>\n+        <requiredProperty key=\"maven-scr-plugin-version\">\n+          <defaultValue>${maven-scr-plugin-version}</defaultValue>\n+        </requiredProperty>\n+        <requiredProperty key=\"maven-jar-plugin-version\">\n+          <defaultValue>${maven-jar-plugin-version}</defaultValue>\n         </requiredProperty>\n         <requiredProperty key=\"maven-compiler-plugin-version\">\n           <defaultValue>${maven-compiler-plugin-version}</defaultValue>\n@@ -46,20 +43,8 @@\n         <requiredProperty key=\"maven-resources-plugin-version\">\n           <defaultValue>${maven-resources-plugin-version}</defaultValue>\n         </requiredProperty>\n-        <requiredProperty key=\"maven-javadoc-plugin-version\">\n-          <defaultValue>${maven-javadoc-plugin-version}</defaultValue>\n-        </requiredProperty>\n-        <requiredProperty key=\"maven-source-plugin-version\">\n-          <defaultValue>2.3</defaultValue>\n-        </requiredProperty>\n-        <requiredProperty key=\"maven-release-plugin-version\">\n-          <defaultValue>2.5</defaultValue>\n-        </requiredProperty>\n-        <requiredProperty key=\"versions-maven-plugin-version\">\n-          <defaultValue>2.1</defaultValue>\n-        </requiredProperty>\n-        <requiredProperty key=\"maven-scr-plugin-version\">\n-          <defaultValue>1.19.0</defaultValue>\n+        <requiredProperty key=\"slf4j-version\">\n+          <defaultValue>${slf4j-version}</defaultValue>\n         </requiredProperty>\n     </requiredProperties>\n     <fileSets>\ndiff --git a/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml b/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml\nindex bea2cf2a564..3a1f799f268 100644\n--- a/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml\n+++ b/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml\n@@ -1,20 +1,20 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    ## ------------------------------------------------------------------------\n-    ## Licensed to the Apache Software Foundation (ASF) under one or more\n-    ## contributor license agreements.  See the NOTICE file distributed with\n-    ## this work for additional information regarding copyright ownership.\n-    ## The ASF licenses this file to You under the Apache License, Version 2.0\n-    ## (the \"License\"); you may not use this file except in compliance with\n-    ## the License.  You may obtain a copy of the License at\n-    ##\n-    ## http://www.apache.org/licenses/LICENSE-2.0\n-    ##\n-    ## Unless required by applicable law or agreed to in writing, software\n-    ## distributed under the License is distributed on an \"AS IS\" BASIS,\n-    ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-    ## See the License for the specific language governing permissions and\n-    ## limitations under the License.\n-    ## ------------------------------------------------------------------------\n+## ------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ------------------------------------------------------------------------\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n \n@@ -22,51 +22,61 @@\n \n   <groupId>${groupId}</groupId>\n   <artifactId>${artifactId}</artifactId>\n-  <packaging>jar</packaging>\n   <version>${version}</version>\n+  <packaging>jar</packaging>\n \n-  <name>Camel SCR route</name>\n+  <name>A Camel SCR Route</name>\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+\n+    <camel-version>${camel-version}</camel-version>\n+\n+    <slf4j-version>${slf4j-version}</slf4j-version>\n+    <log4j-version>${log4j-version}</log4j-version>\n   </properties>\n \n   <dependencies>\n+\n+    <!-- Camel -->\n     <dependency>\n       <groupId>org.apache.camel</groupId>\n       <artifactId>camel-core</artifactId>\n-      <version>${camel-version}</version>\n+      <version>\\${camel-version}</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.camel</groupId>\n       <artifactId>camel-scr</artifactId>\n-      <version>${camel-version}</version>\n+      <version>\\${camel-version}</version>\n     </dependency>\n \n-    <!-- logging -->\n+    <!-- Testing -->\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-test</artifactId>\n+      <version>\\${camel-version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-api</artifactId>\n-      <version>${slf4j-version}</version>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>\\${slf4j-version}</version>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>log4j</groupId>\n       <artifactId>log4j</artifactId>\n-      <version>${log4j-version}</version>\n-    </dependency>\n-\n-    <!-- testing -->\n-    <dependency>\n-      <groupId>org.apache.camel</groupId>\n-      <artifactId>camel-test</artifactId>\n-      <version>${camel-version}</version>\n+      <version>\\${log4j-version}</version>\n       <scope>test</scope>\n     </dependency>\n+\n   </dependencies>\n \n   <build>\n     <plugins>\n+\n+      <!-- compiler plugin -->\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n@@ -85,6 +95,7 @@\n         </configuration>\n       </plugin>\n \n+      <!-- to include SRC descriptors in MANIFEST.MF file -->\n       <plugin>\n         <groupId>org.apache.felix</groupId>\n         <artifactId>maven-scr-plugin</artifactId>\n@@ -99,28 +110,31 @@\n           </execution>\n         </executions>\n       </plugin>\n-\n-      <!-- to generate the MANIFEST-FILE of the bundle -->\n+      <!-- to generate the MANIFEST.MF of the bundle -->\n       <plugin>\n         <groupId>org.apache.felix</groupId>\n         <artifactId>maven-bundle-plugin</artifactId>\n         <version>${maven-bundle-plugin-version}</version>\n-        <extensions>true</extensions>\n+        <extensions>false</extensions>\n         <executions>\n           <execution>\n             <id>bundle-manifest</id>\n-            <phase>process-classes</phase>\n+            <phase>prepare-package</phase>\n             <goals>\n               <goal>manifest</goal>\n             </goals>\n           </execution>\n         </executions>\n+      </plugin>\n+      <!-- to include MANIFEST.MF in the bundle -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <version>${maven-jar-plugin-version}</version>\n         <configuration>\n-          <instructions>\n-            <Bundle-SymbolicName>${artifactId}</Bundle-SymbolicName>\n-            <Private-Package>${package}.*</Private-Package>\n-            <Import-Package>*</Import-Package>\n-          </instructions>\n+          <archive>\n+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+          </archive>\n         </configuration>\n       </plugin>\n \ndiff --git a/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties b/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties\nindex 9fc70a06a47..aba6b05bd3c 100644\n--- a/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties\n+++ b/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties\n@@ -20,15 +20,10 @@ version = 1.0-SNAPSHOT\n package = example\n className = CamelScrExample\n camel-version = ${project.version}\n-commons-lang-version = 2.6\n log4j-version = ${log4j-version}\n+maven-bundle-plugin-version = ${maven-bundle-plugin-version}\n maven-compiler-plugin-version = ${maven-compiler-plugin-version}\n+maven-jar-plugin-version = ${maven-jar-plugin-version}\n maven-resources-plugin-version = ${maven-resources-plugin-version}\n-maven-javadoc-plugin-version = ${maven-javadoc-plugin-version}\n-maven-source-plugin-version = 2.3\n-maven-release-plugin-version = 2.5\n-maven-scm-provider-gitexe-version = 1.9\n-versions-maven-plugin-version = 2.1\n-maven-scr-plugin-version = 1.19.0\n-maven-bundle-plugin-version = ${maven-bundle-version}\n+maven-scr-plugin-version = ${maven-scr-plugin-version}\n slf4j-version = ${slf4j-version}",
    "bumped version 1 . 0alpha2": "diff --git a/AndroidManifest.xml b/AndroidManifest.xml\nindex b476e43a5f..15a82583ba 100644\n--- a/AndroidManifest.xml\n+++ b/AndroidManifest.xml\n@@ -20,7 +20,7 @@\n -->\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n \tpackage=\"com.ichi2.anki\"\n-\tandroid:versionName=\"1.0alpha1\"\n+\tandroid:versionName=\"1.0alpha2\"\n \tandroid:versionCode=\"22\"\n \tandroid:installLocation=\"auto\">\n \t<application android:label=\"@string/app_name\" android:icon=\"@drawable/anki\" android:name=\"AnkiDroidApp\" android:debuggable=\"true\">"
}
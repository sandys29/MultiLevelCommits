diff,Human Written,Model 1,Model 2,Model 3,Model 4,Choice
"diff --git a/camel-core/src/main/docs/string-dataformat.adoc b/camel-core/src/main/docs/string-dataformat.adoc
new file mode 100644
index 00000000000..2ccf0c835ca
--- /dev/null
+++ b/camel-core/src/main/docs/string-dataformat.adoc
@@ -0,0 +1,56 @@
+[[String-Dataformat]]
+String Dataformat
+~~~~~~~~~~~~~~~~~
+
+The String link:data-format.html[Data Format] is a textual based format
+that supports encoding.
+
+[[String-Options]]
+Options
+^^^^^^^
+
+// dataformat options: START
+The String Encoding dataformat supports 1 options which are listed below.
+
+
+
+{% raw %}
+[width=""100%"",cols=""2s,1m,1m,6"",options=""header""]
+|=======================================================================
+| Name | Default | Java Type | Description
+| charset |  | String | Sets an encoding to use. Will by default use the JVM platform default charset.
+|=======================================================================
+{% endraw %}
+// dataformat options: END
+
+[[String-Marshal]]
+Marshal
+^^^^^^^
+
+In this example we marshal the file content to String object in UTF-8
+encoding.
+
+[source,java]
+----------------------------------------------------------------------
+from(""file://data.csv"").marshal().string(""UTF-8"").to(""jms://myqueue"");
+----------------------------------------------------------------------
+
+[[String-Unmarshal]]
+Unmarshal
+^^^^^^^^^
+
+In this example we unmarshal the payload from the JMS queue to a String
+object using UTF-8 encoding, before its processed by the newOrder
+processor.
+
+[source,java]
+-----------------------------------------------------------------------------
+from(""jms://queue/order"").unmarshal().string(""UTF-8"").processRef(""newOrder"");
+-----------------------------------------------------------------------------
+
+[[String-Dependencies]]
+Dependencies
+^^^^^^^^^^^^
+
+This data format is provided in *camel-core* so no additional
+dependencies is needed.",Added String dataformat docs to Gitbook,"""Added documentation for String Data Format in camel-core""",Added String Data Format documentation to camel-core.,"It seems like you've added a new file for the documentation of the String Dataformat in Apache Camel. This file includes sections for the options, marshal, unmarshal, and dependencies of the String Dataformat.

The options section lists the 'charset' option with its Java type and description. The marshal and unmarshal sections provide examples of how to use the String Dataformat in Apache Camel routes. The dependencies section explains that this data format is provided in camel-core, so no additional dependencies are needed.

As for the commit message, it could be something like: ""Add documentation for String Dataformat in Apache Camel"". However, without seeing the actual changes in the code, it's hard to provide a more specific commit message. The commit message should briefly describe the changes made in the code.","""Add documentation for String Data Format including options, marshal, unmarshal examples, and dependencies.""",Model 1
"diff --git a/.test-infra/jenkins/job_Inventory.groovy b/.test-infra/jenkins/job_Inventory.groovy
index 32e0645cfd..fec1ba24ce 100644
--- a/.test-infra/jenkins/job_Inventory.groovy
+++ b/.test-infra/jenkins/job_Inventory.groovy
@@ -35,7 +35,7 @@ nums.each {
     // Allows triggering this build against pull requests.
     commonJobProperties.enablePhraseTriggeringFromPullRequest(
       delegate,
-      'Machine Inventory',
+      ""Machine Inventory ${machine}"",
       ""Run Inventory ${machine}"")
 
     parameters {
@@ -66,6 +66,7 @@ nums.each {
       shell('virtualenv -p python3.7 test37 && . ./test37/bin/activate && python --version && deactivate || echo ""python 3.7 not found""')
       shell('echo ""Maven home $MAVEN_HOME""')
       shell('env')
+      shell('docker system prune --all --filter until=24h --force')
     }
   }
 }",Add docker system prune to inventory job .,"""Update Jenkins job to include machine name in trigger phrase and add docker system prune command""","""Added machine-specific inventory build triggers and cleaned up Docker system""

However, a more conventional commit message would be:

""Add machine-specific inventory build triggers and cleanup""

This is because commit messages should be concise and in the imperative mood (i.e., ""Add"" instead of ""Added"").","""Added machine name to Inventory job trigger phrase and prune Docker system in job_Inventory.groovy""

This commit message reflects the two changes made in the provided diff:

1. The phrase triggering the Inventory job has been updated to include the machine name.
2. A new shell command has been added to prune the Docker system in the job script.","""Update Jenkins job to enable machine-specific triggers and add Docker cleanup step""",Model 4
"diff --git a/changelog.html b/changelog.html
index f209df8e4d..60b7e19c11 100644
--- a/changelog.html
+++ b/changelog.html
@@ -54,6 +54,14 @@ Upcoming changes</a>
 
 <!-- Record your changes in the trunk here. -->
 <div id=""trunk"" style=""display:none""><!--=TRUNK-BEGIN=-->
+<ul class=image>
+  <li class=>
+</ul>
+</div><!--=TRUNK-END=-->
+
+<!-- these changes are controlled by the release process. DO NOT MODIFY -->
+<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
+<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
 <ul class=image>
   <li class=bug>
     Spurious warnings in the log after deleting builds.
@@ -66,12 +74,6 @@ Upcoming changes</a>
     (<a href=""https://issues.jenkins-ci.org/browse/JENKINS-25499"">issue 25499</a>,
      <a href=""https://issues.jenkins-ci.org/browse/JENKINS-25498"">issue 25498</a>)
 </ul>
-</div><!--=TRUNK-END=-->
-
-<!-- these changes are controlled by the release process. DO NOT MODIFY -->
-<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
-<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
-<!--=RC-CHANGES=-->
 </div><!--=END=-->
 <h3><a name=v1.594>What's new in 1.594</a> (2014/12/14)</h3>
 <ul class=image>",creating an RC branch,"""Update changelog for 1.595 release""","""Added new release notes for version 1.595 and updated the changelog.""","It seems like you're working with a git diff and you're looking for a commit message. However, you didn't provide the actual changes that were made in the code, so I can't generate a commit message for you.

A good commit message usually includes a short summary of the changes, what issue they address (if any), and any relevant details. For example, based on the context you provided, a commit message might look something like this:

""Update changelog.html: Added new section for upcoming changes in the trunk and made formatting adjustments for the release process. DO NOT MODIFY release process comments.""

Please provide the actual code changes if you need a more specific commit message.",Fixed misplaced HTML div markers and added new sections for trunk and release changes.,Model 2
"diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
index a8c5f901f1f..36a6200ec0b 100644
--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java
+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
@@ -74,13 +74,6 @@ public class MasterUtil
     
     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )
     {
-        if ( Config.osIsWindows() )
-        {
-            throw new UnsupportedOperationException(
-                ""Streaming store files live (as used in HA and backup) ""
-                    + ""isn't supported on Windows due to limitations in OS/filesystem"" );
-        }
-
         File baseDir = getBaseDir( graphDb );
         XaDataSourceManager dsManager =
                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
index 7d55c553e4d..cb4acdf5391 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
@@ -91,7 +91,6 @@ public class TestBackup
     @Test
     public void fullThenIncremental() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
         OnlineBackup backup = OnlineBackup.from( ""localhost"" );
@@ -109,7 +108,6 @@ public class TestBackup
     @Test
     public void makeSureStoreIdIsEnforced() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         // Create data set X on server A
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
index 4ee63dbf284..d067458ef8e 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.neo4j.graphdb.GraphDatabaseService;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class TestConfiguration
@@ -85,7 +84,6 @@ public class TestConfiguration
     @Test
     public void testEnableDefaultsInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         GraphDatabaseService db = newDb( ""true"" );
         OnlineBackup.from( ""localhost"" ).full( BACKUP_DIR );
         db.shutdown();
@@ -94,7 +92,6 @@ public class TestConfiguration
     @Test
     public void testEnableCustomPortInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int customPort = 12345;
         GraphDatabaseService db = newDb( ""port="" + customPort );
         try
diff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java
index 969983f97df..f3cc6d9055e 100644
--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java
+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java
@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;
 import org.neo4j.graphdb.RelationshipType;
 import org.neo4j.helpers.collection.IteratorUtil;
 import org.neo4j.helpers.collection.MapUtil;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.ha.Broker;
 import org.neo4j.kernel.ha.BrokerFactory;
 
@@ -393,7 +392,6 @@ public abstract class AbstractHaTest
     @Test
     public void slaveCreateNode() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 2, 2, 0, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );
@@ -402,7 +400,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMultipleSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 3 );
         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );
@@ -415,7 +412,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterFailure() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(
                 getMasterShutdownDispatcher() ), 0 );
@@ -429,7 +425,6 @@ public abstract class AbstractHaTest
     @Test
     public void testSlaveConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -443,7 +438,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -458,7 +452,6 @@ public abstract class AbstractHaTest
     @Test
     public void testGetRelationships() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -475,7 +468,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNoTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -488,7 +480,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNodeDeleted() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 1, 0, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -503,7 +494,6 @@ public abstract class AbstractHaTest
     @Test
     public void testDeadlock() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
 
         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );
@@ -526,7 +516,6 @@ public abstract class AbstractHaTest
     @Test
     public void createNodeAndIndex() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 1, 0, 1, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Neo"" ), 0 );
@@ -535,7 +524,6 @@ public abstract class AbstractHaTest
     @Test
     public void indexingAndTwoSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Morpheus"" ) );
         pullUpdates();
@@ -548,7 +536,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNewIndexFramework() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 2, 0, 0, 2 );
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( ""users"",
@@ -559,7 +546,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );
     }
@@ -567,7 +553,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );
         pullUpdates();
@@ -576,7 +561,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );
     }
@@ -584,7 +568,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );
         pullUpdates();
@@ -593,7 +576,6 @@ public abstract class AbstractHaTest
     @Test
     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         startUpMaster( MapUtil.stringMap() );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );
         addDb( MapUtil.stringMap() );
@@ -604,7 +586,6 @@ public abstract class AbstractHaTest
     @Test
     public void canCopyInitialDbWithLuceneIndexes() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int additionalNodeCount = 50;
         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );
         startUpMaster( MapUtil.stringMap() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java
index dec1cc8f691..06d100dbc64 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java
@@ -29,7 +29,6 @@ import java.util.Map;
 import org.junit.After;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class MultiJvmTest extends AbstractHaTest
@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest
     @After
     public void shutdownDbsAndVerify() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         shutdownDbs();
 
         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
index b9806cdc7ee..018208324b9 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
@@ -28,7 +28,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.neo4j.ha.LocalhostZooKeeperCluster;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 
 public class MultiJvmWithZooKeeperTest extends MultiJvmTest
 {
@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @Before
     public void startZooKeeperCluster() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );
         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );
     }
@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @After
     public void shutdownZooKeeperCluster()
     {
-        if ( Config.osIsWindows() ) return;
         zooKeeperCluster.shutdown();
     }
 }
diff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java
index 544c2db3373..b5eb6dead4e 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java
@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest
     @After
     public void verifyAndShutdownDbs()
     {
-        if ( Config.osIsWindows() ) return;
         try
         {
             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );
@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest
     @Test
     public void testMixingEntitiesFromWrongDbs() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
-
         initializeDbs( 1 );
         GraphDatabaseService haDb1 = haDbs.get( 0 );
         GraphDatabaseService mDb = master.getGraphDb();
diff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
index 61184920a50..e48248e2cf2 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
@@ -25,7 +25,6 @@ import org.junit.Test;
 import org.neo4j.com.Protocol;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.helpers.Pair;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.HighlyAvailableGraphDatabase;
 import org.neo4j.kernel.ha.AbstractBroker;
 import org.neo4j.kernel.ha.Broker;
@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest
     @Test
     public void assertThatNettyIsUsed() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         assertTrue(
                 ""Slave Broker is not a client"",
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
index 550752cf419..7b6805b6b49 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;
 import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;
 import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;
 import org.neo4j.kernel.impl.core.RelationshipTypeCreator;
+import org.neo4j.kernel.impl.nioneo.store.FileLock;
 import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;
 import org.neo4j.kernel.impl.nioneo.store.IdGenerator;
 import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;
@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxFinishHook;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;
 
@@ -139,6 +142,17 @@ public class CommonFactories
             {
                 return new RandomAccessFile( fileName, mode ).getChannel();
             }
+            
+            @Override
+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException
+            {
+                return FileLock.getOsSpecificFileLock( fileName, channel );
+            }
         };
     }
+    
+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )
+    {
+        return DefaultLogBufferFactory.create( config );
+    }
 }
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
index 5f18875c8d9..abf36792d62 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;
 import org.neo4j.kernel.impl.persistence.PersistenceModule;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 
 /**
@@ -111,7 +112,8 @@ public class Config
             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,
             TxEventSyncHookFactory txSyncHookFactory,
             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,
-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )
+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,
+            LogBufferFactory logBufferFactory )
     {
         this.storeDir = storeDir;
         this.inputParams = inputParams;
@@ -129,6 +131,7 @@ public class Config
         this.syncHookFactory = txSyncHookFactory;
         this.persistenceModule = new PersistenceModule();
         this.cacheManager = new AdaptiveCacheManager();
+        params.put( LogBufferFactory.class, logBufferFactory );
         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,
                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),
                 readOnly );
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
index e48d8343e80..7c6e974f46d 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl
         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,
                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,
                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),
-                lastCommittedTxIdSetter, fileSystem );
+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );
         graphDbInstance = new GraphDbInstance( storeDir, true, config );
         this.msgLog = StringLogger.getLogger( storeDir );
         this.graphDbService = graphDbService;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
index 53e62b027d7..1ad4282b7b5 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
@@ -23,7 +23,6 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
 import java.nio.channels.OverlappingFileLockException;
 import java.util.Map;
 import java.util.logging.Logger;
@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore
         {
             if ( (!readOnly || backupSlave) && grabFileLock )
             {
-                this.fileLock = this.fileChannel.tryLock();
+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );
                 if ( fileLock == null )
                 {
                     throw new IllegalStateException( ""Unable to lock store [""
@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore
                     fileChannel.write( buffer );
                     fileChannel.truncate( fileChannel.position() );
                     fileChannel.force( false );
-                    fileLock.release();
+                    if ( fileLock != null )
+                    {
+                        fileLock.release();
+                    }
                     fileChannel.close();
                     fileChannel = null;
                     success = true;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
new file mode 100644
index 00000000000..62f3ef72bb7
--- /dev/null
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright (c) 2002-2011 ""Neo Technology,""
+ * Network Engine for Objects in Lund AB [http://neotechnology.com]
+ *
+ * This file is part of Neo4j.
+ *
+ * Neo4j is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.neo4j.kernel.impl.nioneo.store;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
+import java.nio.channels.OverlappingFileLockException;
+
+import org.neo4j.kernel.Config;
+
+public abstract class FileLock
+{
+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )
+    {
+        if ( lock == null )
+        {
+            return null;
+        }
+        
+        return new FileLock()
+        {
+            @Override
+            public void release() throws IOException
+            {
+                lock.release();
+            }
+        };
+    }
+    
+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )
+            throws IOException
+    {
+        if ( Config.osIsWindows() )
+        {
+            // Only grab one lock, say for the ""neostore"" file
+            if ( fileName.endsWith( ""neostore"" ) )
+            {
+                return getWindowsFileLock( new File( fileName ).getParentFile() );
+            }
+            
+            // For the rest just return placebo locks
+            return new PlaceboFileLock();
+        }
+        else
+        {
+            return wrapOrNull( channel.tryLock() );
+        }
+    }
+    
+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException
+    {
+        File lockFile = new File( storeDir, ""lock"" );
+        if ( !lockFile.exists() )
+        {
+            if ( !lockFile.createNewFile() )
+            {
+                throw new IOException( ""Couldn't create lock file "" + lockFile.getAbsolutePath() );
+            }
+        }
+        FileChannel fileChannel = new RandomAccessFile( lockFile, ""rw"" ).getChannel();
+        java.nio.channels.FileLock fileChannelLock = null;
+        try
+        {
+            fileChannelLock = fileChannel.tryLock(); 
+        }
+        catch ( OverlappingFileLockException e )
+        {
+            // OK, let fileChannelLock continue to be null and we'll deal with it below
+        }
+        if ( fileChannelLock == null )
+        {
+            fileChannel.close();
+            return null;
+        }
+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );
+    }
+
+    public abstract void release() throws IOException;
+    
+    private static class PlaceboFileLock extends FileLock
+    {
+        @Override
+        public void release() throws IOException
+        {
+        }
+    }
+    
+    private static class WindowsFileLock extends FileLock
+    {
+        private final File lockFile;
+        private final FileChannel fileChannel;
+        private final java.nio.channels.FileLock fileChannelLock;
+
+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )
+                throws IOException
+        {
+            this.lockFile = lockFile;
+            this.fileChannel = fileChannel;
+            this.fileChannelLock",Added support for backup and HA for Windows by adding a separate file locking method and made DirectMappedLogBuffer HA friendly,"""Remove Windows-specific limitations and unsupported features""","""Remove Windows-specific checks and implement file locking on Windows""

This commit message accurately reflects the changes made in the code, which include removing checks for Windows-specific conditions and implementing file locking on Windows.","""Removed Windows-specific code and checks in MasterUtil, TestBackup, TestConfiguration, AbstractHaTest, MultiJvmTest, MultiJvmWithZooKeeperTest, SingleJvmTest, SingleJvmWithNettyTest, CommonFactories, Config, EmbeddedGraphDbImpl, CommonAbstractStore, and added FileLock class in org.neo4j.kernel.impl.nioneo.store package.""",Removed Windows-specific checks and updated file locking mechanism to support OS-agnostic implementation in Neo4j kernel.,Model 3
"diff --git a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
index fa7cacc..9ab237f 100644
--- a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
+++ b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
@@ -28,13 +28,8 @@ import net.wequick.small.webkit.WebActivity;
 import net.wequick.small.webkit.WebViewPool;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Properties;
 
 /**
  * Created by galen on 15/1/28.",Remove unused import,"""Remove unused imports in WebBundleLauncher.java""","Remove unused imports and methods from WebBundleLauncher.java

This commit message is concise and accurately describes the changes made in the commit. It mentions the removal of unused imports and methods, which is in line with the changes shown in the diff.","""Removed unused imports and code related to FileInputStream, FileWriter, PrintWriter, IOException, and Properties in WebBundleLauncher.java""","""Remove unused imports from WebBundleLauncher.java""",Model 4
"diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
index 7ec87b722..d912d12c1 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
@@ -15,6 +15,7 @@ public class MetadataClient extends ClientBase {
 
     public MetadataClient(String address, int port) {
         super(address, port);
+        this.stub = MetadataServiceGrpc.newBlockingStub(this.channel);
     }
 
     /**
diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
index b9b155cd7..d9b170704 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
@@ -1,6 +1,8 @@
 package com.netflix.conductor.client.grpc;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
 import com.netflix.conductor.common.metadata.tasks.Task;
 import com.netflix.conductor.common.metadata.tasks.TaskExecLog;
 import com.netflix.conductor.common.metadata.tasks.TaskResult;
@@ -9,8 +11,7 @@ import com.netflix.conductor.grpc.TaskServicePb;
 import com.netflix.conductor.proto.TaskPb;
 import org.apache.commons.lang3.StringUtils;
 
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class TaskClient extends ClientBase {
@@ -44,6 +45,46 @@ public class TaskClient extends ClientBase {
         return protoMapper.fromProto(task);
     }
 
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return List of tasks awaiting to be executed.
+     */
+    public List<Task> batchPollTasksByTaskType(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        return Lists.newArrayList(batchPollTasksByTaskTypeAsync(taskType, workerId, count, timeoutInMillisecond));
+    }
+
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     * Returns an iterator that streams tasks as they become available through GRPC.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return Iterator of tasks awaiting to be executed.
+     */
+    public Iterator<Task> batchPollTasksByTaskTypeAsync(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), ""Task type cannot be blank"");
+        Preconditions.checkArgument(StringUtils.isNotBlank(workerId), ""Worker id cannot be blank"");
+        Preconditions.checkArgument(count > 0, ""Count must be greater than 0"");
+
+        Iterator<TaskPb.Task> it = stub.batchPoll(
+                TaskServicePb.BatchPollRequest.newBuilder()
+                        .setTaskType(taskType)
+                        .setWorkerId(workerId)
+                        .setCount(count)
+                        .setTimeout(timeoutInMillisecond)
+                        .build()
+        );
+
+        return Iterators.transform(it, protoMapper::fromProto);
+    }
+
     /**
      * Retrieve pending tasks by type
      *
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
index 3ae78d3d0..f32e996a1 100644
--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
@@ -35,6 +35,7 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
 
     private static final int MAX_TASK_COUNT = 100;
     private static final int POLL_TIMEOUT_MS = 100;
+    private static final int MAX_POLL_TIMEOUT_MS = 5000;
 
     private final ExecutionService taskService;
     private final QueueDAO queues;
@@ -60,41 +61,24 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
     }
 
     @Override
-    public StreamObserver<TaskServicePb.StreamingPollRequest> pollStream(StreamObserver<TaskPb.Task> observer) {
-        final ServerCallStreamObserver<TaskPb.Task> responseObserver =
-                (ServerCallStreamObserver<TaskPb.Task>) observer;
-
-        return new StreamObserver<TaskServicePb.StreamingPollRequest>() {
-            @Override
-            public void onNext(TaskServicePb.StreamingPollRequest req) {
-                try {
-                    for (TaskResultPb.TaskResult result : req.getCompletedList()) {
-                        TaskResult task = protoMapper.fromProto(result);
-                        taskService.updateTask(task);
-                    }
-
-                    List<Task> newTasks = taskService.poll(
-                            req.getTaskType(), req.getWorkerId(), req.getDomain(),
-                            req.getCapacity(), POLL_TIMEOUT_MS);
-
-                    for (Task task : newTasks) {
-                        responseObserver.onNext(protoMapper.toProto(task));
-                    }
-                } catch (Exception e) {
-                    grpcHelper.onError(observer, e);
-                }
-            }
-
-            @Override
-            public void onError(Throwable t) {
-                responseObserver.onError(t);
-            }
+    public void batchPoll(TaskServicePb.BatchPollRequest req, StreamObserver<TaskPb.Task> response) {
+        final int count = (req.getCount() == 0) ? 1 : req.getCount();
+        final int timeout = (req.getTimeout() == 0) ? POLL_TIMEOUT_MS : req.getTimeout();
+
+        if (timeout > MAX_POLL_TIMEOUT_MS) {
+            response.onError(Status.INVALID_ARGUMENT
+                    .withDescription(""longpoll timeout cannot be longer than "" + MAX_POLL_TIMEOUT_MS + ""ms"")
+                    .asRuntimeException()
+            );
+            return;
+        }
 
-            @Override
-            public void onCompleted() {
-                responseObserver.onCompleted();
-            }
-        };
+        try {
+            List<Task> polledTasks = taskService.poll(req.getTaskType(), req.getWorkerId(), req.getDomain(), count, timeout);
+            polledTasks.stream().map(protoMapper::toProto).forEach(response::onNext);
+        } catch (Exception e) {
+            grpcHelper.onError(response, e);
+        }
     }
 
     @Override
diff --git a/grpc/src/main/proto/grpc/task_service.proto b/grpc/src/main/proto/grpc/task_service.proto
index 1dc98c54a..1caef0e10 100644
--- a/grpc/src/main/proto/grpc/task_service.proto
+++ b/grpc/src/main/proto/grpc/task_service.proto
@@ -14,8 +14,8 @@ service TaskService {
     // GET /poll/{tasktype}
     rpc Poll(PollRequest) returns (conductor.proto.Task);
 
-    // GRPC-only
-    rpc PollStream(stream StreamingPollRequest) returns (stream conductor.proto.Task);
+    // /poll/batch/{tasktype}
+    rpc BatchPoll(BatchPollRequest) returns (stream conductor.proto.Task);
 
     // GET /in_progress/{tasktype}
     rpc GetTasksInProgress(TasksInProgressRequest) returns (TasksInProgressResponse);
@@ -57,12 +57,12 @@ message PollRequest {
     string domain = 3;
 }
 
-message",Implement batchPoll,"""Added batch poll functionality for tasks by task type""","""Added batch poll functionality for tasks by task type and implemented corresponding GRPC service and client changes.""",Added batch polling for tasks by task type in MetadataClient and TaskClient. Also added a new BatchPoll RPC in task\_service.proto and its implementation in TaskServiceImpl. The batch polling allows for a configurable maximum number of tasks to be returned in a single poll request. The maximum long poll wait timeout has been set to 5000ms.,"""Added batch task polling support in TaskClient and TaskServiceImpl with configurable timeouts and limits.""",Model 1
"diff --git a/base/src/com/thoughtworks/go/util/FileDigester.java b/base/src/com/thoughtworks/go/util/FileDigester.java
index a49f6b6d42..c8f2b95650 100644
--- a/base/src/com/thoughtworks/go/util/FileDigester.java
+++ b/base/src/com/thoughtworks/go/util/FileDigester.java
@@ -16,18 +16,15 @@
 
 package com.thoughtworks.go.util;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-
+import org.apache.commons.codec.CharEncoding;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.comparator.NameFileComparator;
 import org.apache.commons.io.output.NullOutputStream;
 
-import static com.thoughtworks.go.util.ExceptionUtils.bomb;
+import java.io.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
 
 public class FileDigester {
     private final InputStream input;
@@ -75,6 +72,19 @@ public class FileDigester {
         }
     }
 
+    public static String md5DigestOfFolderContent(File directory) throws IOException {
+        File[] files = directory.listFiles();
+        Arrays.sort(files, NameFileComparator.NAME_COMPARATOR);
+        StringBuilder md5 = new StringBuilder();
+        for (File file : files) {
+            if (file.isDirectory())
+                md5.append(md5DigestOfFolderContent(file));
+            else
+                md5.append(md5DigestOfFile(file));
+        }
+        return md5DigestOfStream(new ByteArrayInputStream(md5.toString().getBytes(CharEncoding.UTF_8)));
+    }
+
     public static String md5DigestOfStream(InputStream stream) throws IOException {
         return copyAndDigest(stream, new NullOutputStream());
     }
diff --git a/base/test/com/thoughtworks/go/util/FileDigesterTest.java b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
index 62de31eddb..17bd7f4819 100644
--- a/base/test/com/thoughtworks/go/util/FileDigesterTest.java
+++ b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
@@ -16,7 +16,11 @@
 
 package com.thoughtworks.go.util;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,20 +30,45 @@ import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 public class FileDigesterTest {
-    private File createFileWithSampleData() throws IOException {
-        File tempFile = TestFileUtil.createTempFile(""test.txt"");
-        FileUtil.writeContentToFile(""sample data"", tempFile);
-        return tempFile;
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+
+    @Before
+    public void setUp() throws Exception {
+        temporaryFolder.create();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        temporaryFolder.delete();
     }
 
     @Test
     public void shouldReturnSameMd5ForSameData() throws Exception {
-        String digest1 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        File fileWithSampleData = createFileWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        String digest2 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(digest1, is(digest2));
+    }
+
+    @Test
+    public void shouldReturnSameMd5ForFolderContents() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
-        String digest2 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        String digest2 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(digest1, is(digest2));
     }
 
+    @Test
+    public void shouldReturnConsistentMd5BySortingTheFileList() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        assertThat(digest1, is(""FJ9Q0KO4KE5ukH6Y7r1FIQ==""));
+    }
+
     @Test
     public void shouldThrowExceptionIfITryToGetMd5WithoutDigestingFile() {
         FileDigester fileDigester = new FileDigester(null, null);
@@ -49,4 +78,20 @@ public class FileDigesterTest {
         } catch (Exception ignored) {
         }
     }
+
+    private File createFileWithSampleData() throws IOException {
+        File tempFile = temporaryFolder.newFile(""test.txt"");
+        FileUtil.writeContentToFile(""sample data"", tempFile);
+        return tempFile;
+    }
+
+    private File createFolderWithSampleData() throws IOException {
+        File firstPlugin = temporaryFolder.newFile(""first-plugin"");
+        File secondPlugin = temporaryFolder.newFile(""second-plugin"");
+        File thirdPlugin = temporaryFolder.newFile(""third-plugin"");
+        FileUtil.writeContentToFile(""sample plugin for first plugin"", firstPlugin);
+        FileUtil.writeContentToFile(""sample plugin for third plugin"", secondPlugin);
+        FileUtil.writeContentToFile(""sample plugin for second plugin"", thirdPlugin);
+        return temporaryFolder.getRoot();
+    }
 }
diff --git a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
index c19ceae5b6..7975597a5d 100644
--- a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
+++ b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
@@ -22,16 +22,18 @@ import com.thoughtworks.go.util.ZipUtil;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.IOException;
+import java.io.FileWriter;
 
 import static com.thoughtworks.go.util.FileDigester.md5DigestOfFile;
+import static com.thoughtworks.go.util.FileDigester.md5DigestOfFolderContent;
 
 @Component
 public class PluginsZip {
     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PluginsZip.class);
     private ZipUtil zipUtil;
-    private String md5DigestOfFile;
+    private String md5DigestOfPlugins;
     private final File destZipFile;
     private final File bundledPlugins;
     private final File externalPlugins;
@@ -53,16 +55,30 @@ public class PluginsZip {
         try {
             ZipBuilder zipBuilder = zipUtil.zipContentsOfMultipleFolders(destZipFile, true);
             zipBuilder.add(""bundled"", bundledPlugins).add(""external"", externalPlugins).done();
-            md5DigestOfFile = md5DigestOfFile(destZipFile);
+            md5DigestOfPlugins = computeMd5DigestOfPlugins();
         } catch (Exception e) {
             LOG.error(""Could not create zip of plugins for agent to download."", e);
         }
     }
 
-    public String md5() throws IOException {
-        if (md5DigestOfFile == null) {
-            return md5DigestOfFile(destZipFile);
+    public String md5() {
+        if (md5DigestOfPlugins == null) {
+            return computeMd5DigestOfPlugins();
+        }
+        return md5DigestOfPlugins;
+    }
+
+    private String computeMd5DigestOfPlugins() {
+        try {
+            String digestOfBundledFolder = md5DigestOfFolderContent(bundledPlugins);
+            String digestOfExternalFolder = md5DigestOfFolderContent(externalPlugins);
+            File tempFileToStoreMd5 = File.createTempFile(""tempFileToStoreMd5"", "".txt"");
+            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileToStoreMd5));
+            writer.write(String.format(""digestOfBundledFolder:"" + digestOfBundledFolder + ""\tdigestOfExternalFolder:"" + digestOfExternalFolder));
+            writer.close();
+            return md5DigestOfFile(tempFileToStoreMd5);
+        } catch (Exception e) {
+            throw new RuntimeException(String.format(""Could not compute md5 of plugins. Exception occurred: %s"", e.getStackTrace()));
         }
-        return md5DigestOfFile;
     }
 }
diff --git a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
index ba52e244b7..40a2bdcb3c 100644
--- a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
+++ b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
@@ -27,7 +27,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.util.zip.ZipFile;
 
 import static com.thoughtworks.go.util.SystemEnvironment.*;
@@ -112,8 +111,8 @@ public class PluginsZipTest {
 
     @Test
     public void shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile() throws Exception {
-        expectedException.expect(FileNotFoundException.class);
-        expectedException.expectMessage(containsString(""go-plugins-all.zip (No such file or directory)""));
+        expectedException.expect(RuntimeException.class);
+        expectedException.expectMessage(containsString(""Could not compute md5 of plugins. Exception occurred:""));
 
         temporaryFolder.delete();
         pluginsZip.md5();","Changed the way md5 was checked . . * Due to plugins zip being recreated on every server restart , the md5 changed when the server was migrated to a new machine .","""Added support for calculating MD5 digest of folder contents and updated PluginsZip to use it""","Here's a possible commit message based on the provided diff:

""Added support for computing MD5 digest of folder contents and updated PluginsZip to use this feature""

Alternatively, you could also use a more concise commit message:

""Added folder MD5 digest computation and updated PluginsZip""

Or, if you want to follow the conventional commit message format:

`feat: Added support for computing MD5 digest of folder contents and updated PluginsZip to use this feature`

This commit message format is commonly used in the software development industry and includes a type (`feat` for feature), a brief description of the changes, and any relevant details.","""Add method to calculate MD5 digest of folder content, and use it in PluginsZip""

Explanation:

* The method `md5DigestOfFolderContent` is added to `FileDigester` to calculate the MD5 digest of the content of a folder.
* The method `md5` in `PluginsZip` is modified to use `md5DigestOfFolderContent` instead of `md5DigestOfFile` to calculate the MD5 digest of the plugins.
* A new test method `shouldReturnConsistentMd5BySortingTheFileList` is added to `FileDigesterTest` to ensure that the file list is sorted before calculating the MD5 digest of the folder content.
* The expected exception in the test method `shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile` in `PluginsZipTest` is changed from `FileNotFoundException` to `RuntimeException`.",Add method to compute MD5 digest of folder content and update related test cases and PluginsZip class to use it.,Model 3
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
index 543bf64e8c..36c0b8d222 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
@@ -292,9 +292,9 @@ public class ProtoCommon {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
     ImmutableList<Artifact> srcs = ruleContext.getPrerequisiteArtifacts(""srcs"", TARGET).list();
     if (srcs.isEmpty()) {
-      for (ProtoSupportDataProvider provider :
-          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSupportDataProvider.class)) {
-        result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+      for (ProtoSourcesProvider provider :
+          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSourcesProvider.class)) {
+        result.addTransitive(provider.getProtosInDirectDeps());
       }
     } else {
       for (ProtoSourcesProvider provider :
@@ -312,9 +312,9 @@ public class ProtoCommon {
   @Nullable
   public static NestedSet<Artifact> computeProtosInExportedDeps(RuleContext ruleContext) {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
-    for (ProtoSupportDataProvider provider :
-        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSupportDataProvider.class)) {
-      result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+    for (ProtoSourcesProvider provider :
+        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSourcesProvider.class)) {
+      result.addTransitive(provider.getProtosInDirectDeps());
     }
     return result.build();
   }",Remove references to SupportData everywhere except in CcProtoAspect . . RELNOTES : None . . PiperOrigin - RevId : 222216840,"""Replace ProtoSupportDataProvider with ProtoSourcesProvider in ProtoCommon""","""Replace ProtoSupportDataProvider with ProtoSourcesProvider in computeProtosInDirectDeps and computeProtosInExportedDeps methods.""","""Update ProtoCommon to use ProtoSourcesProvider instead of ProtoSupportDataProvider""

This commit appears to be changing the type of objects that are being iterated over in two for-loops in the `computeProtosInDirectDeps` and `computeProtosInExportedDeps` methods in the `ProtoCommon` class. Specifically, it is changing the type of the objects from `ProtoSupportDataProvider` to `ProtoSourcesProvider`. It also updates the way the `getProtosInDirectDeps` method is called on these objects. This change could be related to a larger refactoring or update of the codebase to use a new or different provider for proto sources.",Replace ProtoSupportDataProvider with ProtoSourcesProvider for gathering proto dependencies in rule context processing.,Model 3
"diff --git a/.travis.yml b/.travis.yml
index 171280c26..f0586c145 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -13,7 +13,7 @@ deploy:
     api_key:
       secure: Cv5wFtWt62/A24EvSEQvMow7gKPbZ3oATEFPuSghhB2TQz1dA40Zee3Qvk4LFlpLrhYo4K0ZSczCZRGpR+hCd8+Dpww52bheYEvWuh3ZQfvu/fXtEx2j5PwP1qMpmIgSxETV/gkD7l9FImdh0VzktYiAvQfmi0bEocG9/D4QwjFpNat7iwBdcMiw1MvAygpdIWRsjiw0RKlB2mWarmoHhQ7Gu7qlU3j50uaEvcrtmU0pBUPggNQwQRv32i9NPvNFxrqqlUjDLIS8JFea99zCkp8BwYqbEvBIMzd+Qip1/stLJJA3+cDUClbsDtg8rAVetzpOrdLEEBmqShFe5MDl2yEHcsgpN9CFsyTaUfvB3P3rVjizvycMm42IsUkXQiarm5xTQ/TIA8Rd8AHiSKuweNCg1Fd5SFaRtKy8JVLXuxyfUccmyje6hhz2L4lS2Wfj3mAG7sqZUCXhWP79EKdGkiPOjKv4CwXEKmuH3BMVqPlNUZJr9Eg3sV1FG0h2l+MVOOnR635qdUbb49sYojYxVruMLX0BH1c4ZCu230m8CUoWA1Em1QNI75ya7+9Y5T6AsgWDVpBvdUo9fWNbdp+VQ0GskFQsJD5wtnxbcbHeFiERAgGBm7z6qt9u9LrQpBH+dsW52ADvYsu3L4nQEa+sdMHwTTwmGY+iUvsxu0DqxGg=
     file:
-    - desktop/build/libs/desktop-release.jar
+    - desktop/build/libs/Mindustry.jar
     - server/build/libs/server-release.jar
     on:
       repo: Anuken/Mindustry
diff --git a/README.md b/README.md
index 791a99452..b0ec7c49e 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ If the terminal returns `Permission denied` or `Command not found` on Mac/Linux,
 ---
 
 Gradle may take up to several minutes to download files. Be patient. <br>
-After building, the output .JAR file should be in `/desktop/build/libs/desktop-release.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
+After building, the output .JAR file should be in `/desktop/build/libs/Mindustry.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
 
 ### Downloads
 
diff --git a/desktop/build.gradle b/desktop/build.gradle
index 26392656d..db32ac459 100644
--- a/desktop/build.gradle
+++ b/desktop/build.gradle
@@ -32,35 +32,32 @@ task run(dependsOn: classes, type: JavaExec){
     }
 }
 
-[""Windows"", ""Linux"", ""Mac"", ""All""].each{ target ->
-    task ""dist$target""(type: Jar, dependsOn: classes){
-        from files(sourceSets.main.output.classesDirs)
-        from files(sourceSets.main.output.resourcesDir)
-        from {configurations.compile.collect {zipTree(it)}}
-        from files(project.assetsDir)
-
-        if(target.contains(""windows"")) exclude('**.so', ""**.dylib"")
-        if(target == ""mac"") exclude('**.so', ""**.dll"")
-        if(target == ""linux"") exclude('**.dll', ""**.dylib"")
-        archiveName = ""$appName-${target}.jar""
-
-        manifest{
-            attributes 'Main-Class': project.mainClassName
-        }
+
+task dist(type: Jar, dependsOn: classes){
+    from files(sourceSets.main.output.classesDirs)
+    from files(sourceSets.main.output.resourcesDir)
+    from {configurations.compile.collect {zipTree(it)}}
+    from files(project.assetsDir)
+
+    archiveName = ""${appName}.jar""
+
+    manifest{
+        attributes 'Main-Class': project.mainClassName
     }
 }
 
+
 PackrConfig.Platform.values().each{ platform ->
     task ""packr${platform.toString()}""{
         def platformName = platform.toString().replace('64', '').replace('32', '').replace('MacOS', 'Mac')
 
-        dependsOn ""dist$platformName""
+        dependsOn dist
 
         doLast{
             copy{
                 into ""build/packr/""
-                rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                from ""build/libs/$appName-${platformName}.jar""
+                rename(""${appName}.jar"", ""desktop.jar"")
+                from ""build/libs/${appName}.jar""
             }
 
             delete{
@@ -75,8 +72,8 @@ PackrConfig.Platform.values().each{ platform ->
 
                 copy{
                     into ""build/packr/output/jre""
-                    rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                    from ""build/libs/$appName-${platformName}.jar""
+                    rename(""${appName}.jar"", ""desktop.jar"")
+                    from ""build/libs/${appName}.jar""
                 }
             }else{
                 def config = new PackrConfig()",Removed pointless platform - specific dists,"""Rename desktop build output to Mindustry.jar""

This commit message accurately reflects the changes made in the code, which include renaming the desktop build output from ""desktop-release.jar"" to ""Mindustry.jar"" in the .travis.yml, README.md, and desktop/build.gradle files.","""Update build process to use Mindustry.jar instead of desktop-release.jar""","""Changed output JAR filename to 'Mindustry.jar' and simplified Gradle build tasks in desktop/build.gradle""

Here's a breakdown of the changes in this commit:

1. In the `.travis.yml` file, the output JAR filename was changed from `desktop-release.jar` to `Mindustry.jar` for the desktop build.
2. In the `README.md` file, the output JAR filename was changed from `desktop-release.jar` to `Mindustry.jar` for the desktop build.
3. In the `desktop/build.gradle` file, the Gradle build tasks were simplified and the output JAR filename was changed from `$appName-${target}.jar` to `${appName}.jar`. The separate build tasks for different operating systems (Windows, Linux, Mac) were also combined into a single `dist` task.",Update JAR file paths and simplify distribution task in build.gradle for consistent naming conventions.,Model 4
"diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
index d8a8b3bac7..d7de792531 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
@@ -48,6 +48,7 @@ import static org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 import static org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 import static org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 
+import java.io.StringReader;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -62,6 +63,7 @@ import org.jooq.Result;
 import org.jooq.SQLDialect;
 import org.jooq.SortOrder;
 import org.jooq.impl.DSL;
+import org.jooq.tools.csv.CSVReader;
 import org.jooq.util.AbstractDatabase;
 import org.jooq.util.AbstractIndexDefinition;
 import org.jooq.util.ArrayDefinition;
@@ -69,6 +71,7 @@ import org.jooq.util.CatalogDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DefaultCheckConstraintDefinition;
 import org.jooq.util.DefaultDataTypeDefinition;
+import org.jooq.util.DefaultEnumDefinition;
 import org.jooq.util.DefaultIndexColumnDefinition;
 import org.jooq.util.DefaultRelations;
 import org.jooq.util.DefaultSequenceDefinition;
@@ -463,6 +466,61 @@ public class H2Database extends AbstractDatabase {
     @Override
     protected List<EnumDefinition> getEnums0() throws SQLException {
         List<EnumDefinition> result = new ArrayList<EnumDefinition>();
+
+        Result<Record4<String, String, String, String>> records = create()
+            .select(
+                Columns.TABLE_SCHEMA,
+                Columns.TABLE_NAME,
+                Columns.COLUMN_NAME,
+                Columns.COLUMN_TYPE)
+            .from(COLUMNS)
+            .where(
+                Columns.COLUMN_TYPE.like(""ENUM(%)%"").and(
+                Columns.TABLE_SCHEMA.in(getInputSchemata())))
+            .orderBy(
+                Columns.TABLE_SCHEMA.asc(),
+                Columns.TABLE_NAME.asc(),
+                Columns.COLUMN_NAME.asc())
+            .fetch();
+
+        for (Record record : records) {
+            SchemaDefinition schema = getSchema(record.get(Columns.TABLE_SCHEMA));
+
+            String table = record.get(Columns.TABLE_NAME);
+            String column = record.get(Columns.COLUMN_NAME);
+            String name = table + ""_"" + column;
+            String columnType = record.get(Columns.COLUMN_TYPE);
+
+            // [#1237] Don't generate enum classes for columns in MySQL tables
+            // that are excluded from code generation
+            TableDefinition tableDefinition = getTable(schema, table);
+            if (tableDefinition != null) {
+                ColumnDefinition columnDefinition = tableDefinition.getColumn(column);
+
+                if (columnDefinition != null) {
+
+                    // [#1137] Avoid generating enum classes for enum types that
+                    // are explicitly forced to another type
+                    if (getConfiguredForcedType(columnDefinition, columnDefinition.getType()) == null) {
+                        DefaultEnumDefinition definition = new DefaultEnumDefinition(schema, name, """");
+
+                        CSVReader reader = new CSVReader(
+                            new StringReader(columnType.replaceAll(""(^enum\\()|(\\).*$)"", """"))
+                           ,','  // Separator
+                           ,'\'' // Quote character
+                           ,true // Strict quotes
+                        );
+
+                        for (String string : reader.next()) {
+                            definition.addLiteral(string);
+                        }
+
+                        result.add(definition);
+                    }
+                }
+            }
+        }
+
         return result;
     }
 
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
index a52b2e6e0f..5f1110a3d8 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
@@ -38,7 +38,9 @@
 package org.jooq.util.h2;
 
 import static org.jooq.impl.DSL.choose;
+import static org.jooq.impl.DSL.falseCondition;
 import static org.jooq.impl.DSL.inline;
+import static org.jooq.impl.DSL.name;
 import static org.jooq.impl.DSL.zero;
 import static org.jooq.tools.StringUtils.defaultString;
 import static org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
@@ -49,6 +51,7 @@ import java.util.List;
 
 import org.jooq.Param;
 import org.jooq.Record;
+import org.jooq.exception.DataAccessException;
 import org.jooq.util.AbstractTableDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DataTypeDefinition;
@@ -65,6 +68,8 @@ import org.jooq.util.h2.information_schema.tables.Columns;
  */
 public class H2TableDefinition extends AbstractTableDefinition {
 
+    private static Boolean is1_4_197;
+
     public H2TableDefinition(SchemaDefinition schema, String name, String comment) {
         super(schema, name, comment);
     }
@@ -84,6 +89,7 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 Columns.COLUMN_NAME,
                 Columns.ORDINAL_POSITION,
                 Columns.TYPE_NAME,
+                is1_4_197() ? Columns.COLUMN_TYPE : inline("""").as(Columns.COLUMN_TYPE),
                 choose().when(Columns.NUMERIC_PRECISION.eq(maxP).and(Columns.NUMERIC_SCALE.eq(maxS)), zero())
                         .otherwise(Columns.CHARACTER_MAXIMUM_LENGTH).as(Columns.CHARACTER_MAXIMUM_LENGTH),
                 Columns.NUMERIC_PRECISION.decode(maxP, zero(), Columns.NUMERIC_PRECISION).as(Columns.NUMERIC_PRECISION),
@@ -113,7 +119,8 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 record.get(Columns.NUMERIC_PRECISION),
                 record.get(Columns.NUMERIC_SCALE),
                 record.get(Columns.IS_NULLABLE, boolean.class),
-                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT));
+                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT),
+                name(getSchema().getName(), getName() + ""_"" + record.get(Columns.COLUMN_NAME)));
 
             ColumnDefinition column = new DefaultColumnDefinition(
             	getDatabase().getTable(getSchema(), getName()),
@@ -128,4 +135,26 @@ public class H2TableDefinition extends AbstractTableDefinition {
 
         return result;
     }
+
+
+    boolean is1_4_197() {
+        if (is1_4_197 == null) {
+
+            // [#5874] The COLUMNS.COLUMN_TYPE column was introduced in H2 1.4.197
+            try {
+                create(true)
+                    .select(Columns.COLUMN_TYPE)
+                    .from(COLUMNS)
+                    .where(falseCondition())
+                    .fetch();
+
+                is1_4_197 = true;
+            }
+            catch (DataAccessException e) {
+                is1_4_197 = false;
+            }
+        }
+
+        return is1_4_197;
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
new file mode 100644
index 0000000000..51cbaff3ea
--- /dev/null
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
@@ -0,0 +1,60 @@
+/*
+ * This file is generated by jOOQ.
+ */
+package org.jooq.util.h2.information_schema;
+
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.annotation.Generated;
+
+import org.jooq.Schema;
+import org.jooq.impl.CatalogImpl;
+
+
+/**
+ * This class is generated by jOOQ.
+ */
+@Generated(
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
+)
+@SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
+public class DefaultCatalog extends CatalogImpl {
+
+    private static final long serialVersionUID = -1741973376;
+
+    /**
+     * The reference instance of <code></code>
+     */
+    public static final DefaultCatalog DEFAULT_CATALOG = new DefaultCatalog();
+
+    /**
+     * The schema <code>INFORMATION_SCHEMA</code>.
+     */
+    public final InformationSchema INFORMATION_SCHEMA = org.jooq.util.h2.information_schema.InformationSchema.INFORMATION_SCHEMA;
+
+    /**
+     * No further instances allowed
+     */
+    private DefaultCatalog() {
+        super("""");
+    }
+
+    @Override
+    public final List<Schema> getSchemas() {
+        List result = new ArrayList();
+        result.addAll(getSchemas0());
+        return result;
+    }
+
+    private final List<Schema> getSchemas0() {
+        return Arrays.<Schema>asList(
+            InformationSchema.INFORMATION_SCHEMA);
+    }
+}
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
index becb41f09b..bf63a6cd68 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -10,6 +10,7 @@ import java.util.List;
 
 import javax.annotation.Generated;
 
+import org.jooq.Catalog;
 import org.jooq.Table;
 import org.jooq.impl.SchemaImpl;
 import org.jooq.util.h2.information_schema.tables.Columns;
@@ -28,47 +29,106 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class InformationSchema extends SchemaImpl {
 
-	private static final long serialVersionUID = 1479405880;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA</code>
-	 */
-	public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
-
-	/**
-	 * No further instances allowed
-	 */
-	private InformationSchema() {
-		super(""INFORMATION_SCHEMA"");
-	}
-
-	@Override
-	public final List<Table<?>> getTables() {
-		List result = new ArrayList();
-		result.addAll(getTables0());
-		return result;
-	}
-
-	private final List<Table<?>> getTables0() {
-		return Arrays.<Table<?>>asList(
-			FunctionColumns.FUNCTION_COLUMNS,
-			Constraints.CONSTRAINTS,
-			CrossReferences.CROSS_REFERENCES,
-			Schemata.SCHEMATA,
-			FunctionAliases.FUNCTION_ALIASES,
-			Sequences.SEQUENCES,
-			TypeInfo.TYPE_INFO,
-			Indexes.INDEXES,
-			Columns.COLUMNS,
-			Tables.TABLES);
-	}
+    private static final long serialVersionUID = -426534875;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA</code>
+     */
+    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public final Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+
+    /**
+     * No further instances allowed
+     */
+    private InformationSchema() {
+        super(""INFORMATION_SCHEMA"", null);
+    }
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Catalog getCatalog() {
+        return DefaultCatalog.DEFAULT_CATALOG;
+    }
+
+    @Override
+    public final List<Table<?>> getTables() {
+        List result = new ArrayList();
+        result.addAll(getTables0());
+        return result;
+    }
+
+    private final List<Table<?>> getTables0() {
+        return Arrays.<Table<?>>asList(
+            Columns.COLUMNS,
+            Constraints.CONSTRAINTS,
+            CrossReferences.CROSS_REFERENCES,
+            FunctionAliases.FUNCTION_ALIASES,
+            FunctionColumns.FUNCTION_COLUMNS,
+            Indexes.INDEXES,
+            Schemata.SCHEMATA,
+            Sequences.SEQUENCES,
+            Tables.TABLES,
+            TypeInfo.TYPE_INFO);
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
index 484c4639c0..a2f4a8ca44 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -21,62 +21,62 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * Convenience access to all tables in INFORMATION_SCHEMA
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Tables {
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_COLUMNS
-	 */
-	public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CONSTRAINTS
-	 */
-	public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CROSS_REFERENCES
-	 */
-	public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SCHEMATA
-	 */
-	public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_ALIASES
-	 */
-	public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SEQUENCES
-	 */
-	public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TYPE_INFO
-	 */
-	public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
 
-	/**
-	 * The table INFORMATION_SCHEMA.INDEXES
-	 */
-	public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.COLUMNS
-	 */
-	public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TABLES
-	 */
-	public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
index 0aa0b00f98..bed402f803 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema.tables;
 
@@ -7,9 +7,12 @@ package org.jooq.util.h2.information_schema.tables;
 import javax.annotation.Generated;
 
 import org.jooq.Field;
+import org.jooq.Name;
 import org.jooq.Record;
+import org.jooq.Schema;
 import org.jooq.Table;
 import org.jooq.TableField;
+import org.jooq.impl.DSL;
 import org.jooq.impl.TableImpl;
 import org.jooq.util.h2.information_schema.InformationSchema;
 
@@ -18,157 +21,175 @@ import org.jooq.util.h2.information_schema.InformationSchema;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Columns extends TableImpl<Record> {
 
-	private static final long serialVersionUID = -1092445246;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
-	 */
-	public static final Columns COLUMNS = new Columns();
-
-	/**
-	 * The class holding records for this type
-	 */
-	@Override
-	public Class<Record> getRecordType() {
-		return Record.class;
-	}
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
-	 */
-	public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
-	 */
-	public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
-	 */
-	public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
-	 */
-	public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
-	 */
-	public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
-	 */
-	public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
-	 */
-	public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
-	 */
-	public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
-	 */
-	public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
-	 */
-	public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
-	 */
-	public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
-
-	/**
-	 * No further instances allowed
-	 */
-	private Columns() {
-		this(""COLUMNS"", null);
-	}
-
-	private Columns(String alias, Table<Record> aliased) {
-		this(alias, aliased, null);
-	}
-
-	private Columns(String alias, Table<Record> aliased, Field<?>[] parameters) {
-		super(alias, InformationSchema.INFORMATION_SCHEMA, aliased, parameters, """");
-	}
+    private static final long serialVersionUID = -443290501;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
+     */
+    public static final Columns COLUMNS = new Columns();
+
+    /**
+     * The class holding records for this type
+     */
+    @Override
+    public Class<Record> getRecordType() {
+        return Record.class;
+    }
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
+     */
+    public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
+     */
+    public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
+     */
+    public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
+     */
+    public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
+     */
+    public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
+     */
+    public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
+     */
+    public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
+     */
+    public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
+     */
+    public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
+     */
+    public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
+     */
+    public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
+     */
+    public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
+     */
+    public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
+     */
+    public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
+     */
+    public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
+     */
+    public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE</code>.
+     */
+    public static final TableField<Record, String> COLUMN_TYPE = createField(""COLUMN_TYPE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+",Add support for H2 \' s new enum types,"""Added support for H2 database version 1.4.197 and above, including the new COLUMN_TYPE column in the INFORMATION_SCHEMA.COLUMNS table, and improved handling of enum types.""","According to the diff, the commit message should be:

""Add support for H2 1.4.197 and generate enum classes for H2 databases""","It appears that you have shared several code files related to jOOQ, a Java library that helps you build type-safe SQL queries. These files seem to be generated by jOOQ itself.

Here's a brief summary of the changes in each file:

1. `H2Database.java`: The method `getEnums0()` has been expanded significantly. It now retrieves enum definitions from the database schema, reads the enum values using a CSVReader, and adds them to the result list.

2. `H2TableDefinition.java`: A new method `is1_4_197()` has been added. This method checks the version of the H2 database and returns a boolean value indicating whether the version is 1.4.197 or higher. The method `getColumns0()` has also been updated to include an additional column in the select query if the H2 version is 1.4.197 or higher.

3. `DefaultCatalog.java`: This is a new file that contains a single class `DefaultCatalog`. This class extends `CatalogImpl` and provides a static instance of `INFORMATION_SCHEMA`.

4. `InformationSchema.java`: This file has been modified to include the `DefaultCatalog` class. It also includes several new table definitions and a method to get all tables in the schema.

5. `Tables.java`: This file has been modified to include the new `Columns` table definition from the `InformationSchema` class.

6. `Columns.java`: This file has been modified extensively. It now includes many new fields and methods related to the `Columns` table in the `InformationSchema`.

As for the commit message, it should summarize these changes in a concise manner. For example: ""Updated H2Database and H2TableDefinition, added DefaultCatalog, and updated InformationSchema, Tables, and Columns to support new enum definitions and H2 version checks.""","""Added ENUM type support in H2Database and extended information_schema classes, including new DefaultCatalog for streamlined meta-data access.""",Model 1
"diff --git a/res/xml/widget_ankidroid.xml b/res/xml/widget_ankidroid.xml
index 4c2da961f2..8005893586 100644
--- a/res/xml/widget_ankidroid.xml
+++ b/res/xml/widget_ankidroid.xml
@@ -1,4 +1,6 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
-<appwidget-provider
-    xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:initialLayout=""@layout/widget_ankidroidinitial"" android:minHeight=""146dp"" android:minWidth=""146dp"" android:updatePeriodMillis=""2500""/>
\ No newline at end of file
+<appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
+	android:initialLayout=""@layout/widget_ankidroidinitial""
+	android:minHeight=""146dp""
+	android:minWidth=""146dp""
+	android:updatePeriodMillis=""3600000""/>
\ No newline at end of file",Reduce battery drain caused by insainly high value of widget update period .,"""Update widget update period to 1 hour""","""Update appwidget-provider configuration to increase update interval to 1 hour""","""Updated widget_ankidroid.xml: Added newlines for readability, increased updatePeriodMillis to 3600000, and added explicit self-closing tag for appwidget-provider.""",Update widget configuration: set update period to 1 hour and reformat XML for better readability.,Model 3
"diff --git a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
index 54efcb9b7b..a1b5650e4f 100644
--- a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
+++ b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
@@ -47,17 +47,14 @@ public class ComputeClosureExample {
             System.out.println("">>> Compute closure example started."");
 
             // Execute closure on all cluster nodes.
-            Collection<Integer> res = ignite.compute().apply(
-                new IgniteClosure<String, Integer>() {
-                    @Override public Integer apply(String word) {
+            Collection<Integer> res = ignite.compute().<String, Integer>apply((word) -> {
                         System.out.println();
                         System.out.println("">>> Printing '"" + word + ""' on this node from ignite job."");
 
                         // Return number of letters in the word.
                         return word.length();",ignite - 454 jdk8 compatibility fixes,"""Refactor ComputeClosureExample to use lambda expression instead of anonymous class""","""Refactor ComputeClosureExample to use lambda expression instead of IgniteClosure.""","""Refactor ComputeClosureExample to use lambda expression""

This commit changes the way the IgniteClosure is applied in the ComputeClosureExample.java file. Instead of using an anonymous inner class, a lambda expression is used to simplify the code. The functionality remains the same: the closure is still executed on all cluster nodes, and the number of letters in a given word is returned.",Updated `ComputeClosureExample` to use lambda expressions instead of anonymous classes for closure execution.,Model 4
"diff --git a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
index e305303fcf..8b801e328c 100644
--- a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
@@ -2,7 +2,7 @@
  * ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -57,14 +57,16 @@ package org.apache.jmeter.visualizers;
 
 import java.awt.BorderLayout;
 import java.awt.Color;
+import java.awt.Dimension;
 import java.awt.FlowLayout;
 import java.awt.Font;
-import java.awt.GridLayout;
 import java.awt.Image;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 
 import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
@@ -247,7 +249,7 @@ public class GraphVisualizer extends AbstractVisualizer
     }
 
     /****************************************
-     * Description of the Method
+     * Initialize the GUI
      ***************************************/
     private void init()
     {
@@ -273,151 +275,291 @@ public class GraphVisualizer extends AbstractVisualizer
         mainPanel.add(getNamePanel());
         mainPanel.add(this.getFilePanel());
 
-        // Set up panel where user can choose which graphs to display
-        JPanel chooseGraphsPanel = new JPanel();
 
+        // Set up the graph with header, footer, Y axis and graph display
+        JPanel graphPanel = new JPanel(new BorderLayout());
+        graphPanel.add(createYAxis(), BorderLayout.WEST);
+        graphPanel.add(createChoosePanel(), BorderLayout.NORTH);
+        graphPanel.add(createGraphPanel(), BorderLayout.CENTER);
+        graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);
+
+        // Add the main panel and the graph
+        this.add(mainPanel, BorderLayout.NORTH);
+        this.add(graphPanel, BorderLayout.CENTER);
+    }
+
+    // Methods used in creating the GUI
+
+    /**
+     * Creates the panel containing the graph's Y axis labels.
+     * 
+     * @return the Y axis panel
+     */
+    private JPanel createYAxis() {
+        JPanel graphYAxisPanel = new JPanel();
+        
+        graphYAxisPanel.setLayout(new BorderLayout());
+        
+        maxYField = createYAxisField(5);
+        minYField = createYAxisField(3);
+
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", maxYField),
+                        BorderLayout.NORTH);
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", minYField),
+                        BorderLayout.SOUTH);
+
+        return graphYAxisPanel;
+    }
+
+    /**
+     * Creates a text field to be used for the value of a Y axis
+     * label.  These fields hold the minimum and maximum values
+     * for the graph.  The units are kept in a separate label
+     * outside of this field.
+     * 
+     * @param length the number of characters which the field
+     *                will use to calculate its preferred width.
+     *                This should be set to the maximum number
+     *                of digits that are expected to be necessary
+     *                to hold the label value.
+     * 
+     * @see #createYAxisPanel(String, JTextField)
+     * 
+     * @return a text field configured to be used in the Y axis
+     */
+    private JTextField createYAxisField(int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
+        field.setEditable(false);
+        field.setForeground(Color.black);
+        field.setBackground(getBackground());
+        field.setHorizontalAlignment(JTextField.RIGHT);
+        return field;
+    }
+
+    /**
+     * Creates a panel for an entire Y axis label. This includes
+     * the dynamic value as well as the unit label.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *          This is used to look up the label text using
+     *          {@link JMeterUtils#getResString(String)}.
+     * 
+     * @return a panel containing both the dynamic and static parts
+     *          of a Y axis label
+     */
+    private JPanel createYAxisPanel(String labelResourceName, JTextField field) {
+        JPanel panel = new JPanel(new FlowLayout());
+        JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));
+        
+        panel.add(field);
+        panel.add(label);
+        return panel;
+    }
+
+
+    /**
+     * Creates a panel which allows the user to choose which graphs
+     * to display. This panel consists of a check box for each type
+     * of graph (current sample, average, deviation, and throughput).
+     * 
+     * @return a panel allowing the user to choose which graphs
+     *          to display
+     */
+    private JPanel createChoosePanel() {
+        JPanel chooseGraphsPanel = new JPanel();
+        
         chooseGraphsPanel.setLayout(new FlowLayout());
-        JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString(""graph_choose_graphs""));
-
-        data = new JCheckBox(JMeterUtils.getResString(""graph_results_data""));
-        data.setSelected(true);
-        data.addItemListener(this);
-        data.setForeground(Color.black);
-        average = new JCheckBox(JMeterUtils.getResString(""graph_results_average""));
-        average.setSelected(true);
-        average.addItemListener(this);
-        average.setForeground(Color.blue);
-        deviation = new JCheckBox(JMeterUtils.getResString(""graph_results_deviation""));
-        deviation.setSelected(true);
-        deviation.addItemListener(this);
-        deviation.setForeground(Color.red);
-        throughput = new JCheckBox(JMeterUtils.getResString(""graph_results_throughput""));
-        throughput.setSelected(true);
-        throughput.addItemListener(this);
-        throughput.setForeground(JMeterColor.dark_green);
+        JLabel selectGraphsLabel = new JLabel(
+                        JMeterUtils.getResString(""graph_choose_graphs""));
+        data = createChooseCheckBox(""graph_results_data"", Color.black);
+        average = createChooseCheckBox(""graph_results_average"", Color.blue);
+        deviation = createChooseCheckBox(""graph_results_deviation"", Color.red);
+        throughput = createChooseCheckBox(""graph_results_throughput"",
+                        JMeterColor.dark_green);
 
         chooseGraphsPanel.add(selectGraphsLabel);
         chooseGraphsPanel.add(data);
         chooseGraphsPanel.add(average);
         chooseGraphsPanel.add(deviation);
         chooseGraphsPanel.add(throughput);
+        return chooseGraphsPanel;
+    }
 
-        // Set up the graph itself
-        JScrollPane graphScrollPanel = new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
-                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
+    /**
+     * Creates a check box configured to be used to in the choose panel
+     * allowing the user to select whether or not a particular kind of
+     * graph data will be displayed.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param color  the color used for the checkbox text. By
+     *                convention this is the same color that is used
+     *                to draw the graph and for the corresponding
+     *                info field.
+     *
+     * @return       a checkbox allowing the user to select whether or
+     *                not a kind of graph data will be displayed
+     */
+    private JCheckBox createChooseCheckBox(String labelResourceName, Color color) {
+        JCheckBox checkBox = new JCheckBox(
+                        JMeterUtils.getResString(labelResourceName));
+        checkBox.setSelected(true);
+        checkBox.addItemListener(this);
+        checkBox.setForeground(color);
+        return checkBox;
+    }
 
-        graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
-        // graphScrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
-        // graphScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
 
+    /**
+     * Creates a scroll pane containing the actual graph of
+     * the results.
+     * 
+     * @return a scroll pane containing the graph
+     */
+    private JScrollPane createGraphPanel() {
+        JScrollPane graphScrollPanel =
+            new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
+                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-        // Set up Y axis panel
-        JPanel graphYAxisPanel = new JPanel();
+        graphScrollPanel.setViewportBorder(
+                BorderFactory.createEmptyBorder(2, 2, 2, 2));
 
-        graphYAxisPanel.setLayout(new BorderLayout());
-        JPanel maxYPanel = new JPanel(new FlowLayout());
-        JLabel maxYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        maxYField = new JTextField(5);
-        maxYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        maxYField.setEditable(false);
-        maxYField.setForeground(Color.black);
-        maxYField.setBackground(getBackground());
-        maxYField.setHorizontalAlignment(JTextField.RIGHT);
-        maxYPanel.add(maxYField);
-        maxYPanel.add(maxYLabel);
-        JPanel minYPanel = new JPanel(new FlowLayout());
-        JLabel minYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        minYField = new JTextField(3);
-        minYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        minYField.setEditable(false);
-        minYField.setForeground(Color.black);
-        minYField.setBackground(getBackground());
-        minYField.setHorizontalAlignment(JTextField.RIGHT);
-        minYPanel.add(minYField);
-        minYPanel.add(minYLabel);
-        graphYAxisPanel.add(maxYPanel, BorderLayout.NORTH);
-        graphYAxisPanel.add(minYPanel, BorderLayout.SOUTH);
-
-        // Set up footer of graph which displays numerics of the graphs
-        JPanel dataPanel = new JPanel();
-        JLabel dataLabel = new JLabel(JMeterUtils.getResString(""graph_results_latest_sample""));
-
-        dataLabel.setForeground(Color.black);
-        dataField = new JTextField(5);
-        dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        dataField.setEditable(false);
-        dataField.setForeground(Color.black);
-        dataField.setBackground(getBackground());
-        dataPanel.add(dataLabel);
-        dataPanel.add(dataField);
-        JPanel averagePanel = new JPanel();
-        JLabel averageLabel = new JLabel(JMeterUtils.getResString(""graph_results_average""));
-
-        averageLabel.setForeground(Color.blue);
-        averageField = new JTextField(5);
-        averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        averageField.setEditable(false);
-        averageField.setForeground(Color.blue);
-        averageField.setBackground(getBackground());
-        averagePanel.add(averageLabel);
-        averagePanel.add(averageField);
-        JPanel deviationPanel = new JPanel();
-        JLabel deviationLabel = new JLabel(JMeterUtils.getResString(""graph_results_deviation""));
-
-        deviationLabel.setForeground(Color.red);
-        deviationField = new JTextField(5);
-        deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        deviationField.setEditable(false);
-        deviationField.setForeground(Color.red);
-        deviationField.setBackground(getBackground());
-        deviationPanel.add(deviationLabel);
-        deviationPanel.add(deviationField);
-        JPanel throughputPanel = new JPanel();
-        JLabel throughputLabel = new JLabel(JMeterUtils.getResString(""graph_results_throughput""));
-
-        throughputLabel.setForeground(JMeterColor.dark_green);
-        throughputField = new JTextField(15);
-        throughputField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        throughputField.setEditable(false);
-        throughputField.setForeground(JMeterColor.dark_green);
-        throughputField.setBackground(getBackground());
-        throughputPanel.add(throughputLabel);
-        throughputPanel.add(throughputField);
-        JPanel noSamplesPanel = new JPanel();
-        JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString(""graph_results_no_samples""));
-
-        noSamplesField = new JTextField(6);
-        noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        noSamplesField.setEditable(false);
-        noSamplesField.setForeground(Color.black);
-        noSamplesField.setBackground(getBackground());
-        noSamplesPanel.add(noSamplesLabel);
-        noSamplesPanel.add(noSamplesField);
-
-        JPanel graphInfoPanel = new JPanel();
-
-        graphInfoPanel.setLayout(new GridLayout(2, 3));
-        graphInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-
-        graphInfoPanel.add(noSamplesPanel);
-        graphInfoPanel.add(dataPanel);
-        graphInfoPanel.add(averagePanel);
-        graphInfoPanel.add(deviationPanel);
-        graphInfoPanel.add(throughputPanel);
+        return graphScrollPanel;
+    }
 
-        // Set up the graph with header, footer, Y axis and graph display
-        JPanel graphPanel = new JPanel();
 
-        graphPanel.setLayout(new BorderLayout());
-        graphPanel.add(graphYAxisPanel, BorderLayout.WEST);
-        graphPanel.add(chooseGraphsPanel, BorderLayout.NORTH);
-        graphPanel.add(graphScrollPanel, BorderLayout.CENTER);
-        graphPanel.add(graphInfoPanel, BorderLayout.SOUTH);
+    /**
+     * Creates a panel which numerically displays the current graph
+     * values.
+     * 
+     * @return a panel showing the current graph values
+     */
+    private Box createGraphInfoPanel() {
+        Box graphInfoPanel = Box.createHorizontalBox();
+
+        noSamplesField = createInfoField(Color.black, 6);
+        dataField = createInfoField(Color.black, 5);
+        averageField = createInfoField(Color.blue, 5);
+        deviationField = createInfoField(Color.red, 5);
+        throughputField = createInfoField(JMeterColor.dark_green, 15);
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_no_samples"", noSamplesField),
+                    noSamplesField,
+                    createInfoLabel(""graph_results_deviation"", deviationField),
+                    deviationField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_latest_sample"", dataField),
+                    dataField,
+                    createInfoLabel(""graph_results_throughput"", throughputField),
+                    throughputField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_average"", averageField),
+                    averageField,
+                    null,
+                    null));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        return graphInfoPanel;
+    }
 
-        // Add the main panel and the graph
-        this.add(mainPanel, BorderLayout.NORTH);
-        this.add(graphPanel, BorderLayout.CENTER);
+    /**
+     * Creates one of the fields used to display the graph's current
+     * values.
+     * 
+     * @param color   the color used to draw the value. By convention
+     *                 this is the same color that is used to draw the
+     *                 graph for this value and in the choose panel.
+     * @param length  the number of digits which the field should be
+     *                 able to display
+     * 
+     * @return        a text field configured to display one of the
+     *                 current graph values
+     */
+    private JTextField createInfoField(Color color, int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        field.setEditable(false);
+        field.setForeground(color);
+        field.setBackground(getBackground());
+
+        // The text field should expand horizontally, but have
+        // a fixed height
+        field.setMaximumSize(new Dimension(
+                    field.getMaximumSize().width,
+                    field.getPreferredSize().height));
+        return field;
+    }
+
+
+    /**
+     * Creates a label for one of the fields used to display the graph's
+     * current values. Neither the label created by this method or the
+     * <code>field</code> passed as a parameter is added to the GUI here.
+     * 
+     * @param labelResourceName  the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param field  the field this label is being created for.
+     */
+    private JLabel createInfoLabel(String labelResourceName, JTextField field) {
+        JLabel label = new JLabel(
+                JMeterUtils.getResString(labelResourceName));
+        label.setForeground(field.getForeground());
+        label.setLabelFor(field);
+        return label;
+    }
+
+    /**
+     * Creates a panel containing two pairs of labels and fields for
+     * displaying the current graph values. This method exists to help with
+     * laying out the fields in columns. If one or more components are null
+     * then these components will be represented by blank space.
+     * 
+     * @param label1  the label for the first field. This label will
+     *                 be placed in the upper left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field1  the field corresponding to the first label. This
+     *                 field will be placed in the upper right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     * @param label2  the label for the second field. This label will
+     *                 be placed in the lower left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field2  the field corresponding to the second label. This
+     *                 field will be placed in the lower right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     */
+    private Box createInfoColumn(JLabel label1, JTextField",Updating Graph Results GUI ( Jeremy Arnold ) .,"""Refactor GraphVisualizer to improve GUI layout and organization""",Refactor GraphVisualizer to improve GUI layout and organization.,"""Refactored GraphVisualizer GUI code for improved readability and maintainability""

Explanation:
The provided code has been refactored to improve its readability and maintainability. The refactoring includes:

* Extracting GUI initialization code into separate methods, each responsible for creating a specific part of the GUI.
* Removing duplicate code by creating helper methods to create GUI components with similar properties.
* Renaming some variables to better reflect their purpose.

These changes make the code more modular, easier to understand, and simpler to maintain. The commit message should reflect these improvements.","Refactor GraphVisualizer.java: Modularize GUI setup for readability, maintainability, and code reuse.",Model 3
"diff --git a/CHANGELOG.md b/CHANGELOG.md
index f0762d2a7..b7a7f412a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,5 @@
 ## 0.9.3-rc2
+ * STORM-558: change ""swap!"" to ""reset!"" to fix assignment-versions in supervisor
  * STORM-555: Storm json response should set charset to UTF-8
  * STORM-513: check heartbeat from multilang subprocess
  * STORM-549: ""topology.enable.message.timeouts"" does nothing",add STORM - 558 to changelog,"""Update changelog for 0.9.3-rc2""","""Update CHANGELOG.md for 0.9.3-rc2 release""

However, a more descriptive and conventional commit message would be:

""Release 0.9.3-rc2: Fix assignment versions in supervisor, improve JSON response, add heartbeat check, and resolve topology enable message timeouts""","* STORM-558: Change ""swap!"" to ""reset!"" to fix assignment-versions in supervisor

This is in addition to the other changes listed in the CHANGELOG.md file.","```markdown
Update CHANGELOG.md to include changes for STORM-558, STORM-555, STORM-513, and STORM-549.
```",Model 1
"diff --git a/src/main/java/net/dv8tion/jda/core/entities/Guild.java b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
index ea4dce7d..aed17f3e 100644
--- a/src/main/java/net/dv8tion/jda/core/entities/Guild.java
+++ b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
@@ -117,21 +117,9 @@ public interface Guild extends ISnowflake
      */
     List<TextChannel> getTextChannels();
     List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the TextChannel to create
-//     * @return
-//     *      the ChannelManager for the created TextChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createTextChannel(String name);
-//
+
     VoiceChannel getVoiceChannelById(String id);
+
     /**
      * The {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels} available on the {@link net.dv8tion.jda.core.entities.Guild Guild}.
      * The channels returned will be sorted according to their position.
@@ -140,20 +128,8 @@ public interface Guild extends ISnowflake
      *      An Immutable List of {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels}.
      */
     List<VoiceChannel> getVoiceChannels();
+
     List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the VoiceChannel to create
-//     * @return
-//     *      the ChannelManager for the created VoiceChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createVoiceChannel(String name);
 
     /**
      * This returns the {@link net.dv8tion.jda.core.entities.Role Role} which has the same id as the one provided.<br>
@@ -175,42 +151,6 @@ public interface Guild extends ISnowflake
      */
     List<Role> getRoles();
     List<Role> getRolesByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     *
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    RoleManager createRole();
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this {@link net.dv8tion.jda.core.entities.Guild Guild} with the same settings as the given {@link net.dv8tion.jda.core.entities.Role Role}.
-//     * It will be placed at the bottom (just over the @everyone role) to avoid permission hierarchy conflicts.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     * and all {@link net.dv8tion.jda.Permission Permissions} the given {@link net.dv8tion.jda.core.entities.Role Role} has.
-//     *
-//     * @param role
-//     *      The {@link net.dv8tion.jda.core.entities.Role Role} that should be copied
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     * @throws net.dv8tion.jda.exceptions.PermissionException
-//     *      if the bot doesn't has {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission} and every Permission the given Role has
-//     */
-//    RoleManager createCopyOfRole(Role role);
-
-//
-//    /**
-//     * Provides the {@link net.dv8tion.jda.core.entities.Role Role} that determines the color for the provided {@link net.dv8tion.jda.core.entities.User User}
-//     *
-//     * If the {@link net.dv8tion.jda.core.entities.User User} has the default color, this returns the same as getPublicRole();
-//     */
-//    Role getColorDeterminantRoleForUser(User user);
 
     /**
      * The @everyone {@link net.dv8tion.jda.core.entities.Role Role} of this {@link net.dv8tion.jda.core.entities.Guild Guild}
diff --git a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
index ccc405fd..cf56fabe 100644
--- a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
+++ b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
@@ -872,6 +872,100 @@ public class GuildController
         };
     }
 
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
+     *
+     * @param name
+     *      the name of the TextChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<TextChannel> createTextChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 - 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""text"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<TextChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                TextChannel tc = EntityBuilder.get(api).createTextChannel(chanJson, guild.getId());
+
+                request.onSuccess(tc);
+            }
+        };
+    }
+
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission.
+     *
+     * @param name
+     *      the name of the VoiceChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<VoiceChannel> createVoiceChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 to 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""voice"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<VoiceChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                VoiceChannel vc = EntityBuilder.get(api).createVoiceChannel(chanJson, guild.getId());
+
+                request.onSuccess(vc);
+            }
+        };
+    }
+
     protected void checkAvailable()
     {
         if (!guild.isAvailable())
diff --git a/src/main/java/net/dv8tion/jda/core/requests/Route.java b/src/main/java/net/dv8tion/jda/core/requests/Route.java
index 9524a9f2..b94cd7eb 100644
--- a/src/main/java/net/dv8tion/jda/core/requests/Route.java
+++ b/src/main/java/net/dv8tion/jda/core/requests/Route.java
@@ -52,6 +52,7 @@ public class Route
     {
         public static final Route GET_GUILD =        new Route(GET,    ""guilds/{guild_id}"",                   ""guild_id"");
         public static final Route MODIFY_GUILD =     new Route(PATCH,  ""guilds/{guild_id}"",                   ""guild_id"");
+        public static final Route CREATE_CHANNEL =   new Route(POST,   ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_CHANNELS =     new Route(GET,    ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_BANS =         new Route(GET,    ""guilds/{guild_id}/bans"",              ""guild_id"");
@@ -60,7 +61,7 @@ public class Route
         public static final Route UNBAN =            new Route(DELETE, ""guilds/{guild_id}/bans/{user_id}"",    ""guild_id"");
         public static final Route KICK_MEMBER =      new Route(DELETE, ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
         public static final Route MODIFY_MEMBER =    new Route(PATCH,  ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
-        public static final Route MODIFY_SELF_NICK = new Route(PATCH, ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
+        public static final Route MODIFY_SELF_NICK = new Route(PATCH,  ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
         public static final Route PRUNABLE_COUNT =   new Route(GET,    ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
         public static final Route PRUNE_MEMBERS =    new Route(POST,   ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
 
@@ -80,9 +81,9 @@ public class Route
 
     public static class Channels
     {
-        public static final Route DELETE_CHANNEL = new Route(DELETE, ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route MODIFY_CHANNEL = new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route SEND_TYPING =    new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
+        public static final Route DELETE_CHANNEL =       new Route(DELETE, ""channels/{channel_id}"");
+        public static final Route MODIFY_CHANNEL =       new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
+        public static final Route SEND_TYPING =          new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
         public static final Route GET_PERMISSIONS =      new Route(GET,    ""channels/{channel_id}/permissions"",                   ""channel_id"");
         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");
         public static final Route CREATE_PERM_OVERRIDE = new Route(PUT,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");",Added GuildController <issue_id> reateTextChannel ( String ) and <issue_id> reateVoiceChannel ( String ) .,"""Moved channel creation methods from Guild to GuildController and updated Route class to include CREATE_CHANNEL route""","""Added functionality to create text and voice channels in a guild""","""Removed deprecated methods for creating TextChannel and VoiceChannel in Guild interface and added them to GuildController. Also added new methods for creating TextChannel and VoiceChannel in Route class.""","""Added channel creation methods in GuildController and handled permissions and validation checks for text and voice channels.""",Model 1
"diff --git a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
index 582681d79..8709cb0f0 100644
--- a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
+++ b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
@@ -308,7 +308,12 @@ public interface MeterRegistry {
     /**
      * Execute an algorithm to bind one or more metrics to the registry.
      */
-    MeterRegistry bind(MeterBinder... binders);
+    default MeterRegistry bind(MeterBinder... binders) {
+        for (MeterBinder binder : binders) {
+            binder.bindTo(this);
+        }
+        return this;
+    }
 
     /**
      * Record metrics on Guava caches.",Provide default implementation of MeterRegistry . bind,"""Implement default method for MeterRegistry bind operation""",Added default implementation for bind method in MeterRegistry interface.,"The commit message should be: ""Refactor MeterRegistry.bind to use a default method and iterate over binders"". This message indicates that the method `bind` in the `MeterRegistry` interface has been refactored to use a default method implementation that iterates over the `MeterBinder` objects passed as arguments and binds them to the registry.","""Implement default method for bind to enhance MeterBinder functionality in MeterRegistry""",Model 2
"diff --git a/.github/workflows/sonatype.yaml b/.github/workflows/sonatype.yaml
index 55619adb17..b306aa1b71 100644
--- a/.github/workflows/sonatype.yaml
+++ b/.github/workflows/sonatype.yaml
@@ -23,7 +23,7 @@ on:
 
 jobs:
   build:
-    if: github.repository_owner == 'mybatis'
+    if: github.repository_owner == 'mybatis' && ! contains(toJSON(github.event.head_commit.message), '[maven-release-plugin]')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
diff --git a/travis/after_success.sh b/travis/after_success.sh
index ea1fad6c0a..3a47192e81 100755
--- a/travis/after_success.sh
+++ b/travis/after_success.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-#    Copyright 2009-2019 the original author or authors.
+#    Copyright 2009-2020 the original author or authors.
 #
 #    Licensed under the Apache License, Version 2.0 (the ""License"");
 #    you may not use this file except in compliance with the License.",Skip push to sonatype during release process,"""Update Sonatype workflow to skip maven-release-plugin and update copyright year in travis script""","""Update GitHub workflow and Travis script to reflect 2020 copyright year""","The diff you provided suggests the following changes were made:

1. In the file `.github/workflows/sonatype.yaml`, the `if` condition for the `build` job was modified to include an additional check that the commit message does not contain `[maven-release-plugin]`.

2. In the file `travis/after_success.sh`, the copyright year was updated from 2019 to 2020.

Here's a suggested commit message based on these changes:

""Updated build job condition and copyright year

- Modified the build job in the Sonatype workflow to skip if the commit message contains '[maven-release-plugin]'.
- Updated the copyright year in travis/after_success.sh to 2020.""","**Update GitHub Actions condition and copyright year**

Enhance GitHub Actions workflow to exclude Maven release plugin commits, and update copyright year in Travis after success script.",Model 2
"diff --git a/docs/blob.txt b/docs/blob.txt
index af523c8f3e..ec740411a9 100644
--- a/docs/blob.txt
+++ b/docs/blob.txt
@@ -1,3 +1,5 @@
+.. _blob_support:
+
 ============
 Blob Support
 ============
diff --git a/docs/sql/ddl.txt b/docs/sql/ddl.txt
index 21f2ffe969..e918384c20 100644
--- a/docs/sql/ddl.txt
+++ b/docs/sql/ddl.txt
@@ -343,12 +343,19 @@ Example for combining custom routing and shard definition::
     CREATE OK (... sec)
 
 
+.. _replication:
+
 Replication
 ===========
 
-By default Crate uses an replication factor of 1. If e.g. a cluster with 2 nodes is set up and
-an index is created using 5 shards, each node will have 5 shards.
-Defining the number of replicas is done using the ``number_of_replicas`` property.
+Replication of a table in Crate means that each primary shard of a
+table is stored additionally on so called secondary shards. This might
+be useful for better read performance and high availability. If not
+specified, crate creates one replica, which means that a tables
+content is stored twice accross the nodes of a cluster.
+
+Defining the number of replicas is done using the
+``number_of_replicas`` property.
 
 Example::
 
@@ -362,30 +369,22 @@ Example::
 The `number_of_replicas` property also accepts an string as parameter that
 contains a `range`.
 
-A range is a definition of `minimum number of replicas` to `maximum number of
-replicas`.
-
-For example:
-
-    =====  ======================================================================
-    Range  Explanation
-    =====  ======================================================================
-    0-1    Will create 0 or 1 replicas depending on the number of available nodes
-    -----  ----------------------------------------------------------------------
-    2-4    Table requires at least 2 replicas to be fully replicated. Will
-           create up to 4 if nodes are added.
-    -----  ----------------------------------------------------------------------
-    0-all  Will expand the number of replicas to the available number of nodes.
-    =====  ======================================================================
+A range is a definition of `minimum number of replicas` to `maximum
+number of replicas` depending on the number of nodes in the
+cluster. The table below shows some examples.
 
-While defining replication together with :ref:`sharding <sql_ddl_sharding>`, it needs to be
-defined after::
+===== ======================================================================
+Range Explanation
+===== ======================================================================
+0-1   Will create 0 or 1 replicas depending on the number of available nodes
+----- ----------------------------------------------------------------------
+2-4   Table requires at least 2 replicas to be fully replicated. Will
+      create up to 4 if nodes are added.
+----- ----------------------------------------------------------------------
+0-all Will expand the number of replicas to the available number of nodes.
+===== ======================================================================
 
-    cr> create table my_table10a (
-    ...   first_column int,
-    ...   second_column string
-    ... ) clustered by (first_column) into 10 shards with (number_of_replicas=1)
-    CREATE OK (... sec)
+For details of the range syntax refer to :ref:`number_of_replicas`.
 
 .. note::
 
@@ -393,22 +392,26 @@ defined after::
 
 .. _fulltext-indices:
 
+
+.. _indices_and_fulltext:
+
 Indices and fulltext search
 ============================
 
-Fulltext indices take the contents of one or more fields and split it up into tokens that are
-used for fulltext-search. The transformation from a text to separate tokens is done by an
-analyzer. In order to create fulltext search queries a
-:ref:`fulltext index with an analyzer <sql_ddl_index_fulltext>` must be defined for the related
-columns.
+Fulltext indices take the contents of one or more fields and split it
+up into tokens that are used for fulltext-search. The transformation
+from a text to separate tokens is done by an analyzer. In order to
+create fulltext search queries a :ref:`fulltext index with an analyzer
+<sql_ddl_index_fulltext>` must be defined for the related columns.
 
 .. _sql_ddl_index_definition:
 
 Index Definition
 ----------------
 
-At Crate, every column's data is indexed using the ``plain`` index method by default.
-Currently 3 choices related to index definition exists:
+In Crate, every column's data is indexed using the ``plain`` index
+method by default.  Currently there are 3 choices related to index
+definition:
 
   - `Disable indexing`_
 
@@ -427,9 +430,9 @@ Currently 3 choices related to index definition exists:
 Disable indexing
 ................
 
-Indexing can be turned off by using the ``INDEX OFF`` column definition.
-Without an index the column can never be hit by a query, and is only available as a result
-column::
+Indexing can be turned off by using the ``INDEX OFF`` column
+definition. Without an index the column can never be hit by a query,
+and is only available as a result column::
 
     cr> create table my_table1b (
     ...   first_column string INDEX OFF
@@ -442,8 +445,9 @@ column::
 Plain index (Default)
 .....................
 
-An index of type ``plain`` is indexing the input data as-is without analyzing.
-Using the ``plain`` index method is the default behaviour but can also be declared explicitly::
+An index of type ``plain`` is indexing the input data as-is without
+analyzing.  Using the ``plain`` index method is the default behaviour
+but can also be declared explicitly::
 
     cr> create table my_table1b1 (
     ...   first_column string INDEX using plain
@@ -463,21 +467,22 @@ This results in the same behaviour than without any index declaration::
 Fulltext index with analyzer
 ............................
 
-By defining an index on a column, it's analyzed data is indexed instead of the raw data.
-Thus, depending on the used analyzer, querying for the exact data may not work anymore.
-See :ref:`builtin-analyzer` for details about available builtin analyzer or
-:ref:`sql-ddl-custom-analyzer`.
+By defining an index on a column, it's analyzed data is indexed
+instead of the raw data.  Thus, depending on the used analyzer,
+querying for the exact data may not work anymore.  See
+:ref:`builtin-analyzer` for details about available builtin analyzer
+or :ref:`sql-ddl-custom-analyzer`.
 
-If no analyzer is specified using a fulltext index, the :ref:`standard <standard-analyzer>`
-analyzer is used::
+If no analyzer is specified when using a fulltext index, the
+:ref:`standard <standard-analyzer>` analyzer is used::
 
     cr> create table my_table1c (
     ...   first_column string INDEX using fulltext
     ... )
     CREATE OK (... sec)
 
-Defining the usage of a concrete analyzer is straight forward by defining the analyzer as a
-parameter using the ``WITH`` statement::
+Defining the usage of a concrete analyzer is straight forward by
+defining the analyzer as a parameter using the ``WITH`` statement::
 
     cr> create table my_table1d (
     ...   first_column string INDEX using fulltext with(analyzer='english')
@@ -488,8 +493,9 @@ parameter using the ``WITH`` statement::
 Defining a named index column definition
 ........................................
 
-It's also possible to define an index column which treat the data of a given column as input.
-This is especially useful if you want to search for both, the exact and analyzed data::
+It's also possible to define an index column which treat the data of a
+given column as input.  This is especially useful if you want to
+search for both, the exact and analyzed data::
 
     cr> create table my_table1e (
     ...   first_column string,
@@ -509,8 +515,9 @@ Of course defining a custom analyzer is possible here too::
 Defining a composite index
 ..........................
 
-Defining a composite (or combined) index is done using the same syntax as above despite multiple
-columns are given to the ``fulltext`` index method::
+Defining a composite (or combined) index is done using the same syntax
+as above despite multiple columns are given to the ``fulltext`` index
+method::
 
     cr> create table documents (
     ...   title string,
@@ -533,62 +540,29 @@ Composite indices can include nested columns within object columns as well::
 
 .. _sql-ddl-custom-analyzer:
 
+.. _create_custom_analyzer:
+
 Create custom analyzer
 ----------------------
 
-An analyzer consists of one tokenizer, zero or more token-filters, and zero or more char-filters.
+An analyzer consists of one tokenizer, zero or more token-filters, and
+zero or more char-filters.
 
-When a field-content is analyzed to become a stream of tokens, the char-filter is applied at first.
-It is used to filter some special chars from the stream of characters that make up the content.
+When a field-content is analyzed to become a stream of tokens, the
+char-filter is applied at first.  It is used to filter some special
+chars from the stream of characters that make up the content.
 
 Tokenizers split the possibly filtered stream of characters into tokens.
 
-Token-filters can add tokens, delete tokens or transform them to finally produce the desired
-stream of tokens.
-
-With these elements in place, analyzer provide finegrained control over building a token stream
-used for fulltext search.
-For example you can use language specific analyzers, tokenizers and token-filters to get proper
-search results for data provided in a certain language.
-
-
-
-Create Analyzer Syntax::
-
-    CREATE ANALYZER <analyzer_name> [EXTENDS <analyzer_name>] (
-        [
-          TOKENIZER <tokenizer_name> [WITH] (
-            <tokenizer_property>=<value>,
-            ...
-          ),
-        ]
-        [
-          TOKEN_FILTERS [WITH] (
-            <token_filter_name>
-            [ [WITH] (
-                <token_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          ),
-        ]
-        [
-          CHAR_FILTERS [WITH] (
-            <char_filter_name>
-            [ [WITH] (
-                <char_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          )
-        ]
-    )
-
-Multiple char filters and token filters are allowed but at maximum one tokenizer.
-Order does not matter.
-A simple Example::
+Token-filters can add tokens, delete tokens or transform them to
+finally produce the desired stream of tokens.
+
+With these elements in place, analyzers provide finegrained control
+over building a token stream used for fulltext search.  For example
+you can use language specific analyzers, tokenizers and token-filters
+to get proper search results for data provided in a certain language.
+
+Here is a simple Example::
 
     cr> create ANALYZER myanalyzer (
     ...   TOKENIZER whitespace,
@@ -606,22 +580,17 @@ A simple Example::
     ... )
     CREATE OK (... sec)
 
-This example creates an analyzer called ``myanalyzer`` to be used in index-definitions and
-index-constraints.
-It will use a :ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter` token-filter
-and a :ref:`kstem-tokenfilter` token-filter, a :ref:`htmlstrip-charfilter` char-filter
-and a custom char-filter that extends the :ref:`mapping-charfilter` char-filter.
-
-You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and :ref:`builtin-char-filter`
-by just writing their names and you can extend and parameterize them,
-see for example the ``mymapping`` char-filter above. You have to give these extended ones a
-unique name.
+This example creates an analyzer called ``myanalyzer`` to be used in
+index-definitions and index-constraints.  It will use a
+:ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter`
+token-filter and a :ref:`kstem-tokenfilter` token-filter, a
+:ref:`htmlstrip-charfilter` char-filter and a custom char-filter that
+extends the :ref:`mapping-charfilter` char-filter.
 
-.. note:: Starting with release 0.18.0 one could extend custom tokenizers,
-          token-filters and char-filters. This is not possible anymore.
-          Nonetheless you can still extend custom analyzers to reuse their elements.
-          We might reintroduce this feature when we support creating tokenizers etc. standalone
-          e.g. by a ``CREATE TOKENIZER`` statement.
+You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and
+:ref:`builtin-char-filter` by just writing their names and you can
+extend and parameterize them, see for example the ``mymapping``
+char-filter above. You have to give these extended ones a unique name.
 
 Extending Bultin Analyzer
 -------------------------
@@ -635,12 +604,12 @@ You can extend and parameterize :ref:`builtin-analyzer` like this::
     ... )
     CREATE OK (... sec)
 
-If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or token-filter cannot be defined.
-In this case use the parameters available for the extended :ref:`builtin-analyzer`.
+If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or
+token-filter cannot be defined.  In this case use the parameters
+available for the extended :ref:`builtin-analyzer`.
 
-If you extend custom-analyzers, every part of the analyzer that is ommitted will be taken from
-the extended one.
-Example::
+If you extend custom-analyzers, every part of the analyzer that is
+ommitted will be taken from the extended one.  Example::
 
     cr> create ANALYZER e2 EXTENDS myanalyzer (
     ...     TOKENIZER mypattern WITH (
@@ -650,8 +619,8 @@ Example::
     ... )
     CREATE OK (... sec)
 
-This analyzer will use the char-filters and token-filters from ``myanalyzer``
-and will override the tokenizer with ``mypattern``.
+This analyzer will use the char-filters and token-filters from
+``myanalyzer`` and will override the tokenizer with ``mypattern``.
 
 Analyzer Reference
 ------------------
diff --git a/docs/sql/dml.txt b/docs/sql/dml.txt
index 6928a51ab2..c2f636fb9d 100644
--- a/docs/sql/dml.txt
+++ b/docs/sql/dml.txt
@@ -548,6 +548,8 @@ Deleting rows in Crate is done using the SQL ``DELETE`` statement::
     DELETE OK, ... rows affected (... sec)
 
 
+.. _importing_data:
+
 Importing data
 ==============
 
diff --git a/docs/sql/index.txt b/docs/sql/index.txt
index c6ea8397ac..c5c9dccf3c 100644
--- a/docs/sql/index.txt
+++ b/docs/sql/index.txt
@@ -2,8 +2,9 @@
 Crate SQL
 =========
 
-Crate uses SQL to query documents.
-For general information about SQL please refer to `Wikipedia SQL`_.
+Crate uses SQL to query documents. For consice reference documentation
+see :doc:`sql`. For general information about SQL please refer to
+`Wikipedia SQL`_.
 
 .. _`Wikipedia SQL`: http://en.wikipedia.org/wiki/Sql
 
diff --git a/docs/sql/reference/copy.txt b/docs/sql/reference/copy.txt
new file mode 100644
index 0000000000..f0e19c946d
--- /dev/null
+++ b/docs/sql/reference/copy.txt
@@ -0,0 +1,39 @@
+====
+COPY
+====
+
+Copy data between a file and a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    COPY table_ident FROM 'path'
+
+Description
+===========
+
+COPY FROM copies data from the filesystem of any cluster node to a
+specified table.
+
+The files to be copied from need to be accessible from the crate
+server process and the name must be specified from the viewpoint of
+the server.
+
+The input files need to have one line per record. Records are
+formatted in JSON.
+
+For examples see: :ref:`importing_data`.
+
+Parameters
+==========
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table where the data should be put.
+
+:path: A file or directory path with an optional `PCRE`_ file pattern
+    suffix. If the path is relative, it is based on the absolute path
+    of the node's data location.
+
+.. _PCRE: http://www.pcre.org/
diff --git a/docs/sql/reference/create_analyzer.txt b/docs/sql/reference/create_analyzer.txt
new file mode 100644
index 0000000000..051ccc6514
--- /dev/null
+++ b/docs/sql/reference/create_analyzer.txt
@@ -0,0 +1,64 @@
+===============
+CREATE ANALYZER
+===============
+
+Define a new fulltext analyzer.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name EXTENDS parent_analyzer_name
+        WITH ( override_parameter [= value] [, ... ] )
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name (
+        [ TOKENIZER tokenizer_name
+           [ WITH ( tokenizer_parameter [= value] [, ... ] ) ]
+        ]
+        [ TOKEN_FILTERS (
+            { token_filter_name
+              [ WITH ( token_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+        [ CHAR_FILTERS (
+            { char_filter_name
+              [ WITH ( char_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+    )
+
+Description
+===========
+
+CREATE ANALYZER speifies a whole analyzer chain for use in fulltext
+searches. It is possible to extend an existing analyzer or define a
+new analyzer chain from scratch. For examples and detailed explanation
+see :ref:`create_custom_analyzer`.
+
+Parameters
+==========
+
+:analyzer_name: the globally unique name of the analzyer being created.
+
+:parent_analyzer_name: the name of the analyzer to inherit defaults from.
+
+:override_parameter: the name of a parameter of the parent analyzer
+    which should be assigned a new value to.
+
+:tokenizer_name: the name of a builtin tokenizer to be used.
+
+:tokenizer_parameter: a name of a parameter for a given tokenizer.
+
+:token_filter_name: the name of a builtin token filter to be used.
+
+:token_filter_parameter: a name of a parameter for a given token filter.
+
+:char_filter_name: the name of a builtin char filter to be used.
+
+:char_filter_parameter: a name of a parameter for a given char filter.
+
diff --git a/docs/sql/reference/create_blob_table.txt b/docs/sql/reference/create_blob_table.txt
new file mode 100644
index 0000000000..d895ff6c4e
--- /dev/null
+++ b/docs/sql/reference/create_blob_table.txt
@@ -0,0 +1,24 @@
+=================
+CREATE BLOB TABLE
+=================
+
+Define a new table for storing binary large objects.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE BLOB TABLE table_name
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+Description
+===========
+
+CREATE BLOB TABLE will create a new table for holding BLOBS. For
+details and examples see :ref:`blob_support`.
+
+The CLUSTERED and WITH clauses follow the same semantics described
+under :ref:`clustered_clause` and :ref:`with_clause`.
diff --git a/docs/sql/reference/create_table.txt b/docs/sql/reference/create_table.txt
new file mode 100644
index 0000000000..ff2edafabc
--- /dev/null
+++ b/docs/sql/reference/create_table.txt
@@ -0,0 +1,148 @@
+============
+CREATE TABLE
+============
+
+Define a new table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE TABLE table_name ( [
+    { column_name data_type [ column_constraint [ ... ] ] | table_constraint }
+    [, ... ] ] )
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+where ``column_constraint`` is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY |
+    INDEX { OFF | USING { PLAIN |
+                          FULLTEXT [ WITH ( analyzer = analyzer_name ) ]  }
+  }
+
+
+and table_constraint is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY ( column_name [, ... ] ) |
+    INDEX index_name USING FULLTEXT ( column_name [, ... ] )
+         [ WITH ( analyzer = analyzer_name ) ]
+  }
+
+Description
+===========
+
+CREATE TABLE will create a new, initially empty table.
+
+Setting a schema (for example, CREATE TABLE myschema.mytable ...) is
+currently not supprted. All userspace defined data tables are defined
+under the default schema named ``doc``.
+
+The optional constraint clauses specify constraints (tests) that new
+or updated rows must satisfy for an insert or update operation to
+succeed. A constraint is an SQL object that helps define the set of
+valid values in the table in various ways.
+
+There are two ways to define constraints: table constraints and column
+constraints. A column constraint is defined as part of a column
+definition. A table constraint definition is not tied to a particular
+column, and it can encompass more than one column. Every column
+constraint can also be written as a table constraint; a column
+constraint is only a notational convenience for use when the
+constraint only affects one column.
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to
+    be created.
+
+:column_name: The name of a column to be created in the new table.
+
+:data_type: The data type of the column. This can include array and
+    object specifiers. For more information on the data types
+    supported by Crate see .
+
+PRIMARY KEY Constraint
+======================
+
+The PRIMARY KEY constraint specifies that a column or columns of a
+table can contain only unique (non-duplicate), nonnull values.
+
+Only one primary key can be specified for a table, whether as a column
+constraint or a table constraint.
+
+INDEX Constraint
+================
+
+The INDEX constraint specifies a specific index method on one or more
+columnns.
+
+It is possible to define more than one index per table, whether as a
+column constraint or a table constraint.
+
+For further details about the meaning of the options see
+:ref:`indices_and_fulltext`.
+
+.. _clustered_clause:
+
+CLUSTERED Clause
+================
+
+The optional CLUSTERED clause specifies how a table should be
+distributed accross a cluster.
+
+:num_shards: specifies the number of shards a table is stored in, the default is 5.
+
+:routing_column: allows to explicitly specify a column or field on
+    which basis rows are sharded. all rows having the same value in
+    ``routing_column`` are stored in the same shard. The default is
+    the primary key if specified, otherwise the internal ``_id``
+    column.
+
+.. _with_clause:
+
+WITH Clause
+-----------
+
+The optional WITH clause can specify storage parameters for tables.
+
+.. code-block:: sql
+
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+:storage_parameter: specifies an optional storage parameter for the table.
+
+Available storage paramters are:
+
+
+.. _number_of_replicas:
+
+number_of_replicas
+~~~~~~~~~~~~~~~~~~
+
+Specifies the number or range of replicas each shard of a table should
+have for normal operation, the default is to have 1 replica.
+
+The number of replicas is defined like this:
+
+.. code-block:: sql
+
+    min_replicas [ - [ max_replicas ] ]
+
+:min_replicas: The minimum number of replicas required.
+
+:max_replicas: The maximum number of replicas. The actual maximum
+    number of replicas is max(num_replicas, N-1), where N is the
+    number of data nodes in the cluster. If ``max_replicas`` is the
+    string ``all`` then it will always be N.
+
+For further details and examples see :ref:`replication`.
+
diff --git a/docs/sql/reference/delete.txt b/docs/sql/reference/delete.txt
new file mode 100644
index 0000000000..c9fe959745
--- /dev/null
+++ b/docs/sql/reference/delete.txt
@@ -0,0 +1,30 @@
+======
+DELETE
+======
+
+Delete rows of a table
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DELETE FROM table_ident [ WHERE condition ]
+
+Description
+===========
+
+DELETE deletes rows that satisfy the WHERE clause from the specified
+table. If the WHERE clause is absent, the effect is to delete all rows
+in the table. The result is a valid, but empty table.
+
+Parameters
+==========
+
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table to delete rows from.
+
+:condition: An expression that returns a value of type boolean. Only
+    rows for which this expression returns true will be deleted.
+
diff --git a/docs/sql/reference/drop_table.txt b/docs/sql/reference/drop_table.txt
new file mode 100644
index 0000000000..7cc7822b04
--- /dev/null
+++ b/docs/sql/reference/drop_table.txt
@@ -0,0 +1,25 @@
+==========
+DROP TABLE
+==========
+
+Remove a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DROP [BLOB] TABLE table_name
+
+Description
+===========
+
+DROP TABLE removes tables from the cluster.
+
+Use the ``BLOB`` keyword in order to remove a blob table (see
+:ref:`blob_support`).
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to be removed.
diff --git a/docs/sql/reference/insert.txt b/docs/sql/reference/insert.txt
new file mode 100644
index 0000000000..ef13f0504e
--- /dev/null
+++ b/docs/sql/reference/insert.txt
@@ -0,0 +1,45 @@
+======
+INSERT
+======
+
+Create new rows in a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   INSERT INTO table_ident
+    [ ( column_ident [, ...] ) ]
+    VALUES ( expression [, ...] ) [, ...]
+
+Description
+===========
+
+INSERT creates one or more rows specified by value expressions.
+
+The target column names can be listed in any order. If no list of
+column names is given at all, the default is all the columns of the
+table in lexical order; or the first N column names, if there are only
+N columns supplied by the VALUES clause. The values supplied by the
+VALUES clause are associated with the explicit or implicit column list
+left-to-right.
+
+Each column not present in the explicit or implicit column list will
+not be filled.
+
+If the expression for any column is not of the correct data type,
+automatic type conversion will be attempted.
+
+
+Parameters
+==========
+
+:table_ident: The identifier (optionally schema-qualified) of an
+    existing table.
+
+:column_ident: The name of a column or field in the table pointed to
+   by table_ident.
+
+:expression: An expression or value to assign to the corresponding column.
+
diff --git a/docs/sql/reference/select.txt b/docs/sql/reference/select.txt
new file mode 100644
index 0000000000..84f32352ab
--- /dev/null
+++ b/docs/sql/reference/select.txt
@@ -0,0 +1,193 @@
+======
+SELECT
+======
+
+Retrieve rows from a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   SELECT * | expression [ [ AS ] output_name ] [, ...] FROM table_ident
+     [ WHERE condition ]
+     [ GROUP BY expression [, ...] ]
+     [ ORDER BY expression [ ASC | DESC ] [, ...] ]
+     [ LIMIT num_results ]
+     [ OFFSET start ]
+
+
+Description
+===========
+
+SELECT retrieves rows from a table. The general processing of SELECT
+is as follows:
+
+- The FROM item points to the table where the data should be retrieved
+  from.
+
+- If the WHERE clause is specified, all rows that do not satisfy the
+  condition are eliminated from the output. (See WHERE Clause below.)
+
+- If the GROUP BY clause is specified, the output is combined into
+  groups of rows that match on one or more values.
+
+- The actual output rows are computed using the SELECT output
+  expressions for each selected row or row group.
+
+- If the ORDER BY clause is specified, the returned rows are sorted in
+  the specified order. If ORDER BY is not given, the rows are returned
+  in whatever order the system finds fastest to produce.
+
+- If the LIMIT or OFFSET clause is specified, the SELECT statement
+  only returns a subset of the result rows.
+
+Parameters
+==========
+
+SELECT List
+-----------
+
+The SELECT list specifies expressions that form the output rows of the
+SELECT statement. The expressions can (and usually do) refer to
+columns computed in the FROM clause.
+
+.. code-block:: sql
+
+    SELECT * | expression [ [ AS ] output_name ] [, ...]
+
+Just as in a table, every output column of a SELECT has a name. In a
+simple SELECT this name is just used to label the column for
+display. To specify the name to use for an output column, write AS
+``output_name`` after the column's ``expression``. (You can omit AS,
+but only if the desired output name does not match any reserved
+keyword. For protection against possible future keyword additions, it
+is recommended that you always either write AS or double-quote the
+output name.) If you do not specify a column name, a name is chosen
+automatically by Crate. If the column's expression is a simple column
+reference then the chosen name is the same as that column's name. In
+more complex cases a function or type name may be used, or the system
+may fall back on a generated name.
+
+An output column's name can be used to refer to the column's value in
+ORDER BY and GROUP BY clauses, but not in the WHERE clause; there you
+must write out the expression instead.
+
+Instead of an expression, ``*`` can be written in the output list as a
+shorthand for all the columns of the selected rows. Also, you can
+write table_name.* as a shorthand for the columns coming from just
+that table. In these cases it is not possible to specify new names
+with AS; the output column names will be the same as the table
+columns' names.
+
+FROM Clause
+-----------
+
+The FROM clause specifies the source table for the SELECT:
+
+.. code-block:: sql
+
+    FROM table_ident
+
+:table_ident: The name (optionally schema-qualified) of an existing table.
+
+
+WHERE Clause
+------------
+
+The optional WHERE clause defines the condition to be met for a row to
+be returned:
+
+.. code-block:: sql
+
+    WHERE condition
+
+:condition: a where condition is any expression that evaluates to a
+  result of type boolean. Any row that does not satisfy this condition
+  will be eliminated",added reference docs,"""Update documentation for SQL reference, blob support, replication, and fulltext search""","""Added documentation for blob tables, replication, fulltext indices, custom analyzers, and SQL reference pages for COPY, CREATE ANALYZER, CREATE BLOB TABLE, CREATE TABLE, DELETE, DROP TABLE, INSERT, and SELECT statements.""","This commit adds documentation for Blob support in Crate, including a section on Blob Support in the main documentation and a reference page for the CREATE BLOB TABLE statement. It also adds a section on replication and updates the DDL and DML documentation to include links to the new sections. Additionally, it removes some outdated information about extending custom tokenizers, token-filters and char-filters and updates the SQL reference documentation to include a page for the COPY statement and a page for the CREATE TABLE statement, which includes information on the PRIMARY KEY and INDEX constraints. The documentation for the CREATE ANALYZER statement has also been updated to include a more detailed description and parameter list.",**Commit Message:** Add detailed SQL reference documentation for Crate with cross-references and examples.,Model 1
"diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
index e33cb784..545f9af3 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
@@ -17,6 +17,7 @@ package com.netflix.curator.framework.recipes.cache;
 
 import org.apache.zookeeper.data.Stat;
 
+@SuppressWarnings({""LoopStatementThatDoesntLoop""})
 public class ChildData implements Comparable<ChildData>
 {
     private final String    path;
@@ -31,9 +32,34 @@ public class ChildData implements Comparable<ChildData>
         this.data = data;
     }
 
-    boolean     isComplete()
+    boolean     isComplete(PathChildrenCacheMode mode)
     {
-        return (path != null) && (stat != null) && (data != null);
+        boolean     isComplete = false;
+        if ( path != null )
+        {
+            switch ( mode )
+            {
+                case CACHE_DATA_AND_STAT:
+                {
+                    isComplete = (stat != null) && (data != null);
+                    break;
+                }
+                
+                case CACHE_DATA:
+                {
+                    isComplete = (data != null);
+                    break;
+                }
+
+                case CACHE_PATHS_ONLY:
+                {
+                    isComplete = true;
+                    break;
+                }
+            }
+        }
+
+        return isComplete;
     }
 
     long        getThisObjectCreationTimeMs()
@@ -79,33 +105,47 @@ public class ChildData implements Comparable<ChildData>
         return path.hashCode();
     }
 
-    public ChildData setPath(String path)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setStat(Stat stat)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setData(byte[] data)
-    {
-        return new ChildData(path, stat, data);
-    }
-
+    /**
+     * Returns the full path of the this child
+     *
+     * @return full path
+     */
     public String getPath()
     {
         return path;
     }
 
+    /**
+     * Returns the stat data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     *
+     * @return stat or null
+     */
     public Stat getStat()
     {
         return stat;
     }
 
+    /**
+     * <p>Returns the node data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     * or {@link PathChildrenCacheMode#CACHE_DATA}.</p>
+     *
+     * <p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change
+     * the values in the array any other callers to this method will see the change.</p>
+     *
+     * @return node data or null
+     */
     public byte[] getData()
     {
         return data;
     }
+
+    ChildData setStat(Stat stat)
+    {
+        return new ChildData(path, stat, data);
+    }
+
+    ChildData setData(byte[] data)
+    {
+        return new ChildData(path, stat, data);
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
index 54835545..80e0d754 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
@@ -17,13 +17,12 @@ package com.netflix.curator.framework.recipes.cache;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.google.common.util.concurrent.MoreExecutors;
-import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.CuratorFramework;
+import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.api.CuratorListener;
 import com.netflix.curator.utils.ZKPaths;
 import org.apache.zookeeper.WatchedEvent;
@@ -31,7 +30,6 @@ import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.data.Stat;
 import java.io.Closeable;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
@@ -53,10 +51,13 @@ import java.util.concurrent.ThreadFactory;
  */
 public class PathChildrenCache implements Closeable
 {
-    private final CuratorFramework client;
+    private final CuratorFramework          client;
     private final String                    path;
+    private final PathChildrenCacheMode     mode;
     private final ExecutorService           executorService;
 
+    private static final ChildData          existingDataMarker = new ChildData(null, null, null);
+
     private final BlockingQueue<EventEntry>                         listenerEvents = new LinkedBlockingQueue<EventEntry>();
     private final Map<PathChildrenCacheListener, ListenerEntry>     listeners = Maps.newConcurrentMap();
     private final Map<String, ChildData>                            currentData = Maps.newConcurrentMap();
@@ -127,26 +128,27 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private static final int                EXPIRE_INCOMING_TIME_MS = 5 * 60 * 60 * 1000;   // 5 minutes
-
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      */
-    public PathChildrenCache(CuratorFramework client, String path)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode)
     {
-        this(client, path, Executors.defaultThreadFactory());
+        this(client, path, mode, Executors.defaultThreadFactory());
     }
 
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      * @param threadFactory factory to use when creating internal threads
      */
-    public PathChildrenCache(CuratorFramework client, String path, ThreadFactory threadFactory)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode, ThreadFactory threadFactory)
     {
         this.client = client;
         this.path = path;
+        this.mode = mode;
         executorService = Executors.newFixedThreadPool(1, threadFactory);
     }
 
@@ -222,7 +224,7 @@ public class PathChildrenCache implements Closeable
     }
 
     /**
-     * Return a copy of the current data. There are no guarantees of accuracy. This is
+     * Return the current data. There are no guarantees of accuracy. This is
      * merely the most recent view of the data. The data is returned in sorted order.
      *
      * @return list of children and data
@@ -232,6 +234,19 @@ public class PathChildrenCache implements Closeable
         return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()));
     }
 
+    /**
+     * Return the current data for the given path. There are no guarantees of accuracy. This is
+     * merely the most recent view of the data. If there is no child with that path, <code>null</code>
+     * is returned.
+     *
+     * @param fullPath full path to the node to check
+     * @return data or null
+     */
+    public ChildData            getCurrentData(String fullPath)
+    {
+        return currentData.get(fullPath);
+    }
+
     /**
      * Clear out current data and begin a new query on the path
      *
@@ -240,12 +255,12 @@ public class PathChildrenCache implements Closeable
     public void clearAndRefresh() throws Exception
     {
         currentData.clear();
-        incomingData.clear();
         refresh();
     }
 
     private void refresh() throws Exception
     {
+        incomingData.clear();
         client.getChildren().usingWatcher(watcher).inBackground().forPath(path);
     }
 
@@ -331,7 +346,7 @@ public class PathChildrenCache implements Closeable
         {
             case CHILDREN:
             {
-                processChildren(event.getChildren(), true);
+                processChildren(event.getChildren());
                 break;
             }
 
@@ -371,20 +386,13 @@ public class PathChildrenCache implements Closeable
     {
         switch ( watchedEvent.getType() )
         {
-            case NodeCreated:
             case NodeDataChanged:
             {
-                processNodeCreated(ZKPaths.getNodeFromPath(watchedEvent.getPath()));
-                break;
-            }
-
-            case NodeDeleted:
-            {
-                processNodeDeleted(watchedEvent.getPath());
+                processDataChanged(watchedEvent.getPath());
                 break;
             }
 
-            case NodeChildrenChanged:
+            default:
             {
                 refresh();
                 break;
@@ -392,43 +400,31 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private void processNodeCreated(String path) throws Exception
+    private void processDataChanged(String path) throws Exception
     {
-        List<String>        l = Lists.newArrayList(path);
-        processChildren(l, false);
-    }
-
-    private void processNodeDeleted(String path)
-    {
-        ChildData       oldData = currentData.remove(path);
-        incomingData.remove(path);
-
-        if ( oldData != null )
-        {
-            listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, oldData)));
-        }
+        addIncomingPath(path);
     }
 
     private void        checkSetCurrent()
     {
-        Iterator<ChildData>     iterator = incomingData.values().iterator();
-        while ( iterator.hasNext() )
+        for ( Map.Entry<String, ChildData> entry : incomingData.entrySet() )
         {
-            ChildData       data = iterator.next();
-            if ( data.isComplete() )
+            String          path = entry.getKey();
+            ChildData       data = entry.getValue();
+
+            if ( data.isComplete(mode) )
             {
                 boolean     isNew = (currentData.put(data.getPath(), data) == null);
-                iterator.remove();
+                incomingData.remove(path);
 
                 listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(isNew ? PathChildrenCacheEvent.Type.CHILD_ADDED : PathChildrenCacheEvent.Type.CHILD_UPDATED, data)));
             }
-            else
+            else if ( isTheExistingDataMarker(data) )
             {
-                long        age = System.currentTimeMillis() - data.getThisObjectCreationTimeMs();
-                if ( age >= EXPIRE_INCOMING_TIME_MS )
-                {
-                    iterator.remove();
-                }
+                ChildData       removedData = currentData.remove(path);
+                incomingData.remove(path);
+
+                listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, removedData)));
             }
         }
     }
@@ -457,23 +453,51 @@ public class PathChildrenCache implements Closeable
         checkSetCurrent();
     }
 
-    private void processChildren(List<String> children, boolean doRetain) throws Exception
+    private void processChildren(List<String> children) throws Exception
     {
-        for ( String child : children )
+        for ( String path : currentData.keySet() )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            incomingData.put(actualPath, new ChildData(actualPath, null, null));
+            incomingData.put(path, existingDataMarker);
         }
-        if ( doRetain )
+
+        for ( String child : children )
         {
-            currentData.keySet().retainAll(incomingData.keySet());
+            String      actualPath = ZKPaths.makePath(path, child);
+            addIncomingPath(actualPath);
         }
 
-        for ( String child : children )
+        checkSetCurrent();
+    }
+
+    private void addIncomingPath(String actualPath) throws Exception
+    {
+        incomingData.put(actualPath, new ChildData(actualPath, null, null));
+
+        switch ( mode )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);
-            client.checkExists().usingWatcher(watcher).inBackground().forPath(actualPath);
+            case CACHE_DATA_AND_STAT:
+            {
+                client.checkExists().inBackground().forPath(actualPath);    // to get the stat
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_DATA:
+            {
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_PATHS_ONLY:
+            {
+                // do nothing
+                break;
+            }
         }
     }
+
+    private static boolean isTheExistingDataMarker(ChildData data)
+    {
+        return data == existingDataMarker;
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
new file mode 100644
index 00000000..2f1264ef
--- /dev/null
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
@@ -0,0 +1,25 @@
+package com.netflix.curator.framework.recipes.cache;
+
+/**
+ * Controls which data is cached
+ */
+public enum PathChildrenCacheMode
+{
+    /**
+     * The cache will hold all the children, the data for each child node
+     * and the stat for each child node
+     */
+    CACHE_DATA_AND_STAT,
+
+    /**
+     * The cache will hold all the children and the data for each child node.
+     * {@link ChildData#getStat()} will return <code>null</code>.
+     */
+    CACHE_DATA,
+
+    /**
+     * The cache will hold only the children path names.
+     * {@link ChildData#getStat()} and {@link ChildData#getData()} will both return <code>null</code>.
+     */
+    CACHE_PATHS_ONLY
+}
diff --git a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
index 35c78a8a..f5718ae7 100644
--- a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
+++ b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
@@ -29,18 +29,104 @@ import java.util.concurrent.TimeUnit;
 public class TestPathChildrenCache extends BaseClassForTests
 {
     @Test
-    public void     testException() throws Exception
+    public void     testModes() throws Exception
     {
         CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));
         client.start();
         try
         {
-            Assert.assertTrue(client.getZookeeperClient().blockUntilConnectedOrTimedOut());
+            client.create().forPath(""/test"", new byte[0]);
+
+            for ( PathChildrenCacheMode mode : PathChildrenCacheMode.values() )
+            {
+                internalTestMode(client, mode);
+
+                client.delete().forPath(""/test/one"");
+                client.delete().forPath(""/test/two"");
+            }
+        }
+        finally
+        {
+            client.close();
+        }
+    }
+
+    private void     internalTestMode(CuratorFramework client, PathChildrenCacheMode testMode) throws Exception
+    {
+        PathChildrenCache       cache = new PathChildrenCache(client, ""/test"", testMode);
+
+        final CountDownLatch    latch = new CountDownLatch(2);
+        cache.addListener
+        (
+            new PathChildrenCacheListener()
+            {
+                @Override
+                public void handleException(CuratorFramework client, Exception exception)
+                {
+                }
+
+                @Override
+                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception
+                {
+                    if ( event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED )
+",Enhanced the path cache to be more efficient and allow for different caching modes .,"""Added PathChildrenCacheMode enum and updated PathChildrenCache to support different caching modes""",Added caching mode to PathChildrenCache and updated related classes and tests.,"This commit contains several changes related to the PathChildrenCache and ChildData classes in the Curator framework, which is a high-level client library for Apache Zookeeper. Here is a summary of the changes:

1. A new enum `PathChildrenCacheMode` has been introduced to control which data is cached by the `PathChildrenCache`. The three possible modes are `CACHE_DATA_AND_STAT`, `CACHE_DATA`, and `CACHE_PATHS_ONLY`.

2. The `ChildData` class has been updated to include a new method `isComplete(PathChildrenCacheMode mode)` that checks if the child data is complete based on the caching mode. The existing methods `setPath(String path)`, `setStat(Stat stat)`, and `setData(byte[] data)` have been removed.

3. The `PathChildrenCache` class has been updated to include a new constructor that takes a `PathChildrenCacheMode` argument. The `clearAndRefresh()` and `refresh()` methods have been updated to clear the incoming data. The `getCurrentData(String fullPath)` method has been added to return the current data for a given path. The `processDataChanged(String path)` method has been updated to add the incoming path to the incoming data. The `checkSetCurrent()` method has been updated to handle the existing data marker.

4. A new test method `testModes()` has been added to the `TestPathChildrenCache` class to test the different caching modes.

5. The commit message should summarize these changes, for example: ""Updated PathChildrenCache and ChildData to support different caching modes and added new test method to TestPathChildrenCache.""","""Add caching modes for PathChildrenCache and enhance related test cases to verify each mode""",Model 4
"diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
index fb5d8b205..fdd9f46b3 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
@@ -42,8 +42,6 @@ import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.util.ResultSetAdapter;
 
-import static com.mysema.query.sql.SQLListenerContextBuilder.newContext;
-
 /**
  * AbstractSQLQuery is the base type for SQL query implementations
  *
@@ -130,9 +128,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param metadata the meta data for that context
      * @return  the newly started context
      */
-    protected SQLListenerContext startContext(Connection connection, QueryMetadata metadata)
+    protected SQLListenerContextImpl startContext(Connection connection, QueryMetadata metadata)
     {
-        SQLListenerContext context = newContext(metadata).with(connection).build();
+        SQLListenerContextImpl context = new SQLListenerContextImpl(metadata,connection);
         listeners.start(context);
         return context;
     }
@@ -144,9 +142,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param e the exception
      * @return the new context
      */
-    protected SQLListenerContext onException(SQLListenerContext context, Exception e)
+    protected SQLListenerContextImpl onException(SQLListenerContextImpl context, Exception e)
     {
-        context = newContext(context).with(e).build();
+        context.setException(e);
         listeners.exception(context);
         return context;
     }
@@ -171,7 +169,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     public ResultSet getResults(Expression<?>... exprs) {
         queryMixin.addProjection(exprs);
 
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -179,7 +177,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -189,7 +187,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -227,7 +225,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
 
     @SuppressWarnings(""unchecked"")
     private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullable final Expression<RT> expr) {
-        SQLListenerContext context = startContext(conn,queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn,queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -235,7 +233,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
 
@@ -245,7 +243,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), metadata.getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -300,7 +298,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     @Override
     public <RT> List<RT> list(Expression<RT> expr) {
         expr = queryMixin.addProjection(expr);
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -308,7 +306,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -318,7 +316,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             try {
                 setParameters(stmt, constants, serializer.getConstantPaths(), queryMixin.getMetadata().getParams());
-                context = newContext(context).with(stmt).build();
+                context.addPreparedStatement(stmt);
                 listeners.prepared(context);
 
                 listeners.preExecute(context);
@@ -359,23 +357,16 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
                     }
                     return rv;
                 } catch (IllegalAccessException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context, e);
                     throw new QueryException(e);
                 } catch (InvocationTargetException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (InstantiationException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (SQLException e) {
-                    context = onException(context, e);
-
+                    onException(context,e);
                     throw configuration.translate(queryString, constants, e);
                 } finally {
                     rs.close();
@@ -481,7 +472,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     }
 
     private long unsafeCount() throws SQLException {
-        SQLListenerContext context = startContext(conn,getMetadata());
+        SQLListenerContextImpl context = startContext(conn,getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(true);
@@ -489,7 +480,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         List<Object> constants = serializer.getConstants();
@@ -501,7 +492,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
 
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
index d64107c66..e542adcb7 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
@@ -18,11 +18,11 @@ class SQLListenerAdapter implements SQLDetailedListener
 {
 
     private final SQLListener sqlListener;
-    private final SQLDetailedListener SQLDetailedListener;
+    private final SQLDetailedListener detailedListener;
 
     SQLListenerAdapter(final SQLListener sqlListener)
     {
-        this.SQLDetailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
+        this.detailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
         this.sqlListener = sqlListener;
     }
 
@@ -34,81 +34,81 @@ class SQLListenerAdapter implements SQLDetailedListener
     @Override
     public void start(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.start(context);
+            detailedListener.start(context);
         }
     }
 
     @Override
     public void preRender(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preRender(context);
+            detailedListener.preRender(context);
         }
     }
 
     @Override
     public void rendered(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.rendered(context);
+            detailedListener.rendered(context);
         }
     }
 
     @Override
     public void prePrepare(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prePrepare(context);
+            detailedListener.prePrepare(context);
         }
     }
 
     @Override
     public void prepared(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prepared(context);
+            detailedListener.prepared(context);
         }
     }
 
     @Override
     public void preExecute(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preExecute(context);
+            detailedListener.preExecute(context);
         }
     }
 
     @Override
     public void executed(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.executed(context);
+            detailedListener.executed(context);
         }
     }
 
     @Override
     public void end(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.end(context);
+            detailedListener.end(context);
         }
     }
 
     @Override
     public void exception(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.exception(context);
+            detailedListener.exception(context);
         }
     }
 
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
index 5c8563edd..c5c14681b 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
@@ -5,23 +5,34 @@ import com.mysema.query.QueryMetadata;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.util.Collection;
-import java.util.Map;
 
 /**
- * A context object that is progressively filled out during query execution and is
- * passed to each {@link SQLDetailedListener} callback method
+ * A context object that is progressively filled out during query execution and is passed to each {@link
+ * SQLDetailedListener} callback method
  */
 public interface SQLListenerContext
 {
     /**
-     * The context getMap is a general purpose place that listeners can place objects.  It allows listeners to pass context
-     * between themselves during callbacks.
+     * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
      * <p/>
-     * This is never null but can be empty
      *
-     * @return the context getMap
+     * @param dataKey the key to look up
+     * @return the context object under that key
      */
-    Map<String, Object> getMap();
+    Object getData(String dataKey);
+
+    /**
+     * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
+     * <p/>
+     * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
+     * and then access if after that.
+     *
+     * @param dataKey the key to use
+     * @param value the value to place under that key
+     */
+    void setData(String dataKey, Object value);
 
     /**
      * @return the underlying query metadata
@@ -31,10 +42,17 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
-     * @return the underlying sql
+     * @return the underlying sql or first in a batch query
      */
     String getSQL();
 
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
+     * @return the underlying sql collection if the query is a batch query
+     */
+    Collection<String> getSQLStatements();
+
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
@@ -59,6 +77,13 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
+     * @return the underlying prepared statement or the first if its batch query
+     */
+    PreparedStatement getPreparedStatement();
+
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
      * @return the underlying set of prepared statements
      */
     Collection<PreparedStatement> getPreparedStatements();
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
deleted file mode 100644
index a1e663805..000000000
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.mysema.query.sql;
-
-import com.google.common.collect.Lists;
-import com.mysema.query.QueryMetadata;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * A builder of {@link com.mysema.query.sql.SQLListenerContext} objects
- */
-public class SQLListenerContextBuilder
-{
-    private Map<String, Object> contextMap = new HashMap<String, Object>();
-
-    private QueryMetadata md;
-
-    private String sql;
-
-    private RelationalPath<?> entity;
-
-    private Connection connection;
-
-    private Exception exception;
-
-    private Collection<PreparedStatement> preparedStatements;
-
-    SQLListenerContextBuilder(final QueryMetadata md)
-    {
-        this.md = md;
-    }
-
-    public static SQLListenerContextBuilder newContext(QueryMetadata md)
-    {
-        return new SQLListenerContextBuilder(md);
-    }
-
-    public static SQLListenerContextBuilder newContext(SQLListenerContext context)
-    {
-        return new SQLListenerContextBuilder(context.getMetadata())
-                .with(context.getMap())
-                .with(context.getConnection())
-                .with(context.getEntity())
-                .with(context.getException())
-                .with(context.getPreparedStatements())
-                .with(context.getSQL())
-                ;
-    }
-
-    SQLListenerContextBuilder with(Map<String, Object> contextMap)
-    {
-        this.contextMap = contextMap;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(RelationalPath<?> entity)
-    {
-        this.entity = entity;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(String sql)
-    {
-        this.sql = sql;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Exception exception)
-    {
-        this.exception = exception;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Connection connection)
-    {
-        this.connection = connection;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(PreparedStatement preparedStatement)
-    {
-        if (preparedStatement != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatement);
-        }
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Collection<PreparedStatement> preparedStatements)
-    {
-        if (preparedStatements != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatements);
-        }
-        return this;
-    }
-
-    public SQLListenerContext build()
-    {
-        return new SQLListenerContextImpl();
-    }
-
-    /**
-     * A simple implementation that looks at the builder for values
-     */
-    class SQLListenerContextImpl implements SQLListenerContext
-    {
-        @Override
-        public QueryMetadata getMetadata()
-        {
-            return md;
-        }
-
-        @Override
-        public RelationalPath<?> getEntity()
-        {
-            return entity;
-        }
-
-        @Override
-        public String getSQL()
-        {
-            return sql;
-        }
-
-        @Override
-        public Exception getException()
-        {
-            return exception;
-        }
-
-        @Override
-        public Connection getConnection()
-        {
-            return connection;
-        }
-
-        @Override
-        public Collection<PreparedStatement> getPreparedStatements()
-        {
-            return preparedStatements;
-        }
-
-        @Override
-        public Map<String, Object> getMap()
-        {
-            return contextMap;
-        }
-
-        @Override
-        public String toString()
-        {
-            StringBuilder sb = new StringBuilder()
-                    .append("" sql:"").append(nicerSql(sql))
-                    .append("" connection:"").append(connection == null ? ""not connected"" : ""connected"")
-                    .append("" entity:"").append(entity)
-                    .append("" exception:"").append(exception);
-
-            for (Map.Entry<String, Object> entry : contextMap.entrySet())
-            {
-",Removed the builder and made the internal context object mutable . . Also various fix ups from PR review,"""Refactor SQLListenerContext and related classes to improve performance and simplify code""",Refactor SQLListenerContext and related classes to use a more efficient and flexible implementation.,"""Refactor SQLListenerContextBuilder to use SQLListenerContextImpl directly""

The changes made in this commit involve refactoring the `AbstractSQLQuery` class to use `SQLListenerContextImpl` instead of `SQLListenerContext` in several methods. The `startContext` method now returns `SQLListenerContextImpl` instead of `SQLListenerContext`, and the `onException` method now returns `SQLListenerContextImpl` instead of `SQLListenerContext`. Additionally, the `SQLListenerContext` parameter in the `onException` method has been changed to `SQLListenerContextImpl`.

In the `iterateSingle` method, the `SQLListenerContext` variable has been changed to `SQLListenerContextImpl`. Similarly, in the `list` method, the `SQLListenerContext` variable has been changed to `SQLListenerContextImpl`.

The `SQLListenerContextBuilder` class has been removed, and the `newContext` method has been replaced with direct instantiation of `SQLListenerContextImpl`. The `with` method has been added to `SQLListenerContextImpl` to allow for setting the SQL string.

The `SQLListenerAdapter` class has been updated to use `SQLListenerContextImpl` instead of `SQLListenerContext` in several methods. The `start`, `preRender`, `rendered`, `prePrepare`, `prepared`, `preExecute`, `executed`, `end`, and `exception` methods now all take a `SQLListenerContextImpl` parameter instead of a `SQLListenerContext` parameter.

Finally, the `SQLListenerContext` interface has been updated to include a `addSQL` method, which is used to set the SQL string in `SQLListenerContextImpl`.",Refactor `SQLListenerContext` to directly use `SQLListenerContextImpl` and update related methods and references.,Model 4
"diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
index 56dcae5..cfc6a10 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
@@ -278,6 +278,7 @@ public class AsyncHttpClient {
                             newReq.LOGTAG = request.LOGTAG;
                             newReq.proxyHost = request.proxyHost;
                             newReq.proxyPort = request.proxyPort;
+                            newReq.useAndroidProxy = request.useAndroidProxy;
                             copyHeader(request, newReq, ""User-Agent"");
                             copyHeader(request, newReq, ""Range"");
                             request.logi(""Redirecting"");
diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
index 35d9902..dc1ef13 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
@@ -1,6 +1,8 @@
 package com.koushikdutta.async.http;
 
+import android.annotation.SuppressLint;
 import android.net.Uri;
+import android.os.Build;
 import android.util.Log;
 
 import com.koushikdutta.async.AsyncSSLException;
@@ -16,6 +18,10 @@ import org.apache.http.RequestLine;
 import org.apache.http.message.BasicHeader;
 import org.apache.http.params.HttpParams;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
+import java.net.ProxySelector;
 import java.net.URI;
 import java.util.List;
 import java.util.Map;
@@ -318,21 +324,61 @@ public class AsyncHttpRequest {
 
     String proxyHost;
     int proxyPort = -1;
+    boolean useAndroidProxy = true;
     public void enableProxy(String host, int port) {
         proxyHost = host;
         proxyPort = port;
+        useAndroidProxy = proxyPort == 0;
+    }
+
+    public void enableSystemProxy(boolean enable) {
+        useAndroidProxy = enable;
     }
 
     public void disableProxy() {
         proxyHost = null;
         proxyPort = -1;
+        useAndroidProxy = false;
+    }
+
+    @SuppressLint(""NewApi"")
+    private void setupAndroidProxy() {
+        List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(getUri().toString()));
+        if (proxies.isEmpty()) {
+            disableProxy();
+        } else {
+            Proxy proxy = proxies.get(0);
+            if (proxy.type() == Proxy.Type.DIRECT) {
+                disableProxy();
+            } else if (proxy.type() == Proxy.Type.HTTP && proxy.address() instanceof InetSocketAddress) {
+                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+                    proxyHost = proxyAddress.getHostString();
+                else {
+                    InetAddress address = proxyAddress.getAddress();
+                    if (address!=null)
+                        proxyHost = address.getHostAddress();
+                    else
+",Use the system proxy when it \' s defined . .,"""Added support for Android system proxy in AsyncHttpClient and AsyncHttpRequest""",Added support for Android system proxy and improved proxy handling.,"""Added useAndroidProxy flag to AsyncHttpClient and AsyncHttpRequest, and updated the redirect logic to copy this flag from the original request to the new request. Also added setupAndroidProxy method to AsyncHttpRequest to configure the proxy settings based on the system proxy settings.""","""Added support for using Android system proxy settings in AsyncHttpClient and AsyncHttpRequest.""",Model 1
"diff --git a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
index 7f890411a..a4cddf8b3 100644
--- a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
+++ b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
@@ -27,6 +27,7 @@ import com.jpexs.decompiler.flash.helpers.GraphTextWriter;
 import com.jpexs.decompiler.flash.tags.Tag;
 import com.jpexs.decompiler.flash.tags.base.ASMSource;
 import com.jpexs.decompiler.flash.types.annotations.Conditional;
+import com.jpexs.decompiler.flash.types.annotations.HideInRawEdit;
 import com.jpexs.decompiler.flash.types.annotations.Internal;
 import com.jpexs.decompiler.flash.types.annotations.SWFType;
 import com.jpexs.helpers.ByteArrayRange;
@@ -154,7 +155,7 @@ public class BUTTONCONDACTION implements ASMSource, Serializable {
     /**
      * Actions to perform in byte array
      */
-    @Internal
+    @HideInRawEdit
     public ByteArrayRange actionBytes;
 
     /**
diff --git a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
index 60171d41b..642b1c874 100644
--- a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
+++ b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
@@ -1211,7 +1211,7 @@ public class PreviewPanel extends JPersistentSplitPane implements TagEditorPanel
         tag.getTimelined().resetTimeline();
         swf.assignClassesToSymbols();
         swf.assignExportNamesToSymbols();
-        mainPanel.repaintTree();
+        mainPanel.refreshTree(swf);
         mainPanel.setTagTreeSelectedNode(tag);
         genericEditButton.setVisible(true);
         genericSaveButton.setVisible(false);",refresh tree after raw edit ( for example to show the new script tags when a buttonconditionaction is added to a DefineButton tag ),"""Hide actionBytes in raw edit and refresh tree after assigning classes and export names""","""Hide internal action bytes in BUTTONCONDACTION and refresh tree in PreviewPanel after assigning classes to symbols""","""Added HideInRawEdit annotation to actionBytes in BUTTONCONDACTION and changed mainPanel.repaintTree() to mainPanel.refreshTree(swf) in PreviewPanel.java""",- Hide actionBytes in raw edit and refresh tree after reassigning symbols in PreviewPanel.,Model 1
"diff --git a/activity/activity-ktx/api/1.0.0-alpha01.txt b/activity/activity-ktx/api/1.0.0-alpha01.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha01.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha01.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha02.txt b/activity/activity-ktx/api/1.0.0-alpha02.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha02.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha02.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha03.txt b/activity/activity-ktx/api/1.0.0-alpha03.txt
index 335efc368a6..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha03.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha03.txt
@@ -3,6 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha04.txt b/activity/activity-ktx/api/1.0.0-alpha04.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha04.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha04.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha05.txt b/activity/activity-ktx/api/1.0.0-alpha05.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha05.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha06.txt b/activity/activity-ktx/api/1.0.0-alpha06.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha06.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_current.txt b/activity/activity-ktx/api/restricted_current.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_current.txt
+++ b/activity/activity-ktx/api/restricted_current.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity/api/1.0.0-alpha03.txt b/activity/activity/api/1.0.0-alpha03.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha03.txt
+++ b/activity/activity/api/1.0.0-alpha03.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/1.0.0-alpha04.txt b/activity/activity/api/1.0.0-alpha04.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha04.txt
+++ b/activity/activity/api/1.0.0-alpha04.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/restricted_1.0.0-alpha05.txt b/activity/activity/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..1d5064eea00 100644
--- a/activity/activity/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,22 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha06.txt b/activity/activity/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..16e509e06b1 100644
--- a/activity/activity/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,30 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+  public final class OnBackPressedDispatcher {
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.activity.OnBackPressedCallback);
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method public boolean onBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha07.txt b/activity/activity/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..ba5e73341ae 100644
--- a/activity/activity/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,39 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public boolean isEnabled();
+    method @MainThread public void remove();
+    method @MainThread public void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha08.txt b/activity/activity/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-beta01.txt b/activity/activity/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity/api/restricted_1.0.0-beta01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-rc01.txt b/activity/activity/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity/api/restricted_1.0.0-rc01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha01.txt b/activity/activity/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha02.txt b/activity/activity/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_current.txt b/activity/activity/api/restricted_current.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_current.txt
+++ b/activity/activity/api/restricted_current.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/annotations/api/1.0.0.txt b/annotations/api/1.0.0.txt
index dc1c3ce20c6..3cf46a67d1f 100644
--- a/annotations/api/1.0.0.txt
+++ b/annotations/api/1.0.0.txt
@@ -124,7 +124,7 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
   }
 
-  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) @Dimension(unit=androidx.annotation.Dimension.PX) public @interface Px {
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
   }
 
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
@@ -159,7 +159,7 @@ package androidx.annotation {
     method public abstract androidx.annotation.RestrictTo.Scope[] value();
   }
 
-  public static enum RestrictTo.Scope {
+  public enum RestrictTo.Scope {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
diff --git a/annotations/api/1.1.0-alpha01.txt b/annotations/api/1.1.0-alpha01.txt
index d66f9f581bf..2adc9756be6 100644
--- a/annotations/api/1.1.0-alpha01.txt
+++ b/annotations/api/1.1.0-alpha01.txt
@@ -167,7 +167,6 @@ package androidx.annotation {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
-    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP_PREFIX;
     enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
     enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
   }
diff --git a/annotations/api/1.1.0-alpha02.txt b/annotations/api/1.1.0-alpha02.txt
index 7226b137ff4..d66f9f581bf 100644
--- a/annotations/api/1.1.0-alpha02.txt
+++ b/annotations/api/1.1.0-alpha02.txt
@@ -81,35 +81,6 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
   }
 
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public @interface InspectableProperty {
-    method public abstract int attributeId() default 0;
-    method public abstract androidx.annotation.InspectableProperty.EnumMap[] enumMapping() default {};
-    method public abstract androidx.annotation.InspectableProperty.FlagMap[] flagMapping() default {};
-    method public abstract boolean hasAttributeId() default true;
-    method public abstract String name() default """";
-    method public abstract androidx.annotation.InspectableProperty.ValueType valueType() default androidx.annotation.InspectableProperty.ValueType.INFERRED;
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.EnumMap {
-    method public abstract String name();
-    method public abstract int value();
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.FlagMap {
-    method public abstract int mask() default 0;
-    method public abstract String name();
-    method public abstract int target();
-  }
-
-  public enum InspectableProperty.ValueType {
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType COLOR;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType GRAVITY;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INFERRED;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_ENUM;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_FLAG;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType NONE;
-  }
-
   @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
     method public abstract boolean flag() default false;
     method public abstract boolean open() default false;
diff --git a/annotations/api/restricted_1.0.0.txt b/annotations/api/restricted_1.0.0.txt
index da4f6cc18fe..3cf46a67d1f 100644
--- a/annotations/api/restricted_1.0.0.txt
+++ b/annotations/api/restricted_1.0.0.txt
@@ -1 +1,212 @@
 // Signature format: 3.0
+package androidx.annotation {
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimatorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnyRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface AnyThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ArrayRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AttrRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface BinderThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface BoolRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CallSuper {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CheckResult {
+    method public abstract String suggest() default """";
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorInt {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorLong {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ColorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DimenRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Dimension {
+    method @DimensionUnit public abstract int unit() default androidx.annotation.Dimension.PX;
+    field public static final int DP = 0; // 0x0
+    field public static final int PX = 1; // 0x1
+    field public static final int SP = 2; // 0x2
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DrawableRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface FloatRange {
+    method public abstract double from() default java.lang.Double.NEGATIVE_INFINITY;
+    method public abstract boolean fromInclusive() default true;
+    method public abstract double to() default java.lang.Double.POSITIVE_INFINITY;
+    method public abstract boolean toInclusive() default true;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FontRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FractionRes {
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface GuardedBy {
+    method public abstract String value();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface HalfFloat {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract int[] value() default {};
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntRange {
+    method public abstract long from() default java.lang.Long.MIN_VALUE;
+    method public abstract long to() default java.lang.Long.MAX_VALUE;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IntegerRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface InterpolatorRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PACKAGE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Keep {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface LayoutRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface LongDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract long[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface MainThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface MenuRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface NavigationRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface NonNull {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface Nullable {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
+  }
+
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RequiresApi {
+    method @IntRange(from=1) public abstract int api() default 1;
+    method @IntRange(from=1) public abstract int value() default 1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR}) public @interface RequiresFeature {
+    method public abstract String enforcement();
+    method public abstract String name();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PARAMETER}) public @interface RequiresPermission {
+    method public abstract String[] allOf() default {};
+    method public abstract String[] anyOf() default {};
+    method public abstract boolean conditional() default false;
+    method public abstract String value() default """";
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Read {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Write {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RestrictTo {
+    method public abstract androidx.annotation.RestrictTo.Scope[] value();
+  }
+
+  public enum RestrictTo.Scope {
+    enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Size {
+    method public abstract long max() default java.lang.Long.MAX_VALUE;
+    method public abstract long min() default java.lang.Long.MIN_VALUE;
+    method public abstract long multiple() default 1;
+    method public abstract long value() default -1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface StringDef {
+    method public abstract boolean open() default false;
+    method public abstract String[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface StringRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public",Making restricted api txt files also include public apis .,"""Update annotations and activity APIs""","""Update Activity and Annotation APIs to match latest versions""","""Add viewModels method to ActivityViewModelLazyKt in activity-ktx""

This commit adds a new method `viewModels` to the `ActivityViewModelLazyKt` class in the `activity-ktx` module. The method is an inline function that takes a `ComponentActivity` and an optional `ViewModelProvider.Factory` as parameters, and returns a `Lazy<VM>` where `VM` is a reified type parameter that must extend `ViewModel`. The method is annotated with `@MainThread` to indicate that it should be called on the main thread.","""Add new methods to ActivityViewModelLazyKt and OnBackPressedDispatcherKt; update annotations and refine signatures for ComponentActivity.""",Model 2
"diff --git a/hotspot/test/TEST.groups b/hotspot/test/TEST.groups
index 262232e706c..b46499f7902 100644
--- a/hotspot/test/TEST.groups
+++ b/hotspot/test/TEST.groups
@@ -395,6 +395,17 @@ hotspot_jprt = \
   :hotspot_fast_gc_gcold \
   :hotspot_fast_runtime \
   :hotspot_fast_serviceability
+  
+hotspot_runtime_tier2 = \
+  runtime/ \
+  serviceability/ \
+ -:hotspot_fast_runtime \
+ -:hotspot_fast_serviceability \
+ -:hotspot_runtime_tier2_platform_agnostic
+ 
+hotspot_runtime_tier2_platform_agnostic = \
+  runtime/SelectionResolution \
+ -:hotspot_fast_runtime
 
 #All tests that depends on nashorn extension.
 #",Implement Hotspot Runtime tier 2 .,"""Add hotspot_runtime_tier2 and hotspot_runtime_tier2_platform_agnostic test groups""","The commit message should be:

""Add hotspot_runtime_tier2 and hotspot_runtime_tier2_platform_agnostic test groups""

This message accurately reflects the changes made in the commit, which involve adding two new test groups: `hotspot_runtime_tier2` and `hotspot_runtime_tier2_platform_agnostic`.","It seems like you're working with a git diff and you're looking for a commit message. However, you didn't provide the diff or the context for the commit message.

A commit message should briefly describe the changes you've made. For example, if you've added new tests or removed some, the commit message could be:

""Add new runtime tests and remove fast runtime tests from hotspot_runtime_tier2 group""

Or if you've made some other changes:

""Refactor TEST.groups: add hotspot_runtime_tier2 and hotspot_runtime_tier2_platform_agnostic groups""",Added new test groups: hotspot_runtime_tier2 and hotspot_runtime_tier2_platform_agnostic.,Model 4
"diff --git a/findbugs/build.xml b/findbugs/build.xml
index 1a5a93a20..4552a2c22 100644
--- a/findbugs/build.xml
+++ b/findbugs/build.xml
@@ -349,6 +349,11 @@
 			<filterset refid=""script.filters""/>
 		</copy>
 
+		<copy todir=""${scripts.dir}/experimental"" overwrite=""true"">
+			<fileset dir=""${scriptsrc.dir}/experimental""/>
+			<filterset refid=""script.filters""/>
+		</copy>
+
 		<mkdir dir=""${build.dir}""/>
 
 		<!-- Make the Unix scripts executable. -->
@@ -894,6 +899,7 @@
 		
 		<patternset id=""bindist.unixscript.pats"">
 			<include name=""bin/*""/>
+			<include name=""bin/experimental/*""/>
 			<include name=""bin/deprecated/*""/>
 			<exclude name=""bin/*.bat""/>
 		</patternset>
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
new file mode 100644
index 000000000..39a62ecc2
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
@@ -0,0 +1,151 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.io.FileOutputStream;
+import java.io.PrintStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import edu.umd.cs.findbugs.AppVersion;
+import edu.umd.cs.findbugs.BugCollection;
+import edu.umd.cs.findbugs.BugInstance;
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.config.CommandLine;
+
+/**
+ * Mine historical information from a BugCollection.
+ * The BugCollection should be built using UpdateBugCollection
+ * to record the history of analyzing all versions over time.
+ * 
+ * @author David Hovemeyer
+ * @author William Pugh
+ */
+public class Churn {
+		BugCollection bugCollection;
+	
+	public Churn() {
+	}
+	public Churn(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	public void setBugCollection(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	
+
+	String getKey(BugInstance b) {
+		return b.getPriorityAbbreviation() +""-"" + b.getType();
+	}
+
+	static class Data {
+		int persist, fixed;
+	}
+
+	Map<String,Data> data = new HashMap<String,Data>();
+	
+	public Churn execute() {
+		
+		for (Iterator<BugInstance> j = bugCollection.iterator(); j.hasNext();) {
+			BugInstance bugInstance = j.next();
+
+			String key = getKey(bugInstance);
+			Data d = data.get(key);
+			if (d == null)
+				data.put(key, d = new Data());
+			if (bugInstance.isDead())
+				d.fixed++;
+			else d.persist++;
+		}
+		return this;
+	}
+
+
+
+
+	public void dump(PrintStream out) {
+		System.out.printf(""%3s %5s %5s %5s  %s\n"", ""%"", ""const"", ""fix"", ""new"");
+		for(Map.Entry<String, Data> e : data.entrySet()) {
+			Data d = e.getValue();
+			int total = d.persist + d.fixed;
+			if (total < 10) 
+				continue;
+			System.out.printf(""%3d %5d %5d  %s\n"", d.fixed * 100 / total, d.persist, d.fixed, e.getKey());
+		}
+
+	}
+
+
+
+	 class ChurnCommandLine extends CommandLine {
+
+		 ChurnCommandLine() {
+			
+		}
+
+		@Override
+		public void handleOption(String option, String optionalExtraPart) {
+			
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+
+		@Override
+		public void handleOptionWithArgument(String option, String argument) {
+
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+	}
+
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		Churn churn = new Churn();
+		ChurnCommandLine commandLine = churn.new ChurnCommandLine();
+		int argCount = commandLine.parse(args, 0, 2, ""Usage: "" + Churn.class.getName()
+				+ "" [options] [<xml results> [<history]] "");
+
+		System.out.println(""reading"");
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		churn.setBugCollection(bugCollection);
+		System.out.println(""analyzing"");
+		churn.execute();
+		PrintStream out = System.out;
+		System.out.println(""printing"");
+		try {
+		if (argCount < args.length)  {
+			out = new PrintStream(new FileOutputStream(args[argCount++]), true);
+			}
+		churn.dump(out);
+		} finally {
+		out.close();
+		}
+
+	}
+}
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
new file mode 100644
index 000000000..f40585c97
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
@@ -0,0 +1,113 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.util.HashSet;
+import java.util.Map;
+import java.util.TreeMap;
+
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.PackageStats;
+import edu.umd.cs.findbugs.Priorities;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.util.Bag;
+
+public class TreemapVisualization {
+	
+	static HashSet<String> buggyPackages = new HashSet<String>();
+	
+	static HashSet<String> interiorPackages = new HashSet<String>();
+	static Bag<String> goodCodeSize = new Bag<String>(new TreeMap<String,Integer>());
+	static Bag<String> goodCodeCount = new Bag<String>(new TreeMap<String,Integer>());
+	
+
+	public static void addInteriorPackages(String packageName) {
+		String p = superpackage(packageName);
+		if (p.length() > 0) {
+			interiorPackages.add(p);
+			addInteriorPackages(p);
+		}
+	}
+	
+	/**
+     * @param packageName
+     * @return
+     */
+    private static String superpackage(String packageName) {
+	    int i = packageName.lastIndexOf('.');
+		if (i == -1) return """";
+		String p = packageName.substring(0,i);
+	    return p;
+    }
+	public static boolean isInteriorPackage(String packageName) {
+		return interiorPackages.contains(packageName);
+	}
+	
+	public static void cleanCode(String packageName, int loc, int classes) {
+		String superpackage = superpackage(packageName);
+		if (buggyPackages.contains(superpackage) || interiorPackages.contains(superpackage) || superpackage.length() == 0) {
+			goodCodeCount.add(packageName,classes);
+			goodCodeSize.add(packageName, loc);
+			
+		} else 
+			cleanCode(superpackage, loc,classes);
+	}
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		int argCount = 0;
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats()) 
+			if (p.getTotalBugs() > 0) {
+			buggyPackages.add(p.getPackageName());
+			addInteriorPackages(p.getPackageName());
+			
+		}
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())if (p.getTotalBugs() == 0) { 
+			cleanCode(p.getPackageName(), p.size(), p.getClassStats().size());
+		}
+		System.out.println(""LOC\tTypes\tH\tHM\tDensity"");
+		System.out.println(""INTEGER\tINTEGER\tINTEGER\tINTEGER\tFLOAT"");
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())	if (p.getTotalBugs() > 0) {
+			int high = p.getBugsAtPriority(Priorities.HIGH_PRIORITY);
+			int normal = p.getBugsAtPriority(Priorities.NORMAL_PRIORITY);
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s"", p.size(),p.getClassStats().size(), high,high+normal, 
+					(high+normal)*1000.0/p.size(),
+					p.getPackageName().substring(11).replace('.','\t'));
+			if (isInteriorPackage(p.getPackageName()))
+				System.out.print(""\t*"");
+			System.out.println();
+		}
+		for(Map.Entry<String, Integer> e : goodCodeSize.entrySet())	{
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s\n"", e.getValue(),goodCodeCount.getCount(e.getKey()), 0,0,
+					0.0,
+					e.getKey().substring(11).replace('.','\t'));
+			
+		}
+		
+
+	}
+}
diff --git a/findbugs/src/scripts/experimental/churn b/findbugs/src/scripts/experimental/churn
new file mode 100644
index 000000000..a9a949a1e
--- /dev/null
+++ b/findbugs/src/scripts/experimental/churn
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.Churn
+
+@WRAP_JAVA@
+
+# vim:ts=3
diff --git a/findbugs/src/scripts/experimental/treemapVisualization b/findbugs/src/scripts/experimental/treemapVisualization
new file mode 100644
index 000000000..43b897591
--- /dev/null
+++ b/findbugs/src/scripts/experimental/treemapVisualization
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.TreemapVisualization
+
+@WRAP_JAVA@
+
+# vim:ts=3",add experimental code for computing churn and treemap visualizations .,"""Added experimental features: Churn and TreemapVisualization""","Added experimental scripts and classes for churn and treemap visualization analysis.

Or, if you want to be more specific:

- Added Churn class for analyzing historical bug data
- Added TreemapVisualization class for visualizing package statistics
- Added experimental scripts for running Churn and TreemapVisualization analysis","Add new files Churn.java and TreemapVisualization.java to findbugs/src/java/edu/umd/cs/findbugs/workflow/ and new scripts churn and treemapVisualization to findbugs/src/scripts/experimental/. Update findbugs/build.xml to include the new experimental scripts in the build process.

Here are the details of the changes:

* Two new Java files, Churn.java and TreemapVisualization.java, have been added to the package edu.umd.cs.findbugs.workflow in the findbugs/src/java directory. These files contain classes that are part of the FindBugs static analysis tool for Java programs.
* Two new scripts, churn and treemapVisualization, have been added to the findbugs/src/scripts/experimental directory. These scripts use the new Java classes to perform some analysis and visualization of bug data.
* The findbugs/build.xml file has been updated to include the new experimental scripts in the build process. Specifically, the copy task that copies script files to the ${scripts.dir} directory now includes a new fileset that copies the contents of the ${scriptsrc.dir}/experimental directory. Additionally, the patternset used to specify which files to include in the Unix script distribution now includes a new include pattern for bin/experimental/\*. This ensures that the new scripts will be included in the FindBugs distribution.",Add experimental scripts and classes for churn metrics and treemap visualization in FindBugs workflow.,Model 3
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
index c7725a40e2..c64c44c647 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
@@ -19,7 +19,6 @@ import com.google.common.collect.ImmutableMap;
 import com.google.devtools.build.lib.analysis.BlazeDirectories;
 import com.google.devtools.build.lib.cmdline.RepositoryName;
 import com.google.devtools.build.lib.events.Event;
-import com.google.devtools.build.lib.events.Location;
 import com.google.devtools.build.lib.packages.Rule;
 import com.google.devtools.build.lib.packages.RuleFormatter;
 import com.google.devtools.build.lib.rules.ExternalPackageUtil;
@@ -131,9 +130,7 @@ public final class RepositoryDelegatorFunction implements SkyFunction {
     }
     if (handler == null) {
       throw new RepositoryFunctionException(
-          new EvalException(
-              Location.fromFile(directories.getWorkspace().getRelative(""WORKSPACE"")),
-              ""Could not find handler for "" + rule),
+          new EvalException(rule.getLocation(), ""Could not find handler for "" + rule),
           Transience.PERSISTENT);
     }",Use the rule location when a handler isn \' t found .,"""Remove unnecessary Location.fromFile call in RepositoryDelegatorFunction""","The commit message should be:

""Remove unused import and simplify EvalException construction in RepositoryDelegatorFunction""

This message accurately describes the changes made in the commit, which include removing an unused import and simplifying the construction of an EvalException in the RepositoryDelegatorFunction class.","""Remove unused import and update location in RepositoryFunctionException""

This commit removes an unused import statement for `com.google.devtools.build.lib.events.Location` and updates the location in a thrown `RepositoryFunctionException` to use `rule.getLocation()` instead of creating a new `Location` object from a file.","""Remove unused import and update exception location handling in RepositoryDelegatorFunction.java for consistency.""",Model 3
"diff --git a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
index 14123c7a73c..aac7ab750bd 100644
--- a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
+++ b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
@@ -46,9 +46,10 @@ import java.io.PrintStream;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
@@ -154,7 +155,7 @@ public class SimpleFeeder implements ReplyHandler {
                 }
             } catch (InterruptedException e) {}
         }
-        public void close() throws Exception {
+        public void close() {
             session.destroy();
         }
     }
@@ -277,7 +278,7 @@ public class SimpleFeeder implements ReplyHandler {
             }
         }
 
-        class LazyDocumentOperation extends ConditionalFeedOperation {
+        static class LazyDocumentOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyDocumentOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.DOCUMENT, condition);
@@ -289,7 +290,7 @@ public class SimpleFeeder implements ReplyHandler {
                 return new Document(deserializer);
             }
         }
-        class LazyUpdateOperation extends ConditionalFeedOperation {
+        static class LazyUpdateOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyUpdateOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.UPDATE, condition);
@@ -377,13 +378,22 @@ public class SimpleFeeder implements ReplyHandler {
     }
 
 
+    static class RetryExecutionhandler implements RejectedExecutionHandler {
+
+        @Override
+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
+            try {
+                executor.getQueue().put(r);
+            } catch (InterruptedException e) {}
+        }
+    }
 
     SimpleFeeder run() throws Throwable {
         ExecutorService executor = (numThreads > 1)",Use a smoother blocking Q and block when full .,"""Refactor SimpleFeeder to use ArrayBlockingQueue and implement custom RejectedExecutionHandler for ThreadPoolExecutor""","""Refactor SimpleFeeder to use ArrayBlockingQueue and implement custom RejectedExecutionHandler for thread pool executor""","""Add RetryExecutionHandler to SimpleFeeder and make LazyDocumentOperation and LazyUpdateOperation static""

Explanation:

* A new static class RetryExecutionHandler is added to SimpleFeeder, which implements the RejectedExecutionHandler interface.
* LazyDocumentOperation and LazyUpdateOperation classes are made static.
* There are no changes to the import statements related to SynchronousQueue, so the removed import statement is not relevant to the changes in this commit.
* The close() method is changed to not throw an exception, but this is a minor change and not the main focus of this commit.",Refactored `SimpleFeeder` to add `RetryExecutionHandler` for better rejected task handling; and made inner classes static.,Model 3
"diff --git a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
index f2b7fcc3..2a8edf5b 100644
--- a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
+++ b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
@@ -17,20 +17,34 @@
 package com.jayway.restassured.itest.java;
 
 import com.jayway.restassured.RestAssured;
+import com.jayway.restassured.builder.ResponseBuilder;
+import com.jayway.restassured.config.LogConfig;
+import com.jayway.restassured.filter.Filter;
+import com.jayway.restassured.filter.FilterContext;
+import com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor;
 import com.jayway.restassured.itest.java.support.WithJetty;
+import com.jayway.restassured.response.Response;
+import com.jayway.restassured.specification.FilterableRequestSpecification;
+import com.jayway.restassured.specification.FilterableResponseSpecification;
+import org.apache.commons.io.output.WriterOutputStream;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import java.io.PrintStream;
+import java.io.StringWriter;
 import java.net.URLEncoder;
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.jayway.restassured.RestAssured.*;
 import static com.jayway.restassured.RestAssured.get;
+import static com.jayway.restassured.config.RestAssuredConfig.config;
+import static com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor.loggedRequestPathIn;
 import static com.jayway.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.startsWith;
 import static org.junit.Assert.assertThat;
 
 public class PathParamITest extends WithJetty {
@@ -295,4 +309,23 @@ public class PathParamITest extends WithJetty {
 
         expect().statusCode(200).when().get(""http://www.google.se/search?q={query}&hl=en"");
     }
+
+    @Test
+    public void mixingUnnamedPathParametersAndQueryParametersWorks() throws Exception {
+        final StringWriter writer = new StringWriter();
+        final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);
+
+        given().
+                config(config().logConfig(new LogConfig(captor, true))).
+                log().all().
+                filter(new Filter() {
+                    public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
+                        return new ResponseBuilder().setStatusCode(200).setBody(""changed"").build();
+                    }
+                }).
+        get(""/{channelName}/item-import/rss/import?source={url}"", ""games"", ""http://myurl.com"");
+
+        // Then
+        assertThat(loggedRequestPathIn(writer), equalTo(""http://localhost:8080/games/item-import/rss/import?source=http%3A%2F%2Fmyurl.com""));
+    }
 }
diff --git a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
index 2b87ec96..4ebba12c 100644
--- a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
+++ b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
@@ -1246,6 +1246,13 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 pathWithoutQueryParams = StringUtils.replace(pathWithoutQueryParams, ""RA_double_slash__"", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
             }
 
+            // Remove used unnamed path parameters if all parameters haven't already been used
+            if (!usesNamedPathParameters && unnamedPathParamSize != numberOfUsedPathParameters) {
+                def firstUnusedIndex = Math.max(0, numberOfUsedPathParameters)
+                def lastIndex = unnamedPathParams.size() - 1
+                unnamedPathParams = unnamedPathParams[firstUnusedIndex..lastIndex]
+            }
+
             if (queryParams.matches(pathTemplate)) {
                 def hasAnyTemplateLeft = ~/.*\{\w+\}.*/
                 def replacePattern = ~/\{\w+\}/
@@ -1257,7 +1264,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 }
 
                 def originalQueryParams = queryParams
-                definedParams.each { pathParamName ->
+                definedParams.eachWithIndex { pathParamName, index ->
                     def subresource
                     if (!queryParams.matches(hasAnyTemplateLeft)) {
                         def expected = hasAnyTemplateLeft.matcher(originalQueryParams).getCount();
@@ -1267,7 +1274,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                         def pathParamValue = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
                         subresource = pathParamValue
                     } else { // uses unnamed path params
-                        subresource = unnamedPathParams[numberOfUsedPathParameters].toString()
+                        subresource = unnamedPathParams[index].toString()
                     }
                     // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
                     queryParams = queryParams.replaceFirst(replacePattern, Matcher.quoteReplacement(subresource.toString()))",Fixed an issue with mixing unnamed path and query params,"""Fix mixing unnamed path parameters and query parameters in Rest Assured""","""Improved handling of unnamed path parameters in RestAssured""

This commit message accurately reflects the changes made in the code, which involve improving the handling of unnamed path parameters in RestAssured.","""Fix unnamed path parameter handling when mixed with query parameters in REST Assured""

Explanation:
The commit includes changes in the PathParamITest.java file and the RequestSpecificationImpl.groovy file. In PathParamITest.java, a new test case has been added to check if mixing unnamed path parameters and query parameters works correctly. In RequestSpecificationImpl.groovy, there is a modification in the code that handles unnamed path parameters when they are used with query parameters. The change ensures that the correct unnamed path parameters are used when there are other query parameters present in the request.","""Fix unnamed path parameter handling and add log verification test for mixed path and query parameters.""",Model 1
"diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
index e2c2e4abcf..bced609207 100644
--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
@@ -159,8 +159,6 @@ public class PresentationDispatcher
          performExecuteCommand(params);
       else if (cmdName.equals(""pause""))
          performPauseCommand();
-      else if (cmdName.equals(""tutorial""))
-         performTutorialCommand(params);
       else 
       {
          globalDisplay_.showErrorMessage(
@@ -223,13 +221,6 @@ public class PresentationDispatcher
       context_.pauseMedia();
    }
 
-   private void performTutorialCommand(String params)
-   {
-      String projectParam = URL.encodeQueryString(params);
-      String url = GWT.getHostPageBaseURL() + ""?project="" + projectParam;
-      Window.Location.assign(url);
-   }
-
    private void performConsoleInputCommand(String params)
    {
       fireEventFromTutorialDirectory(new SendToConsoleEvent(params,",remove tutorial command,"""Remove tutorial command handling from PresentationDispatcher""","""Removed tutorial command handling and refactored console input command.""","""Remove tutorial command handling from PresentationDispatcher""

This commit removes the `performTutorialCommand` method and its corresponding condition in the `dispatch` method of the `PresentationDispatcher` class. This effectively disables the handling of the ""tutorial"" command in the presentation dispatcher.","""Remove handling for the 'tutorial' command in PresentationDispatcher to streamline command processing.""",human
"diff --git a/drools-docs/docbook-style-drools/pom.xml b/drools-docs/docbook-style-drools/pom.xml
new file mode 100755
index 0000000000..d669593eb1
--- /dev/null
+++ b/drools-docs/docbook-style-drools/pom.xml
@@ -0,0 +1,92 @@
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>  
+  
+  <parent>
+    <artifactId>drools-docs</artifactId>
+    <groupId>org.drools</groupId>
+    <version>5.0.0.SNAPSHOT</version>
+  </parent>
+
+  <groupId>org.drools</groupId>
+  <artifactId>docbook-style-drools</artifactId>
+  <packaging>jdocbook-style</packaging>
+  <version>1.1.0</version>
+
+  <name>JBoss Community Documentation Style for Drools</name>
+  <description>CSS and images to style XHTML JBoss Community Documentation.</description>
+  <url>http://www.jboss.org</url>
+
+  <organization>
+    <name>JBoss.org</name>
+    <url>http://www.jboss.org</url>
+  </organization>
+  
+   <repositories>
+        <repository>
+            <id>repository.jboss.org</id>
+            <url>http://repository.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>false</enabled>
+            </snapshots>
+            <releases>
+               <enabled>true</enabled>
+            </releases>
+        </repository>
+        <repository>
+            <id>snapshots.jboss.org</id>
+            <url>http://snapshots.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+            <releases>
+               <enabled>false</enabled>
+            </releases>
+        </repository>
+        </repositories>
+
+  <!-- 
+  <scm>
+    <developerConnection>scm:svn:https://svn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</developerConnection>
+    <connection>scm:svn:http://anonsvn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</connection>
+  </scm>
+  -->
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.jboss.maven.plugins</groupId>
+        <artifactId>maven-jdocbook-style-plugin</artifactId>
+        <version>1.0.0</version>
+        <extensions>true</extensions>
+      </plugin>
+    </plugins>
+    
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+        <artifactId>wagon-webdav</artifactId>
+        <version>1.0-beta-2</version>
+      </extension>
+    </extensions>
+  </build>
+
+  <distributionManagement>
+    <repository>
+      <!-- Copy the dist to the local checkout of the JBoss Repository at ${maven.repository.root} -->
+      <!-- It is anticipated that ${maven.repository.root} is set in user's settings.xml file -->
+      <!-- TODO : Replace this with direct svn access once the svnkit providers are available -->
+      <id>repository.jboss.org</id>
+      <name>JBoss Repository</name>
+      <url>file://${maven.repository.root}</url>
+    </repository>
+    <snapshotRepository>
+      <id>snapshots.jboss.org</id>
+      <name>JBoss Snapshot Repository</name>
+      <url>dav:https://snapshots.jboss.org/maven2</url>
+    </snapshotRepository>
+  </distributionManagement>
+
+</project>
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
new file mode 100755
index 0000000000..21411d6505
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
@@ -0,0 +1,242 @@
+span.property {color:#0066CC;}
+
+pre.JAVA {line-height:10px;}
+
+pre.XML {line-height:8px;}
+
+pre.JSP {line-height:8px;}
+
+pre.XHTML {line-height:8px;}
+
+.java_type {color:#000000;}
+
+.java_keyword {
+    font-weight:bold;
+    color:#7F1B55;
+}
+
+.java_javadoc_comment {
+    color:#3F5FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_comment {
+    color:#3F7F5F;
+    background-color:rgb(247,247,247);
+}
+
+.java_operator {color:#000000;}
+
+.java_plain {color:rgb(0,0,0);}
+
+.java_literal {color:#2A00FF;}
+
+pre CODE {
+    font-size:12px;
+    color:rgb(0,0,0);
+    font-family:monospace; 
+    white-space:nowrap;
+}
+
+.java_javadoc_tag {
+    font-weight:bold;
+    color:#7F9FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_separator {color:#000000;}
+
+.xml_plain {color:rgb(0,0,0);}
+
+.xml_tag_name {color:#3F7F7F;}
+
+.xml_comment {
+    color:#3F5FBF;
+    background-color:rgb(247,247,247);
+}
+
+.xml_tag_symbols {color:#008080;}
+
+.xml_rife_tag {
+    color:rgb(0,0,0);
+    background-color:rgb(228,230,160);
+}
+
+.xml_attribute_value {color:#2A00FF;}
+
+.xml_attribute_name {
+    font-weight:bold;
+    color:#7F007F;
+}
+
+.xml_char_data {color:rgb(0,0,0);}
+
+.xml_rife_name {
+    color:#008cca;
+    background-color:rgb(228,230,160);
+}
+
+.xml_processing_instruction {
+    font-weight:bold;
+    color:rgb(0,0,0);
+    font-style:italic;
+}
+
+td.java {
+    vertical-align:top;
+    line-height:10px;
+}
+
+td.java-ln {
+    vertical-align:top;
+    line-height:10px;
+}
+
+tt.java {
+    margin-bottom:0em;
+    line-height:10px;
+    font-family:verdana,helvetica,sans-serif;
+}
+
+tt.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+td.java-ln {
+    line-height:10px;
+    text-align:right;
+}
+
+tt.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+pre.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+span.java0 {
+    font-size:8pt;
+    color:#ffffff;
+    line-height:10px;
+}
+
+span.java1 {
+    font-size:8pt;
+    color:#808080;
+}
+
+span.java2 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Single-line comment */
+
+span.java3 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Keywords excluding 'return' */
+
+span.java4 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F1B55;
+    line-height:10px;
+}
+
+span.java5 {
+    font-size:8pt;
+    color:#2a00ff;
+    line-height:10px;
+}
+
+span.java6 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java7 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java8 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+/* Primitive types: long, int, void etc... */
+
+span.java9 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+span.java10 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+span.java11 {
+    font-size:8pt;
+    color:#7f9fbf;
+    line-height:10px;
+}
+
+span.java12 {
+    font-size:8pt;
+    color:#7f7f9f;
+    line-height:10px;
+}
+
+span.java13 {
+    font-size:8pt;
+    color:#3f3fbf;
+    line-height:10px;
+}
+
+span.java14 {
+    font-size:8pt;
+    color:#3f5fbf;
+    line-height:10px;
+}
+
+span.java15 {
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+/* Annotations */
+
+span.java16 {
+    font-size:8pt;
+    color:#646464;
+    line-height:10px;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/docnav.css b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
new file mode 100755
index 0000000000..c214f24ac0
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
@@ -0,0 +1,204 @@
+/* Document Navigation */
+
+.docnav a, .docnav strong {
+    text-decoration:none;
+    font-weight:normal;
+}
+
+.docnav {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    position:relative;
+    width:100%;
+    padding-bottom:2em;
+    padding-top:1em;
+    border-top:1px dotted #ccc;
+}
+
+.docnav li {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    display:inline;
+    font-size:.8em;
+}
+
+.docnav li:before {content:"" "";}
+
+.docnav li.previous, .docnav li.next {
+    position:absolute;
+    top:1em;
+}
+
+.docnav li.up, .docnav li.home {margin:0em 1.5em;}
+
+.docnav li.previous {
+    left:0px;
+    text-align:left;
+}
+
+.docnav li.next {
+    right:0px;
+    text-align:right;
+}
+
+.docnav li.previous strong, .docnav li.next strong {
+    display:block;
+    height:22px;
+}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav li.next a strong {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:1.2em;
+}
+
+.docnav li.previous a strong {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.home a strong {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.up a strong {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav a:link, .docnav a:visited {color:#666 !important;}
+
+.docnav a:hover, .docnav a:focus, .docnav a:active {color:black !important;}
+
+.docnav a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.docnav a:link strong {text-decoration:none;}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav {margin-bottom:16px;}
+
+/* Eclipse Help Navigation */
+
+.navheader {padding-top:35px}
+
+.navheader table {border-style:none}
+
+.navheader a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navheader td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navheader td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navheader a:link, .navheader a:visited {color:#666 !important;}
+
+.navheader a:hover, .navheader a:focus, .navheader a:active {color:black !important;}
+
+.navheader a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navheader a:link {text-decoration:none;}
+
+.navfooter table {border-style:none}
+
+.navfooter a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navfooter td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.home a {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.up a {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter a:link, .navfooter a:visited {color:#666 !important;}
+
+.navfooter a:hover, .navfooter a:focus, .navfooter a:active {color:black !important;}
+
+.navfooter a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navfooter a:link {text-decoration:none;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/documentation.css b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
new file mode 100755
index 0000000000..bf8e07fb8a
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
@@ -0,0 +1,551 @@
+/* Lists */
+
+ol li, ul li {
+    padding-left:.2em;
+    padding-bottom:.5em;
+    margin:0em;
+}
+
+ul {
+    padding-left:1.6em;
+    list-style-image:url(../images/community/dot.png);
+    list-style-type:circle;
+}
+
+ul ul {
+    list-style-image:url(../images/community/dot2.png);
+    list-style-type:circle;
+}
+
+dt {
+    font-weight:bold;
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
+
+dd {
+    margin:0em;
+    margin-left:2em;
+    padding-top:0em;
+}
+
+li p:first-child, dd p:first-child {
+    padding:0em;
+    margin-top:.3em;
+}
+
+.variablelist, .itemizedlist {margin-top:.6em;}
+
+ul li p:first-child {margin:0em;}
+
+/* Images */
+
+img {
+    display:block;
+    margin:2em 0;
+}
+
+.inlinemediaobject, .inlinemediaobject img {
+    display:inline !important;
+    margin:0em;
+}
+
+.programlisting a img, pre a img, td a img, td img {
+    display:inline;
+    margin:0 0;
+}
+
+/* Needed for Safari */
+
+pre a span img, pre span img {
+    display:inline;
+    margin:0 0;
+}
+
+span.co {
+    position:absolute;
+    left:900px
+}
+
+/* Document modes */
+
+.confidential {
+    background-color:#900;
+    color:white;
+    padding:.5em .5em;
+    font-family:serif;
+    text-transform:uppercase;
+    text-align:center
+}
+
+dt a {font-weight:normal;}
+
+.longdesc-link {display:none;}
+
+.prompt {
+    background-color:#ede7c8;
+    padding:0em .3em;
+}
+
+/* User interface styles */
+
+.screen .replaceable {color:#444;}
+
+.screen {
+    background-color:#ede7c8;
+    color:#333;
+    padding:.5em 1em;
+    margin:0em;
+}
+
+pre, code, .guibutton, .keycap, .guilabel {
+    font-size:0.9em;
+    font-family:verdana, helvetica, sans-serif;
+}
+
+.guibutton, .keycap, .guilabel {
+    font-weight:bold;
+    white-space:nowrap;
+    color:#444;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+}
+
+.guibutton, .guilabel {}
+
+.keycap {padding:.1em.4em;}
+
+.example {
+    background-color:#c8c5ac;
+    padding:5px;
+    margin-bottom:10px;
+}
+
+/* Terminal/Console text */
+
+.command, .computeroutput, .filename, .citetitle, .replaceable, .option {font-weight:bold;}
+
+.command .replaceable {color:#555;}
+
+pre {
+    display:block;
+    background-color:#f9f3b0;
+    color:#333;
+    overflow:auto;
+    padding:10px 20px;
+}
+
+code {white-space:nowrap;}
+
+/* Admonitions */
+
+/* Set basic colors and spacing */
+
+div.note {
+    background:#b5bcbd;
+    color:#4c5253;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.tip {
+    background:#7e917f;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.important {
+    background:#4a5d75;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.caution {
+    background:#e3a835;
+    color:#533500;
+    border:1px solid #ab710a; 
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.warning {
+    background:#7b1e1e;
+    color:white;
+    border:1px solid #65504e;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+/* Pre tag color settings */
+
+div.note pre {
+    background-color:#d6dee0;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.tip pre {
+    background-color:#d5e1d5;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.important pre {
+    background-color:#e1eef4;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.caution pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.warning pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+/* Background images and margin */
+
+div.note, div.tip, div.important, div.caution, div.warning {margin-top:.5em;}
+
+div.note {background-image:url(../images/community/docbook/note.png);}
+div.tip {background-image:url(../images/community/docbook/tip.png);}
+div.important {background-image:url(../images/community/docbook/important.png);}
+div.caution {background-image:url(../images/community/docbook/caution.png);}
+div.warning {background-image:url(../images/community/docbook/warning.png);}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable {color:#e3dcc0;}
+
+pre .replaceable, tt .replaceable {color:#444 !important;}
+
+div.note h2, div.tip h2, div.important h2, div.caution h2, div.warning h2 {
+    height:32px;
+    font-size:1.3em;
+}
+
+div.note h2 {color:#4c5253;}
+div.tip h2 {color:white;}
+div.important h2 {color:white;}
+div.caution h2 {color:#533500;}
+div.warning h2 {color:white;}
+
+div.note .guilabel, div.tip .guilabel, div.important .guilabel, div.caution .guilabel, div.warning .guilabel {color:white !important;}
+
+div.note li, div.tip li, div.caution li, div.warning li, div.important li {
+	padding-left:10px;
+	margin:0em;
+}
+	
+div.note ul, div.tip ul, div.caution ul, div.warning ul, div.important ul {
+	padding-left:40px;
+	margin:0em;
+}
+
+div.note pre pre a:visited, div.tip pre pre a:visited, div.important pre pre a:visited, div.caution pre pre a:visited, div.warning pre pre a:visited,
+div.note pre a:link, div.tip pre a:link, div.important pre a:link, div.caution pre a:link, div.warning pre a:link {color:#0066cc !important;}
+
+div.note a:visited, div.tip a:visited, div.important a:visited, div.warning a:visited,
+div.note a:link, div.tip a:link, div.important a:link,  div.warning a:link {color:#f7f2d0;}
+	
+div.note a:visited, div.note a:link, div.caution a:link, div.caution a:visited {color:#0066cc;}
+
+/* Admonition icons spacing */
+
+div.note h2, div.note p, div.tip h2, div.tip p, div.caution h2, div.caution p, div.warning h2, div.warning p, div.important h2, div.important p {
+    padding:0em;
+    margin:0em;
+    padding-left:56px;
+}
+
+/* Page Title */
+
+#title {
+    padding:0px;
+    margin:0px;
+}
+
+#title strong {display:none;}
+
+#title a.site_href {
+    display:block;
+    height:89px;
+    width:310px;
+    float:left;
+    background:url(../images/community/drools_logo.png) top left no-repeat;
+}
+
+#title a.doc_href {
+    display:block;
+    height:89px;
+    background:transparent url(../images/community/community_doc.png) top right no-repeat;
+}
+
+/* Table */
+
+table {
+    border:1px solid #aaa;
+    width:100%;
+    border-collapse:collapse;
+}
+
+table th {
+    text-align:left;
+    background-color:#4A5D75;
+    padding:.3em .5em;
+    color:white;
+}
+
+table td {padding:.15em .5em;}
+
+table tr.even td {background-color:#f5f5f5;}
+
+table th p:first-child, table td p:first-child, table li p:first-child {
+    margin-top:0em;
+    padding-top:0em;
+    display:inline;
+}
+
+th, td {border-style:none;}
+
+table table td {
+    border-bottom:1px dotted #aaa !important;
+    background-color:white;
+    padding:.6em 0em;
+}
+
+table table {
+    border:1px solid white !important;
+    font-size:.9em;
+}
+
+td.remarkval {
+    font-size:.9em;
+    color:#444;
+}
+
+.defaultval {font-size:.8em}
+
+td.typeval {font-size:.8em}
+
+td.fieldval {
+    font-weight:bold;
+    font-size:.9em;
+}
+
+th.dbkey {font-size:.9em;}
+
+.lbname, .lbtype, .lbdescr, .lbdriver, .lbhost {
+    color:white;
+    font-weight:bold;
+    background-color:#999;
+    font-size:0.9em;
+    width:120px;
+}
+
+td.remarkval {width:230px;}
+
+td.tname {
+    font-weight:bold;
+    font-size:1.1em;
+}
+
+h5 {font-size:9pt;}
+h6 {font-size:10pt;}
+
+th.dbfield {width:120px;}
+th.dbtype {width:70px;}
+th.dbdefault {width:70px;}
+th.dbnul {width:70px;}
+th.dbkey {width:70px;}
+
+span.book {
+    margin-top:4em;
+    display:block;
+}
+
+span.chapter {
+    display:block;
+    margin-top:0.5em;
+}
+
+/* Breadcrumbs */
+
+#breadcrumbs ul li.first:before {content:"" "";}
+
+#breadcrumbs {
+    color:#900;
+    padding:3px;
+    margin-bottom:25px;
+}
+
+#breadcrumbs ul {
+    margin-left:0;
+    padding-left:0;
+    display:inline;
+    border:none;
+}
+
+#breadcrumbs ul li {
+    margin-left:0;
+    padding-left:2px;
+    border:none;
+    list-style:none;
+    display:inline;
+}
+
+#breadcrumbs ul li:before {
+    content:""\0020 \0020 \0020 \00BB \0020"";
+    color:#333;
+}
+
+/* Status */
+
+.alpha1 {background:white url(../images/community/watermark-alpha1.png) top left repeat;}
+.alpha2 {background:white url(../images/community/watermark-alpha2.png) top left repeat;}
+.beta1 {background:white url(../images/community/watermark-beta1.png) top left repeat;}
+.beta2 {background:white url(../images/community/watermark-beta2.png) top left repeat;}
+.pre-release-candidate {background:white url(../images/community/watermark-pre-release-candidate.png) top left repeat;}
+.release-candidate {background:white url(../images/community/watermark-release-candidate.png) top left repeat;}
+
+/* Index */
+
+.glossary h3, .index h3 {
+    font-size:2em;
+    color:#aaa;
+    margin:0em;
+}
+
+.indexdiv {margin-bottom:1em;}
+
+.glossary dt, .index dt {
+    font-size:.9em;
+    color:#444;
+    padding-top:.5em;
+}
+
+.glossary dl dl dt, .index dl dl dt {
+    font-size:.85em;
+    color:#777;
+    line-height:1.2em;
+    font-weight:normal;
+    padding-top:0em;
+}
+
+.index dl dl dt:before {
+    content:""- "";
+    color:#ccc;
+}
+
+/* Changes */
+
+.footnotes {}
+
+.footnote {
+    padding:.2em 1em;
+    background-color:#c8c5ac;
+    font-size:.9em;
+    margin:0em;
+    margin-bottom:.5em;
+    color:#222;
+}
+
+table .footnote {margin:1em .5em;}
+
+sup {
+    padding:0em .3em;
+    padding-left:0em;
+}
+
+.footnote {position:relative;}
+
+.footnote sup {
+    color:#e3dcc0;
+    font-size:1.8em;
+    position:absolute;
+    left:.4em;
+}
+
+.footnote sup a:link, .footnote sup a:visited {
+    color:#92917d;
+    text-decoration:none;
+}
+
+.footnote:hover sup a {
+    color:#fff;
+    text-decoration:none;
+}
+
+.footnote p {padding-left:5em;}
+
+.footnote a:link, .footnote a:visited {color:#00537c;}
+
+.footnote a:hover {color:white;}
+
+li p:first-child {
+    margin:0em !important;
+    padding:0em !important;
+}
+
+div.chapter, div.section {padding-top:2em;}
+
+.revhistory {font-size:}
+
+pre .replaceable, pre .keycap {color:white;}
+
+pre {
+  font-family:verdana,helvetica,sans-serif;
+  background-color:#F5F5F5;
+  border:1px solid #CCCCCC;
+  padding:5px 15px 5px 25px;
+}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable,
+div.note .keycap, div.tip .keycap, div.important .keycap, div.caution .keycap, div.warning .keycap {color:white;}
+
+div.abstract {font-size:larger;}
+
+.authorgroup {}
+
+.authorgroup h4 {
+    padding:0em;
+    margin:0em;
+    margin-top:1em;
+}
+
+.author, .editor, .translator, .othercredit {display:block;}
+
+/* Simpler author style on contents page */
+
+.authorgroup div {
+	margin-left:10px;
+	margin-right:10px;
+	margin-bottom:15px;
+}
+
+ul li p:last-child {
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/extensions.css b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
new file mode 100755
index 0000000000..fd43f3b670
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
@@ -0,0 +1,7 @@
+/* Firefox */
+
+pre {-moz-border-radius:11px;}
+
+.example {-moz-border-radius:15px;}
+
+div.note, div.tip, div.important, div.caution, div.warning {-moz-border-radius:11px;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
new file mode 100755
index 0000000000..ce16cff0e5
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
@@ -0,0 +1,80 @@
+@import url(""documentation.css"");
+@import url(""docnav.css"");
+@import url(""reports.css"");
+@import url(""extensions.css"");
+@import url(""codehighlight.css"");
+
+body {
+    background-image:url(../images/community/bkg_gradient.gif);
+    background-repeat:repeat-x;
+    margin:0 auto;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    font-size:12px;
+    max-width:55em;
+    padding:0em 2em;
+    color:#333;
+    line-height:150%;
+    text-align:justify;
+}
+
+/* Links */
+
+a:link {color:#0066cc;}
+
+a:visited {color:#6699cc;}
+
+div.longdesc-link {
+    float:right;
+    color:#999;
+}
+
+/* Headings */
+
+h1, h2, h3, h4, h5, h6 {
+    color:#4a5d75;
+    line-height:130%;
+    margin-top:0em;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    background-color:transparent;
+}
+
+h1 {
+    background-image:url(../images/community/title_hdr.png);
+    background-repeat:no-repeat;
+    border-top:1px dotted #CCCCCC;
+    line-height:1.2em;
+    color:#182737;
+    font-size:2em;
+    padding:1.5em;
+}
+
+h2 {font-size:1.6em;}
+
+h3 {
+    font-size:1.3em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h4 {
+    font-size:1.1em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h5.formalpara {
+    font-size:1em;
+    margin-top:2em;
+    margin-bottom:.8em;
+}
+
+/* Element rules */
+
+hr {
+    border-collapse:collapse;
+    border-style:none;
+    border-top:1px dotted #ccc;
+    width:100% !important;
+}
+
+sup {color:#999;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/reports.css b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
new file mode 100755
index 0000000000..8dd639d4cb
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
@@ -0,0 +1,231 @@
+/* Reports */
+
+.reports ul.locale {list-style:none;}
+
+.reports ul {
+    padding:0em;
+    margin:0em;
+}
+
+.reports ul.locale li {
+    font-size:small;
+    color:#000;
+    display:block;
+    border:1px solid #eee;
+    float:left;
+    padding-right:2em;
+    margin-right:1em;
+    margin-bottom:1em;
+}
+
+.reports ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.1em;
+    padding-bottom:.5em;
+}
+
+.reports ul.locale strong {
+    display:block;
+    margin:0em;
+    padding:0em;
+    margin-bottom:-2.2em;
+}
+
+.reports ul.locale span.value {
+    display:block;
+    position:relative;
+    text-align:right;
+    margin-right:-1.5em;
+    font-size:1.0em;
+    color:#444;
+}
+
+.reports ul.locale li {
+    width:12em;
+    display:block;
+    float:left;
+    margin:0em;
+    clear:none;
+}
+
+.reports ul.locale li div.progress {
+    font-size:1em;
+    width:13.2em;
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+.reports h2 {
+    font-size:1em;
+    margin:0em;
+}
+
+.reports li {}
+
+.reports li:hover {
+    background-color:#666;
+    border-color:#444 !important;
+    color:white !important;
+}
+
+.reports li:hover strong, .reports li:hover h2, .reports li:hover a, .reports li:hover span.value {color:white;}
+
+/* Uniform */
+
+body.results, body.reports {
+    max-width:57em !important;
+    padding:0em !important;
+}
+
+/* Progress Bar */
+
+div.progress {
+    display:block;
+    float:left;
+    width:16em;
+    background:#c00 url(../images/community/shine.png) top left repeat-x;
+    height:1em;
+}
+
+div.progress span {
+    height:1em;
+    float:left;
+}
+
+div.progress span.translated {background:#6c3 url(../images/community/shine.png) top left repeat-x;}
+div.progress span.fuzzy {background:#ff9f00 url(../images/community/shine.png) top left repeat-x;}
+
+/* Results */
+
+.results ul.locale {
+    list-style:none;
+    padding:0em;
+    margin:0em;
+}
+
+.results .pofile {
+    padding:0em !important;
+    margin:0em;
+}
+
+.results ul.locale li {
+    border-top:1px solid #eee;
+    padding:0em;
+    margin:0em;
+    padding-left:32px;
+}
+
+.results ul.locale .pofile {
+    font-size:1.2em;
+    display:block;
+    width:100%;
+    color:#444;
+    padding:0em;
+    margin:0em;
+}
+
+.results span.value {color:#888;}
+
+.results strong {font-weight:normal;}
+
+.results .home a {
+    display:block;
+    margin:0 auto;
+    width:5em;
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding:5px;
+    padding-left:28px;
+    font-size:1.2em;
+}
+
+.results ul.locale li:hover, .results ul.locale li:hover span.pofile, .results ul.locale li:hover strong, .results ul.locale li:hover span.value {
+    background-color:#666 !important;
+    color:white;
+}
+
+ul.locale {list-style:none;}
+
+ul.locale li.total {
+    font-size:small;
+    color:#777;
+    width:31em;
+    display:block;
+    float:left;
+    margin-right:2em;
+    clear:none !important;
+}
+
+ul.locale li {
+    clear:both;
+    font-size:small;
+    color:#777;
+    display:block;
+}
+
+ul.locale strong, span.value {
+    font-weight:normal;
+    color:#888;
+    font-size:.7em;
+}
+
+ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.2em;
+}
+
+ul.locale li.total div.progress {
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+ul.locale li {width:100%;}
+
+ul.locale li div.progress {
+    float:left;
+    position:relative;
+    left:30.5em;
+    top:-2em;
+    margin:0em;
+    margin-bottom:-3em;
+}
+
+li.total {padding:0em !important;}
+
+li.total {
+    float:right;
+    max-width:16em;
+    padding:.5em;
+    margin:0 auto;
+    padding-top:.5em;
+    background-color:#f7f2d0;
+    font-size:1.3em !important;
+    color:#ccc !important;
+    margin-bottom:1em;
+    min-height:9.5em;
+}
+
+li.total .value {
+    color:#444;
+    font-size:.8em;
+}
+
+li.total strong {
+    display:block;
+    color:black;
+    font-weight:bold;
+}
+
+li.total span.value {
+    position:relative;
+    display:block;
+    top:-1.25em;
+    text-align:right;
+}
+
+.pofile {position:relative;}
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif
new file mode 100755
index 0000000000..e67f720dc6
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png
new file mode 100755
index 0000000000..5e2d744587
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png
new file mode 100755
index 0000000000..0c28717781
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
new file mode 100755
index 0000000000..e020ca977e
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
@@ -0,0 +1,189 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Generator: Adobe Illustrator 12.0.1, SVG Export Plug-In  -->
+<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" [
+	<!ENTITY ns_flows ""http://ns.adobe.com/Flows/1.0/"">
+	<!ENTITY ns_svg ""http://www.w3.org/2000/svg"">
+	<!ENTITY ns_xlink ""http://www.w3.org/1999/xlink"">
+]>
+<svg  version=""1.1"" xmlns=""&ns_svg;"" xmlns:xlink=""&ns_xlink;"" xmlns:a=""http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/""
+	 width=""17"" height=""17"" viewBox=""-0.75 -0.625 17 17"" enable-background=""new -0.75 -0.625 17 17"" xml:space=""preserve"">
+<defs>
+</defs>
+<g>
+	<defs>
+		<circle id=""XMLID_6_"" cx=""7.859"" cy=""7.859"" r=""7.484""/>
+	</defs>
+	<clipPath id=""XMLID_9_"">
+		<use xlink:href=""#XMLID_6_"" />
+	</clipPath>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.68 5.102,15.344 0.375,15.344 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.547 5.273,15.344 5.105,15.344 0.375,11.68 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C9D0D5"" points=""0.375,11.414 5.445,15.344 5.273,15.344 0.375,11.547 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C6CDD3"" points=""0.375,11.281 5.617,15.344 5.445,15.344 0.375,11.414 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C5CCD2"" points=""0.375,11.148 5.789,15.344 5.617,15.344 0.375,11.281 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C3C9D0"" points=""0.375,11.016 5.961,15.344 5.789,15.344 0.375,11.148 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C1C8CE"" points=""0.375,10.883 6.129,15.344 5.961,15.344 0.375,11.016 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BFC5CC"" points=""0.375,10.75 6.301,15.344 6.129,15.344 0.375,10.883 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BEC4CB"" points=""0.375,10.617 6.473,15.344 6.301,15.344 0.375,10.75 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BBC2C9"" points=""0.375,10.484 6.645,15.344 6.473,15.344 0.375,10.617 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BAC0C8"" points=""0.375,10.352 6.812,15.344 6.645,15.344 0.375,10.484 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B7BEC6"" points=""0.375,10.219 6.984,15.344 6.812,15.344 0.375,10.352 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B6BDC5"" points=""0.375,10.086 7.156,15.344 6.984,15.344 0.375,10.219 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B5BBC3"" points=""0.375,9.957 7.328,15.344 7.156,15.344 0.375,10.086 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B3BAC2"" points=""0.375,9.824 7.5,15.344 7.328,15.344 0.375,9.957 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B1B7C0"" points=""0.375,9.691 7.672,15.344 7.5,15.344 0.375,9.824 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B0B6BF"" points=""0.375,9.559 7.84,15.344 7.672,15.344 0.375,9.691 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AEB5BE"" points=""0.375,9.426 8.012,15.344 7.84,15.344 0.375,9.559 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ADB3BC"" points=""0.375,9.293 8.184,15.344 8.012,15.344 0.375,9.426 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ABB2BC"" points=""0.375,9.16 8.352,15.344 8.184,15.344 0.375,9.293 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AAB0BA"" points=""0.375,9.027 8.523,15.344 8.352,15.344 0.375,9.16 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A8AEB8"" points=""0.375,8.895 8.695,15.344 8.523,15.344 0.375,9.027 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ADB7"" points=""0.375,8.762 8.867,15.344 8.695,15.344 0.375,8.895 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ACB6"" points=""0.375,8.629 9.039,15.344 8.867,15.344 0.375,8.762 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A3AAB4"" points=""0.375,8.496 9.211,15.344 9.039,15.344 0.375,8.629 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A2A8B3"" points=""0.375,8.363 9.383,15.344 9.211,15.344 0.375,8.496 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A0A7B1"" points=""0.375,8.23 9.551,15.344 9.383,15.344 0.375,8.363 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9FA6B0"" points=""0.375,8.102 9.723,15.344 9.551,15.344 0.375,8.23 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9EA4AF"" points=""0.375,7.969 9.895,15.344 9.723,15.344 0.375,8.102 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9CA3AE"" points=""0.375,7.836 10.062,15.344 9.895,15.344 0.375,7.969 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9BA1AD"" points=""0.375,7.703 10.234,15.344 10.062,15.344 0.375,7.836 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9AA0AB"" points=""0.375,7.57 10.406,15.344 10.234,15.344 0.375,7.703 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#989FAA"" points=""0.375,7.438 10.578,15.344 10.406,15.344 0.375,7.57 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#979EAA"" points=""0.375,7.305 10.75,15.344 10.578,15.344 0.375,7.438 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#969CA8"" points=""0.375,7.172 10.918,15.344 10.75,15.344 0.375,7.305 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#949BA7"" points=""0.375,7.039 11.09,15.344 10.918,15.344 0.375,7.172 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9399A5"" points=""0.375,6.906 11.262,15.344 11.09,15.344 0.375,7.039 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9298A4"" points=""0.375,6.773 11.434,15.344 11.262,15.344 0.375,6.906 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9097A3"" points=""0.375,6.641 11.602,15.344 11.434,15.344 0.375,6.773 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8F95A2"" points=""0.375,6.508 11.773,15.344 11.602,15.344 0.375,6.641 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8E95A1"" points=""0.375,6.375 11.945,15.344 11.773,15.344 0.375,6.508 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8D93A0"" points=""0.375,6.242 12.117,15.344 11.945,15.344 0.375,6.375 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8B929F"" points=""0.375,6.113 12.289,15.344 12.117,15.344 0.375,6.242 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8A919E"" points=""0.375,5.98 12.461,15.344 12.289,15.344 0.375,6.113 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#898F9D"" points=""0.375,5.848 12.629,15.344 12.461,15.344 0.375,5.98 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878E9B"" points=""0.375,5.715 12.801,15.344 12.629,15.344 0.375,5.848 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878D9B"" points=""0.375,5.582 12.973,15.344 12.801,15.344 0.375,5.715 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#858C9A"" points=""0.375,5.449 13.141,15.344 12.973,15.344 0.375,5.582 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#848B98"" points=""0.375,5.316 13.312,15.344 13.141,15.344 0.375,5.449 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#838A97"" points=""0.375,5.184 13.484,15.344 13.312,15.344 0.375,5.316 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#828997"" points=""0.375,5.051 13.656,15.344 13.484,15.344 0.375,5.184 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#818895"" points=""0.375,4.918 13.828,15.344 13.656,15.344 0.375,5.051 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#808794"" points=""0.375,4.785 14,15.344 13.828,15.344 0.375,4.918 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7E8594"" points=""0.375,4.652 14.172,15.344 14,15.344 0.375,4.785 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7D8593"" points=""0.375,4.52 14.34,15.344 14.172,15.344 0.375,4.652 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7C8392"" points=""0.375,4.387 14.512,15.344 14.34,15.344 0.375,4.52 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7B8290"" points=""0.375,4.258 14.68,15.344 14.512,15.344 0.375,4.387 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7A8190"" points=""0.375,4.125 14.852,15.344 14.68,15.344 0.375,4.258 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#79808F"" points=""0.375,3.992 15.023,15.344 14.852,15.344 0.375,4.125 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#787F8D"" points=""0.375,3.859 15.195,15.344 15.023,15.344 0.375,3.992 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#777E8D"" points=""0.375,3.727 15.312,15.301 15.277,15.344 15.195,15.344 0.375,3.859 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767D8C"" points=""0.375,3.594 15.344,15.195 15.344,15.258 15.312,15.301 0.375,3.727 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767C8B"" points=""0.375,3.461 15.344,15.062 15.344,15.195 0.375,3.594 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#747B8A"" points=""0.375,3.328 15.344,14.93 15.344,15.062 0.375,3.461 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#737A89"" points=""0.375,3.195 15.344,14.797 15.344,14.93 0.375,3.328 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#727989"" points=""0.375,3.062 15.344,14.664 15.344,14.797 0.375,3.195 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#717888"" points=""0.375,2.93 15.344,14.531 15.344,14.664 0.375,3.062 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#707786"" points=""0.375,2.797 15.344,14.398 15.344,14.531 0.375,2.93 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6F7686"" points=""0.375,2.664 15.344,14.266 15.344,14.398 0.375,2.797 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7585"" points=""0.375,2.531 15.344,14.133 15.344,14.266 0.375,2.664 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7584"" points=""0.375,2.398 15.344,14 15.344,14.133 0.375,2.531 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6C7383"" points=""0.375,2.266 15.344,13.867 15.344,14 0.375,2.398 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6B7383"" points=""0.375,2.137 15.344,13.734 15.344,13.867 0.375,2.266 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6A7281"" points=""0.375,2 15.344,13.602 15.344,13.734 0.375,2.137 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#697181"" points=""0.375,1.871 15.344,13.469 15.344,13.602 0.375,2 	""/>
+	<polygon",added the css style module and swapped out the jboss . org logo with drools logo in html and eclipse output . . git - svn - id : https : / / svn . jboss . org / repos / labs / labs / jbossrules / trunk @ 23780 c60d74c8 - e8f6 - 0310 - 9e8f - d4a2fc68ab70,"""Added docbook-style-drools module with CSS styles and images for JBoss Community Documentation""","""Added JBoss Community Documentation Style for Drools""","The commit message should be something like ""Adding Docbook CSS and image files for Drools documentation"". This message indicates that the purpose of the commit is to add CSS and image files used for styling Docbook-generated Drools documentation. The specific files being added include `documentation.css`, `docnav.css`, `reports.css`, `extensions.css`, `codehighlight.css`, `jbossorg.css`, `bkg_gradient.gif`, `community_doc.png`, and several callout images in SVG format. The files are being placed in the `src/main/css/css/` and `src/main/images/images/community/docbook/callouts/` directories of the Drools documentation project.","Added Drools documentation styles and resources for Maven project, including CSS, and images for code highlighting and documentation navigation.",Model 4
"diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml
index 5c858e64e..eec8cabf4 100644
--- a/profiler/nbproject/project.xml
+++ b/profiler/nbproject/project.xml
@@ -270,8 +270,8 @@ made subject to such option by the copyright holder.
                         <compile-dependency/>
                     </test-dependency>
                     <test-dependency>
-                        <code-name-base>org.netbeans.core.ui</code-name-base>
-                        <recursive/>
+                        <code-name-base>org.netbeans.modules.sampler</code-name-base>
+                        <compile-dependency/>
                     </test-dependency>
                 </test-type>
             </test-dependencies>
diff --git a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
index 67ae85c64..0b7f11249 100644
--- a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
+++ b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
@@ -42,12 +42,9 @@
 
 package org.netbeans.modules.profiler.actions;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.io.DataOutputStream;
 import java.io.OutputStream;
 import java.util.logging.Level;
-import javax.swing.Action;
 import org.junit.Test;
 import org.netbeans.junit.Log;
 import org.netbeans.modules.profiler.ui.NpsDataObject;
@@ -56,10 +53,12 @@ import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 import org.openide.loaders.DataObject;
 import static org.junit.Assert.*;
+import org.netbeans.modules.sampler.Sampler;
 
 /** Shows how o.n.core uses the SelfSamplerAction to start and stop self profiling.
  *
  * @author Jaroslav Tulach <jtulach@netbeans.org>
+ * @author Tomas Hurka
  */
 public class SelfSamplerActionTest {
 
@@ -68,24 +67,17 @@ public class SelfSamplerActionTest {
 
     @Test
     public void testSelfProfileToStream() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
-
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
         FileObject fo = FileUtil.createMemoryFileSystem().getRoot().createData(""slow.nps"");
         OutputStream os = fo.getOutputStream();
         DataOutputStream dos = new DataOutputStream(os);
-        al.actionPerformed(new ActionEvent(dos, 0, ""write"")); // NOI18N
+        sampler.stopAndWriteTo(dos);
         dos.close();
 
         if (fo.getSize() < 100) {
@@ -104,39 +96,32 @@ public class SelfSamplerActionTest {
             fail(""There shall be no warnings:\n"" + log);
         }
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
     @Test
     public void testSelfProfileCancel() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
-
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
-        al.actionPerformed(new ActionEvent(this, 0, ""cancel"")); // NOI18N
+        sampler.cancel();
         Thread.sleep(1000);
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
-    private void assertLoggerThread(String msg, boolean exist) {
+    private void assertSamplerThread(String msg, boolean exist) {
         for (Thread t : Thread.getAllStackTraces().keySet()) {
-            if (t.getName().startsWith(""logger-"")) {
+            if (t.getName().startsWith(""sampler-"")) {
                 assertTrue(msg + "" There is "" + t.getName() + "" thread"", exist);
                 return;
             }
         }
-        assertFalse(msg + "" There is no logger- thread"", exist);
+        assertFalse(msg + "" There is no sampler- thread"", exist);
     }",Automated merge with http : / / hg . netbeans . org / web - main,"""Replace SelfSamplerAction with Sampler in SelfSamplerActionTest""","""Updated SelfSamplerActionTest to use Sampler API instead of SelfSamplerAction""","""Updated SelfSamplerActionTest to use Sampler class from org.netbeans.modules.sampler and removed unused imports""

Explanation:
The commit message indicates that the SelfSamplerActionTest class has been updated to use the Sampler class from the org.netbeans.modules.sampler package instead of the previous implementation. Additionally, unused imports have been removed from the class. This change could potentially improve the performance and maintainability of the code by reducing unnecessary dependencies and using a more appropriate implementation for self-profiling.","""Replace logger-based profiling with Sampler API in SelfSamplerActionTest and update project dependencies.""",Model 4
"diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml
index 2234048ac1..e80e37688d 100644
--- a/demos/main/src/main/AndroidManifest.xml
+++ b/demos/main/src/main/AndroidManifest.xml
@@ -21,6 +21,7 @@
   <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>
   <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE""/>
   <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+  <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
 
   <uses-feature android:name=""android.software.leanback"" android:required=""false""/>
   <uses-feature android:name=""android.hardware.touchscreen"" android:required=""false""/>
diff --git a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
index f75607f268..5227411266 100644
--- a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
+++ b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
@@ -38,6 +38,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service
  *     android:name=""com.google.android.exoplayer2.ext.jobdispatcher.JobDispatcherScheduler$JobDispatcherSchedulerService""
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
index b3737eb8bc..20254c87ae 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
@@ -34,6 +34,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service android:name=""com.google.android.exoplayer2.util.scheduler.PlatformScheduler$PlatformSchedulerService""
  *     android:permission=""android.permission.BIND_JOB_SERVICE""",Add android . permission . FOREGROUND_SERVICE .,"""Add FOREGROUND_SERVICE permission to AndroidManifest.xml and documentation""",Added permission for foreground service to enable job scheduling.,"The commit message could be:

""Added FOREGROUND_SERVICE permission to AndroidManifest.xml and related comments in Java files for ExoPlayer's scheduler services""",Added FOREGROUND_SERVICE permission for better service management across different components.,Model 4
"diff --git a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
index 76d918d68c2..d6246e73417 100644
--- a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
+++ b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
@@ -237,25 +237,16 @@ this value indicates the latest size.
 (string) For internal use. The type of result.
 
 `model_size_stats`.`total_by_field_count`:::
-(long) The number of `by` field values that were analyzed by the models.
-+
---
-NOTE: The `by` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `by` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_over_field_count`:::
-(long) The number of `over` field values that were analyzed by the models.
-+
---
-NOTE: The `over` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `over` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_partition_field_count`:::
-(long) The number of `partition` field values that were analyzed by the models.
+(long) The number of `partition` field values that were analyzed by the models. 
+This value is cumulative for all detectors.
 
 `model_size_stats`.`timestamp`:::
 (date) The timestamp of the `model_size_stats` according to the timestamp of the",Clarifies model_size_stats . total_xxx_field_count objects and removes notes in GET job stats API docs .,"""Update get-job-stats API documentation to clarify cumulative counts for by, over, and partition field values""","""Update documentation for cumulative field value counts in model size stats API""","""Update docs for `model_size_stats` fields in Get Job Stats API: clarify that `total_by_field_count` and `total_over_field_count` are cumulative for all detectors.""

Explanation: The change in the documentation clarifies that the `total_by_field_count` and `total_over_field_count` fields in the `model_size_stats` object returned by the Get Job Stats API are cumulative for all detectors, rather than being counted separately for each detector and partition. This makes the documentation more accurate and less confusing for users of the API. The commit message should reflect this change.",Update `model_size_stats` descriptions to clarify that field value counts are cumulative for all detectors.,Model 1
"diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
index cbd6b088670..f3daed0adb9 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
@@ -18,7 +18,9 @@ function getConnectorConfigs() (http:Options) {
                keyStoreFile:""${ballerina.home}/bre/security/wso2carbon.jks"",
                keyStorePassword:""wso2carbon"",
                trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-               trustStorePassword:""wso2carbon""
+               trustStorePassword:""wso2carbon"",
+               ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+               sslEnabledProtocols:""TLSv1.2,TLSv1.1""
                    },
               followRedirects: {}
     };
diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
index 3929f00c9e6..10dc2098671 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
@@ -9,7 +9,9 @@ import ballerina.lang.system;
     certPassword:""wso2carbon"",
     sslVerifyClient:""require"",
     trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-    trustStorePassword:""wso2carbon""
+    trustStorePassword:""wso2carbon"",
+    ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+    sslEnabledProtocols:""TLSv1.2,TLSv1.1""
 }
 service<http> echo {",Add ciphers and sslEnabledProtocols to the test,"""Added ciphers and sslEnabledProtocols to MutualSSL client and server configurations""","""Added TLS configuration options for mutual SSL connections""

This commit message accurately reflects the changes made in the diff, which involve adding TLS configuration options (ciphers and sslEnabledProtocols) to the mutual SSL client and server configurations.","Added ciphers and sslEnabledProtocols configurations to mutualSSLClient.bal and mutualSSLServer.bal files.

The changes made to the files are as follows:

In mutualSSLClient.bal:
- Added `ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA""` configuration to the `http:Options` record.
- Added `sslEnabledProtocols:""TLSv1.2,TLSv1.1""` configuration to the `http:Options` record.

In mutualSSLServer.bal:
- Added `ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA""` configuration to the `http:ListenerConfiguration` record.
- Added `sslEnabledProtocols:""TLSv1.2,TLSv1.1""` configuration to the `http:ListenerConfiguration` record.

These changes add support for specific cipher suites and enable specific SSL/TLS protocols in the client and server configurations.",Added ciphers and SSL protocols to MutualSSL client and server configurations.,Model 1
"diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
index 31ff557d5f..412c82f9fc 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
@@ -32,6 +32,10 @@ enum Attribute {
     UNKNOWN(null),
 
     ID(Constants.ID),
+    NAME(Constants.NAME),
+    VALUE(Constants.VALUE),
+    CLASS(Constants.CLASS),
+    PROTOCOL_BINDINGS(Constants.PROTOCOL_BINDINGS),
     ;
 
     private final String name;
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
index 6839300ad3..d90516f296 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
@@ -44,6 +44,8 @@ enum Element {
     PROPERTY(Constants.PROPERTY),
     PROPERTY_NAME(Constants.PROPERTY_NAME),
     PROPERTY_VALUE(Constants.PROPERTY_VALUE),
+    PRE_HANDLER_CHAIN(Constants.PRE_HANDLER_CHAIN),
+    POST_HANDLER_CHAIN(Constants.POST_HANDLER_CHAIN),
     PRE_HANDLER_CHAINS(Constants.PRE_HANDLER_CHAINS),
     POST_HANDLER_CHAINS(Constants.POST_HANDLER_CHAINS),
     HANDLER_CHAIN(Constants.HANDLER_CHAIN),
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
index fad5bbf685..b53b89559d 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
@@ -164,6 +164,41 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
             switch (Namespace.forUri(reader.getNamespaceURI())) {
                 case WEBSERVICES_1_0: {
+                    final Element element = Element.forName(reader.getLocalName());
+                    if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
+                        throw unexpectedElement(reader);
+                    }
+                    switch (element) {
+                        case MODIFY_WSDL_ADDRESS: {
+                            boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));
+                            subsystem.get(MODIFY_WSDL_ADDRESS).set(b);
+                            break;
+                        }
+                        case WSDL_HOST: {
+                            subsystem.get(WSDL_HOST).set(parseElementNoAttributes(reader));
+                            break;
+                        }
+                        case WSDL_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_PORT).set(port);
+                            break;
+                        }
+                        case WSDL_SECURE_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_SECURE_PORT).set(port);
+                            break;
+                        }
+                        case ENDPOINT_CONFIG: {
+                            readEndpointConfigOld(reader, subsystem.get(OP_ADDR), endpointConfigs);
+                            break;
+                        }
+                        default: {
+                            throw unexpectedElement(reader);
+                        }
+                    }
+                    break;
+                }
+                case WEBSERVICES_1_1: {
                     final Element element = Element.forName(reader.getLocalName());
                     if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
                         throw unexpectedElement(reader);
@@ -215,7 +250,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return reader.getElementText().trim();
     }
 
-    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+    private void readEndpointConfigOld(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
         String configName = null;
 
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -235,11 +270,59 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
                     break;
                 }
                 case PRE_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, true);
+                    parseHandlerChainsOld(reader, configName, operationList, true);
                     break;
                 }
                 case POST_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, false);
+                    parseHandlerChainsOld(reader, configName, operationList, false);
+                    break;
+                }
+                case PROPERTY : {
+                    final ModelNode operation = parsePropertyOld(reader, configName);
+                    operationList.add(operation);
+                    break;
+                }
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+    }
+
+    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+        String configName = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                configName = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final ModelNode node = new ModelNode();
+        node.get(OP).set(ADD);
+        node.get(OP_ADDR).set(address).add(ENDPOINT_CONFIG, configName);
+        operationList.add(node);
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (element != Element.PRE_HANDLER_CHAIN && element != Element.POST_HANDLER_CHAIN && element != Element.PROPERTY
+                    && !encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                case PRE_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, true);
+                    break;
+                }
+                case POST_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, false);
                     break;
                 }
                 case PROPERTY : {
@@ -254,7 +337,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         }
     }
 
-    private ModelNode parseProperty(XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+    private ModelNode parsePropertyOld(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
         String propertyName = null;
         String propertyValue = null;
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -286,7 +369,48 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return operation;
     }
 
-    private ModelNode parseHandlerChains(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
+    private ModelNode parseProperty(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+        String propertyName = null;
+        String propertyValue = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                propertyName = value;
+                break;
+            case VALUE:
+                propertyValue = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (!encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+        final ModelNode operation = new ModelNode();
+        operation.get(OP).set(ADD);
+        operation.get(OP_ADDR).add(SUBSYSTEM, WSExtension.SUBSYSTEM_NAME).add(ENDPOINT_CONFIG, configName).add(PROPERTY, propertyName);
+        if (propertyValue != null) {
+            operation.get(VALUE).set(propertyValue);
+        }
+        return operation;
+    }
+
+    private ModelNode parseHandlerChainsOld(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
         ModelNode chainsNode = new ModelNode();
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
         while (reader.nextTag() != END_ELEMENT) {
@@ -297,7 +421,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
 
             switch (element) {
                 case HANDLER_CHAIN: {
-                    parseHandlerChain(reader, configName, operationList, isPreHandlerChain);
+",implemented new WS subsystem version unmarshalling process,"""Added support for endpoint config properties and handler chains in webservices subsystem""","According to the diff, the commit message should be:

""Add support for new elements in webservices subsystem parser""

This commit message is concise and accurately reflects the changes made in the code. It mentions the addition of new elements in the webservices subsystem parser, which is the main focus of the changes.","""Adding new attributes and elements to WebservicesSubsystemParser""

This commit appears to add new attributes (NAME, VALUE, CLASS, PROTOCOL_BINDINGS) to the Attribute enum and new elements (PRE_HANDLER_CHAIN, POST_HANDLER_CHAIN) to the Element enum in the WebservicesSubsystemParser class. It also adds new methods for parsing these new elements and attributes. The changes seem to be related to handling new configurations for web services in the JBoss server.","""Add NAME, VALUE, CLASS, PROTOCOL_BINDINGS attributes and handle PRE_HANDLER_CHAIN, POST_HANDLER_CHAIN elements in subsystem parser.""",Model 3
"diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
index a0ac7f5..624eab8 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
@@ -15,15 +15,21 @@
  */
 package edu.sfsu.cs.orange.ocr;
 
-import com.googlecode.leptonica.android.ReadFile;
-import com.googlecode.tesseract.android.TessBaseAPI;
+import java.io.File;
+import java.util.ArrayList;
 
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.os.AsyncTask;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.Message;
 import android.util.Log;
 
+import com.googlecode.leptonica.android.ReadFile;
+import com.googlecode.tesseract.android.ResultIterator;
+import com.googlecode.tesseract.android.TessBaseAPI;
+import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;
 /**
  * Class to send OCR requests to the OCR engine in a separate thread, send a success/failure message,
  * and dismiss the indeterminate progress dialog box. Used for non-continuous mode OCR only.
@@ -88,7 +94,21 @@ final class OcrRecognizeAsyncTask extends AsyncTask<Void, Void, Boolean> {
       ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());
       ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());
-      //ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
+
+      // Iterate through the results.
+      final ResultIterator iterator = baseApi.getResultIterator();
+      int[] lastBoundingBox;
+      ArrayList<Rect> charBoxes = new ArrayList<Rect>();
+      iterator.begin();
+      do {
+          lastBoundingBox = iterator.getBoundingBox(PageIteratorLevel.RIL_SYMBOL);
+          Rect lastRectBox = new Rect(lastBoundingBox[0], lastBoundingBox[1],
+                  lastBoundingBox[2], lastBoundingBox[3]);
+          charBoxes.add(lastRectBox);
+      } while (iterator.next(PageIteratorLevel.RIL_SYMBOL));
+      iterator.delete();
+      ocrResult.setCharacterBoundingBoxes(charBoxes);
+
     } catch (RuntimeException e) {
       Log.e(""OcrRecognizeAsyncTask"", ""Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED."");
       e.printStackTrace();",Add example character iterator code,"""Added character bounding box recognition in OcrRecognizeAsyncTask""","""Added character bounding box support to OcrRecognizeAsyncTask""","""Added character bounding box support to OcrRecognizeAsyncTask""

This commit adds new imports, specifically for `File`, `ArrayList`, `Rect`, `ResultIterator`, and `PageIteratorLevel`. It also modifies the existing `doInBackground()` method by adding a new block of code that iterates through the character bounding boxes in the OCR result and stores them in an `ArrayList` of `Rect` objects. This `ArrayList` is then set as a property of the `OcrResult` object using the `setCharacterBoundingBoxes()` method.

This change allows the OcrRecognizeAsyncTask to return more detailed information about the location of individual characters in the OCR result, which could be useful for a variety of applications. For example, it could be used to highlight specific words or characters in an image, or to improve the accuracy of text selection.","""Added character bounding box extraction using ResultIterator in OcrRecognizeAsyncTask to improve OCR results visualization.""",Model 1
"diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
index f50478ff1b..55d737403d 100644
--- a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
@@ -1,30 +1,64 @@
 package io.micronaut.configuration.metrics.binder.datasource
 
-import io.micrometer.core.instrument.MeterRegistry
-import spock.lang.Ignore
+
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
 import spock.lang.Specification
 
 import javax.sql.DataSource
 
 class DataSourcePoolMetricsBinderFactorySpec extends Specification {
 
-    @Ignore
     def ""test getting the beans manually""() {
         given:
-        def meterRegistry = Mock(MeterRegistry)
-        def dataSource1 = Mock(DataSource)
-        def dataSource2 = Mock(DataSource)
+        DataSourcePoolMetricsBinderFactory dataSourcePoolMetricsBinderFactory = new DataSourcePoolMetricsBinderFactory()
 
         when:
-        def binder = new DataSourcePoolMetricsBinderFactory([], meterRegistry)
-        binder.dataSourceMeterBinder(""default"", dataSource1)
-        binder.dataSourceMeterBinder(""first"", dataSource2)
+        def meterBinder = dataSourcePoolMetricsBinderFactory.dataSourceMeterBinder(""foo"", new Foo())
 
         then:
-        1 * dataSource2.hashCode() >> 1
-        1 * dataSource1.hashCode() >> 2
-        0 * _._
+        meterBinder
+    }
+
+    class Foo implements DataSourcePoolMetadata {
+
+        @Override
+        DataSource getDataSource() {
+            return null
+        }
+
+        @Override
+        Integer getIdle() {
+            return null
+        }
+
+        @Override
+        Float getUsage() {
+            return null
+        }
+
+        @Override
+        Integer getActive() {
+            return null
+        }
+
+        @Override
+        Integer getMax() {
+            return null
+        }
+
+        @Override
+        Integer getMin() {
+            return null
+        }
 
+        @Override
+        String getValidationQuery() {
+            return null
+        }
 
+        @Override
+        Boolean getDefaultAutoCommit() {
+            return null
+        }
     }
 }
diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
new file mode 100644
index 0000000000..8e7f09943a
--- /dev/null
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
@@ -0,0 +1,85 @@
+package io.micronaut.configuration.metrics.binder.datasource
+
+import io.micrometer.core.instrument.MeterRegistry
+import io.micrometer.core.instrument.Tags
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
+import spock.lang.Specification
+
+import javax.sql.DataSource
+
+
+class DataSourcePoolMetricsBinderSpec extends Specification {
+
+    MeterRegistry meterRegistry = Mock(MeterRegistry)
+
+    def ""DataSourcePoolMetricsBinder""() {
+        given:
+        DataSource dataSource = Mock(DataSource)
+        DataSourcePoolMetricsBinder dataSourcePoolMetricsBinder = new DataSourcePoolMetricsBinder(
+                dataSource,
+                new FooDataSourcePoolMetadata(dataSource),
+                ""foo"",
+                []
+        )
+
+        when:
+        dataSourcePoolMetricsBinder.bindTo(meterRegistry)
+
+        then:
+        1 * meterRegistry.gauge('jdbc.connections.active', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.min', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.max', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.usage', Tags.of(""name"",""foo""), dataSource, _)
+        0 * _._
+
+    }
+
+    class FooDataSourcePoolMetadata implements  DataSourcePoolMetadata {
+
+        final DataSource dataSource
+
+        FooDataSourcePoolMetadata(DataSource dataSource){
+            this.dataSource = dataSource
+        }
+
+        @Override
+        DataSource getDataSource() {
+            return dataSource
+        }
+
+        @Override
+        Integer getIdle() {
+            return 0
+        }
+
+        @Override
+        Float getUsage() {
+            return 0
+        }
+
+        @Override
+        Integer getActive() {
+            return 0
+        }
+
+        @Override
+        Integer getMax() {
+            return 0
+        }
+
+",adding more datasource metrics binder tests,"""Refactor and add tests for DataSourcePoolMetricsBinderFactory and DataSourcePoolMetricsBinder""","Added tests for DataSourcePoolMetricsBinder and DataSourcePoolMetricsBinderFactory. 

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of tests for two specific classes, which is the main focus of the changes.","The commit message could be:

""Refactor DataSourcePoolMetricsBinderFactorySpec and add DataSourcePoolMetricsBinderSpec

- Remove ignored test and update existing test in DataSourcePoolMetricsBinderFactorySpec
- Add new test class DataSourcePoolMetricsBinderSpec to test DataSourcePoolMetricsBinder functionality""","""Add tests for DataSourcePoolMetricsBinder and DataSourcePoolMetricsBinderFactory functionalities.""",Model 4
"diff --git a/zipkin-server/README.md b/zipkin-server/README.md
index 3e1c05251..f75821c93 100644
--- a/zipkin-server/README.md
+++ b/zipkin-server/README.md
@@ -579,6 +579,16 @@ of known open source libraries on 128-bit trace identifiers.
 
 See `zipkin2.storage.StorageComponent.Builder` for even more details!
 
+## TLS/SSL
+Zipkin-server can be made to run with TLS if needed:
+
+```bash
+# assuming you generate the key like this
+keytool -genkeypair -alias mysite -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore zipkin.p12 -validity 3650
+
+java -jar zipkin.jar --armeria.ssl.key-store=zipkin.p12 --armeria.ssl.key-store-type=PKCS12 --armeria.ssl.key-store-password=123123 --armeria.ssl.key-alias=mysite  --armeria.ssl.enabled=true --armeria.ports[0].port=9411 --armeria.ports[0].protocols[0]=https
+```
+
 ## Running with Docker
 Released versions of zipkin-server are published to Docker Hub as `openzipkin/zipkin`.
 See [docker-zipkin](https://github.com/openzipkin/docker-zipkin) for details.",add TLS note ( <issue_id> ),"""Add TLS/SSL configuration instructions to zipkin-server README""","""Added TLS/SSL support to Zipkin-server""","The commit message should be:

""Add TLS/SSL support to Zipkin server and update README with usage instructions""

This commit message summarizes the changes made in the code and the README file, which include adding TLS/SSL support to the Zipkin server and providing instructions on how to use it.",Add instructions to enable TLS/SSL for Zipkin server in the README.md,Model 1
"diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
index 9b86762d54..c637306c9f 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
@@ -18,9 +18,12 @@ import { EditorView, DecorationSet, NodeView } from 'prosemirror-view';
 import { findParentNodeOfType, NodeWithPos, findChildrenByType, findChildren } from 'prosemirror-utils';
 import { EditorState, TextSelection, Plugin, PluginKey, Transaction } from 'prosemirror-state';
 
+import zenscroll from 'zenscroll';
+
 import { nodeDecoration } from '../../api/decoration';
-import { firstNode, lastNode } from '../../api/node';
+import { firstNode, lastNode, editingRootScrollContainerElement } from '../../api/node';
 import { selectionIsWithin } from '../../api/selection';
+import { bodyElement } from '../../api/dom';
 
 import { findFootnoteNode, selectedFootnote, selectedNote } from './footnote';
 
@@ -53,6 +56,24 @@ export function footnoteEditorActivationPlugin() {
         return key.getState(state);
       },
     },
+
+    view: () => ({
+      // scroll footnote into view (if necessary) when note editor is active
+      update: (view: EditorView) => {
+        const note = selectedNote(view.state.selection);
+        if (note) {
+          const footnote = findFootnoteNode(view.state.doc, note.node.attrs.ref);
+          if (footnote) {
+            const footnoteEl = view.nodeDOM(footnote.pos);
+            if (footnoteEl) {
+              const body = bodyElement(view);
+              const scroller = zenscroll.createScroller(body, 0, 30);
+              scroller.intoView(footnoteEl as HTMLElement);
+            }
+          }
+        }
+      }
+    })
   });
 }
 
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
index e8f8b8cea3..4e0854b57d 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
@@ -37,12 +37,12 @@
 }
 
 .ProseMirror .body.editing-footnote {
-  bottom: 100px;
+  bottom: 160px;
   border-bottom: 1px solid;
 }
 
 .ProseMirror .notes.editing-footnote {
-  height: 90px;
+  height: 150px;
   padding-top: 10px;
   z-index: 5;
 }
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
index 7455927f70..8d98e35ff0 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
@@ -86,7 +86,11 @@ const extension: Extension = {
           },
         ],
         writer: (output: PandocOutput, node: ProsemirrorNode) => {
-          output.writeNote(node);
+          // don't write empty footnotes (otherwise in block or section mode they gobble up
+          // the section below them)
+          if (node.childCount > 0) {
+            output.writeNote(node);
+          }
         },
       },
     },","allocate more height ( 150px ) , scroll inline note into view ; don \' t write empty footnote","""Improve footnote editor behavior: scroll footnote into view when editing and prevent empty footnotes from being written to output""","""Improve footnote editor behavior and styling""

This commit message is concise and accurately reflects the changes made in the commit. It mentions the improvement of the footnote editor behavior and styling, which is evident from the changes in the code and CSS files.","""Update footnote editor to scroll footnote into view and adjust footnote styles""

Explanation:

* The first change is in the file `footnote-editor.ts`, where the `zenscroll` library is imported and used to scroll the footnote into view when the note editor is active. This is done by creating a scroller for the body element and using its `intoView` method to scroll the footnote element into view.
* The second change is in the file `footnote-styles.css`, where the bottom and height properties of the `.ProseMirror .body.editing-footnote` and `.ProseMirror .notes.editing-footnote` classes are adjusted.
* The third change is in the file `footnote.ts`, where an empty footnote is not written to the output in block or section mode to prevent it from gobbling up the section below it.","""Implement automatic scrolling to footnotes and adjust note editor height and bottom padding""",Model 4
"diff --git a/README.md b/README.md
index 828680c..a20d480 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"",
diff --git a/README.zh-cn.md b/README.zh-cn.md
index 71f8365..30155c4 100644
--- a/README.zh-cn.md
+++ b/README.zh-cn.md
@@ -53,7 +53,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"",",add missing comma in whiteList,"""Update README files to include trailing comma in andResGuard configuration""","The commit message should be:

""Added R.drawable.sina* to andResGuard in README files""

However, a more conventional commit message would be:

""Add sina drawable to andResGuard""

This is because commit messages should be concise and to the point, and should not include unnecessary words like ""Added"" or ""to"".","The commit message could be: ""Added missing comma in andResGuard configuration for umeng share for sina in README files""

The change is in the configuration of `andResGuard` in both `README.md` and `README.zh-cn.md` files. Specifically, a comma was added after `""R.drawable.sina*""`, which was previously missing. This change affects the configuration for umeng share for sina.",Add missing comma in README files for consistency in resource identifier lists.,Model 1
"diff --git a/Java/Java.sublime-syntax b/Java/Java.sublime-syntax
index 17a5ed49..468cdfe2 100644
--- a/Java/Java.sublime-syntax
+++ b/Java/Java.sublime-syntax
@@ -341,9 +341,10 @@ contexts:
 
   keywords:
     - match: '::'
-      scope: keyword.control.method-reference.java
+      scope: keyword.operator.method-reference.java
       push:
         - match: '{{id}}'
+          scope: variable.function.reference.java
           pop: true
         - match: (?=\S)
           pop: true
diff --git a/Java/syntax_test_java.java b/Java/syntax_test_java.java
index 371ae1d6..dd1d17c5 100644
--- a/Java/syntax_test_java.java
+++ b/Java/syntax_test_java.java
@@ -59,13 +59,15 @@ public class SyntaxTest {
         printList(Arrays.stream(args)
             .collect(Collectors.toCollection(ArrayList::new)));
 //                                                      ^^^ meta.method.body.java - keyword.control.new.java
-//                                                    ^^ keyword.control.method-reference.java
+//                                                      ^^^ variable.function.reference.java
+//                                                    ^^ keyword.operator.method-reference.java
         anotherMethod();
         try (Stream<String> lines = Files.lines(path)) {
 //      ^^^ keyword.control.catch-exception.java
 //                                 ^^^^^^^^^^^^^^^^^^ meta.assignment.rhs.java
 //",Adjusted scoping on method reference stuff,"""Update Java syntax highlighting for method references""","According to the diff, the commit message should be:

""Update Java syntax to correctly identify method references and operator keywords""

Or, in a more concise format:

""Improve Java syntax highlighting for method references and operators""","It seems like you're in the process of updating a Java syntax file for Sublime Text and you've made some changes to the regular expressions that match certain language constructs.

In the first diff, you've changed the scope of the `::` operator from `keyword.control.method-reference.java` to `keyword.operator.method-reference.java`. This seems to be a more accurate classification, as `::` is indeed an operator in Java, used for method references.

In the second diff, you've added a new scope `variable.function.reference.java` for the method name in a method reference. This is also a more accurate classification, as it distinguishes the method name in a method reference from regular identifiers.

As for the commit message, it should summarize the changes you've made. Based on the changes, a suitable commit message could be: ""Update Java syntax: Improve scoping for method references"".","### Summary of Changes
The provided `git diff` outputs indicate two main types of changes: 

1. **Scope Change for `::` Operator**
    - **File**: `Java/Java.sublime-syntax`
    - **Lines**: 5-10
    - **Details**: 
        - The scope for the `::` method reference operator has been changed from `keyword.control.method-reference.java` to `keyword.operator.method-reference.java`.
        - New sub-scope `variable.function.reference.java` was added to handle identifiers following the method reference operator.

2. **Syntax Test Updates**
    - **File**: `Java/syntax_test_java.java`
    - **Lines**: 11-14
    - **Details**: 
        - Syntax tests were updated to reflect the new scoping changes, verifying that references and operators use the correct scopes.

### Commit Message (Within 20 words):
Change method reference scope to keyword.operator.method-reference.java and add variable.function.reference.java; update tests.",Model 1
"diff --git a/build.gradle b/build.gradle
index 6910082650..1f3cfd2362 100644
--- a/build.gradle
+++ b/build.gradle
@@ -25,12 +25,7 @@ def download(File downloadDir, String url, String name) {
     return dest;
 }
 
-ext {
-    versions = [
-            // update this value when elasticsearch is updated
-            elasticsearch: ""2.4.1""
-    ]
-}
+apply from: 'gradle/dependencies.gradle'
 
 repositories {
     mavenCentral()
@@ -40,51 +35,6 @@ allprojects {
     apply plugin: 'findbugs'
     apply plugin: 'jacoco'
 
-    configurations.all {
-        resolutionStrategy {
-            // fail eagerly on version conflict (includes transitive dependencies)
-            failOnVersionConflict()
-
-            // ES requires hamcrest-all which includes hamcrest-core
-            dependencySubstitution {
-                substitute module('org.hamcrest:hamcrest-core') with(
-                        module('org.hamcrest:hamcrest-all:1.3'))
-            }
-
-            // forced versions of conflicting deps
-            force 'com.spatial4j:spatial4j:0.5'
-            force 'com.google.guava:guava:18.0'
-            force 'commons-codec:commons-codec:1.10'
-            force 'com.carrotsearch.randomizedtesting:junit4-ant:2.3.1'
-            force 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'
-            force 'junit:junit:4.11'
-            force 'org.slf4j:slf4j-api:1.6.2'
-            force 'com.fasterxml.jackson.core:jackson-core:2.8.1'
-            force 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'
-            force 'com.fasterxml.jackson.core:jackson-annotations:2.8.1'
-            force 'com.fasterxml.jackson.core:jackson-databind:2.8.1'
-            force 'joda-time:joda-time:2.9.4'
-            force 'org.hamcrest:hamcrest-all:1.3'
-            force 'org.antlr:antlr-runtime:3.5.2'
-            force 'commons-cli:commons-cli:1.3.1'
-            force 'org.apache.commons:commons-math3:3.6.1'
-            force 'org.apache.commons:commons-lang3:3.5'
-            force 'commons-logging:commons-logging:1.1.3'
-            force 'org.apache.httpcomponents:httpcore:4.3.3'
-            force 'org.apache.httpcomponents:httpclient:4.3.6'
-            force 'org.slf4j:slf4j-log4j12:1.7.21'
-            force 'log4j:log4j:1.2.17'
-            force 'io.netty:netty:3.10.6.Final'
-
-            // ensure to check following dependencies and their versions against those of HDFS plugin libs
-            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html
-            force 'org.codehaus.jackson:jackson-core-asl:1.9.13'
-            force 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
-            force 'com.google.code.findbugs:jsr305:3.0.1'
-            force 'commons-lang:commons-lang:2.6'
-        }
-    }
-
     tasks.withType(JavaCompile) {
         sourceCompatibility = ""1.8""
         targetCompatibility = ""1.8""
diff --git a/es-cloud-aws/build.gradle b/es-cloud-aws/build.gradle
index 65eaed6bfd..fbfec17523 100644
--- a/es-cloud-aws/build.gradle
+++ b/es-cloud-aws/build.gradle
@@ -3,8 +3,8 @@ apply plugin: 'idea'
 
 dependencies {
     compile project(':es')
-    compile 'com.amazonaws:aws-java-sdk-ec2:1.10.69'
-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'
+    compile ""com.amazonaws:aws-java-sdk-ec2:${versions.aws}""
+    compile ""com.amazonaws:aws-java-sdk-s3:${versions.aws}""
 }
 
 def pluginDir = project("":es"").file('upstream/plugins/cloud-aws')
diff --git a/es-repository-hdfs/build.gradle b/es-repository-hdfs/build.gradle
index 0f7d3e8b5c..4b610bf5c9 100644
--- a/es-repository-hdfs/build.gradle
+++ b/es-repository-hdfs/build.gradle
@@ -58,13 +58,7 @@ dependencies {
 configurations.all {
     resolutionStrategy {
         force 'commons-httpclient:commons-httpclient:3.0.1'
-        force 'joda-time:joda-time:2.8'
-        force ""commons-cli:commons-cli:1.2""
         eachDependency { details ->
-            // for slf4j use each dependency since there are so many variants
-            if (details.requested.name.contains(""slf4j-"")) {
-                details.useVersion ""1.7.6""
-            }
             if (details.requested.name.equals(""servlet-api"")) {
                 details.useTarget group: ""org.eclipse.jetty.orbit"", name: ""javax.servlet"", version: ""3.0.0.v201112011016""
             }
@@ -74,7 +68,7 @@ configurations.all {
 }
 
 task downloadUpstreamSources(type: Download) {
-    def upstreamCommit = 'v2.3.2'
+    def upstreamCommit = ""v${versions.elasticsearchhadoop}""
     src ""https://github.com/elastic/elasticsearch-hadoop/archive/${upstreamCommit}.zip""
     dest file(""${buildDir}/downloads/elasticsearch-hadoop-${upstreamCommit}.zip"")
     overwrite false
@@ -128,8 +122,8 @@ sourceSets {
 test.enabled = false
 
 compileJava {
-    sourceCompatibility = 1.7
-    targetCompatibility = 1.7
+    sourceCompatibility = 1.8
+    targetCompatibility = 1.8
 }
 
 jar {
diff --git a/es/build.gradle b/es/build.gradle
index 92dba6fe8d..0f57352df9 100644
--- a/es/build.gradle
+++ b/es/build.gradle
@@ -18,67 +18,69 @@ dependencies {
     // start ES compile dependencies
     // generated in upstream directory with:
     // mvn dependency:tree | grep -o ' .- .*:compile' | cut -d ' ' -f 3 | sort | sed ""s/\(.*\):jar:\(.*\):compile/compile '\1:\2'/g""
-    compile 'com.carrotsearch:hppc:0.7.1'
-    compile 'com.fasterxml.jackson.core:jackson-core:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.8.1'
-    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1'
-    compile 'com.github.spullara.mustache.java:compiler:0.8.13'
-    compile 'com.google.guava:guava:18.0'
-    compile 'com.ning:compress-lzf:1.0.2'
-    compile 'com.spatial4j:spatial4j:0.5'
-    compile 'com.tdunning:t-digest:3.0'
-    compile 'com.twitter:jsr166e:1.1.0'
-    compile 'com.vividsolutions:jts:1.13'
-    compile 'commons-cli:commons-cli:1.3.1'
-    compile 'io.netty:netty:3.10.6.Final'
-    compile 'joda-time:joda-time:2.9.4'
-    compile 'log4j:apache-log4j-extras:1.2.17'
-    compile 'log4j:log4j:1.2.17'
-    compile 'net.java.dev.jna:jna:4.1.0'
-    compile 'org.apache.lucene:lucene-analyzers-common:5.5.2'
-    compile 'org.apache.lucene:lucene-backward-codecs:5.5.2'
-    compile 'org.apache.lucene:lucene-core:5.5.2'
-    compile 'org.apache.lucene:lucene-grouping:5.5.2'
-    compile 'org.apache.lucene:lucene-highlighter:5.5.2'
-    compile 'org.apache.lucene:lucene-join:5.5.2'
-    compile 'org.apache.lucene:lucene-memory:5.5.2'
-    compile 'org.apache.lucene:lucene-misc:5.5.2'
-    compile 'org.apache.lucene:lucene-queries:5.5.2'
-    compile 'org.apache.lucene:lucene-queryparser:5.5.2'
-    compile 'org.apache.lucene:lucene-sandbox:5.5.2'
-    compile 'org.apache.lucene:lucene-spatial3d:5.5.2'
-    compile 'org.apache.lucene:lucene-spatial:5.5.2'
-    compile 'org.apache.lucene:lucene-suggest:5.5.2'
-    compile 'org.elasticsearch:securesm:1.0'
-    compile 'org.hdrhistogram:HdrHistogram:2.1.6'
-    compile 'org.joda:joda-convert:1.2'
-    compile 'org.slf4j:slf4j-api:1.6.2'
+    compile ""com.carrotsearch:hppc:0.7.1""
+    compile ""com.fasterxml.jackson.core:jackson-core:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${versions.jackson}""
+    compile ""com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}""
+    compile ""com.github.spullara.mustache.java:compiler:0.8.13""
+    compile ""com.google.guava:guava:${versions.guava}""
+    compile ""com.ning:compress-lzf:1.0.2""
+    compile ""com.spatial4j:spatial4j:${versions.spatial4j}""
+    compile ""com.tdunning:t-digest:3.0""
+    compile ""com.twitter:jsr166e:1.1.0""
+    compile ""com.vividsolutions:jts:${versions.jts}""
+    compile ""commons-cli:commons-cli:${versions.commonscli}""
+    compile ""io.netty:netty:${versions.netty}""
+    compile ""joda-time:joda-time:${versions.jodatime}""
+    compile ""log4j:apache-log4j-extras:${versions.log4j}""
+    compile ""log4j:log4j:${versions.log4j}""
+    compile ""net.java.dev.jna:jna:${versions.jna}""
+    compile ""org.apache.lucene:lucene-analyzers-common:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-backward-codecs:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-core:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-grouping:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-highlighter:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-join:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-memory:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-misc:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-queries:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-queryparser:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-sandbox:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-spatial3d:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-spatial:${versions.lucene}""
+    compile ""org.apache.lucene:lucene-suggest:${versions.lucene}""
+    compile ""org.elasticsearch:securesm:1.0""
+    compile ""org.hdrhistogram:HdrHistogram:2.1.6""
+    compile ""org.joda:joda-convert:1.2""
+    compile ""org.slf4j:slf4j-api:${versions.slf4j}""
+    compile ""org.slf4j:slf4j-log4j12:${versions.slf4j}""
+
     // snakeyaml is a duplicate dependency and left out by intent
-    // compile 'org.yaml:snakeyaml:1.15'
+    // compile ""org.yaml:snakeyaml:1.15""
     // end ES compile dependencies
 
-    compile 'org.codehaus.groovy:groovy-all:2.4.4:indy'
+    compile ""org.codehaus.groovy:groovy-all:2.4.4:indy""
 
 
     // mvn dependency:tree | grep -o ' .- .*:test' | cut -d ' ' -f 3 | sort | sed ""s/\(.*\):jar:\(.*\):test/testCompile '\1:\2'/g""
-    testCompile 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.2'
-    testCompile 'com.google.jimfs:jimfs:1.0'
-    testCompile 'commons-codec:commons-codec:1.10'
-    testCompile 'commons-logging:commons-logging:1.1.3'
-    testCompile 'junit:junit:4.11'
-    testCompile('org.apache.httpcomponents:httpclient:4.3.6') {
-        exclude group: 'commons-codec', module: 'commons-codec'
+    testCompile ""com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}""
+    testCompile ""com.google.jimfs:jimfs:1.0""
+    testCompile ""commons-codec:commons-codec:${versions.commonscodec}""
+    testCompile ""commons-logging:commons-logging:${versions.commonslogging}""
+    testCompile ""junit:junit:${versions.junit}""
+    testCompile(""org.apache.httpcomponents:httpclient:${versions.httpclient}"") {
+        exclude group: ""commons-codec"", module: ""commons-codec""
     }
-    testCompile 'org.apache.httpcomponents:httpcore:4.3.3'
-    testCompile 'org.apache.lucene:lucene-codecs:5.5.2'
+    testCompile ""org.apache.httpcomponents:httpcore:${versions.httpcore}""
+    testCompile ""org.apache.lucene:lucene-codecs:${versions.lucene}""
     // If the version here is increased the `AssertingLeafReader` class needs to
     // be updated as it is a copy from lucene-test-framework
-    testCompile 'org.apache.lucene:lucene-test-framework:5.5.2'
-    testCompile 'org.elasticsearch:securemock:1.2'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
+    testCompile ""org.apache.lucene:lucene-test-framework:${versions.lucene}""
+    testCompile ""org.elasticsearch:securemock:${versions.securemock}""
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
 
-    testCompile 'com.google.code.findbugs:jsr305:3.0.1'
+    testCompile ""com.google.code.findbugs:jsr305:${versions.jsr305}""
 }
 
 
diff --git a/gradle/dependencies.gradle b/gradle/dependencies.gradle
new file mode 100644
index 0000000000..7d9224d256
--- /dev/null
+++ b/gradle/dependencies.gradle
@@ -0,0 +1,72 @@
+/*
+ * Licensed to Crate under one or more contributor license agreements.
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.  Crate licenses this file
+ * to you under the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+ * implied.  See the License for the specific language governing
+ * permissions and limitations under the License.
+ *
+ * However, if you have executed another commercial license agreement
+ * with Crate these terms will supersede the license and you may use the
+ * software solely pursuant to the terms of the relevant commercial
+ * agreement.
+ */
+
+Properties props = new Properties()
+props.load(new FileInputStream(file(""gradle/version.properties"")));
+ext.set(""versions"", props)
+
+allprojects {
+    configurations.all {
+        resolutionStrategy {
+            // fail eagerly on version conflict (includes transitive dependencies)
+            failOnVersionConflict()
+
+            // ES requires hamcrest-all which includes hamcrest-core
+            dependencySubstitution {
+                substitute module(""org.hamcrest:hamcrest-core"") with(
+                        module(""org.hamcrest:hamcrest-all:${versions.hamcrest}""))
+            }
+
+            // forced versions of conflicting deps
+            force ""com.spatial4j:spatial4j:${versions.spatial4j}""
+            force ""com.google.guava:guava:${versions.guava}""
+            force ""commons-codec:commons-codec:${versions.commonscodec}""
+            force ""com.carrotsearch.randomizedtesting:junit4-ant:${versions.randomizedrunner}""
+            force ""com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}""
+            force ""junit:junit:${versions.junit}""
+            force ""org.slf4j:slf4j-api:${versions.slf4j}""
+            force ""org.slf4j:slf4j-log4j12:${versions.slf4j}""
+            force ""com.fasterxml.jackson.core:jackson-core:${versions.jackson}""
+            force ""com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}""
+            force ""com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}""
+            force ""com.fasterxml.jackson.core:jackson-databind:${versions.jackson}""
+            force ""joda-time:joda-time:${versions.jodatime}""
+            force ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
+            force ""org.antlr:antlr-runtime:${versions.antlr}""
+            force ""commons-cli:commons-cli:${versions.commonscli}""
+            force ""org.apache.commons:commons-math3:${versions.commonsmath}""
+            force ""org.apache.commons:commons-lang3:${versions.commonslang3}""
+            force ""commons-logging:commons-logging:${versions.commonslogging}""
+            force ""org.apache.httpcomponents:httpcore:${versions.httpcore}""
+            force ""org.apache.httpcomponents:httpclient:${versions.httpclient}""
+            force ""log4j:log4j:${versions.log4j}""
+            force ""io.netty:netty:${versions.netty}""
+
+            // ensure to check following dependencies and their versions against those of HDFS plugin libs
+            // https://crate.io/docs/reference/en/latest/sql/snapshot_restore.html
+            force ""org.codehaus.jackson:jackson-core-asl:${versions.jacksonasl}""
+            force ""org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}""
+            force ""com.google.code.findbugs:jsr305:${versions.jsr305}""
+            force ""commons-lang:commons-lang:2.6""
+        }
+    }
+}
\ No newline at end of file
diff --git a/gradle/version.properties b/gradle/version.properties
new file mode 100644
index 0000000000..e1d1219750
--- /dev/null
+++ b/gradle/version.properties
@@ -0,0 +1,34 @@
+# crate deps not defined in ES
+guava=18.0
+jodatime=2.9.4
+antlr=3.5.2
+commonscli=1.3.1
+commonsmath=3.6.1
+commonslang3=3.5
+netty=3.10.6.Final
+jsr305=3.0.1
+aws=1.10.69
+jacksonasl=1.9.13
+elasticsearchhadoop=2.4.0
+
+# ES deps
+elasticsearch=2.4.1
+lucene=5.5.2
+
+# ES optional
+spatial4j=0.5
+jts=1.13
+jackson=2.8.1
+log4j=1.2.17
+slf4j=1.6.2
+jna=4.1.0
+
+# ES test
+randomizedrunner=2.3.2
+junit=4.11
+httpclient=4.3.6
+httpcore=4.3.3
+commonslogging=1.1.3
+commonscodec=1.10
+hamcrest=1.3
+securemock=1.2
diff --git a/sql-parser/build.gradle b/sql-parser/build.gradle
index 5a516d57d2..72ff23dad1 100644
--- a/sql-parser/build.gradle
+++ b/sql-parser/build.gradle
@@ -7,14 +7,14 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.code.findbugs:jsr305:3.0.1'
-    compile 'joda-time:joda-time:2.9.4'
-    compile 'com.google.guava:guava:18.0'
-    compile 'org.antlr:antlr-runtime:3.5.2'
+    compile ""com.google.code.findbugs:jsr305:${versions.jsr305}""
+    compile ""joda-time:joda-time:${versions.jodatime}""
+    compile ""com.google.guava:guava:${versions.guava}""
+    compile ""org.antlr:antlr-runtime:${versions.antlr}""
 
-    antlr3 'org.antlr:antlr:3.5.2'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
-    testCompile 'junit:junit:4.11'
+    antlr3 ""org.antlr:antlr:${versions.antlr}""
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
+    testCompile ""junit:junit:${versions.junit}""
 }
 
 task generateWithANTLR3(type: Exec) {
diff --git a/sql/build.gradle b/sql/build.gradle
index 40bdd243a7..a600478bbe 100644
--- a/sql/build.gradle
+++ b/sql/build.gradle
@@ -15,11 +15,11 @@ dependencies {
     compile project(':core')
     compile project(':blob')
     compile project(':sql-parser')
-    compile 'com.amazonaws:aws-java-sdk-s3:1.10.69'
-    compile 'org.apache.commons:commons-math3:3.6.1'
+    compile ""com.amazonaws:aws-java-sdk-s3:${versions.aws}""
+    compile ""org.apache.commons:commons-math3:${versions.commonsmath}""
     testCompile project(':testing')
     testCompile 'org.skyscreamer:jsonassert:1.3.0'
-    testCompile 'org.hamcrest:hamcrest-all:1.3'
+    testCompile ""org.hamcrest:hamcrest-all:${versions.hamcrest}""
 
     testCompile('org.postgresql:postgresql:9.4.1211.jre7') {
         exclude group: 'org.openjdk.jmh', module: 'jmh-core'
diff --git a/testing/build.gradle b/testing/build.gradle
index aa68307e41..19ac2541f2 100644
--- a/testing/build.gradle
+++ b/testing/build.gradle
@@ -3,8 +3,8 @@ apply from: ""$rootDir/gradle/javaModule.gradle""
 archivesBaseName = 'crate-testing'
 
 dependencies {
-    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
-    compile 'org.apache.commons:commons-lang3:3.5'
+    compile ""org.codehaus.jackson:jackson-mapper-asl:${versions.jacksonasl}""
+    compile ""org.apache.commons:commons-lang3:${versions.commonslang3}""
 
     compile project(':es')
     compile project(path: ':es', configuration: 'testCompile')",use a version . properties file for defining versions of common dependencies .,"""Extracted version properties into separate file and applied them to dependencies""","""Refactor dependencies to use a centralized version management system""","""Refactor build.gradle files and move version definitions to gradle/dependencies.gradle""

This commit refactors the build.gradle files in the project and moves the version definitions for dependencies to a new file, gradle/dependencies.gradle. It also updates the versions of some dependencies and makes other changes to the build configuration.",Refactor build.gradle: Externalize dependencies to gradle/dependencies.gradle and gradle/version.properties for centralized version management.,Model 1
"diff --git a/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java b/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java
index 5d429219..1e7b7165 100644
--- a/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java
+++ b/web/src/main/java/org/apache/ki/web/filter/authz/PortFilter.java
@@ -1,3 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.apache.ki.web.filter.authz;
 
 import org.apache.ki.config.ConfigurationException;
@@ -13,7 +31,7 @@ import java.io.IOException;
  * A Filter that requires the request to be on a specific port, and if not, redirects to the same URL on that port.
  *
  * @author Les Hazlewood
- * @since Mar 30, 2009 10:46:21 AM
+ * @since 1.0
  */
 public class PortFilter extends AuthorizationFilter {
 
diff --git a/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java b/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java
index d54cdd4b..a33cdc25 100644
--- a/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java
+++ b/web/src/main/java/org/apache/ki/web/filter/authz/SslFilter.java
@@ -1,3 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
 package org.apache.ki.web.filter.authz;
 
 /**
@@ -10,7 +28,7 @@ package org.apache.ki.web.filter.authz;
  * </pre>
  *
  * @author Les Hazlewood
- * @since Mar 30, 2009 12:16:14 PM
+ * @since 1.0
  */
 public class SslFilter extends PortFilter {",added Apache license and @ since information .,"""Added Apache License headers to PortFilter and SslFilter classes""","The commit message should be:

""Add Apache License header to PortFilter and SslFilter classes""

This commit message accurately reflects the changes made in the diff, which is the addition of the Apache License header to the two classes.","Added Apache License 2.0 header to PortFilter.java and SslFilter.java files in the Apache Ki web project.

The diff shows that the Apache License 2.0 header was added to the top of the PortFilter.java and SslFilter.java files in the web/src/main/java/org/apache/ki/web/filter/authz/ directory of the Apache Ki web project.

No other changes were made to the files. The addition of the license header is important for ensuring that the files are properly licensed under the Apache License 2.0, which is a commonly used open source license that allows for free use, modification, and distribution of the software, subject to certain conditions.",Added ASF license headers to PortFilter and SslFilter classes in the org.apache.ki.web.filter.authz package.,Model 4
"diff --git a/pmd/etc/changelog.txt b/pmd/etc/changelog.txt
index debefa1872..8ff2bfbe93 100644
--- a/pmd/etc/changelog.txt
+++ b/pmd/etc/changelog.txt
@@ -5,6 +5,7 @@ Fixed bug 779874 - LooseCouplingRule no longer triggers on ArrayList
 Fixed bug 781393 - VariableNameDeclaration no longer throws ClassCastExpression since ASTLocalVariableDeclaration now subclasses AccessNode
 Tweaked CPD time display field
 Made CPD text fields uneditable
+Added more error checking to CPD GUI input
 TODO - fix it so tests and rules don't duplicate the xpath expressions
 
 August 1, 2003 - 1.2.1:
diff --git a/pmd/src/net/sourceforge/pmd/cpd/GUI.java b/pmd/src/net/sourceforge/pmd/cpd/GUI.java
index 6560954ccc..72b7eeca6c 100644
--- a/pmd/src/net/sourceforge/pmd/cpd/GUI.java
+++ b/pmd/src/net/sourceforge/pmd/cpd/GUI.java
@@ -204,6 +204,11 @@ public class GUI implements CPDListener {
 
     private void go() {
         try {
+            if (!(new File(rootDirectoryField.getText())).exists()) {
+                JOptionPane.showMessageDialog(frame, ""Can't read from that root source directory"", ""Error"", JOptionPane.ERROR_MESSAGE);
+                return;
+            }
+
             Language language = null;
             LanguageFactory lf = new LanguageFactory();
             if (languageBox.getSelectedItem().equals(""Java"")) {",Added some error checking .,"""Added error checking for CPD GUI input and fixed changelog""","""Added error checking to CPD GUI input and improved overall stability""","""Added more error checking to CPD GUI input and fixed bug where CPD couldn't read from specified root source directory""

Explanation: The commit message should summarize the changes made in the code. In this case, the changes include adding more error checking to the CPD GUI input and fixing a bug where CPD couldn't read from the specified root source directory. The changes made in the code support this commit message, as there is a new error message that is displayed if the specified root source directory is not valid and additional error checking has been added to the GUI input.",Added error checking for root source directory in CPD GUI and updated changelog.,Model 4
"diff --git a/h2/src/main/org/h2/mvstore/type/ObjectDataType.java b/h2/src/main/org/h2/mvstore/type/ObjectDataType.java
index 6c6314341..6c3bf5b65 100644
--- a/h2/src/main/org/h2/mvstore/type/ObjectDataType.java
+++ b/h2/src/main/org/h2/mvstore/type/ObjectDataType.java
@@ -288,7 +288,7 @@ AutoDetectDataType switchType(Object obj) {
      * @return true if yes
      */
     static boolean isBigInteger(Object obj) {
-        return obj instanceof BigInteger && obj.getClass() == BigInteger.class;
+        return obj != null && obj.getClass() == BigInteger.class;
     }
 
     /**
@@ -298,7 +298,7 @@ static boolean isBigInteger(Object obj) {
      * @return true if yes
      */
     static boolean isBigDecimal(Object obj) {
-        return obj instanceof BigDecimal && obj.getClass() == BigDecimal.class;
+        return obj != null && obj.getClass() == BigDecimal.class;
     }
 
     /**
@@ -308,7 +308,7 @@ static boolean isBigDecimal(Object obj) {
      * @return true if yes
      */
     static boolean isDate(Object obj) {
-        return obj instanceof Date && obj.getClass() == Date.class;
+        return obj != null && obj.getClass() == Date.class;
     }
 
     /**
diff --git a/h2/src/main/org/h2/value/ValueDecimal.java b/h2/src/main/org/h2/value/ValueDecimal.java
index 71fdd653c..1f787c135 100644
--- a/h2/src/main/org/h2/value/ValueDecimal.java
+++ b/h2/src/main/org/h2/value/ValueDecimal.java
@@ -57,7 +57,7 @@ public class ValueDecimal extends Value {
     private ValueDecimal(BigDecimal value) {
         if (value == null) {
             throw new IllegalArgumentException(""null"");
-        } else if (!value.getClass().equals(BigDecimal.class)) {
+        } else if (value.getClass() != BigDecimal.class) {
             throw DbException.get(ErrorCode.INVALID_CLASS_2,
                     BigDecimal.class.getName(), value.getClass().getName());
         }",Simplify checks with getClass ( ) method,"""Remove unnecessary instanceof checks in ObjectDataType and ValueDecimal""","""Fixed null checks and class equality checks in ObjectDataType and ValueDecimal classes to prevent potential NullPointerExceptions and improve robustness.""","""Update type checks to use '==' instead of '.equals()' for class comparison in ObjectDataType and ValueDecimal classes in H2 database""

Explanation: The changes made in this commit replace the use of the '.equals()' method with the '==' operator for comparing the classes of objects in the following methods:

* `isBigInteger(Object obj)` in ObjectDataType class
* `isBigDecimal(Object obj)` in ObjectDataType class
* `isDate(Object obj)` in ObjectDataType class
* a constructor in ValueDecimal class

Using '==' instead of '.equals()' is generally recommended for comparing classes in Java, as it performs an identity comparison and is more efficient. The '.equals()' method can give unexpected results when comparing classes, as it may return false even if the classes are the same, depending on the implementation of the '.equals()' method in the class being compared.","Ensure non-null in isBigInteger, isBigDecimal, isDate checks; adjust BigDecimal class comparison in ValueDecimal.",Model 4
"diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java b/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java
index d9f5d03b66..72bb2f61f9 100644
--- a/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java
+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashboardOnMap.java
@@ -1,6 +1,7 @@
 package net.osmand.plus.dashboard;
 
 import android.annotation.SuppressLint;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Resources;
 import android.graphics.drawable.ColorDrawable;
@@ -20,6 +21,7 @@ import android.view.ViewTreeObserver;
 import android.view.animation.Animation;
 import android.view.animation.Animation.AnimationListener;
 import android.view.animation.TranslateAnimation;
+import android.view.inputmethod.InputMethodManager;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemClickListener;
@@ -1337,6 +1339,9 @@ public class DashboardOnMap implements ObservableScrollViewCallbacks, DynamicLis
 
 	private void backPressed() {
 		if (previousVisibleType != visibleType && previousVisibleType != null) {
+			if (visibleType == DashboardType.MAPILLARY) {
+				hideKeyboard();
+			}
 			visibleType = null;
 			setDashboardVisibility(true, previousVisibleType);
 		} else {
@@ -1344,6 +1349,14 @@ public class DashboardOnMap implements ObservableScrollViewCallbacks, DynamicLis
 		}
 	}
 
+	private void hideKeyboard() {
+		View currentFocus = mapActivity.getCurrentFocus();
+		if (currentFocus != null) {
+			InputMethodManager imm = (InputMethodManager) mapActivity.getSystemService(Context.INPUT_METHOD_SERVICE);
+			imm.hideSoftInputFromWindow(currentFocus.getWindowToken(), 0);
+		}
+	}
+
 
 	@Override
 	public void onScrollChanged(int scrollY, boolean firstScroll, boolean dragging) {
diff --git a/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java b/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java
index e81d7c881c..f6977bbe1b 100644
--- a/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java
+++ b/OsmAnd/src/net/osmand/plus/mapillary/MapillaryFiltersFragment.java
@@ -17,6 +17,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputMethodManager;
+import android.widget.AdapterView;
 import android.widget.Button;
 import android.widget.CompoundButton;
 import android.widget.DatePicker;
@@ -102,7 +103,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
                 ResourceManager manager = getMyApplication().getResourceManager();
                 manager.clearCacheAndTiles(TileSourceManager.getMapillaryVectorSource());
                 manager.clearCacheAndTiles(TileSourceManager.getMapillaryRasterSource());
-                plugin.updateLayers(mapActivity.getMapView(), mapActivity);
+                mapActivity.refreshMap();
             }
         });
 
@@ -120,12 +121,19 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
             textView.setText(selectedUsername);
             textView.setSelection(selectedUsername.length());
         }
+        textView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                hideKeyboard();
+                mapActivity.getDashboard().refreshContent(true);
+            }
+        });
         textView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
             @Override
             public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                 if (id == EditorInfo.IME_ACTION_DONE) {
-                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
-                    imm.hideSoftInputFromWindow(textView.getWindowToken(), 0);
+                    hideKeyboard();
+                    mapActivity.getDashboard().refreshContent(true);
                     return true;
                 }
                 return false;
@@ -140,7 +148,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
             @Override
             public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                 view.findViewById(R.id.warning_linear_layout).setVisibility(View.GONE);
-                if (charSequence.length() > 0 ||
+                if (!settings.MAPILLARY_FILTER_USERNAME.get().equals("""") ||
                         settings.MAPILLARY_FILTER_TO_DATE.get() != 0 ||
                         settings.MAPILLARY_FILTER_FROM_DATE.get() != 0) {
                     changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);
@@ -170,6 +178,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
                 dateFromEt.setText(dateFormat.format(from.getTime()));
                 settings.MAPILLARY_FILTER_FROM_DATE.set(from.getTimeInMillis());
                 changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);
+                mapActivity.getDashboard().refreshContent(true);
             }
         };
         dateFromEt.setOnClickListener(new View.OnClickListener() {
@@ -196,6 +205,7 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
                 dateToEt.setText(dateFormat.format(to.getTime()));
                 settings.MAPILLARY_FILTER_TO_DATE.set(to.getTimeInMillis());
                 changeButtonState((Button) view.findViewById(R.id.button_apply), 1, true);
+                mapActivity.getDashboard().refreshContent(true);
             }
         };
         dateToEt.setOnClickListener(new View.OnClickListener() {
@@ -234,19 +244,20 @@ public class MapillaryFiltersFragment extends BaseOsmAndFragment {
                 if (!settings.MAPILLARY_FILTER_USERNAME.get().equals("""") || !dateFrom.equals("""") || !dateTo.equals("""")) {
                     settings.USE_MAPILLARY_FILTER.set(true);
                 }
-                if (!username.equals("""") && settings.MAPILLARY_FILTER_USERNAME.get().equals("""")) {
-                    view.findViewById(R.id.warning_linear_layout).setVisibility(View.VISIBLE);
-                }
                 if (dateFrom.equals("""")) {
                     settings.MAPILLARY_FILTER_FROM_DATE.set(0L);
                 }
                 if (dateTo.equals("""")) {
                     settings.MAPILLARY_FILTER_TO_DATE.set(0L);
                 }
+                if (!username.equals("""") && settings.MAPILLARY_FILTER_USERNAME.get().equals("""")) {
+                    view.findViewById(R.id.warning_linear_layout).setVisibility(View.VISIBLE);
+                } else {
+                    mapActivity.getDashboard().hideDashboard();
+                }
 
                 changeButtonState(apply, .5f, false);
                 plugin.updateLayers(mapActivity.getMapView(), mapActivity);
-                mapActivity.getDashboard().hideDashboard();
             }",Add control to the keyboard and focus,"""Improve Mapillary dashboard and filter functionality""","""Fixed keyboard hiding and dashboard refreshing in Mapillary filters fragment""","""Added hideKeyboard method and its usage in DashboardOnMap and MapillaryFiltersFragment""

This commit adds a new method `hideKeyboard` in `DashboardOnMap` class and uses it in the `backPressed` method. It also adds an `OnItemClickListener` for the `textView` in `MapillaryFiltersFragment` class and uses `hideKeyboard` method in it. Additionally, it replaces `plugin.updateLayers(mapActivity.getMapView(), mapActivity);` with `mapActivity.refreshMap();` in `MapillaryFiltersFragment` class.",Hide keyboard and update dashboard on changes in MapillaryFiltersFragment. Refresh map and content accordingly.,Model 1
"diff --git a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
index 6a7e98c2fb..590f78f35c 100644
--- a/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
+++ b/graylog2-web-interface/src/views/components/aggregationbuilder/PivotConfiguration.jsx
@@ -31,8 +31,11 @@ export default class PivotConfiguration extends React.Component {
     };
   }
 
-  // eslint-disable-next-line react/destructuring-assignment
-  _onSubmit = () => this.props.onClose(this.state);
+  _onSubmit = (e) => {
+    e.preventDefault();
+    const { onClose } = this.props;
+    onClose(this.state);
+  };
 
   _onChange = (config) => this.setState({ config });
 
diff --git a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
index aaf0a3c9fe..e9978818e9 100644
--- a/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
+++ b/graylog2-web-interface/src/views/components/common/EditableTitle.jsx
@@ -15,14 +15,13 @@ export default class EditableTitle extends React.Component {
     onChange: () => {},
   };
 
-  state = {
-    editing: false,
-    // eslint-disable-next-line react/destructuring-assignment
-    value: this.props.value,
-  };
-
-  componentWillReceiveProps(nextProps) {
-    this.setState({ value: nextProps.value });
+  constructor(props) {
+    super(props);
+    const { value } = props;
+    this.state = {
+      editing: false,
+      value,
+    };
   }
 
   _toggleEditing = () => {
@@ -42,7 +41,8 @@ export default class EditableTitle extends React.Component {
     this.setState({ value: evt.target.value });
   };
 
-  _onSubmit = () => {
+  _onSubmit = (e) => {
+    e.preventDefault();
     const { value } = this.state;
     const { onChange, value: propsValue } = this.props;
     if (value !== '') {
diff --git a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
index e6994867d2..db14c2a7d2 100644
--- a/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
+++ b/graylog2-web-interface/src/views/components/widgets/WidgetHeader.jsx
@@ -14,7 +14,7 @@ const LoadingSpinner = styled(Spinner)`
 const WidgetHeader = ({ children, onRename, hideDragHandle, title, loading }) => (
   <div className={styles.widgetHeader}>
     {hideDragHandle || <Icon name=""bars"" className={`widget-drag-handle ${styles.widgetDragHandle}`} />}{' '}
-    <EditableTitle disabled={!onRename} value={title} onChange={onRename} />
+    <EditableTitle key={title} disabled={!onRename} value={title} onChange={onRename} />
     {loading && <LoadingSpinner text="""" delay={0} />}
     <span className={`pull-right ${styles.widgetActionDropdown}`}>
       {children}",Prevent default action for form submit event in ` PivotConfiguration ` .,"""Refactor React components to improve event handling and state management""

This commit message is a brief summary of the changes made in the commit. The changes include:

* Adding event handling to prevent default behavior in `_onSubmit` methods
* Improving state management by using the `constructor` method to initialize state in `EditableTitle` component
* Adding a `key` prop to the `EditableTitle` component in `WidgetHeader` to improve rendering performance

The commit message is concise and descriptive, making it easy for others to understand the purpose of the commit.","""Fixed form submission and title editing to prevent default behavior and improve state management.""","This commit contains changes to three React components in the Graylog2 web interface.

1. In `PivotConfiguration.jsx`, the `_onSubmit` function has been updated to prevent the default form submission behavior and call the `onClose` prop with the component's state.
2. In `EditableTitle.jsx`, the component has been refactored to use a constructor to initialize state, and the `_onSubmit` function has been updated to prevent the default form submission behavior.
3. In `WidgetHeader.jsx`, a `key` prop has been added to the `EditableTitle` component to prevent a warning from React when the component's title changes.

The commit message could be: ""Update React components in Graylog2 web interface to prevent default form submission behavior and add key prop to EditableTitle"".","""Improve form handling in PivotConfiguration and EditableTitle components and update WidgetHeader to reset EditableTitle on title change.""",Model 4
"diff --git a/AndroidAnnotations/pom.xml b/AndroidAnnotations/pom.xml
index 112b4f5e..43fb65a5 100644
--- a/AndroidAnnotations/pom.xml
+++ b/AndroidAnnotations/pom.xml
@@ -77,7 +77,7 @@
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-release-plugin</artifactId>
-          <version>2.0</version>
+          <version>2.2.1</version>
         </plugin>
         <plugin>
           <groupId>org.sonatype.plugins</groupId>
@@ -137,21 +137,6 @@
         </executions>
       </plugin>
     </plugins>
-    <extensions>
-
-      <extension>
-        <groupId>org.apache.maven.scm</groupId>
-        <artifactId>maven-scm-provider-git-commons</artifactId>
-        <version>1.5</version>
-      </extension>
-
-      <extension>
-        <groupId>org.apache.maven.scm</groupId>
-        <artifactId>maven-scm-provider-gitexe</artifactId>
-        <version>1.5</version>
-      </extension>
-
-    </extensions>
   </build>
 
   <distributionManagement>
@@ -166,8 +151,8 @@
   </distributionManagement>
 
   <scm>
-    <connection>scm:git:https://py.ricau@code.google.com/p/androidannotations/AndroidAnnotations</connection>
-    <developerConnection>scm:git:https://py.ricau@code.google.com/p/androidannotations/AndroidAnnotations</developerConnection>
+    <connection>scm:git:https://py.ricau@code.google.com/p/androidannotations</connection>
+    <developerConnection>scm:git:https://py.ricau@code.google.com/p/androidannotations</developerConnection>
     <url>http://androidannotations.googlecode.com/git</url>
   </scm>",updating release plugin and removing extensions .,"""Update Maven release plugin to 2.2.1 and simplify SCM configuration""","The commit message should be:

""Update Maven plugins and SCM configuration""

This message accurately reflects the changes made in the commit, which include updating the Maven release plugin version, removing unnecessary extensions, and updating the SCM connection URLs.","""Updated Maven release plugin version to 2.2.1 and removed SCM extensions in AndroidAnnotations/pom.xml. Also, updated the SCM connection and developerConnection URLs to point to the root of the AndroidAnnotations project.""",Updated maven-release-plugin version and removed obsolete extensions for Maven SCM Git providers in pom.xml.,Model 4
"diff --git a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
index ec74e66f8..96262ebd4 100755
--- a/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
+++ b/src/main/java/com/alibaba/fastjson/parser/JSONScanner.java
@@ -2346,8 +2346,44 @@ public final class JSONScanner implements JSONLexer {
 
     public boolean scanISO8601DateIfMatch(boolean strict) {
         int rest = text.length() - bp;
+        
+        if ((!strict) && rest > 13) {
+            char c0 = charAt(bp);
+            char c1 = charAt(bp + 1);
+            char c2 = charAt(bp + 2);
+            char c3 = charAt(bp + 3);
+            char c4 = charAt(bp + 4);
+            char c5 = charAt(bp + 5);
+            
+            char c_r0 = charAt(bp + rest - 1);
+            char c_r1 = charAt(bp + rest - 2);
+            if (c0 == '/' && c1 == 'D' && c2 == 'a' && c3 == 't' && c4 == 'e' && c5 == '(' && c_r0 == '/' && c_r1 == ')') {
+                int plusIndex = -1;
+                for (int i = 6; i < rest; ++i) {
+                    char c = charAt(bp + i);
+                    if (c == '+') {
+                        plusIndex = i;
+                    } else if (c < '0' || c > '9') {
+                        break;
+                    }
+                }
+                if (plusIndex == -1) {
+                    return false;
+                }
+                int offset = bp + 6;
+                String numberText = this.subString(offset, plusIndex - offset);
+                long millis = Long.parseLong(numberText);
+                
+                Locale local = Locale.getDefault();
+                calendar = Calendar.getInstance(TimeZone.getDefault(), local);
+                calendar.setTimeInMillis(millis);
+                
+                token = JSONToken.LITERAL_ISO8601_DATE;
+                return true;
+            }
+        }
 
-        if (rest == 8) {
+        if (rest == 8 || rest == 14 || rest == 17) {
             if (strict) {
                 return false;
             }
@@ -2360,26 +2396,54 @@ public final class JSONScanner implements JSONLexer {
             char M1 = charAt(bp + 5);
             char d0 = charAt(bp + 6);
             char d1 = charAt(bp + 7);
-            
-            if (!checkYear(y0, y1, y2, y3)) {
-                return false;
-            }
 
-            if (!checkMonth(M0, M1)) {
-                return false;
-            }
-
-            if (!checkDay(d0, d1)) {
+            if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {
                 return false;
             }
 
             setCalendar(y0, y1, y2, y3, M0, M1, d0, d1);
-            
-            calendar.set(Calendar.HOUR_OF_DAY, 0);
-            calendar.set(Calendar.MINUTE, 0);
-            calendar.set(Calendar.SECOND, 0);
-            calendar.set(Calendar.MILLISECOND, 0);
 
+            if (rest != 8) {
+                char h0 = charAt(bp + 8);
+                char h1 = charAt(bp + 9);
+                char m0 = charAt(bp + 10);
+                char m1 = charAt(bp + 11);
+                char s0 = charAt(bp + 12);
+                char s1 = charAt(bp + 13);
+
+               if(!checkTime(h0, h1, m0, m1, s0, s1)) {
+                   return false;
+               }
+
+                int millis;
+                if (rest == 17) {
+                    char S0 = charAt(bp + 14);
+                    char S1 = charAt(bp + 15);
+                    char S2 = charAt(bp + 16);
+                    if (S0 < '0' || S0 > '9') {
+                        return false;
+                    }
+                    if (S1 < '0' || S1 > '9') {
+                        return false;
+                    }
+                    if (S2 < '0' || S2 > '9') {
+                        return false;
+                    }
+
+                    millis = digits[S0] * 100 + digits[S1] * 10 + digits[S2];
+                } else {
+                    millis = 0;
+                }
+                
+                int hour = digits[h0] * 10 + digits[h1];
+                int minute = digits[m0] * 10 + digits[m1];
+                int seconds = digits[s0] * 10 + digits[s1];
+                
+                calendar.set(Calendar.HOUR_OF_DAY, hour);
+                calendar.set(Calendar.MINUTE, minute);
+                calendar.set(Calendar.SECOND, seconds);
+                calendar.set(Calendar.MILLISECOND, millis);
+            }
             token = JSONToken.LITERAL_ISO8601_DATE;
             return true;
         }
@@ -2388,31 +2452,22 @@ public final class JSONScanner implements JSONLexer {
             return false;
         }
 
-        char y0 = charAt(bp);
-        char y1 = charAt(bp + 1);
-        char y2 = charAt(bp + 2);
-        char y3 = charAt(bp + 3);
-        if (!checkYear(y0, y1, y2, y3)) {
-            return false;
-        }
-
         if (charAt(bp + 4) != '-') {
             return false;
         }
-
-        char M0 = charAt(bp + 5);
-        char M1 = charAt(bp + 6);
-        if (!checkMonth(M0, M1)) {
-            return false;
-        }
-
         if (charAt(bp + 7) != '-') {
             return false;
         }
 
+        char y0 = charAt(bp);
+        char y1 = charAt(bp + 1);
+        char y2 = charAt(bp + 2);
+        char y3 = charAt(bp + 3);
+        char M0 = charAt(bp + 5);
+        char M1 = charAt(bp + 6);
         char d0 = charAt(bp + 8);
         char d1 = charAt(bp + 9);
-        if (!checkDay(d0, d1)) {
+        if (!checkDate(y0, y1, y2, y3, M0, M1, d0, d1)) {
             return false;
         }
 
@@ -2437,59 +2492,21 @@ public final class JSONScanner implements JSONLexer {
             return false;
         }
 
-        char h0 = charAt(bp + 11);
-        char h1 = charAt(bp + 12);
-        if (h0 == '0') {
-            if (h1 < '0' || h1 > '9') {
-                return false;
-            }
-        } else if (h0 == '1') {
-            if (h1 < '0' || h1 > '9') {
-                return false;
-            }
-        } else if (h0 == '2') {
-            if (h1 < '0' || h1 > '4') {
-                return false;
-            }
-        } else {
-            return false;
-        }
-
         if (charAt(bp + 13) != ':') {
             return false;
         }
-
-        char m0 = charAt(bp + 14);
-        char m1 = charAt(bp + 15);
-        if (m0 >= '0' && m0 <= '5') {
-            if (m1 < '0' || m1 > '9') {
-                return false;
-            }
-        } else if (m0 == '6') {
-            if (m1 != '0') {
-                return false;
-            }
-        } else {
-            return false;
-        }
-
         if (charAt(bp + 16) != ':') {
             return false;
         }
 
+        char h0 = charAt(bp + 11);
+        char h1 = charAt(bp + 12);
+        char m0 = charAt(bp + 14);
+        char m1 = charAt(bp + 15);
         char s0 = charAt(bp + 17);
         char s1 = charAt(bp + 18);
-        if (s0 >= '0' && s0 <= '5') {
-            if (s1 < '0' || s1 > '9') {
-                return false;
-            }
-        } else if (s0 == '6') {
-            if (s1 != '0') {
-                return false;
-            }
-        } else {
-            return false;
-        }
+
+        checkTime(h0, h1, m0, m1, s0, s1);
 
         int hour = digits[h0] * 10 + digits[h1];
         int minute = digits[m0] * 10 + digits[m1];
@@ -2534,44 +2551,41 @@ public final class JSONScanner implements JSONLexer {
         return true;
     }
 
-    private void setCalendar(char y0, char y1, char y2, char y3, char M0, char M1, char d0, char d1) {
-        Locale local = Locale.getDefault();
-        calendar = Calendar.getInstance(TimeZone.getDefault(), local);
-        int year = digits[y0] * 1000 + digits[y1] * 100 + digits[y2] * 10 + digits[y3];
-        int month = digits[M0] * 10 + digits[M1] - 1;
-        int day = digits[d0] * 10 + digits[d1];
-        calendar.set(Calendar.YEAR, year);
-        calendar.set(Calendar.MONTH, month);
-        calendar.set(Calendar.DAY_OF_MONTH, day);
-    }
-
-    static boolean checkDay(char d0, char d1) {
-        if (d0 == '0') {
-            if (d1 < '1' || d1 > '9') {
+    private boolean checkTime(char h0, char h1, char m0, char m1, char s0, char s1) {
+        if (h0 == '0') {
+            if (h1 < '0' || h1 > '9') {
                 return false;
             }
-        } else if (d0 == '1' || d0 == '2') {
-            if (d1 < '0' || d1 > '9') {
+        } else if (h0 == '1') {
+            if (h1 < '0' || h1 > '9') {
                 return false;
             }
-        } else if (d0 == '3') {
-            if (d1 != '0' && d1 != '1') {
+        } else if (h0 == '2') {
+            if (h1 < '0' || h1 > '4') {
                 return false;
             }
         } else {
             return false;
         }
 
-        return true;
-    }
+        if (m0 >= '0' && m0 <= '5') {
+            if (m1 < '0' || m1 > '9') {
+                return false;
+            }
+        } else if (m0 == '6') {
+            if (m1 != '0') {
+                return false;
+            }
+        } else {
+            return false;
+        }
 
-    static boolean checkMonth(char M0, char M1) {
-        if (M0 == '0') {
-            if (M1 < '1' || M1 > '9') {
+        if (s0 >= '0' && s0 <= '5') {
+            if (s1 < '0' || s1 > '9') {
                 return false;
             }
-        } else if (M0 == '1') {
-            if (M1 != '0' && M1 != '1' && M1 != '2') {
+        } else if (s0 == '6') {
+            if (s1 != '0') {
                 return false;",improve DateParser,"""Enhance JSONScanner to support parsing of ISO 8601 date and time formats with milliseconds and timezone offset""","""Improve ISO8601 date parsing in JSONScanner to support more formats""","""Add support for non-strict ISO8601 date format with milliseconds and timezone offset""

Explanation: This commit adds support for parsing non-strict ISO8601 date format that includes milliseconds and timezone offset. The new code checks for a specific pattern in the input string and extracts the number of milliseconds since the epoch. It then sets the calendar instance to the corresponding date and time. The changes are made in the `scanISO8601DateIfMatch` method of the `JSONScanner` class, which is part of the FastJSON library. The commit also includes some minor refactoring of the existing code in the same method.","Enhance `scanISO8601DateIfMatch` to support various date formats, including validation and setting of time and milliseconds.",Model 4
"diff --git a/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java
new file mode 100644
index 000000000..1fd1ebbda
--- /dev/null
+++ b/querydsl-sql/src/test/java/com/mysema/query/sql/TemplateTest.java
@@ -0,0 +1,40 @@
+package com.mysema.query.sql;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.Date;
+
+import org.junit.Test;
+
+import com.mysema.query.types.ConstantImpl;
+import com.mysema.query.types.Expression;
+import com.mysema.query.types.expr.DateExpression;
+import com.mysema.query.types.expr.StringExpression;
+import com.mysema.query.types.path.DatePath;
+import com.mysema.query.types.path.StringPath;
+import com.mysema.query.types.template.DateTemplate;
+import com.mysema.query.types.template.StringTemplate;
+
+public class TemplateTest {
+
+    @Test
+    public void ToDate(){
+        StringExpression str = new StringPath(""str"");
+        assertEquals(""to_date(str,'DD-MON-YYYY')"", to_date(str, ""DD-MON-YYYY"").toString());
+    }
+
+    @Test
+    public void ToChar(){
+        DateExpression<Date> date = new DatePath<Date>(Date.class,""date"");
+        assertEquals(""to_char(date,'DD-MON-YYYY')"", to_char(date, ""DD-MON-YYYY"").toString());
+    }
+
+    private DateExpression<Date> to_date(Expression<String> expr, String pattern){
+        return DateTemplate.create(Date.class, ""to_date({0},'{1s}')"", expr, ConstantImpl.create(pattern));
+    }
+
+    private StringExpression to_char(Expression<?> expr, String pattern){
+        return StringTemplate.create(""to_char({0},'{1s}')"", expr, ConstantImpl.create(pattern));
+    }
+        
+}",added test for to_date and to_char templates,"""Added TemplateTest for to_date and to_char functions in Querydsl SQL""",Added TemplateTest class for testing date and string template functions.,"""Added TemplateTest.java with tests for ToDate and ToChar methods""",Add TemplateTest to verify SQL to_date and to_char template expressions in Querydsl.,Model 4
"diff --git a/src/core/lombok/Builder.java b/src/core/lombok/Builder.java
index dfa5ecb5..d7fe42a1 100644
--- a/src/core/lombok/Builder.java
+++ b/src/core/lombok/Builder.java
@@ -153,6 +153,16 @@ public @interface Builder {
 	 * @return The builder class will be generated with this access modifier.
 	 */
 	AccessLevel access() default lombok.AccessLevel.PUBLIC;
+
+	/**
+	 * Prefix to prepend to set methods in the generated builder class.  By default, generated methods to not include a
+	 * prefix.  If this value populated, the first letter of the generated method name will be capitalized.
+	 *
+	 * For example, a method normally generated as {@code someField(String someField)} would instead be generated as {@code withSomeField(String someField)}
+	 *
+	 * @return The prefix to prepend to generated method names.
+	 */
+	String setterPrefix() default """";
 	
 	/**
 	 * Put on a field (in case of {@code @Builder} on a type) or a parameter (for {@code @Builder} on a constructor or static method) to",Add setterPrefix to Builder annotation,"""Added setterPrefix attribute to @Builder annotation to allow custom prefix for generated builder methods""","Added setterPrefix option to @Builder annotation

This commit message accurately reflects the changes made in the diff, which is the addition of a new option to the @Builder annotation called setterPrefix.","""Added setterPrefix option to @Builder annotation in Lombok""

Explanation: The diff shows that the file `src/core/lombok/Builder.java` has been modified. A new method `setterPrefix()` has been added to the `@Builder` annotation interface in the Lombok library. This method allows users to specify a prefix for setter methods generated by the builder. The default value for this method is an empty string, meaning no prefix is added by default. The commit message should reflect this change.",Added option in @Builder to specify prefix for setter methods in generated builder class.,Model 4
"diff --git a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
index f78ae3b60..f86f7b8fc 100644
--- a/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
+++ b/mod/jodd/src/jodd/datetime/format/AbstractFormatter.java
@@ -237,4 +237,42 @@ public abstract class AbstractFormatter implements JdtFormatter {
 		}
 		throw new IllegalArgumentException(""Value too big: "" + value);
 	}
+
+	/**
+	 * Prints 4 digits and optional minus sign.
+	 */
+	protected static String printPad4(int value) {
+		char[] result = new char[5];
+		int count = 0;
+
+		if (value < 0) {
+			result[count++] = '-';
+			value = -value;
+		}
+
+		String str = Integer.toString(value);
+
+		if (value < 10) {
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+		} else if (value < 100) {
+			result[count++] = '0';
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+		} else if (value < 1000) {
+			result[count++] = '0';
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+			result[count++] = str.charAt(2);
+		} else {
+			result[count++] = str.charAt(0);
+			result[count++] = str.charAt(1);
+			result[count++] = str.charAt(2);
+			result[count++] = str.charAt(3);
+		}
+		return new String(result, 0, count);
+	}
 }
diff --git a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
index df0796de2..0b5146961 100644
--- a/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
+++ b/mod/jodd/src/jodd/datetime/format/DefaultFormatter.java
@@ -4,7 +4,6 @@ package jodd.datetime.format;
 
 import jodd.datetime.DateTimeStamp;
 import jodd.datetime.JDateTime;
-import jodd.format.Printf;
 import jodd.util.LocaleUtil;
 import jodd.util.DateFormatSymbolsEx;
 
@@ -77,7 +76,7 @@ public class DefaultFormatter extends AbstractFormatter {
 		DateFormatSymbolsEx dfs = LocaleUtil.getDateFormatSymbols(jdt.getLocale());
 		switch (patternIndex) {
 			case 0:
-				return Printf.str(""%~04i"", jdt.getYear());
+				return printPad4(jdt.getYear());
 			case 1:
 				return print2(jdt.getMonth());
 			case 2:
@@ -111,9 +110,15 @@ public class DefaultFormatter extends AbstractFormatter {
 			case 16:
 				return jdt.getEra() == 1 ? dfs.getAdEra() : dfs.getBcEra();
 			case 17:
-				return jdt.getTimeZone().getDisplayName(false, TimeZone.LONG, jdt.getLocale());
+				return jdt.getTimeZone().getDisplayName(
+						jdt.isInDaylightTime(),
+						TimeZone.LONG,
+						jdt.getLocale());
 			case 18:
-				return jdt.getTimeZone().getDisplayName(false, TimeZone.SHORT, jdt.getLocale());
+				return jdt.getTimeZone().getDisplayName(
+						jdt.isInDaylightTime(),
+						TimeZone.SHORT,
+						jdt.getLocale());
 			default:
 				return new String(patterns[patternIndex]);
 		}",added usage of isInDayLightTime ( ),"""Added printPad4 method to AbstractFormatter and replaced Printf usage in DefaultFormatter""","""Improved date formatting in DefaultFormatter and added printPad4 method in AbstractFormatter""","The commit message could be:

""Refactor AbstractFormatter and DefaultFormatter classes in Jodd datetime module.

In AbstractFormatter, a new method 'printPad4' has been added to print 4 digits and an optional minus sign. This method is used in the DefaultFormatter class to replace the use of 'Printf.str(""%~04i"", jdt.getYear())' for better performance and readability.

In DefaultFormatter, the 'Printf.str(""%~04i"", jdt.getYear())' line has been replaced with 'printPad4(jdt.getYear())'. Also, the 'jdt.getTimeZone().getDisplayName(false, TimeZone.LONG, jdt.getLocale())' and 'jdt.getTimeZone().getDisplayName(false, TimeZone.SHORT, jdt.getLocale())' lines have been updated to include the daylight saving time information.""","""Added printPad4 method and updated year formatting in DefaultFormatter.""",Model 3
"diff --git a/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java b/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java
index b2d6a8417c..c477cd76aa 100644
--- a/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java
+++ b/plugins/jboss/src/main/java/com/navercorp/pinpoint/plugin/jboss/interceptor/ContextInvocationInterceptor.java
@@ -78,9 +78,6 @@ public class ContextInvocationInterceptor implements AroundInterceptor {
             if (trace == null) {
                 return;
             }
-            if (!trace.canSampled()) {
-                return;
-            }
             final SpanEventRecorder recorder = trace.traceBlockBegin();
             recorder.recordServiceType(JbossConstants.JBOSS_METHOD);
         } catch (final Throwable th) {
@@ -106,9 +103,6 @@ public class ContextInvocationInterceptor implements AroundInterceptor {
             return;
         }
 
-        if (!trace.canSampled()) {
-            return;
-        }
         try {
             final SpanEventRecorder recorder = trace.currentSpanEventRecorder();
             recorder.recordApi(methodDescriptor);
diff --git a/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java b/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java
index c3e0050d34..78961d8b9f 100644
--- a/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java
+++ b/plugins/rabbitmq/src/main/java/com/navercorp/pinpoint/plugin/rabbitmq/client/interceptor/ChannelBasicPublishInterceptor.java
@@ -11,9 +11,10 @@ import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScope;
 import com.navercorp.pinpoint.bootstrap.interceptor.scope.InterceptorScopeInvocation;
 import com.navercorp.pinpoint.bootstrap.logging.PLogger;
 import com.navercorp.pinpoint.bootstrap.logging.PLoggerFactory;
-import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientPluginConfig;
 import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientConstants;
+import com.navercorp.pinpoint.plugin.rabbitmq.client.RabbitMQClientPluginConfig;
 import com.navercorp.pinpoint.plugin.rabbitmq.client.field.accessor.RemoteAddressAccessor;
+
 import com.rabbitmq.client.AMQP;
 import com.rabbitmq.client.Channel;
 import com.rabbitmq.client.Connection;
@@ -66,17 +67,15 @@ public class ChannelBasicPublishInterceptor implements AroundInterceptor {
             return;
         }
 
-        if (trace.canSampled()) {
-            SpanEventRecorder recorder = trace.traceBlockBegin();
-            recorder.recordServiceType(RabbitMQClientConstants.RABBITMQ_CLIENT);
+        SpanEventRecorder recorder = trace.traceBlockBegin();
+        recorder.recordServiceType(RabbitMQClientConstants.RABBITMQ_CLIENT);
 
-            TraceId nextId = trace.getTraceId().getNextTraceId();
+        TraceId nextId = trace.getTraceId().getNextTraceId();
 
-            recorder.recordNextSpanId(nextId.getSpanId());
+        recorder.recordNextSpanId(nextId.getSpanId());
 
-            InterceptorScopeInvocation invocation = scope.getCurrentInvocation();
-            invocation.setAttachment(nextId);
-        }
+        InterceptorScopeInvocation invocation = scope.getCurrentInvocation();
+        invocation.setAttachment(nextId);
     }
 
     @Override
@@ -90,7 +89,7 @@ public class ChannelBasicPublishInterceptor implements AroundInterceptor {
         }
 
         final Trace trace = traceContext.currentTraceObject();
-        if (trace == null || !trace.canSampled()) {
+        if (trace == null) {
             return;
         }",remove unnecessary code,"""Remove unnecessary checks for `canSampled()` in JBoss and RabbitMQ interceptors""","The commit message should be:

""Remove sampling check for trace recording in JBoss and RabbitMQ plugins""

This message accurately describes the changes made in the commit, which is to remove the sampling check for trace recording in the JBoss and RabbitMQ plugins.","""Remove unnecessary checks for trace sampling in ContextInvocationInterceptor and ChannelBasicPublishInterceptor""

Explanation:
The commit removes the checks for `trace.canSampled()` in both `ContextInvocationInterceptor` and `ChannelBasicPublishInterceptor` classes. In `ContextInvocationInterceptor`, the check is removed from both the `try` and `finally` blocks. In `ChannelBasicPublishInterceptor`, the check is removed from the `try` block, and the code inside the `if` statement is moved outside, effectively removing the condition. This means that the sampling check was unnecessary, and the code inside will be executed regardless of the sampling status.",Removed redundant trace.canSampled() checks in JBoss and RabbitMQ interceptors.,Model 1
"diff --git a/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java b/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java
index f20b45cbe45..e57758f3eec 100644
--- a/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java
+++ b/config-proxy/src/main/java/com/yahoo/vespa/config/proxy/ClientUpdater.java
@@ -49,7 +49,8 @@ class ClientUpdater {
         for (DelayedResponse response : responseDelayQueue.toArray(new DelayedResponse[0])) {
             JRTServerConfigRequest request = response.getRequest();
             if (request.getConfigKey().equals(config.getKey())
-                    && (config.getGeneration() >= request.getRequestGeneration())) {
+                    // Generation 0 is special, used when returning empty sentinel config
+                    && (config.getGeneration() >= request.getRequestGeneration() || config.getGeneration() == 0)) {
                 if (delayedResponses.remove(response)) {
                     found = true;
                     log.log(LogLevel.DEBUG, () -> ""Call returnOkResponse for "" + config.getKey() + "","" + config.getGeneration());
diff --git a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java
index fdf59a45841..25140afd4cc 100644
--- a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java
+++ b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ClientUpdaterTest.java
@@ -10,14 +10,13 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
-import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
 
 /**
  * @author hmusum
  */
 public class ClientUpdaterTest {
+
     private MockRpcServer rpcServer;
     private ConfigProxyStatistics statistics;
     private DelayedResponses delayedResponses;
@@ -37,53 +36,83 @@ public class ClientUpdaterTest {
 
     @Test
     public void basic() {
-        assertThat(rpcServer.responses, is(0L));
-
         final RawConfig fooConfig = ProxyServerTest.fooConfig;
-        clientUpdater.updateSubscribers(fooConfig);
-
-        // No delayed response, so not returned
-        assertEquals(0, rpcServer.responses);
+        configUpdatedSendResponse(fooConfig);
+        // Nobody asked for the config, so no response sent
+        assertSentResponses(0);
 
-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));
-        clientUpdater.updateSubscribers(fooConfig);
-        assertEquals(1, rpcServer.responses);
+        simulateClientRequestingConfig(fooConfig);
+        configUpdatedSendResponse(fooConfig);
+        assertSentResponses(1);
 
-        // Will not find bar config in delayed responses
+        // Nobody asked for 'bar' config
         RawConfig barConfig = new RawConfig(new ConfigKey<>(""bar"", ""id"", ""namespace""), fooConfig.getDefMd5());
-        clientUpdater.updateSubscribers(barConfig);
-        assertEquals(1, rpcServer.responses);
+        configUpdatedSendResponse(barConfig);
+        assertSentResponses(1);
     }
 
     @Test
     public void errorResponse() {
-        assertThat(rpcServer.responses, is(0L));
-
-        clientUpdater.updateSubscribers(ProxyServerTest.errorConfig);
-        assertThat(rpcServer.responses, is(0L));
-        assertThat(statistics.errors(), is(1L));
+        configUpdatedSendResponse(ProxyServerTest.errorConfig);
+        assertSentResponses(0);
+        assertEquals(1, statistics.errors());
     }
 
     @Test
     public void it_does_not_send_old_config_in_response() {
-        assertThat(rpcServer.responses, is(0L));
+        RawConfig fooConfigOldGeneration = ProxyServerTest.fooConfig;
+
+        RawConfig fooConfig = createConfigWithNextConfigGeneration(fooConfigOldGeneration);
+        configUpdatedSendResponse(fooConfig);
+
+        // Nobody asked for the config
+        assertSentResponses(0);
+
+        simulateClientRequestingConfig(fooConfig);
+        configUpdatedSendResponse(fooConfig);
+        assertSentResponses(1);
+
+        simulateClientRequestingConfig(fooConfig);
+        configUpdatedSendResponse(fooConfigOldGeneration);
+        // Old config generation, so no response returned
+        assertSentResponses(1);
+    }
 
+    @Test
+    public void it_does_send_config_with_generation_0_in_response() {
         RawConfig fooConfigOldGeneration = ProxyServerTest.fooConfig;
 
-        final RawConfig fooConfig = ProxyServerTest.createConfigWithNextConfigGeneration(fooConfigOldGeneration, 0);
-        clientUpdater.updateSubscribers(fooConfig);
+        RawConfig fooConfig = createConfigWithNextConfigGeneration(fooConfigOldGeneration, 1);
+
+        simulateClientRequestingConfig(fooConfig);
+        configUpdatedSendResponse(fooConfig);
+        assertSentResponses(1);
+
+        RawConfig fooConfig2 = createConfigWithNextConfigGeneration(fooConfigOldGeneration, 0);
+        simulateClientRequestingConfig(fooConfig2);
+        configUpdatedSendResponse(fooConfig2);
+        assertSentResponses(2);
+    }
+
+    private void assertSentResponses(int expected) {
+        assertEquals(expected, rpcServer.responses);
+    }
 
-        // No delayed response, so not returned
-        assertEquals(0, rpcServer.responses);
+    private void simulateClientRequestingConfig(RawConfig config) {
+        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(config, -10L).getRequest())));
+    }
 
-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));
-        clientUpdater.updateSubscribers(fooConfig);
-        assertEquals(1, rpcServer.responses);
+    private void configUpdatedSendResponse(RawConfig config) {
+        clientUpdater.updateSubscribers(config);
+    }
+
+    private RawConfig createConfigWithNextConfigGeneration(RawConfig config) {
+        return createConfigWithNextConfigGeneration(config, config.getGeneration() + 1);
+    }
 
-        delayedResponses.add(new DelayedResponse(JRTServerConfigRequestV3.createFromRequest(JRTConfigRequestFactory.createFromRaw(fooConfig, -10L).getRequest())));
-        clientUpdater.updateSubscribers(fooConfigOldGeneration);
-        // Old config generation, so not returned
-        assertEquals(1, rpcServer.responses);
+    private RawConfig createConfigWithNextConfigGeneration(RawConfig config, long newConfigGeneration) {
+        final int errorCode = 0;
+        return ProxyServerTest.createConfigWithNextConfigGeneration(config, errorCode, ProxyServerTest.fooConfig.getPayload(), newConfigGeneration);
     }
 
 }
diff --git a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java
index 513a5caa08d..22488da7c80 100644
--- a/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java
+++ b/config-proxy/src/test/java/com/yahoo/vespa/config/proxy/ProxyServerTest.java
@@ -1,7 +1,6 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 package com.yahoo.vespa.config.proxy;
 
-import com.yahoo.config.subscription.ConfigSourceSet;
 import com.yahoo.vespa.config.*;
 import com.yahoo.vespa.config.protocol.JRTServerConfigRequest;
 import com.yahoo.vespa.config.protocol.Payload;
@@ -220,9 +219,13 @@ public class ProxyServerTest {
     }
 
     private static RawConfig createConfigWithNextConfigGeneration(RawConfig config, int errorCode, Payload payload) {
+        return createConfigWithNextConfigGeneration(config, errorCode, payload, config.getGeneration() + 1);
+    }
+
+    static RawConfig createConfigWithNextConfigGeneration(RawConfig config, int errorCode, Payload payload, long configGeneration) {
         return new RawConfig(config.getKey(), config.getDefMd5(),
                              payload, config.getConfigMd5(),
-                             config.getGeneration() + 1, false,
+                             configGeneration, false,
                              errorCode, config.getDefContent(), Optional.empty());
     }",Send response also when config generation is 0 .,"""Handle config generation 0 as a special case in ClientUpdater""","""Allow generation 0 config to be sent in response""","""Fix handling of config generation 0 in ClientUpdater""

This commit addresses an issue where the ClientUpdater would not return an empty sentinel config with generation 0 to requests with a matching or higher generation. The change modifies the condition for returning a delayed response to include the case where the config generation is 0. Additionally, some tests have been updated and refactored for clarity and to better reflect the intended behavior.",Allow responses for configuration with generation 0 in `ClientUpdater`. Enhanced `ClientUpdaterTest` to verify this behavior.,Model 1
"diff --git a/docs/filter.rst b/docs/filter.rst
new file mode 100644
index 000000000..b0b5e3869
--- /dev/null
+++ b/docs/filter.rst
@@ -0,0 +1,351 @@
+Filter file
+===========
+
+Filter files may be used to include or exclude bug reports for particular classes and methods. This chapter explains how to use filter files.
+
+Introduction to Filter Files
+----------------------------
+
+Conceptually, a filter matches bug instances against a set of criteria. By defining a filter, you can select bug instances for special treatment;
+for example, to exclude or include them in a report.
+
+A filter file is an XML document with a top-level ``FindBugsFilter`` element which has some number of Match elements as children.
+Each Match element represents a predicate which is applied to generated bug instances.
+Usually, a filter will be used to exclude bug instances. For example::
+
+    $ spotbugs -textui -exclude myExcludeFilter.xml myApp.jar
+
+However, a filter could also be used to select bug instances to specifically report::
+
+    $ spotbugs -textui -include myIncludeFilter.xml myApp.jar
+
+``Match`` elements contain children, which are conjuncts of the predicate.
+In other words, each of the children must be ``true`` for the predicate to be ``true``.
+
+Types of Match clauses
+----------------------
+
+<Bug>
+^^^^^
+
+This element specifies a particular bug ``pattern or patterns to match. The ``pattern`` attribute is a comma-separated list of bug pattern types.
+You can find the bug pattern types for particular warnings by looking at the output produced by the **-xml** output option (the type attribute of BugInstance elements), or from the :doc:`bugDescriptions`.
+
+For more coarse-grained matching, use ``code`` attribute. It takes a comma-separated list of bug abbreviations. For most-coarse grained matching use ``category`` attriute, that takes a comma separated list of bug category names: ``CORRECTNESS``, ``MT_CORRECTNESS``, ``BAD_PRACTICICE``, ``PERFORMANCE``, ``STYLE``.
+
+If more than one of the attributes mentioned above are specified on the same <Bug> element, all bug patterns that match either one of specified pattern names, or abreviations, or categories will be matched.
+
+As a backwards compatibility measure, <BugPattern> and <BugCode> elements may be used instead of <Bug> element. Each of these uses a name attribute for specifying accepted values list. Support for these elements may be removed in a future release.
+
+<Confidence>
+^^^^^^^^^^^^
+
+This element matches warnings with a particular bug confidence. The ``value`` attribute should be an integer value: 1 to match high-confidence warnings, 2 to match normal-confidence warnings, or 3 to match low-confidence warnings. ``<Confidence>`` replaced ``<Priority>`` in 2.0.0 release.
+
+<Priority>
+^^^^^^^^^^
+
+Same as ``<Confidence>``, exists for backward compatibility.
+
+<Rank>
+^^^^^^
+
+This element matches warnings with a particular bug rank. The ``value`` attribute should be an integer value between 1 and 20, where 1 to 4 are scariest, 5 to 9 scary, 10 to 14 troubling, and 15 to 20 of concern bugs.
+
+<Package>
+^^^^^^^^^
+
+This element matches warnings associated with classes within the package specified using ``name`` attribute. Nested packages are not included (along the lines of Java import statement). However matching multiple packages can be achieved easily using regex name match.
+
+<Class>
+^^^^^^^
+
+This element matches warnings associated with a particular class. The ``name`` attribute is used to specify the exact or regex match pattern for the class name. The ``role`` attribute is the class role.
+
+As a backward compatibility measure, instead of element of this type, you can use ``class`` attribute on a ``Match`` element to specify exact an class name or ``classregex`` attribute to specify a regular expression to match the class name against.
+
+If the ``Match`` element contains neither a ``Class`` element, nor a ``class`` / ``classregex`` attribute, the predicate will apply to all classes. Such predicate is likely to match more bug instances than you want, unless it is refined further down with appropriate method or field predicates.
+
+<Source>
+^^^^^^^^
+
+This element matches warnings associated with a particular source file. The ``name`` attribute is used to specify the exact or regex match pattern for the source file name.
+
+<Method>
+^^^^^^^^
+
+This element specifies a method. The ``name`` attribute is used to specify the exact or regex match pattern for the method name. The ``params`` attribute is a comma-separated list of the types of the method's parameters. The ``returns`` attribute is the method's return type. The ``role`` attribute is the method role. In ``params`` and ``returns``, class names must be fully qualified. (E.g., ``""java.lang.String""`` instead of just ``""String""``.) If one of the latter attributes is specified the other is required for creating a method signature. Note that you can provide either ``name`` attribute or ``params`` and ``returns`` attributes or all three of them. This way you can provide various kinds of name and signature based matches.
+
+<Field>
+^^^^^^^
+
+This element specifies a field. The ``name`` attribute is used to specify the exact or regex match pattern for the field name. You can also filter fields according to their signature - use ``type`` attribute to specify fully qualified type of the field. You can specify either or both of these attributes in order to perform name / signature based matches. The ``role`` attribute is the field role.
+
+<Local>
+^^^^^^^
+
+This element specifies a local variable. The ``name`` attribute is used to specify the exact or regex match pattern for the local variable name. Local variables are variables defined within a method.
+
+<Type>
+^^^^^^
+
+This element matches warnings associated with a particular type. The ``descriptor`` attribute is used to specify the exact or regex match pattern for type descriptor. If the descriptor starts with the ~ character the rest of attribute content is interpreted as a Java regular expression. The ``role`` attribute is the class role, and the ``typeParameters`` is the type parameters. Both of ``role`` and ``typeParameters`` are optional attributes.
+
+<Or>
+^^^^
+
+This element combines ``Match`` clauses as disjuncts. I.e., you can put two ``Method`` elements in an ``Or`` clause in order to match either method.
+
+<And>
+^^^^^
+
+This element combines ``Match`` clauses which both must evaluate to ``true``. I.e., you can put ``Bug`` and ``Confidence`` elements in an ``And`` clause in order to match specific bugs with given confidence only.
+
+<Not>
+^^^^^
+
+This element inverts the included child ``Match``. I.e., you can put a ``Bug`` element in a ``Not`` clause in order to match any bug excluding the given one.
+
+Java element name matching
+--------------------------
+
+If the ``name`` attribute of ``Class``, ``Source``, ``Method`` or ``Field`` starts with the ``~`` character the rest of attribute content is interpreted as a Java regular expression that is matched against the names of the Java element in question.
+
+Note that the pattern is matched against whole element name and therefore ``.*`` clauses need to be used at pattern beginning and/or end to perform substring matching.
+
+See `java.util.regex.Pattern <https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html>`_ documentation for pattern syntax.
+
+Caveats
+-------
+
+``Match`` clauses can only match information that is actually contained in the bug instances.
+Every bug instance has a class, so in general, excluding bugs by class will work.
+
+Some bug instances have two (or more) classes.
+For example, the DE (dropped exception) bugs report both the class containing the method where the dropped exception happens, and the class which represents the type of the dropped exception.
+Only the *first* (primary) class is matched against ``Match`` clauses.
+So, for example, if you want to suppress IC (initialization circularity) reports for classes ""com.foobar.A"" and ""com.foobar.B"", you would use two ``Match`` clauses:
+
+.. code:: xml
+
+  <Match>
+     <Class name=""com.foobar.A"" />
+     <Bug code=""IC"" />
+  </Match>
+  <Match>
+     <Class name=""com.foobar.B"" />
+     <Bug code=""IC"" />
+  </Match>
+
+By explicitly matching both classes, you ensure that the IC bug instance will be matched regardless of which class involved in the circularity happens to be listed first in the bug instance. (Of course, this approach might accidentally supress circularities involving ""com.foobar.A"" or ""com.foobar.B"" and a third class.)
+
+Many kinds of bugs report what method they occur in. For those bug instances, you can put Method clauses in the Match element and they should work as expected.
+
+Examples
+--------
+
+Match all bug reports for a class
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Class name=""com.foobar.MyClass"" />
+  </Match>
+
+Match certain tests from a class by specifying their abbreviations
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Class name=""com.foobar.MyClass""/ >
+    <Bug code=""DE,UrF,SIC"" />
+  </Match>
+
+Match certain tests from all classes by specifying their abbreviations
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Bug code=""DE,UrF,SIC"" />
+  </Match>
+
+Match certain tests from all classes by specifying their category
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Bug category=""PERFORMANCE"" />
+  </Match>
+
+Match bug types from specified methods of a class by their abbreviations
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Class name=""com.foobar.MyClass"" />
+    <Or>
+      <Method name=""frob"" params=""int,java.lang.String"" returns=""void"" />
+      <Method name=""blat"" params="""" returns=""boolean"" />
+    </Or>
+    <Bug code=""DC"" />
+  </Match>
+
+Match a particular bug pattern in a particular method
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <!-- A method with an open stream false positive. -->
+  <Match>
+    <Class name=""com.foobar.MyClass"" />
+    <Method name=""writeDataToFile"" />
+    <Bug pattern=""OS_OPEN_STREAM"" />
+  </Match>
+
+Match a particular bug pattern with a given priority in a particular method
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <!-- A method with a dead local store false positive (medium priority). -->
+  <Match>
+    <Class name=""com.foobar.MyClass"" />
+    <Method name=""someMethod"" />
+    <Bug pattern=""DLS_DEAD_LOCAL_STORE"" />
+    <Priority value=""2"" />
+  </Match>
+
+Match minor bugs introduced by AspectJ compiler (you are probably not interested in these unless you are an AspectJ developer)
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <Match>
+    <Class name=""~.*\$AjcClosure\d+"" />
+    <Bug pattern=""DLS_DEAD_LOCAL_STORE"" />
+    <Method name=""run"" />
+  </Match>
+  <Match>
+    <Bug pattern=""UUF_UNUSED_FIELD"" />
+    <Field name=""~ajc\$.*"" />
+  </Match>
+
+Match bugs in specific parts of the code base
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <!-- match unused fields warnings in Messages classes in all packages -->
+  <Match>
+    <Class name=""~.*\.Messages"" />
+    <Bug code=""UUF"" />
+  </Match>
+  <!-- match mutable statics warnings in all internal packages -->
+  <Match>
+    <Package name=""~.*\.internal"" />
+    <Bug code=""MS"" />
+  </Match>
+  <!-- match anonymoous inner classes warnings in ui package hierarchy -->
+  <Match>
+    <Package name=""~com\.foobar\.fooproject\.ui.*"" />
+    <Bug pattern=""SIC_INNER_SHOULD_BE_STATIC_ANON"" />
+  </Match>
+
+Match bugs on fields or methods with specific signatures
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <!-- match System.exit(...) usage warnings in void main(String[]) methods in all classes -->
+  <Match>
+    <Method returns=""void"" name=""main"" params=""java.lang.String[]"" />
+    <Bug pattern=""DM_EXIT"" />
+  </Match>
+  <!-- match UuF warnings on fields of type com.foobar.DebugInfo on all classes -->
+  <Match>
+    <Field type=""com.foobar.DebugInfo"" />
+    <Bug code=""UuF"" />
+  </Match>
+
+Match bugs using the Not filter operator
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <!-- ignore all bugs in test classes, except for those bugs specifically relating to JUnit tests -->
+  <!-- i.e. filter bug if ( classIsJUnitTest && ! bugIsRelatedToJUnit ) -->
+  <Match>
+    <!-- the Match filter is equivalent to a logical 'And' -->
+
+    <Class name=""~.*\.*Test"" />
+    <!-- test classes are suffixed by 'Test' -->
+
+    <Not>
+        <Bug code=""IJU"" /> <!-- 'IJU' is the code for bugs related to JUnit test code -->
+    </Not>
+  </Match>
+
+Full exclusion filter file to match all classes generated from Groovy source files
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. code:: xml
+
+  <?xml version=""1.0"" encoding=""UTF-8""?>
+  <FindBugsFilter>
+  <Match>
+    <Source name=""~.*\.groovy"" />
+  </Match>
+  </FindBugsFilter>
+
+Complete Example
+----------------
+
+.. code:: xml
+
+  <FindBugsFilter>
+    <Match>
+      <Class name=""com.foobar.ClassNotToBeAnalyzed"" />
+    </Match>
+
+    <Match>
+      <Class name=""com.foobar.ClassWithSomeBugsMatched"" />
+      <Bug code=""DE,UrF,SIC"" />
+    </Match>
+
+    <!-- Match all XYZ violations. -->
+    <Match>
+      <Bug code=""XYZ"" />
+    </Match>
+
+    <!-- Match all doublecheck violations in these methods of ""AnotherClass"". -->
+    <Match>
+      <Class name=""com.foobar.AnotherClass"" />
+      <Or>
+        <Method name=""nonOverloadedMethod"" />
+        <Method name=""frob"" params=""int,java.lang.String"" returns=""void"" />
+        <Method name=""blat"" params="""" returns=""boolean"" />
+      </Or>
+      <Bug code=""DC"" />
+    </Match>
+
+    <!-- A method with a dead local store false positive (medium priority). -->
+    <Match>
+      <Class name=""com.foobar.MyClass"" />
+      <Method name=""someMethod"" />
+      <Bug pattern=""DLS_DEAD_LOCAL_STORE"" />
+      <Priority value=""2"" />
+    </Match>
+
+    <!-- All bugs in test classes, except for JUnit-specific bugs -->
+    <Match>
+    <Class name=""~.*\.*Test"" />
+    <Not>
+      <Bug code=""IJU"" />
+    </Not>
+    </Match>
+  </FindBugsFilter>
diff --git a/docs/index.rst b/docs/index.rst
index 5a32cbef1..80bafb4a8 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -25,4 +25,5 @@ Contents
 
    introduction
    installing
+   filter
    migration
diff --git a/docs/locale/ja/LC_MESSAGES/filter.po b/docs/locale/ja/LC_MESSAGES/filter.po
new file mode 100644
index 000000000..0b18dd14f
--- /dev/null
+++ b/docs/locale/ja/LC_MESSAGES/filter.po
@@ -0,0 +1,434 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) 2016-2017, spotbugs community
+# This file is distributed under the same license as the spotbugs package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
+#
+#, fuzzy
+msgid """"
+msgstr """"
+""Project-Id-Version: spotbugs 3.1\n""
+""Report-Msgid-Bugs-To: \n""
+""POT-Creation-Date: 2017-05-12 17:29+0000\n""
+""PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n""
+""Last-Translator: FULL NAME <EMAIL@ADDRESS>\n""
+""Language-Team: LANGUAGE <LL@li.org>\n""
+""MIME-Version: 1.0\n""
+""Content-Type: text/plain; charset=utf-8\n""
+""Content-Transfer-Encoding: 8bit\n""
+""Generated-By: Babel 1.3\n""
+
+#: ../../filter.rst:2
+msgid ""Filter file""
+msgstr """"
+
+#: ../../filter.rst:4
+msgid """"
+""Filter files may be used to include or exclude bug reports for particular""
+"" classes and methods. This chapter explains how to use filter files.""
+msgstr """"
+
+#: ../../filter.rst:7
+msgid ""Introduction to Filter Files""
+msgstr """"
+
+#: ../../filter.rst:9
+msgid """"
+""Conceptually, a filter matches bug instances against a set of criteria. ""
+""By defining a filter, you can select bug instances for special treatment;""
+"" for example, to exclude or include them in a report.""
+msgstr """"
+
+#: ../../filter.rst:12
+msgid """"
+""A filter file is an XML document with a top-level ``FindBugsFilter`` ""
+""element which has some number of Match elements as children. Each Match ""
+""element represents a predicate which is applied to generated bug ""
+""instances. Usually, a filter will be used to exclude bug instances. For ""
+""example::""
+msgstr """"
+
+#: ../../filter.rst:18
+msgid """"
+""However, a filter could also be used to select bug instances to ""
+""specifically report::""
+msgstr """"
+
+#: ../../filter.rst:22
+msgid """"
+""``Match`` elements contain children, which are conjuncts of the ""
+""predicate. In other words, each of the children must be ``true`` for the ""
+""predicate to be ``true``.""
+msgstr """"
+
+#: ../../filter.rst:26
+msgid ""Types of Match clauses""
+msgstr """"
+
+#: ../../filter.rst:29
+msgid ""<Bug>""
+msgstr """"
+
+#: ../../filter.rst:31
+msgid """"
+""This element specifies a particular bug ``pattern or patterns to match. ""
+""The ``pattern`` attribute is a comma-separated list of bug pattern types.""
+"" You can find the bug pattern types for particular warnings by looking at""
+"" the output produced by the **-xml** output option (the type attribute of""
+"" BugInstance elements), or from the :doc:`bugDescriptions`.""
+msgstr """"
+
+#: ../../filter.rst:34
+msgid """"
+""For more coarse-grained matching, use ``code`` attribute. It takes a ""
+""comma-separated list of bug abbreviations. For most-coarse grained ""
+""matching use ``category`` attriute, that takes a comma separated list of ""
+""bug category names: ``CORRECTNESS``, ``MT_CORRECTNESS``, ""
+""``BAD_PRACTICICE``, ``PERFORMANCE``, ``STYLE``.""
+msgstr """"
+
+#: ../../filter.rst:36
+msgid """"
+""If more than one of the attributes mentioned above are specified on the ""
+""same <Bug> element, all bug patterns that match either one of specified ""
+""pattern names, or abreviations, or categories will be matched.""
+msgstr """"
+
+#: ../../filter.rst:38
+msgid """"
+""As a backwards compatibility measure, <BugPattern> and <BugCode> elements""
+"" may be used instead of <Bug> element. Each of these uses a name ""
+""attribute for specifying accepted values list. Support for these elements""
+"" may be removed in a future release.""
+msgstr """"
+
+#: ../../filter.rst:41
+msgid ""<Confidence>""
+msgstr """"
+
+#: ../../filter.rst:43
+msgid """"
+""This element matches warnings with a particular bug confidence. The ""
+""``value`` attribute should be an integer value: 1 to match high-""
+""confidence warnings, 2 to match normal-confidence warnings, or 3 to match""
+"" low-confidence warnings. ``<Confidence>`` replaced ``<Priority>`` in ""
+""2.0.0 release.""
+msgstr """"
+
+#: ../../filter.rst:46
+msgid ""<Priority>""
+msgstr """"
+
+#: ../../filter.rst:48
+msgid ""Same as ``<Confidence>``, exists for backward compatibility.""
+msgstr """"
+
+#: ../../filter.rst:51
+msgid ""<Rank>""
+msgstr """"
+
+#: ../../filter.rst:53
+msgid """"
+""This element matches warnings with a particular bug rank. The ``value`` ""
+""attribute should be an integer value between 1 and 20, where 1 to 4 are ""
+""scariest, 5 to 9 scary, 10 to 14 troubling, and 15 to 20 of concern bugs.""
+msgstr """"
+
+#: ../../filter.rst:56
+msgid ""<Package>""
+msgstr """"
+
+#: ../../filter.rst:58
+msgid """"
+""This element matches warnings associated with classes within the package ""
+""specified using ``name`` attribute. Nested packages are not included ""
+""(along the lines of Java import statement). However matching multiple ""
+""packages can be achieved easily using regex name match.""
+msgstr """"
+
+#: ../../filter.rst:61
+msgid ""<Class>""
+msgstr """"
+
+#: ../../filter.rst:63
+msgid """"
+""This element matches warnings associated with a particular class. The ""
+""``name`` attribute is used to specify the exact or regex match pattern ""
+""for the class name. The ``role`` attribute is the class role.""
+msgstr """"
+
+#: ../../filter.rst:65
+msgid """"
+""As a backward compatibility measure, instead of element of this type, you""
+"" can use ``class`` attribute on a ``Match`` element to specify exact an ""
+""class name or ``classregex`` attribute to specify a regular expression to""
+"" match the class name against.""
+msgstr """"
+
+#: ../../filter.rst:67
+msgid """"
+""If the ``Match`` element contains neither a ``Class`` element, nor a ""
+""``class`` / ``classregex`` attribute, the predicate will apply to all ""
+""classes. Such predicate is likely to match more bug instances than you ""
+""want, unless it is refined further down with appropriate method or field ""
+""predicates.""
+msgstr """"
+
+#: ../../filter.rst:70
+msgid ""<Source>""
+msgstr """"
+
+#: ../../filter.rst:72
+msgid """"
+""This element matches warnings associated with a particular source file. ""
+""The ``name`` attribute is used to specify the exact or regex match ""
+""pattern for the source file name.""
+msgstr """"
+
+#: ../../filter.rst:75
+msgid ""<Method>""
+msgstr """"
+
+#: ../../filter.rst:77
+msgid """"
+""This element specifies a method. The ``name`` attribute is used to ""
+""specify the exact or regex match pattern for the method name. The ""
+""``params`` attribute is a comma-separated list of the types of the ""
+""method's parameters. The ``returns`` attribute is the method's return ""
+""type. The ``role`` attribute is the method role. In ``params`` and ""
+""``returns``, class names must be fully qualified. (E.g., ""
+""``\""java.lang.String\""`` instead of just ``\""String\""``.) If one of the ""
+""latter attributes is specified the other is required for creating a ""
+""method signature. Note that you can provide either ``name`` attribute or ""
+""``params`` and ``returns`` attributes or all three of them. This way you ""
+""can provide various kinds of name and signature based matches.""
+msgstr """"
+
+#: ../../filter.rst:80
+msgid ""<Field>""
+msgstr """"
+
+#: ../../filter.rst:82
+msgid """"
+""This element specifies a field. The ``name`` attribute is used to specify""
+"" the exact or regex match pattern for the field name. You can also filter""
+"" fields according to their signature - use ``type`` attribute to specify ""
+""fully qualified type of the field. You can specify either or both of ""
+""these attributes in order to perform name / signature based matches. The ""
+""``role`` attribute is the field role.""
+msgstr """"
+
+#: ../../filter.rst:85
+msgid ""<Local>""
+msgstr """"
+
+#: ../../filter.rst:87
+msgid """"
+""This element specifies a local variable. The ``name`` attribute is used ""
+""to specify the exact or regex match pattern for the local variable name. ""
+""Local variables are variables defined within a method.""
+msgstr """"
+
+#: ../../filter.rst:90
+msgid ""<Type>""
+msgstr """"
+
+#: ../../filter.rst:92
+msgid """"
+""This element matches warnings associated with a particular type. The ""
+""``descriptor`` attribute is used to specify the exact or regex match ""
+""pattern for type descriptor. If the descriptor starts with the ~ ""
+""character the rest of attribute content is interpreted as a Java regular ""
+""expression. The ``role`` attribute is the class role, and the ""
+""``typeParameters`` is the type parameters. Both of ``role`` and ""
+""``typeParameters`` are optional attributes.""
+msgstr """"
+
+#: ../../filter.rst:95
+msgid ""<Or>""
+msgstr """"
+
+#: ../../filter.rst:97
+msgid """"
+""This element combines ``Match`` clauses as disjuncts. I.e., you can put ""
+""two ``Method`` elements in an ``Or`` clause in order to match either ""
+""method.""
+msgstr """"
+
+#: ../../filter.rst:100
+msgid ""<And>""
+msgstr """"
+
+#: ../../filter.rst:102
+msgid """"
+""This element combines ``Match`` clauses which both must evaluate to ""
+""``true``. I.e., you can put ``Bug`` and ``Confidence`` elements in an ""
+""``And`` clause in order to match specific bugs with given confidence ""
+""only.""
+msgstr """"
+
+#: ../../filter.rst:105
+msgid ""<Not>""
+msgstr """"
+
+#: ../../filter.rst:107
+msgid """"
+""This element inverts the included child ``Match``. I.e., you can put a ""
+""``Bug`` element in a ``Not`` clause in order to match any bug excluding ""
+""the given one.""
+msgstr """"
+
+#: ../../filter.rst:110
+msgid ""Java element name matching""
+msgstr """"
+
+#: ../../filter.rst:112
+msgid """"
+""If the ``name`` attribute of ``Class``, ``Source``, ``Method`` or ""
+""``Field`` starts with the ``~`` character the rest of attribute content ""
+""is interpreted as a Java regular expression that is matched against the ""
+""names of the Java element in question.""
+msgstr """"
+
+#: ../../filter.rst:114
+msgid """"
+""Note that the pattern is matched against whole element name and therefore""
+"" ``.*`` clauses need to be used at pattern beginning and/or end to ""
+""perform substring matching.""
+msgstr """"
+
+#: ../../filter.rst:116
+msgid """"
+""See `java.util.regex.Pattern ""
+""<https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html>`_""
+"" documentation for pattern syntax.""
+msgstr """"
+
+#: ../../filter.rst:119
+msgid ""Caveats""
+msgstr """"
+
+#: ../../filter.rst:121
+msgid """"
+""``Match`` clauses can only match information that is actually contained ""
+""in the bug instances. Every bug instance has a class, so in general, ""
+""excluding bugs by class will work.""
+msgstr """"
+
+#: ../../filter.rst:124
+msgid """"
+""Some bug instances have two (or more) classes. For example, the DE ""
+""(dropped exception) bugs report both the class containing the method ""
+""where the dropped exception happens, and the class which represents the ""
+""type of the dropped exception. Only the *first* (primary) class is ""
+""matched against ``Match`` clauses. So, for example, if you want to ""
+""suppress IC (initialization circularity) reports for classes ""
+""\""com.foobar.A\"" and \""com.foobar.B\"", you would use two ``Match`` ""
+""clauses:""
+msgstr """"
+
+#: ../../filter.rst:140
+msgid """"
+""By explicitly matching both classes, you ensure that the IC bug instance ""
+""will be matched regardless of which class involved in the circularity ""
+""happens to be listed first in the bug instance. (Of course, this approach""
+"" might accidentally supress circularities involving \""com.foobar.A\"" or ""
+""\""com.foobar.B\"" and a third class.)""
+msgstr """"
+
+#: ../../filter.rst:142
+msgid """"
+""Many kinds of bugs report what method they occur in. For those bug ""
+""instances, you can put Method clauses in the Match element and they ""
+""should work as expected.""
+msgstr """"
+
+#: ../../filter.rst:145
+msgid ""Examples""
+msgstr """"
+
+#: ../../filter.rst:148
+msgid ""Match all bug reports for a class""
+msgstr """"
+
+#: ../../filter.rst:157
+msgid ""Match certain tests from a class by specifying their abbreviations""
+msgstr """"
+
+#: ../../filter.rst:167
+msgid ""Match certain tests from all classes by specifying their abbreviations""
+msgstr """"
+
+#: ../../filter.rst:176
+msgid ""Match certain tests from all classes by specifying their category""
+msgstr """"
+
+#: ../../filter.rst:185
+msgid ""Match bug types from specified methods of a class by their abbreviations""
+msgstr """"
+
+#: ../../filter.rst:199
+msgid ""Match a particular bug pattern in a particular method""
+msgstr """"
+
+#: ../../filter.rst:211
+msgid """"
+""Match a particular bug pattern with a given priority in a particular ""
+""method""
+msgstr """"
+
+#: ../../filter.rst:224
+msgid """"
+""Match minor bugs introduced by AspectJ compiler (you are probably not ""
+""interested in these unless you are an AspectJ developer)""
+msgstr """"
+
+#: ../../filter.rst:239
+msgid ""Match bugs in specific parts of the code base""
+msgstr """"
+
+#: ../../filter.rst:260
+msgid ""Match bugs on fields or methods with specific signatures""
+msgstr """"
+
+#: ../../filter.rst:276
+msgid ""Match bugs using the Not filter operator""
+msgstr """"
+
+#: ../../filter.rst:294
+msgid """"
+""Full exclusion filter file to match all classes generated from Groovy ""
+""source files""
+msgstr """"
+
+#: ../../filter.rst:306
+msgid ""Complete Example""
+msgstr """"
+
+#~ msgid """"
+#~ msgstr """"
+
+#~ msgid ""<Match>""
+#~ msgstr """"
+
+#~ msgid ""<Class name=\""com.foobar.A\"" /> <Bug code=\""IC\"" />""
+#~ msgstr """"
+
+#~ msgid ""</Match>""
+#~ msgstr """"
+
+#~ msgid ""<Class name=\""com.foobar.B\"" /> <Bug code=\""IC\"" />""
+#~ msgstr """"
+
+#~ msgid """"
+#~ ""This element specifies a particular bug""
+#~ "" ``pattern or patterns to match. The""
+#~ "" ``pattern`` attribute is a comma-""
+#~ ""separated list of bug pattern types. ""
+#~ ""You can find the bug pattern types""
+#~ "" for particular warnings by looking ""
+#~ ""at the output produced by the ""
+#~ ""**-xml** output option (the type ""
+#~ ""attribute of BugInstance elements), or ""
+#~ ""from the :doc:`bugDescriotions`.""
+#~ msgstr """"
+
diff --git a/spotbugs/src/doc/FilterFile.txt b/spotbugs/src/doc/FilterFile.txt
index c571e0fce..b4499f41d 100644
--- a/spotbugs/src/doc/FilterFile.txt
+++ b/spotbugs/src/doc/FilterFile.txt
@@ -1,125 +1 @@
-=============
-How it works:
-=============
-
-A filter file is an XML file with a top-level ""FindBugsFilter"" element
-which has some number of ""Match"" elements as children.  Each Match
-element represents a predicate which is applied to generated bug instances.
-Usually, a filter will be used to exclude bug instances.  For example:
-
-  findbugs -textui -exclude myExcludeFilter.xml myApp.jar
-
-However, a filter could also be used to select bug instances to specifically
-report:
-
-  findbugs -textui -include myIncludeFilter.xml myApp.jar
-
-Match has ""class"" and ""classregex"" attributes specifying what class or classes
-the predicate applies to.
-
-Match contains children, which are conjuncts of the predicate.
-(I.e., each of the children must be true for the predicate to be true.)
-
-=======================
-Types of Match clauses:
-=======================
-
-   <BugCode> specifies abbreviations of bugs.
-   The ""name"" attribute is a comma-separated list of abbreviations.
-
-   <Method> specifies a method.  The ""name"" attribute is the name
-   of the method.  The ""params"" attribute is a comma separated list
-   of the types of the method's parameters.  The ""returns"" attribute is
-   the method's return type.  In ""params"" and ""returns"", class names
-   must be fully qualified.  (E.g., ""java.lang.String"" instead of just
-   ""String"".)  Note that ""params"" and ""returns"" are optional; you can
-   just specify ""name"", and the clause will match all methods with
-   that name.  However, if you specify either ""params"" or ""returns"",
-   you must specify both of them.
-
-   <Or> combines Match clauses as disjuncts.  I.e., you can put two
-   ""Method"" elements in an Or clause in order match either method.
-
-========
-Caveats:
-========
-
-Match clauses can only match information that is actually contained in the
-bug instances.  Every bug instance has a class, so in general, excluding
-bugs by class will work.
-
-Some bug instances have two classes.  For example, the DE (dropped exception)
-bugs report both the class containing the method where the dropped exception
-happens, and the class which represents the type of the dropped exception.
-Only the FIRST (primary) class is matched against Match clauses.
-So, for example, if you want to suppress IC (initialization circularity)
-reports for classes ""com.foobar.A"" and ""com.foobar.B"", you would use
-two Match clauses:
-
-   <Match class=""com.foobar.A"">
-      <BugCode name=""IC"" />
-   </Match>
-
-   <Match class=""com.foobar.B"">
-      <BugCode name=""IC"" />
-   </Match>
-
-Many kinds of bugs report what method they occur in.  For those bug instances,
-you can put Method clauses in the Match element and they should work
-as expected.
-
-=========
-Examples:
-=========
-
-  1. Match all bug reports for a class.
-
-     <Match class=""com.foobar.MyClass"" />
-
-  2. Match certain tests from a class.
-     <Match class=""com.foobar.MyClass"">
-       <BugCode name=""DE,UrF,SIC"" />
-     </Match>
-
-  3. Match certain tests from all classes.
-
-     <Match classregex="".*"" >
-       <BugCode name=""DE,UrF,SIC"" />
-     </Match>
-
-  4. Match bug types from specified methods of a class.
-
-     <Match class=""com.foobar.MyClass"">
-       <Or>
-         <Method name=""frob"" params=""int,java.lang.String"" returns=""void"" />
-         <Method name=""blat"" params="""" returns=""boolean"" />
-       </Or>
-       <BugCode name=""DC"" />
-     </Match>
-
-=================
-Complete Example:
-=================
-
-<FindBugsFilter>
-     <Match class=""com.foobar.ClassNotToBeAnalyzed"" />
-
-     <Match class=""com.foobar.ClassWithSomeBugsMatched"">
-       <BugCode name=""DE,UrF,SIC"" />
-     </Match>
-
-     <!-- Match all XYZ violations. -->
-     <Match classregex="".*"" >
-       <BugCode name=""XYZ"" />
-     </Match>
-
-     <!-- Match all doublecheck violations in these methods of ""AnotherClass"". -->
-     <Match class=""com.foobar.AnotherClass"">
-       <Or>
-         <Method name=""nonOverloadedMethod"" />
-         <Method name=""frob"" params=""int,java.lang.String"" returns=""void"" />
-         <Method name=""blat"" params="""" returns=""boolean"" />
-       </Or>
-       <BugCode name=""DC"" />
-     </Match>
-</FindBugsFilter>
+Refer docs/filter.rst instead of this file, or visit http://spotbugs.readthedocs.io/en/latest/filter.html to see generated site.",Migrate filter file description to new site .,"""Added documentation for filter files""",Added documentation for filter files in spotbugs.,"The commit message could be: ""Added filter file documentation in reStructuredText format and updated FilterFile.txt to refer to it"". This commit adds a new file 'filter.rst' containing the documentation for filter files in reStructuredText format, and updates the existing 'FilterFile.txt' to refer to the new documentation.","""Add detailed documentation for filter files and their usage in the `docs/filter.rst` file; remove outdated `FilterFile.txt` content.""",Model 4
"diff --git a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
index bd9eb0f3674..8cdf2bd3f52 100644
--- a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
@@ -86,7 +86,6 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
     private final ClusterService clusterService;
     private AllocationService allocationService;
     private final ClusterName clusterName;
-    private final DiscoveryService discoveryService;
     private final DiscoveryNodeService discoveryNodeService;
     private final DiscoverySettings discoverySettings;
     private final ZenPingService pingService;
@@ -130,14 +129,13 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
     @Inject
     public ZenDiscovery(Settings settings, ClusterName clusterName, ThreadPool threadPool,
                         TransportService transportService, ClusterService clusterService, NodeSettingsService nodeSettingsService,
-                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version, DiscoverySettings discoverySettings,
-                        DiscoveryService discoveryService) {
+                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version,
+                        DiscoverySettings discoverySettings) {
         super(settings);
         this.clusterName = clusterName;
         this.threadPool = threadPool;
         this.clusterService = clusterService;
         this.transportService = transportService;
-        this.discoveryService = discoveryService;
         this.discoveryNodeService = discoveryNodeService;
         this.discoverySettings = discoverySettings;
         this.pingService = pingService;
@@ -649,7 +647,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
 
 
                 assert newClusterState.nodes().masterNode() != null : ""received a cluster state without a master"";
-                assert !newClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : ""received a cluster state with a master block"";
+                assert !newClusterState.blocks().hasGlobalBlock(discoverySettings.getNoMasterBlock()) : ""received a cluster state with a master block"";
 
                 clusterService.submitStateUpdateTask(""zen-disco-receive(from master ["" + newClusterState.nodes().masterNode() + ""])"", Priority.URGENT, new ProcessedClusterStateNonMasterUpdateTask() {
                     @Override
@@ -716,7 +714,7 @@ public class ZenDiscovery extends AbstractLifecycleComponent<Discovery> implemen
                             masterFD.restart(latestDiscoNodes.masterNode(), ""new cluster state received and we",Remove unneeded reference to DiscoveryService which potentially causes circular references,"""Remove unused DiscoveryService dependency from ZenDiscovery""","""Remove DiscoveryService dependency and replace with DiscoverySettings in ZenDiscovery class""","""Remove unused discoveryService field in ZenDiscovery""

This change removes the unused `discoveryService` field from the `ZenDiscovery` class and updates the constructor accordingly. Additionally, it replaces `discoveryService.getNoMasterBlock()` with `discoverySettings.getNoMasterBlock()` in the assertion. This suggests that the `getNoMasterBlock()` method was moved from `discoveryService` to `discoverySettings`, or `discoverySettings` also provides this method, making `discoveryService` unnecessary in this context.","""Remove DiscoveryService dependency from ZenDiscovery class and refactor related code.""",Model 4
"diff --git a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
index adfb22c587..3271415ac9 100644
--- a/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
+++ b/java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
@@ -65,7 +65,11 @@ public DesiredCapabilities(Map<String, ?> rawMap) {
     capabilities.putAll(rawMap);
     Object value = capabilities.get(PLATFORM);
     if (value instanceof String) {
-      capabilities.put(PLATFORM, Platform.valueOf((String) value));
+      try {
+        capabilities.put(PLATFORM, Platform.fromString((String) value));
+      } catch (WebDriverException ex) {
+        // unrecognized platform, fallback to string
+      }
     }
   }
 
diff --git a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
index 0177b6e262..9855b2e4ec 100644
--- a/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
+++ b/java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
@@ -111,4 +111,14 @@ public void shouldNotAutomaticallyConvertPlatformIfItNotConvertible() {
     assertEquals(caps.getCapability(CapabilityType.PLATFORM), ""FreeBSD"");
   }
 
+  @Test
+  public void shouldNotAutomaticallyConvertPlatformIfItNotConvertibleInConstructor() {
+    Map<String, Object> capabilitiesMap = new HashMap<String, Object>() {{
+      put(CapabilityType.PLATFORM, ""FreeBSD"");
+    }};
+
+    DesiredCapabilities caps = new DesiredCapabilities(capabilitiesMap);
+    assertEquals(caps.getCapability(CapabilityType.PLATFORM), ""FreeBSD"");
+  }
+
 }",Implementing ability to set an arbitrary platform capability even if it can \' t be converted to Platform enum in DesiredCapability constructor from Map .,"""Relax platform conversion in DesiredCapabilities to allow unrecognized values""","""Improve platform handling in DesiredCapabilities, add test for non-convertible platforms""","""Update DesiredCapabilities to handle unrecognized platform strings and add test""

This commit appears to modify the `DesiredCapabilities` class in the Selenium WebDriver Java client to better handle unrecognized platform strings. Previously, if an unrecognized platform string was provided, it would throw a `WebDriverException`. Now, it will fall back to using the string instead of throwing an exception.

Additionally, a new test case has been added to ensure that this behavior works correctly in the constructor of `DesiredCapabilities`. The test checks that if an unrecognized platform string is provided in the constructor's `Map` argument, it is stored as a string instead of being converted to a `Platform` enum and throwing an exception.

Overall, this commit improves the robustness of `DesiredCapabilities` when handling unrecognized platform strings and adds a test to ensure that the new behavior works as expected.",Handle unrecognized platforms in DesiredCapabilities; add constructor test for non-convertible platforms.,Model 2
"diff --git a/twitter4j-core/src/main/java/twitter4j/Status.java b/twitter4j-core/src/main/java/twitter4j/Status.java
index 97825f6e..7db214e7 100644
--- a/twitter4j-core/src/main/java/twitter4j/Status.java
+++ b/twitter4j-core/src/main/java/twitter4j/Status.java
@@ -20,6 +20,7 @@ import java.util.Date;
 
 /**
  * A data interface representing one single status of a user.
+ * (e.g. https://dev.twitter.com/rest/reference/get/statuses/show/%3Aid)
  *
  * @author Yusuke Yamamoto - yusuke at mac.com
  */
@@ -36,21 +37,21 @@ public interface Status extends Comparable<Status>, TwitterResponse,
     /**
      * Returns the id of the status
      *
-     * @return the id
+     * @return the id (e.g. 210462857140252672)
      */
     long getId();
 
     /**
      * Returns the text of the status
      *
-     * @return the text
+     * @return the text (e.g. Along with our new #Twitterbird, we've also updated our Display Guidelines: https://t.co/Ed4omjYs  ^JC)
      */
     String getText();
 
     /**
      * Returns the source
      *
-     * @return the source
+     * @return the source (e.g. &lt;a href=""http://twitter.com"" rel=""nofollow""&gt;Twitter Web Client&lt;/a&gt;)
      * @since Twitter4J 1.0.4
      */
     String getSource();
@@ -193,7 +194,7 @@ public interface Status extends Comparable<Status>, TwitterResponse,
     /**
      * Returns the lang of the status text if available.
      *
-     * @return two-letter iso language code
+     * @return two-letter iso language code (e.g. en)
      * @since Twitter4J 3.0.6
      */
     String getLang();",Add examples for Status,"""Added example values to Javadoc comments in Status.java""",Added documentation for Twitter API endpoints and example values in Status interface.,"""Added documentation references and examples to Status interface in twitter4j-core""",Add examples to Javadoc comments in Status.java for better clarity and understanding of the returned values.,Model 4
"diff --git a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
index 25b8e8b50b3..ec84188c299 100644
--- a/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
+++ b/buildSrc/src/main/kotlin/androidx/build/Jetify.kt
@@ -30,6 +30,7 @@ val archivesToDejetify = listOf(
     ""m2repository/androidx/arch/**"",
     ""m2repository/androidx/arch/core/**"",
     ""m2repository/androidx/asynclayoutinflater/**"",
+    ""m2repository/androidx/benchmark/**"",
     ""m2repository/androidx/biometric/**"",
     ""m2repository/androidx/browser/**"",
     ""m2repository/androidx/camera/**"",
diff --git a/jetifier/jetifier/migration.config b/jetifier/jetifier/migration.config
index 03e7d2abd62..16ac67b77aa 100644
--- a/jetifier/jetifier/migration.config
+++ b/jetifier/jetifier/migration.config
@@ -613,6 +613,10 @@
       ""from"": ""androidx/wear/(.*)"",
       ""to"": ""ignore""
     },
+    {
+      ""from"": ""androidx/benchmark/(.*)"",
+      ""to"": ""ignore""
+    },
     {
       ""from"": ""androidx/camera/(.*)"",
       ""to"": ""ignore""
@@ -971,6 +975,10 @@
       ""from"": ""androidx/sharetarget"",
       ""to"": ""androidx/sharetarget""
     },
+    {
+      ""from"": ""androidx/benchmark"",
+      ""to"": ""androidx/benchmark""
+    },
     {
       ""from"": ""androidx/camera"",
       ""to"": ""androidx/camera""
@@ -3021,6 +3029,30 @@
         ""version"": ""{newSlVersion}""
       }
     },
+    {
+      ""from"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-common"",
+        ""version"": ""{newBenchmarkVersion}""
+      },
+      ""to"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-common"",
+        ""version"": ""{newBenchmarkVersion}""
+      }
+    },
+    {
+      ""from"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-junit4"",
+        ""version"": ""{newBenchmarkVersion}""
+      },
+      ""to"": {
+        ""groupId"": ""androidx.benchmark"",
+        ""artifactId"": ""benchmark-junit4"",
+        ""version"": ""{newBenchmarkVersion}""
+      }
+    },
     {
       ""from"": {
         ""groupId"": ""androidx.camera"",
@@ -3133,6 +3165,7 @@
       ""newBiometricVersion"": ""1.0.0-alpha03"",
       ""newDataBindingVersion"": ""undefined"",
       ""newWorkManagerVersion"": ""2.0.0"",
+      ""newBenchmarkVersion"": ""1.0.0-alpha04"",
       ""newCameraVersion"": ""1.0.0-alpha01""
     }
   },",Add Benchmark to partial dejetification .,"""Jetify: Add androidx.benchmark to dejetify and migration config""","""Add support for androidx.benchmark to Jetifier""","The commit message could be:

""Added support for jetifying androidx.benchmark library

Changes include:
- Added 'm2repository/androidx/benchmark/**' to the list of archives to dejetify in Jetify.kt
- Updated migration.config to include rules for ignoring 'androidx/benchmark/(.*)' and mapping 'androidx.benchmark' artifacts to their corresponding versions in the jetified namespace
- Added a new variable 'newBenchmarkVersion' in the version mapping section of migration.config""",Added support for Jetifying androidx.benchmark library and updated migration.config to include androidx.benchmark artifacts and versions.,Model 1
"diff --git a/doc/en/user/source/community/grib/grib.rst b/doc/en/user/source/community/grib/grib.rst
deleted file mode 100644
index 2870ae591a..0000000000
--- a/doc/en/user/source/community/grib/grib.rst
+++ /dev/null
@@ -1,26 +0,0 @@
-.. _community_grib:
-
-GRIB format
-===========
-
-Installing the GeoServer GRIB format extension
-----------------------------------------------
-
- #. Download the extension from the `nightly GeoServer community module builds <http://ares.opengeo.org/geoserver/master/community-latest/>`_.
-
-    .. warning:: Make sure the version of the extension matches the version of the GeoServer instance!
-
- #. Extract the contents of the archive into the ``WEB-INF/lib`` directory of the GeoServer installation.
-
-Configuring GRIB dataset
-------------------------
-For configuring a GRIB dataset the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.
-
-.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.
- 
- 
-Current limitations
--------------------
-
-* Only WGS84 output CRS is supported
-* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)
diff --git a/doc/en/user/source/community/index.rst b/doc/en/user/source/community/index.rst
index 34fc14dfd1..1cd77d3cb0 100644
--- a/doc/en/user/source/community/index.rst
+++ b/doc/en/user/source/community/index.rst
@@ -17,16 +17,13 @@ officially part of the GeoServer releases. They are however built along with the
 
    authkey/index
    dds/index
-   netcdf/netcdf
    python/index
    scripting/index
    spatialite/index
-   netcdf-out/index
    colormap/index
    jdbcconfig/index
    mbtiles/index
    geopkg/index
-   grib/grib
    rest/index
    pgraster/pgraster
    wps-download/index
diff --git a/doc/en/user/source/extensions/grib/grib.rst b/doc/en/user/source/extensions/grib/grib.rst
new file mode 100644
index 0000000000..28463e56a7
--- /dev/null
+++ b/doc/en/user/source/extensions/grib/grib.rst
@@ -0,0 +1,46 @@
+.. _grib:
+
+GRIB
+====
+
+Adding a GRIB data store
+--------------------------
+To add a GRIB data store the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.
+
+.. figure:: gribcreate.png
+   :align: center
+
+   *GRIB in the list of raster data stores*
+
+Configuring a GRIB data store
+-------------------------------
+
+.. figure:: gribconfigure.png
+   :align: center
+
+   *Configuring a GRIB data store*
+
+.. list-table::
+   :widths: 20 80
+
+   * - **Option**
+     - **Description**
+   * - ``Workspace``
+     - 
+   * - ``Data Source Name``
+     - 
+   * - ``Description``
+     - 
+   * - ``Enabled``
+     -  
+   * - ``URL``
+     - 
+-----------------------------
+
+.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.
+ 
+ 
+Current limitations
+-------------------
+
+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)
diff --git a/doc/en/user/source/extensions/grib/grib.rst~ b/doc/en/user/source/extensions/grib/grib.rst~
new file mode 100644
index 0000000000..8c4f96e1e1
--- /dev/null
+++ b/doc/en/user/source/extensions/grib/grib.rst~
@@ -0,0 +1,16 @@
+.. _grib:
+
+GRIB format
+===========
+
+Configuring GRIB dataset
+------------------------
+For configuring a GRIB dataset the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.
+
+.. note:: Note that internally the GRIB extension uses the NetCDF reader, which supports also GRIB data.
+ 
+ 
+Current limitations
+-------------------
+
+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)
diff --git a/doc/en/user/source/extensions/grib/gribconfigure.png b/doc/en/user/source/extensions/grib/gribconfigure.png
new file mode 100644
index 0000000000..02fc8f86c5
Binary files /dev/null and b/doc/en/user/source/extensions/grib/gribconfigure.png differ
diff --git a/doc/en/user/source/extensions/grib/gribcreate.png b/doc/en/user/source/extensions/grib/gribcreate.png
new file mode 100644
index 0000000000..4a5e14771f
Binary files /dev/null and b/doc/en/user/source/extensions/grib/gribcreate.png differ
diff --git a/doc/en/user/source/extensions/index.rst b/doc/en/user/source/extensions/index.rst
index 368c40546f..9892b10162 100644
--- a/doc/en/user/source/extensions/index.rst
+++ b/doc/en/user/source/extensions/index.rst
@@ -19,12 +19,15 @@ see the :ref:`data_vector`, :ref:`data_raster`, and :ref:`data_database` section
    dxf/index   
    excel
    geosearch
+   grib/grib
    imagemap
    importer/index
    inspire/index
    jp2k/index
    libjpeg-turbo/index
    monitoring/index
+   netcdf/netcdf
+   netcdf-out/index
    ogr
    printing/index
    querylayer/index
diff --git a/doc/en/user/source/community/netcdf-out/cfnames.png b/doc/en/user/source/extensions/netcdf-out/cfnames.png
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/cfnames.png
rename to doc/en/user/source/extensions/netcdf-out/cfnames.png
diff --git a/doc/en/user/source/community/netcdf-out/cfunit.png b/doc/en/user/source/extensions/netcdf-out/cfunit.png
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/cfunit.png
rename to doc/en/user/source/extensions/netcdf-out/cfunit.png
diff --git a/doc/en/user/source/extensions/netcdf-out/index.rst b/doc/en/user/source/extensions/netcdf-out/index.rst
new file mode 100644
index 0000000000..a56734f836
--- /dev/null
+++ b/doc/en/user/source/extensions/netcdf-out/index.rst
@@ -0,0 +1,93 @@
+.. _netcdf-out:
+
+NetCDF Output format
+====================
+This plugin brings in the ability to encode WCS 2.0.1 Multidimensional output as NetCDF files using the Unidata NetCDF Java library. 
+
+Getting a NetCDF output file
+----------------------------
+Make sure to specify application/x-netcdf as value of the format parameter within the getCoverage request using the proper constant.
+As an instance: 
+http://localhost:8080/geoserver/wcs?request=GetCoverage&service=WCS&version=2.0.1&coverageId=it.geosolutions__V&Format=application/x-netcdf...
+
+
+Current limitations
+-------------------
+
+* Input coverages/slices should share the same bounding box (lon/lat coordinates are the same for the whole ND cube)
+* NetCDF output will be produced only when input coverages come from a StructuredGridCoverage2D reader (This will allows to query the GranuleSource to get the list of granules in order to setup dimensions slices for each sub-coverage)
+
+
+Supporting NetCDF4-Classic output file
+--------------------------------------
+Starting with version 2.8 of GeoServer, NetCDF4-Classic output is supported in addition to NetCDF-3.
+NetCDF4-Classic leverages on the simpler data model of NetCDF-3 by supporting the HDF5-based storage capabilities of NetCDF-4. 
+See :ref:`Installing required NetCDF-4 Native libraries <nc4>` for more info on that.
+
+NetCDF Output customization
+---------------------------
+
+Global Settings configuration
++++++++++++++++++++++++++++++
+Starting with version 2.8 of GeoServer it is possible to define a few global settings for the NetCDF output format. A new section will be added to the *Global Settings* page.
+
+.. figure:: netcdfoutsettings.png
+   :align: center
+
+   *NetCDF Output Global settings section*
+
+From this panel, you may configure:
+
+* Data Packing (*NONE*, *BYTE*, *SHORT*, *INT*)
+* Variable attributes
+* NetCDF4-Classic output specific parameters (they will be taken into account only in case the format specified in the WCS 2.0 GetCoverage request is application/x-netcdf4).
+
+Layer configuration
+++++++++++++++++++++
+With version 2.8 of GeoServer it is also possible to add more customization to the layer in order to specify some properties of the NetCDF Output.
+You will notice an additional tab to the layer configuration.
+
+.. figure:: netcdfoutpanel.png
+   :align: center
+
+   *NetCDF Output settings panel*
+
+.. note:: This tab will be initialized with the parameters defined in the *Global Settings* page. 
+   
+From this panel, you may configure the same parameters as for the global panel and also other 2 Layer-specific parameters:
+
+* Output variable name. 
+* variable's unit of measure.
+
+.. note:: This panel will be available for Raster data only.
+
+CF Standard names support
+^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Note that the output name can also be chosen from the list of CF Standard names.
+Check `CF standard names <http://cfconventions.org/standard-names.html>`_ page for more info on it.
+
+Once you click on the dropdown, you may choose from the set of available standard names.
+
+.. figure:: cfnames.png
+   :align: center
+
+   *NetCDF CF Standard names list*
+
+Note that once you specify the standard name, the unit will be automatically configured, using the canonical unit associated with that standard name.
+
+.. figure:: cfunit.png
+   :align: center
+
+   *NetCDF CF Standard names and canonical unit*
+
+The list of standard names is populated by taking the entries from a standard name table xml.
+At time of writing, a valid example is available `Here <http://cfconventions.org/Data/cf-standard-names/27/src/cf-standard-name-table.xml>`_
+
+You have three ways to provide it to GeoServer.
+
+#. Add a ``-DNETCDF_STANDARD_TABLE=/path/to/the/table/tablename.xml`` property to the startup script.
+#. Put that xml file within the ``NETCDF_DATA_DIR`` which is the folder where all NetCDF auxiliary files are located. (`More info <http://geoserver.geo-solutions.it/multidim/en/mosaic_config/netcdf_mosaic.html#customizing-netcdf-ancillary-files-location>`_)
+#. Put that xml file within the ``GEOSERVER_DATA_DIR``.
+
+.. note:: Note that for the 2nd and 3rd case, file name must be **cf-standard-name-table.xml**.
diff --git a/doc/en/user/source/community/netcdf-out/index.rst b/doc/en/user/source/extensions/netcdf-out/index.rst~
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/index.rst
rename to doc/en/user/source/extensions/netcdf-out/index.rst~
diff --git a/doc/en/user/source/community/netcdf-out/nc4.rst b/doc/en/user/source/extensions/netcdf-out/nc4.rst
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/nc4.rst
rename to doc/en/user/source/extensions/netcdf-out/nc4.rst
diff --git a/doc/en/user/source/community/netcdf-out/netcdfoutpanel.png b/doc/en/user/source/extensions/netcdf-out/netcdfoutpanel.png
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/netcdfoutpanel.png
rename to doc/en/user/source/extensions/netcdf-out/netcdfoutpanel.png
diff --git a/doc/en/user/source/community/netcdf-out/netcdfoutsettings.png b/doc/en/user/source/extensions/netcdf-out/netcdfoutsettings.png
similarity index 100%
rename from doc/en/user/source/community/netcdf-out/netcdfoutsettings.png
rename to doc/en/user/source/extensions/netcdf-out/netcdfoutsettings.png
diff --git a/doc/en/user/source/community/netcdf/netcdf.rst b/doc/en/user/source/extensions/netcdf/netcdf.rst
similarity index 98%
rename from doc/en/user/source/community/netcdf/netcdf.rst
rename to doc/en/user/source/extensions/netcdf/netcdf.rst
index cbf4074d88..494956988d 100644
--- a/doc/en/user/source/community/netcdf/netcdf.rst
+++ b/doc/en/user/source/extensions/netcdf/netcdf.rst
@@ -5,6 +5,7 @@ NetCDF
 
 Adding a NetCDF data store
 --------------------------
+To add a NetCDF data store the user must go to :guilabel:`Stores --> Add New Store --> NetCDF`.
 
 .. figure:: netcdfcreate.png
    :align: center
diff --git a/doc/en/user/source/extensions/netcdf/netcdf.rst~ b/doc/en/user/source/extensions/netcdf/netcdf.rst~
new file mode 100644
index 0000000000..47ef1daf11
--- /dev/null
+++ b/doc/en/user/source/extensions/netcdf/netcdf.rst~
@@ -0,0 +1,97 @@
+.. _netcdf:
+
+NetCDF
+======
+
+Adding a NetCDF data store
+--------------------------
+To add a NetCDF data store the user must go to :guilabel:`Stores --> Add New Store --> GRIB`.
+
+.. figure:: netcdfcreate.png
+   :align: center
+
+   *NetCDF in the list of raster data stores*
+
+Configuring a NetCDF data store
+-------------------------------
+
+.. figure:: netcdfconfigure.png
+   :align: center
+
+   *Configuring a NetCDF data store*
+
+.. list-table::
+   :widths: 20 80
+
+   * - **Option**
+     - **Description**
+   * - ``Workspace``
+     - 
+   * - ``Data Source Name``
+     - 
+   * - ``Description``
+     - 
+   * - ``Enabled``
+     -  
+   * - ``URL``
+     - 
+	 
+Supporting Custom NetCDF Coordinate Reference Systems
+-----------------------------------------------------
+Starting with GeoServer 2.8.x, NetCDF related modules (both NetCDF/GRIB store, imageMosaic store based on NetCDF/GRIB dataset and NetCDF output format) allow to support custom Coordinate Reference Systems and Projections.
+As reported in the `NetCDF CF documentation, Grid mappings section <http://cfconventions.org/Data/cf-conventions/cf-conventions-1.6/build/cf-conventions.html#appendix-grid-mappings>`_
+a NetCDF CF file may expose gridMapping attributes to describe the underlying projection. 
+
+The GeoTools NetCDF machinery will parse the attributes (if any) contained in the underlying NetCDF dataset to setup an OGC CoordinateReferenceSystem object.
+Once created, a CRS lookup will be made to identify a custom EPSG (if any) defined by the user to match that Projection.
+In case the NetCDF gridMapping is basically the same of the one exposed as EPSG entry but the matching doesn't happen, you may consider tuning the comparison tolerance: See :ref:`crs_configure`, *Increase Comparison Tolerance section*.
+
+User defined NetCDF Coordinate Reference Systems with their custom EPSG need to be provided in :file:`user_projections\\netcdf.projections.properties` file inside your data directory (you have to create that file if missing).  
+
+A sample entry in that property file could look like this:
+
+      971801=PROJCS[""lambert_conformal_conic_1SP"", GEOGCS[""unknown"", DATUM[""unknown"", SPHEROID[""unknown"", 6371229.0, 0.0]], PRIMEM[""Greenwich"", 0.0], UNIT[""degree"", 0.017453292519943295], AXIS[""Geodetic longitude"", EAST], AXIS[""Geodetic latitude"", NORTH]], PROJECTION[""Lambert_Conformal_Conic_1SP""], PARAMETER[""central_meridian"", -95.0], PARAMETER[""latitude_of_origin"", 25.0], PARAMETER[""scale_factor"", 1.0], PARAMETER[""false_easting"", 0.0], PARAMETER[""false_northing"", 0.0], UNIT[""m"", 1.0], AXIS[""Easting"", EAST], AXIS[""Northing"", NORTH], AUTHORITY[""EPSG"",""971801""]]
+
+.. note:: Note the ""unknown"" names for GEOGCS, DATUM and SPHEROID elements. This is how the underlying NetCDF machinery will name custom elements.
+.. note:: Note the number that precedes the WKT. This will determine the EPSG code.  So in this example, the EPSG code is 971801.
+.. note:: When dealing with records indexing based on PostGIS, make sure the custom code isn't greater than 998999. (It tooks us a while to understand why we had some issues with custom codes using PostGIS as granules index. Some more details, `here <http://gis.stackexchange.com/questions/145017/why-is-there-an-upper-limit-to-the-srid-value-in-the-spatial-ref-sys-table-in-po>`_)
+.. note:: If a parameter like ""central_meridian"" or ""longitude_of_origin"" or other longitude related value is outside the range [-180,180], make sure you adjust this value to belong to the standard range. As an instance a Central Meridian of 265 should be set as -95.
+ 
+You may specify further custom NetCDF EPSG references by adding more lines to that file. 
+
+#. Insert the code WKT for the projection at the end of the file (on a single line or with backslash characters)::
+     
+      971802=PROJCS[""lambert_conformal_conic_2SP"", \
+	    GEOGCS[""unknown"", \
+		  DATUM[""unknown"", \
+		    SPHEROID[""unknown"", 6377397.0, 299.15550239234693]], \
+	      PRIMEM[""Greenwich"", 0.0], \
+		  UNIT[""degree"", 0.017453292519943295], \
+		  AXIS[""Geodetic longitude"", EAST], \
+		  AXIS[""Geodetic latitude"", NORTH]], \
+		PROJECTION[""Lambert_Conformal_Conic_2SP""], \
+		PARAMETER[""central_meridian"", 13.333333015441895], \
+		PARAMETER[""latitude_of_origin"", 46.0], \
+		PARAMETER[""standard_parallel_1"", 46.0], \
+		PARAMETER[""standard_parallel_2"", 49], \
+		PARAMETER[""false_easting"", 0.0], \
+		PARAMETER[""false_northing"", 0.0], 
+		UNIT[""m"", 1.0], \
+		AXIS[""Easting"", EAST], \
+		AXIS[""Northing"", NORTH], \
+		AUTHORITY[""EPSG"",""971802""]]
+
+#. Save the file.
+
+#. Restart GeoServer.
+
+#. Verify that the CRS has been properly parsed by navigating to the :ref:`srs_list` page in the :ref:`web_admin`.
+
+#. If the projection wasn't listed, examine the logs for any errors.
+
+Specify an external file through system properties
+--------------------------------------------------
+You may also specify the NetCDF projections definition file by setting a **Java system property** which links to the specified file.
+As an instance: :file:`-Dnetcdf.projections.file=/full/path/of/the/customfile.properties`
+
+
diff --git a/doc/en/user/source/community/netcdf/netcdfconfigure.png b/doc/en/user/source/extensions/netcdf/netcdfconfigure.png
similarity index 100%
rename from doc/en/user/source/community/netcdf/netcdfconfigure.png
rename to doc/en/user/source/extensions/netcdf/netcdfconfigure.png
diff --git a/doc/en/user/source/community/netcdf/netcdfcreate.png b/doc/en/user/source/extensions/netcdf/netcdfcreate.png
similarity index 100%
rename from doc/en/user/source/community/netcdf/netcdfcreate.png
rename to doc/en/user/source/extensions/netcdf/netcdfcreate.png
diff --git a/src/community/pom.xml b/src/community/pom.xml
index cf7e01edb1..7fbb8725c2 100644
--- a/src/community/pom.xml
+++ b/src/community/pom.xml
@@ -181,11 +181,8 @@
         <module>script</module>
         <module>wms-eo</module>
         <module>colormap</module>
-        <module>netcdf</module>
-        <module>netcdf-out</module>
         <module>mbtiles</module>
         <module>geopkg</module>
-        <module>grib</module>
         <module>pgraster</module>
         <module>dyndimension</module>
         <module>rest-ext</module>
@@ -263,24 +260,6 @@
       </modules>
     </profile>
     <profile>
-      <id>netcdf-out</id>
-      <activation>
-        <property><name>netcdf-out</name></property>
-      </activation> 
-      <modules>
-        <module>netcdf-out</module>
-      </modules>
-    </profile>
-    <profile>
-      <id>netcdf</id>
-      <activation>
-        <property><name>netcdf</name></property>
-      </activation> 
-      <modules>
-        <module>netcdf</module>
-      </modules>
-    </profile>
-        <profile>
       <id>pgraster</id>
       <activation>
         <property><name>pgraster</name></property>
@@ -337,15 +316,6 @@
       <modules>
         <module>geoserver-sync</module>
       </modules>
-    </profile>
-	<profile>
-      <id>grib</id>
-	  <activation>
-        <property><name>grib</name></property>
-      </activation>
-      <modules>
-        <module>grib</module>
-      </modules>
     </profile>
     <profile>
       <id>dyndimension</id>
diff --git a/src/community/grib/pom.xml b/src/extension/grib/pom.xml
similarity index 81%
rename from src/community/grib/pom.xml
rename to src/extension/grib/pom.xml
index 7390dce81d..1a494c3152 100644
--- a/src/community/grib/pom.xml
+++ b/src/extension/grib/pom.xml
@@ -2,11 +2,12 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>
    <parent>
-      <groupId>org.geoserver</groupId>
-      <artifactId>community</artifactId>
-      <version>2.9-SNAPSHOT</version>
-   </parent>
-   <groupId>org.geoserver.community</groupId>
+    <groupId>org.geoserver</groupId>
+    <artifactId>extension</artifactId>
+    <version>2.9-SNAPSHOT</version>
+  </parent>
+
+   <groupId>org.geoserver.extension</groupId>
    <artifactId>gs-grib</artifactId>
    <name>GRIB Coverage Format</name>
    <packaging>jar</packaging>
@@ -43,6 +44,13 @@
          <classifier>tests</classifier>
          <scope>test</scope>
       </dependency>
+      <dependency>
+         <groupId>org.geoserver.web</groupId>
+         <artifactId>gs-web-core</artifactId>
+         <version>${project.version}</version>
+         <classifier>tests</classifier>
+         <scope>test</scope>
+      </dependency>
       <dependency>
          <groupId>com.mockrunner</groupId>
          <artifactId>mockrunner</artifactId>
diff --git a/src/community/grib/src/main/java/applicationContext.xml b/src/extension/grib/src/main/java/applicationContext.xml
similarity index 100%
rename from src/community/grib/src/main/java/applicationContext.xml
rename to src/extension/grib/src/main/java/applicationContext.xml
diff --git a/src/community/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java b/src/extension/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java
similarity index 100%
rename from src/community/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java
rename to src/extension/grib/src/main/java/org/geoserver/web/data/store/raster/GribRasterEditPanel.java
diff --git a/src/community/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java b/src/extension/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java
similarity index 100%
rename from src/community/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java
rename to src/extension/grib/src/test/java/org/geoserver/catalog/CoverageViewReaderTest.java
diff --git a/src/community/grib/src/test/java/org/geoserver/catalog/currents.zip b/src/extension/grib/src/test/java/org/geoserver/catalog/currents.zip
similarity index 100%
rename from src/community/grib/src/test/java/org/geoserver/catalog/currents.zip
rename to src/extension/grib/src/test/java/org/geoserver/catalog/currents.zip
diff --git a/src/community/grib/src/test/java/org/geoserver/grib/GribDataTest.java b/src/extension/grib/src/test/java/org/geoserver/grib/GribDataTest.java
similarity index 100%
rename from src/community/grib/src/test/java/org/geoserver/grib/GribDataTest.java
rename to src/extension/grib/src/test/java/org/geoserver/grib/GribDataTest.java
diff --git a/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java b/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java
new file mode 100644
index 0000000000..4fadcdc58e
--- /dev/null
+++ b/src/extension/grib/src/test/java/org/geoserver/web/data/store/raster/GribRasterEditPanelTest.java
@@ -0,0 +1,56 @@
+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved
+ * This code is licensed under the GPL 2.0 license, available at the root
+ * application directory.
+ */
+package org.geoserver.web.data.store.raster;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+
+import javax.xml.namespace.QName;
+
+import org.apache.wicket.Component;
+import org.apache.wicket.Page;
+import org.geoserver.catalog.CoverageStoreInfo;
+import org.geoserver.data.test.MockData;
+import org.geoserver.data.test.SystemTestData;
+import org.geoserver.grib.GribDataTest;
+import org.geoserver.web.GeoServerWicketTestSupport;
+import org.geoserver.web.data.store.CoverageStoreEditPage;
+import org.geoserver.web.data.store.CoverageStoreNewPage;
+import org.geotools.coverage.io.grib.GRIBFormat;
+import org.junit.Test;
+
+public class GribRasterEditPanelTest extends GeoServerWicketTestSupport {
+    
+    
+    protected static QName SAMPLE_GRIB = new QName(MockData.SF_URI, ""sampleGrib"",
+            MockData.SF_PREFIX);
+
+    @Override
+    protected void setUpTestData(SystemTestData testData) throws Exception {
+        super.setUpTestData(testData);
+        testData.setUpRasterLayer(SAMPLE_GRIB, ""test-data/sampleGrib.grb2"", null, null, GribDataTest.class);
+    }
+    
+    @Test
+    public void testGribCreate() throws Exception {
+        Page page = tester.startPage(new CoverageStoreNewPage(new GRIBFormat().getName()));
+        tester.assertNoErrorMessage();
+        print(page, true, true);
+        Component editor = tester.getComponentFromLastRenderedPage(""rasterStoreForm:parametersPanel"");
+        assertThat(editor, instanceOf(GribRasterEditPanel.class));
+    }
+    
+    @Test
+    public void testGribEdit() throws Exception {
+        CoverageStoreInfo store = getCatalog().getCoverageStoreByName(SAMPLE_GRIB.getPrefix(), SAMPLE_GRIB.getLocalPart());
+        assertNotNull(store);
+        Page page = tester.startPage(new CoverageStoreEditPage(store));
+        tester.assertNoErrorMessage();
+        print(page, true, true);
+        Component editor = tester.getComponentFromLastRenderedPage(""rasterStoreForm:parametersPanel"");
+        assertThat(editor, instanceOf(GribRasterEditPanel.class));
+    }
+}
diff --git a/src/community/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2 b/src/extension/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2
similarity index 100%
rename from src/community/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2
rename to src/extension/grib/src/test/resources/org/geoserver/grib/test-data/sampleGrib.grb2
diff --git a/src/community/netcdf-out/pom.xml b/src/extension/netcdf-out/pom.xml
similarity index 95%
rename from src/community/netcdf-out/pom.xml
rename to src/extension/netcdf-out/pom.xml
index 4bff8a62d8..a5afe05cf4 100644
--- a/src/community/netcdf-out/pom.xml
+++ b/src/extension/netcdf-out/pom.xml
@@ -19,13 +19,13 @@
       <url>https://artifacts.unidata.ucar.edu/content/repositories/unidata/</url>
     </repository>
    </repositories>
- <parent>
-  <groupId>org.geoserver</groupId>
-  <artifactId>community</artifactId>
-  <version>2.9-SNAPSHOT</version>
- </parent>
- 
- <groupId>org.geoserver.community</groupId>
+  <parent>
+    <groupId>org.geoserver</groupId>
+    <artifactId>extension</artifactId>
+    <version>2.9-SNAPSHOT</version>
+  </parent>
+
+ <groupId>org.geoserver.extension</groupId>
  <artifactId>gs-netcdf-out</artifactId>
  <packaging>jar</packaging>
  <name>WCS NetCDF output Module</name>
diff --git a/src/community/netcdf-out/src/main/java/applicationContext.xml b/src/extension/netcdf-out/src/main/java/applicationContext.xml
similarity index 100%
rename from src/community/netcdf-out/src/main/java/applicationContext.xml
rename to src/extension/netcdf-out/src/main/java/applicationContext.xml
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCRSWriter.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFCoverageResponseDelegate.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFDimensionsManager.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutInitializer.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java b/src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/wcs/responses/NetCDFOutputManager.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/DataPacking.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/GlobalAttributeXStreamInitializer.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFContainerXStreamInitializer.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.html
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanel.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.html
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFPanel.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/NetCDFSettingsContainer.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFLayerSettingsContainer.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutEditTabPanelInfo.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.html
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutSettingsEditor.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.html
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanel.java
diff --git a/src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java b/src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java
similarity index 100%
rename from src/community/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java
rename to src/extension/netcdf-out/src/main/java/org/geoserver/web/netcdf/layer/NetCDFParserBean.java
diff --git a/src/community/netcdf-out/src/main/resources/GeoServerApplication.properties b/src/extension/netcdf-out/src/main/resources/GeoServerApplication.properties
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/GeoServerApplication.properties
rename to src/extension/netcdf-out/src/main/resources/GeoServerApplication.properties
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsAll.xsd
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsCommon.xsd
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsDescribeCoverage.xsd
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCapabilities.xsd
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsGetCoverage.xsd
diff --git a/src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd b/src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd
similarity index 100%
rename from src/community/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd
rename to src/extension/netcdf-out/src/main/resources/schemas/wcs/2.0/wcsgs.xsd
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/2DLatLonCoverage.zip
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStore.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/MultiDimDataStoreFactory.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSMultiDimSubsetTest.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFBaseTest.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFMosaicTest.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSNetCDFTest.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/WCSResponseInterceptor.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/gom.zip
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/lambertmosaic.zip
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/netcdf.projections.properties
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/pol.zip
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/reduced-cf-standard-name-table.xml
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip b/src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip
rename to src/extension/netcdf-out/src/test/java/org/geoserver/wcs2_0/visibility.zip
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/NetCDFOutSettingsPanelTest.java
diff --git a/src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java b/src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java
similarity index 100%
rename from src/community/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java
rename to src/extension/netcdf-out/src/test/java/org/geoserver/web/netcdf/layer/NetCDFOutTabPanelTest.java
diff --git a/src/community/netcdf-out/src/test/resources/applicationContext.xml b/src/extension/netcdf-out/src/test/resources/applicationContext.xml
similarity index 100%
rename from src/community/netcdf-out/src/test/resources/applicationContext.xml
rename to src/extension/netcdf-out/src/test/resources/applicationContext.xml
diff --git a/src/community/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml b/src/extension/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml
similarity index 100%
rename from src/community/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml
rename to src/extension/netcdf-out/src/test/resources/trimming/requestGetCoverageTimeElevationTrimmingXML.xml
diff --git a/src/community/netcdf/pom.xml b/src/extension/netcdf/pom.xml
similarity index 80%
rename from src/community/netcdf/pom.xml
rename to src/extension/netcdf/pom.xml
index 06b96378e1..41a8383e50 100644
--- a/src/community/netcdf/pom.xml
+++ b/src/extension/netcdf/pom.xml
@@ -10,11 +10,11 @@
 
   <parent>
     <groupId>org.geoserver</groupId>
-    <artifactId>community</artifactId>
+    <artifactId>extension</artifactId>
     <version>2.9-SNAPSHOT</version>
   </parent>
 
-  <groupId>org.geoserver.community</groupId>
+  <groupId>org.geoserver.extension</groupId>
   <artifactId>gs-netcdf</artifactId>
   <packaging>jar</packaging>
   <name>NetCDF Coverage format</name>
@@ -47,12 +47,25 @@
          </exclusion>
        </exclusions>
     </dependency>
+    <dependency>
+      <groupId>org.geotools</groupId>
+      <artifactId>gt-sample-data</artifactId>
+      <version>${gt.version}</version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>org.geoserver</groupId>
       <artifactId>gs-main</artifactId>
       <classifier>tests</classifier>
       <scope>test</scope>
     </dependency>
+    <dependency>
+       <groupId>org.geoserver.web</groupId>
+       <artifactId>gs-web-core</artifactId>
+       <version>${project.version}</version>
+       <classifier>tests</classifier>
+       <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>com.mockrunner</groupId>
       <artifactId>mockrunner</artifactId>
diff --git a/src/community/netcdf/src/main/java/applicationContext.xml b/src/extension/netcdf/src/main/java/applicationContext.xml
similarity index 100%
rename from src/community/netcdf/src/main/java/applicationContext.xml
rename to src/extension/netcdf/src/main/java/applicationContext.xml
diff --git a/src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java b/src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java
similarity index 100%
rename from src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java
rename to src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/NetCDFCRSOverridingAuthorityFactory.java
diff --git a/src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties b/src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties
similarity index 100%
rename from src/community/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties
rename to src/extension/netcdf/src/main/java/org/geoserver/crs/netcdf/override_epsg.netcdf.properties
diff --git a/src/community/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java b/src/extension/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java
similarity index 100%
rename from src/community/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java
rename to src/extension/netcdf/src/main/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanel.java
diff --git a/src/community/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory b/src/extension/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory
similarity index 100%
rename from src/community/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory
rename to src/extension/netcdf/src/main/resources/META-INF/services/org.opengis.referencing.crs.CRSAuthorityFactory
diff --git a/src/community/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java
similarity index 100%
rename from src/community/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java
rename to src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFCRSOverridingAuthorityFactoryTest.java
diff --git a/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java
new file mode 100644
index 0000000000..4cdbc74079
--- /dev/null
+++ b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/NetCDFDataTest.java
@@ -0,0 +1,71 @@
+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved
+ * This code is licensed under the GPL 2.0 license, available at the root
+ * application directory.
+ */
+package org.geoserver.netcdf;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import javax.imageio.spi.ImageReaderSpi;
+
+import junit.framework.TestCase;
+
+import org.geotools.coverage.grid.GridCoverage2D;
+import org.geotools.coverage.grid.io.AbstractGridFormat;
+import org.geotools.coverage.io.netcdf.NetCDFFormat;
+import org.geotools.coverage.io.netcdf.NetCDFReader;
+import org.geotools.imageio.netcdf.NetCDFImageReaderSpi;
+import org.geotools.test.TestData;
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Simple test class for checking if netcdf data are supported.
+ */
+public class NetCDFDataTest extends TestCase {
+
+    @Test
+    public void testFormatSupported() throws FileNotFoundException, IOException{
+
+        // Selection of the input file
+        File file = TestData.file(this, ""2DLatLonCoverage.nc"");
+        // Check if the grib file is accepted by the NetCDF driver
+        AbstractGridFormat format = new NetCDFFormat();
+        Assert.assertTrue(format.accepts(file));
+        // Check if the netcdf reader spi object can read the input file
+        ImageReaderSpi spi = new NetCDFImageReaderSpi();
+        Assert.assertTrue(spi.canDecodeInput(file));
+    }
+    
+    @Test
+    public void testImage() throws FileNotFoundException, IOException {
+        // Selection of the input file
+        File file = TestData.file(this, ""2DLatLonCoverage.nc"");
+        // Creation of a NetCDF reader for the data
+        NetCDFReader reader = new NetCDFReader(file, null);
+        Assert.assertNotNull(reader);
+
+        try {
+            // Selection of the coverage names
+            String[] coverageNames = reader.getGridCoverageNames();
+            // Check if almost one coverage is present
+            Assert.assertNotNull(coverageNames);
+            Assert.assertTrue(coverageNames.length > 0);
+            // Reading of one coverage
+            GridCoverage2D coverage = reader.read(coverageNames[0], null);
+            // Check if the coverage exists
+            Assert.assertNotNull(coverage);
+        } finally {
+            // Reader disposal
+            if (reader != null) {
+                try {
+                    reader.dispose();
+                } catch (Throwable t) {
+                    // nothing
+                }
+            }
+        }
+    }
+}
diff --git a/src/community/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties b/src/extension/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties
similarity index 100%
rename from src/community/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties
rename to src/extension/netcdf/src/test/java/org/geoserver/netcdf/netcdf.projections.properties
diff --git a/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java b/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java
new file mode 100644
index 0000000000..8e4afd7bed
--- /dev/null
+++ b/src/extension/netcdf/src/test/java/org/geoserver/web/data/store/raster/NetCDFRasterEditPanelTest.java
@@ -0,0 +1,56 @@
+/* (c) 2015 Open Source Geospatial Foundation - all rights reserved
+ * This code is licensed under the GPL 2.0 license, available at the root
+ * application directory.
+ */
+package org.geoserver.web.data.store.raster;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+
+import javax.xml.namespace.QName;
+
+import org.apache.wicket.Component;
+import org.apache.wicket.Page;
+import org.geoserver.catalog.CoverageStoreInfo;
+import org.geoserver.data.test.MockData;
+import org.geoserver.data.test.SystemTestData;
+import org.geoserver.netcdf.NetCDFDataTest;
+import org.geoserver.web.GeoServerWicketTestSupport;
+import org.geoserver.web.data.store.CoverageStoreEditPage;
+import org.geoserver.web.data.store.CoverageStoreNewPage;
+import org.geotools.coverage.io.netcdf.NetCDFFormat;
+import org.junit.Test;
+
+public class NetCDFRasterEditPanelTest extends GeoServerWicketTestSupport {
+    
+    
+    protected static QName SAMPLE_NETCDF = new QName(MockData.SF_URI, ""sampleNetCDF"",
+            MockData.SF_PREFIX);
+
+    @Override
+    protected void setUpTestData(SystemTestData testData) throws Exception {
+        super.setUpTestData(testData);
+        testData.setUpRasterLayer(SAMPLE_NETCDF, ""test-data/2DLatLonCoverage.nc"", null, null, NetCDFDataTest.class);
+    }
+    
+    @Test
+    public void testNetCDFCreate() throws Exception {
+        Page page = tester.startPage(new CoverageStoreNewPage(new NetCDFFormat().getName()));
+        tester.assertNoErrorMessage();
+        print(page, true, true);
+        Component editor = tester.getComponentFromLastRenderedPage(""rasterStoreForm:parametersPanel"");
+        assertThat(editor, instanceOf(NetCDFRasterEditPanel.class));
+    }
+    
+    @Test
+    public void testNetCDFEdit() throws Exception {
+        CoverageStoreInfo store = getCatalog().getCoverageStoreByName(SAMPLE_NETCDF.getPrefix(), SAMPLE_NETCDF.getLocalPart());
+        assertNotNull(store);
+        Page page = tester.startPage(new CoverageStoreEditPage(store));
+        tester.assertNoErrorMessage();
+        print(page, true, true);
+        Component editor = tester.getComponentFromLastRenderedPage(""rasterStoreForm:parametersPanel"");
+        assertThat(editor, instanceOf(NetCDFRasterEditPanel.class));
+    }
+}
diff --git a/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc b/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc
new file mode 100644
index 0000000000..29b6feec3e
Binary files /dev/null and b/src/extension/netcdf/src/test/resources/org/geoserver/netcdf/test-data/2DLatLonCoverage.nc differ
diff --git a/src/extension/pom.xml b/src/extension/pom.xml
index b13015f985..a25d7e3e7f 100644
--- a/src/extension/pom.xml
+++ b/src/extension/pom.xml
@@ -285,6 +285,36 @@
         <module>importer</module>
       </modules>
     </profile>
+    
+    <profile>
+      <id>grib</id>
+	  <activation>
+        <property><name>grib</name></property>
+      </activation>
+      <modules>
+        <module>grib</module>
+      </modules>
+    </profile>
+
+    <profile>
+      <id>netcdf</id>
+",promoting multidim modules to extension,"""Move GRIB and NetCDF modules from community to extension""","Moved Grib and NetCDF extensions from community to extension module

This commit message summarizes the changes made in the provided diff. It mentions that the Grib and NetCDF extensions have been moved from the community module to the extension module.","The commit message could be: ""Move grib extension from community to extension module and update documentation""

The commit involves moving the grib extension from the community module to the extension module, updating the pom.xml file accordingly, and updating the documentation to reflect the changes. The changes affect the grib, netcdf, and netcdf-out extensions.","""Relocated GRIB and NetCDF modules from community to extension, updated documentation paths and restructuring profiles accordingly.""",Model 3
"diff --git a/android/build.gradle b/android/build.gradle
index 333d69c..28e43a9 100755
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -1,24 +1,27 @@
 buildscript {
   repositories {
     jcenter()
+    maven {
+      url 'https://maven.google.com'
+    }
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:1.2.3'
+    classpath 'com.android.tools.build:gradle:3.0.0'
   }
 }
 
 apply plugin: 'com.android.library'
 
 android {
-  compileSdkVersion 25
-  buildToolsVersion ""25.0.2""
+  compileSdkVersion 26
+    buildToolsVersion ""26.0.2""
 
   defaultConfig {
     minSdkVersion 16
-    targetSdkVersion 22
+    targetSdkVersion 26
     versionCode 1
-    versionName ""1.0""
+    versionName ""1.0.0""
   }
   lintOptions {
     abortOnError false
@@ -28,10 +31,18 @@ android {
 
 repositories {
   mavenCentral()
+  maven {
+   url 'https://maven.google.com'
+  }
+  maven { url ""https://jitpack.io"" }
 }
 
 dependencies {
-  compile ""com.facebook.react:react-native:0.19.+""
+  compile 'com.facebook.react:react-native:+'
   compile ""com.google.zxing:core:3.2.1""
   compile ""com.drewnoakes:metadata-extractor:2.9.1""
+  compile 'com.google.android.gms:play-services-vision:+'
+  compile ""com.android.support:exifinterface:26.0.2""
+
+  compile 'com.github.react-native-community:cameraview:df60b07573'
 }
diff --git a/android/gradle/wrapper/gradle-wrapper.jar b/android/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..13372ae
Binary files /dev/null and b/android/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..bdaabfa
--- /dev/null
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Sun Dec 31 13:43:56 BRST 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/android/gradlew b/android/gradlew
new file mode 100755
index 0000000..9d82f78
--- /dev/null
+++ b/android/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""""
+
+APP_NAME=""Gradle""
+APP_BASE_NAME=`basename ""$0""`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=""maximum""
+
+warn ( ) {
+    echo ""$*""
+}
+
+die ( ) {
+    echo
+    echo ""$*""
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case ""`uname`"" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG=""$0""
+# Need this for relative symlinks.
+while [ -h ""$PRG"" ] ; do
+    ls=`ls -ld ""$PRG""`
+    link=`expr ""$ls"" : '.*-> \(.*\)$'`
+    if expr ""$link"" : '/.*' > /dev/null; then
+        PRG=""$link""
+    else
+        PRG=`dirname ""$PRG""`""/$link""
+    fi
+done
+SAVED=""`pwd`""
+cd ""`dirname \""$PRG\""`/"" >/dev/null
+APP_HOME=""`pwd -P`""
+cd ""$SAVED"" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n ""$JAVA_HOME"" ] ; then
+    if [ -x ""$JAVA_HOME/jre/sh/java"" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=""$JAVA_HOME/jre/sh/java""
+    else
+        JAVACMD=""$JAVA_HOME/bin/java""
+    fi
+    if [ ! -x ""$JAVACMD"" ] ; then
+        die ""ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+    fi
+else
+    JAVACMD=""java""
+    which java >/dev/null 2>&1 || die ""ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation.""
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ ""$cygwin"" = ""false"" -a ""$darwin"" = ""false"" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ ""$MAX_FD"" = ""maximum"" -o ""$MAX_FD"" = ""max"" ] ; then
+            MAX_FD=""$MAX_FD_LIMIT""
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn ""Could not set maximum file descriptor limit: $MAX_FD""
+        fi
+    else
+        warn ""Could not query maximum file descriptor limit: $MAX_FD_LIMIT""
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS=""$GRADLE_OPTS \""-Xdock:name=$APP_NAME\"" \""-Xdock:icon=$APP_HOME/media/gradle.icns\""""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed ""$APP_HOME""`
+    CLASSPATH=`cygpath --path --mixed ""$CLASSPATH""`
+    JAVACMD=`cygpath --unix ""$JAVACMD""`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS=""$ROOTDIRS$SEP$dir""
+        SEP=""|""
+    done
+    OURCYGPATTERN=""(^($ROOTDIRS))""
+    # Add a user-defined pattern to the cygpath arguments
+    if [ ""$GRADLE_CYGPATTERN"" != """" ] ; then
+        OURCYGPATTERN=""$OURCYGPATTERN|($GRADLE_CYGPATTERN)""
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in ""$@"" ; do
+        CHECK=`echo ""$arg""|egrep -c ""$OURCYGPATTERN"" -`
+        CHECK2=`echo ""$arg""|egrep -c ""^-""`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed ""$arg""`
+        else
+            eval `echo args$i`=""\""$arg\""""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- ""$args0"" ;;
+        (2) set -- ""$args0"" ""$args1"" ;;
+        (3) set -- ""$args0"" ""$args1"" ""$args2"" ;;
+        (4) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ;;
+        (5) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ;;
+        (6) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ;;
+        (7) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ;;
+        (8) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ;;
+        (9) set -- ""$args0"" ""$args1"" ""$args2"" ""$args3"" ""$args4"" ""$args5"" ""$args6"" ""$args7"" ""$args8"" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=(""$@"")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]=""-Dorg.gradle.appname=$APP_BASE_NAME""
+
+exec ""$JAVACMD"" ""${JVM_OPTS[@]}"" -classpath ""$CLASSPATH"" org.gradle.wrapper.GradleWrapperMain ""$@""
diff --git a/android/gradlew.bat b/android/gradlew.bat
new file mode 100644
index 0000000..aec9973
--- /dev/null
+++ b/android/gradlew.bat
@@ -0,0 +1,90 @@
+@if ""%DEBUG%"" == """" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if ""%OS%""==""Windows_NT"" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if ""%DIRNAME%"" == """" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if ""%ERRORLEVEL%"" == ""0"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:""=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist ""%JAVA_EXE%"" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not ""%OS%"" == ""Windows_NT"" goto win9xME_args
+if ""%@eval[2+2]"" == ""4"" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if ""x%~1"" == ""x"" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+""%JAVA_EXE%"" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% ""-Dorg.gradle.appname=%APP_BASE_NAME%"" -classpath ""%CLASSPATH%"" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if ""%ERRORLEVEL%""==""0"" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not """" == ""%GRADLE_EXIT_CONSOLE%"" exit 1
+exit /b 1
+
+:mainEnd
+if ""%OS%""==""Windows_NT"" endlocal
+
+:omega
diff --git a/android/src/main/java/org/reactnative/MutableImage.java b/android/src/main/java/org/reactnative/MutableImage.java
new file mode 100644
index 0000000..8d5fcc3
--- /dev/null
+++ b/android/src/main/java/org/reactnative/MutableImage.java
@@ -0,0 +1,272 @@
+package org.reactnative;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
+import android.media.ExifInterface;
+import android.util.Base64;
+import android.util.Log;
+
+import com.drew.imaging.ImageMetadataReader;
+import com.drew.imaging.ImageProcessingException;
+import com.drew.metadata.Directory;
+import com.drew.metadata.Metadata;
+import com.drew.metadata.MetadataException;
+import com.drew.metadata.Tag;
+import com.drew.metadata.exif.ExifIFD0Directory;
+import com.facebook.react.bridge.ReadableMap;
+
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+public class MutableImage {
+    private static final String TAG = ""RNCamera"";
+
+    private final byte[] originalImageData;
+    private Bitmap currentRepresentation;
+    private Metadata originalImageMetaData;
+    private boolean hasBeenReoriented = false;
+
+    public MutableImage(byte[] originalImageData) {
+        this.originalImageData = originalImageData;
+        this.currentRepresentation = toBitmap(originalImageData);
+    }
+
+    public void mirrorImage() throws ImageMutationFailedException {
+        Matrix m = new Matrix();
+
+        m.preScale(-1, 1);
+
+        Bitmap bitmap = Bitmap.createBitmap(
+                currentRepresentation,
+                0,
+                0,
+                currentRepresentation.getWidth(),
+                currentRepresentation.getHeight(),
+                m,
+                false
+        );
+
+        if (bitmap == null)
+            throw new ImageMutationFailedException(""failed to mirror"");
+
+        this.currentRepresentation = bitmap;
+    }
+
+    public void fixOrientation() throws ImageMutationFailedException {
+        try {
+            Metadata metadata = originalImageMetaData();
+
+            ExifIFD0Directory exifIFD0Directory = metadata.getFirstDirectoryOfType(ExifIFD0Directory.class);
+            if (exifIFD0Directory == null) {
+                return;
+            } else if (exifIFD0Directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)) {
+                int exifOrientation = exifIFD0Directory.getInt(ExifIFD0Directory.TAG_ORIENTATION);
+                if(exifOrientation != 1) {
+                    rotate(exifOrientation);
+                    exifIFD0Directory.setInt(ExifIFD0Directory.TAG_ORIENTATION, 1);
+                }
+            }
+        } catch (ImageProcessingException | IOException | MetadataException e) {
+            throw new ImageMutationFailedException(""failed to fix orientation"", e);
+        }
+    }
+
+    //see http://www.impulseadventure.com/photo/exif-orientation.html
+    private void rotate(int exifOrientation) throws ImageMutationFailedException {
+        final Matrix bitmapMatrix = new Matrix();
+        switch (exifOrientation) {
+            case 1:
+                return;//no rotation required
+            case 2:
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 3:
+                bitmapMatrix.postRotate(180);
+                break;
+            case 4:
+                bitmapMatrix.postRotate(180);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 5:
+                bitmapMatrix.postRotate(90);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 6:
+                bitmapMatrix.postRotate(90);
+                break;
+            case 7:
+                bitmapMatrix.postRotate(270);
+                bitmapMatrix.postScale(-1, 1);
+                break;
+            case 8:
+                bitmapMatrix.postRotate(270);
+                break;
+            default:
+                break;
+        }
+
+        Bitmap transformedBitmap = Bitmap.createBitmap(
+                currentRepresentation,
+                0,
+                0,
+                currentRepresentation.getWidth(),
+                currentRepresentation.getHeight(),
+                bitmapMatrix,
+                false
+        );
+
+        if (transformedBitmap == null)
+            throw new ImageMutationFailedException(""failed to rotate"");
+
+        this.currentRepresentation = transformedBitmap;
+        this.hasBeenReoriented = true;
+    }
+
+    private static Bitmap toBitmap(byte[] data) {
+        try {
+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
+            Bitmap photo = BitmapFactory.decodeStream(inputStream);
+            inputStream.close();
+            return photo;
+        } catch (IOException e) {
+            throw new IllegalStateException(""Will not happen"", e);
+        }
+    }
+
+    public String toBase64(int jpegQualityPercent) {
+        return Base64.encodeToString(toJpeg(currentRepresentation, jpegQualityPercent), Base64.DEFAULT);
+    }
+
+    public void writeDataToFile(File file, ReadableMap options, int jpegQualityPercent) throws IOException {
+        FileOutputStream fos = new FileOutputStream(file);
+        fos.write(toJpeg(currentRepresentation, jpegQualityPercent));
+        fos.close();
+
+        try {
+            ExifInterface exif = new ExifInterface(file.getAbsolutePath());
+
+            // copy original exif data to the output exif...
+            // unfortunately, this Android ExifInterface class doesn't understand all the tags so we lose some
+            for (Directory directory : originalImageMetaData().getDirectories()) {
+                for (Tag tag : directory.getTags()) {
+                    int tagType = tag.getTagType();
+                    Object object = directory.getObject(tagType);
+                    exif.setAttribute(tag.getTagName(), object.toString());
+                }
+            }
+
+            writeLocationExifData(options, exif);
+
+            if(hasBeenReoriented)
+                rewriteOrientation(exif);
+
+            exif.saveAttributes();
+        } catch (ImageProcessingException  | IOException e) {
+            Log.e(TAG, ""failed to save exif data"", e);
+        }
+    }
+
+    private void rewriteOrientation(ExifInterface exif) {
+        exif.setAttribute(ExifInterface.TAG_ORIENTATION, String.valueOf(ExifInterface.ORIENTATION_NORMAL));
+    }
+
+    private void writeLocationExifData(ReadableMap options, ExifInterface exif) {
+        if(!options.hasKey(""metadata""))
+            return;
+
+        ReadableMap metadata = options.getMap(""metadata"");
+        if (!metadata.hasKey(""location""))
+            return;
+
+        ReadableMap location = metadata.getMap(""location"");
+        if(!location.hasKey(""coords""))
+            return;
+
+        try {
+            ReadableMap coords = location.getMap(""coords"");
+            double latitude = coords.getDouble(""latitude"");
+            double longitude = coords.getDouble(""longitude"");
+
+            GPS.writeExifData(latitude, longitude, exif);
+        } catch (IOException e) {
+            Log.e(TAG, ""Couldn't write location data"", e);
+        }
+    }
+
+    private Metadata originalImageMetaData() throws ImageProcessingException, IOException {
+        if(this.originalImageMetaData == null) {//this is expensive, don't do it more than once
+            originalImageMetaData = ImageMetadataReader.readMetadata(
+                    new BufferedInputStream(new ByteArrayInputStream(originalImageData)),
+                    originalImageData.length
+            );
+        }
+        return originalImageMetaData;
+    }
+
+    private static byte[] toJpeg(Bitmap bitmap, int quality) throws OutOfMemoryError {
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, outputStream);
+
+        try {
+            return outputStream.toByteArray();
+        } finally {
+            try {
+                outputStream.close();
+            } catch (IOException e) {
+                Log.e(TAG, ""problem compressing jpeg"", e);
+            }
+        }
+    }
+
+    public static class ImageMutationFailedException extends Exception {
+        public ImageMutationFailedException(String detailMessage, Throwable throwable) {
+            super(detailMessage, throwable);
+        }
+
+        public ImageMutationFailedException(String detailMessage) {
+            super(detailMessage);
+        }
+    }
+
+    private static class GPS {
+        public static void writeExifData(double latitude, double longitude, ExifInterface exif) throws IOException {
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, toDegreeMinuteSecods(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE_REF, latitudeRef(latitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, toDegreeMinuteSecods(longitude));
+            exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF, longitudeRef(longitude));
+        }
+
+        private static String latitudeRef(double latitude) {
+            return latitude < 0.0d ? ""S"" : ""N"";
+        }
+
+        private static String longitudeRef(double longitude) {
+            return longitude < 0.0d ? ""W"" : ""E"";
+        }
+
+        private static String toDegreeMinuteSecods(double latitude) {
+            latitude = Math.abs(latitude);
+            int degree = (int) latitude;
+            latitude *= 60;
+            latitude -= (degree * 60.0d);
+            int minute = (int) latitude;
+            latitude *= 60;
+            latitude -= (minute * 60.0d);
+            int second = (int) (latitude * 1000.0d);
+
+            StringBuffer sb = new StringBuffer();
+            sb.append(degree);
+            sb.append(""/1,"");
+            sb.append(minute);
+            sb.append(""/1,"");
+            sb.append(second);
+            sb.append(""/1000,"");
+            return sb.toString();
+        }
+    }
+}
diff --git a/android/src/main/java/org/reactnative/camera/CameraModule.java b/android/src/main/java/org/reactnative/camera/CameraModule.java
new file mode 100644
index 0000000..90e0c1e
--- /dev/null
+++ b/android/src/main/java/org/reactnative/camera/CameraModule.java
@@ -0,0 +1,211 @@
+package org.reactnative.camera;
+
+import android.content.Context;
+
+import org.reactnative.facedetector.ExpoFaceDetector;
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableArray;
+import com.google.android.cameraview.AspectRatio;
+import com.google.zxing.BarcodeFormat;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import javax.annotation.Nullable;
+
+public class CameraModule extends ReactContextBaseJavaModule {
+  private static final String TAG = ""CameraModule"";
+
+  private static ReactApplicationContext mReactContext;
+
+//  private static ScopedContext mScopedContext;
+  static final int VIDEO_2160P = 0;
+  static final int VIDEO_1080P = 1;
+  static final int VIDEO_720P = 2;
+  static final int VIDEO_480P = 3;
+  static final int VIDEO_4x3 = 4;
+
+  public static final Map<String, Object> VALID_BARCODE_TYPES =
+      Collections.unmodifiableMap(new HashMap<String, Object>() {
+        {
+          put(""aztec"", BarcodeFormat.AZTEC.toString());
+          put(""ean13"", BarcodeFormat.EAN_13.toString());
+          put(""ean8"", BarcodeFormat.EAN_8.toString());
+          put(""qr"", BarcodeFormat.QR_CODE.toString());
+          put(""pdf417"", BarcodeFormat.PDF_417.toString());
+          put(""upc_e"", BarcodeFormat.UPC_E.toString());
+          put(""datamatrix"", BarcodeFormat.DATA_MATRIX.toString());
+          put(""code39"", BarcodeFormat.CODE_39.toString());
+          put(""code93"", BarcodeFormat.CODE_93.toString());
+          put(""interleaved2of5"", BarcodeFormat.ITF.toString());
+          put(""codabar"", BarcodeFormat.CODABAR.toString());
+          put(""code128"", BarcodeFormat.CODE_128.toString());
+          put(""maxicode"", BarcodeFormat.MAXICODE.toString());
+          put(""rss14"", BarcodeFormat.RSS_14.toString());
+          put(""rssexpanded"", BarcodeFormat.RSS_EXPANDED.toString());
+          put(""upc_a"", BarcodeFormat.UPC_A.toString());
+          put(""upc_ean"", BarcodeFormat.UPC_EAN_EXTENSION.toString());
+",Add Camera implementation using CameraView on Android .,"""Upgrade Android build configuration and add camera module""","Here's a possible commit message based on the provided diff:

`Update Android build.gradle to use Gradle 4.1 and React Native 0.19+`

However, this commit message is quite brief and doesn't fully capture the changes made in the commit. A more detailed commit message could be:

`Update Android build.gradle to use Gradle 4.1, React Native 0.19+, and add dependencies for Google Vision and CameraView`

This commit message provides a better summary of the changes made in the commit, including the upgrade to Gradle 4.1, the update to React Native 0.19+, and the addition of new dependencies for Google Vision and CameraView.","Updated Android build configuration and dependencies, added MutableImage.java and CameraModule.java files.

The changes in this commit include:

1. Updating the Android build script to use a newer version of the Gradle build tool and the Android Gradle plugin. The `compileSdkVersion`, `buildToolsVersion`, and `targetSdkVersion` have been increased, and the dependencies for React Native and other libraries have been updated as well.
2. Adding the `MutableImage.java` file, which provides functionality for manipulating images in memory, such as rotating and mirroring them, and converting them to and from different formats.
3. Adding the `CameraModule.java` file, which provides an interface for interacting with the camera on an Android device. This file defines methods for taking pictures, recording videos, and scanning barcodes, as well as constants for specifying the desired video resolution.

Overall, it looks like this commit is focused on updating and improving the Android build configuration and adding new functionality for working with images and the camera.","""Update Gradle, add camera functionality, and enhance image processing with rotation, mirroring, and metadata handling.""",Model 1
"diff --git a/src/main/java/net/minecraftforge/fml/StartupQuery.java b/src/main/java/net/minecraftforge/fml/StartupQuery.java
index de36cc815..a4d8d3064 100644
--- a/src/main/java/net/minecraftforge/fml/StartupQuery.java
+++ b/src/main/java/net/minecraftforge/fml/StartupQuery.java
@@ -25,6 +25,15 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
+import javax.annotation.Nullable;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+import com.google.common.base.Strings;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.dedicated.DedicatedServer;
@@ -34,31 +43,74 @@ import net.minecraftforge.fml.client.gui.screen.NotificationScreen;
 import net.minecraftforge.fml.common.thread.EffectiveSide;
 import net.minecraftforge.fml.loading.FMLEnvironment;
 import net.minecraftforge.fml.server.ServerLifecycleHooks;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.MarkerManager;
-
-import javax.annotation.Nullable;
 
 public class StartupQuery {
+
+    public static class QueryBuilder
+    {
+        private String header = """";
+        private String text = """";
+        private String action = """";
+
+        QueryBuilder() {}
+
+        public QueryBuilder header(String header)
+        {
+            this.header = Strings.nullToEmpty(header);
+            return this;
+        }
+
+        public QueryBuilder text(String text)
+        {
+            this.text = Strings.nullToEmpty(text);
+            return this;
+        }
+
+        public QueryBuilder action(String action)
+        {
+            this.action = Strings.nullToEmpty(action);
+            return this;
+        }
+
+        public boolean confirm()
+        {
+            return build(new AtomicBoolean()).getResult();
+        }
+
+        public void notification()
+        {
+            build(null);
+        }
+
+        private StartupQuery build(AtomicBoolean result)
+        {
+            StartupQuery query = new StartupQuery(header, text, action, new AtomicBoolean());
+            query.execute();
+            return query;
+        }
+    }
+
     // internal class/functionality, do not use
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Marker SQ = MarkerManager.getMarker(""STARTUPQUERY"");
 
+    public static QueryBuilder builder()
+    {
+        return new QueryBuilder();
+    }
+
+    @Deprecated // TODO 1.16 remove
     public static boolean confirm(String text)
     {
-        StartupQuery query = new StartupQuery(text, new AtomicBoolean());
-        query.execute();
-        return query.getResult();
+        return builder().text(text).confirm();
     }
 
     private InterruptedException exception;
 
+    @Deprecated // TODO 1.16 remove
     public static void notify(String text)
     {
-        StartupQuery query = new StartupQuery(text, null);
-        query.execute();
+        builder().text(text).notification();
     }
 
     public static void abort()
@@ -116,9 +168,11 @@ public class StartupQuery {
     private static volatile boolean aborted = false;
 
 
-    private StartupQuery(String text, @Nullable AtomicBoolean result)
+    private StartupQuery(String header, String text, String action, @Nullable AtomicBoolean result)
     {
+        this.header = header;
         this.text = text;
+        this.action = action;
         this.result = result;
     }
 
@@ -133,11 +187,21 @@ public class StartupQuery {
         this.result.set(result);
     }
 
+    public String getHeader()
+    {
+        return header;
+    }
+
     public String getText()
     {
         return text;
     }
 
+    public String getAction()
+    {
+        return action;
+    }
+
     public boolean isSynchronous()
     {
         return synchronous;
@@ -194,7 +258,9 @@ public class StartupQuery {
         }
     }
 
-    private String text;
+    private final String header;
+    private final String text;
+    private final String action;
     @Nullable
     private AtomicBoolean result;
     private CountDownLatch signal = new CountDownLatch(1);
diff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
index 37f817fb9..140b7cb5a 100644
--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/ConfirmationScreen.java
@@ -30,16 +30,16 @@ public class ConfirmationScreen extends NotificationScreen
     }
 
     @Override
-    public void init()
+    protected void addConfirmationButtons()
     {
-        this.addButton(new Button(this.width / 2 - 104, this.height - 38, 100, 20, ForgeI18n.parseMessage(""gui.yes""), b ->
+        this.addButton(new Button(this.width / 2 - 104, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(""gui.yes""), b ->
             {
                 ConfirmationScreen.this.minecraft.currentScreen = null;
                 query.setResult(true);
                 query.finish();
             }
         ));
-        this.addButton(new Button(this.width / 2 + 4, this.height - 38, 100, 20, ForgeI18n.parseMessage(""gui.no""), b ->
+        this.addButton(new Button(this.width / 2 + 4, this.height - PADDING - 20, 100, 20, ForgeI18n.parseMessage(""gui.no""), b ->
             {
                 ConfirmationScreen.this.minecraft.currentScreen = null;
                 query.setResult(false);
diff --git a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
index 5b96f14fc..94a0c91a8 100644
--- a/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
+++ b/src/main/java/net/minecraftforge/fml/client/gui/screen/NotificationScreen.java
@@ -20,23 +20,81 @@
 package net.minecraftforge.fml.client.gui.screen;
 
 import net.minecraft.client.gui.widget.button.Button;
+import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screen.Screen;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.util.text.TranslationTextComponent;
+import net.minecraftforge.client.gui.ScrollPanel;
 import net.minecraftforge.fml.StartupQuery;
 
 public class NotificationScreen extends Screen
 {
+    private class TextPanel extends ScrollPanel
+    {
+        TextPanel(Minecraft client, int width, int height, int top, int left)
+        {
+            super(client, width, height, top, left);
+        }
+
+        @Override
+        protected int getContentHeight()
+        {
+            int height = 0;
+            height += (textLines.length * font.FONT_HEIGHT) + 4;
+            if (height < this.height - 50)
+                height = this.height - 50;
+            return height;
+        }
+
+        @Override
+        protected void drawPanel(int entryRight, int relativeY, Tessellator tess, int mouseX, int mouseY)
+        {
+            drawCenteredLines(relativeY, textLines);
+        }
+
+        @Override
+        protected int getScrollAmount()
+        {
+            return font.FONT_HEIGHT * 3;
+        }
+    }
+
+    protected static final int PADDING = 6;
+
+    protected final StartupQuery query;
+
+    private final String[] headerLines;
+    private final String[] textLines;
+    private final String action;
+
+    private ScrollPanel textPanel;
+
     public NotificationScreen(StartupQuery query)
     {
         super(new TranslationTextComponent(""fml.menu.notification.title""));
         this.query = query;
+        this.headerLines = query.getHeader().isEmpty() ? new String[0] : query.getHeader().split(""\n"");
+        this.textLines = query.getText().split(""\n"");
+        this.action = query.getAction();
     }
 
     @Override
     public void init()
     {
-        this.buttons.add(new Button(this.width / 2 - 100, this.height - 38, 200, 20, I18n.format(""gui.done""), b -> {
+        super.init();
+        int panelY = PADDING + headerLines.length * font.FONT_HEIGHT + PADDING;
+        int panelHeight = this.height - PADDING - 20 - panelY;
+        if (!action.isEmpty()) {
+            panelHeight = panelHeight - font.FONT_HEIGHT - PADDING; 
+        }
+        textPanel = new TextPanel(this.minecraft, this.width - (PADDING * 2), panelHeight, panelY, PADDING);
+        this.children.add(textPanel);
+        addConfirmationButtons();
+    }
+
+    protected void addConfirmationButtons() {
+        this.buttons.add(new Button(this.width / 2 - 100, this.height - PADDING - 20, 200, 20, I18n.format(""gui.done""), b -> {
             NotificationScreen.this.minecraft.displayGuiScreen(null);
             query.finish();
         }));
@@ -47,29 +105,28 @@ public class NotificationScreen extends Screen
     {
         this.renderBackground();
 
-        String[] lines = query.getText().split(""\n"");
+        drawCenteredLines(PADDING, headerLines);
 
-        int spaceAvailable = this.height - 38 - 20;
-        int spaceRequired = Math.min(spaceAvailable, 10 + 10 * lines.length);
-
-        int offset = 10 + (spaceAvailable - spaceRequired) / 2; // vertically centered
+        if (textPanel != null)
+        {
+            textPanel.render(mouseX, mouseY, partialTicks);
+        }
 
-        for (String line : lines)
+        if (!action.isEmpty())
         {
-            if (offset >= spaceAvailable)
-            {
-                this.drawCenteredString(this.font, ""..."", this.width / 2, offset, 0xFFFFFF);
-                break;
-            }
-            else
-            {
-                if (!line.isEmpty()) this.drawCenteredString(this.font, line, this.width / 2, offset, 0xFFFFFF);
-                offset += 10;
-            }
+            drawCenteredString(font, action, this.width / 2, this.height - PADDING - 20 - font.FONT_HEIGHT, -1);
         }
 
         super.render(mouseX, mouseY, partialTicks);
     }
 
-    protected final StartupQuery query;
+    protected void drawCenteredLines(int yStart, String... lines)
+    {
+        for (String line : lines)
+        {
+            if (!line.isEmpty())
+                this.drawCenteredString(font, line, this.width / 2, yStart, 0xFFFFFF);
+            yStart += font.FONT_HEIGHT;
+        }
+    }
 }
diff --git a/src/main/java/net/minecraftforge/registries/GameData.java b/src/main/java/net/minecraftforge/registries/GameData.java
index 17b58fb7d..9e14ed1b0 100644
--- a/src/main/java/net/minecraftforge/registries/GameData.java
+++ b/src/main/java/net/minecraftforge/registries/GameData.java
@@ -99,8 +99,6 @@ import java.util.stream.Collectors;
 
 import static net.minecraftforge.registries.ForgeRegistry.REGISTRIES;
 
-import net.minecraftforge.fml.common.EnhancedRuntimeException.WrappedPrintStream;
-
 /**
  * INTERNAL ONLY
  * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS
@@ -728,16 +726,23 @@ public class GameData
             List<ResourceLocation> missingRegs = snapshot.keySet().stream().filter(name -> !RegistryManager.ACTIVE.registries.containsKey(name)).collect(Collectors.toList());
             if (missingRegs.size() > 0)
             {
-                String text = ""Forge Mod Loader detected missing/unknown registrie(s).\n\n"" +
+                String header = ""Forge Mod Loader detected missing/unknown registrie(s).\n\n"" +
                         ""There are "" + missingRegs.size() + "" missing registries in this save.\n"" +
                         ""If you continue the missing registries will get removed.\n"" +
-                        ""This may cause issues, it is advised that you create a world backup before continuing.\n\n"" +
-                        ""Missing Registries:\n"";
+                        ""This may cause issues, it is advised that you create a world backup before continuing.\n\n"";
+
+                StringBuilder text = new StringBuilder(""Missing Registries:\n"");
 
                 for (ResourceLocation s : missingRegs)
-                    text += s.toString() + ""\n"";
+                    text.append(s).append(""\n"");
+
+                boolean confirmed = StartupQuery.builder()
+                        .header(header)
+                        .text(text.toString())
+                        .action(""Continue anyway?"")
+                        .confirm();
 
-                if (!StartupQuery.confirm(text))
+                if (!confirmed)
                     StartupQuery.abort();
             }
         }
@@ -816,19 +821,24 @@ public class GameData
 
             if (!defaulted.isEmpty())
             {
-                StringBuilder buf = new StringBuilder();
-                buf.append(""Forge Mod Loader detected missing registry entries.\n\n"")
-                   .append(""There are "").append(defaulted.size()).append("" missing entries in this save.\n"")
-                   .append(""If you continue the missing entries will get removed.\n"")
-                   .append(""A world backup will be automatically created in your saves directory.\n\n"");
+                String header = ""Forge Mod Loader detected missing registry entries.\n\n"" +
+                   ""There are "" + defaulted.size() + "" missing entries in this save.\n"" +
+                   ""If you continue the missing entries will get removed.\n"" +
+                   ""A world backup will be automatically created in your saves directory.\n\n"";
 
+                StringBuilder buf = new StringBuilder();
                 defaulted.asMap().forEach((name, entries) ->
                 {
                     buf.append(""Missing "").append(name).append("":\n"");","Improve look of notification GUI , improve StartupQuery API","""Refactor StartupQuery to use a builder pattern and improve notification screen functionality""","""Refactor StartupQuery to support customizable queries and notifications""","""Update StartupQuery and NotificationScreen for better message handling""

Explanation:
This commit introduces several changes to the `StartupQuery` and `NotificationScreen` classes to improve the handling of messages.

1. A new `QueryBuilder` class is added to `StartupQuery` to allow for more flexible construction of queries with separate header, text, and action components. The `confirm()` and `notification()` methods are also added to create different types of queries.
2. The `StartupQuery` class is updated to include separate fields for header, text, and action, and a new `build()` method is added to create a `StartupQuery` instance from a `QueryBuilder`.
3. The `ConfirmationScreen` class is updated to add a new `addConfirmationButtons()` method, which is called from the `init()` method to add ""Yes"" and ""No"" buttons to the screen.
4. The `NotificationScreen` class is updated to include separate fields for header, text, and action, and a new `TextPanel` class is added to handle scrolling of long messages. The `init()` method is also updated to add the text panel and action button to the screen if applicable.

Overall, these changes make it easier to display more complex messages to the user and handle user responses in a more flexible way.","""Refactored StartupQuery class; added QueryBuilder for better query construction and enhanced NotificationScreen rendering with headers and scrollable text""",Model 4
"diff --git a/maven-project/src/main/resources/META-INF/plexus/components.xml b/maven-project/src/main/resources/META-INF/plexus/components.xml
index 7c038c2fe..78b4b6ae6 100644
--- a/maven-project/src/main/resources/META-INF/plexus/components.xml
+++ b/maven-project/src/main/resources/META-INF/plexus/components.xml
@@ -245,17 +245,6 @@ under the License.
       <implementation>org.apache.maven.project.path.DefaultPathTranslator</implementation>
     </component>
     
-    <component>
-      <role>org.apache.maven.project.ModelResolver</role>
-      <role-hint>default</role-hint>
-      <implementation>org.apache.maven.project.ModelResolver</implementation>
-      <requirements>
-        <requirement>
-		      <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
-        </requirement>
-      </requirements>
-    </component>
-    
     <component>
       <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
       <role-hint>maven</role-hint>",Remove component that no longer exists .,"""Remove ModelResolver component from plexus components.xml""","The commit message should be:

""Remove unused ModelResolver component""

This message accurately reflects the change made in the commit, which is the removal of the unused ModelResolver component.","""Removed default ModelResolver component from Maven project's components.xml""","""Remove ModelResolver component definition from components.xml in Maven project""",Model 1
"diff --git a/src/com/android/launcher3/DropTarget.java b/src/com/android/launcher3/DropTarget.java
index c1aed9812c..b27abc4369 100644
--- a/src/com/android/launcher3/DropTarget.java
+++ b/src/com/android/launcher3/DropTarget.java
@@ -28,6 +28,7 @@ import com.android.launcher3.folder.FolderNameProvider;
 import com.android.launcher3.logging.InstanceId;
 import com.android.launcher3.logging.InstanceIdSequence;
 import com.android.launcher3.model.data.ItemInfo;
+import com.android.launcher3.util.Executors;
 
 /**
  * Interface defining an object that can receive a drag.
@@ -84,7 +85,9 @@ public interface DropTarget {
 
         public DragObject(Context context) {
             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {
-                folderNameProvider = FolderNameProvider.newInstance(context);
+                Executors.MODEL_EXECUTOR.post(() -> {
+                    folderNameProvider = FolderNameProvider.newInstance(context);
+                });
             }
         }
 
diff --git a/src/com/android/launcher3/folder/Folder.java b/src/com/android/launcher3/folder/Folder.java
index 7998c2d50e..301f79c405 100644
--- a/src/com/android/launcher3/folder/Folder.java
+++ b/src/com/android/launcher3/folder/Folder.java
@@ -1005,7 +1005,8 @@ public class Folder extends AbstractFloatingView implements ClipPathView, DragSo
         if (!items.isEmpty()) {
             mLauncher.getModelWriter().moveItemsInDatabase(items, mInfo.id, 0);
         }
-        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind) {
+        if (FeatureFlags.FOLDER_NAME_SUGGEST.get() && !isBind
+                && total > 1 /* no need to update if there's one icon */) {
             Executors.MODEL_EXECUTOR.post(() -> {
                 FolderNameInfo[] nameInfos =
                         new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];
diff --git a/src/com/android/launcher3/folder/FolderIcon.java b/src/com/android/launcher3/folder/FolderIcon.java
index b40b1e2ebc..7af4664a05 100644
--- a/src/com/android/launcher3/folder/FolderIcon.java
+++ b/src/com/android/launcher3/folder/FolderIcon.java
@@ -409,7 +409,7 @@ public class FolderIcon extends FrameLayout implements FolderListener, IconLabel
             FolderNameInfo[] nameInfos =
                     new FolderNameInfo[FolderNameProvider.SUGGEST_MAX];
             if (FeatureFlags.FOLDER_NAME_SUGGEST.get()) {
-                Executors.UI_HELPER_EXECUTOR.post(() -> {
+                Executors.MODEL_EXECUTOR.post(() -> {
                     d.folderNameProvider.getSuggestedFolderName(
                             getContext(), mInfo.contents, nameInfos);
                     showFinalView(finalIndex, item, nameInfos, d.logInstanceId);
diff --git a/src/com/android/launcher3/folder/FolderNameProvider.java b/src/com/android/launcher3/folder/FolderNameProvider.java
index 7731e6e3f3..2be0bcee17 100644
--- a/src/com/android/launcher3/folder/FolderNameProvider.java
+++ b/src/com/android/launcher3/folder/FolderNameProvider.java
@@ -31,6 +31,7 @@ import com.android.launcher3.model.data.AppInfo;
 import com.android.launcher3.model.data.FolderInfo;
 import com.android.launcher3.model.data.WorkspaceItemInfo;
 import com.android.launcher3.util.IntSparseArrayMap;
+import com.android.launcher3.util.Preconditions;
 import com.android.launcher3.util.ResourceBasedOverride;
 
 import java.util.ArrayList;
@@ -64,6 +65,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
     public static FolderNameProvider newInstance(Context context) {
         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,
                 context.getApplicationContext(), R.string.folder_name_provider_class);
+        Preconditions.assertWorkerThread();
         fnp.load(context);
 
         return fnp;
@@ -71,6 +73,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
 
     public static FolderNameProvider newInstance(Context context, List<AppInfo> appInfos,
             IntSparseArrayMap<FolderInfo> folderInfos) {
+        Preconditions.assertWorkerThread();
         FolderNameProvider fnp = Overrides.getObject(FolderNameProvider.class,
                 context.getApplicationContext(), R.string.folder_name_provider_class);
         fnp.load(appInfos, folderInfos);
@@ -94,7 +97,7 @@ public class FolderNameProvider implements ResourceBasedOverride {
     public void getSuggestedFolderName(Context context,
             ArrayList<WorkspaceItemInfo> workspaceItemInfos,
             FolderNameInfo[] nameInfos) {
-
+        Preconditions.assertWorkerThread();
         if (DEBUG) {
             Log.d(TAG, ""getSuggestedFolderName:"" + Arrays.toString(nameInfos));
         }",Fix a potential concurrency issue for loading CDB file .,"""Move folder name suggestion logic to model executor thread""

This commit message accurately reflects the changes made in the diff, which involve moving the folder name suggestion logic to run on the model executor thread instead of the main thread.","""Enforce worker thread usage in FolderNameProvider and related classes""","""Move FolderNameProvider initialization to background thread and add thread check""

This commit makes the following changes:

* In `DropTarget.java`, it initializes `folderNameProvider` in a background thread using `Executors.MODEL_EXECUTOR`.
* In `Folder.java`, it checks if there are more than one icon before updating the folder name.
* In `FolderIcon.java`, it changes the executor used for getting suggested folder name from `Executors.UI_HELPER_EXECUTOR` to `Executors.MODEL_EXECUTOR`.
* In `FolderNameProvider.java`, it adds thread check using `Preconditions.assertWorkerThread()` in `newInstance()` methods and `getSuggestedFolderName()` method to ensure they are called in a worker thread.

The changes seem to be addressing performance and thread safety issues related to the initialization and usage of `FolderNameProvider`. By moving the initialization to a background thread and adding thread checks, it ensures that the UI thread is not blocked and the methods are called in the correct thread. Additionally, the change in `Folder.java` avoids unnecessary updates when there's only one icon in the folder.","""Ensure FolderNameProvider runs on worker thread and fix executor usage for folder name suggestions.""",Model 4
"diff --git a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
index 7991e8b9c1..68b36094ec 100644
--- a/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
+++ b/hazelcast-jet-kafka/src/main/java/com/hazelcast/jet/connector/kafka/ReadKafkaP.java
@@ -21,22 +21,21 @@ import com.hazelcast.jet.Distributed.Function;
 import com.hazelcast.jet.Processor;
 import com.hazelcast.jet.ProcessorMetaSupplier;
 import com.hazelcast.jet.ProcessorSupplier;
+import com.hazelcast.jet.Traverser;
 import com.hazelcast.jet.impl.util.Util;
 import com.hazelcast.nio.Address;
 import com.hazelcast.util.Preconditions;
-import org.apache.kafka.clients.consumer.ConsumerRecord;
-import org.apache.kafka.clients.consumer.ConsumerRecords;
 import org.apache.kafka.clients.consumer.KafkaConsumer;
-import org.apache.kafka.common.TopicPartition;
 
 import javax.annotation.Nonnull;
 import java.io.Closeable;
-import java.util.AbstractMap;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
+import java.util.Map.Entry;
 import java.util.Properties;
 
+import static com.hazelcast.jet.Traversers.traverseIterable;
+import static com.hazelcast.jet.Util.entry;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.IntStream.range;
 
@@ -52,7 +51,8 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
     private static final int POLL_TIMEOUT_MS = 100;
     private final Properties properties;
     private final String[] topicIds;
-    private KafkaConsumer consumer;
+    private KafkaConsumer<K, V> consumer;
+    private Traverser<Entry<K, V>> traverser;
 
     private ReadKafkaP(String[] topicIds, Properties properties) {
         this.topicIds = topicIds;
@@ -85,6 +85,7 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
         properties.put(""enable.auto.commit"", false);
         consumer = new KafkaConsumer<>(properties);
         consumer.subscribe(Arrays.asList(topicIds));
+        traverser = () -> null;
     }
 
     @Override
@@ -94,41 +95,13 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
 
     @Override
     public boolean complete() {
-        ConsumerRecords<K, V> records = consumer.poll(POLL_TIMEOUT_MS);
-        if (records.isEmpty()) {
-            return false;
+        if (emitCooperatively(traverser)) {
+            consumer.commitSync();
+            traverser = traverseIterable(consumer.poll(POLL_TIMEOUT_MS)).map(r -> entry(r.key(), r.value()));
         }
-        Iterator<TopicPartition> iterator = records.partitions().iterator();
-        while (iterator.hasNext()) {
-            TopicPartition topicPartition = iterator.next();
-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);
-            for (ConsumerRecord<K, V> record : partitionRecords) {
-                K key = record.key();
-                V value = record.value();
-                emit(new AbstractMap.SimpleImmutableEntry<>(key, value));
-                if (getOutbox().isHighWater()) {
-                    consumer.seek(topicPartition, record.offset() + 1);
-                    seekToTheBeginning(records, iterator);
-                    consumer.commitSync();
-                    return false;
-                }
-            }
-        }
-        consumer.commitSync();
         return false;
     }
 
-    private void seekToTheBeginning(ConsumerRecords<K, V> records, Iterator<TopicPartition> iterator) {
-        while (iterator.hasNext()) {
-            TopicPartition topicPartition = iterator.next();
-            List<ConsumerRecord<K, V>> partitionRecords = records.records(topicPartition);
-            if (!partitionRecords.isEmpty()) {
-                long offset = partitionRecords.get(0).offset();
-                consumer.seek(topicPartition, offset);
-            }
-        }
-    }
-
     @Override
     public void close() {
         consumer.close();
@@ -146,10 +119,6 @@ public final class ReadKafkaP<K, V> extends AbstractProcessor implements Closeab
             this.properties.put(""enable.auto.commit"", false);
         }
 
-        @Override
-        public void init(@Nonnull Context context) {
-        }
-
         @Override @Nonnull
         public Function<Address, ProcessorSupplier> get(@Nonnull List<Address> addresses) {
             return address -> new Supplier<>(topicIds, properties);",removed highwater check from ReadKafkaP and adapted emitCooperatively,"""Simplify ReadKafkaP by using Traverser and emitCooperatively""","Based on the provided diff, a suitable commit message could be:

`Refactor ReadKafkaP to use cooperative emission and Traverser`

This commit message concisely describes the main changes made in the commit, which include refactoring the `ReadKafkaP` class to use cooperative emission and the `Traverser` class.","""Refactor ReadKafkaP to use Traverser and simplify complete() method""

Explanation: The provided code changes refactor the `ReadKafkaP` class to use `Traverser` for emitting records and simplify the `complete()` method by removing the manual iteration over partitions and records. The `seekToTheBeginning()` method has also been removed since it's no longer needed. Additionally, the unused `init()` method has been removed from the `ProcessorMetaSupplier` implementation.","""Refactor Kafka consumer traversal to cleanly commit offsets and handle records more efficiently using Traversers in ReadKafkaP.""",Model 4
"diff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
index aa186538f9..350a2fff25 100644
--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/AppRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.app.rest;
 import org.flowable.app.api.repository.AppDefinition;
 import org.flowable.app.api.repository.AppDefinitionQuery;
 import org.flowable.app.api.repository.AppDeployment;
+import org.flowable.app.api.repository.AppDeploymentBuilder;
 import org.flowable.app.api.repository.AppDeploymentQuery;
 
 public interface AppRestApiInterceptor {
@@ -28,6 +29,8 @@ public interface AppRestApiInterceptor {
     void accessDeploymentsWithQuery(AppDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(AppDeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(AppDeployment deployment);
     
diff --git a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
index ca94247f9b..4663e99792 100644
--- a/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
+++ b/modules/flowable-app-engine-rest/src/main/java/org/flowable/app/rest/service/api/repository/AppDeploymentCollectionResource.java
@@ -202,6 +202,10 @@ public class AppDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             AppDeployment deployment = deploymentBuilder.deploy();
             response.setStatus(HttpStatus.CREATED.value());
 
diff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
index 824ecef26a..211e1b5ec3 100644
--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/CmmnRestApiInterceptor.java
@@ -22,6 +22,7 @@ import org.flowable.cmmn.api.history.HistoricVariableInstanceQuery;
 import org.flowable.cmmn.api.repository.CaseDefinition;
 import org.flowable.cmmn.api.repository.CaseDefinitionQuery;
 import org.flowable.cmmn.api.repository.CmmnDeployment;
+import org.flowable.cmmn.api.repository.CmmnDeploymentBuilder;
 import org.flowable.cmmn.api.repository.CmmnDeploymentQuery;
 import org.flowable.cmmn.api.runtime.CaseInstance;
 import org.flowable.cmmn.api.runtime.CaseInstanceBuilder;
@@ -87,6 +88,8 @@ public interface CmmnRestApiInterceptor {
     void accessDeploymentsWithQuery(CmmnDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(CmmnDeploymentBuilder cmmnDeploymentBuilder);
     
     void deleteDeployment(CmmnDeployment deployment);
     
diff --git a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
index 85c832c565..9f0817b614 100644
--- a/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
+++ b/modules/flowable-cmmn-rest/src/main/java/org/flowable/cmmn/rest/service/api/repository/DeploymentCollectionResource.java
@@ -212,6 +212,10 @@ public class DeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             CmmnDeployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());
diff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
index 86d73dd1bc..d356d41a42 100644
--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/DmnRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.dmn.rest.service.api;
 import org.flowable.dmn.api.DmnDecisionTable;
 import org.flowable.dmn.api.DmnDecisionTableQuery;
 import org.flowable.dmn.api.DmnDeployment;
+import org.flowable.dmn.api.DmnDeploymentBuilder;
 import org.flowable.dmn.api.DmnDeploymentQuery;
 import org.flowable.dmn.api.DmnHistoricDecisionExecution;
 import org.flowable.dmn.api.DmnHistoricDecisionExecutionQuery;
@@ -33,6 +34,8 @@ public interface DmnRestApiInterceptor {
     void accessDeploymentsWithQuery(DmnDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(DmnDeploymentBuilder dmnDeploymentBuilder);
     
     void deleteDeployment(DmnDeployment deployment);
     
diff --git a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
index 1eca4ea4db..77bd587bfb 100644
--- a/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
+++ b/modules/flowable-dmn-rest/src/main/java/org/flowable/dmn/rest/service/api/repository/DmnDeploymentCollectionResource.java
@@ -183,6 +183,10 @@ public class DmnDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             DmnDeployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());
diff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
index 154b1612d8..a06e5df1dc 100644
--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/FormRestApiInterceptor.java
@@ -15,6 +15,7 @@ package org.flowable.form.rest;
 import org.flowable.form.api.FormDefinition;
 import org.flowable.form.api.FormDefinitionQuery;
 import org.flowable.form.api.FormDeployment;
+import org.flowable.form.api.FormDeploymentBuilder;
 import org.flowable.form.api.FormDeploymentQuery;
 import org.flowable.form.api.FormInfo;
 import org.flowable.form.api.FormInstance;
@@ -41,6 +42,8 @@ public interface FormRestApiInterceptor {
     void accessDeploymentsWithQuery(FormDeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(FormDeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(FormDeployment deployment);
     
diff --git a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
index 6bc3a307c3..09b1e4736c 100644
--- a/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
+++ b/modules/flowable-form-rest/src/main/java/org/flowable/form/rest/service/api/repository/FormDeploymentCollectionResource.java
@@ -180,6 +180,10 @@ public class FormDeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             FormDeployment deployment = deploymentBuilder.deploy();
             response.setStatus(HttpStatus.CREATED.value());
 
diff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
index 3b40aff23f..50aed9d22e 100644
--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/BpmnRestApiInterceptor.java
@@ -19,6 +19,7 @@ import org.flowable.engine.history.HistoricDetailQuery;
 import org.flowable.engine.history.HistoricProcessInstance;
 import org.flowable.engine.history.HistoricProcessInstanceQuery;
 import org.flowable.engine.repository.Deployment;
+import org.flowable.engine.repository.DeploymentBuilder;
 import org.flowable.engine.repository.DeploymentQuery;
 import org.flowable.engine.repository.Model;
 import org.flowable.engine.repository.ModelQuery;
@@ -113,6 +114,8 @@ public interface BpmnRestApiInterceptor {
     void accessDeploymentsWithQuery(DeploymentQuery deploymentQuery);
     
     void executeNewDeploymentForTenantId(String tenantId);
+
+    void enhanceDeployment(DeploymentBuilder deploymentBuilder);
     
     void deleteDeployment(Deployment deployment);
     
diff --git a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
index 70518860ed..748cf32889 100644
--- a/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
+++ b/modules/flowable-rest/src/main/java/org/flowable/rest/service/api/repository/DeploymentCollectionResource.java
@@ -215,6 +215,10 @@ public class DeploymentCollectionResource {
                 deploymentBuilder.tenantId(tenantId);
             }
 
+            if (restApiInterceptor != null) {
+                restApiInterceptor.enhanceDeployment(deploymentBuilder);
+            }
+
             Deployment deployment = deploymentBuilder.deploy();
 
             response.setStatus(HttpStatus.CREATED.value());",Add method to rest api interceptors to allow enhancing the DeploymentBuilder,"""Added enhanceDeployment method to RestApiInterceptor interfaces and implementations to allow for custom deployment enhancements""","""Added enhanceDeployment method to rest API interceptors for process, case, decision, form, and DMN deployments""","""Add enhanceDeployment method to RestApiInterceptor and its implementations""

This commit introduces a new method `enhanceDeployment` in the `RestApiInterceptor` interface and its implementations in various modules like flowable-app-engine-rest, flowable-cmmn-rest, flowable-dmn-rest, flowable-form-rest, and flowable-rest. The method is called in their respective `DeploymentCollectionResource` classes before deploying a new deployment. This change allows for additional customization or modification of the deployment before it is deployed.","""Added enhanceDeployment method to RestApiInterceptor interfaces and corresponding calls in deployment collection resources.""",Model 1
"diff --git a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
index c0fb2fb0..b7e9dd79 100644
--- a/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
+++ b/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
@@ -156,7 +156,7 @@ public abstract class ScheduledReporter implements Closeable, Reporter {
      * Starts the reporter polling at the given period with the specific runnable action.
      * Visible only for testing.
      */
-    synchronized public void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {
+    synchronized void start(long initialDelay, long period, TimeUnit unit, Runnable runnable) {
         if (this.scheduledFuture != null) {
             throw new IllegalArgumentException(""Reporter already started"");
         }",Remove public visibility from the custom schedule method .,"""Remove public access modifier from start method in ScheduledReporter""","""Make start method private to prevent external usage and add check for already started reporter.""","""Change visibility of start method in ScheduledReporter from public to package-private""","Restrict visibility of the `start` method in `ScheduledReporter` to package-private, making it only accessible within the package.",Model 4
"diff --git a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java
index d662c5012b..98ba63fcba 100644
--- a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java
+++ b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/JsonGoogleAuthenticatorTokenCredentialRepository.java
@@ -13,7 +13,6 @@ import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.springframework.core.io.Resource;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -35,30 +34,25 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
     private final StringSerializer<Map<String, List<OneTimeTokenAccount>>> serializer = new OneTimeAccountSerializer();
 
     public JsonGoogleAuthenticatorTokenCredentialRepository(final Resource location, final IGoogleAuthenticator googleAuthenticator,
-                                                            final CipherExecutor<String, String> tokenCredentialCipher) {
+        final CipherExecutor<String, String> tokenCredentialCipher) {
         super(tokenCredentialCipher, googleAuthenticator);
         this.location = location;
     }
 
     @Override
-    public OneTimeTokenAccount get(final String username, final long id) {
-        return get(username).stream().filter(ac -> ac.getId() == id).findFirst().orElse(null);
+    public OneTimeTokenAccount get(final long id) {
+        val accounts = readAccountsFromJsonRepository();
+        return accounts.values()
+            .stream()
+            .flatMap(List::stream)
+            .filter(ac -> ac.getId() == id)
+            .findFirst()
+            .orElse(null);
     }
 
     @Override
-    public OneTimeTokenAccount get(final long id) {
-        try {
-            val accounts = readAccountsFromJsonRepository();
-            return accounts.values()
-                .stream()
-                .flatMap(List::stream)
-                .filter(ac -> ac.getId() == id)
-                .findFirst()
-                .orElse(null);
-        } catch (final Exception e) {
-            LoggingUtils.error(LOGGER, e);
-        }
-        return null;
+    public OneTimeTokenAccount get(final String username, final long id) {
+        return get(username).stream().filter(ac -> ac.getId() == id).findFirst().orElse(null);
     }
 
     @Override
@@ -89,6 +83,17 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         return new ArrayList<>(0);
     }
 
+    @Override
+    public Collection<? extends OneTimeTokenAccount> load() {
+        try {
+            return readAccountsFromJsonRepository().values()
+                .stream().flatMap(List::stream).collect(Collectors.toList());
+        } catch (final Exception e) {
+            LoggingUtils.error(LOGGER, e);
+        }
+        return new ArrayList<>(0);
+    }
+
     @Override
     public OneTimeTokenAccount save(final OneTimeTokenAccount account) {
         try {
@@ -171,33 +176,24 @@ public class JsonGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         return 0;
     }
 
-    @Override
-    public Collection<? extends OneTimeTokenAccount> load() {
-        try {
-            return readAccountsFromJsonRepository().values()
-                .stream().flatMap(List::stream).collect(Collectors.toList());
-        } catch (final Exception e) {
-            LoggingUtils.error(LOGGER, e);
-        }
-        return new ArrayList<>(0);
-    }
-
     @SneakyThrows
     private void writeAccountsToJsonRepository(final Map<String, List<OneTimeTokenAccount>> accounts) {
         LOGGER.debug(""Saving [{}] google authenticator accounts to JSON file at [{}]"", accounts.size(), location.getFile());
         this.serializer.to(location.getFile(), accounts);
     }
 
-    private Map<String, List<OneTimeTokenAccount>> readAccountsFromJsonRepository() throws IOException {
-        LOGGER.debug(""Ensuring JSON repository file exists at [{}]"", location.getFile());
-        val result = location.getFile().createNewFile();
+    @SneakyThrows
+    private Map<String, List<OneTimeTokenAccount>> readAccountsFromJsonRepository() {
+        val file = location.getFile();
+        LOGGER.debug(""Ensuring JSON repository file exists at [{}]"", file);
+        val result = file.createNewFile();
         if (result) {
-            LOGGER.debug(""Created JSON repository file at [{}]"", location.getFile());
+            LOGGER.debug(""Created JSON repository file at [{}]"", file);
         }
-        if (location.getFile().length() > 0) {
-            LOGGER.debug(""Reading JSON repository file at [{}]"", location.getFile());
-            val accounts = this.serializer.from(location.getFile());
-            LOGGER.debug(""Read [{}] accounts from JSON repository file at [{}]"", accounts.size(), location.getFile());
+        if (file.length() > 0) {
+            LOGGER.debug(""Reading JSON repository file at [{}]"", file);
+            val accounts = this.serializer.from(file);
+            LOGGER.debug(""Read [{}] accounts from JSON repository file at [{}]"", accounts.size(), file);
             return accounts;
         }
         return new HashMap<>(0);
diff --git a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java
index f3e61bc652..67b3c8d96c 100644
--- a/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java
+++ b/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/gauth/credential/RestGoogleAuthenticatorTokenCredentialRepository.java
@@ -53,29 +53,31 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
     private final GoogleAuthenticatorMultifactorProperties gauth;
 
     public RestGoogleAuthenticatorTokenCredentialRepository(final IGoogleAuthenticator googleAuthenticator,
-                                                            final GoogleAuthenticatorMultifactorProperties gauth,
-                                                            final CipherExecutor<String, String> tokenCredentialCipher) {
+        final GoogleAuthenticatorMultifactorProperties gauth,
+        final CipherExecutor<String, String> tokenCredentialCipher) {
         super(tokenCredentialCipher, googleAuthenticator);
         this.gauth = gauth;
     }
 
     @Override
-    public Collection<? extends OneTimeTokenAccount> load() {
+    public OneTimeTokenAccount get(final long id) {
         val rest = gauth.getRest();
         HttpResponse response = null;
         try {
-            response = HttpUtils.executeGet(rest.getUrl(), rest.getBasicAuthUsername(),
-                rest.getBasicAuthUsername(), Map.of(),
-                CollectionUtils.wrap(""Accept"", MediaType.APPLICATION_JSON));
+            val parameters = new HashMap<String, Object>();
+            response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),
+                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
+                parameters, Map.of(""id"", id));
+
             if (response != null) {
                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());
                 if (status.is2xxSuccessful()) {
                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
                     if (content != null) {
-                        final TypeReference<List<GoogleAuthenticatorAccount>> values = new TypeReference<>() {
+                        val values = new TypeReference<GoogleAuthenticatorAccount>() {
                         };
-                        val results = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);
-                        return results.stream().map(this::decode).collect(Collectors.toList());
+                        val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);
+                        return decode(Objects.requireNonNull(result));
                     }
                 }
             }
@@ -84,25 +86,24 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         } finally {
             HttpUtils.close(response);
         }
-        return new ArrayList<>(0);
+        return null;
     }
 
     @Override
     public OneTimeTokenAccount get(final String username, final long id) {
-        val rest = gauth.getRest();
         HttpResponse response = null;
         try {
+            val rest = gauth.getRest();
             val parameters = new HashMap<String, Object>();
             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),
                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
                 parameters, Map.of(""id"", id, ""username"", username));
-
             if (response != null) {
                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());
                 if (status.is2xxSuccessful()) {
                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
                     if (content != null) {
-                        final TypeReference<GoogleAuthenticatorAccount> values = new TypeReference<>() {
+                        val values = new TypeReference<GoogleAuthenticatorAccount>() {
                         };
                         val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);
                         return decode(Objects.requireNonNull(result));
@@ -118,21 +119,21 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
     }
 
     @Override
-    public OneTimeTokenAccount get(final long id) {
+    public Collection<? extends OneTimeTokenAccount> get(final String username) {
         val rest = gauth.getRest();
         HttpResponse response = null;
         try {
             val parameters = new HashMap<String, Object>();
             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),
                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
-                parameters, Map.of(""id"", id));
+                parameters, Map.of(""username"", username));
 
             if (response != null) {
                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());
                 if (status.is2xxSuccessful()) {
                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
                     if (content != null) {
-                        final TypeReference<GoogleAuthenticatorAccount> values = new TypeReference<>() {
+                        val values = new TypeReference<List<GoogleAuthenticatorAccount>>() {
                         };
                         val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);
                         return decode(Objects.requireNonNull(result));
@@ -148,24 +149,22 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
     }
 
     @Override
-    public Collection<? extends OneTimeTokenAccount> get(final String username) {
+    public Collection<? extends OneTimeTokenAccount> load() {
         val rest = gauth.getRest();
         HttpResponse response = null;
         try {
-            val parameters = new HashMap<String, Object>();
-            response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),
-                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
-                parameters, Map.of(""username"", username));
-
+            response = HttpUtils.executeGet(rest.getUrl(), rest.getBasicAuthUsername(),
+                rest.getBasicAuthUsername(), Map.of(),
+                CollectionUtils.wrap(""Accept"", MediaType.APPLICATION_JSON));
             if (response != null) {
                 val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());
                 if (status.is2xxSuccessful()) {
                     val content = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);
                     if (content != null) {
-                        final TypeReference<List<GoogleAuthenticatorAccount>> values = new TypeReference<>() {
-                        };
-                        val result = MAPPER.readValue(JsonValue.readHjson(content).toString(), values);
-                        return decode(Objects.requireNonNull(result));
+                        val results = MAPPER.readValue(JsonValue.readHjson(content).toString(),
+                            new TypeReference<List<GoogleAuthenticatorAccount>>() {
+                            });
+                        return results.stream().map(this::decode).collect(Collectors.toList());
                     }
                 }
             }
@@ -174,7 +173,7 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         } finally {
             HttpUtils.close(response);
         }
-        return null;
+        return new ArrayList<>(0);
     }
 
     @Override
@@ -182,6 +181,40 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         return update(account);
     }
 
+    @Override
+    public OneTimeTokenAccount update(final OneTimeTokenAccount accountToUpdate) {
+        val rest = gauth.getRest();
+        HttpResponse response = null;
+        try {
+            val account = encode(accountToUpdate);
+            val headers = new HashMap<String, Object>();
+            headers.put(""Accept"", MediaType.APPLICATION_JSON);
+            headers.put(""username"", CollectionUtils.wrap(account.getUsername()));
+            headers.put(""validationCode"", CollectionUtils.wrap(String.valueOf(account.getValidationCode())));
+            headers.put(""secretKey"", CollectionUtils.wrap(account.getSecretKey()));
+            headers.put(""scratchCodes"", account.getScratchCodes().stream().map(String::valueOf).collect(Collectors.toList()));
+
+            val parameters = new HashMap<String, Object>();
+            response = HttpUtils.execute(rest.getUrl(), HttpMethod.POST.name(),
+                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
+                parameters, headers);
+
+            if (response != null) {
+                val status = HttpStatus.valueOf(response.getStatusLine().getStatusCode());
+                if (status.is2xxSuccessful()) {
+                    LOGGER.debug(""Posted google authenticator account successfully"");
+                    return account;
+                }
+            }
+        } catch (final Exception e) {
+            LoggingUtils.error(LOGGER, e);
+        } finally {
+            HttpUtils.close(response);
+        }
+        LOGGER.warn(""Failed to save google authenticator account successfully"");
+        return null;
+    }
+
     @Override
     public void deleteAll() {
         val rest = gauth.getRest();
@@ -191,8 +224,6 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
             response = HttpUtils.execute(rest.getUrl(), HttpMethod.GET.name(),
                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
                 parameters, new HashMap<>(0));
-        } catch (final Exception e) {
-            LoggingUtils.error(LOGGER, e);
         } finally {
             HttpUtils.close(response);
         }
@@ -208,8 +239,6 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
                 rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
                 parameters, CollectionUtils.wrap(""Accept"", MediaType.APPLICATION_JSON,
                     ""username"", username));
-        } catch (final Exception e) {
-            LoggingUtils.error(LOGGER, e);
         } finally {
             HttpUtils.close(response);
         }
@@ -271,38 +300,4 @@ public class RestGoogleAuthenticatorTokenCredentialRepository extends BaseGoogle
         }
         return 0;
     }
-
-    @Override
-    public OneTimeTokenAccount update(final OneTimeTokenAccount accountToUpdate) {
-        val rest = gauth.getRest();
-        HttpResponse response = null;
-        try {
-            val account = encode(accountToUpdate);
-            val headers = new HashMap<String, Object>();
-            headers.put(""Accept"", MediaType.APPLICATION_JSON);
-            headers.put(""username"", CollectionUtils.wrap(account.getUsername()));
-            headers.put(""validationCode"", CollectionUtils.wrap(String.valueOf(account.getValidationCode())));
-            headers.put(""secretKey"", CollectionUtils.wrap(account.getSecretKey()));
-            headers.put(""scratchCodes"", account.getScratchCodes().stream().map(String::valueOf).collect(Collectors.toList()));
-
-            val parameters = new HashMap<String, Object>();
-            response = HttpUtils.execute(rest.getUrl(), HttpMethod.POST.name(),
-                rest.getBasicAuthUsername(), rest.getBasicAuthPassword(),
-                parameters, headers);
-
-            if (response",add tests,"""Refactor Google Authenticator Token Credential Repositories for Improved Consistency and Error Handling""","""Refactor JsonGoogleAuthenticatorTokenCredentialRepository and RestGoogleAuthenticatorTokenCredentialRepository to improve performance and remove redundant code""","""Refactor GoogleAuthenticatorTokenCredentialRepository to move common code to base class and fix method signatures""

This commit contains several changes to the `JsonGoogleAuthenticatorTokenCredentialRepository` and `RestGoogleAuthenticatorTokenCredentialRepository` classes. Some of the changes include:

* Moving the `load` method to the `BaseGoogleAuthenticatorTokenCredentialRepository` class and updating its implementation.
* Updating the `get` method in `JsonGoogleAuthenticatorTokenCredentialRepository` to take only one argument (`id`) and changing its implementation to search for an account with the given ID in all accounts loaded from the JSON repository.
* Removing the `readAccountsFromJsonRepository` method from `JsonGoogleAuthenticatorTokenCredentialRepository` and updating the implementation of `writeAccountsToJsonRepository` to use the `serializer` field directly.
* Updating the `get` method in `RestGoogleAuthenticatorTokenCredentialRepository` to take only one argument (`id`) and changing its implementation to search for an account with the given ID using a REST API call.

Overall, the changes appear to be refactoring the code to remove duplication and fix method signatures. It is always a good practice to keep the code clean and maintainable, and this commit seems to be doing just that.","""Refactor GoogleAuthenticatorTokenCredentialRepository classes to improve readability, error handling, and optimize method placements and usage.""",Model 2
"diff --git a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java
index f1ce3483720..7d4c6b8baff 100644
--- a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java
+++ b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/firehose/KinesisFirehoseProducerTest.java
@@ -52,7 +52,7 @@ public class KinesisFirehoseProducerTest {
     private Message inMessage;
     @Mock
     private PutRecordResult putRecordResult;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
+    @Mock(lenient = true, answer = Answers.RETURNS_DEEP_STUBS)
     private Exchange exchange;
 
     private KinesisFirehoseProducer kinesisFirehoseProducer;
diff --git a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java
index 991c5dcb015..bc21e41dfd7 100644
--- a/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java
+++ b/components/camel-aws-kinesis/src/test/java/org/apache/camel/component/aws/kinesis/KinesisProducerTest.java
@@ -57,10 +57,11 @@ public class KinesisProducerTest {
     private Message inMessage;
     @Mock
     private PutRecordResult putRecordResult;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
+    @Mock(lenient = true, answer = Answers.RETURNS_DEEP_STUBS)
     private Exchange exchange;
 
     private KinesisProducer kinesisProducer;
+
     @Before
     public void setup() throws Exception {
         when(kinesisEndpoint.getClient()).thenReturn(kinesisClient);",Fixed test due mockito upgrade,"""Update KinesisFirehoseProducerTest and KinesisProducerTest to use lenient mocking for Exchange""","The commit message should be:

""Allow lenient mocking for Kinesis and Firehose producers""

This message accurately describes the change made in the commit, which is to allow lenient mocking for the Kinesis and Firehose producers in the tests.","""Updated Mockito annotations in KinesisFirehoseProducerTest and KinesisProducerTest""

Explanation: The change in both test classes is the addition of the `lenient = true` parameter to the Mockito `@Mock` annotation. This change makes the mock objects lenient, meaning that they will not throw exceptions when unexpected methods are called. The `answer = Answers.RETURNS_DEEP_STUBS` parameter is already present in both classes and is used to make the mock objects return stubs for all methods, including those that return complex objects.",Enable lenient stubbing for mock Exchange objects in Kinesis Firehose and Kinesis Producer tests.,Model 1
"diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index a7d337e..127fc05 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
-    package=""com.loopj.android.http.sample""
-    android:versionCode=""1""
-    android:versionName=""1.0"">
+          package=""com.loopj.android.http.sample""
+          android:versionCode=""1""
+          android:versionName=""1.0"">
 
     <uses-permission android:name=""android.permission.INTERNET""/>
 
@@ -12,18 +12,20 @@
         android:theme=""@style/AppTheme"">
         <activity android:name="".WaypointsActivity"">
             <intent-filter>
-                <action android:name=""android.intent.action.MAIN"" />
-                <category android:name=""android.intent.category.LAUNCHER"" />
+                <action android:name=""android.intent.action.MAIN""/>
+                <category android:name=""android.intent.category.LAUNCHER""/>
             </intent-filter>
         </activity>
-        <activity android:name="".GetSample"" />
-        <activity android:name="".PostSample"" />
-        <activity android:name="".DeleteSample"" />
-        <activity android:name="".PutSample"" />
-        <activity android:name="".JsonSample"" />
-        <activity android:name="".FileSample"" />
-        <activity android:name="".BinarySample"" />
-        <activity android:name="".ThreadingTimeoutSample"" />
+        <activity android:name="".GetSample""/>
+        <activity android:name="".PostSample""/>
+        <activity android:name="".DeleteSample""/>
+        <activity android:name="".PutSample""/>
+        <activity android:name="".JsonSample""/>
+        <activity android:name="".FileSample""/>
+        <activity android:name="".BinarySample""/>
+        <activity android:name="".ThreadingTimeoutSample""/>
+        <activity android:name="".CancelAllRequests""/>
+        <activity android:name="".CancelRequestHandle""/>
     </application>
 
 </manifest>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
index e134a1b..4596b39 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
@@ -3,6 +3,7 @@ package com.loopj.android.http.sample;
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.BinaryHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -63,7 +64,7 @@ public class BinarySample extends SampleParentActivity {
     }
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.get(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
     }
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java b/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java
new file mode 100644
index 0000000..35d3727
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/CancelAllRequests.java
@@ -0,0 +1,9 @@
+package com.loopj.android.http.sample;
+
+public class CancelAllRequests extends ThreadingTimeoutSample {
+
+    @Override
+    protected void onCancelButtonPressed() {
+        getAsyncHttpClient().cancelAllRequests(true);
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java
new file mode 100644
index 0000000..f710554
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandle.java
@@ -0,0 +1,15 @@
+package com.loopj.android.http.sample;
+
+import com.loopj.android.http.RequestHandle;
+
+public class CancelRequestHandle extends ThreadingTimeoutSample {
+
+    @Override
+    protected void onCancelButtonPressed() {
+        for (RequestHandle handle : getRequestHandles()) {
+            if (!handle.isCancelled() && !handle.isFinished()) {
+                handle.cancel(true);
+            }
+        }
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
index 4210435..52c4547 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -10,8 +11,8 @@ public class DeleteSample extends SampleParentActivity {
     private static final String LOG_TAG = ""DeleteSample"";
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.delete(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.delete(this, URL, headers, null, responseHandler);
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/FileSample.java b/sample/src/main/java/com/loopj/android/http/sample/FileSample.java
index 68c3620..f67b763 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/FileSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/FileSample.java
@@ -5,6 +5,7 @@ import android.util.Log;
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.FileAsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.sample.util.FileUtil;
 
 import org.apache.http.Header;
@@ -76,7 +77,7 @@ public class FileSample extends SampleParentActivity {
     }
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.get(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
     }
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
index 96ab3e6..98e1a90 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -10,8 +11,8 @@ public class GetSample extends SampleParentActivity {
     private static final String LOG_TAG = ""GetSample"";
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.get(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
index ae701c9..86e0b86 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
@@ -5,6 +5,7 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.BaseJsonHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.sample.util.SampleJSON;
 
 import org.apache.http.Header;
@@ -15,8 +16,8 @@ public class JsonSample extends SampleParentActivity {
     private static final String LOG_TAG = ""JsonSample"";
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.get(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
index 202fd48..733d0e3 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -10,8 +11,8 @@ public class PostSample extends SampleParentActivity {
     private static final String LOG_TAG = ""PostSample"";
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.post(this, URL, headers, entity, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.post(this, URL, headers, entity, null, responseHandler);
     }
 
     @Override
@@ -51,7 +52,7 @@ public class PostSample extends SampleParentActivity {
             }
 
             @Override
-            public void onFailure(int statusCode, Header[] headers,	byte[] errorResponse, Throwable e) {
+            public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {
                 debugHeaders(LOG_TAG, headers);
                 debugStatusCode(LOG_TAG, statusCode);
                 debugThrowable(LOG_TAG, e);
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
index f9e6b5d..5c29eb4 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
@@ -2,6 +2,7 @@ package com.loopj.android.http.sample;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -10,8 +11,8 @@ public class PutSample extends SampleParentActivity {
     private static final String LOG_TAG = ""PutSample"";
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.put(this, URL, headers, entity, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.put(this, URL, headers, entity, null, responseHandler);
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index 6deff01..bc46031 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -13,6 +13,7 @@ import android.widget.TextView;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -23,6 +24,7 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 
@@ -31,6 +33,7 @@ public abstract class SampleParentActivity extends Activity {
     private AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
     private EditText urlEditText, headersEditText, bodyEditText;
     private LinearLayout responseLayout;
+    private final List<RequestHandle> requestHandles = new LinkedList<>();
 
     private static final int LIGHTGREEN = Color.parseColor(""#00FF66"");
     private static final int LIGHTRED = Color.parseColor(""#FF3300"");
@@ -64,19 +67,31 @@ public abstract class SampleParentActivity extends Activity {
         }
     }
 
+    public List<RequestHandle> getRequestHandles() {
+        return requestHandles;
+    }
+
+    protected void onRunButtonPressed() {
+        requestHandles.add(executeSample(getAsyncHttpClient(),
+                (urlEditText == null || urlEditText.getText() == null) ? getDefaultURL() : urlEditText.getText().toString(),
+                getRequestHeaders(),
+                getRequestEntity(),
+                getResponseHandler()));
+    }
+
+    protected void onCancelButtonPressed() {
+        asyncHttpClient.cancelRequests(SampleParentActivity.this, true);
+    }
+
     private View.OnClickListener onClickListener = new View.OnClickListener() {
         @Override
         public void onClick(View v) {
             switch (v.getId()) {
                 case R.id.button_run:
-                    executeSample(getAsyncHttpClient(),
-                            (urlEditText == null || urlEditText.getText() == null) ? getDefaultURL() : urlEditText.getText().toString(),
-                            getRequestHeaders(),
-                            getRequestEntity(),
-                            getResponseHandler());
+                    onRunButtonPressed();
                     break;
                 case R.id.button_cancel:
-                    asyncHttpClient.cancelRequests(SampleParentActivity.this, true);
+                    onCancelButtonPressed();
                     break;
             }
         }
@@ -198,5 +213,5 @@ public abstract class SampleParentActivity extends Activity {
         return this.asyncHttpClient;
     }
 
-    protected abstract void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler);
+    protected abstract RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler);
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
index acf1827..091dc89 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
@@ -4,6 +4,7 @@ import android.util.SparseArray;
 
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -86,7 +87,7 @@ public class ThreadingTimeoutSample extends SampleParentActivity {
     }
 
     @Override
-    protected void executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
-        client.get(this, URL, headers, null, responseHandler);
+    protected RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, AsyncHttpResponseHandler responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
     }
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index baeceb9..b5dc314 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -9,7 +9,7 @@ import android.widget.ListView;
 
 public class WaypointsActivity extends ListActivity {
 
-    private static final String[] samples = new String[]{""GET"", ""POST"", ""DELETE"", ""PUT"", ""JSON"", ""FILE"", ""BINARY"", ""THREADING TIMEOUTS""};
+    private static final String[] samples = new String[]{""GET"", ""POST"", ""DELETE"", ""PUT"", ""JSON"", ""FILE"", ""BINARY"", ""THREADING TIMEOUTS"", ""CANCEL ALL REQUESTS"", ""CANCEL REQUEST HANDLE""};
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -46,6 +46,12 @@ public class WaypointsActivity extends ListActivity {
             case 7:
                 targetClass = ThreadingTimeoutSample.class;
                 break;
+            case 8:
+                targetClass = CancelAllRequests.class;
+                break;
+            case 9:
+                targetClass = CancelRequestHandle.class;
+                break;
         }
         if (targetClass != null)
             startActivity(new Intent(this, targetClass));",Added more samples,"""Added CancelAllRequests and CancelRequestHandle samples, and modified existing samples to return RequestHandle from executeSample method""","""Updated AndroidManifest.xml to include CancelAllRequests and CancelRequestHandle activities and modified sample activities to return RequestHandle objects.""","""Added CancelAllRequests and CancelRequestHandle activities, updated AndroidManifest.xml and various other files to accommodate the changes""

Explanation:

* The commit adds two new activities, CancelAllRequests and CancelRequestHandle, to the sample application.
* The AndroidManifest.xml file has been updated to include these new activities.
* Various other files have been updated to accommodate the changes, including BinarySample.java, DeleteSample.java, FileSample.java, GetSample.java, JsonSample.java, PostSample.java, PutSample.java, SampleParentActivity.java, ThreadingTimeoutSample.java, and WaypointsActivity.java.
* The changes in these files mainly involve adding or modifying import statements, and updating method signatures and implementations to work with the new RequestHandle class, which allows for canceling individual requests.
* The commit also includes some minor code formatting changes, such as adding or removing whitespace, and updating comments.",Implement request cancellation via RequestHandle and all requests. Refactor executeSample to return RequestHandle.,Model 4
"diff --git a/src/i18n/wildfire_i18n_en.properties b/src/i18n/wildfire_i18n_en.properties
index ddf249ada..271c1831b 100644
--- a/src/i18n/wildfire_i18n_en.properties
+++ b/src/i18n/wildfire_i18n_en.properties
@@ -155,6 +155,7 @@
 ##      Added key: 'sidebar.system-cache'
 ##      Added key: 'sidebar.system-cache.descr'
 ##      Added key: 'startup.starting.pubsub'
+##      Added section: 'pubsub.*'
 ##      Added section: 'system.cache.*'
 ##      Added section 'upgrade.database.*'
 
@@ -1660,4 +1661,69 @@ upgrade.database.unknown_db=Warning: database type unknown. You must manually up
 upgrade.database.interbase_db=Warning: automatic upgrades of Interbase are not supported. You \
     must manually upgrade your database.
 upgrade.database.success=Database upgraded successfully.
-upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.
\ No newline at end of file
+upgrade.database.failure=Database upgrade failed. Please manually upgrade your database.
+
+# Publish-Subscribe
+
+startup.starting.pubsub=Publish-Subscribe domain: {0}
+pubsub.form.default.title=Default Node configuration
+pubsub.form.default.instruction=Configure the default configuration to apply for newly created nodes.
+pubsub.form.conf.title=Node configuration
+pubsub.form.conf.instruction=Please provide the configuration for node ""{0}"".
+pubsub.form.conf.deliver_payloads=Deliver payloads with event notifications
+pubsub.form.conf.notify_config=Notify subscribers when the node configuration changes
+pubsub.form.conf.notify_delete=Notify subscribers when the node is deleted
+pubsub.form.conf.notify_retract=Notify subscribers when items are removed from the node
+pubsub.form.conf.presence_based=Only deliver notifications to available users
+pubsub.form.conf.send_item_subscribe=Send items to new subscribers
+pubsub.form.conf.subscribe=Whether to allow subscriptions
+pubsub.form.conf.subscription_required=Mandatory to configure new subscriptions
+pubsub.form.conf.persist_items=Persist items to storage
+pubsub.form.conf.max_items=Max number of items to persist
+pubsub.form.conf.max_payload_size=Max payload size in bytes
+pubsub.form.conf.type=Specify the type of payload data to be provided at this node
+pubsub.form.conf.body_xslt=Message body XSLT
+pubsub.form.conf.dataform_xslt=Payload XSLT
+pubsub.form.conf.access_model=Specify who may subscribe and retrieve items
+pubsub.form.conf.publish_model=Specify the publisher model
+pubsub.form.conf.current_approver=Specify the current subscription approver(s)
+pubsub.form.conf.roster_allowed=Roster groups allowed to subscribe
+pubsub.form.conf.contact=People to contact with questions
+pubsub.form.conf.description=Description of the node
+pubsub.form.conf.language=Default language
+pubsub.form.conf.owner=Node owners
+pubsub.form.conf.publisher=Node publishers
+pubsub.form.conf.short_name=Short name for the node
+pubsub.form.conf.itemreply=Select entity that should receive replies to items
+pubsub.form.conf.replyroom=Multi-user chat room to which replies should be sent
+pubsub.form.conf.replyto=Users to which replies should be sent
+pubsub.form.conf.leaf_node_association=Users allowed to associate leaf nodes with the node
+pubsub.form.conf.leaf_node_whitelist=Enter list of users
+pubsub.form.conf.leaf_nodes_max=The maximum number of leaf nodes that can be associated with a collection
+pubsub.notification.message.body=This message contains an event notification
+pubsub.form.subscription.title=Subscription configuration
+pubsub.form.subscription.instruction=Please provide the subscription configuration for node ""{0}"".
+pubsub.form.subscription.deliver=Enable delivery?
+pubsub.form.subscription.digest=Receive digest notifications?
+pubsub.form.subscription.digest_frequency=Minimum number of milliseconds between sending any two notification digests
+pubsub.form.subscription.expire=Requested lease period
+pubsub.form.subscription.include_body=Receive message body in addition to payload?
+pubsub.form.subscription.show-values=Presence types which are allowed to receive notifications
+pubsub.form.subscription.subscription_type=Receive notification of items or nodes
+pubsub.form.subscription.subscription_depth=Receive notification from all or direct child nodes
+pubsub.form.subscription.keywords=Keyword to match
+pubsub.form.authorization.title=PubSub subscriber request
+pubsub.form.authorization.instruction=To approve this entitys subscription request, click \
+    the OK button. To deny the request, click the cancel button.
+pubsub.form.authorization.node=Node ID
+pubsub.form.authorization.subscriber=Subscriber Address
+pubsub.form.authorization.allow=Allow this JID to subscribe to this pubsub node?
+pubsub.command.pending-subscriptions.label=Authorize Pending Subscriptions
+pubsub.command.pending-subscriptions.title=Authorize Pending Subscriptions
+pubsub.command.pending-subscriptions.instruction=Select node to get pending subscriptions.
+pubsub.command.pending-subscriptions.node=Node
+pubsub.command.pending-subscriptions.error.idrequired=ID of node is missing.
+pubsub.command.pending-subscriptions.error.manyIDs=More than one nodeID was selected.
+pubsub.command.pending-subscriptions.success=Pending subscriptions have been sent.
+pubsub.command.pending-subscriptions.error.forbidden=You do not have enough permissions.
+pubsub.command.pending-subscriptions.error.badid=Invalid node ID was selected.
\ No newline at end of file",Added pubsub entries ( pending review ) .,"""Added Publish-Subscribe (PubSub) domain configuration and translation keys""","""Added Publish-Subscribe (PubSub) domain configuration and subscription management features""","""Added section 'pubsub.*' for Publish-Subscribe configurations and error messages""","""Added PubSub configuration and notifications section to wildfire_i18n_en.properties file.""",Model 1
"diff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
index 995805c0ce..9b9a2531be 100644
--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/AbstractGCPProcessor.java
@@ -55,6 +55,25 @@ public abstract class AbstractGCPProcessor<
             .addValidator(StandardValidators.INTEGER_VALIDATOR)
             .build();
 
+    public static final PropertyDescriptor PROXY_HOST = new PropertyDescriptor
+            .Builder().name(""gcp-proxy-host"")
+            .displayName(""Proxy host"")
+            .description(""IP or hostname of the proxy to be used"")
+            .required(false)
+            .expressionLanguageSupported(false)
+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .build();
+
+    public static final PropertyDescriptor PROXY_PORT = new PropertyDescriptor
+            .Builder().name(""gcp-proxy-port"")
+            .displayName(""Proxy port"")
+            .description(""Proxy port number"")
+            .required(false)
+            .expressionLanguageSupported(false)
+            .addValidator(StandardValidators.INTEGER_VALIDATOR)
+            .build();
+
+
     /**
      * Links to the {@link GCPCredentialsService} which provides credentials for this particular processor.
      */
@@ -78,7 +97,9 @@ public abstract class AbstractGCPProcessor<
         return ImmutableList.of(
                 GCP_CREDENTIALS_PROVIDER_SERVICE,
                 PROJECT_ID,
-                RETRY_COUNT
+                RETRY_COUNT,
+                PROXY_HOST,
+                PROXY_PORT
         );
     }
 
diff --git a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
index ff368b55df..7cc854d02b 100644
--- a/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
+++ b/nifi-nar-bundles/nifi-gcp-bundle/nifi-gcp-processors/src/main/java/org/apache/nifi/processors/gcp/storage/AbstractGCSProcessor.java
@@ -16,6 +16,9 @@
  */
 package org.apache.nifi.processors.gcp.storage;
 
+import com.google.api.client.http.HttpTransport;
+import com.google.api.client.http.javanet.NetHttpTransport;
+import com.google.auth.http.HttpTransportFactory;
 import com.google.auth.oauth2.GoogleCredentials;
 import com.google.cloud.RetryParams;
 import com.google.cloud.storage.Storage;
@@ -26,7 +29,10 @@ import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.processor.ProcessContext;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processors.gcp.AbstractGCPProcessor;
+import org.apache.nifi.util.StringUtils;
 
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
@@ -66,15 +72,36 @@ public abstract class AbstractGCSProcessor extends AbstractGCPProcessor<Storage,
     @Override
     protected StorageOptions getServiceOptions(ProcessContext context, GoogleCredentials credentials) {
         final String projectId = context.getProperty(PROJECT_ID).getValue();
-        final Integer retryCount = Integer.valueOf(context.getProperty(RETRY_COUNT).getValue());
+        final Integer retryCount = context.getProperty(RETRY_COUNT).asInteger();
 
-        return StorageOptions.newBuilder()
+        final String proxyHost = context.getProperty(PROXY_HOST).getValue();
+        final Integer proxyPort = context.getProperty(PROXY_PORT).asInteger();
+
+        StorageOptions.Builder storageOptionsBuilder = StorageOptions.newBuilder()
                 .setCredentials(credentials)
                 .setProjectId(projectId)
                 .setRetryParams(RetryParams.newBuilder()
                         .setRetryMaxAttempts(retryCount)
                         .setRetryMinAttempts(retryCount)
-                        .build())
-                .build();
+                        .build());
+
+        if (!StringUtils.isBlank(proxyHost) && proxyPort > 0) {
+            storageOptionsBuilder.setHttpTransportFactory(new HttpTransportFactory() {
+                @Override
+                public HttpTransport create() {
+                    final HttpTransport transport = new NetHttpTransport.Builder()
+                            .setProxy(
+                                    new Proxy(
+                                            Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort)
+",Expose some proxy settings to GCS Processors .,"""Added support for HTTP proxy configuration in GCP processors""","Added support for proxy settings in GCP processors

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of proxy settings support, which is the main change in the commit.","""Added proxy host and port properties to AbstractGCPProcessor and implemented proxy support in AbstractGCSProcessor""

This commit has added two new properties, PROXY\_HOST and PROXY\_PORT, to the AbstractGCPProcessor class. These properties allow the configuration of a proxy host and port for GCP processors.

Additionally, the commit has implemented proxy support in the AbstractGCSProcessor class by using the new properties to configure a proxy when creating the HttpTransport object. This allows GCS processors to use a proxy when connecting to the Google Cloud Storage service.

The changes made by this commit are not backwards compatible as they introduce new properties and modify the behavior of existing GCP processors. However, the changes are necessary for users who need to use a proxy to connect to GCP services.","""Add proxy host and port configurations for GCP processors to support HTTP proxy setup.""",Model 1
"diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
index 1ede8a2037..6d1b600205 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiDroidApp.java
@@ -373,6 +373,7 @@ public class AnkiDroidApp extends Application {
             }
         } catch (Exception e) {
             Timber.e(e, ""failed to update context with new language"");
+            //during AnkiDroidApp.attachBaseContext() ACRA is not initialized, so the exception report will not be sent
             sendExceptionReport(e,""AnkiDroidApp.updateContextWithLanguage"");
             return remoteContext;
         }
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
index 526864d431..26c400db22 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Preferences.java
@@ -810,22 +810,25 @@ public class Preferences extends AppCompatPreferenceActivity implements Preferen
 
     private void initializeLanguageDialog(PreferenceScreen screen) {
         ListPreference languageSelection = (ListPreference) screen.findPreference(LANGUAGE);
-        Locale currentAppLocale = LanguageUtil.getLocale(AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance())
-                .getString(Preferences.LANGUAGE, """"));
         if (languageSelection != null) {
-            Map<String, String> items = new TreeMap<>();
+            Map<String, List<String>> items = new TreeMap<>();
             for (String localeCode : LanguageUtil.APP_LANGUAGES) {
                 Locale loc = LanguageUtil.getLocale(localeCode);
-                items.put(loc.getDisplayName(currentAppLocale), loc.toString());
+                //TreeMap always sorted by key.
+                //      Key is a String: all display names converted to lower case for correct display order.
+                //      Value is list of 2 strings:
+                //          1st element is display name with unmodified case
+                //          2nd element is locale code
+                items.put(loc.getDisplayName(loc).toLowerCase(), Arrays.asList(loc.getDisplayName(loc), loc.toString()));
             }
             CharSequence[] languageDialogLabels = new CharSequence[items.size() + 1];
             CharSequence[] languageDialogValues = new CharSequence[items.size() + 1];
             languageDialogLabels[0] = getResources().getString(R.string.language_system);
             languageDialogValues[0] = """";
             int i = 1;
-            for (Map.Entry<String, String> e : items.entrySet()) {
-                languageDialogLabels[i] = e.getKey();
-",show all available languages in preferences using their own language .,"""Fix language selection dialog and handle exception in AnkiDroidApp.updateContextWithLanguage""","""Improve language selection dialog and add exception reporting in AnkiDroidApp""","""Update AnkiDroidApp and Preferences to handle exceptions during language update""

Explanation:
The changes made in this commit are related to handling exceptions that occur during language updates in the AnkiDroidApp and Preferences classes.

In AnkiDroidApp, an exception is caught during the updateContextWithLanguage method, and if an exception occurs, a message is logged, an exception report is sent using the sendExceptionReport method, and the remoteContext is returned.

In Preferences, the initializeLanguageDialog method is modified to use a TreeMap instead of a HashMap to store the language items, and the items are now stored as lists of two strings (display name and locale code) instead of just strings. Additionally, the display names are converted to lower case before being added to the map to ensure correct display order. The languageDialogLabels and languageDialogValues arrays are populated with the items from the map, along with an option for using the system language.",Enhance language dialog by sorting case-insensitive and display in original case. Add exception logging comment.,Model 2
"diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index f072bc35..315ec18e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005c.
+http://www.twinsun.com/tz/tz-link.htm, version 2005f.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 0d1439d1..4be50b0a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.78
+# @(#)asia	7.80
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -107,7 +107,7 @@ Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
 			3:00	-	BAKT	1957 Mar    # Baku Time
 			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
 			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSun 2:00s
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
 			4:00	-	AZT	1996 # Azerbaijan time
 			4:00	EUAsia	AZ%sT	1997
 			4:00	Azer	AZ%sT
@@ -337,7 +337,7 @@ Link	Asia/Nicosia	Europe/Nicosia
 # President Eduard Shevardnadze decreed Wednesday.
 #
 # From the BBC via Joseph S. Myers (2004-06-27):
-#  	
+#
 # Georgia moved closer to Western Europe on Sunday...  The former Soviet
 # republic has changed its time zone back to that of Moscow.  As a result it
 # is now just four hours ahead of Greenwich Mean Time, rather than five hours
@@ -639,7 +639,8 @@ Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
 Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
 
 # From Ephraim Silverberg <ephraim@cs.huji.ac.il>
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, and 2004-12-22):
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
 
 # According to the Office of the Secretary General of the Ministry of
 # Interior, there is NO set rule for Daylight-Savings/Standard time changes.
@@ -735,91 +736,74 @@ Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
 Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
 Rule	Zion	2004	only	-	Sep	22	1:00	0	S
 
-# Yesterday, the Knesset Interior Committee passed a proposed (originally
-# in March 2004) change to the Time Setting Law that would make the dates
-# for DST from 2005 and beyond so that DST starts on the night _after_ the
-# first night of the Passover holiday at midnight until midnight of the
-# Saturday night _before_ the fast of Yom Kippur.
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
 #
-# Those who can read Hebrew can view the proposal at:
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced ""lastFri"" with ""Fri>=26"" by hand.)
+# The spring transitions below all correspond to the following Rule:
 #
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+.ps
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
 #
-# The proposal still has to be passed by the Knesset (three readings) for
-# it to become law....
+# but older zic implementations (e.g., Solaris 8) do not support
+# ""Fri>=26"" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
 
-# From Paul Eggert (2004-12-22):
-# For now, guess that the rules proposed on 2004-12-20 will be adopted.
-# This is quite possibly wrong, but it is more likely than no DST at all.
-# I used Ed Reingold's cal-hebrew in GNU Emacs 21.3, along with code
-# written by Ephraim Silverberg, to generate this list.
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	2005	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2006	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	0:00	0	S
-Rule	Zion	2007	only	-	Apr	 4	0:00	1:00	D
-Rule	Zion	2007	only	-	Sep	16	0:00	0	S
-Rule	Zion	2008	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2008	only	-	Oct	 5	0:00	0	S
-Rule	Zion	2009	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2009	only	-	Sep	27	0:00	0	S
-Rule	Zion	2010	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	2010	only	-	Sep	12	0:00	0	S
-Rule	Zion	2011	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2012	only	-	Apr	 8	0:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	0:00	0	S
-Rule	Zion	2013	only	-	Mar	27	0:00	1:00	D
-Rule	Zion	2013	only	-	Sep	 8	0:00	0	S
-Rule	Zion	2014	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	2014	only	-	Sep	28	0:00	0	S
-Rule	Zion	2015	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2015	only	-	Sep	20	0:00	0	S
-Rule	Zion	2016	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2017	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	0:00	0	S
-Rule	Zion	2018	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2018	only	-	Sep	16	0:00	0	S
-Rule	Zion	2019	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2019	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2020	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2020	only	-	Sep	27	0:00	0	S
-Rule	Zion	2021	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	2021	only	-	Sep	12	0:00	0	S
-Rule	Zion	2022	only	-	Apr	17	0:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2023	only	-	Apr	 7	0:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	0:00	0	S
-Rule	Zion	2024	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2024	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2025	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2025	only	-	Sep	28	0:00	0	S
-Rule	Zion	2026	only	-	Apr	 3	0:00	1:00	D
-Rule	Zion	2026	only	-	Sep	20	0:00	0	S
-Rule	Zion	2027	only	-	Apr	23	0:00	1:00	D
-Rule	Zion	2027	only	-	Oct	10	0:00	0	S
-Rule	Zion	2028	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2028	only	-	Sep	24	0:00	0	S
-Rule	Zion	2029	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2029	only	-	Sep	16	0:00	0	S
-Rule	Zion	2030	only	-	Apr	19	0:00	1:00	D
-Rule	Zion	2030	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2031	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	2031	only	-	Sep	21	0:00	0	S
-Rule	Zion	2032	only	-	Mar	28	0:00	1:00	D
-Rule	Zion	2032	only	-	Sep	12	0:00	0	S
-Rule	Zion	2033	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2034	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	0:00	0	S
-Rule	Zion	2035	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2035	only	-	Oct	 7	0:00	0	S
-Rule	Zion	2036	only	-	Apr	13	0:00	1:00	D
-Rule	Zion	2036	only	-	Sep	28	0:00	0	S
-Rule	Zion	2037	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2037	only	-	Sep	13	0:00	0	S
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index f265eece..4696d0b2 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.69
+# @(#)australasia	7.70
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -434,6 +434,17 @@ Zone Pacific/Johnston	-10:00	-	HST
 # uninhabited
 
 # Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# ""Orient Express"" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  ""   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  ""
+#
 Zone Pacific/Midway	-11:49:28 -	LMT	1901
 			-11:00	-	NST	1956 Jun  3
 			-11:00	1:00	NDT	1956 Sep  2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index a4ff15ae..f7fd57e9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	7.91
+# @(#)europe	7.92
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -255,6 +255,35 @@
 #   ""Timeball on the ballast office is down.  Dunsink time.""
 #   -- James Joyce, Ulysses
 
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
 # From Paul Eggert (1999-03-28):
 # Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
 # reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 950b46af..3d89e968 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.71
+# @(#)northamerica	7.72
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
@@ -445,7 +445,7 @@ Link America/Denver America/Shiprock
 # Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
 # Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
 # switched four weeks late in 1974.
-# 
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:00
 			-8:00	US	P%sT	1923 May 13 2:00
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index bc93e112..c5bd5169 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.57
+# @(#)southamerica	7.58
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -964,7 +964,7 @@ Zone America/Asuncion	-3:50:40 -	LMT	1890
 #
 # <a href=""news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net"">
 # From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over 
+# When we were in Peru in 1985-1986, they apparently switched over
 # sometime between December 29 and January 3 while we were on the Amazon.
 #
 # From Paul Eggert (2003-11-02):",Updated tz data to version 2005f . . git - svn - id : https : / / joda - time . svn . sourceforge . net / svnroot / joda - time / trunk @ 733 1e1cfbb7 - 5c0e - 0410 - a2f0 - f98d92ec03a1,Update time zone data to version 2005f.,Update tz database to version 2005f.,"The commit message should provide a brief summary of the changes made in the commit. Based on the changes made in the commit, a suitable commit message could be:

""Update tz database to version 2005f and adjust rules for Asia/Baku, Asia/Jerusalem, and Europe/Dublin""

This commit updates the tz database to version 2005f and makes the following changes:

* Adjusts the rules for Asia/Baku to reflect the change from Azerbaijan Time (AZT) to Azerbaijan Summer Time (AZST) in 1992. The new rule uses the last Saturday in September at 23:00 as the start of AZST, instead of the last Sunday in September at 2:00.
* Updates the rules for Asia/Jerusalem to reflect the new Daylight Saving Time (DST) schedule proposed by the Knesset Interior Committee in 2005. The new rule starts DST at 02:00 on the last Friday before April 2nd (i.e. the last Friday in March or April 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday night before the fast of Yom Kippur.
* Adds references to Irish laws relating to legal time, provided by Joseph S. Myers.

These changes affect the timezone data for Azerbaijan, Israel, and Ireland.","Updated JodaTime timezone data to version 2005f, with changes in Asia, Australasia, Europe, North America, and South America files.",Model 4
"diff --git a/src/main/java/io/reactivex/functions/Consumer.java b/src/main/java/io/reactivex/functions/Consumer.java
index deb4ae804..ff10bbb24 100644
--- a/src/main/java/io/reactivex/functions/Consumer.java
+++ b/src/main/java/io/reactivex/functions/Consumer.java
@@ -13,8 +13,6 @@
 
 package io.reactivex.functions;
 
-import io.reactivex.annotations.NonNull;
-
 /**
  * A functional interface (callback) that accepts a single value.
  * @param <T> the value type
@@ -25,5 +23,5 @@ public interface Consumer<T> {
      * @param t the value
      * @throws Exception on error
      */
-    void accept(@NonNull T t) throws Exception;
+    void accept(T t) throws Exception;
 }",Remove @ NonNull annotation in Consumer method parameter ( <issue_id> ) .,"""Remove @NonNull annotation from Consumer's accept method""","""Remove @NonNull annotation from Consumer.accept method""","""Remove @NonNull annotation from Consumer.accept() method in Consumer.java""",Removed @NonNull annotation from Consumer interface in io.reactivex.functions to simplify method signature.,Model 3
"diff --git a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
index 93e325a0f21..1b0ec0db073 100644
--- a/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
+++ b/searchcore/src/vespa/searchcore/proton/flushengine/flushengine.cpp
@@ -306,7 +306,7 @@ FlushEngine::flushNextTarget(const vespalib::string & name)
         LOG(info, ""The same target %s out of %ld has been asked to flush again. ""
                   ""This might indicate flush logic flaw so I will wait 1s before doing it."",
                   name.c_str(), lst.first.size());
-        FastOS_Thread::Sleep(1000);
+        std::this_thread::sleep_for(100ms);
     }
     _executor.execute(std::make_unique<FlushTask>(initFlush(*ctx), *this, ctx));
     return ctx->getName();",Reduce wait between same targets to from 1s to 100ms,"""Replace FastOS_Thread::Sleep with std::this_thread::sleep_for in FlushEngine""","""Improved flush logic to wait for 100ms instead of 1s before retrying a target.""","""Update FlushEngine to use std::this_thread::sleep_for instead of FastOS_Thread::Sleep""

Explanation:
The change in the code is updating the way the thread sleeps in the FlushEngine. Instead of using FastOS_Thread::Sleep, it now uses std::this_thread::sleep_for with a duration of 100 milliseconds. This change might be made to use a more standard and modern way of making the thread sleep.",Replaced FastOS_Thread::Sleep with std::this_thread::sleep_for for better readability and C++ standard compliance.,Model 1
"diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
index 200cd609b..0354df315 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
@@ -50,9 +50,12 @@ class MappedRawLog implements RawLog
         this.logFile = location;
         partitions = new RawLogPartition[PARTITION_COUNT];
 
-        try (final FileChannel logChannel = new RandomAccessFile(logFile, ""rw"").getChannel())
+
+        try (final RandomAccessFile raf = new RandomAccessFile(logFile, ""rw"");
+             final FileChannel logChannel = raf.getChannel())
         {
             final long logLength = computeLogLength(termLength);
+            raf.setLength(logLength);
             blankTemplate.transferTo(0, logLength, logChannel);
 
             if (logLength <= Integer.MAX_VALUE)",Set new log length when creating file to make the creation faster .,"""Set length of log file before writing to it in MappedRawLog""","""Improve MappedRawLog initialization by setting file length and transferring blank template""","""Add explicit file length set in MappedRawLog constructor""

This commit modifies the MappedRawLog class in the Aeron driver project. Specifically, it adds an explicit call to set the length of the RandomAccessFile object 'raf' to the computed log length. This change ensures that the file length is set correctly before transferring data to the file channel. The change is made in the constructor of the MappedRawLog class, which initializes the raw log file with the specified term length.","""Refactor MappedRawLog to separate RandomAccessFile and FileChannel instantiation, and set file length explicitly.""",human
"diff --git a/docs/reference/api-conventions.asciidoc b/docs/reference/api-conventions.asciidoc
index 9e0578ee528..bd556914502 100644
--- a/docs/reference/api-conventions.asciidoc
+++ b/docs/reference/api-conventions.asciidoc
@@ -1,8 +1,6 @@
 [[api-conventions]]
 = API conventions
 
-[partintro]
---
 The *Elasticsearch* REST APIs are exposed using <<modules-http,JSON over HTTP>>.
 
 The conventions listed in this chapter can be applied throughout the REST
@@ -13,8 +11,6 @@ API, unless otherwise specified.
 * <<common-options>>
 * <<url-access-control>>
 
---
-
 [[multi-index]]
 == Multiple Indices
 
diff --git a/docs/reference/cat.asciidoc b/docs/reference/cat.asciidoc
index 743bae7b856..28003ea04d9 100644
--- a/docs/reference/cat.asciidoc
+++ b/docs/reference/cat.asciidoc
@@ -1,9 +1,6 @@
 [[cat]]
 = cat APIs
 
-[partintro]
---
-
 [""float"",id=""intro""]
 == Introduction
 
@@ -210,8 +207,6 @@ sushi_california_roll [*avocado*]    1     1
 pizza_hawaiian        [*pineapples*] 1
 --------------------------------------------------
 
---
-
 include::cat/alias.asciidoc[]
 
 include::cat/allocation.asciidoc[]
diff --git a/docs/reference/cluster.asciidoc b/docs/reference/cluster.asciidoc
index da5ce2b4102..a53d59e8248 100644
--- a/docs/reference/cluster.asciidoc
+++ b/docs/reference/cluster.asciidoc
@@ -1,8 +1,6 @@
 [[cluster]]
 = Cluster APIs
 
-[partintro]
---
 [""float"",id=""cluster-nodes""]
 == Node specification
 
@@ -81,7 +79,6 @@ GET /_nodes/ra*:2
 GET /_nodes/ra*:2*
 --------------------------------------------------
 // CONSOLE
---
 
 include::cluster/health.asciidoc[]
 
diff --git a/docs/reference/docs.asciidoc b/docs/reference/docs.asciidoc
index 5c4c471b0a1..9490e0cd9ff 100644
--- a/docs/reference/docs.asciidoc
+++ b/docs/reference/docs.asciidoc
@@ -1,9 +1,6 @@
 [[docs]]
 = Document APIs
 
-[partintro]
---
-
 This section starts with a short introduction to Elasticsearch's <<docs-replication,data replication model>>, followed by a
 detailed description of the following CRUD APIs:
 
@@ -23,8 +20,6 @@ detailed description of the following CRUD APIs:
 NOTE: All CRUD APIs are single-index APIs. The `index` parameter accepts a single
 index name, or an `alias` which points to a single index.
 
---
-
 include::docs/data-replication.asciidoc[]
 
 include::docs/index_.asciidoc[]
diff --git a/docs/reference/index.asciidoc b/docs/reference/index.asciidoc
index b2a1a0d51d7..fafbf074610 100644
--- a/docs/reference/index.asciidoc
+++ b/docs/reference/index.asciidoc
@@ -28,20 +28,8 @@ include::setup/bootstrap-checks-xes.asciidoc[]
 
 include::upgrade.asciidoc[]
 
-include::api-conventions.asciidoc[]
-
-include::docs.asciidoc[]
-
-include::search.asciidoc[]
-
 include::aggregations.asciidoc[]
 
-include::indices.asciidoc[]
-
-include::cat.asciidoc[]
-
-include::cluster.asciidoc[]
-
 include::query-dsl.asciidoc[]
 
 include::scripting.asciidoc[]
diff --git a/docs/reference/indices.asciidoc b/docs/reference/indices.asciidoc
index cda7c41cb42..3d5473b06c3 100644
--- a/docs/reference/indices.asciidoc
+++ b/docs/reference/indices.asciidoc
@@ -1,9 +1,7 @@
 [[indices]]
 = Indices APIs
 
-[partintro]
---
-The indices APIs are used to manage individual indices,
+Index APIs are used to manage individual indices,
 index settings, aliases, mappings, and index templates.
 
 [float]
@@ -18,6 +16,9 @@ index settings, aliases, mappings, and index templates.
 * <<indices-shrink-index>>
 * <<indices-split-index>>
 * <<indices-rollover-index>>
+* <<freeze-index-api>>
+* <<unfreeze-index-api>>
+
 
 [float]
 [[mapping-management]]
@@ -57,8 +58,6 @@ index settings, aliases, mappings, and index templates.
 * <<indices-flush>>
 * <<indices-forcemerge>>
 
---
-
 include::indices/create-index.asciidoc[]
 
 include::indices/delete-index.asciidoc[]
@@ -75,6 +74,12 @@ include::indices/split-index.asciidoc[]
 
 include::indices/rollover-index.asciidoc[]
 
+:leveloffset: -1
+include::indices/apis/freeze.asciidoc[]
+
+include::indices/apis/unfreeze.asciidoc[]
+
+:leveloffset: +1
 include::indices/put-mapping.asciidoc[]
 
 include::indices/get-mapping.asciidoc[]
diff --git a/docs/reference/indices/analyze.asciidoc b/docs/reference/indices/analyze.asciidoc
index a0d0f3c5b24..45d523db713 100644
--- a/docs/reference/indices/analyze.asciidoc
+++ b/docs/reference/indices/analyze.asciidoc
@@ -139,6 +139,7 @@ GET _analyze
 --------------------------------------------------
 // CONSOLE
 
+[[explain-analyze-api]]
 === Explain Analyze
 
 If you want to get more advanced details, set `explain` to `true` (defaults to `false`). It will output all token attributes for each token.
diff --git a/docs/reference/indices/apis/index.asciidoc b/docs/reference/indices/apis/index.asciidoc
deleted file mode 100644
index 45060427062..00000000000
--- a/docs/reference/indices/apis/index.asciidoc
+++ /dev/null
@@ -1,11 +0,0 @@
-[[index-apis]]
-== Index APIs
-
-The index APIs are used to manage individual indices.
-
-* <<freeze-index-api>>, <<unfreeze-index-api>>
-
-See also <<indices>>.
-
-include::freeze.asciidoc[]
-include::unfreeze.asciidoc[]
\ No newline at end of file
diff --git a/docs/reference/indices/flush.asciidoc b/docs/reference/indices/flush.asciidoc
index ea433fa9cbd..8abe2693faa 100644
--- a/docs/reference/indices/flush.asciidoc
+++ b/docs/reference/indices/flush.asciidoc
@@ -47,7 +47,7 @@ POST _flush
 // CONSOLE
 // TEST[s/^/PUT kimchy\nPUT elasticsearch\n/]
 
-[[indices-synced-flush]]
+[[synced-flush-api]]
 === Synced Flush
 
 Elasticsearch tracks the indexing activity of each shard. Shards that have not
diff --git a/docs/reference/redirects.asciidoc b/docs/reference/redirects.asciidoc
index 1985229f065..c030e49cc36 100644
--- a/docs/reference/redirects.asciidoc
+++ b/docs/reference/redirects.asciidoc
@@ -626,6 +626,142 @@ See <<ml-get-filter>> and
 See <<ml-get-calendar-event>> and 
 {stack-ov}/ml-calendars.html[Calendars and scheduled events].
 
+[role=""exclude"",id=""index-apis""]
+=== Index APIs
+{es} index APIs are now documented in <<indices>>.
+
+[role=""exclude"",id=""search-request-docvalue-fields""]
+=== Doc value fields parameter for request body search API
+See <<request-body-search-docvalue-fields>>.
+
+[role=""exclude"",id=""search-request-explain""]
+=== Explain parameter for request body search API
+See <<request-body-search-explain>>.
+
+[role=""exclude"",id=""search-request-collapse""]
+=== Collapse parameter for request body search API
+See <<request-body-search-collapse>>.
+
+[role=""exclude"",id=""search-request-from-size""]
+=== From and size parameters for request body search API
+See <<request-body-search-from-size>>.
+
+[role=""exclude"",id=""search-request-highlighting""]
+=== Highlight parameter for request body search API
+See <<request-body-search-highlighting>>.
+
+[role=""exclude"",id=""search-request-index-boost""]
+=== Index boost parameter for request body search API
+See <<request-body-search-index-boost>>.
+
+[role=""exclude"",id=""search-request-inner-hits""]
+=== Inner hits parameter for request body search API
+See <<request-body-search-inner-hits>>.
+
+[role=""exclude"",id=""search-request-min-score""]
+=== Minimum score parameter for request body search API
+See <<request-body-search-min-score>>.
+
+[role=""exclude"",id=""search-request-named-queries-and-filters""]
+=== Named query parameter for request body search API
+See <<request-body-search-queries-and-filters>>.
+
+[role=""exclude"",id=""search-request-post-filter""]
+=== Post filter parameter for request body search API
+See <<request-body-search-post-filter>>.
+
+[role=""exclude"",id=""search-request-preference""]
+=== Preference parameter for request body search API
+See <<request-body-search-preference>>.
+
+[role=""exclude"",id=""search-request-query""]
+=== Query parameter for request body search API
+See <<request-body-search-query>>.
+
+[role=""exclude"",id=""search-request-rescore""]
+=== Rescoring parameter for request body search API
+See <<request-body-search-rescore>>.
+
+[role=""exclude"",id=""search-request-script-fields""]
+=== Script fields parameter for request body search API
+See <<request-body-search-script-fields>>.
+
+[role=""exclude"",id=""search-request-scroll""]
+=== Scroll parameter for request body search API
+See <<request-body-search-scroll>>.
+
+[role=""exclude"",id=""search-request-search-after""]
+=== Search after parameter for request body search API
+See <<request-body-search-search-after>>.
+
+[role=""exclude"",id=""search-request-search-type""]
+=== Search type parameter for request body search API
+See <<request-body-search-search-type>>.
+
+[role=""exclude"",id=""search-request-seq-no-primary-term""]
+=== Sequence numbers and primary terms parameter for request body search API
+See <<request-body-search-search-type>>.
+
+[role=""exclude"",id=""search-request-sort""]
+=== Sort parameter for request body search API
+See <<request-body-search-sort>>.
+
+[role=""exclude"",id=""search-request-source-filtering""]
+=== Source filtering parameter for request body search API
+See <<request-body-search-source-filtering>>.
+
+[role=""exclude"",id=""search-request-stored-fields""]
+=== Stored fields parameter for request body search API
+See <<request-body-search-stored-fields>>.
+
+[role=""exclude"",id=""search-request-track-total-hits""]
+=== Track total hits parameter for request body search API
+See <<request-body-search-track-total-hits>>.
+
+[role=""exclude"",id=""search-request-version""]
+=== Version parameter for request body search API
+See <<request-body-search-version>>.
+
+[role=""exclude"",id=""search-suggesters-term""]
+=== Term suggester
+See <<term-suggester>>.
+
+[role=""exclude"",id=""search-suggesters-phrase""]
+=== Phrase suggester
+See <<phrase-suggester>>.
+
+[role=""exclude"",id=""search-suggesters-completion""]
+=== Completion suggester
+See <<completion-suggester>>.
+
+[role=""exclude"",id=""suggester-context""]
+=== Context suggester
+See <<context-suggester>>.
+
+[role=""exclude"",id=""returning-suggesters-type""]
+=== Return suggester type
+See <<return-suggesters-type>>.
+
+[role=""exclude"",id=""search-profile-queries""]
+=== Profiling queries
+See <<profiling-queries>>.
+
+[role=""exclude"",id=""search-profile-aggregations""]
+=== Profiling aggregations
+See <<profiling-aggregations>>.
+
+[role=""exclude"",id=""search-profile-considerations""]
+=== Profiling considerations
+See <<profiling-considerations>>.
+
+[role=""exclude"",id=""_explain_analyze""]
+=== Explain analyze API
+See <<explain-analyze-api>>.
+
+[role=""exclude"",id=""indices-synced-flush""]
+=== Synced flush API
+See <<synced-flush-api>>.
+
 [role=""exclude"",id=""_repositories""]
 === Snapshot repositories
 See <<snapshots-repositories>>.
@@ -633,4 +769,3 @@ See <<snapshots-repositories>>.
 [role=""exclude"",id=""_snapshot""]
 === Snapshot
 See <<snapshots-take-snapshot>>.
-
diff --git a/docs/reference/rest-api/index.asciidoc b/docs/reference/rest-api/index.asciidoc
index 7d706088802..3646d848788 100644
--- a/docs/reference/rest-api/index.asciidoc
+++ b/docs/reference/rest-api/index.asciidoc
@@ -10,11 +10,15 @@ directly to configure and access {es} features.
 We are working on including more {es} APIs in this section. Some content might
 not be included yet.
 
+* <<docs>>
+* <<search>>
+* <<indices>>
+* <<cat>>
+* <<cluster>>
 * <<info-api,Info API>>
 * <<ccr-apis,{ccr-cap} APIs>>
 * <<data-frame-apis,{dataframe-cap} APIs>>
 * <<graph-explore-api,Graph Explore API>>
-* <<index-apis>>
 * <<indices-reload-analyzers,Reload Search Analyzers API>>
 * <<index-lifecycle-management-api,Index lifecycle management APIs>>
 * <<snapshot-lifecycle-management-api,Snapshot lifecycle management APIs>>
@@ -27,14 +31,21 @@ not be included yet.
 * <<migration-api,Migration APIs>>
 --
 
+:leveloffset: +1
+include::{es-repo-dir}/api-conventions.asciidoc[]
+include::{es-repo-dir}/docs.asciidoc[]
+include::{es-repo-dir}/search.asciidoc[]
+include::{es-repo-dir}/indices.asciidoc[]
+include::{es-repo-dir}/cat.asciidoc[]
+include::{es-repo-dir}/cluster.asciidoc[]
 
+:leveloffset: -1
 include::info.asciidoc[]
 include::{es-repo-dir}/ccr/apis/ccr-apis.asciidoc[]
 include::{es-repo-dir}/data-frames/apis/index.asciidoc[]
 include::{es-repo-dir}/graph/explore.asciidoc[]
 include::{es-repo-dir}/ilm/apis/ilm-api.asciidoc[]
 include::{es-repo-dir}/ilm/apis/slm-api.asciidoc[]
-include::{es-repo-dir}/indices/apis/index.asciidoc[]
 include::{es-repo-dir}/licensing/index.asciidoc[]
 include::{es-repo-dir}/migration/migration.asciidoc[]
 include::{es-repo-dir}/ml/apis/ml-api.asciidoc[]
diff --git a/docs/reference/search.asciidoc b/docs/reference/search.asciidoc
index e99fb6f388d..aac5e5d3bc2 100644
--- a/docs/reference/search.asciidoc
+++ b/docs/reference/search.asciidoc
@@ -1,9 +1,6 @@
 [[search]]
 = Search APIs
 
-[partintro]
---
-
 Most search APIs are <<search-multi-index,multi-index>>, with the
 exception of the <<search-explain>> endpoints.
 
@@ -160,8 +157,6 @@ overloading a cluster (e.g., a default request will hit all indices in a cluster
 which could cause shard request rejections if the number of shards per node is
 high). This default value is `5`.
 
---
-
 include::search/search.asciidoc[]
 
 include::search/uri-request.asciidoc[]
diff --git a/docs/reference/search/profile.asciidoc b/docs/reference/search/profile.asciidoc
index e5ba1b851cd..c99776bc688 100644
--- a/docs/reference/search/profile.asciidoc
+++ b/docs/reference/search/profile.asciidoc
@@ -227,7 +227,7 @@ NOTE: As with other statistics apis, the Profile API supports human readable out
 `?human=true` to the query string. In this case, the output contains the additional `time` field containing rounded,
 human readable timing information (e.g. `""time"": ""391,9ms""`, `""time"": ""123.3micros""`).
 
-[[search-profile-queries]]
+[[profiling-queries]]
 === Profiling Queries
 
 [NOTE]
@@ -693,7 +693,7 @@ ignore its children if you find the details too tricky to interpret.
 
 Hopefully this will be fixed in future iterations, but it is a tricky problem to solve and still in-progress :)
 
-[[search-profile-aggregations]]
+[[profiling-aggregations]]
 === Profiling Aggregations
 
 [[agg-section]]
@@ -868,7 +868,7 @@ The meaning of the stats are as follows:
     Records the number of invocations of the particular method.  For example, `""collect_count"": 2,`
     means the `collect()` method was called on two different documents.
 
-[[search-profile-considerations]]
+[[profiling-considerations]]
 === Profiling Considerations
 
 ==== Performance Notes
diff --git a/docs/reference/search/request/collapse.asciidoc b/docs/reference/search/request/collapse.asciidoc
index 1ab79e36c7e..8de0450a4d5 100644
--- a/docs/reference/search/request/collapse.asciidoc
+++ b/docs/reference/search/request/collapse.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-collapse]]
+[[request-body-search-collapse]]
 === Field Collapsing
 
 Allows to collapse search results based on field values.
diff --git a/docs/reference/search/request/docvalue-fields.asciidoc b/docs/reference/search/request/docvalue-fields.asciidoc
index 784cc940153..7706e9c57b0 100644
--- a/docs/reference/search/request/docvalue-fields.asciidoc
+++ b/docs/reference/search/request/docvalue-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-docvalue-fields]]
+[[request-body-search-docvalue-fields]]
 === Doc value Fields
 
 Allows to return the <<doc-values,doc value>> representation of a field for each hit, for
diff --git a/docs/reference/search/request/explain.asciidoc b/docs/reference/search/request/explain.asciidoc
index 9bcaecb4840..b82891c8905 100644
--- a/docs/reference/search/request/explain.asciidoc
+++ b/docs/reference/search/request/explain.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-explain]]
+[[request-body-search-explain]]
 === Explain
 
 Enables explanation for each hit on how its score was computed.
diff --git a/docs/reference/search/request/from-size.asciidoc b/docs/reference/search/request/from-size.asciidoc
index 1c44a7ca8d2..6e249f700e0 100644
--- a/docs/reference/search/request/from-size.asciidoc
+++ b/docs/reference/search/request/from-size.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-from-size]]
+[[request-body-search-from-size]]
 === From / Size
 
 Pagination of results can be done by using the `from` and `size`
diff --git a/docs/reference/search/request/highlighting.asciidoc b/docs/reference/search/request/highlighting.asciidoc
index ad836c7c535..2197af97d41 100644
--- a/docs/reference/search/request/highlighting.asciidoc
+++ b/docs/reference/search/request/highlighting.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-highlighting]]
+[[request-body-search-highlighting]]
 === Highlighting
 
 Highlighters enable you to get highlighted snippets from one or more fields
diff --git a/docs/reference/search/request/index-boost.asciidoc b/docs/reference/search/request/index-boost.asciidoc
index 683fe910f5e..93099fc6dc8 100644
--- a/docs/reference/search/request/index-boost.asciidoc
+++ b/docs/reference/search/request/index-boost.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-index-boost]]
+[[request-body-search-index-boost]]
 === Index Boost
 
 Allows to configure different boost level per index when searching
diff --git a/docs/reference/search/request/inner-hits.asciidoc b/docs/reference/search/request/inner-hits.asciidoc
index 7774e34c2c0..d26bcc9ba3c 100644
--- a/docs/reference/search/request/inner-hits.asciidoc
+++ b/docs/reference/search/request/inner-hits.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-inner-hits]]
+[[request-body-search-inner-hits]]
 === Inner hits
 
 The <<parent-join, parent-join>> and <<nested, nested>> features allow the return of documents that
diff --git a/docs/reference/search/request/min-score.asciidoc b/docs/reference/search/request/min-score.asciidoc
index d9dbef99ddf..7f7e556e1ea 100644
--- a/docs/reference/search/request/min-score.asciidoc
+++ b/docs/reference/search/request/min-score.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-min-score]]
+[[request-body-search-min-score]]
 === min_score
 
 Exclude documents which have a `_score` less than the minimum specified
diff --git a/docs/reference/search/request/named-queries-and-filters.asciidoc b/docs/reference/search/request/named-queries-and-filters.asciidoc
index 0fb60253938..c666bd51441 100644
--- a/docs/reference/search/request/named-queries-and-filters.asciidoc
+++ b/docs/reference/search/request/named-queries-and-filters.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-named-queries-and-filters]]
+[[request-body-search-queries-and-filters]]
 === Named Queries
 
 Each filter and query can accept a `_name` in its top level definition.
diff --git a/docs/reference/search/request/post-filter.asciidoc b/docs/reference/search/request/post-filter.asciidoc
index c46cdb1e522..6bdaac252b2 100644
--- a/docs/reference/search/request/post-filter.asciidoc
+++ b/docs/reference/search/request/post-filter.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-post-filter]]
+[[request-body-search-post-filter]]
 === Post filter
 
 The `post_filter` is applied to the search `hits` at the very end of a search
diff --git a/docs/reference/search/request/preference.asciidoc b/docs/reference/search/request/preference.asciidoc
index 7412f04844c..c673be52102 100644
--- a/docs/reference/search/request/preference.asciidoc
+++ b/docs/reference/search/request/preference.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-preference]]
+[[request-body-search-preference]]
 === Preference
 
 Controls a `preference` of the shard copies on which to execute the search.  By
diff --git a/docs/reference/search/request/query.asciidoc b/docs/reference/search/request/query.asciidoc
index fa06d0d9bb4..153608fa3d6 100644
--- a/docs/reference/search/request/query.asciidoc
+++ b/docs/reference/search/request/query.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-query]]
+[[request-body-search-query]]
 === Query
 
 The query element within the search request body allows to define a
diff --git a/docs/reference/search/request/rescore.asciidoc b/docs/reference/search/request/rescore.asciidoc
index c2277aada3f..4c8f8776c08 100644
--- a/docs/reference/search/request/rescore.asciidoc
+++ b/docs/reference/search/request/rescore.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-rescore]]
+[[request-body-search-rescore]]
 === Rescoring
 
 Rescoring can help to improve precision by reordering just the top (eg
diff --git a/docs/reference/search/request/script-fields.asciidoc b/docs/reference/search/request/script-fields.asciidoc
index 1bd61e00481..675237a0514 100644
--- a/docs/reference/search/request/script-fields.asciidoc
+++ b/docs/reference/search/request/script-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-script-fields]]
+[[request-body-search-script-fields]]
 === Script Fields
 
 Allows to return a <<modules-scripting,script
diff --git a/docs/reference/search/request/scroll.asciidoc b/docs/reference/search/request/scroll.asciidoc
index 3503ad2c9c8..3c708f24a91 100644
--- a/docs/reference/search/request/scroll.asciidoc
+++ b/docs/reference/search/request/scroll.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-scroll]]
+[[request-body-search-scroll]]
 === Scroll
 
 While a `search` request returns a single ``page'' of results, the `scroll`
diff --git a/docs/reference/search/request/search-after.asciidoc b/docs/reference/search/request/search-after.asciidoc
index 53d25c613b9..663212d1c89 100644
--- a/docs/reference/search/request/search-after.asciidoc
+++ b/docs/reference/search/request/search-after.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-search-after]]
+[[request-body-search-search-after]]
 === Search After
 
 Pagination of results can be done by using the `from` and `size` but the cost becomes prohibitive when the deep pagination is reached.
diff --git a/docs/reference/search/request/search-type.asciidoc b/docs/reference/search/request/search-type.asciidoc
index 7cac034f29c..1000c771022 100644
--- a/docs/reference/search/request/search-type.asciidoc
+++ b/docs/reference/search/request/search-type.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-search-type]]
+[[request-body-search-search-type]]
 === Search Type
 
 There are different execution paths that can be done when executing a
diff --git a/docs/reference/search/request/seq-no.asciidoc b/docs/reference/search/request/seq-no.asciidoc
index 0ab7bec4487..8c12a3e3476 100644
--- a/docs/reference/search/request/seq-no.asciidoc
+++ b/docs/reference/search/request/seq-no.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-seq-no-primary-term]]
+[[request-body-search-seq-no-primary-term]]
 === Sequence Numbers and Primary Term
 
 Returns the sequence number and primary term of the last modification to each search hit.
diff --git a/docs/reference/search/request/sort.asciidoc b/docs/reference/search/request/sort.asciidoc
index c12ec3a679a..080bec6f976 100644
--- a/docs/reference/search/request/sort.asciidoc
+++ b/docs/reference/search/request/sort.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-sort]]
+[[request-body-search-sort]]
 === Sort
 
 Allows you to add one or more sorts on specific fields. Each sort can be
diff --git a/docs/reference/search/request/source-filtering.asciidoc b/docs/reference/search/request/source-filtering.asciidoc
index 483d3311d70..2b46b7ea632 100644
--- a/docs/reference/search/request/source-filtering.asciidoc
+++ b/docs/reference/search/request/source-filtering.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-source-filtering]]
+[[request-body-search-source-filtering]]
 === Source filtering
 
 
diff --git a/docs/reference/search/request/stored-fields.asciidoc b/docs/reference/search/request/stored-fields.asciidoc
index b55e0fce457..5cc8300afe6 100644
--- a/docs/reference/search/request/stored-fields.asciidoc
+++ b/docs/reference/search/request/stored-fields.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-stored-fields]]
+[[request-body-search-stored-fields]]
 === Stored Fields
 
 WARNING: The `stored_fields` parameter is about fields that are explicitly marked as
diff --git a/docs/reference/search/request/track-total-hits.asciidoc b/docs/reference/search/request/track-total-hits.asciidoc
index 210f6321816..44e353ded05 100644
--- a/docs/reference/search/request/track-total-hits.asciidoc
+++ b/docs/reference/search/request/track-total-hits.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-track-total-hits]]
+[[request-body-search-track-total-hits]]
 === Track total hits
 
 Generally the total hit count can't be computed accurately without visiting all
diff --git a/docs/reference/search/request/version.asciidoc b/docs/reference/search/request/version.asciidoc
index 57c6ce27feb..53343394fa3 100644
--- a/docs/reference/search/request/version.asciidoc
+++ b/docs/reference/search/request/version.asciidoc
@@ -1,4 +1,4 @@
-[[search-request-version]]
+[[request-body-search-version]]
 === Version
 
 Returns a version for each search hit.
diff --git a/docs/reference/search/suggesters/completion-suggest.asciidoc b/docs/reference/search/suggesters/completion-suggest.asciidoc
index 0ed0601b086..e72d0e16eac 100644
--- a/docs/reference/search/suggesters/completion-suggest.asciidoc
+++ b/docs/reference/search/suggesters/completion-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-completion]]
+[[completion-suggester]]
 === Completion Suggester
 
 NOTE: In order to understand the format of suggestions, please
diff --git a/docs/reference/search/suggesters/context-suggest.asciidoc b/docs/reference/search/suggesters/context-suggest.asciidoc
index 63692f0b06f..759266658bf 100644
--- a/docs/reference/search/suggesters/context-suggest.asciidoc
+++ b/docs/reference/search/suggesters/context-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[suggester-context]]
+[[context-suggester]]
 === Context Suggester
 
 The completion suggester considers all documents in the index, but it is often
diff --git a/docs/reference/search/suggesters/misc.asciidoc b/docs/reference/search/suggesters/misc.asciidoc
index 6866df24c09..736f79f010d 100644
--- a/docs/reference/search/suggesters/misc.asciidoc
+++ b/docs/reference/search/suggesters/misc.asciidoc
@@ -1,4 +1,4 @@
-[[returning-suggesters-type]]
+[[return-suggesters-type]]
 === Returning the type of the suggester
 
 Sometimes you need to know the exact type of a suggester in order to parse its results. The `typed_keys` parameter
diff --git a/docs/reference/search/suggesters/phrase-suggest.asciidoc b/docs/reference/search/suggesters/phrase-suggest.asciidoc
index 6b657a9e8ff..cdddf0daaea 100644
--- a/docs/reference/search/suggesters/phrase-suggest.asciidoc
+++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-phrase]]
+[[phrase-suggester]]
 === Phrase Suggester
 
 NOTE: In order to understand the format of suggestions, please
diff --git a/docs/reference/search/suggesters/term-suggest.asciidoc b/docs/reference/search/suggesters/term-suggest.asciidoc
index f9dd0c91335..9be7f111f61 100644
--- a/docs/reference/search/suggesters/term-suggest.asciidoc
+++ b/docs/reference/search/suggesters/term-suggest.asciidoc
@@ -1,4 +1,4 @@
-[[search-suggesters-term]]
+[[term-suggester]]
 === Term suggester
 
 NOTE: In order to understand the format of suggestions, please",Move Elasticsearch APIs to REST APIs section .,"""Refactor and reorganize Elasticsearch API documentation""","""Refactor API documentation to remove redundant sections and improve organization""","The commit message could be:

Refactoring documentation structure

* Removed the 'partintro' section from various API documentation files
* Updated the 'cat' and 'cluster' API documentation to use the 'float' attribute for the introduction section
* Moved the 'api-conventions' and 'docs' sections from the 'index' file to the 'rest-api/index' file
* Updated the 'indices' API documentation to include the 'freeze' and 'unfreeze' APIs
* Updated the 'search' API documentation to use the 'float' attribute for the 'search-multi-index' section
* Removed the 'exclude' role from various redirects in the 'redirects' file
* Updated the 'index-apis' redirect to point to the 'indices' section
* Updated the 'search-request-*' redirects to point to the 'request-body-search-*' sections
* Added the 'profiling-*' sections to the 'search/profile' file
* Added the 'return-suggesters-type' section to the 'search/suggesters/misc' file
* Added the 'context-suggester' section to the 'search/suggesters/context-suggest' file
* Added the 'completion-suggester' section to the 'search/suggesters/completion-suggest' file
* Added the 'phrase-suggester' section to the 'search/suggesters/phrase-suggest' file
* Added the 'term-suggester' section to the 'search/suggesters/term-suggest' file
* Updated the 'explain-analyze-api' section to use the 'float' attribute for the 'Explain Analyze' subsection
* Updated the 'synced-flush-api' section to use the 'float' attribute for the 'Synced Flush' subsection.",Remove outdated headings and consolidate API references in Elasticsearch docs. Updated several anchors and included redirects for consistent navigation.,Model 4
"diff --git a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
index 8243c29ac3..89ac1edece 100644
--- a/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
+++ b/http-client/src/test/groovy/io/micronaut/http/client/rxjava2/RxHttpPostSpec.groovy
@@ -43,7 +43,7 @@ import spock.lang.Specification
  * @author Graeme Rocher
  * @since 1.0
  */
-class RxHttpPostSpec extends Specification {
+class   RxHttpPostSpec extends Specification {
 
     @Shared
     @AutoCleanup
@@ -181,7 +181,11 @@ class RxHttpPostSpec extends Specification {
         )
         User user = flowable.onErrorResumeNext((Function){ t ->
             if (t instanceof HttpClientResponseException) {
-                return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())
+                try {
+                    return Flowable.just(((HttpClientResponseException) t).response.getBody(User).get())
+                } catch (e) {
+                    return Flowable.error(e)
+                }",Try debug CI test failure,"""Fix error handling in RxHttpPostSpec to propagate exceptions when getting response body""","According to the diff, the commit message should be:

""Add error handling for HttpClientResponseException in RxHttpPostSpec""

This commit message accurately describes the change made in the code, which is to add error handling for HttpClientResponseException in the RxHttpPostSpec class.","""Update RxHttpPostSpec to handle exceptions properly in onErrorResumeNext""

Explanation: The code change is adding a try-catch block inside the onErrorResumeNext function to properly handle exceptions when converting the response body to a User object. Without this change, any exception thrown during the conversion would not be handled correctly and could cause the application to crash. The commit message suggests that this change is being made to improve the error handling in the RxHttpPostSpec class.",Improve error handling in RxHttpPostSpec by catching exceptions and returning Flowable.error for HttpClientResponseException.,Model 4
"diff --git a/src/com/facebook/buck/json/buck.py b/src/com/facebook/buck/json/buck.py
index 1b4e1ae4b2..fb8b6c6471 100644
--- a/src/com/facebook/buck/json/buck.py
+++ b/src/com/facebook/buck/json/buck.py
@@ -421,23 +421,6 @@ def get_base_path(build_env=None):
     return build_env.base_path
 
 
-@provide_for_build
-def add_deps(name, deps=[], build_env=None):
-    assert build_env.type == BuildContextType.BUILD_FILE, (
-        ""Cannot use `add_deps()` at the top-level of an included file."")
-
-    if name not in build_env.rules:
-        raise ValueError(
-            'Invoked \'add_deps\' on non-existent rule %s.' % name)
-
-    rule = build_env.rules[name]
-    if 'deps' not in rule:
-        raise ValueError(
-            'Invoked \'add_deps\' on rule %s that has no \'deps\' field'
-            % name)
-    rule['deps'] = rule['deps'] + deps
-
-
 GENDEPS_SIGNATURE = re.compile(r'^#@# GENERATED FILE: DO NOT MODIFY ([a-f0-9]{40}) #@#\n$')
 
 class BuildFileProcessor(object):
diff --git a/test/com/facebook/buck/parser/ParserTest.java b/test/com/facebook/buck/parser/ParserTest.java
index 2a562e58e0..2a23a11f09 100644
--- a/test/com/facebook/buck/parser/ParserTest.java
+++ b/test/com/facebook/buck/parser/ParserTest.java
@@ -1204,45 +1204,6 @@ public class ParserTest {
     assertEquals(""Should have not invalidated cache."", 1, counter.calls);
   }
 
-  @Test
-  public void testGeneratedDeps() throws Exception {
-    // Execute buildTargetGraphForBuildTargets() with a target in a valid file but a bad rule name.
-    tempDir.newFolder(""java"", ""com"", ""facebook"", ""generateddeps"");
-
-    Path testGeneratedDepsBuckFile = tempDir.newFile(""java/com/facebook/generateddeps/BUCK"");
-    Files.write(
-        testGeneratedDepsBuckFile,
-        (""java_library(name = 'foo')\n"" +
-            ""java_library(name = 'bar')\n"" +
-            ""add_deps(name = 'foo', deps = [':bar'])\n"").getBytes(UTF_8));
-
-    BuildTarget fooTarget = BuildTarget.builder(
-        tempDir.getRoot().toRealPath(),
-        ""//java/com/facebook/generateddeps"",
-        ""foo"").build();
-
-    BuildTarget barTarget = BuildTarget.builder(
-        tempDir.getRoot().toRealPath(),
-        ""//java/com/facebook/generateddeps"",
-        ""bar"").build();
-    Iterable<BuildTarget> buildTargets = ImmutableList.of(fooTarget, barTarget);
-
-    TargetGraph targetGraph = parser.buildTargetGraph(
-        eventBus,
-        cell,
-        false,
-        executorService,
-        buildTargets);
-    BuildRuleResolver resolver = buildActionGraph(eventBus, targetGraph);
-
-    BuildRule fooRule = resolver.requireRule(fooTarget);
-    assertNotNull(fooRule);
-    BuildRule barRule = resolver.requireRule(barTarget);
-    assertNotNull(barRule);
-
-    assertEquals(ImmutableSet.of(barRule), fooRule.getDeps());
-  }
-
   @Test
   public void whenAllRulesAreRequestedWithDifferingIncludesThenRulesAreParsedTwice()
       throws BuildFileParseException, BuildTargetException, IOException, InterruptedException {","Remove old autodeps functions . . Summary : Now that ` buck autodeps ` has landed , we have no need for this anymore . . Test Plan : CI .","""Remove add_deps function and corresponding test""","""Remove `add_deps` function and related test case, as it is no longer needed.""","""Remove add_deps function and test for generated deps in Buck""

The commit removes the `add_deps` function from `buck.py` and its corresponding test case from `ParserTest.java`. The function was used to add dependencies to an existing rule in a BUCK file, but it seems like this functionality is no longer needed or has been replaced by a different approach. The test case for generated deps in `ParserTest.java` is also removed since it relies on the `add_deps` function.",Removed `add_deps` function from `buck.py` and its corresponding test case `testGeneratedDeps` in `ParserTest.java`.,Model 4
"diff --git a/core/src/main/java/org/bitcoinj/wallet/Wallet.java b/core/src/main/java/org/bitcoinj/wallet/Wallet.java
index f5c64aa4a..74b84e16e 100644
--- a/core/src/main/java/org/bitcoinj/wallet/Wallet.java
+++ b/core/src/main/java/org/bitcoinj/wallet/Wallet.java
@@ -4829,8 +4829,7 @@ public class Wallet extends BaseTaggableObject
         TransactionOutput selection2Change = null;
         CoinSelection selection1 = null;
         TransactionOutput selection1Change = null;
-        // We keep track of the last size of the transaction we calculated but only if the act of adding inputs and
-        // change resulted in the size crossing a 1000 byte boundary. Otherwise it stays at zero.
+        // We keep track of the last size of the transaction we calculated.
         int lastCalculatedSize = 0;
         Coin valueNeeded, valueMissing =",Adjust lastCalculatedSize comment .,"""Simplify transaction size tracking in Wallet class""

This commit message is short and to the point, indicating that the change is related to simplifying the way transaction size is tracked in the Wallet class.","""Remove size boundary check for last calculated transaction size""

This commit message accurately reflects the change made in the code, which is the removal of a specific size boundary check for the last calculated transaction size.","""Refactor: Simplify transaction size tracking in Wallet.java""

This commit appears to remove a condition for tracking the last calculated size of a transaction in the Wallet class of BitcoinJ. The comment suggests that the code previously only updated the last calculated size if adding inputs and change caused the size to cross a 1000 byte boundary. The updated code removes this condition and always updates the last calculated size.","""Refactor Wallet transaction size tracking by removing 1000 byte boundary condition.""",Model 4
"diff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
index cfe8128f4..a16a7f6c7 100644
--- a/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/ContainerCustomizer.java
@@ -14,18 +14,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 import org.codehaus.plexus.PlexusContainer;
 
 /**
  * Instances of this interface can be user upon start of the embedder to customize
  * the components in the plexus container.
+ *
  * @author mkleint
  */
-public interface ContainerCustomizer {
+public interface ContainerCustomizer
+{
     /**
      * callback from embedder's start() method that allows to customize the components
      * in the container.
      */
-    void customize(PlexusContainer container);
-    
+    void customize( PlexusContainer container );
+
 }
diff --git a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
index 5aae1227c..2c6edb312 100644
--- a/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
+++ b/maven-embedder/src/main/java/org/apache/maven/embedder/DefaultMavenEmbedRequest.java
@@ -19,16 +19,20 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+
 import org.apache.maven.settings.Settings;
 
 /**
  * Default implementation of MavenEmbedRequest intefrace.
+ *
  * @author mkleint
  */
-public class DefaultMavenEmbedRequest implements MavenEmbedRequest {
+public class DefaultMavenEmbedRequest
+    implements MavenEmbedRequest
+{
 
     private List inactives;
-    
+
     private List actives;
 
     private Settings settings;
@@ -39,68 +43,85 @@ public class DefaultMavenEmbedRequest implements MavenEmbedRequest {
 
     private ContainerCustomizer customizer;
 
-    /** Creates a new instance of DefaultMavenEmbedRequest */
-    public DefaultMavenEmbedRequest() {
+    /**
+     * Creates a new instance of DefaultMavenEmbedRequest
+     */
+    public DefaultMavenEmbedRequest()
+    {
     }
-   
-    public MavenEmbedRequest addActiveProfile(String profile) {
-        getActiveProfiles().add(profile);
+
+    public MavenEmbedRequest addActiveProfile( String profile )
+    {
+        getActiveProfiles().add( profile );
         return this;
     }
 
-    public MavenEmbedRequest addInactiveProfile(String profile) {
-        getInactiveProfiles().add(profile);
+    public MavenEmbedRequest addInactiveProfile( String profile )
+    {
+        getInactiveProfiles().add( profile );
         return this;
     }
 
-    public MavenEmbedRequest addActiveProfiles(List profiles) {
-        getActiveProfiles().addAll(profiles);
+    public MavenEmbedRequest addActiveProfiles( List profiles )
+    {
+        getActiveProfiles().addAll( profiles );
         return this;
     }
 
-    public MavenEmbedRequest addInactiveProfiles(List profiles) {
-        getInactiveProfiles().addAll(profiles);
+    public MavenEmbedRequest addInactiveProfiles( List profiles )
+    {
+        getInactiveProfiles().addAll( profiles );
         return this;
     }
 
-    public List getActiveProfiles() {
-        if (actives == null) {
+    public List getActiveProfiles()
+    {
+        if ( actives == null )
+        {
             actives = new ArrayList();
         }
         return actives;
     }
 
-    public List getInactiveProfiles() {
-        if (inactives == null) {
+    public List getInactiveProfiles()
+    {
+        if ( inactives == null )
+        {
             inactives = new ArrayList();
         }
         return inactives;
     }
 
-    public MavenEmbedRequest setUserSettingsFile(File user) {
+    public MavenEmbedRequest setUserSettingsFile( File user )
+    {
         userSettings = user;
         return this;
     }
 
-    public MavenEmbedRequest setGlobalSettingsFile(File global) {
+    public MavenEmbedRequest setGlobalSettingsFile( File global )
+    {
         globalSettings = global;
         return this;
     }
 
-    public File getUserSettingsFile() {
+    public File getUserSettingsFile()
+    {
         return userSettings;
     }
 
-    public File getGlobalSettingsFile() {
+    public File getGlobalSettingsFile()
+    {
         return globalSettings;
     }
 
-    public MavenEmbedRequest setConfigurationCustomizer(ContainerCustomizer customizer) {
+    public MavenEmbedRequest setConfigurationCustomizer( ContainerCustomizer customizer )
+    {
         this.customizer = customizer;
         return this;
     }
 
-    public ContainerCustomizer getContainerCustomizer() {
+    public ContainerCustomizer getContainerCustomizer()
+    {
         return",Use the standard coding conventions . . git - svn - id : https : / / svn . apache . org / repos / asf / maven / components / trunk @ 400220 13f79535 - 47bb - 0310 - 9956 - ffa450edef68,"""Format code in ContainerCustomizer and DefaultMavenEmbedRequest classes""","According to the diff, the commit message should be:

""Added author information and improved code formatting and readability""

However, a more concise and descriptive commit message would be:

""Added author information and improved code formatting""

Or, if you want to focus on the changes made:

""Improved code formatting and added author information to interfaces and classes""","""Formatting changes in ContainerCustomizer.java and DefaultMavenEmbedRequest.java""","""Refactor Maven codebase: format interfaces and classes for improved readability and adherence to coding standards.""",Model 1
"diff --git a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
index 4e216c691d..6d0b5bbe3b 100644
--- a/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
+++ b/src/main/java/net/sf/jabref/gui/autocompleter/AutoCompleteListener.java
@@ -370,9 +370,6 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {
                 comp.replaceSelection("""");
 
                 StringBuffer currentword = getCurrentWord(comp);
-                if (currentword == null) {
-                    currentword = new StringBuffer();
-                }
 
                 // only ""real characters"" end up here
                 assert (!Character.isISOControl(ch));
@@ -429,7 +426,7 @@ public class AutoCompleteListener extends KeyAdapter implements FocusListener {
                         && Character.isWhitespace(comp.getText().charAt(comp.getCaretPosition()))) {",Return new StringBuffer instead of null ( and avoid checking for null just to create a new StringBuffer ),"""Remove unnecessary StringBuffer initialization in AutoCompleteListener""","Based on the provided diff, the commit message could be:

""Remove unnecessary null check and creation of StringBuffer in AutoCompleteListener""

This message accurately describes the changes made in the commit, which involve removing a null check and the creation of a StringBuffer in the AutoCompleteListener class.","""Remove unnecessary null check and initialization of currentword in AutoCompleteListener.java""

This commit removes the null check and initialization of the `currentword` variable in the `AutoCompleteListener.java` file. This change assumes that the `getCurrentWord` method will always return a non-null value, so there is no need to check for null or initialize the variable to a new `StringBuffer` object. Additionally, the commit message should also mention that this change is made in the `keyTyped` method of the class.",Removed unnecessary null check and initialization for `currentword` in `AutoCompleteListener`.,Model 4
"diff --git a/appcompat/api/1.1.0-alpha03.txt b/appcompat/api/1.1.0-alpha03.txt
index 93a4ae1bbf9..d387b2216e3 100644
--- a/appcompat/api/1.1.0-alpha03.txt
+++ b/appcompat/api/1.1.0-alpha03.txt
@@ -289,7 +289,9 @@ package androidx.appcompat.app {
     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa
     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c
     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d
-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3
+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0
     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff
     field public static final int MODE_NIGHT_NO = 1; // 0x1
     field public static final int MODE_NIGHT_YES = 2; // 0x2
diff --git a/appcompat/api/current.txt b/appcompat/api/current.txt
index 93a4ae1bbf9..d387b2216e3 100644
--- a/appcompat/api/current.txt
+++ b/appcompat/api/current.txt
@@ -289,7 +289,9 @@ package androidx.appcompat.app {
     field public static final int FEATURE_ACTION_MODE_OVERLAY = 10; // 0xa
     field public static final int FEATURE_SUPPORT_ACTION_BAR = 108; // 0x6c
     field public static final int FEATURE_SUPPORT_ACTION_BAR_OVERLAY = 109; // 0x6d
-    field public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field @Deprecated public static final int MODE_NIGHT_AUTO = 0; // 0x0
+    field public static final int MODE_NIGHT_AUTO_BATTERY = 3; // 0x3
+    field @Deprecated public static final int MODE_NIGHT_AUTO_TIME = 0; // 0x0
     field public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1; // 0xffffffff
     field public static final int MODE_NIGHT_NO = 1; // 0x1
     field public static final int MODE_NIGHT_YES = 2; // 0x2
diff --git a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
index e16949d5f8a..a536d3097a7 100644
--- a/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
+++ b/appcompat/src/androidTest/java/androidx/appcompat/app/NightModeTestCase.java
@@ -102,7 +102,7 @@ public class NightModeTestCase {
     }
 
     @Test
-    public void testNightModeAutoRecreatesOnTimeChange() throws Throwable {
+    public void testNightModeAutoTimeRecreatesOnTimeChange() throws Throwable {
         // Create a fake TwilightManager and set it as the app instance
         final FakeTwilightManager twilightManager = new FakeTwilightManager();
         TwilightManager.setInstance(twilightManager);
@@ -113,8 +113,8 @@ public class NightModeTestCase {
         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
 
         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically
-        final NightModeActivity newActivity =
-                setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);
+        final NightModeActivity newActivity = setLocalNightModeAndWaitForRecreate(activity,
+                        AppCompatDelegate.MODE_NIGHT_AUTO_TIME);
         final AppCompatDelegateImpl newDelegate =
                 (AppCompatDelegateImpl) newActivity.getDelegate();
 
@@ -123,13 +123,13 @@ public class NightModeTestCase {
             @Override
             public void run() {
                 twilightManager.setIsNight(true);
-                newDelegate.getAutoNightModeManager().dispatchTimeChanged();
+                newDelegate.getAutoTimeNightModeManager().onChange();
             }
         });
 
         RecreatedAppCompatActivity.sResumed = new CountDownLatch(1);
         assertTrue(RecreatedAppCompatActivity.sResumed.await(1, TimeUnit.SECONDS));
-        // At this point recreate that has been triggered by dispatchTimeChanged call
+        // At this point recreate that has been triggered by onChange call
         // has completed
 
         // Check that the text has changed, signifying that night resources are being used
@@ -137,7 +137,7 @@ public class NightModeTestCase {
     }
 
     @Test
-    public void testNightModeAutoRecreatesOnResume() throws Throwable {
+    public void testNightModeAutoTimeRecreatesOnResume() throws Throwable {
         // Create a fake TwilightManager and set it as the app instance
         final FakeTwilightManager twilightManager = new FakeTwilightManager();
         TwilightManager.setInstance(twilightManager);
@@ -145,7 +145,8 @@ public class NightModeTestCase {
         NightModeActivity activity = mActivityTestRule.getActivity();
 
         // Set MODE_NIGHT_AUTO so that we will change to night mode automatically
-        activity = setLocalNightModeAndWaitForRecreate(activity, AppCompatDelegate.MODE_NIGHT_AUTO);
+        activity = setLocalNightModeAndWaitForRecreate(activity,
+                AppCompatDelegate.MODE_NIGHT_AUTO_TIME);
         // Verify that we're currently in day mode
         onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
 
diff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
index 8dd19486361..1fc56d27ca6 100644
--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
@@ -91,39 +91,60 @@ public abstract class AppCompatDelegate {
     static final String TAG = ""AppCompatDelegate"";
 
     /**
-     * Mode which means to not use night mode, and therefore prefer {@code notnight} qualified
-     * resources where available, regardless of the time.
-     *
-     * @see #setLocalNightMode(int)
-     */
-    public static final int MODE_NIGHT_NO = 1;
-
-    /**
-     * Mode which means to always use night mode, and therefore prefer {@code night} qualified
-     * resources where available, regardless of the time.
+     * Mode which uses the system's night mode setting to determine if it is night or not.
      *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_YES = 2;
+    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;
 
     /**
-     * Mode which means to use night mode when it is determined that it is night or not.
+     * Night mode which switches between dark and light mode depending on the time of day
+     * (dark at night, light in the day).
      *
      * <p>The calculation used to determine whether it is night or not makes use of the location
      * APIs (if this app has the necessary permissions). This allows us to generate accurate
      * sunrise and sunset times. If this app does not have permission to access the location APIs
      * then we use hardcoded times which will be less accurate.</p>
      *
+     * @deprecated Automatic switching of dark/light based on the current time is deprecated.
+     * Considering using an explicit setting, or {@link #MODE_NIGHT_AUTO_BATTERY}.
+     */
+    @Deprecated
+    public static final int MODE_NIGHT_AUTO_TIME = 0;
+
+    /**
+     * @deprecated Use {@link AppCompatDelegate#MODE_NIGHT_AUTO_TIME} instead
+     */
+    @Deprecated
+    public static final int MODE_NIGHT_AUTO = MODE_NIGHT_AUTO_TIME;
+
+    /**
+     * Night mode which uses always uses a light mode, enabling {@code notnight} qualified
+     * resources regardless of the time.
+     *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_AUTO = 0;
+    public static final int MODE_NIGHT_NO = 1;
 
     /**
-     * Mode which uses the system's night mode setting to determine if it is night or not.
+     * Night mode which uses always uses a dark mode, enabling {@code night} qualified
+     * resources regardless of the time.
      *
      * @see #setLocalNightMode(int)
      */
-    public static final int MODE_NIGHT_FOLLOW_SYSTEM = -1;
+    public static final int MODE_NIGHT_YES = 2;
+
+    /**
+     * Night mode which uses a dark mode when the system's 'Battery Saver' feature is enabled,
+     * otherwise it uses a 'light mode'. This mode can help the device to decrease power usage,
+     * depending on the display technology in the device.
+     *
+     * <em>Please note: this mode should only be used when running on devices which do not
+     * provide a similar device-wide setting.</em>
+     *
+     * @see #setLocalNightMode(int)
+     */
+    public static final int MODE_NIGHT_AUTO_BATTERY = 3;
 
     static final int MODE_NIGHT_UNSPECIFIED = -100;
 
@@ -132,8 +153,8 @@ public abstract class AppCompatDelegate {
 
     /** @hide */
     @RestrictTo(LIBRARY_GROUP)
-    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO, MODE_NIGHT_FOLLOW_SYSTEM,
-            MODE_NIGHT_UNSPECIFIED})
+    @IntDef({MODE_NIGHT_NO, MODE_NIGHT_YES, MODE_NIGHT_AUTO_TIME, MODE_NIGHT_FOLLOW_SYSTEM,
+            MODE_NIGHT_UNSPECIFIED, MODE_NIGHT_AUTO_BATTERY})
     @Retention(RetentionPolicy.SOURCE)
     public @interface NightMode {}
 
@@ -441,8 +462,8 @@ public abstract class AppCompatDelegate {
      * automatically recreated or its {@link Configuration} updated. Which one depends on how
      * the component is setup (via {@code android:configChanges} or similar).</p>
      *
-     * <p>You can notified when the night changes by overriding the
-     * {@link AppCompatCallback#onNightModeChanged(int)} method.</p>
+     * <p>You can be notified when the night changes by overriding the
+     * {@link AppCompatActivity#onNightModeChanged(int)} method.</p>
      *
      * @see #setDefaultNightMode(int)
      * @see #setLocalNightMode(int)
@@ -475,10 +496,11 @@ public abstract class AppCompatDelegate {
      */
     public static void setDefaultNightMode(@NightMode int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
             case MODE_NIGHT_NO:
             case MODE_NIGHT_YES:
             case MODE_NIGHT_FOLLOW_SYSTEM:
+            case MODE_NIGHT_AUTO_TIME:
+            case MODE_NIGHT_AUTO_BATTERY:
                 sDefaultNightMode = mode;
                 break;
             default:
diff --git a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
index 88d967cd381..5f91b46b8b2 100644
--- a/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
+++ b/appcompat/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
@@ -20,6 +20,8 @@ import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 import static android.view.Window.FEATURE_OPTIONS_PANEL;
 
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
+
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.Dialog;
@@ -42,6 +44,7 @@ import android.os.Build;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.PowerManager;
 import android.text.TextUtils;
 import android.util.AndroidRuntimeException;
 import android.util.AttributeSet;
@@ -71,6 +74,7 @@ import androidx.annotation.IdRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
+import androidx.annotation.RestrictTo;
 import androidx.annotation.StyleRes;
 import androidx.annotation.VisibleForTesting;
 import androidx.appcompat.R;
@@ -221,7 +225,8 @@ class AppCompatDelegateImpl extends AppCompatDelegate
     private boolean mActivityHandlesUiMode;
     private boolean mActivityHandlesUiModeChecked;
 
-    private AutoNightModeManager mAutoNightModeManager;
+    private AutoNightModeManager mAutoTimeNightModeManager;
+    private AutoNightModeManager mAutoBatteryNightModeManager;
 
     boolean mInvalidatePanelMenuPosted;
     int mInvalidatePanelMenuFeatures;
@@ -448,8 +453,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
 
         // Make sure we clean up any receivers setup for AUTO mode
-        if (mAutoNightModeManager != null) {
-            mAutoNightModeManager.cleanup();
+        if (mAutoTimeNightModeManager != null) {
+            mAutoTimeNightModeManager.cleanup();
+        }
+        if (mAutoBatteryNightModeManager != null) {
+            mAutoBatteryNightModeManager.cleanup();
         }
     }
 
@@ -517,8 +525,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
 
         // Make sure we clean up any receivers setup for AUTO mode
-        if (mAutoNightModeManager != null) {
-            mAutoNightModeManager.cleanup();
+        if (mAutoTimeNightModeManager != null) {
+            mAutoTimeNightModeManager.cleanup();
+        }
+        if (mAutoBatteryNightModeManager != null) {
+            mAutoBatteryNightModeManager.cleanup();
         }
     }
 
@@ -2021,10 +2032,11 @@ class AppCompatDelegateImpl extends AppCompatDelegate
             applied = updateForNightMode(modeToApply);
         }
 
-        if (nightMode == MODE_NIGHT_AUTO) {
+        if (nightMode == MODE_NIGHT_AUTO_TIME) {
             // If we're already been started, we may need to setup auto mode again
-            ensureAutoNightModeManager();
-            mAutoNightModeManager.setup();
+            getAutoTimeNightModeManager().setup();
+        } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
+            getAutoBatteryNightModeManager().setup();
         }
 
         return applied;
@@ -2033,25 +2045,23 @@ class AppCompatDelegateImpl extends AppCompatDelegate
     @Override
     public void setLocalNightMode(@NightMode final int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
             case MODE_NIGHT_NO:
             case MODE_NIGHT_YES:
             case MODE_NIGHT_FOLLOW_SYSTEM:
+            case MODE_NIGHT_AUTO_TIME:
+            case MODE_NIGHT_AUTO_BATTERY:
                 if (mLocalNightMode != mode) {
                     mLocalNightMode = mode;
                     applyDayNight();
                 }
                 break;
-            default:
-                Log.i(TAG, ""setLocalNightMode() called with an unknown mode"");
-                break;
         }
     }
 
     @ApplyableNightMode
     int mapNightMode(@NightMode final int mode) {
         switch (mode) {
-            case MODE_NIGHT_AUTO:
+            case MODE_NIGHT_AUTO_TIME:
                 if (Build.VERSION.SDK_INT >= 23) {
                     UiModeManager uiModeManager = mContext.getSystemService(UiModeManager.class);
                     if (uiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO) {
@@ -2060,14 +2070,14 @@ class AppCompatDelegateImpl extends AppCompatDelegate
                         return MODE_NIGHT_FOLLOW_SYSTEM;
                     }
                 }
-                ensureAutoNightModeManager();
-                return mAutoNightModeManager.getApplyableNightMode();
+                return getAutoTimeNightModeManager().getApplyableNightMode();
+            case MODE_NIGHT_AUTO_BATTERY:
+                return getAutoBatteryNightModeManager().getApplyableNightMode();
             case MODE_NIGHT_UNSPECIFIED:
                 // If we don't have a mode specified, just let the system handle it
                 return MODE_NIGHT_FOLLOW_SYSTEM;
-            default:
-                return mode;
         }
+        return mode;
     }
 
     @NightMode
@@ -2151,16 +2161,24 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         return handled;
     }
 
-    private void ensureAutoNightModeManager() {
-        if (mAutoNightModeManager == null) {
-            mAutoNightModeManager = new AutoNightModeManager(TwilightManager.getInstance(mContext));
+    /**
+     * @hide
+     */
+    @NonNull
+    @RestrictTo(LIBRARY)
+    final AutoNightModeManager getAutoTimeNightModeManager() {
+        if (mAutoTimeNightModeManager == null) {
+            mAutoTimeNightModeManager = new AutoTimeNightModeManager(
+                    TwilightManager.getInstance(mContext));
         }
+        return mAutoTimeNightModeManager;
     }
 
-    @VisibleForTesting
-    final AutoNightModeManager getAutoNightModeManager() {
-        ensureAutoNightModeManager();
-        return mAutoNightModeManager;
+    private AutoNightModeManager getAutoBatteryNightModeManager() {
+        if (mAutoBatteryNightModeManager == null) {
+            mAutoBatteryNightModeManager = new AutoBatteryNightModeManager(mContext);
+        }
+        return mAutoBatteryNightModeManager;
     }
 
     private boolean isActivityManifestHandlingUiMode() {
@@ -2699,67 +2717,110 @@ class AppCompatDelegateImpl extends AppCompatDelegate
         }
     }
 
+    /**
+     * @hide
+     */
     @VisibleForTesting
-    final class AutoNightModeManager {
-        private TwilightManager mTwilightManager;
-        private boolean mIsNight;
-
-        private BroadcastReceiver mAutoTimeChangeReceiver;
-        private IntentFilter mAutoTimeChangeReceiverFilter;
-
-        AutoNightModeManager(@NonNull TwilightManager twilightManager) {
-            mTwilightManager = twilightManager;
-            mIsNight = twilightManager.isNight();
-        }
+    @RestrictTo(LIBRARY)
+    abstract class AutoNightModeManager {
+        private BroadcastReceiver mReceiver;
 
         @ApplyableNightMode
-        int getApplyableNightMode() {
-            mIsNight = mTwilightManager.isNight();
-            return mIsNight ? MODE_NIGHT_YES : MODE_NIGHT_NO;
-        }
+        abstract int getApplyableNightMode();
 
-        void dispatchTimeChanged() {
-            final boolean isNight = mTwilightManager.isNight();
-            if (isNight != mIsNight) {
-                mIsNight = isNight;
-                applyDayNight();
-            }
-        }
+        abstract void onChange();
 
         void setup() {
             cleanup();
 
-            // If we're set to AUTO, we register a receiver to be notified on time changes. The
-            // system only sends the tick out every minute, but that's enough fidelity for our use
-            // case
-            if (mAutoTimeChangeReceiver == null) {
-                mAutoTimeChangeReceiver = new BroadcastReceiver() {
+            final IntentFilter filter = createIntentFilterForBroadcastReceiver();
+            if (filter == null || filter.countActions() == 0) {
+                // Null or empty IntentFilter, skip
+                return;
+            }
+
+            if (mReceiver == null) {
+                mReceiver = new BroadcastReceiver() {
                     @Override
                     public void onReceive(Context context, Intent intent) {
-                        if (DEBUG) {
-                            Log.d(""AutoTimeChangeReceiver"", ""onReceive | Intent: "" + intent);
-                        }
-                        dispatchTimeChanged();
+                        onChange();
                     }
                 };
             }
-            if (mAutoTimeChangeReceiverFilter == null) {
-                mAutoTimeChangeReceiverFilter = new IntentFilter();
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_CHANGED);
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
-                mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_TICK);
-            }
-            mContext.registerReceiver(mAutoTimeChangeReceiver, mAutoTimeChangeReceiverFilter);
+            mContext.registerReceiver(mReceiver, filter);
         }
 
+        @Nullable
+        abstract IntentFilter createIntentFilterForBroadcastReceiver();
+
         void cleanup() {
-            if (mAutoTimeChangeReceiver != null) {
-                mContext.unregisterReceiver(mAutoTimeChangeReceiver);
-                mAutoTimeChangeReceiver = null;
+            if (mReceiver != null) {
+",Add MODE_NIGHT_AUTO_BATTERY option for AppCompat .,"""Deprecate MODE_NIGHT_AUTO and introduce MODE_NIGHT_AUTO_BATTERY and MODE_NIGHT_AUTO_TIME""","""Deprecate MODE_NIGHT_AUTO and introduce MODE_NIGHT_AUTO_BATTERY and MODE_NIGHT_AUTO_TIME""","The commit message should be:

""Add new night mode constant MODE_NIGHT_AUTO_BATTERY and deprecate MODE_NIGHT_AUTO_TIME""

Explanation: The commit introduces a new constant `MODE_NIGHT_AUTO_BATTERY` for night mode which uses a dark mode when the system's 'Battery Saver' feature is enabled, otherwise it uses a 'light mode'. Also, it deprecates `MODE_NIGHT_AUTO_TIME` constant and renames `MODE_NIGHT_AUTO` to `MODE_NIGHT_AUTO_TIME`. The relevant test cases are updated accordingly.",Implemented new night mode settings; deprecated older modes and updated handling for automatic night mode based on time or battery.,Model 1
"diff --git a/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java b/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java
new file mode 100644
index 00000000000..0e0dc9ba0db
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/bean/BeanExplicitMethodTest.java
@@ -0,0 +1,65 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.bean;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.JndiRegistry;
+
+/**
+ * @version $Revision$
+ */
+public class BeanExplicitMethodTest extends ContextTestSupport {
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        jndi.bind(""foo"", new MyOtherFooBean());
+        return jndi;
+    }
+
+    public void testStringEcho() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedBodiesReceived(""WorldWorld"");
+
+        template.sendBody(""direct:start"", ""World"");
+
+        assertMockEndpointsSatisfied();
+    }
+
+    public void testIntegerEcho() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedBodiesReceived(25);
+
+        template.sendBody(""direct:start"", 5);
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:start"")
+                    .beanRef(""foo"", ""echo"")
+                    .to(""mock:result"");
+            }
+        };
+    }
+}
diff --git a/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java b/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java
new file mode 100644
index 00000000000..f90f80d20b6
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/bean/MyOtherFooBean.java
@@ -0,0 +1,31 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.bean;
+
+/**
+ * @version $Revision$
+ */
+public class MyOtherFooBean {
+
+    public String echo(String s) {
+        return s + s;
+    }
+
+    public Integer echo(Integer i) {
+        return i.intValue() * i.intValue();
+    }
+}",Added unit test .,"""Added test for explicit method invocation on a bean""",Added BeanExplicitMethodTest and MyOtherFooBean for explicit method invocation testing.,"Added BeanExplicitMethodTest and MyOtherFooBean classes for testing the bean component in Apache Camel.

The BeanExplicitMethodTest class tests the behavior of the bean component when invoking explicit methods on a bean, while the MyOtherFooBean class provides the bean to be used in the tests. The tests cover both string and integer input types.",Added BeanExplicitMethodTest and MyOtherFooBean to test different echo methods for string and integer inputs.,Model 1
"diff --git a/qa/test-db-upgrade/pom.xml b/qa/test-db-upgrade/pom.xml
index 21f18f60b2..5ea2aaa350 100755
--- a/qa/test-db-upgrade/pom.xml
+++ b/qa/test-db-upgrade/pom.xml
@@ -358,6 +358,10 @@
 
                 <exclude>**/ProcessDiagramRetrievalTest.java</exclude>
                 <exclude>**/ProcessDiagramParseTest.java</exclude>
+
+                <!-- as the patch scripts of current version are not applied for db-upgrade test suite
+                     this must be skipped, it is already tested in the unit tests -->
+                <exclude>**/SchemaLogEnsureSqlScriptTest.java</exclude>",exclude SchemaLogEnsureSqlScriptTest .,"""Exclude SchemaLogEnsureSqlScriptTest from db-upgrade test suite""","""Skip SchemaLogEnsureSqlScriptTest in db-upgrade test suite""","""Exclude SchemaLogEnsureSqlScriptTest.java from db-upgrade test suite as current version's patch scripts are not applied""

This commit message explains the reason for the change and what the change is. It is important to provide context for code changes so that others can understand the reasoning behind them.",Exclude SchemaLogEnsureSqlScriptTest from db-upgrade test suite due to unpatched current version tested elsewhere.,Model 4
"diff --git a/jaxws/.hgtags b/jaxws/.hgtags
index 419e26ca52..5b9ee31ae5 100644
--- a/jaxws/.hgtags
+++ b/jaxws/.hgtags
@@ -976,3 +976,4 @@ a24e8384bfc34d7df62b6707b5e8b4d403b6a3b6 jdk8u202-b04
 7458800f0a265f1b8d939e982ffbed62f8262d22 jdk8u202-b07
 99fbc435f2faedf1dd68e80d679ebf4abd8c98c9 jdk8u202-b08
 a51e13337c7b4575acf7930ebf80ccbfc405fa17 jdk8u202-b25
+81d8126f05e5290e3974d4f3ea7360481676a78c jdk8u202-b26",Added tag jdk8u202 - b26 for changeset d290c0f083ab,"""Added tag jdk8u202-b26""","""Update .hgtags to include jdk8u202-b26""","Based on the diff you provided, it seems like there's no actual code change, only an update to the .hgtags file. This file is typically used by version control systems like Mercurial (hg) to keep track of tags or labels for specific commits.

The new line added is: `81d8126f05e5290e3974d4f3ea7360481676a78c jdk8u202-b26`

So, a suitable commit message for this change could be: ""Updated .hgtags file with new tag for commit 81d8126f05e5290e3974d4f3ea7360481676a78c: jdk8u202-b26""",Added new version tag 81d8126f05e5290e3974d4f3ea7360481676a78c for jdk8u202-b26.,Model 1
"diff --git a/java/org/apache/catalina/Context.java b/java/org/apache/catalina/Context.java
index 9e5c467704..ef2bd3cfcf 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1183,5 +1183,11 @@ public interface Context extends Container {
      */
     public JspConfigDescriptor getJspConfigDescriptor();
 
+    /**
+     * Add a URL for a JAR that contains static resources in a
+     * META-INF/resources directory that should be included in the static
+     * resources for this context.
+     */
+    public void addResourceJarUrl(URL url);
 }
 
diff --git a/java/org/apache/catalina/core/LocalStrings.properties b/java/org/apache/catalina/core/LocalStrings.properties
index ddabbdff4f..2a774697b7 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -115,6 +115,7 @@ standardContext.loginConfig.loginPage=Form login page {0} must start with a ''/'
 standardContext.loginConfig.loginWarning=WARNING: Form login page {0} must start with a ''/'' in Servlet 2.4
 standardContext.loginConfig.required=LoginConfig cannot be null
 standardContext.mappingError=MAPPING configuration error for relative URI {0}
+standardContext.noResourceJar=Resource JARs are not supported. The JAR found at [{0}] will no be used to provide static content for context with path [{1}]
 standardContext.notFound=The requested resource ({0}) is not available.
 standardContext.notReloadable=Reloading is disabled on this Context
 standardContext.notStarted=Context has not yet been started
diff --git a/java/org/apache/catalina/core/StandardContext.java b/java/org/apache/catalina/core/StandardContext.java
index eedc91c1f9..4c1c58bf42 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -961,6 +961,21 @@ public class StandardContext
     }
 
 
+    /**
+     * Add a URL for a JAR that contains static resources in a
+     * META-INF/resources directory that should be included in the static
+     * resources for this context.
+     */
+    public void addResourceJarUrl(URL url) {
+        if (webappResources instanceof BaseDirContext) {
+            ((BaseDirContext) webappResources).addResourcesJar(url);
+        } else {
+            log.error(sm.getString(""standardContext.noResourceJar"", url,
+                    getPath()));
+        }
+    }
+    
+    
     /**
      * Set the current alias configuration. The list of aliases should be of the
      * form ""/aliasPath1=docBase1,/aliasPath2=docBase2"" where aliasPathN must
@@ -2122,11 +2137,13 @@ public class StandardContext
             return;
 
         if (resources instanceof BaseDirContext) {
+            // Caching
             ((BaseDirContext) resources).setCached(isCachingAllowed());
             ((BaseDirContext) resources).setCacheTTL(getCacheTTL());
             ((BaseDirContext) resources).setCacheMaxSize(getCacheMaxSize());
             ((BaseDirContext) resources).setCacheObjectMaxSize(
                     getCacheObjectMaxSize());
+            // Alias support
             ((BaseDirContext) resources).setAliases(getAliases());
         }
         if (resources instanceof FileDirContext) {
diff --git a/java/org/apache/catalina/startup/ContextConfig.java b/java/org/apache/catalina/startup/ContextConfig.java
index b248c68326..81c95aef71 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -38,6 +38,7 @@ import java.util.Properties;
 import java.util.Set;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
 
 import javax.servlet.ServletContext;
 
@@ -1237,6 +1238,8 @@ public class ContextConfig
             if (context.getLogEffectiveWebXml()) {
                 log.info(""web.xml:\n"" + mergedWebXml);
             }
+            
+            processResourceJARs(orderedFragments);
         } else {
             // Apply unmerged web.xml to Context
             webXml.configureContext(context);
@@ -1244,6 +1247,40 @@ public class ContextConfig
     }
 
     
+    /**
+     * Scan JARs that contain web-fragment.xml files that will be used to
+     * configure this application to see if they also contain static resources.
+     * If static resources are found, add them to the context. Resources are
+     * added in web-fragment.xml priority order.
+     */
+    protected void processResourceJARs(Set<WebXml> fragments) {
+        for (WebXml fragment : fragments) {
+            URL jarUrl = fragment.getURL();
+            JarFile jarFile = null;
+            try {
+                JarURLConnection conn =
+                    (JarURLConnection) jarUrl.openConnection();
+                jarFile = conn.getJarFile();   
+                ZipEntry entry = jarFile.getEntry(""META-INF/resources/"");
+                if (entry != null) {
+                    context.addResourceJarUrl(jarUrl);
+                }
+            } catch (IOException ioe) {
+                log.error(sm.getString(""contextConfig.resourceJarFail"", jarUrl,
+                        context.getPath()));
+            } finally {
+                if (jarFile != null) {
+                    try {
+                        jarFile.close();
+                    } catch (IOException e) {
+                        // Ignore
+                    }
+                }
+            }
+        }
+    }
+    
+    
     /**
      * Identify the default web.xml to be used and obtain an input source for
      * it.
diff --git a/java/org/apache/catalina/startup/LocalStrings.properties b/java/org/apache/catalina/startup/LocalStrings.properties
index 6f3fe5d478..5644b079f9 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -46,6 +46,7 @@ contextConfig.jar=Unable to process resource [{0}] for annotations
 contextConfig.jndiUrl=Unable to process JNDI URL [{0}] for annotations
 contextConfig.jndiUrlNotDirContextConn=The connection created for URL [{0}] was not a DirContextURLConnection
 contextConfig.missingRealm=No Realm has been configured to authenticate against
+contextConfig.resourceJarFail=Failed to processes JAR found at URL [{0}] for static resources to be included in context with path [{0}]
 contextConfig.role.auth=WARNING: Security role name {0} used in an <auth-constraint> without being defined in a <security-role>
 contextConfig.role.link=WARNING: Security role name {0} used in a <role-link> without being defined in a <security-role>
 contextConfig.role.runas=WARNING: Security role name {0} used in a <run-as> without being defined in a <security-role>
diff --git a/java/org/apache/naming/resources/BaseDirContext.java b/java/org/apache/naming/resources/BaseDirContext.java
index f8b34e5ad0..89e50b3c5d 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -19,11 +19,18 @@
 package org.apache.naming.resources;
 
 import java.io.File;
+import java.io.IOException;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.jar.JarFile;
+import java.util.zip.ZipEntry;
 
 import javax.naming.Binding;
 import javax.naming.Context;
@@ -131,9 +138,38 @@ public abstract class BaseDirContext implements DirContext {
         new HashMap<String,BaseDirContext>();
 
 
+    /**
+     * Alternate / backup DirContexts for static resources. These will be
+     * searched in the order they are added if the requested resource cannot be
+     * found in the primary DirContext. 
+     */
+    protected List<DirContext> altDirContexts = new ArrayList<DirContext>();
+    
+    
     // ------------------------------------------------------------- Properties
 
 
+    /**
+     * Add a resources JAR. The contents of /META-INF/resources/ will be used if
+     * a requested resource can not be found in the main context.
+     */
+    public void addResourcesJar(URL url) {
+        try {
+            JarURLConnection conn = (JarURLConnection) url.openConnection();
+            JarFile jarFile = conn.getJarFile();   
+            ZipEntry entry = jarFile.getEntry(""/"");
+            WARDirContext warDirContext = new WARDirContext(jarFile,
+                    new WARDirContext.Entry(""/"", entry));
+            warDirContext.loadEntries();
+            altDirContexts.add(warDirContext);
+        } catch (IOException ioe) {
+            // TODO: Log failure
+        } finally {
+            // TODO: Clean up
+        }
+    }
+    
+    
     /**
      * Add an alias.
      */
@@ -350,7 +386,25 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.doGetRealPath(result.aliasName);
             }
         }
-        return doGetRealPath(name);
+        
+        // Next do a standard getRealPath()
+        String path = doGetRealPath(name);
+
+        if (path != null)
+            return path;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext){
+                path = ((BaseDirContext) altDirContext).getRealPath(
+                        ""META-INF/resources/"" + name);
+                if (path != null)
+                    return path;
+            }
+        }
+        
+        // Really not found
+        return null; 
     }
 
     // -------------------------------------------------------- Context Methods
@@ -380,13 +434,29 @@ public abstract class BaseDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     public final Object lookup(String name) throws NamingException {
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
                 return result.dirContext.lookup(result.aliasName);
             }
         }
-        return doLookup(name);
+        
+        // Next do a standard lookup
+        Object obj = doLookup(name);
+
+        if (obj != null)
+            return obj;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            obj = altDirContext.lookup(""META-INF/resources/"" + name);
+            if (obj != null)
+                return obj;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
     /**
@@ -589,7 +659,31 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.listBindings(result.aliasName);
             }
         }
-        return doListBindings(name);
+        
+        // Next do a standard lookup
+        NamingEnumeration<Binding> bindings = doListBindings(name);
+
+        if (bindings != null)
+            return bindings;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                bindings = ((BaseDirContext) altDirContext).doListBindings(
+                        ""META-INF/resources/"" + name);
+            else {
+                try {
+                    bindings = altDirContext.listBindings(name);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (bindings != null)
+                return bindings;
+        }
+
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
 
@@ -912,6 +1006,8 @@ public abstract class BaseDirContext implements DirContext {
      */
     public final Attributes getAttributes(String name, String[] attrIds)
         throws NamingException {
+        
+        // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
             if (result.dirContext != null) {
@@ -919,7 +1015,31 @@ public abstract class BaseDirContext implements DirContext {
                         result.aliasName, attrIds);
             }
         }
-        return doGetAttributes(name, attrIds);
+        
+        // Next do a standard lookup
+        Attributes attrs = doGetAttributes(name, attrIds);
+
+        if (attrs != null)
+            return attrs;
+        
+        // Check the alternate locations
+        for (DirContext altDirContext : altDirContexts) {
+            if (altDirContext instanceof BaseDirContext)
+                attrs = ((BaseDirContext) altDirContext).doGetAttributes(
+                        ""META-INF/resources/"" + name, attrIds);
+            else {
+                try {
+                    attrs = altDirContext.getAttributes(name, attrIds);
+                } catch (NamingException ne) {
+                    // Ignore
+                }
+            }
+            if (attrs != null)
+                return attrs;
+        }
+        
+        // Really not found
+        throw new NamingException(sm.getString(""resources.notFound"", name));
     }
 
     /**
diff --git a/java/org/apache/naming/resources/FileDirContext.java b/java/org/apache/naming/resources/FileDirContext.java
index 1f2c872da0..ba02c11603 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -202,8 +202,7 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-            throw new NamingException
-                (sm.getString(""resources.notFound"", name));
+            return null;
 
         if (file.isDirectory()) {
             FileDirContext tempContext = new FileDirContext(env);
@@ -326,9 +325,8 @@ public class FileDirContext extends BaseDirContext {
         File file = file(name);
 
         if (file == null)
-",Add support for loading static resources from / META - INF / resources inside JARs bundled with a web application .,"""Added support for including static resources from JARs in the context's resources""","""Added support for static resources in JARs included in the web application context""","The commit message should be: ""Add support for static resources in JARs with META-INF/resources directory""

The changes include:

* Adding a new method `addResourceJarUrl(URL url)` to the `Context` interface and its implementation in `StandardContext` class. This method is used to add a URL for a JAR that contains static resources in a META-INF/resources directory that should be included in the static resources for this context.
* Updating the `processResourceJARs(Set<WebXml> fragments)` method in `ContextConfig` class to scan JARs that contain web-fragment.xml files that will be used to configure the application to see if they also contain static resources. If static resources are found, they are added to the context using the `addResourceJarUrl(URL url)` method.
* Adding error message for the case when Resource JARs are not supported in `LocalStrings.properties` file.
* Updating the `getRealPath(String name)`, `lookup(String name)`, `listBindings(String name)`, and `getAttributes(String name, String[] attrIds)` methods in `BaseDirContext` class to check for alternate locations for static resources if the requested resource cannot be found in the primary DirContext. The alternate locations are the contents of /META-INF/resources/ in the added JARs.
* Adding a new method `addResourcesJar(URL url)` to the `WARDirContext` class to add a resources JAR. The contents of /META-INF/resources/ will be used if a requested resource cannot be found in the main context.
* Adding a new list `altDirContexts` to the `BaseDirContext` class to store the alternate DirContexts for static resources. These will be searched in the order they are added if the requested resource cannot be found in the primary DirContext.","""Added support for static resource JARs in context and enhanced resource lookup mechanism in BaseDirContext.""",Model 4
"diff --git a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
index cad28903a6..c28a2cf269 100644
--- a/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java
@@ -26,6 +26,7 @@ import java.net.URI;
 import java.net.URL;
 import java.nio.charset.Charset;
 import java.nio.file.Path;
+import java.time.ZoneId;
 import java.util.Collection;
 import java.util.Currency;
 import java.util.HashMap;
@@ -89,19 +90,6 @@ import org.springframework.util.ClassUtils;
  */
 public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {
 
-	private static Class<?> zoneIdClass;
-
-	static {
-		try {
-			zoneIdClass = ClassUtils.forName(""java.time.ZoneId"", PropertyEditorRegistrySupport.class.getClassLoader());
-		}
-		catch (ClassNotFoundException ex) {
-			// Java 8 ZoneId class not available
-			zoneIdClass = null;
-		}
-	}
-
-
 	private ConversionService conversionService;
 
 	private boolean defaultEditorsActive = false;
@@ -222,9 +210,7 @@ public class PropertyEditorRegistrySupport implements PropertyEditorRegistry {
 		this.defaultEditors.put(URI.class, new URIEditor());
 		this.defaultEditors.put(URL.class, new URLEditor());
 		this.defaultEditors.put(UUID.class, new UUIDEditor());
-		if (zoneIdClass != null) {
-			this.defaultEditors.put(zoneIdClass, new ZoneIdEditor());
-		}
+		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());
 
 		// Default instances of collection editors.
 		// Can be overridden by registering custom instances of those as custom editors.
diff --git a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
index 2c7c60a041..ed7194c7cb 100644
--- a/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
+++ b/spring-context/src/main/java/org/springframework/format/support/DefaultFormattingConversionService.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -21,10 +21,10 @@ import org.springframework.format.FormatterRegistry;
 import org.springframework.format.datetime.DateFormatterRegistrar;
 import org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar;
 import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar;
+import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;
 import org.springframework.format.number.money.CurrencyUnitFormatter;
 import org.springframework.format.number.money.Jsr354NumberFormatAnnotationFormatterFactory;
 import org.springframework.format.number.money.MonetaryAmountFormatter;
-import org.springframework.format.number.NumberFormatAnnotationFormatterFactory;
 import org.springframework.util.ClassUtils;
 import org.springframework.util.StringValueResolver;
 
@@ -49,9 +49,6 @@ public class DefaultFormattingConversionService extends FormattingConversionServ
 	private static final boolean jsr354Present = ClassUtils.isPresent(
 			""javax.money.MonetaryAmount"", DefaultFormattingConversionService.class.getClassLoader());
 
-	private static final boolean jsr310Present = ClassUtils.isPresent(
-			""java.time.LocalDate"", DefaultFormattingConversionService.class.getClassLoader());
-
 	private static final boolean jodaTimePresent = ClassUtils.isPresent(
 			""org.joda.time.LocalDate"", DefaultFormattingConversionService.class.getClassLoader());
 
@@ -112,10 +109,10 @@ public class DefaultFormattingConversionService extends FormattingConversionServ
 		}
 
 		// Default handling of date-time values
-		if (jsr310Present) {
-			// just handling JSR-310 specific date and time types
-			new DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);
-		}
+
+		// just handling JSR-310 specific date and time types
+		new DateTimeFormatterRegistrar().registerFormatters(formatterRegistry);
+
 		if (jodaTimePresent) {
 			// handles Joda-specific types as well as Date, Calendar, Long
 			new JodaTimeFormatterRegistrar().registerFormatters(formatterRegistry);
diff --git a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
index 2cc1c5b3fa..1530b8daad 100644
--- a/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
+++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java
@@ -23,7 +23,6 @@ import java.util.UUID;
 
 import org.springframework.core.convert.ConversionService;
 import org.springframework.core.convert.converter.ConverterRegistry;
-import org.springframework.util.ClassUtils;
 
 /**
  * A specialization of {@link GenericConversionService} configured by default with
@@ -40,11 +39,6 @@ import org.springframework.util.ClassUtils;
  */
 public class DefaultConversionService extends GenericConversionService {
 
-	/** Java 8's java.time package available? */
-	private static final boolean jsr310Available =
-			ClassUtils.isPresent(""java.time.ZoneId"", DefaultConversionService.class.getClassLoader());
-
-
 	/**
 	 * Create a new {@code DefaultConversionService} with the set of
 	 * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}.
@@ -67,9 +61,9 @@ public class DefaultConversionService extends GenericConversionService {
 		addCollectionConverters(converterRegistry);
 
 		converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry));
-		if (jsr310Available) {
-			Jsr310ConverterRegistrar.registerJsr310Converters(converterRegistry);
-		}
+		converterRegistry.addConverter(new StringToTimeZoneConverter());
+		converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());
+		converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());
 
 		converterRegistry.addConverter(new ObjectToObjectConverter());
 		converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry));
@@ -149,17 +143,4 @@ public class DefaultConversionService extends GenericConversionService {
 		converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());
 	}
 
-
-	/**
-	 * Inner class to avoid a hard-coded dependency on Java 8's {@code java.time} package.
-	 */
-	private static final class Jsr310ConverterRegistrar {
-
-		public static void registerJsr310Converters(ConverterRegistry converterRegistry) {
-			converterRegistry.addConverter(new StringToTimeZoneConverter());
-			converterRegistry.addConverter(new ZoneIdToTimeZoneConverter());
-			converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter());
-		}
-	}
-
 }
diff --git a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
index e840fa2ff6..b115d854d7 100644
--- a/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java
@@ -753,16 +753,13 @@ public class Jackson2ObjectMapperBuilder {
 			// jackson-datatype-jdk8 not available
 		}
 
-		// Java 8 java.time package present?
-		if (ClassUtils.isPresent(""java.time.LocalDate"", this.moduleClassLoader)) {
-			try {
-				Class<? extends Module> javaTimeModule = (Class<? extends Module>)
-						ClassUtils.forName(""com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"", this.moduleClassLoader);
-				objectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));
-			}
-			catch (ClassNotFoundException ex) {
-				// jackson-datatype-jsr310 not available
-			}
+		try {
+			Class<? extends Module> javaTimeModule = (Class<? extends Module>)
+					ClassUtils.forName(""com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"", this.moduleClassLoader);
+			objectMapper.registerModule(BeanUtils.instantiateClass(javaTimeModule));
+		}
+		catch (ClassNotFoundException ex) {
+			// jackson-datatype-jsr310 not available
 		}
 
 		// Joda-Time present?
diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
index a87660869b..b2c561a272 100644
--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java
@@ -70,7 +70,7 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 				Principal.class.isAssignableFrom(paramType) ||
 				Locale.class == paramType ||
 				TimeZone.class == paramType ||
-				""java.time.ZoneId"".equals(paramType.getName()) ||
+				ZoneId.class == paramType ||
 				InputStream.class.isAssignableFrom(paramType) ||
 				Reader.class.isAssignableFrom(paramType) ||
 				HttpMethod.class == paramType);
@@ -110,8 +110,9 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
 			return (timeZone != null ? timeZone : TimeZone.getDefault());
 		}
-		else if (""java.time.ZoneId"".equals(paramType.getName())) {
-			return ZoneIdResolver.resolveZoneId(request);
+		else if (ZoneId.class == paramType) {
+			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
+			return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());
 		}
 		else if (InputStream.class.isAssignableFrom(paramType)) {
 			return request.getInputStream();
@@ -126,16 +127,4 @@ public class ServletRequestMethodArgumentResolver implements HandlerMethodArgume
 		}
 	}
 
-
-	/**
-	 * Inner class to avoid a hard-coded dependency on Java 8's {@link java.time.ZoneId}.
-	 */
-	private static class ZoneIdResolver {
-
-		public static Object resolveZoneId(HttpServletRequest request) {
-			TimeZone timeZone = RequestContextUtils.getTimeZone(request);
-			return (timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault());
-		}
-	}
-
 }",Avoid defensive checks against java . time API .,"""Remove Java 8 version checks and always register JSR-310 converters and editors""","""Update to support Java 9+ ZoneId and DateTimeFormatter APIs""

This commit message accurately reflects the changes made in the code, which include:

* Removing the Java 8-specific code for ZoneId and replacing it with the standard Java API.
* Updating the code to use the standard Java API for DateTimeFormatter.
* Removing the hard-coded dependencies on Java 8's java.time package.
* Updating the code to use the standard Java API for ZoneId and DateTimeFormatter in various places, including the PropertyEditorRegistrySupport, DefaultFormattingConversionService, DefaultConversionService, and ServletRequestMethodArgumentResolver classes.","""Update to support Java 8's java.time.ZoneId class""

This commit removes the conditionals and tries to directly use the `ZoneId` class in the `PropertyEditorRegistrySupport` and `DefaultFormattingConversionService` classes. It also removes the `zoneIdClass` static field in `PropertyEditorRegistrySupport` and the `jsr310Present` variable in `DefaultFormattingConversionService`. In addition, it removes the `Jsr310ConverterRegistrar` inner class in `DefaultConversionService` and directly registers the converters for Java 8's `java.time` package. Finally, it removes the `ZoneIdResolver` inner class in `ServletRequestMethodArgumentResolver` and directly uses the `ZoneId` class in the `resolveArgument` method.","""Remove conditional checks for Java 8 java.time and directly include ZoneId and related classes""",Model 3
"diff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
index dd20f009..9e9f4d8d 100644
--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/FavoritesScene.java
@@ -29,6 +29,7 @@ import android.support.annotation.Nullable;
 import android.support.design.widget.FloatingActionButton;
 import android.support.v4.widget.DrawerLayout;
 import android.support.v7.app.AlertDialog;
+import android.support.v7.widget.DividerItemDecoration;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
@@ -43,9 +44,6 @@ import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.ListView;
 import android.widget.TextView;
 
 import com.github.amlcurran.showcaseview.ShowcaseView;
@@ -55,7 +53,6 @@ import com.hippo.annotation.Implemented;
 import com.hippo.drawable.DrawerArrowDrawable;
 import com.hippo.easyrecyclerview.EasyRecyclerView;
 import com.hippo.easyrecyclerview.FastScroller;
-import com.hippo.easyrecyclerview.LinearDividerItemDecoration;
 import com.hippo.ehviewer.EhApplication;
 import com.hippo.ehviewer.EhDB;
 import com.hippo.ehviewer.R;
@@ -70,6 +67,7 @@ import com.hippo.ehviewer.ui.MainActivity;
 import com.hippo.ehviewer.ui.annotation.DrawerLifeCircle;
 import com.hippo.ehviewer.ui.annotation.ViewLifeCircle;
 import com.hippo.ehviewer.ui.annotation.WholeLifeCircle;
+import com.hippo.ehviewer.widget.EhDrawerLayout;
 import com.hippo.ehviewer.widget.SearchBar;
 import com.hippo.refreshlayout.RefreshLayout;
 import com.hippo.ripple.Ripple;
@@ -80,9 +78,7 @@ import com.hippo.util.DrawableManager;
 import com.hippo.widget.ContentLayout;
 import com.hippo.widget.FabLayout;
 import com.hippo.widget.SearchBarMover;
-import com.hippo.yorozuya.LayoutUtils;
 import com.hippo.yorozuya.ObjectUtils;
-import com.hippo.yorozuya.ResourcesUtils;
 import com.hippo.yorozuya.SimpleHandler;
 import com.hippo.yorozuya.ViewUtils;
 
@@ -96,7 +92,7 @@ import java.util.List;
 public class FavoritesScene extends BaseScene implements
         EasyRecyclerView.OnItemClickListener, EasyRecyclerView.OnItemLongClickListener,
         FastScroller.OnDragHandlerListener, SearchBarMover.Helper, SearchBar.Helper,
-        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener, AdapterView.OnItemClickListener {
+        FabLayout.OnClickFabListener, EasyRecyclerView.CustomChoiceListener {
 
     private static final long ANIMATE_TIME = 300L;
 
@@ -129,12 +125,11 @@ public class FavoritesScene extends BaseScene implements
     private DrawerArrowDrawable mLeftDrawable;
 
     @Nullable
-    @DrawerLifeCircle
-    private ArrayAdapter<String> mDrawerAdapter;
+    private EhDrawerLayout mDrawerLayout;
+
     @Nullable
     @DrawerLifeCircle
-    private List<String> mDrawerList;
-
+    private FavDrawerAdapter mDrawerAdapter;
     @Nullable
     @WholeLifeCircle
     private EhClient mClient;
@@ -143,13 +138,16 @@ public class FavoritesScene extends BaseScene implements
     private String[] mFavCatArray;
     @Nullable
     @WholeLifeCircle
+    private int[] mFavCountArray;
+    @Nullable
+    @WholeLifeCircle
     private FavListUrlBuilder mUrlBuilder;
 
     public int current; // -1 for error
     public int limit; // -1 for error
 
-    @Nullable
-    private int[] mFavCountArray;
+    private int mLocalSize = 0;
+    private int mCloudSize = 0;
 
     private boolean mHasFirstRefresh;
     private boolean mSearchMode;
@@ -206,7 +204,7 @@ public class FavoritesScene extends BaseScene implements
     }
 
     @Override
-    public void onSaveInstanceState(Bundle outState) {
+    public void onSaveInstanceState(@NonNull Bundle outState) {
         super.onSaveInstanceState(outState);
 
         boolean hasFirstRefresh;
@@ -236,6 +234,7 @@ public class FavoritesScene extends BaseScene implements
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.scene_favorites, container, false);
         ContentLayout contentLayout = (ContentLayout) view.findViewById(R.id.content_layout);
+        mDrawerLayout = (EhDrawerLayout) ViewUtils.$$(getActivity2(), R.id.draw_view);
         mRecyclerView = contentLayout.getRecyclerView();
         FastScroller fastScroller = contentLayout.getFastScroller();
         RefreshLayout refreshLayout = contentLayout.getRefreshLayout();
@@ -410,95 +409,73 @@ public class FavoritesScene extends BaseScene implements
         mOldKeyword = null;
     }
 
-    private class InfoHolder extends RecyclerView.ViewHolder {
+    private class FavDrawerHolder extends RecyclerView.ViewHolder {
 
         private final TextView key;
         private final TextView value;
 
-        public InfoHolder(View itemView) {
+        private FavDrawerHolder(View itemView) {
             super(itemView);
             key = (TextView) ViewUtils.$$(itemView, R.id.key);
             value = (TextView) ViewUtils.$$(itemView, R.id.value);
         }
     }
 
-    private class InfoAdapter extends RecyclerView.Adapter<InfoHolder> {
-
-        private static final int TYPE_HEADER = 0;
-        private static final int TYPE_DATA = 1;
+    private class FavDrawerAdapter extends RecyclerView.Adapter<FavDrawerHolder> {
 
         private final LayoutInflater mInflater;
 
-        public InfoAdapter(LayoutInflater inflater) {
+        private FavDrawerAdapter(LayoutInflater inflater) {
             mInflater = inflater;
         }
 
         @Override
         public int getItemViewType(int position) {
-            return 0 == position ? TYPE_HEADER : TYPE_DATA;
+            return position;
         }
 
+        @NonNull
         @Override
-        public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-            return new InfoHolder(mInflater.inflate(TYPE_HEADER == viewType ?
-                    R.layout.item_favorite_info_header : R.layout.item_favorite_info_data, parent, false));
+        public FavDrawerHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+            return new FavDrawerHolder(mInflater.inflate(R.layout.item_favorite_list, parent, false));
         }
 
         @Override
         @SuppressLint(""SetTextI18n"")
-        public void onBindViewHolder(InfoHolder holder, int position) {
+        public void onBindViewHolder(@NonNull FavDrawerHolder holder, int position) {
             if (0 == position) {
-                holder.key.setText(R.string.collections);
-                holder.value.setText(R.string.count);
-                holder.itemView.setEnabled(false);
+                holder.key.setText(R.string.local_favorites);
+                holder.value.setText(Integer.toString(mLocalSize));
+                holder.itemView.setEnabled(true);
+            } else if (1 == position){
+                holder.key.setText(R.string.cloud_favorites);
+                holder.value.setText(Integer.toString(mCloudSize));
+                holder.itemView.setEnabled(true);
             } else {
                 if (null == mFavCatArray || null == mFavCountArray ||
-                        mFavCatArray.length < position || mFavCountArray.length < position) {
+                        mFavCatArray.length < (position - 1) ||
+                        mFavCountArray.length < (position - 1)) {
                     return;
                 }
-                holder.key.setText(mFavCatArray[position - 1]);
-                holder.value.setText(Integer.toString(mFavCountArray[position - 1]));
+                holder.key.setText(mFavCatArray[position - 2]);
+                holder.value.setText(Integer.toString(mFavCountArray[position - 2]));
                 holder.itemView.setEnabled(true);
             }
         }
 
         @Override
         public int getItemCount() {
-            return 11;
+            return 12;
         }
     }
 
-    @SuppressLint(""InflateParams"")
-    private void showFavoritesInfoDialog() {
-        Context context = getContext2();
-        if (null == context || null == mFavCatArray || null == mFavCountArray) {
-            return;
-        }
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(context);
-        context = builder.getContext();
-        final LayoutInflater inflater = LayoutInflater.from(context);
-        EasyRecyclerView rv = (EasyRecyclerView) inflater.inflate(R.layout.dialog_recycler_view, null);
-        rv.setAdapter(new InfoAdapter(inflater));
-        rv.setLayoutManager(new LinearLayoutManager(context));
-        LinearDividerItemDecoration decoration = new LinearDividerItemDecoration(
-                LinearDividerItemDecoration.VERTICAL, context.getResources().getColor(R.color.divider),
-                LayoutUtils.dp2pix(context, 1));
-        decoration.setPadding(ResourcesUtils.getAttrDimensionPixelOffset(context, R.attr.dialogPreferredPadding));
-        rv.addItemDecoration(decoration);
-        rv.setSelector(Ripple.generateRippleDrawable(context, false));
-        rv.setClipToPadding(false);
-        builder.setView(rv).show();
-    }
-
     @Override
     public View onCreateDrawerView(LayoutInflater inflater,
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.drawer_list, container, false);
+        View view = inflater.inflate(R.layout.drawer_list_fav, container, false);
+        final Context context = getContext2();
         Toolbar toolbar = (Toolbar) ViewUtils.$$(view, R.id.toolbar);
-        ListView listView = (ListView) view.findViewById(R.id.list_view);
 
-        final Context context = getContext2();
         Assert.assertNotNull(context);
 
         toolbar.setTitle(R.string.collections);
@@ -508,9 +485,6 @@ public class FavoritesScene extends BaseScene implements
             public boolean onMenuItemClick(MenuItem item) {
                 int id = item.getItemId();
                 switch (id) {
-                    case R.id.action_info:
-                        showFavoritesInfoDialog();
-                        return true;
                     case R.id.action_default_favorites_slot:
                         String[] items = new String[12];
                         items[0] = getString(R.string.let_me_select);
@@ -531,15 +505,13 @@ public class FavoritesScene extends BaseScene implements
             }
         });
 
-        mDrawerList = new ArrayList<>(12);
-        mDrawerList.add(getString(R.string.local_favorites));
-        mDrawerList.add(getString(R.string.cloud_favorites));
-        if (mFavCatArray != null) {
-            Collections.addAll(mDrawerList, mFavCatArray);
-        }
-        mDrawerAdapter = new ArrayAdapter<>(context, R.layout.item_simple_list, mDrawerList);
-        listView.setAdapter(mDrawerAdapter);
-        listView.setOnItemClickListener(this);
+        EasyRecyclerView recyclerView = (EasyRecyclerView) view.findViewById(R.id.recycler_view_drawer);
+        recyclerView.setLayoutManager(new LinearLayoutManager(context));
+        recyclerView.addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.VERTICAL));
+
+        mDrawerAdapter = new FavDrawerAdapter(inflater);
+        recyclerView.setAdapter(mDrawerAdapter);
+        recyclerView.setOnItemClickListener(this);
 
         return view;
     }
@@ -549,7 +521,6 @@ public class FavoritesScene extends BaseScene implements
         super.onDestroyDrawerView();
 
         mDrawerAdapter = null;
-        mDrawerList = null;
     }
 
     @Override
@@ -590,19 +561,53 @@ public class FavoritesScene extends BaseScene implements
     @Override
     @Implemented(EasyRecyclerView.OnItemClickListener.class)
     public boolean onItemClick(EasyRecyclerView parent, View view, int position, long id) {
-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
-            mRecyclerView.toggleItemChecked(position);
-        } else if (mHelper != null) {
-            GalleryInfo gi = mHelper.getDataAt(position);
-            Bundle args = new Bundle();
-            args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);
-            args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);
-            Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);
-            View thumb;
-            if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {
-                announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));
+        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)){
+            // Skip if in search mode
+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
+                return true;
+            }
+
+            if (mUrlBuilder == null || mHelper == null) {
+                return true;
+            }
+
+            // Local favorite position is 0, All favorite position is 1, so position - 2 is OK
+            int newFavCat = position - 2;
+
+            // Check is the same
+            if (mUrlBuilder.getFavCat() == newFavCat) {
+                return true;
+            }
+
+            // Ensure outOfCustomChoiceMode to avoid error
+            if (mRecyclerView != null) {
+                mRecyclerView.isInCustomChoice();
+            }
+
+            exitSearchMode(true);
+
+            mUrlBuilder.setKeyword(null);
+            mUrlBuilder.setFavCat(newFavCat);
+            updateSearchBar();
+            mHelper.refresh();
+
+            closeDrawer(Gravity.RIGHT);
+
+        } else {
+            if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
+                mRecyclerView.toggleItemChecked(position);
+            } else if (mHelper != null) {
+                GalleryInfo gi = mHelper.getDataAt(position);
+                Bundle args = new Bundle();
+                args.putString(GalleryDetailScene.KEY_ACTION, GalleryDetailScene.ACTION_GALLERY_INFO);
+                args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO, gi);
+                Announcer announcer = new Announcer(GalleryDetailScene.class).setArgs(args);
+                View thumb;
+                if (ApiHelper.SUPPORT_TRANSITION && null != (thumb = view.findViewById(R.id.thumb))) {
+                    announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));
+                }
+                startScene(announcer);
             }
-            startScene(announcer);
         }
         return true;
     }
@@ -805,41 +810,6 @@ public class FavoritesScene extends BaseScene implements
         }
     }
 
-    @Override
-    @Implemented(AdapterView.OnItemClickListener.class)
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        // Skip if in search mode
-        if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
-            return;
-        }
-
-        if (mUrlBuilder == null || mHelper == null) {
-            return;
-        }
-
-        // Local favorite position is 0, All favorite position is 1, so position - 2 is OK
-        int newFavCat = position - 2;
-
-        // Check is the same
-        if (mUrlBuilder.getFavCat() == newFavCat) {
-            return;
-        }
-
-        // Ensure outOfCustomChoiceMode to avoid error
-        if (mRecyclerView != null) {
-            mRecyclerView.isInCustomChoice();
-        }
-
-        exitSearchMode(true);
-
-        mUrlBuilder.setKeyword(null);
-        mUrlBuilder.setFavCat(newFavCat);
-        updateSearchBar();
-        mHelper.refresh();
-
-        closeDrawer(Gravity.RIGHT);
-    }
-
     private void enterSearchMode(boolean animation) {
         if (mSearchMode ||mSearchBar == null || mSearchBarMover == null || mLeftDrawable == null) {
             return;
@@ -864,11 +834,9 @@ public class FavoritesScene extends BaseScene implements
         if (mHelper != null && mSearchBarMover != null &&
                 mHelper.isCurrentTask(taskId)) {
 
-            if (mFavCatArray != null && mDrawerList != null) {
-                for (int i = 0; i < 10; i++) {
-                    mFavCatArray[i] = result.catArray[i];
-                    mDrawerList.set(i + 2, result.catArray[i]);
-                }
+            if (mFavCatArray != null) {
+
+                System.arraycopy(result.catArray, 0, mFavCatArray, 0,10);
 
                 if (mDrawerAdapter != null) {
                     mDrawerAdapter.notifyDataSetChanged();
@@ -876,6 +844,12 @@ public class FavoritesScene extends BaseScene implements
             }
 
             mFavCountArray = result.countArray;
+            if (mFavCountArray != null){
+                mCloudSize = 0;
+                for (int i = 0; i < 10; i++ ){
+                    mCloudSize = mCloudSize + mFavCountArray[i];
+                }
+            }
 
             updateSearchBar();
             mHelper.setPages(taskId, result.pages);
@@ -903,6 +877,7 @@ public class FavoritesScene extends BaseScene implements
                 mHelper.setPages(taskId, 0);
                 mHelper.onGetPageData(taskId, Collections.EMPTY_LIST);
             } else {
+                mLocalSize = list.size();
                 mHelper.setPages(taskId, 1);
                 mHelper.onGetPageData(taskId, list);
             }
diff --git a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
index cea1072b..a784a2ae 100644
--- a/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
+++ b/app/src/main/java/com/hippo/ehviewer/ui/scene/GalleryCommentsScene.java
@@ -322,7 +322,7 @@ public final class GalleryCommentsScene extends ToolbarScene
         rv.setAdapter(new RecyclerView.Adapter<InfoHolder>() {
             @Override
             public InfoHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-                return new InfoHolder(inflater.inflate(R.layout.item_favorite_info_data, parent, false));
+                return new InfoHolder(inflater.inflate(R.layout.item_favorite_list, parent, false));
             }
 
             @Override
diff --git a/app/src/main/res/layout-v21/drawer_list_fav.xml b/app/src/main/res/layout-v21/drawer_list_fav.xml
new file mode 100644
index 00000000..7e01e8b4
--- /dev/null
+++ b/app/src/main/res/layout-v21/drawer_list_fav.xml
@@ -0,0 +1,51 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!--
+  ~ Copyright 2016 Hippo Seven
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout
+    xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:layout_width=""match_parent""
+    android:layout_height=""match_parent""
+    android:orientation=""vertical"">
+
+    <android.support.v7.widget.Toolbar
+        android:id=""@+id/toolbar""
+        android:layout_height=""?attr/actionBarSize""
+        android:layout_width=""match_parent""
+        android:background=""?attr/colorPrimary""
+        android:theme=""@style/ThemeOverlay.AppCompat.Dark.ActionBar""
+        android:elevation=""8dp""
+        android:saveEnabled=""false""/>
+
+    <FrameLayout
+        android:layout_width=""match_parent""
+        android:layout_height=""0dp""
+        android:layout_weight=""1"">
+
+        <TextView
+            android:id=""@+id/tip""
+            android:layout_width=""wrap_content""
+            android:layout_height=""wrap_content""
+            android:layout_gravity=""center""
+            android:visibility=""gone""/>
+
+",update favorites right drawer layout,"""Refactor FavoritesScene to use EhDrawerLayout and RecyclerView for drawer list""","""Refactor FavoritesScene to use EhDrawerLayout and FavDrawerAdapter""","This commit updates the FavoritesScene class in the EhViewer Android app. It replaces an ArrayAdapter with a custom FavDrawerAdapter for the drawer list, and updates the layout file for the drawer list to use a RecyclerView instead of a ListView. It also adds a DividerItemDecoration to the RecyclerView and removes the LinearDividerItemDecoration. Additionally, it removes a method for showing a dialog with favorite information and updates the onItemClick method to handle clicks on the RecyclerView in the drawer. The commit also updates the layout file for the GalleryCommentsScene to use the same item layout for the RecyclerView.","""Refactor FavoritesScene to replace ListView with RecyclerView for improved functionality and performance, and enhance Drawer layout.""",Model 4
"diff --git a/core/pom.xml b/core/pom.xml
index 2d80f0b9..cbb93e63 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -45,10 +45,6 @@
             <groupId>${project.groupId}</groupId>
             <artifactId>fescar-config</artifactId>
         </dependency>
-        <dependency>
-            <groupId>${project.groupId}</groupId>
-            <artifactId>fescar-common</artifactId>
-        </dependency>
         <dependency>
             <groupId>org.apache.commons</groupId>",delete useless fescar - common in fescar - core because fescar - config had imported it ( <issue_id> ) .,"""Remove fescar-common dependency from core pom.xml""",Remove unused Fescar dependency.,"""Removed fescar-common dependency in core/pom.xml""",Removed fescar-common dependency from core/pom.xml.,Model 4
"diff --git a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
index 7a919fdaf8..939660a257 100644
--- a/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
+++ b/api/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java
@@ -1,5 +1,6 @@
 package org.apereo.cas.support.events;
 
+import org.apache.commons.lang3.builder.ToStringBuilder;
 import org.apereo.cas.authentication.Authentication;
 import org.springframework.context.ApplicationEvent;
 
@@ -22,10 +23,14 @@ public abstract class AbstractCasEvent extends ApplicationEvent implements Seria
     /**
      * Instantiates a new Abstract cas sso event.
      *
-     * @param source                 the source
+     * @param source the source
      */
     public AbstractCasEvent(final Object source) {
         super(source);
     }
 
+    @Override
+    public String toString() {
+        return new ToStringBuilder(this).toString();
+    }
 }
diff --git a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
index 23c7cda0ae..d395da1c8a 100644
--- a/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
+++ b/core/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java
@@ -2,6 +2,7 @@ package org.apereo.cas.support.events.listener;
 
 import org.apereo.cas.authentication.adaptive.geo.GeoLocationRequest;
 import org.apereo.cas.configuration.CasConfigurationProperties;
+import org.apereo.cas.support.events.CasConfigurationModifiedEvent;
 import org.apereo.cas.support.events.CasRiskyAuthenticationDetectedEvent;
 import org.apereo.cas.support.events.CasTicketGrantingTicketCreatedEvent;
 import org.apereo.cas.support.events.dao.CasEvent;
@@ -18,9 +19,11 @@ import org.springframework.boot.context.event.ApplicationReadyEvent;
 import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor;
 import org.springframework.cloud.bus.event.RefreshRemoteApplicationEvent;
 import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
+import org.springframework.cloud.endpoint.RefreshEndpoint;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.event.EventListener;
 
+import java.util.Collection;
 import java.util.Map;
 
 /**
@@ -37,6 +40,9 @@ public class DefaultCasEventListener {
     @Autowired
     private ConfigurationPropertiesBindingPostProcessor binder;
 
+    @Autowired
+    private RefreshEndpoint refreshEndpoint;
+
     @Autowired
     private ApplicationContext applicationContext;
 
@@ -78,6 +84,19 @@ public class DefaultCasEventListener {
         rebindCasConfigurationProperties();
     }
 
+    /**
+     * Handle configuration modified event.
+     *
+     * @param event the event
+     */
+    @EventListener
+    public void handleConfigurationModifiedEvent(final CasConfigurationModifiedEvent event) {
+        LOGGER.debug(""Received event [{}]. Refreshing CAS configuration..."", event);
+        final Collection<String> keys = this.refreshEndpoint.invoke();
+        LOGGER.info(""The following settings were refreshed/updated: [{}]. CAS will attempt to rebind it configuration..."", keys);
+        rebindCasConfigurationProperties();
+    }
+
     /**
      * Rebind cas configuration properties.
      */
diff --git a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
index c9b84d0628..a089911507 100644
--- a/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
+++ b/support/cas-server-support-configuration/src/main/java/org/apereo/cas/config/monitor/ConfigurationDirectoryPathWatchService.java
@@ -9,13 +9,13 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.context.ApplicationEventPublisher;
 
+import java.io.File;
 import java.nio.file.FileSystems;
 import java.nio.file.Path;
 import java.nio.file.StandardWatchEventKinds;
 import java.nio.file.WatchEvent;
 import java.nio.file.WatchKey;
 import java.nio.file.WatchService;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
 import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;
@@ -32,6 +32,7 @@ import static java.nio.file.StandardWatchEventKinds.OVERFLOW;
  */
 public class ConfigurationDirectoryPathWatchService implements Runnable {
     private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationDirectoryPathWatchService.class);
+    private static final long MONITOR_INTERVAL = 5_000;
 
     private final WatchService watcher;
     private final Path directory;
@@ -56,10 +57,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
      * Watch the directory for changes.
      */
     public void watch() {
-        final AtomicBoolean eventFired = new AtomicBoolean();
-
         while (true) {
-
             final WatchKey key;
             try {
                 key = watcher.take();
@@ -68,7 +66,7 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
                 return;
             }
 
-
+            long lastModified = 0;
             for (final WatchEvent<?> event : key.pollEvents()) {
                 final WatchEvent.Kind<?> kind = event.kind();
 
@@ -83,24 +81,24 @@ public class ConfigurationDirectoryPathWatchService implements Runnable {
                 try {
                     LOGGER.debug(""Detected configuration change [{}]"", kind.name());
                     final Path child = this.directory.resolve(filename);
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));
-                        eventFired.set(true);
-                    }
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));
-                        eventFired.set(true);
-                    }
-                    if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name()) && !eventFired.get()) {
-                        this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));
-                        eventFired.set(true);
+                    final File childFile = child.toFile();
+                    if (childFile.lastModified() - lastModified > MONITOR_INTERVAL) {
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_CREATE.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationCreatedEvent(this, child));
+                        }
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_DELETE.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationDeletedEvent(this, child));
+                        }
+                        if (StringUtils.equalsIgnoreCase(StandardWatchEventKinds.ENTRY_MODIFY.name(), kind.name())) {
+                            this.eventPublisher.publishEvent(new CasConfigurationModifiedEvent(this, child));
+                        }
                     }
+                    lastModified = childFile.lastModified();
                 } catch (final Exception e) {
                     LOGGER.warn(e.getMessage(), e);
                     continue;
                 }
             }
-            eventFired.set(false);
             final boolean valid = key.reset();
             if (!valid) {
                 break;",added support for auto config reloadig of native profiles,"""Enhance CAS Event Handling and Configuration Monitoring""

This commit message accurately reflects the changes made in the code, which include enhancements to CAS event handling and configuration monitoring. The changes include adding a `toString()` method to the `AbstractCasEvent` class, handling `CasConfigurationModifiedEvent` in the `DefaultCasEventListener` class, and modifying the `ConfigurationDirectoryPathWatchService` class to monitor configuration changes and publish events accordingly.","""Added event handling for configuration changes and improved logging and monitoring""","""Added toString method to AbstractCasEvent and handled CasConfigurationModifiedEvent in DefaultCasEventListener""

Explanation:

* The toString method was added to AbstractCasEvent using Apache Commons Lang ToStringBuilder.
* The DefaultCasEventListener was updated to handle CasConfigurationModifiedEvent by refreshing CAS configuration using the RefreshEndpoint.","""Add toString method to AbstractCasEvent, handle configuration modified event in DefaultCasEventListener, and improve ConfigurationDirectoryPathWatchService.""",Model 1
"diff --git a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
index 1e0a4603c..f66669a98 100644
--- a/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
+++ b/src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
@@ -67,9 +67,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
             .number(""(d+),"")                     // satellites
             .groupBegin()
             .number(""(d+.?d*),"")                 // altitude
-            .number(""d+.?d*,"")                   // pdop
-            .number(""d+.?d*,"")                   // hdop
-            .expression(""[^,]*,"")                // operator
+            .number(""(d+.?d*),"")                 // pdop
+            .number(""(d+.?d*),"")                 // hdop
+            .expression(""([^,]+)?,"")             // operator
             .number(""([01]),"")                   // ignition
             .number(""([01]),"")                   // charging
             .number(""(d+.?d*),"")                 // power
@@ -81,6 +81,15 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
             .number(""([01]{2}),"")                // outputs
             .groupBegin()
             .number(""d+,"")                       // index
+            .number(""(d+.?d*),"")                 // odometer
+            .number(""(d+.?d*),"")                 // adc1
+            .number(""(-?d+.?d*),"")               // acceleration x
+            .number(""(-?d+.?d*),"")               // acceleration y
+            .number(""(-?d+.?d*),"")               // acceleration z
+            .number(""(-?d+),"")                   // tilt y
+            .number(""(-?d+),"")                   // tilt x
+            .or()
+            .number(""d+,"")                       // index
             .number(""(d+.?d*),"")                 // adc1
             .number(""(d+.?d*),"")                 // adc2
             .groupEnd(""?"")
@@ -188,6 +197,9 @@ public class ItsProtocolDecoder extends BaseProtocolDecoder {
 
         if (parser.hasNext(8)) {
             position.setAltitude(parser.nextDouble());
+            position.set(Position.KEY_PDOP, parser.nextDouble());
+",Decode missing parameters,"""ITS protocol: Add support for pdop, hdop, odometer, acceleration and tilt values""","""Added support for additional GPS data in ITS protocol decoder""

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of support for additional GPS data, which is the main focus of the changes.","""Updated ItsProtocolDecoder to capture pdop, hdop, operator, and additional sensor data""

This commit updates the regular expressions in the ItsProtocolDecoder class to correctly capture and parse the pdop, hdop, operator, and additional sensor data such as acceleration, tilt, odometer, and ADC values from the input message. The changes include:

1. Adding parentheses to capture pdop and hdop values as groups.
2. Updating the operator expression to capture the operator name using a non-greedy matcher.
3. Adding optional capture groups for additional sensor data, including odometer, ADC values, acceleration, and tilt.

These changes will allow the ItsProtocolDecoder to correctly parse and process messages containing these additional data fields.","Added additional sensor data and parsing flexibility to ItsProtocolDecoder, including odometer, adc1, accelerations, and tilt axes.",Model 4
"diff --git a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
index 4f99850054..a14b10e4da 100644
--- a/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
+++ b/core/src/main/java/bisq/core/btc/nodes/BtcNodes.java
@@ -77,7 +77,10 @@ public class BtcNodes {
                         new BtcNode(""node100.wiz.network"", ""m3yqzythryowgedc.onion"", ""103.99.168.100"", BtcNode.DEFAULT_PORT, ""@wiz""),
                         new BtcNode(""node130.wiz.network"", ""22tg6ufbwz6o3l2u.onion"", ""103.99.168.130"", BtcNode.DEFAULT_PORT, ""@wiz""),
                         new BtcNode(""node140.wiz.network"", ""jiuuuislm7ooesic.onion"", ""103.99.168.140"", BtcNode.DEFAULT_PORT, ""@wiz""),
-                        new BtcNode(""node150.wiz.network"", ""zyhtr2ffbzn5yeg3.onion"", ""103.99.168.150"", BtcNode.DEFAULT_PORT, ""@wiz"")
+                        new BtcNode(""node150.wiz.network"", ""zyhtr2ffbzn5yeg3.onion"", ""103.99.168.150"", BtcNode.DEFAULT_PORT, ""@wiz""),
+
+                        // Rob Kaandorp
+                        new BtcNode(null, ""2pj2o2mrawj7yotg.onion"", null, BtcNode.DEFAULT_PORT, ""@robkaandorp"") // cannot provide IP because no static IP
                 ) :
                 new ArrayList<>();
     }",Add onion address for @ robkaandorp \' s btcnode .,"""Add Rob Kaandorp's Bitcoin node to the list of available nodes""","""Added Rob Kaandorp's onion node to BtcNodes list""","""Added new BtcNode for Rob Kaandorp with onion address and no static IP""","""Add Rob Kaandorp's Bitcoin node to the BtcNodes list with only the .onion address, no static IP provided.""",Model 1
"diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
index 47b8eca1a6..4b315785c4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanBuilderTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanBuilderTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
index b54b87899b..7b92fc5d3d 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionHelper.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionHelper.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import org.hibernate.LockMode;
 import org.hibernate.LockOptions;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
similarity index 95%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
index 94fc7ca20b..cabb5798fb 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/plan/spi/LoadPlanStructureAssertionTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/plans/LoadPlanStructureAssertionTest.java
@@ -21,20 +21,15 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader.plan.spi;
+package org.hibernate.test.loadplans.plans;
 
 import org.hibernate.cfg.Configuration;
 import org.hibernate.engine.spi.SessionFactoryImplementor;
-import org.hibernate.test.loader.EncapsulatedCompositeIdResultSetProcessorTest;
-import org.hibernate.test.loader.Helper;
+import org.hibernate.test.loadplans.process.EncapsulatedCompositeIdResultSetProcessorTest;
 
-import org.hibernate.loader.plan2.build.internal.returns.SimpleEntityIdentifierDescriptionImpl;
-import org.hibernate.loader.plan2.exec.process.internal.ResultSetProcessorImpl;
-import org.hibernate.loader.plan2.exec.spi.EntityLoadQueryDetails;
 //import org.hibernate.loader.plan2.spi.BidirectionalEntityFetch;
 import org.hibernate.loader.plan2.build.internal.returns.CollectionFetchableElementEntityGraph;
 import org.hibernate.loader.plan2.spi.CollectionFetch;
-import org.hibernate.loader.plan2.spi.CompositeFetch;
 import org.hibernate.loader.plan2.spi.EntityFetch;
 import org.hibernate.loader.plan2.spi.EntityReturn;
 import org.hibernate.loader.plan2.spi.FetchSource;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
index 6d28809d84..499ce5d6cf 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeAttributeResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeAttributeResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CollectionTable;
 import javax.persistence.Column;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
index 979051ae25..81a465fe5b 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EncapsulatedCompositeIdResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EncapsulatedCompositeIdResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.Embeddable;
 import javax.persistence.EmbeddedId;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
index 3c0e673c2a..a89f00f3f4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityAssociationResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityAssociationResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
index d1b2a7205d..a8c37c4f33 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyCollectionResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyCollectionResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CollectionTable;
 import javax.persistence.Column;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
index e78263c1c0..80b877995e 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManyListResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
index baca9557cf..c757f2642c 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/EntityWithNonLazyOneToManySetResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.CascadeType;
 import javax.persistence.Entity;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
similarity index 98%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
index d2ecd1f90f..fb82f15d5f 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/Helper.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/Helper.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import org.hibernate.LockMode;
 import org.hibernate.LockOptions;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
index 1679043cb4..c256a39ddd 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/NonEncapsulatedCompositeIdResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/NonEncapsulatedCompositeIdResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
similarity index 99%
rename from hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
index 3cfa050bfb..d945048e66 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/loader/SimpleResultSetProcessorTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/process/SimpleResultSetProcessorTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.loader;
+package org.hibernate.test.loadplans.process;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
index 426b6b2ba2..5316e73de4 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/BasicWalkingTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/BasicWalkingTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java
new file mode 100644
index 0000000000..56cc34100a
--- /dev/null
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/CompositesWalkingTest.java
@@ -0,0 +1,52 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2013, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.loadplans.walking;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.persister.entity.EntityPersister;
+import org.hibernate.persister.walking.spi.MetamodelGraphWalker;
+
+import org.junit.Test;
+
+import org.hibernate.testing.junit4.BaseUnitTestCase;
+import org.hibernate.test.annotations.collectionelement.TestCourse;
+
+/**
+ * @author Steve Ebersole
+ */
+public class CompositesWalkingTest extends BaseUnitTestCase {
+	/**
+	 * Test one-level composites defined as part of an entity.
+	 */
+	@Test
+	public void testEntityComposite() {
+		final SessionFactory sf = new Configuration()
+				.addAnnotatedClass( TestCourse.class )
+				.buildSessionFactory();
+		final EntityPersister ep = (EntityPersister) sf.getClassMetadata( TestCourse.class );
+
+		MetamodelGraphWalker.visitEntity( new LoggingAssociationVisitationStrategy(), ep );
+	}
+}
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
index 3ace4cc72c..d47e424c45 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/KeyManyToOneWalkingTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/KeyManyToOneWalkingTest.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import org.hibernate.persister.entity.EntityPersister;
 import org.hibernate.persister.walking.spi.MetamodelGraphWalker;
diff --git a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
similarity index 97%
rename from hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java
rename to hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
index cdbfa7a203..fd4991e196 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/walking/LoggingAssociationVisitationStrategy.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/loadplans/walking/LoggingAssociationVisitationStrategy.java
@@ -21,7 +21,7 @@
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
  */
-package org.hibernate.test.walking;
+package org.hibernate.test.loadplans.walking;
 
 import org.hibernate.annotations.common.util.StringHelper;
 import org.hibernate.persister.walking.spi.AnyMappingDefinition;
@@ -41,7 +41,7 @@ import org.hibernate.persister.walking.spi.EntityIdentifierDefinition;
  * @author Steve Ebersole
  */
 public class LoggingAssociationVisitationStrategy implements AssociationVisitationStrategy {
-	private int depth = 0;
+	private int depth = 1;
 
 	@Override
 	public void start() {
@@ -176,7 +176,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing collection index (%s)"",
-						StringHelper.repeat( "">>"", ++depth ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						collectionIndexDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);
@@ -198,7 +198,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing collection elements (%s)"",
-						StringHelper.repeat( "">>"", ++depth ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						elementDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);
@@ -223,7 +223,7 @@ public class LoggingAssociationVisitationStrategy implements AssociationVisitati
 		System.out.println(
 				String.format(
 						""%s Finishing composite (%s)"",
-						StringHelper.repeat( "">>"", depth-- ),
+						StringHelper.repeat( ""<<"", depth-- ),
 						compositionElementDefinition.getCollectionDefinition().getCollectionPersister().getRole()
 				)
 		);",Integrate LoadPlans into UniqueEntityLoader ( PoC ),"""Refactor test classes to new package structure""","Rename packages to match new loadplans module structure

This commit message accurately reflects the changes made in the diff, which involves renaming packages to match the new loadplans module structure.","This commit renames and moves several Java files from the `org.hibernate.test.loader` and `org.hibernate.test.loader.plan.spi` packages to the `org.hibernate.test.loadplans.process` and `org.hibernate.test.loadplans.plans` packages, respectively. It also adds a new file `CompositesWalkingTest.java` to the `org.hibernate.test.loadplans.walking` package. The actual code changes within the files appear to be minimal, with mostly just package statements being updated to reflect the new package locations. The purpose of this commit is likely to better organize and structure the Hibernate codebase.","Refactor package structure for loader plans and processes, and improve LoggingAssociationVisitationStrategy depth handling.",Model 3
"diff --git a/src/main/org/codehaus/groovy/ant/Groovyc.java b/src/main/org/codehaus/groovy/ant/Groovyc.java
index ad7d930b2c..9903bf5d12 100644
--- a/src/main/org/codehaus/groovy/ant/Groovyc.java
+++ b/src/main/org/codehaus/groovy/ant/Groovyc.java
@@ -380,9 +380,9 @@ public class Groovyc extends MatchingTask {
             }
 
             try {
-                String classpath = getClasspath().toString();
+                Path classpath = getClasspath();
                 if (classpath != null) {
-",fixed my bad attempt to apply Sam \' s patch : ) .,"""Changed getClasspath() return type from String to Path in Groovyc class""","According to the diff, the commit message should be:

""Convert getClasspath() to Path in Groovyc""

This message accurately reflects the change made in the commit, which is to replace the `String` type `classpath` with a `Path` type.","""Changed getClasspath() toString() call to direct Path assignment in Groovyc.java""",Refactor classpath variable from String to Path in Groovyc.java for improved type safety.,Model 1
"diff --git a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
index ab3d14770..ca610298c 100644
--- a/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
+++ b/src/main/java/com/xtremelabs/robolectric/tester/org/apache/http/FakeHttpLayer.java
@@ -18,6 +18,7 @@ public class FakeHttpLayer {
     List<HttpEntityStub.ResponseRule> httpResponseRules = new ArrayList<HttpEntityStub.ResponseRule>();
     HttpResponse defaultHttpResponse;
     private HttpResponse defaultResponse;
+    private boolean logHttpRequests = false;
 
     public void addPendingHttpResponse(int statusCode, String responseBody) {
         addPendingHttpResponse(new TestHttpResponse(statusCode, responseBody));
@@ -72,8 +73,14 @@ public class FakeHttpLayer {
     }
 
     public HttpResponse emulateRequest(HttpHost httpHost, HttpRequest httpRequest, HttpContext httpContext, RequestDirector requestDirector) throws HttpException, IOException {
+        if (logHttpRequests) {
+            System.out.println(""  <-- "" + httpRequest.getRequestLine());
+        }
         HttpResponse httpResponse = findResponse(httpRequest);
-
+        if (logHttpRequests) {
+            System.out.println(""  --> "" + (httpResponse == null ? null : httpResponse.getStatusLine().getStatusCode()));
+        }
+        
         if (httpResponse == null) {
             throw new RuntimeException(""Unexpected call to execute, no pending responses are available. See Robolectric.addPendingResponse()."");
         }
@@ -110,6 +117,14 @@ public class FakeHttpLayer {
         httpResponseRules.clear();
     }
 
+    public void logHttpRequests() {
+        logHttpRequests = true;
+    }
+
+    public void silence() {
+        logHttpRequests = false;
+    }
+
     public static class RequestMatcherResponseRule implements HttpEntityStub.ResponseRule {
         private RequestMatcher requestMatcher;
         private HttpResponse responseToGive;",Call Robolectric . getFakeHttpLayer ( ) . logHttpRequests ( ) to get some hints about what \' s going on internally .,"""Added logging for HTTP requests in FakeHttpLayer""",Added logging for HTTP requests in FakeHttpLayer and added methods to control logging.,"""Added logHttpRequests flag and methods logHttpRequests() and silence() to FakeHttpLayer class""

Explanation: The diff shows the addition of a boolean variable `logHttpRequests` and two methods `logHttpRequests()` and `silence()` in the `FakeHttpLayer` class. The `logHttpRequests()` method sets the `logHttpRequests` flag to true, enabling logging of HTTP requests, while the `silence()` method sets the flag to false, disabling logging. Additionally, there are new logging statements added in the `emulateRequest()` method that log the request and response if `logHttpRequests` is true.",Added logging capability for HTTP requests in FakeHttpLayer with methods to enable and disable logging.,Model 4
"diff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
index 2fffa60044..b32c0e5d4c 100644
--- a/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-jar/pom.xml
@@ -63,7 +63,7 @@
 					</descriptors>
 					<archive>
 						<manifest>
-							<mainClass>org.springframework.boot.load.JarLauncher</mainClass>
+							<mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
 						</manifest>
 						<manifestEntries>
 							<Start-Class>org.springframework.boot.load.it.jar.EmbeddedJarStarter</Start-Class>
diff --git a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
index 193173d667..efa6e7b048 100644
--- a/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
+++ b/spring-boot-tools/spring-boot-loader/src/it/executable-war/pom.xml
@@ -27,7 +27,7 @@
 				<configuration>
 					<archive>
 						<manifest>
-							<mainClass>org.springframework.boot.load.WarLauncher</mainClass>
+							<mainClass>org.springframework.boot.loader.WarLauncher</mainClass>
 						</manifest>
 						<manifestEntries>
 							<Start-Class>org.springframework.boot.load.it.war.embedded.EmbeddedWarStarter</Start-Class>
diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
index c50a13e6f5..ed93d835e0 100644
--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/ExecutableArchiveLauncher.java
@@ -16,8 +16,12 @@
 
 package org.springframework.boot.loader;
 
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.ArrayList;
+import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.jar.JarEntry;
 
 import org.springframework.boot.loader.archive.Archive;
@@ -64,6 +68,21 @@ public abstract class ExecutableArchiveLauncher extends Launcher {
 		return archives;
 	}
 
+	@Override
+	protected ClassLoader createClassLoader(URL[] urls) throws Exception {
+		Set<URL> copy = new LinkedHashSet<URL>();
+		ClassLoader loader = getDefaultClassLoader();
+		if (loader instanceof URLClassLoader) {
+			for (URL url : ((URLClassLoader) loader).getURLs()) {
+				copy.add(url);
+			}
+		}
+		for (URL url : urls) {
+			copy.add(url);
+		}
+		return super.createClassLoader(copy.toArray(new URL[copy.size()]));
+	}
+
 	/**
 	 * Determine if the specified {@link JarEntry} is a nested item that should be added
 	 * to the classpath. The method is called once for each entry.
@@ -81,4 +100,20 @@ public abstract class ExecutableArchiveLauncher extends Launcher {
 	protected void postProcessClassPathArchives(List<Archive> archives) throws Exception {
 	}
 
+	private static ClassLoader getDefaultClassLoader() {
+		ClassLoader cl = null;
+		try {
+			cl = Thread.currentThread().getContextClassLoader();
+		}
+		catch (Throwable ex) {
+			// Cannot access thread context ClassLoader - falling back to system class
+			// loader...
+		}
+		if (cl == null) {
+			// No thread context class loader -> use class loader of this class.
+			cl = ExecutableArchiveLauncher.class.getClassLoader();
+		}
+		return cl;
+	}
+
 }
diff --git a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar
index c7c485ae5d..fb02c02701 100644
Binary files a/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar and b/spring-boot-tools/spring-boot-loader/src/test/resources/jars/app.jar differ",Add URLs from parent classloader in executable jar .,"""Fix launcher class names and improve class loader creation in ExecutableArchiveLauncher""","The commit message should be:

""Update main class and class loader for executable jar and war tests""

This message accurately reflects the changes made in the commit, which involve updating the main class and class loader for executable jar and war tests in the Spring Boot loader.","This commit updates the main class names in the pom.xml files for the executable-jar and executable-war modules of the spring-boot-loader project. The main class names have been changed from ""org.springframework.boot.load.JarLauncher"" and ""org.springframework.boot.load.WarLauncher"" to ""org.springframework.boot.loader.JarLauncher"" and ""org.springframework.boot.loader.WarLauncher"", respectively.

Additionally, the ExecutableArchiveLauncher class has been updated to include a new method, createClassLoader, which is used to create a ClassLoader instance with a combined set of URLs from the default class loader and the URLs provided as an argument to the method. The method uses a LinkedHashSet to store the URLs in order to maintain the insertion order of the URLs. The method also includes a static getDefaultClassLoader method which is used to get the default class loader for the current thread or the class loader for the ExecutableArchiveLauncher class if the thread context class loader is not available.

Finally, a binary file named app.jar in the test resources directory has been modified. The specific changes made to the file are not shown in the provided diff.","Fix package names for mainClass in executable JAR and WAR POM files, and enhance classloader handling in ExecutableArchiveLauncher.",human
"diff --git a/rest-api-spec/api/cluster.state.json b/rest-api-spec/api/cluster.state.json
index 97d68480b51..ff145d0b97f 100644
--- a/rest-api-spec/api/cluster.state.json
+++ b/rest-api-spec/api/cluster.state.json
@@ -16,7 +16,7 @@
         },
         ""metric"" : {
           ""type"" : ""list"",
-          ""options"" : [""_all"", ""blocks"", ""metadata"", ""nodes"", ""routing_table""],
+          ""options"" : [""_all"", ""blocks"", ""metadata"", ""nodes"", ""routing_table"", ""master_node"", ""version""],
           ""description"" : ""Limit the information returned to the specified metrics""
         }
       },",Add version and master_node parameter to _cluster / state,"""Added 'master_node' and 'version' metrics to cluster state API""","""Added 'master_node' and 'version' to cluster state metrics""","""Added 'master_node' and 'version' options to cluster.state API metric list""","Add ""master_node"" and ""version"" options to the metrics list in cluster.state.json.",Model 3
"diff --git a/h2/src/java9/precompiled/org/h2/util/Bits.class b/h2/src/java9/precompiled/org/h2/util/Bits.class
new file mode 100644
index 000000000..bff3d08b4
Binary files /dev/null and b/h2/src/java9/precompiled/org/h2/util/Bits.class differ
diff --git a/h2/src/java9/src/org/h2/util/Bits.java b/h2/src/java9/src/org/h2/util/Bits.java
new file mode 100644
index 000000000..ce96d5ffd
--- /dev/null
+++ b/h2/src/java9/src/org/h2/util/Bits.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0,
+ * and the EPL 1.0 (http://h2database.com/html/license.html).
+ * Initial Developer: H2 Group
+ */
+package org.h2.util;
+
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.VarHandle;
+import java.nio.ByteOrder;
+import java.util.UUID;
+
+/**
+ * Manipulations with bytes and arrays. Specialized implementation for Java 9
+ * and later versions.
+ */
+public final class Bits {
+
+    /**
+     * VarHandle giving access to elements of a byte[] array viewed as if it were a
+     * int[] array on big-endian system.
+     */
+    private static final VarHandle INT_VH = MethodHandles.byteArrayViewVarHandle(int[].class, ByteOrder.BIG_ENDIAN);
+
+    /**
+     * VarHandle giving access to elements of a byte[] array viewed as if it were a
+     * long[] array on big-endian system.
+     */
+    private static final VarHandle LONG_VH = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN);
+
+    /**
+     * Reads a int value from the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @return the value
+     */
+    public static int readInt(byte[] buff, int pos) {
+        return (int) INT_VH.get(buff, pos);
+    }
+
+    /**
+     * Reads a long value from the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @return the value
+     */
+    public static long readLong(byte[] buff, int pos) {
+        return (long) LONG_VH.get(buff, pos);
+    }
+
+    /**
+     * Converts UUID value to byte array in big-endian order.
+     *
+     * @param msb
+     *            most significant part of UUID
+     * @param lsb
+     *            least significant part of UUID
+     * @return byte array representation
+     */
+    public static byte[] uuidToBytes(long msb, long lsb) {
+        byte[] buff = new byte[16];
+        LONG_VH.set(buff, 0, msb);
+        LONG_VH.set(buff, 8, lsb);
+        return buff;
+    }
+
+    /**
+     * Converts UUID value to byte array in big-endian order.
+     *
+     * @param uuid
+     *            UUID value
+     * @return byte array representation
+     */
+    public static byte[] uuidToBytes(UUID uuid) {
+        return uuidToBytes(uuid.getMostSignificantBits(), uuid.getLeastSignificantBits());
+    }
+
+    /**
+     * Writes a int value to the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @param x
+     *            the value to write
+     */
+    public static void writeInt(byte[] buff, int pos, int x) {
+        INT_VH.set(buff, pos, x);
+    }
+
+    /**
+     * Writes a long value to the byte array at the given position in big-endian
+     * order.
+     *
+     * @param buff
+     *            the byte array
+     * @param pos
+     *            the position
+     * @param x
+     *            the value to write
+     */
+    public static void writeLong(byte[] buff, int pos, long x) {
+        LONG_VH.set(buff, pos, x);
+    }
+
+    private Bits() {
+    }
+}
diff --git a/h2/src/java9/src/org/h2/util/package.html b/h2/src/java9/src/org/h2/util/package.html
new file mode 100644
index 000000000..ab7c51146
--- /dev/null
+++ b/h2/src/java9/src/org/h2/util/package.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
+<!--
+Copyright 2004-2018 H2 Group. Multiple-Licensed under the MPL 2.0, Version 1.0,
+and under the Eclipse Public License, Version 1.0
+Initial Developer: H2 Group
+-->
+<html xmlns=""http://www.w3.org/1999/xhtml"" lang=""en"" xml:lang=""en"">
+<head><meta http-equiv=""Content-Type"" content=""text/html;charset=utf-8"" /><title>
+Javadoc package documentation
+</title></head><body style=""font: 9pt/130% Tahoma, Arial, Helvetica, sans-serif; font-weight: normal;""><p>
+
+Internal utility classes reimplemented for Java 9 and later versions.
+
+</p></body></html>
\ No newline at end of file
diff --git a/h2/src/main/META-INF/MANIFEST.MF b/h2/src/main/META-INF/MANIFEST.MF
index b01ded397..365074859 100644
--- a/h2/src/main/META-INF/MANIFEST.MF
+++ b/h2/src/main/META-INF/MANIFEST.MF
@@ -13,6 +13,7 @@ Bundle-Vendor: H2 Group
 Bundle-Version: ${version}
 Bundle-License: http://www.h2database.com/html/license.html
 Bundle-Category: jdbc
+Multi-Release: true
 Import-Package: javax.management,
  javax.naming;resolution:=optional,
  javax.naming.spi;resolution:=optional,
diff --git a/h2/src/main/org/h2/util/Bits.java b/h2/src/main/org/h2/util/Bits.java
index d780cc923..3e3e7262d 100644
--- a/h2/src/main/org/h2/util/Bits.java
+++ b/h2/src/main/org/h2/util/Bits.java
@@ -14,6 +14,12 @@
  */
 public final class Bits {
 
+    /*
+     * Signatures of methods should match with
+     * h2/src/java9/src/org/h2/util/Bits.java and precompiled
+     * h2/src/java9/precompiled/org/h2/util/Bits.class.
+     */
+
     /**
      * Reads a int value from the byte array at the given position in big-endian
      * order.
diff --git a/h2/src/tools/org/h2/build/Build.java b/h2/src/tools/org/h2/build/Build.java
index 798e60390..3da20f606 100644
--- a/h2/src/tools/org/h2/build/Build.java
+++ b/h2/src/tools/org/h2/build/Build.java
@@ -446,8 +446,10 @@ private FileList excludeTestMetaInfFiles(FileList files) {
     @Description(summary = ""Create the regular h2.jar file."")
     public void jar() {
         compile();
+        FileList files = files(""src/java9/precompiled"");
+        copy(""temp/META-INF/versions/9"", files, ""src/java9/precompiled"");
         manifest(""H2 Database Engine"", ""org.h2.tools.Console"");
-        FileList files = files(""temp"").
+        files = files(""temp"").
             exclude(""temp/android/*"").
             exclude(""temp/org/h2/android/*"").
             exclude(""temp/org/h2/build/*"").
diff --git a/h2/src/tools/org/h2/build/code/CheckTextFiles.java b/h2/src/tools/org/h2/build/code/CheckTextFiles.java
index e4f4e8d21..9c7f7cd5e 100644
--- a/h2/src/tools/org/h2/build/code/CheckTextFiles.java
+++ b/h2/src/tools/org/h2/build/code/CheckTextFiles.java
@@ -30,7 +30,7 @@ public class CheckTextFiles {
             ""Driver"", ""Processor"", ""prefs"" };
     private static final String[] SUFFIX_IGNORE = { ""gif"", ""png"", ""odg"", ""ico"",
             ""sxd"", ""layout"", ""res"", ""win"", ""jar"", ""task"", ""svg"", ""MF"", ""mf"",
-            ""sh"", ""DS_Store"", ""prop"" };
+            ""sh"", ""DS_Store"", ""prop"", ""class"" };
     private static final String[] SUFFIX_CRLF = { ""bat"" };
 
     private static final boolean ALLOW_TAB = false;
diff --git a/h2/src/tools/org/h2/build/doc/SpellChecker.java b/h2/src/tools/org/h2/build/doc/SpellChecker.java
index 0cfb98478..70e4895b5 100644
--- a/h2/src/tools/org/h2/build/doc/SpellChecker.java
+++ b/h2/src/tools/org/h2/build/doc/SpellChecker.java
@@ -31,7 +31,7 @@ public class SpellChecker {
             ""properties"", ""task"", ""MF"", ""mf"", ""sh"", """" };
     private static final String[] IGNORE = { ""dev"", ""nsi"", ""gif"", ""png"", ""odg"",
             ""ico"", ""sxd"", ""zip"", ""bz2"", ""rc"", ""layout"", ""res"", ""dll"", ""jar"",
-            ""svg"", ""prefs"", ""prop"", ""iml"" };
+            ""svg"", ""prefs"", ""prop"", ""iml"", ""class"" };
     private static final String DELIMITERS =
             "" \n.();-\""=,*/{}_<>+\r:'@[]&\\!#|?$^%~`\t"";
     private static final String PREFIX_IGNORE = ""abc"";",Add optimized util . Bits for Java 9 and later versions,"""Added Java 9 specific implementation of Bits class and updated build process to support multi-release JARs""","""Implement Java 9+ specific utility classes and update build process to support multi-release JARs""","This commit adds a new class `Bits` in the package `org.h2.util` for Java 9 and later versions. The class provides methods for manipulating bytes and arrays, specifically for reading and writing int and long values in big-endian order, and converting UUID values to byte arrays.

The class uses `VarHandle` to access elements of a byte array as if it were an int or long array on a big-endian system. The `VarHandle` class was introduced in Java 9 and provides a low-level API for performing volatile and atomic operations on fields and array elements.

The class is marked as final and its constructor is private, indicating that it is not meant to be instantiated or subclassed.

Additionally, the commit updates the `MANIFEST.MF` file to include the `Multi-Release` attribute, which allows the JAR file to contain different versions of classes for different Java versions. This allows the new `Bits` class to be used only on Java 9 and later versions, while a different implementation can be used for earlier versions.

Finally, the commit updates the `Bits.java` file in the main source directory to match the signatures of the methods in the new `Bits` class, so that the correct implementation is used depending on the Java version.",Add Java 9-specific Bits class for byte manipulations and update build scripts for multi-release JAR support.,human
"diff --git a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def b/config-provisioning/src/main/resources/configdefinitions/config-server-security.def
deleted file mode 100644
index cfd5c9c04e5..00000000000
--- a/config-provisioning/src/main/resources/configdefinitions/config-server-security.def
+++ /dev/null
@@ -1,9 +0,0 @@
-# Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-namespace=config.provisioning
-
-athenzProviderHostname      string
-controllerHostIdentity      string
-configServerHostIdentity    string
-proxyHostIdentity           string
-tenantHostIdentity          string
-tenantIdentity              string",Remove unused config definition,"""Remove config-server-security.def configuration file""","""Remove config-server-security.def configuration definitions""","""Removed config-server-security.def file""

Explanation: The diff shows that the file ""config-server-security.def"" has been deleted. Therefore, an appropriate commit message would be ""Removed config-server-security.def file"".","""Remove config-server-security.def to clean up deprecated security configuration definitions.""",Model 1
"diff --git a/common/src/main/java/com/google/auto/common/MoreTypes.java b/common/src/main/java/com/google/auto/common/MoreTypes.java
index ca6b99b21..6df1acdc6 100644
--- a/common/src/main/java/com/google/auto/common/MoreTypes.java
+++ b/common/src/main/java/com/google/auto/common/MoreTypes.java
@@ -39,6 +39,10 @@ import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
+import javax.lang.model.type.NoType;
+import javax.lang.model.type.NullType;
+import javax.lang.model.type.PrimitiveType;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.TypeVisitor;
@@ -389,5 +393,183 @@ public final class MoreTypes {
     return builder.build();
   }
 
+  /**
+   * Returns a {@link ArrayType} if the {@link TypeMirror} represents a primitive array or
+   * throws an {@link IllegalArgumentException}.
+   */
+  public static ArrayType asArray(TypeMirror maybeArrayType) {
+    return maybeArrayType.accept(new CastingTypeVisitor<ArrayType>() {
+      @Override public ArrayType visitArray(ArrayType type, String ignore) {
+        return type;
+      }
+    }, ""primitive array"");
+  }
+
+  /**
+   * Returns a {@link DeclaredType} if the {@link TypeMirror} represents a declared type such
+   * as a class, interface, union/compound, or enum or throws an {@link IllegalArgumentException}.
+   */
+  public static DeclaredType asDeclared(TypeMirror maybeDeclaredType) {
+    return maybeDeclaredType.accept(new CastingTypeVisitor<DeclaredType>() {
+      @Override public DeclaredType visitDeclared(DeclaredType type, String ignored) {
+        return type;
+      }
+    }, ""declared type"");
+  }
+
+  /**
+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such
+   * as may result from missing code, or bad compiles or throws an {@link IllegalArgumentException}.
+   */
+  public static ErrorType asError(TypeMirror maybeErrorType) {
+    return maybeErrorType.accept(new CastingTypeVisitor<ErrorType>() {
+      @Override public ErrorType visitError(ErrorType type, String p) {
+        return type;
+      }
+    }, ""error type"");
+  }
+
+  /**
+   * Returns a {@link ExecutableType} if the {@link TypeMirror} represents an executable type such
+   * as a method, constructor, or initializer or throws an {@link IllegalArgumentException}.
+   */
+  public static ExecutableType asExecutable(TypeMirror maybeExecutableType) {
+    return maybeExecutableType.accept(new CastingTypeVisitor<ExecutableType>() {
+      @Override public ExecutableType visitExecutable(ExecutableType type, String p) {
+        return type;
+      }
+    }, ""executable type"");
+  }
+
+  /**
+   * Returns a {@link NoType} if the {@link TypeMirror} represents an non-type such
+   * as void, or package, etc. or throws an {@link IllegalArgumentException}.
+   */
+  public static NoType asNoType(TypeMirror maybeNoType) {
+    return maybeNoType.accept(new CastingTypeVisitor<NoType>() {
+      @Override public NoType visitNoType(NoType noType, String p) {
+        return noType;
+      }
+    }, ""non-type"");
+  }
+
+  /**
+   * Returns a {@link NullType} if the {@link TypeMirror} represents the null type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static NullType asNullType(TypeMirror maybeNullType) {
+    return maybeNullType.accept(new CastingTypeVisitor<NullType>() {
+      @Override public NullType visitNull(NullType nullType, String p) {
+        return nullType;
+      }
+    }, ""null"");
+  }
+
+  /**
+   * Returns a {@link PrimitiveType} if the {@link TypeMirror} represents a primitive type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static PrimitiveType asPrimitiveType(TypeMirror maybePrimitiveType) {
+    return maybePrimitiveType.accept(new CastingTypeVisitor<PrimitiveType>() {
+      @Override public PrimitiveType visitPrimitive(PrimitiveType type, String p) {
+        return type;
+      }
+    }, ""primitive type"");
+  }
+
+  //
+  // visitUnionType would go here, but it is a 1.7 API.
+  //
+
+  /**
+   * Returns a {@link TypeVariable} if the {@link TypeMirror} represents a type variable
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static TypeVariable asTypeVariable(TypeMirror maybeTypeVariable) {
+    return maybeTypeVariable.accept(new CastingTypeVisitor<TypeVariable>() {
+      @Override public TypeVariable visitTypeVariable(TypeVariable type, String p) {
+        return type;
+      }
+    }, ""type variable"");
+  }
+
+  /**
+   * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type
+   * or throws an {@link IllegalArgumentException}.
+   */
+  public static WildcardType asWildcard(WildcardType maybeWildcardType) {
+    return maybeWildcardType.accept(new CastingTypeVisitor<WildcardType>() {
+      @Override public WildcardType visitWildcard(WildcardType type, String p) {
+        return type;
+      }
+    }, ""wildcard type"");
+  }
+
+  /**
+   *
+   * Returns true if the raw type underlying the given {@link TypeMirror} represents the
+   * same raw type as the given {@link Class} and throws an IllegalArgumentException if the
+   * {@link TypeMirror} does not represent a type that can be referenced by a {@link Class}
+   */
+  public static boolean isTypeOf(final Class<?> clazz, TypeMirror type) {
+    checkNotNull(clazz);
+    return type.accept(new SimpleTypeVisitor6<Boolean, Void>() {
+      @Override protected Boolean defaultAction(TypeMirror type, Void ignored) {
+        throw new IllegalArgumentException(type + "" cannot be represented as a Class<?>."");
+      }
+
+      @Override public Boolean visitNoType(NoType noType, Void p) {
+        if (noType.getKind().equals(TypeKind.VOID)) {
+          return clazz.equals(Void.TYPE);
+        }
+        throw new IllegalArgumentException(noType + "" cannot be represented as a Class<?>."");
+      }
+
+      @Override public Boolean visitPrimitive(PrimitiveType type, Void p) {
+        switch (type.getKind()) {
+          case BOOLEAN:
+            return clazz.equals(Boolean.TYPE);
+          case BYTE:
+            return clazz.equals(Byte.TYPE);
+          case CHAR:
+            return clazz.equals(Character.TYPE);
+          case DOUBLE:
+            return clazz.equals(Double.TYPE);
+          case FLOAT:
+            return clazz.equals(Float.TYPE);
+          case INT:
+            return clazz.equals(Integer.TYPE);
+          case LONG:
+            return clazz.equals(Long.TYPE);
+          case SHORT:
+            return clazz.equals(Short.TYPE);
+          default:
+            throw new IllegalArgumentException(type + "" cannot be represented as a Class<?>."");
+        }
+      }
+
+      @Override public Boolean visitArray(ArrayType array, Void p) {
+        return clazz.isArray()
+            && isTypeOf(clazz.getComponentType(), array.getComponentType());
+      }
+
+      @Override public Boolean visitDeclared(DeclaredType type, Void ignored) {
+        TypeElement typeElement;
+        try {
+          typeElement = MoreElements.asType(type.asElement());
+        } catch (IllegalArgumentException iae) {
+          throw new IllegalArgumentException(type + "" does not represent a class or interface."");
+        }
+        return typeElement.getQualifiedName().contentEquals(clazz.getCanonicalName());
+      }
+    }, null);
+  }
+
+  private static class CastingTypeVisitor<T> extends SimpleTypeVisitor6<T, String> {
+    @Override protected T defaultAction(TypeMirror e, String label) {
+      throw new IllegalArgumentException(e + "" does not represent a "" + label);
+    }
+  }
+
   private MoreTypes() {}
 }
diff --git a/common/src/main/java/com/google/auto/common/SuperficialValidation.java b/common/src/main/java/com/google/auto/common/SuperficialValidation.java
index 43193c944..e87930818 100644
--- a/common/src/main/java/com/google/auto/common/SuperficialValidation.java
+++ b/common/src/main/java/com/google/auto/common/SuperficialValidation.java
@@ -16,6 +16,7 @@
 package com.google.auto.common;
 
 import java.util.List;
+import java.util.Map;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.AnnotationValueVisitor;
@@ -30,6 +31,7 @@ import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ErrorType;
 import javax.lang.model.type.ExecutableType;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVisitor;
 import javax.lang.model.type.WildcardType;
@@ -73,7 +75,7 @@ public final class SuperficialValidation {
         @Override public Boolean visitExecutable(ExecutableElement e, Void p) {
           AnnotationValue defaultValue = e.getDefaultValue();
           return isValidBaseElement(e)
-              && (defaultValue == null || validateAnnotationValue(defaultValue))
+              && (defaultValue == null || validateAnnotationValue(defaultValue, e.getReturnType()))
               && validateType(e.getReturnType())
               && validateTypes(e.getThrownTypes())
               && validateElements(e.getTypeParameters())
@@ -85,8 +87,7 @@ public final class SuperficialValidation {
               && validateTypes(e.getBounds());
         }
 
-        @Override
-        public Boolean visitUnknown(Element e, Void p) {
+        @Override public Boolean visitUnknown(Element e, Void p) {
           // just assume that unknown elements are OK
           return true;
         }
@@ -177,41 +178,49 @@ public final class SuperficialValidation {
 
   private static boolean validateAnnotation(AnnotationMirror annotationMirror) {
     return validateType(annotationMirror.getAnnotationType())
-        && validateAnnotationValues(annotationMirror.getElementValues().values());
+        && validateAnnotationValues(annotationMirror.getElementValues());
   }
 
   private static boolean validateAnnotationValues(
-      Iterable<? extends AnnotationValue> annotationValues) {
-    for (AnnotationValue annotationMirror : annotationValues) {
-      if (!validateAnnotationValue(annotationMirror)) {
+      Map<? extends ExecutableElement, ? extends AnnotationValue> valueMap) {
+    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> valueEntry :
+        valueMap.entrySet()) {
+      TypeMirror expectedType = valueEntry.getKey().getReturnType();
+      if (!validateAnnotationValue(valueEntry.getValue(), expectedType)) {
         return false;
       }
     }
     return true;
   }
 
-  private static final AnnotationValueVisitor<Boolean, Void> ANNOTATION_VALUE_VALIDATING_VISITOR =
-      new SimpleAnnotationValueVisitor6<Boolean, Void>() {
-        @Override
-        protected Boolean defaultAction(Object o, Void p) {
-          return true;
+  private static final AnnotationValueVisitor<Boolean, TypeMirror> VALUE_VALIDATING_VISITOR =
+      new SimpleAnnotationValueVisitor6<Boolean, TypeMirror>() {
+        @Override protected Boolean defaultAction(Object o, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(o.getClass(), expectedType);
         }
 
-        @Override
-        public Boolean visitUnknown(AnnotationValue av, Void p) {
+        @Override public Boolean visitUnknown(AnnotationValue av, TypeMirror expectedType) {
           // just take the default action for the unknown
-          return defaultAction(av, p);
+          return defaultAction(av, expectedType);
         }
 
-        @Override
-        public Boolean visitAnnotation(AnnotationMirror a, Void p) {
-          return validateAnnotation(a);
+        @Override public Boolean visitAnnotation(AnnotationMirror a, TypeMirror expectedType) {
+          return MoreTypes.equivalence().equivalent(a.getAnnotationType(), expectedType)
+              && validateAnnotation(a);
         }
 
         @Override
-        public Boolean visitArray(List<? extends AnnotationValue> values, Void p) {
+        public Boolean visitArray(List<? extends AnnotationValue> values, TypeMirror expectedType) {
+          if (!expectedType.getKind().equals(TypeKind.ARRAY)) {
+            return false;
+          }
+          try {
+            expectedType = MoreTypes.asArray(expectedType).getComponentType();
+          } catch (IllegalArgumentException e) {
+            return false; // Not an array expected, ergo invalid.
+          }
           for (AnnotationValue value : values) {
-            if (!value.accept(this, null)) {
+            if (!value.accept(this, expectedType)) {
               return false;
             }
           }
@@ -219,17 +228,54 @@ public final class SuperficialValidation {
         }
 
         @Override
-        public Boolean visitEnumConstant(VariableElement c, Void p) {
-          return validateElement(c);
+        public Boolean visitEnumConstant(VariableElement enumConstant, TypeMirror expectedType) {
+          return MoreTypes.equivalence().equivalent(enumConstant.asType(), expectedType)
+              && validateElement(enumConstant);
         }
 
-        @Override
-        public Boolean visitType(TypeMirror t, Void p) {
-          return validateType(t);
+        @Override public Boolean visitType(TypeMirror type, TypeMirror ignored) {
+          // We could check assignability here, but would require a Types instance. Since this
+          // isn't really the sort of thing that shows up in a bad AST from upstream compilation
+          // we ignore the expected type and just validate the type.  It might be wrong, but
+          // it's valid.
+          return validateType(type);
+        }
+
+        @Override public Boolean visitBoolean(boolean b, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Boolean.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitByte(byte b, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Byte.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitChar(char c, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Character.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitDouble(double d, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Double.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitFloat(float f, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Float.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitInt(int i, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Integer.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitLong(long l, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Long.TYPE, expectedType);
+        }
+
+        @Override public Boolean visitShort(short s, TypeMirror expectedType) {
+          return MoreTypes.isTypeOf(Short.TYPE, expectedType);
         }
       };
 
-  private static boolean validateAnnotationValue(AnnotationValue annotationValue) {
-    return annotationValue.accept(ANNOTATION_VALUE_VALIDATING_VISITOR, null);
+  private static boolean validateAnnotationValue(
+      AnnotationValue annotationValue, TypeMirror expectedType) {
+    return annotationValue.accept(VALUE_VALIDATING_VISITOR, expectedType);
   }
 }
diff --git a/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java
new file mode 100644
index 000000000..b067f1e74
--- /dev/null
+++ b/common/src/test/java/com/google/auto/common/MoreTypesIsTypeOfTest.java
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.auto.common;
+
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assert_;
+
+import com.google.common.collect.Iterables;
+import com.google.testing.compile.CompilationRule;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+
+/**
+ * Tests {@link MoreTypes#isTypeOf}.
+ */
+@RunWith(JUnit4.class)
+public class MoreTypesIsTypeOfTest {
+
+  @Rule public CompilationRule compilationRule = new CompilationRule();
+
+  private Elements elements;
+
+  @Before public void setUp() {
+    this.elements = compilationRule.getElements();
+  }
+
+  private interface TestType {}
+
+  @Test public void isTypeOf_DeclaredType() {
+    assertThat(MoreTypes.isTypeOf(TestType.class, typeElementFor(TestType.class).asType()))
+        .named(""mirror represents the TestType"")
+        .isTrue();
+    assertThat(MoreTypes.isTypeOf(String.class, typeElementFor(TestType.class).asType()))
+        .named(""mirror does not represent a String"")
+        .isFalse();
+  }
+
+  private interface ArrayType {
+    String[] array();
+  }
+
+  @Test public void isTypeOf_ArrayType() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(ArrayType.class));
+    assertThat(MoreTypes.isTypeOf(new String[] {}.getClass(), type))
+        .named(""array mirror represents an array Class object"")
+        .isTrue();
+  }
+
+  private interface PrimitiveBoolean {
+    boolean method();
+  }
+
+  @Test public void isTypeOf_PrimitiveBoolean() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveBoolean.class));
+    assertThat(MoreTypes.isTypeOf(Boolean.TYPE, type)).named(""mirror of a boolean"").isTrue();
+  }
+
+  private interface PrimitiveByte {
+    byte method();
+  }
+
+  @Test public void isTypeOf_PrimitiveByte() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveByte.class));
+    assertThat(MoreTypes.isTypeOf(Byte.TYPE, type)).named(""mirror of a byte"").isTrue();
+  }
+
+  private interface PrimitiveChar {
+    char method();
+  }
+
+  @Test public void isTypeOf_PrimitiveChar() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveChar.class));
+    assertThat(MoreTypes.isTypeOf(Character.TYPE, type)).named(""mirror of a char"").isTrue();
+  }
+
+  private interface PrimitiveDouble {
+    double method();
+  }
+
+  @Test public void isTypeOf_PrimitiveDouble() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveDouble.class));
+    assertThat(MoreTypes.isTypeOf(Double.TYPE, type)).named(""mirror of a double"").isTrue();
+  }
+
+  private interface PrimitiveFloat {
+    float method();
+  }
+
+  @Test public void isTypeOf_PrimitiveFloat() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveFloat.class));
+    assertThat(MoreTypes.isTypeOf(Float.TYPE, type)).named(""mirror of a float"").isTrue();
+  }
+
+  private interface PrimitiveInt {
+    int method();
+  }
+
+  @Test public void isTypeOf_PrimitiveInt() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveInt.class));
+    assertThat(MoreTypes.isTypeOf(Integer.TYPE, type)).named(""mirror of a int"").isTrue();
+  }
+
+  private interface PrimitiveLong {
+    long method();
+  }
+
+  @Test public void isTypeOf_PrimitiveLong() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveLong.class));
+    assertThat(MoreTypes.isTypeOf(Long.TYPE, type)).named(""mirror of a long"").isTrue();
+  }
+
+  private interface PrimitiveShort {
+    short method();
+  }
+
+  @Test public void isTypeOf_PrimitiveShort() {
+    TypeMirror type = extractReturnTypeFromHolder(typeElementFor(PrimitiveShort.class));
+    assertThat(MoreTypes.isTypeOf(Short.TYPE, type)).named(""mirror of a short"").isTrue();
+  }
+
+  private interface PrimitiveVoid {
+    void method();
+  }
+
+  @Test public void isTypeOf_void() {
+    TypeMirror primitive = extractReturnTypeFromHolder(typeElementFor(PrimitiveVoid.class));
+    assertThat(MoreTypes.isTypeOf(Void.TYPE, primitive)).named(""mirror of a void"").isTrue();
+  }
+
+  private interface DeclaredVoid {
+    Void method();
+  }
+
+  @Test public void isTypeOf_Void() {
+    TypeMirror declared = extractReturnTypeFromHolder(typeElementFor(DeclaredVoid.class));
+    assertThat(MoreTypes.isTypeOf(Void.class, declared)).named(""mirror of a void"").isTrue();
+  }
+
+  @Test public void isTypeOf_fail() {
+    TypeMirror method =
+        getOnlyElement(typeElementFor(DeclaredVoid.class).getEnclosedElements()).asType();
+    try {
+      MoreTypes.isTypeOf(String.class, method);
+      assert_().fail();
+    } catch (IllegalArgumentException expected) {}
+  }
+
+  // Utility methods for this test.
+
+  private TypeMirror extractReturnTypeFromHolder(TypeElement typeElement) {
+    Element element = Iterables.getOnlyElement(typeElement.getEnclosedElements());
+    TypeMirror arrayType = MoreElements.asExecutable(element).getReturnType();
+    return arrayType;
+  }
+
+  private TypeElement typeElementFor(Class<?> clazz) {
+    return elements.getTypeElement(clazz.getCanonicalName());
+  }
+}
diff --git a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
index dfe32373f..0ddf66467 100644
--- a/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
+++ b/common/src/test/java/com/google/auto/common/SuperficialValidationTest.java
@@ -203,6 +203,32 @@ public class SuperficialValidationTest {
         .failsToCompile();
   }
 
+  @Test
+  public void invalidAnnotationValue() {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(""test.Outer"",
+        ""package test;"",
+        """",
+        ""final class Outer {"",
+        ""  @interface TestAnnotation {"",
+        ""    Class[] classes();"",
+        ""  }"",
+        """",
+        ""  @TestAnnotation(classes = Foo)"",
+        ""  static class TestClass {}"",
+        ""}"");
+    assert_().about(javaSource())
+        .that(javaFileObject)
+        .processedWith(new AssertingProcessor() {
+          @Override void runAssertions() {
+            TypeElement testClassElement =
+                processingEnv.getElementUtils().getTypeElement(""test.Outer.TestClass"");
+            assert_().that(SuperficialValidation.validateElement(testClassElement))
+                .named(""testClassElement is valid"").isFalse();
+          }
+        }).failsToCompile();
+  }
+
+
   private static abstract class AssertingProcessor extends AbstractProcessor {
     @Override
     public Set<String> getSupportedAnnotationTypes() {","Fix the SuperficialValidator to properly handle unreasonable AnnotationValues ( specifically \"" < any > \"" and \"" < error > \"" strings appearing instead of real values where there are missing imports or other upstream compilation issues ) .","""Added MoreTypes utility class and updated SuperficialValidation to use it for type validation""","""Added type checking and validation utilities to MoreTypes and SuperficialValidation classes.""","This commit appears to add a significant number of methods to the `MoreTypes` class in the `com.google.auto.common` package. These methods include `asArray`, `asDeclared`, `asError`, `asExecutable`, `asNoType`, `asNullType`, `asPrimitiveType`, `asTypeVariable`, `asWildcard`, and `isTypeOf`. These methods seem to be used for checking the type of a `TypeMirror` object and casting it to the appropriate subtype of `TypeMirror` if it matches.

The commit also adds a new class `CastingTypeVisitor` which is used by the new methods in `MoreTypes` to perform the type checking and casting.

Additionally, the commit modifies the `SuperficialValidation` class to use the new `isTypeOf` method in `MoreTypes` when validating the return type of an executable element.

The commit message would likely be something like ""Add type checking and casting methods to MoreTypes and use them in SuperficialValidation"".","""Add utility methods for type visiting and validation in MoreTypes and SuperficialValidation classes""",Model 1
"diff --git a/src/test/java/org/elasticsearch/update/UpdateTests.java b/src/test/java/org/elasticsearch/update/UpdateTests.java
index e6d01a3d606..4f8df988586 100644
--- a/src/test/java/org/elasticsearch/update/UpdateTests.java
+++ b/src/test/java/org/elasticsearch/update/UpdateTests.java
@@ -568,7 +568,7 @@ public class UpdateTests extends ElasticsearchIntegrationTest {
                 .execute().actionGet();
         ensureGreen();
 
-        final int numberOfThreads = scaledRandomIntBetween(5,10);
+        final int numberOfThreads = scaledRandomIntBetween(3,5);
         final int numberOfIdsPerThread = scaledRandomIntBetween(3,10);
         final int numberOfUpdatesPerId = scaledRandomIntBetween(100,200);
         final int retryOnConflict = randomIntBetween(0,1);",Reduce the number of threads in StressUpdateDelete test .,"""Reduce concurrency in UpdateTests to improve test stability""","""Adjust update test concurrency parameters""","""Decrease number of threads in UpdateTests""

This commit is changing the number of threads used in the UpdateTests class from a range of 5-10 to a range of 3-5. This change may be intended to reduce the load on the system during testing or to address a specific issue that was observed with the higher number of threads. The rest of the code in the method remains the same.",Reduced the range for numberOfThreads in UpdateTests to improve test performance and reliability.,Model 1
"diff --git a/README.md b/README.md
index 5ec42331e..472c7187b 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 <a name=""README"">[<img src=""https://rawgithub.com/robolectric/robolectric/master/images/robolectric-horizontal.png""/>](http://robolectric.org)</a>
 
-[![Build Status](https://secure.travis-ci.org/robolectric/robolectric.png?branch=master)](http://travis-ci.org/robolectric/robolectric)
+[![Build Status](https://travis-ci.org/robolectric/robolectric.svg?branch=master)](https://travis-ci.org/robolectric/robolectric)
 
 Robolectric is a testing framework that de-fangs the Android SDK so you can test-drive the development of your Android app.",use nicer icon,"""Update Travis CI badge to use SVG format""",Update Travis CI badge to use SVG image.,"""Updated Travis CI build status badge in README.md""",Update Travis CI badge URL from .png to .svg for better image quality in the README.md.,Model 1
"diff --git a/hazelcast/pom.xml b/hazelcast/pom.xml
index f47eeddd17..adfcb5f5a5 100644
--- a/hazelcast/pom.xml
+++ b/hazelcast/pom.xml
@@ -55,11 +55,7 @@
                     <failOnNoGitDirectory>false</failOnNoGitDirectory>
                     <abbrevLength>7</abbrevLength>
                     <gitDescribe>
-                        <skip>false</skip>
-",remove git - describe plugin for the machines that doesn \' t have full git tree,"""Remove unnecessary configuration for gitDescribe in hazelcast pom.xml""","""Update hazelcast pom.xml to skip gitDescribe""","It seems like you're in the middle of a git diff process for a pom.xml file in a Hazelcast project. The changes you've shown remove the `<skip>false</skip>` line from the `<gitDescribe>` section of the pom.xml file.

If you want to create a commit message for this change, it could be something like: ""Removed `<skip>false</skip>` from `<gitDescribe>` in pom.xml"". However, without more context, it's hard to provide a more specific or detailed message. Please ensure that this change is intended and won't cause any issues with your project's build or functionality.",Updated the `<gitDescribe>` section in `hazelcast/pom.xml` to remove the `<skip>` element and its value.,Model 4
"diff --git a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
index 805b9e414c..b80a99f77c 100644
--- a/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
+++ b/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java
@@ -14,7 +14,6 @@
  */
 package io.netty.handler.codec;
 
-import io.netty.util.collection.CollectionUtils;
 import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import io.netty.util.concurrent.FastThreadLocal;
@@ -1147,7 +1146,7 @@ public class DefaultHeaders<T> implements Headers<T> {
         // because we want to force the keyComparator to be used for all comparisons
         List<T> namesList = namesList();
         List<T> otherNamesList = h2.namesList();
-        if (!CollectionUtils.equals(namesList, otherNamesList, keyComparator)) {
+        if (!equals(namesList, otherNamesList, keyComparator)) {
             return false;
         }
 
@@ -1156,7 +1155,7 @@ public class DefaultHeaders<T> implements Headers<T> {
         Set<T> names = new TreeSet<T>(keyComparator);
         names.addAll(namesList);
         for (T name : names) {
-            if (!CollectionUtils.equals(getAll(name), h2.getAll(name), valueComparator)) {
+            if (!equals(getAll(name), h2.getAll(name), valueComparator)) {
                 return false;
             }
         }
@@ -1164,6 +1163,31 @@ public class DefaultHeaders<T> implements Headers<T> {
         return true;
     }
 
+    /**
+     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)
+     * @param lhs Left hand side
+     * @param rhs Right hand side
+     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)
+     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.
+     */
+    private static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {
+        final int lhsSize = lhs.size();
+        if (lhsSize != rhs.size()) {
+            return false;
+        }
+
+        // Don't use a TreeSet to do the comparison.  We want to force the comparator
+        // to be used instead of the object's equals()
+        Collections.sort(lhs, comparator);
+        Collections.sort(rhs, comparator);
+        for (int i = 0; i < lhsSize; ++i) {
+            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     @Override
     public int hashCode() {
         int result = 1;
diff --git a/common/src/main/java/io/netty/util/collection/CollectionUtils.java b/common/src/main/java/io/netty/util/collection/CollectionUtils.java
deleted file mode 100644
index b9e11044c4..0000000000
--- a/common/src/main/java/io/netty/util/collection/CollectionUtils.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright 2014 The Netty Project
- *
- * The Netty Project licenses this file to you under the Apache License, version 2.0 (the
- * ""License""); you may not use this file except in compliance with the License. You may obtain a
- * copy of the License at:
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-package io.netty.util.collection;
-
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-
-/**
- * Provides utilities for the primitive collection types that are not supplied by the JDK
- */
-public final class CollectionUtils {
-
-    private CollectionUtils() { }
-
-    /**
-     * Compare two lists using the {@code comparator} for all comparisons (not using the equals() operator)
-     * @param lhs Left hand side
-     * @param rhs Right hand side
-     * @param comparator Comparator which will be used for all comparisons (equals() on objects will not be used)
-     * @return True if {@code lhs} == {@code rhs} according to {@code comparator}. False otherwise.
-     */
-    public static <T> boolean equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator) {
-        final int lhsSize = lhs.size();
-        if (lhsSize != rhs.size()) {
-            return false;
-        }
-
-        // Don't use a TreeSet to do the comparison.  We want to force the comparator
-        // to be used instead of the object's equals()
-        Collections.sort(lhs, comparator);
-        Collections.sort(rhs, comparator);
-        for (int i = 0; i < lhsSize; ++i) {
-            if (comparator.compare(lhs.get(i), rhs.get(i)) != 0) {
-                return false;
-            }
-        }
-        return true;
-    }
-}",Remove CollectionUtils .,"""Moved CollectionUtils.equals to DefaultHeaders and removed CollectionUtils class""","""Remove CollectionUtils.equals and replace with custom implementation in DefaultHeaders""","""Move equals() method from CollectionUtils to DefaultHeaders and remove CollectionUtils import""

Explanation:

* The method `equals(List<T> lhs, List<T> rhs, Comparator<? super T> comparator)` has been moved from `CollectionUtils` class to `DefaultHeaders` class.
* The import statement for `CollectionUtils` has been removed from `DefaultHeaders` class.
* The method `equals()` in `DefaultHeaders` class has been updated to use the newly moved `equals()` method instead of the one from `CollectionUtils`.
* The `CollectionUtils` class has been deleted.",Refactor: Inline `CollectionUtils.equals` into `DefaultHeaders` and remove `CollectionUtils` class.,Model 2
"diff --git a/v7/appcompat/res/values-v24/styles_base.xml b/v7/appcompat/res/values-v24/styles_base.xml
deleted file mode 100644
index dca71dd331b..00000000000
--- a/v7/appcompat/res/values-v24/styles_base.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version=""1.0"" encoding=""utf-8""?>
-<!--
-     Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the ""License"");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an ""AS IS"" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources>
-
-    <style name=""Base.Widget.AppCompat.SeekBar.Discrete"" parent=""android:Widget.Material.SeekBar.Discrete"" />
-
-</resources>",Remove values - v24 folder for now .,"""Remove styles_base.xml for API 24""","""Remove Base.Widget.AppCompat.SeekBar.Discrete style from styles_base.xml""","""Deleted Base.Widget.AppCompat.SeekBar.Discrete style in values-v24/styles_base.xml""",Remove `styles_base.xml` from `values-v24` in `v7/appcompat` directory to streamline style definitions.,Model 1
"diff --git a/src/com/facebook/buck/rules/AbstractBuildRule.java b/src/com/facebook/buck/rules/AbstractBuildRule.java
index e28630e6f7..a5f0a55fec 100644
--- a/src/com/facebook/buck/rules/AbstractBuildRule.java
+++ b/src/com/facebook/buck/rules/AbstractBuildRule.java
@@ -174,6 +174,10 @@ abstract class AbstractBuildRule implements BuildRule {
     return outputKey;
   }
 
+  protected void resetOutputKey() {
+    outputKey = null;
+  }
+
   /**
    * getRuleKey() calls the most derived implementation of this method to lazily construct a
    * RuleKey. Every subclass that extends the rule state in a way that matters to idempotency must
diff --git a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
index 9595ecb89e..f3533df56b 100644
--- a/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
+++ b/src/com/facebook/buck/rules/AbstractCachingBuildRule.java
@@ -340,6 +340,8 @@ abstract class AbstractCachingBuildRule extends AbstractBuildRule implements Bui
         for (Command command : commands) {
           commandRunner.runCommand(command);
         }
+        // Drop our cached output key, since it probably changed.
+        resetOutputKey();
 
         // Write the success file.
         buildRule.writeSuccessFile();",Reset output key after executing a caching rule .,"""Reset output key after running commands in AbstractCachingBuildRule""","""Reset output key when commands change in AbstractCachingBuildRule""","""Added resetOutputKey method to AbstractBuildRule and call it in AbstractCachingBuildRule""

This commit introduces a new protected method `resetOutputKey()` in the `AbstractBuildRule` class, which resets the output key to null. This method is then called in the `AbstractCachingBuildRule` class after running commands, with a comment indicating that this is to drop the cached output key because it probably changed.","""Add resetOutputKey method to clear cached outputKey after command execution in AbstractCachingBuildRule.""",Model 4
"diff --git a/core/src/mindustry/core/NetServer.java b/core/src/mindustry/core/NetServer.java
index 818fc0fa5..5734ee788 100644
--- a/core/src/mindustry/core/NetServer.java
+++ b/core/src/mindustry/core/NetServer.java
@@ -131,7 +131,7 @@ public class NetServer implements ApplicationListener{
                 return;
             }
 
-            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit()){
+            if(admins.getPlayerLimit() > 0 && playerGroup.size() >= admins.getPlayerLimit() && !netServer.admins.isAdmin(uuid, packet.usid)){
                 con.kick(KickReason.playerLimit);
                 return;",Allow admins to bypass the playerlimit [ server ] ( <issue_id> ),"""Prevent non-admins from joining when player limit is reached""","""Add admin exemption to player limit check""","""Added check for admin status before kicking player due to player limit in NetServer.java""",Added admin override for player limit enforcement in NetServer join logic.,Model 2
"diff --git a/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java b/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java
index 1a541471ec..76b1fa57b0 100644
--- a/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java
+++ b/contrib/src/java/org/apache/hadoop/hive/contrib/genericudf/example/GenericUDFDBOutput.java
@@ -29,7 +29,6 @@
 import org.apache.hadoop.hive.ql.metadata.HiveException;
 import org.apache.hadoop.hive.ql.udf.UDFType;
 import org.apache.hadoop.hive.ql.udf.generic.GenericUDF;
-import org.apache.hadoop.hive.ql.udf.generic.GenericUDFUtils;
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
@@ -159,17 +158,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""dboutput("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""dboutput"", children, "","");
   }
 
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java
index 4080c9f38d..c9763b64ac 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEvaluateNPE.java
@@ -76,6 +76,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 1);
-    return ""evaluate_npe("" + children[0] + "")"";
+    return getStandardDisplayString(""evaluate_npe"", children);
   }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java
index bf6c7c2325..68cd57a1ee 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaBoolean.java
@@ -54,6 +54,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 1);
-    return ""TestGetJavaBoolean("" + children[0] + "")"";
+    return getStandardDisplayString(""TestGetJavaBoolean"", children);
   }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java
index 914cebf4c4..9de5ee7f6a 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestGetJavaString.java
@@ -50,6 +50,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 1);
-    return ""GenericUDFTestGetJavaString("" + children[0] + "")"";
+    return getStandardDisplayString(""GenericUDFTestGetJavaString"", children);
   }
 }
diff --git a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java
index 0ab8d0b068..22a16eaccf 100644
--- a/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java
+++ b/itests/util/src/main/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFTestTranslate.java
@@ -119,7 +119,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 3);
-    return ""translate("" + children[0] + "","" + children[1] + "","" + children[2]
-        + "")"";
+    return getStandardDisplayString(""translate"", children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java
index 58ea3bac80..de7ebf74fc 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFEWAHBitmapBop.java
@@ -141,16 +141,6 @@ protected List<LongWritable> bitmapToWordArray(EWAHCompressedBitmap bitmap) {
   
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(name);
-    sb.append(""("");
-    for (int i = 0; i < children.length; i++) {
-      sb.append(children[i]);
-      if (i + 1 != children.length) {
-        sb.append("","");
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(name, children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java
index 8d731965b2..1e044b4dcd 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/AbstractGenericUDFReflect.java
@@ -101,16 +101,7 @@ Method findMethod(Class clazz, String name, Class<?> retType, boolean memberOnly
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(functionName()).append('(');
-    for (int i = 0; i < children.length; i++) {
-      if (i > 0) {
-        sb.append(',');
-      }
-      sb.append(children[i]);
-    }
-    sb.append(')');
-    return sb.toString();
+    return getStandardDisplayString(functionName(), children, "","");
   }
 
   protected abstract String functionName();
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java
index e3fb55872c..8a0f573648 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDF.java
@@ -210,4 +210,23 @@ public void copyToNewInstance(Object newInstance) throws UDFArgumentException {
           + "" and "" + newInstance.getClass().getName());
     }
   }
+
+  protected String getStandardDisplayString(String name, String[] children) {
+    return getStandardDisplayString(name, children, "", "");
+  }
+
+  protected String getStandardDisplayString(String name, String[] children, String delim) {
+    StringBuilder sb = new StringBuilder();
+    sb.append(name);
+    sb.append(""("");
+    if (children.length > 0) {
+      sb.append(children[0]);
+      for (int i = 1; i < children.length; i++) {
+        sb.append(delim);
+        sb.append(children[i]);
+      }
+    }
+    sb.append("")"");
+    return sb.toString();
+  }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java
index d655683715..1fdd41cef7 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAbs.java
@@ -150,17 +150,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""abs("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""abs"", children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
index c746a143e1..c5968835a7 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAddMonths.java
@@ -156,17 +156,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""add_months("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""add_months"", children);
   }
 
   protected Calendar addMonth(Date d, int numMonths) {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java
index 44eb44ce77..55a47fb920 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFArray.java
@@ -80,15 +80,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""array("");
-    for (int i = 0; i < children.length; i++) {
-      sb.append(children[i]);
-      if (i + 1 != children.length) {
-        sb.append("","");
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""array"", children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java
index e5999d6818..b952205834 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFAssertTrue.java
@@ -75,15 +75,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
  @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""assert_true("");
-    for (int i = 0; i < children.length; ++i) {
-      sb.append(children[i]);
-      if (i != children.length - 1) {
-        sb.append("", "");
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""assert_true"", children);
   }  
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
index 39875fcca4..1daf57e9c1 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseNumeric.java
@@ -22,7 +22,6 @@
 import java.util.List;
 
 import org.apache.hadoop.hive.common.type.HiveDecimal;
-import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.ql.exec.Description;
 import org.apache.hadoop.hive.ql.exec.FunctionRegistry;
 import org.apache.hadoop.hive.ql.exec.NoMatchingMethodException;
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java
index c86a9bd149..3904ca4127 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBasePad.java
@@ -18,16 +18,15 @@
 
 package org.apache.hadoop.hive.ql.udf.generic;
 
-import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
 import org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;
 import org.apache.hadoop.hive.ql.metadata.HiveException;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters;
-import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
-import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorConverters.Converter;
+import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector.PrimitiveCategory;
+import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;
 import org.apache.hadoop.io.IntWritable;
 import org.apache.hadoop.io.Text;
 
@@ -85,7 +84,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    return udfName + ""("" + StringUtils.join(children, "", "") + "")"";
+    return getStandardDisplayString(udfName, children);
   }
 
   protected abstract void performOp(byte[] data, byte[] txt, byte[] padTxt, int len, Text str,
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java
index b12f856756..cafdd3ea12 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFBaseTrim.java
@@ -78,7 +78,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    return udfName + ""("" + StringUtils.join(children, "", "") + "")"";
+    return getStandardDisplayString(udfName, children);
   }
 
   protected abstract String performOp(String val);
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java
index 03e5b70a51..8890e69163 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFCoalesce.java
@@ -69,17 +69,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""COALESCE("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""COALESCE"", children, "","");
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
index fac13ba02f..62869844de 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcat.java
@@ -205,17 +205,7 @@ public String stringEvaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""concat("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""concat"", children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java
index 8763942528..606cb22b35 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFConcatWS.java
@@ -142,12 +142,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length >= 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""concat_ws("");
-    for (int i = 0; i < children.length - 1; i++) {
-      sb.append(children[i]).append("", "");
-    }
-    sb.append(children[children.length - 1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""concat_ws"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java
index 9ee9480191..86a0714517 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDate.java
@@ -131,17 +131,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""to_date("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""to_date"", children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java
index 00738120f0..92a72bf69f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateAdd.java
@@ -196,16 +196,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""date_add("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""date_add"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java
index 1ecd835569..403cf11e69 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateDiff.java
@@ -96,17 +96,7 @@ public IntWritable evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""datediff("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""datediff"", children);
   }
 
   private Date convertToDate(PrimitiveCategory inputType, Converter converter, DeferredObject argument)
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java
index 290a5bc85a..db0f4cdb79 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDateSub.java
@@ -196,16 +196,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""date_sub("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""date_sub"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java
index 2f4be491b0..9858b4f41f 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFDecode.java
@@ -113,10 +113,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""decode("");
-    sb.append(children[0]).append("","");
-    sb.append(children[1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""decode"", children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java
index 4a14a65c67..60e0567e4a 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEWAHBitmapEmpty.java
@@ -95,15 +95,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""EWAH_BITMAP_EMPTY("");
-    for (int i = 0; i < children.length; i++) {
-      sb.append(children[i]);
-      if (i + 1 != children.length) {
-        sb.append("","");
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""EWAH_BITMAP_EMPTY"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java
index 85ba993480..2dc6ffe390 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFElt.java
@@ -92,12 +92,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length >= 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""elt("");
-    for (int i = 0; i < children.length - 1; i++) {
-      sb.append(children[i]).append("", "");
-    }
-    sb.append(children[children.length - 1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""elt"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java
index e254e6798f..64f8a14f89 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFEncode.java
@@ -113,10 +113,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""encode("");
-    sb.append(children[0]).append("","");
-    sb.append(children[1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""encode"", children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java
index d7e65fa662..0552be7cdc 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFField.java
@@ -90,12 +90,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length >= 2);
-
-    final StringBuilder sb = new StringBuilder();
-    sb.append(""field("");
-    sb.append(StringUtils.join(children, "", ""));
-    sb.append("")"");
-
-    return sb.toString();
+    return getStandardDisplayString(""field"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java
index 894b649952..754648dcb8 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFloorCeilBase.java
@@ -128,7 +128,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 1);
-    return opDisplayName + ""("" + children[0] + "")"";
+    return getStandardDisplayString(opDisplayName, children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java
index 3586b8d3ae..ce0c9d5f89 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFFormatNumber.java
@@ -220,12 +220,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""format_number("");
-    for (int i = 0; i < children.length - 1; i++) {
-      sb.append(children[i]).append("", "");
-    }
-    sb.append(children[children.length - 1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""format_number"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java
index 5d6925b789..e919345bca 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFGreatest.java
@@ -94,17 +94,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(getFuncName()).append(""("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(getFuncName(), children, "","");
   }
 
   protected String getFuncName() {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java
index 3e04951aab..474f404652 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFHash.java
@@ -58,7 +58,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    return ""hash("" + StringUtils.join(children, ',') + "")"";
+    return getStandardDisplayString(""hash"", children, "","");
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java
index 7009026a66..568fd465b8 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFIf.java
@@ -139,11 +139,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 3);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""if("");
-    sb.append(children[0]).append("", "");
-    sb.append(children[1]).append("", "");
-    sb.append(children[2]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""if"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java
index 5163cefd36..aad4f18437 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInFile.java
@@ -165,6 +165,6 @@ public void copyToNewInstance(Object newInstance) throws UDFArgumentException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    return ""in_file("" + children[0] + "", "" + children[1] + "")"";
+    return getStandardDisplayString(""in_file"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java
index 067f3d1ed4..406fcd608a 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInitCap.java
@@ -108,16 +108,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""initcap("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""initcap"", children);
   }
 }
\ No newline at end of file
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java
index db5b8c9449..0a13ac928e 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFInstr.java
@@ -93,6 +93,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    return ""instr("" + children[0] + children[1] + "")"";
+    return getStandardDisplayString(""instr"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java
index c5669a1571..3a43c571ae 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLastDay.java
@@ -133,17 +133,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""last_day("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""last_day"", children);
   }
 
   protected Calendar lastDay(Date d) {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java
index ec49f05a65..4740b81565 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLeadLag.java
@@ -165,14 +165,7 @@ public void setAmt(int amt) {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(_getFnName());
-    sb.append(""("");
-    sb.append(children[0]);
-    sb.append("", "");
-    sb.append(children[1]);
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(_getFnName(), children);
   }
 
   protected abstract String _getFnName();
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java
index aaf6dce7f0..094f280fe2 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLocate.java
@@ -109,7 +109,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2 || children.length == 3);
-    return ""locate("" + children[0] + children[1]
-        + (children.length == 3 ? children[2] : """") + "")"";
+    return getStandardDisplayString(""locate"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
index aa04b38ca6..659d4797e3 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFLower.java
@@ -105,17 +105,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""lower("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("","");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""lower"", children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java
index 9400962a01..3f505f2f55 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMacro.java
@@ -128,17 +128,7 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-      StringBuilder sb = new StringBuilder();
-      sb.append(macroName);
-      sb.append(""("");
-      for (int i = 0; i < children.length; i++) {
-        sb.append(children[i]);
-        if (i + 1 < children.length) {
-          sb.append("", "");
-        }
-      }
-      sb.append("")"");
-      return sb.toString();
+      return getStandardDisplayString(macroName, children);
   }
 
   public void setMacroName(String macroName) {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java
index 1d4bceff27..d8afd74c74 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapKeys.java
@@ -68,6 +68,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert children.length == 1;
-    return ""map_keys("" + children[0] + "")"";
+    return getStandardDisplayString(""map_keys"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java
index bd08a21e10..096ceac612 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFMapValues.java
@@ -68,6 +68,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert children.length == 1;
-    return ""map_values("" + children[0] + "")"";
+    return getStandardDisplayString(""map_values"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java
index 7b18d8234e..d58ecb4b05 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFNamedStruct.java
@@ -75,15 +75,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""named_struct("");
-    for (int i = 0; i < children.length; i++) {
-      if (i > 0) {
-        sb.append(',');
-      }
-      sb.append(children[i]);
-    }
-    sb.append(')');
-    return sb.toString();
+    return getStandardDisplayString(""named_struct"", children, "","");
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java
index c1fe4aa471..0d4fea1388 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPower.java
@@ -41,7 +41,6 @@
 @VectorizedExpressions({FuncPowerLongToDouble.class, FuncPowerDoubleToDouble.class})
 public class GenericUDFPower extends GenericUDF {
   private final String opName;
-  private final String opDisplayName;
 
   private transient PrimitiveObjectInspector baseOI;
   private transient PrimitiveObjectInspector powerOI;
@@ -54,7 +53,6 @@ public class GenericUDFPower extends GenericUDF {
 
   public GenericUDFPower() {
     opName = getClass().getSimpleName();
-    opDisplayName = ""power"";
     resultOI = PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;
   }
 
@@ -103,7 +101,7 @@ public ObjectInspector initialize(ObjectInspector[] arguments) throws UDFArgumen
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 2);
-    return opDisplayName + ""("" + children[0] + "", "" + children[1] + "")"";
+    return getStandardDisplayString(""power"", children);
   }
 
   @Override
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java
index e9c0cc4e9c..cb6dd627f8 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFPrintf.java
@@ -141,12 +141,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length >= 2);
-    StringBuilder sb = new StringBuilder();
-    sb.append(""printf("");
-    for (int i = 0; i < children.length - 1; i++) {
-      sb.append(children[i]).append("", "");
-    }
-    sb.append(children[children.length - 1]).append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""printf"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
index fecd6c50bb..963e4a87c4 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFRound.java
@@ -263,17 +263,7 @@ private static DoubleWritable round(DoubleWritable input, int scale) {
 
   @Override
   public String getDisplayString(String[] children) {
-    StringBuilder sb = new StringBuilder();
-    sb.append(""round("");
-    if (children.length > 0) {
-      sb.append(children[0]);
-      for (int i = 1; i < children.length; i++) {
-        sb.append("", "");
-        sb.append(children[i]);
-      }
-    }
-    sb.append("")"");
-    return sb.toString();
+    return getStandardDisplayString(""round"", children);
   }
 
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java
index c24c0ec194..3c5a473d39 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSentences.java
@@ -128,14 +128,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length >= 1 && children.length <= 3);
-    String display = ""sentences("" + children[0];
-    if(children.length > 1) {
-      display += "", "" + children[1];
-      if(children.length > 2) {
-        display += "", "" + children[2];
-      }
-    }
-    display += "")"";
-    return display;
+    return getStandardDisplayString(""sentences"", children);
   }
 }
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java
index c31ab54b29..45434297f0 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDFSize.java
@@ -79,6 +79,6 @@ public Object evaluate(DeferredObject[] arguments) throws HiveException {
   @Override
   public String getDisplayString(String[] children) {
     assert (children.length == 1);
-    return ""size("" + children[0] + "")"";
+    return",move standard getDisplayString impl to GenericUDF ( Alexander Pivovarov via Jason Dere ) .,"""Extracted common logic for generating display strings in GenericUDF""",Refactored getDisplayString methods to use a standard implementation in GenericUDF.,"The commit message should mention that the `getDisplayString` method in various classes has been refactored to use a standard format for displaying the function name and its children (arguments). This change simplifies the code and makes it more consistent across different UDFs.

Here's a suggested commit message:

Refactor getDisplayString method in various UDFs

This commit introduces a new protected method `getStandardDisplayString` in the `GenericUDF` class, which takes the function name and its children (arguments) and returns a string in a standard format. The `getDisplayString` method in various UDF classes has been updated to use this new method, simplifying the code and making it more consistent across different UDFs.",Refactored UDF display strings to use getStandardDisplayString for consistency and reduced code duplication. Removed unnecessary imports.,Model 3
"diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
index 00bf8165223..a3c6de93638 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ImageClassLoader.java
@@ -363,7 +363,7 @@ public final class ImageClassLoader {
                 }
             }
             return forName(name);
-        } catch (ClassNotFoundException ex) {
+        } catch (ClassNotFoundException | NoClassDefFoundError ex) {
             if (failIfClassMissing) {
                 throw",Make ImageClassLoader . forName ( ) more resilient .,"""Expand ImageClassLoader exception handling to include NoClassDefFoundError""","""Enhance ImageClassLoader to handle NoClassDefFoundError in addition to ClassNotFoundException""","""Added NoClassDefFoundError to the catch block in ImageClassLoader.java""

This commit message describes the change made in the code, which is the addition of `NoClassDefFoundError` to the catch block in the `ImageClassLoader.java` file. This means that the code will now handle both `ClassNotFoundException` and `NoClassDefFoundError` exceptions in the same way.",Catch NoClassDefFoundError in ImageClassLoader and handle missing classes gracefully,Model 1
"diff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
index 8808dd08bf3..addc6f9cb73 100644
--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-node.jsx
@@ -57,7 +57,6 @@ class WhileNode extends React.Component {
                     expression={expression}
                     editorOptions={editorOptions}
                     model={model}
-                    body={model.body}
                 />
             </g>
         );
diff --git a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
index 644d49c33c2..d6dbdb9eda8 100644
--- a/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
+++ b/modules/web/src/plugins/ballerina/diagram/views/default/components/nodes/while-statement-decorator.jsx
@@ -170,8 +170,6 @@ class WhileStatementDecorator extends React.Component {
         const pointX = bBox.getRight() - breakpointHalf;
         const { model: { viewState } } = this.props;
         const statementBBox = viewState.components['statement-box'];
-        const { designer } = this.context;
-        const headerHeight = viewState.components['block-header'].h;
         const pointY = statementBBox.y - breakpointHalf;
         return (
             <Breakpoint
@@ -348,7 +346,7 @@ class WhileStatementDecorator extends React.Component {
                     width={statementBBox.w}
                     height={statementBBox.h}
                     baseComponent='rect'
-                    dropTarget={this.props.body}
+                    dropTarget={this.props.model.body}
                     enableDragBg
                     enableCenterOverlayLine={!this.props.disableDropzoneMiddleLineOverlay}
                 />
@@ -361,7 +359,7 @@ class WhileStatementDecorator extends React.Component {
                         onClick={this.openExpressionEditor}
                         className='invisible-rect'
                     />
-                    {expression && <title> {expression.text} </title>}
+                    {expression && <title> {this.props.editorOptions.model.getSource(true)} </title>}
                 </g>
                 { isBreakpoint && this.renderBreakpointIndicator() }
                 {this.props.children}
@@ -383,7 +381,6 @@ WhileStatementDecorator.defaultProps = {
     draggable: null,
     children: null,
     undeletable: false,
-    editorOptions: null,
     parameterEditorOptions: null,
     utilities: null,
     parameterBbox: null,
@@ -394,17 +391,14 @@ WhileStatementDecorator.defaultProps = {
         jump: false,
     },
     disableDropzoneMiddleLineOverlay: false,
+    isDebugHit: false,
 };
 
 WhileStatementDecorator.propTypes = {
-    draggable: PropTypes.func,
     title: PropTypes.string.isRequired,
     model: PropTypes.instanceOf(Node).isRequired,
     children: PropTypes.arrayOf(React.PropTypes.node),
-    utilities: PropTypes.element,",Show full condition source on condition hover,"""Refactor WhileNode and WhileStatementDecorator components to remove unused props and update expression title""","""Refactor While Node and Statement Decorator to use model.body instead of body prop""","""Remove unnecessary body prop in WhileNode and update title prop in WhileStatementDecorator. Also, add isDebugHit default prop and remove unnecessary props in WhileStatementDecorator.""","""Remove unused properties and clean up WhileNode and WhileStatementDecorator components in Ballerina diagram views.""",Model 4
"diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index f8b4e692..cca8e169 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -12,4 +12,4 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v0_9_900
+maven.jdiff.old.tag=v1_0_000",Set jdiff version .,"""Update maven.jdiff.old.tag to v1_0_000""","""Updated maven.jdiff.old.tag to v1_0_000""","Updated JodaTime project properties: Changed maven.jdiff.old.tag from v0_9_900 to v1_0_000.

This change updates the old tag used by the maven-jdiff-plugin in the JodaTime project from version 0.9.9 to version 1.0.0. This plugin is likely used to generate a diff report between the source code of two different versions of the project.",Update jdiff old tag from v0_9_900 to v1_0_000 in project.properties,Model 4
"diff --git a/pdex/src/processing/mode/experimental/DebugEditor.java b/pdex/src/processing/mode/experimental/DebugEditor.java
index 7ab11b682..51e7341d1 100755
--- a/pdex/src/processing/mode/experimental/DebugEditor.java
+++ b/pdex/src/processing/mode/experimental/DebugEditor.java
@@ -1079,8 +1079,11 @@ public class DebugEditor extends JavaEditor implements ActionListener {
     @Override
     public void prepareRun() {
         super.prepareRun();
+        if (!ExperimentalMode.autoSaveEnabled)
+          return;
+        
         try {
-            if (sketch.isUntitled()) {
+            if (sketch.isUntitled() && ExperimentalMode.untitledAutoSaveEnabled) {
                 if (handleSave(true))
                     statusTimedNotice(""Saved. Running..."", 5);
                 else
@@ -1118,20 +1121,6 @@ public class DebugEditor extends JavaEditor implements ActionListener {
      * @param secs
      */
     public void statusTimedNotice(final String msg, final int secs) {
-//        EventQueue.invokeLater(new Runnable() {
-//            
-//            @Override
-//            public void run() {
-//                statusNotice(msg);
-//                try {
-//                    Thread.sleep(secs * 1000);
-//                } catch (InterruptedException e) {
-//                    e.printStackTrace();
-//                }
-//                statusEmpty();
-//                
-//            }
-//        });
         SwingWorker s = new SwingWorker<Void, Void>() {
 
             @Override
diff --git a/pdex/src/processing/mode/experimental/ExperimentalMode.java b/pdex/src/processing/mode/experimental/ExperimentalMode.java
index 5b04896d3..b90b5a519 100755
--- a/pdex/src/processing/mode/experimental/ExperimentalMode.java
+++ b/pdex/src/processing/mode/experimental/ExperimentalMode.java
@@ -127,13 +127,15 @@ public class ExperimentalMode extends JavaMode {
   }
   
   volatile public static boolean errorCheckEnabled = true, warningsEnabled = true,
-      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false;
+      codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false,
+      untitledAutoSaveEnabled = false, autoSaveEnabled = true;
   public static int autoSaveInterval = 3; //in minutes
 
   public static final String prefErrorCheck = ""pdex.errorCheckEnabled"",
       prefWarnings = ""pdex.warningsEnabled"",
       prefCodeCompletionEnabled = ""pdex.ccEnabled"",
-      prefDebugOP = ""pdex.dbgOutput"", prefErrorLogs = ""pdex.writeErrorLogs"", prefAutoSaveInterval = ""pdex.autoSaveInterval"";
+      prefDebugOP = ""pdex.dbgOutput"", prefErrorLogs = ""pdex.writeErrorLogs"", prefAutoSaveInterval = ""pdex.autoSaveInterval"",
+      prefUntitledAutoSave = ""pdex.autoSave.untitledAutoSaveEnabled"", prefAutoSave = ""pdex.autoSaveEnabled"";
   
   public void loadPreferences(){
     log(""Load PDEX prefs"");
@@ -144,6 +146,8 @@ public class ExperimentalMode extends JavaMode {
     DEBUG = Preferences.getBoolean(prefDebugOP);
     errorLogsEnabled = Preferences.getBoolean(prefErrorLogs);
     autoSaveInterval = Preferences.getInteger(prefAutoSaveInterval);
+    untitledAutoSaveEnabled = Preferences.getBoolean(prefUntitledAutoSave);
+    autoSaveEnabled = Preferences.getBoolean(prefAutoSave);
   }
   
   public void savePreferences(){
@@ -154,6 +158,8 @@ public class ExperimentalMode extends JavaMode {
     Preferences.setBoolean(prefDebugOP, DEBUG);
     Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);
     Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);
+    Preferences.setBoolean(prefUntitledAutoSave,untitledAutoSaveEnabled);
+    Preferences.setBoolean(prefAutoSave,autoSaveEnabled);
   }
   
   public void ensurePrefsExist(){
@@ -169,6 +175,10 @@ public class ExperimentalMode extends JavaMode {
       Preferences.setBoolean(prefErrorLogs,errorLogsEnabled);
     if(Preferences.get(prefAutoSaveInterval) == null) 
       Preferences.setInteger(prefAutoSaveInterval,autoSaveInterval);
+    if(Preferences.get(prefUntitledAutoSave) == null) 
+","Added untitledAutoSave , autoSave to preferences","""Added auto-save feature for untitled sketches and refactored statusTimedNotice method to use SwingWorker""","""Added experimental auto-save feature with configurable options for untitled sketches and overall auto-save.""","""Added new preferences for untitled auto save and general auto save in ExperimentalMode.java and DebugEditor.java""

This commit adds two new preferences to the ExperimentalMode class: `untitledAutoSaveEnabled` and `autoSaveEnabled`. It also modifies the `prepareRun()` method in DebugEditor.java to check for these preferences before saving the sketch. Additionally, it changes the implementation of the `statusTimedNotice()` method in DebugEditor.java to use a SwingWorker instead of `EventQueue.invokeLater()` and `Thread.sleep()`.",Enable configurable auto-save options for untitled sketches and general auto-save functionality in Experimental Mode.,Model 1
"diff --git a/.hgtags-top-repo b/.hgtags-top-repo
index e9ce41d71d..bc166aa988 100644
--- a/.hgtags-top-repo
+++ b/.hgtags-top-repo
@@ -603,3 +603,4 @@ fe901996777f50198be2c785cd7e3b8198692bbe jdk8u101-b04
 0b1358bc93ca7a30bab6cf2d7da09bb5a11f5a93 jdk8u101-b09
 1db5081d8ee77caffa0f534496af5fb908e9b61f jdk8u101-b10
 81cdb3e279f8f245f740e7d3e79a1629b6599325 jdk8u101-b11
+d6f920823feb4d44e67cec383d8c6e4a5dba9d76 jdk8u101-b12",Added tag jdk8u101 - b12 for changeset 43db847133ec,"""Added jdk8u101-b12 tag""",Added jdk8u101-b12 to .hgtags-top-repo,"Based on the diff you provided, it seems like a new commit has been added to the .hgtags-top-repo file. The new commit hash is `d6f920823feb4d44e67cec383d8c6e4a5dba9d76` and it corresponds to the tag `jdk8u101-b12`.

However, the diff does not provide a commit message. Commit messages are typically found in the commit log, not in the diff itself. If you want to add a commit message, you would typically do so when committing the changes, not in the diff.

If you're using Git, you can commit this change with a message like this:

```bash
git commit -m ""Updated .hgtags-top-repo to jdk8u101-b12""
```

Please replace the message with something more appropriate if necessary.",Added tag for jdk8u101-b12 to .hgtags-top-repo file.,Model 1
"diff --git a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
index a62375ffd6..085e0f04f6 100644
--- a/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
+++ b/core/src/test/java/com/google/errorprone/ErrorProneCompilerIntegrationTest.java
@@ -637,6 +637,60 @@ public class ErrorProneCompilerIntegrationTest {
     }
   }
 
+  @Test
+  public void pluginWithFlag() throws Exception {
+
+    Path base = tmpFolder.newFolder().toPath();
+    Path source = base.resolve(""test/Test.java"");
+    Files.createDirectories(source.getParent());
+    Files.write(
+        source,
+        Arrays.asList(
+            ""package test;"", //
+            ""public class Test {"",
+            ""  int f() { return 42; }"",
+            ""}""),
+        UTF_8);
+
+    Path jar = base.resolve(""libproc.jar"");
+    try (JarOutputStream jos = new JarOutputStream(Files.newOutputStream(jar))) {
+      jos.putNextEntry(new JarEntry(""META-INF/services/"" + BugChecker.class.getName()));
+      jos.write((CPSChecker.class.getName() + ""\n"").getBytes(UTF_8));
+      String classFile = CPSChecker.class.getName().replace('.', '/') + "".class"";
+      jos.putNextEntry(new JarEntry(classFile));
+      ByteStreams.copy(getClass().getClassLoader().getResourceAsStream(classFile), jos);
+    }
+
+    // Plugin jar is on classpath, disabled.
+    {
+      List<String> args =
+          ImmutableList.of(
+              source.toAbsolutePath().toString(),
+              ""-processorpath"",
+              jar.toAbsolutePath().toString(),
+              ""-XepDisableAllChecks"");
+      StringWriter out = new StringWriter();
+      Result result =
+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));
+      assertThat(result).isEqualTo(Result.OK);
+    }
+    // Plugin is disabled by -XepDisableAllChecks and re-enabled with -Xep:CPSChecker:ERROR
+    {
+      List<String> args =
+          ImmutableList.of(
+              source.toAbsolutePath().toString(),
+              ""-processorpath"",
+              jar.toAbsolutePath().toString(),
+              ""-XepDisableAllChecks"",
+              ""-Xep:CPSChecker:ERROR"");
+      StringWriter out = new StringWriter();
+      Result result =
+          ErrorProneCompiler.compile(args.toArray(new String[0]), new PrintWriter(out, true));
+      assertThat(out.toString()).contains(""Using 'return' is considered harmful"");
+      assertThat(result).isEqualTo(Result.ERROR);
+    }
+  }
+
   @Test
   public void paramsFiles() throws IOException {
     Path dir = tmpFolder.newFolder(""tmp"").toPath();",Add integration test to ensure - XepDisableAllChecks .,"""Add test for plugin with flag in ErrorProneCompilerIntegrationTest""","""Add test for plugin with flag""","""Added test for Error Prone compiler integration with plugin flags""

This commit adds a new test method `pluginWithFlag()` to the `ErrorProneCompilerIntegrationTest` class. This method tests the behavior of the Error Prone compiler when a plugin jar is on the classpath and is disabled/enabled using various command line flags.

The test creates a temporary directory and writes a simple Java source file `Test.java` to it. It then creates a jar file `libproc.jar` that contains a single Error Prone plugin `CPSChecker`.

The test then runs the Error Prone compiler twice with different command line arguments:

1. The first time, it runs the compiler with the `-processorpath` flag pointing to the `libproc.jar` file, and the `-XepDisableAllChecks` flag to disable all Error Prone checks. This should result in a successful compilation with no errors.
2. The second time, it runs the compiler with the same `-processorpath` flag, but adds the `-Xep:CPSChecker:ERROR` flag to enable the `CPSChecker` plugin and treat its warnings as errors. This should result in a compilation error with the message ""Using 'return' is considered harmful"".

The test uses the `ErrorProneCompiler.compile()` method to run the compiler and checks the result and output against the expected values using the `assertThat()` method.",Add a test to verify a plugin with flag functionality in ErrorProneCompilerIntegrationTest.,human
"diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
index 10e75d88307..92ed0ea8307 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/EqlIT.java
@@ -21,6 +21,12 @@ package org.elasticsearch.client;
 
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
+import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;
+import org.elasticsearch.action.admin.indices.refresh.RefreshResponse;
+import org.elasticsearch.action.bulk.BulkRequest;
+import org.elasticsearch.action.bulk.BulkResponse;
+import org.elasticsearch.action.index.IndexRequest;
+import org.elasticsearch.action.support.WriteRequest;
 import org.elasticsearch.client.eql.EqlSearchRequest;
 import org.elasticsearch.client.eql.EqlSearchResponse;
 import org.elasticsearch.client.eql.EqlStatsRequest;
@@ -28,51 +34,132 @@ import org.elasticsearch.client.eql.EqlStatsResponse;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.time.DateUtils;
 import org.elasticsearch.index.IndexSettings;
+import org.elasticsearch.rest.RestStatus;
+import org.elasticsearch.search.SearchHit;
 import org.junit.Before;
 
+import java.io.IOException;
 import java.time.format.DateTimeFormatter;
+import java.util.Locale;
+import java.util.Map;
 
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
+import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 
 public class EqlIT extends ESRestHighLevelClientTestCase {
 
+    private static final String INDEX_NAME = ""index"";
+    private static final int RECORD_COUNT = 40;
+    private static final int DIVIDER = 4;
+
     @Before
-    public void setupRemoteClusterConfig() throws Exception {
+    public void setup() throws Exception {
         setupRemoteClusterConfig(""local_cluster"");
+        setupData();
     }
 
-    public void testBasicSearch() throws Exception {
-        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/index/_doc/1"");
-        doc1.setJsonEntity(""{\""event_subtype_full\"": \""already_running\"", "" +
-                ""\""event\"": {"" +
-                    ""\""category\"": \""process\"""" +
-                ""},"" +
-                ""\""event_type_full\"": \""process_event\"", "" +
-                ""\""opcode\"": 3,"" +
-                ""\""pid\"": 0,"" +
-                ""\""process_name\"": \""System Idle Process\"","" +
-                ""\""serial_event_id\"": 1,"" +
-                ""\""subtype\"": \""create\"","" +
-                ""\""@timestamp\"": 116444736000000000,"" +
-                ""\""unique_pid\"": 1}"");
-        client().performRequest(doc1);
-        client().performRequest(new Request(HttpPost.METHOD_NAME, ""/_refresh""));
+    private void setupData() throws IOException {
+        final BulkRequest bulkRequest = new BulkRequest();
+        bulkRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
+        for (int i = 0; i < RECORD_COUNT; i++) {
+            final IndexRequest indexRequest = new IndexRequest(INDEX_NAME);
+            indexRequest.source(jsonBuilder()
+                    .startObject()
+                    .field(""event_subtype_full"", ""already_running"")
+                    .startObject(""event"")
+                    .field(""category"", ""process"")
+                    .endObject()
+                    .field(""event_type"", ""foo"")
+                    .field(""event_type_full"", ""process_event"")
+                    .field(""opcode"", ((i % DIVIDER) == 0) ? 1 : 0)
+                    .field(""pid"", ((i % DIVIDER) == 0) ? 100 : 0)
+                    .field(""process_name"", ""System Idle Process"")
+                    .field(""serial_event_id"", i + 1)
+                    .field(""subtype"", ""create"")
+                    .field(""@timestamp"", String.format(Locale.ROOT, ""2018-01-01T00:00:%02dZ"", i))
+                    .field(""unique_pid"", ((i % DIVIDER) == 0) ? 101 : 0)
+                    .endObject());
+            bulkRequest.add(indexRequest);
+        }
+        BulkResponse bulkResponse = highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT);
+        assertEquals(RestStatus.OK, bulkResponse.status());
+        assertFalse(bulkResponse.hasFailures());
 
-        EqlClient eql = highLevelClient().eql();
-        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
-        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        RefreshResponse refreshResponse = highLevelClient().indices().refresh(new RefreshRequest(INDEX_NAME), RequestOptions.DEFAULT);
+        assertEquals(0, refreshResponse.getFailedShards());
+    }
+
+    private void assertResponse(EqlSearchResponse response, int count) {
         assertNotNull(response);
         assertFalse(response.isTimeout());
         assertNotNull(response.hits());
         assertNull(response.hits().sequences());
         assertNull(response.hits().counts());
         assertNotNull(response.hits().events());
-        assertThat(response.hits().events().size(), equalTo(1));
+        assertThat(response.hits().events().size(), equalTo(count));
+    }
+
+    public void testBasicSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
+        assertResponse(execute(request, eql::search, eql::searchAsync), RECORD_COUNT);
+    }
+
+    @SuppressWarnings(""unchecked"")
+    public void testSimpleConditionSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+
+        // test simple conditional
+        EqlSearchRequest request = new EqlSearchRequest(""index"", ""foo where pid > 0"");
+
+        // test with non-default event.category mapping
+        request.eventCategoryField(""event_type"");
+
+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        assertResponse(response, RECORD_COUNT / DIVIDER);
+
+        // test the content of the hits
+        for (SearchHit hit : response.hits().events()) {
+            final Map<String, Object> source = hit.getSourceAsMap();
+
+            final Map<String, Object> event = (Map<String, Object>) source.get(""event"");
+            assertThat(event.get(""category""), equalTo(""process""));
+            assertThat(source.get(""event_type""), equalTo(""foo""));
+            assertThat(source.get(""event_type_full""), equalTo(""process_event""));
+            assertThat(source.get(""opcode""), equalTo(1));
+            assertThat(source.get(""pid""), equalTo(100));
+            assertThat(source.get(""process_name""), equalTo(""System Idle Process""));
+            assertThat((int) source.get(""serial_event_id""), greaterThan(0));
+            assertThat(source.get(""unique_pid""), equalTo(101));
+        }
+    }
+
+    @SuppressWarnings(""unchecked"")
+    public void testEqualsInFilterConditionSearch() throws Exception {
+        EqlClient eql = highLevelClient().eql();
+
+        EqlSearchRequest request = new EqlSearchRequest(""index"",
+                ""process where event_type_full = \""process_event\"" and serial_event_id in (1,3,5)"");
+
+        EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
+        assertResponse(response, 3);
+
+        // test the content of the hits
+        for (SearchHit hit : response.hits().events()) {
+            final Map<String, Object> source = hit.getSourceAsMap();
+
+            final Map<String, Object> event = (Map<String, Object>) source.get(""event"");
+            assertThat(event.get(""category""), equalTo(""process""));
+            assertThat(source.get(""serial_event_id""), anyOf(equalTo(1), equalTo(3), equalTo(5)));
+        }
     }
 
     public void testLargeMapping() throws Exception {
-        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/index/_doc/1"");
+        final String index = ""large_mapping_index"";
+
+        Request doc1 = new Request(HttpPut.METHOD_NAME, ""/"" + index + ""/_doc/1"");
         // use more exact fields (dates) than the default to verify that retrieval works and requesting doc values
         // would fail
         int PASS_DEFAULT_DOC_VALUES = IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.get(Settings.EMPTY) + 50;
@@ -94,7 +181,7 @@ public class EqlIT extends ESRestHighLevelClientTestCase {
 
 
         EqlClient eql = highLevelClient().eql();
-        EqlSearchRequest request = new EqlSearchRequest(""index"", ""process where true"");
+        EqlSearchRequest request = new EqlSearchRequest(index, ""process where true"");
         EqlSearchResponse response = execute(request, eql::search, eql::searchAsync);
         assertNotNull(response);
         assertNotNull(response.hits());",Add more rest client tests ( <issue_id> ) ( <issue_id> ),"""Enhance EqlIT test class with additional test cases and setup data""","""Added support for bulk indexing and refresh operations in EqlIT tests""","""Add basic and simple condition search tests for EQL in ESRestHighLevelClientTestCase""

The changes in this commit include:

* The addition of a `setupData()` method that sets up data for tests by creating a bulk request and adding index requests to it. It then executes the bulk request and refreshes the index.
* The addition of a `assertResponse()` method that asserts the response of an EQL search request.
* The modification of the `testBasicSearch()` method to use the `assertResponse()` method and to assert that the number of events returned is equal to the number of records set up in `setupData()`.
* The addition of a `testSimpleConditionSearch()` method that tests a simple EQL search request with a condition and asserts that the number of events returned is equal to the expected number of records that match the condition. It also asserts that the content of the hits returned is correct.
* The addition of a `testEqualsInFilterConditionSearch()` method that tests an EQL search request with a filter condition that uses the equals operator and the in operator. It asserts that the number of events returned is equal to the expected number of records that match the condition. It also asserts that the content of the hits returned is correct.
* The modification of the `testLargeMapping()` method to use the `assertResponse()` method and to assert that the number of events returned is equal to the expected number of records that match the condition. It also asserts that the content of the hits returned is correct.

The changes in this commit are related to adding tests for the Elasticsearch Query Language (EQL) in the `ESRestHighLevelClientTestCase` class. The tests cover basic search, simple condition search, and search with filter conditions using the equals and in operators. The tests also cover the case where the number of fields in the mapping is larger than the default number of doc value fields that can be requested.","""Improved EqlIT by adding data setup, simple condition, and equality filter condition search tests.""",Model 1
"diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
index adbd7d0b8fd..218756cc47e 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostFunction.java
@@ -122,6 +122,7 @@ final class HostFunction implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(HostFunction receiver) {
         return System.identityHashCode(receiver.method);
     }
diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
index 1102db658c3..b15a6655704 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/HostObject.java
@@ -1156,6 +1156,7 @@ final class HostObject implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(HostObject receiver) {
         return System.identityHashCode(receiver.obj);
     }
diff --git a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
index 517f59bf3f0..a8f2d29004c 100644
--- a/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
+++ b/truffle/src/com.oracle.truffle.polyglot/src/com/oracle/truffle/polyglot/PolyglotProxy.java
@@ -841,6 +841,7 @@ final class PolyglotProxy implements TruffleObject {
     }
 
     @ExportMessage
+    @TruffleBoundary
     static int identityHashCode(PolyglotProxy receiver) {
         return System.identityHashCode(receiver.proxy);
     }
diff --git a/vm/mx.vm/mx_vm_gate.py b/vm/mx.vm/mx_vm_gate.py
index 78f3ea5ad40..f2bb90974eb 100644
--- a/vm/mx.vm/mx_vm_gate.py
+++ b/vm/mx.vm/mx_vm_gate.py
@@ -216,6 +216,7 @@ def _svm_truffle_tck(native_image, svm_suite, language_suite, language_id):
             '-cp',
             cp,
             '--no-server',
+            '-H:+TruffleCheckBlackListedMethods',
             '-H:-FoldSecurityManagerGetter',
             '-H:TruffleTCKPermissionsReportFile={}'.format(report_file),
             '-H:Path={}'.format(svmbuild),
diff --git a/vm/mx.vm/suite.py b/vm/mx.vm/suite.py
index e82e3214fff..b3ed96d1140 100644
--- a/vm/mx.vm/suite.py
+++ b/vm/mx.vm/suite.py
@@ -39,7 +39,7 @@ suite = {
                 ""name"": ""graal-nodejs"",
                 ""subdir"": True,
                 ""dynamic"": True,
-                ""version"": ""d32479e630ef43d44a9ad7d23edfc4cd630d5aa1"",
+                ""version"": ""5f456692c853c6cc851614496e6d77a3a60a5eba"",
                 ""urls"" : [
                     {""url"" : ""https://github.com/graalvm/graaljs.git"", ""kind"" : ""git""},
                     {""url"": ""https://curio.ssw.jku.at/nexus/content/repositories/snapshots"", ""kind"": ""binary""},
@@ -49,7 +49,7 @@ suite = {
                 ""name"": ""graal-js"",
                 ""subdir"": True,
                 ""dynamic"": True,
-                ""version"": ""d32479e630ef43d44a9ad7d23edfc4cd630d5aa1"",
+                ""version"": ""5f456692c853c6cc851614496e6d77a3a60a5eba"",
                 ""urls"": [
                     {""url"": ""https://github.com/graalvm/graaljs.git"", ""kind"" : ""git""},
                     {""url"": ""https://curio.ssw.jku.at/nexus/content/repositories/snapshots"", ""kind"": ""binary""},",Added svm - js - tck into gates . . PullRequest : graal / 5781,"""Add @TruffleBoundary to identityHashCode methods and update graaljs version""","""Add identityHashCode methods with TruffleBoundary annotation to HostFunction, HostObject, and PolyglotProxy classes, and update GraalVM suite versions in mx_vm_gate.py and suite.py files.""","Add @TruffleBoundary annotation to identityHashCode methods in HostFunction, HostObject, and PolyglotProxy classes
Update the GraalJS version to 5f456692c853c6cc851614496e6d77a3a60a5eba in the MX VM test suite
Add -H:+TruffleCheckBlackListedMethods option to the svm_truffle_tck command in mx_vm_gate.py",Added @TruffleBoundary to identityHashCode methods; Updated graal-js and graal-nodejs versions; Enabled TruffleCheckBlackListedMethods in TCK.,Model 4
"diff --git a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
index 355b839c43e..c81cdc3f618 100755
--- a/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
+++ b/example-core/example-raw-jdbc/src/main/java/org/apache/shardingsphere/example/core/jdbc/service/OrderServiceImpl.java
@@ -17,12 +17,17 @@
 
 package org.apache.shardingsphere.example.core.jdbc.service;
 
-import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;
 import org.apache.shardingsphere.example.core.api.entity.Order;
 import org.apache.shardingsphere.example.core.api.entity.OrderItem;
+import org.apache.shardingsphere.example.core.api.repository.AddressRepository;
+import org.apache.shardingsphere.example.core.api.repository.OrderItemRepository;
 import org.apache.shardingsphere.example.core.api.repository.OrderRepository;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;
+import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
+import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 
+import javax.sql.DataSource;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -33,9 +38,18 @@ public final class OrderServiceImpl implements ExampleService {
     
     private OrderItemRepository orderItemRepository;
     
-    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository) {
+    private AddressRepository addressRepository;
+    
+    public OrderServiceImpl(final DataSource dataSource) {
+        this.orderRepository = new OrderRepositoryImpl(dataSource);
+        this.orderItemRepository = new OrderItemRepositoryImpl(dataSource);
+        this.addressRepository = new AddressRepositoryImpl(dataSource);
+    }
+    
+    public OrderServiceImpl(final OrderRepository orderRepository, final OrderItemRepository orderItemRepository, final AddressRepository addressRepository) {
         this.orderRepository = orderRepository;
         this.orderItemRepository = orderItemRepository;
+        this.addressRepository = addressRepository;
     }
     
     @Override
diff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
index 1f0b57cdc4b..f045147ebde 100755
--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/JavaConfigurationExample.java
@@ -17,11 +17,9 @@
 
 package org.apache.shardingsphere.example.orchestration.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.config.ExampleConfiguration;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.RegistryCenterConfigurationUtil;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudEncryptConfiguration;
 import org.apache.shardingsphere.example.orchestration.raw.jdbc.config.cloud.CloudMasterSlaveConfiguration;
@@ -88,7 +86,7 @@ public class JavaConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void closeDataSource(final DataSource dataSource) throws Exception {
diff --git a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
index 94bf1f8a289..c58bb8d60db 100755
--- a/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/orchestration-example/orchestration-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/orchestration/raw/jdbc/YamlConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.orchestration.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.type.RegistryCenterType;
 import org.apache.shardingsphere.example.type.ShardingType;
 import org.apache.shardingsphere.shardingjdbc.jdbc.adapter.AbstractDataSourceAdapter;
@@ -81,7 +79,7 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void closeDataSource(final DataSource dataSource) throws Exception {
diff --git a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
index 34c15cb0399..aecd9c4c36a 100755
--- a/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/other-feature-example/hint-example/hint-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/hint/raw/jdbc/YamlConfigurationExample.java
@@ -17,11 +17,9 @@
 
 package org.apache.shardingsphere.example.hint.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.api.hint.HintManager;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlMasterSlaveDataSourceFactory;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 
@@ -64,7 +62,7 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processWithHintValue(final DataSource dataSource) throws SQLException {
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
index c2d115cc156..1aa7e8507c8 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.DataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -47,6 +45,6 @@ public class JavaConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
index fec4eb1f59d..201200db737 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/JavaRangeConfigurationExample.java
@@ -17,10 +17,11 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.repository.AddressRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.RangeDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -47,6 +48,6 @@ public class JavaRangeConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource), new AddressRepositoryImpl(dataSource));
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
index d3fe064d04b..058cbc2913e 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -48,6 +46,6 @@ public class YamlConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
index 99a748513fa..601d3133d8a 100755
--- a/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
+++ b/sharding-jdbc-example/sharding-example/sharding-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/sharding/raw/jdbc/YamlRangeConfigurationExample.java
@@ -17,10 +17,8 @@
 
 package org.apache.shardingsphere.example.sharding.raw.jdbc;
 
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.repository.RangeOrderRepositoryImpl;
-import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.core.api.service.ExampleService;
+import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
 import org.apache.shardingsphere.example.sharding.raw.jdbc.factory.YamlRangeDataSourceFactory;
 import org.apache.shardingsphere.example.type.ShardingType;
 
@@ -48,6 +46,6 @@ public class YamlRangeConfigurationExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new RangeOrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
 }
diff --git a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
index 6eef4068543..021710ed403 100755
--- a/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
+++ b/sharding-jdbc-example/transaction-example/transaction-2pc-xa-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/xa/raw/jdbc/YamlConfigurationTransactionExample.java
@@ -18,10 +18,9 @@
 package org.apache.shardingsphere.example.transaction.xa.raw.jdbc;
 
 import org.apache.shardingsphere.example.core.api.entity.Order;
-import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 import org.apache.shardingsphere.transaction.core.TransactionType;
 import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;
@@ -53,7 +52,7 @@ public class YamlConfigurationTransactionExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processXATransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {
diff --git a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
index 88aadc90fa9..dfc40f07215 100755
--- a/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
+++ b/sharding-jdbc-example/transaction-example/transaction-base-seata-raw-jdbc-example/src/main/java/org/apache/shardingsphere/example/transaction/base/seata/raw/jdbc/YamlConfigurationTransactionExample.java
@@ -19,10 +19,10 @@ package org.apache.shardingsphere.example.transaction.base.seata.raw.jdbc;
 
 import org.apache.shardingsphere.example.core.api.entity.Order;
 import org.apache.shardingsphere.example.core.api.entity.OrderItem;
+import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderItemRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.repository.OrderRepositoryImpl;
 import org.apache.shardingsphere.example.core.jdbc.service.OrderServiceImpl;
-import org.apache.shardingsphere.example.core.api.service.ExampleService;
 import org.apache.shardingsphere.shardingjdbc.api.yaml.YamlShardingDataSourceFactory;
 import org.apache.shardingsphere.transaction.core.TransactionType;
 import org.apache.shardingsphere.transaction.core.TransactionTypeHolder;
@@ -59,7 +59,7 @@ public class YamlConfigurationTransactionExample {
     }
     
     private static ExampleService getExampleService(final DataSource dataSource) {
-        return new OrderServiceImpl(new OrderRepositoryImpl(dataSource), new OrderItemRepositoryImpl(dataSource));
+        return new OrderServiceImpl(dataSource);
     }
     
     private static void processSeataTransaction(final DataSource dataSource, final ExampleService exampleService) throws SQLException {",revise OrderServiceImpl .,Refactor OrderServiceImpl to accept DataSource instead of OrderRepository and OrderItemRepository.,"""Refactor OrderServiceImpl to accept DataSource instead of individual repositories""","""Update OrderServiceImpl constructor and its usages in examples""

This commit introduces the following changes:

1. In `OrderServiceImpl`, a new constructor that takes a `DataSource` as a parameter is added. The existing constructor is also updated to include an additional `AddressRepository` parameter.
2. In `JavaConfigurationExample` and `YamlConfigurationExample` of the orchestration-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource`.
3. In `YamlConfigurationExample` of the hint-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource`.
4. In `JavaConfigurationExample` and `YamlConfigurationExample` of the sharding-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource`.
5. In `JavaRangeConfigurationExample` of the sharding-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource` and an `AddressRepository`.
6. In `YamlConfigurationTransactionExample` of the transaction-2pc-xa-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource`.
7. In `YamlConfigurationTransactionExample` of the transaction-base-seata-raw-jdbc-example, the `getExampleService` method is updated to use the new `OrderServiceImpl` constructor that takes a `DataSource`.

These changes seem to be refactoring the codebase to use a `DataSource` directly in the `OrderServiceImpl` and update the usages in the examples accordingly. This could potentially simplify the code and make it more maintainable.",Refactor OrderServiceImpl to use DataSource for repository initialization and update corresponding example service instantiations.,Model 4
"diff --git a/modules/web/src/core/editor/model/CustomEditor.js b/modules/web/src/core/editor/model/CustomEditor.js
index 6d0ec1e4188..3abccf703cd 100644
--- a/modules/web/src/core/editor/model/CustomEditor.js
+++ b/modules/web/src/core/editor/model/CustomEditor.js
@@ -13,15 +13,17 @@ class CustomEditor extends EventChannel {
      * @param {String} icon 
      * @param {Object} component 
      * @param {Function} propsProvider
+     * @param {Function} additionalProps
      * @param {string} customTitleClass
      */
-    constructor(id, title, icon, component, propsProvider, customTitleClass) {
+    constructor(id, title, icon, component, propsProvider, additionalProps, customTitleClass) {
         super();
         this._id = id;
         this._title = title;
         this._icon = icon;
         this._component = component;
         this._propsProvider = propsProvider;
+        this._additionalProps = additionalProps;
         this._customTitleClass = customTitleClass;
     }
 
@@ -45,6 +47,14 @@ class CustomEditor extends EventChannel {
         return this._propsProvider;
     }
 
+    set additionalProps(additionalProps) {
+        this._additionalProps = additionalProps;
+    }
+
+    get additionalProps() {
+        return this._additionalProps;
+    }
+
     get customTitleClass() {
         return this._customTitleClass;
     }
diff --git a/modules/web/src/core/editor/plugin.js b/modules/web/src/core/editor/plugin.js
index 3d68511aa48..a9896f58c65 100644
--- a/modules/web/src/core/editor/plugin.js
+++ b/modules/web/src/core/editor/plugin.js
@@ -229,15 +229,18 @@ class EditorPlugin extends Plugin {
      * @param {Object} command args
      */
     onOpenCustomEditorTab(args) {
-        const { id, title, icon, component, propsProvider, customTitleClass, activate } = args;
-        if (!this.getEditorByID(id)) {
-            const editor = new CustomEditor(id, title, icon, component, propsProvider, customTitleClass);
+        const { id, title, icon, component, propsProvider, additionalProps, customTitleClass, activate } = args;
+        const existingEditor = this.getEditorByID(id);
+        if (!existingEditor) {
+            const editor = new CustomEditor(id, title, icon, component, propsProvider,
+                additionalProps, customTitleClass);
             this.openedEditors.push(editor);
             if (activate || _.isNil(this.activeEditorID)) {
                 this.setActiveEditor(editor);
             }
         } else if (activate) {
-            this.setActiveEditor(this.getEditorByID(id));
+            existingEditor.additionalProps = additionalProps;
+            this.setActiveEditor(existingEditor);
         }
         this.reRender();
     }
diff --git a/modules/web/src/core/editor/views/EditorTabs.jsx b/modules/web/src/core/editor/views/EditorTabs.jsx
index 186e97889ec..588b7d06ae8 100644
--- a/modules/web/src/core/editor/views/EditorTabs.jsx
+++ b/modules/web/src/core/editor/views/EditorTabs.jsx
@@ -163,7 +163,7 @@ class EditorTabs extends View {
                 </TabPane>
             );
         } else if (editor instanceof CustomEditor) {
-            const { id, title, icon, propsProvider } = editor;
+            const { id, title, icon, propsProvider, additionalProps } = editor;
             const customTabDimensions = {
                 width: this.props.width, // custom tabs doesn't support split view hence full width
                 height: this.props.height - tabTitleHeight,
@@ -198,6 +198,7 @@ class EditorTabs extends View {
                         <editor.component
                             isActive={activeEditorID === id}
                             {...propsProvider()}
+                            {...additionalProps}
                             {...customTabDimensions}
                             panelResizeInProgress={this.props.panelResizeInProgress || this.state.panelResizeInProgress}
                         />
diff --git a/modules/web/src/core/layout/commands.js b/modules/web/src/core/layout/commands.js
index bbec8bb359d..671cd6018d7 100644
--- a/modules/web/src/core/layout/commands.js
+++ b/modules/web/src/core/layout/commands.js
@@ -13,6 +13,7 @@ export function getCommandDefinitions() {
             id: COMMANDS.SHOW_VIEW,
             argTypes: {
                 id: PropTypes.string.isRequired,
+                additionalProps: PropTypes.objectOf(Object),
             },
         },
         {
diff --git a/modules/web/src/core/layout/handlers.js b/modules/web/src/core/layout/handlers.js
index 5b324dab9c1..949978ce386 100644
--- a/modules/web/src/core/layout/handlers.js
+++ b/modules/web/src/core/layout/handlers.js
@@ -16,7 +16,7 @@ export function getHandlerDefinitions(layoutManager) {
     return [
         {
             cmdID: COMMANDS.SHOW_VIEW,
-            handler: (id) => {
+            handler: ({ id, additionalProps }) => {
                 const view = _.find(layoutManager.views, ['id', id]);
                 if (!_.isNil(view)) {
                     const { region, component, propsProvider, pluginID,
@@ -31,6 +31,7 @@ export function getHandlerDefinitions(layoutManager) {
                                 customTitleClass,
                                 component: withViewFeatures(component, pluginID),
                                 propsProvider,
+                                additionalProps,
                                 activate: true,
                             });
                             break;
diff --git a/modules/web/src/plugins/debugger/handlers.js b/modules/web/src/plugins/debugger/handlers.js
index e3dfa645d03..76b0413fa4b 100644
--- a/modules/web/src/plugins/debugger/handlers.js
+++ b/modules/web/src/plugins/debugger/handlers.js
@@ -40,7 +40,7 @@ export function getHandlerDefinitions(debuggerPlugin) {
                         file: activeEditor.file,
                         onSaveSuccess: () => {
                             dispatch(LAYOUT_COMMANDS.SHOW_BOTTOM_PANEL);
-",Add support for addtional props upon showing custom tabs,"""Added support for additional props in CustomEditor""",Added support for additional props in CustomEditor and related components.,"""Added additionalProps to CustomEditor class and updated related components and commands to include it""

Explanation:

* In CustomEditor.js, a new property `additionalProps` has been added to the `CustomEditor` class, along with getter and setter methods.
* In plugin.js, the `onOpenCustomEditorTab` method has been updated to include `additionalProps` when creating a new `CustomEditor` instance or updating an existing one.
* In EditorTabs.jsx, the `CustomEditor` component is now rendered with `additionalProps` spread into its props.
* In commands.js and handlers.js, the `SHOW_VIEW` command and its handler have been updated to include `additionalProps` as an optional argument.
* In debugger/handlers.js, the `onSaveSuccess` callback has been updated to dispatch the `SHOW_BOTTOM_PANEL` command instead of `SHOW_VIEW`. However, this change does not seem related to the addition of `additionalProps`.","""Added support for `additionalProps` to CustomEditor and integrated in EditorPlugin and command handlers.""",Model 4
"diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar
new file mode 100644
index 0000000000..86cd10cdc2
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5
new file mode 100644
index 0000000000..9545f222ce
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.md5
@@ -0,0 +1 @@
+072cf84a77d0147842730b93dd9fcd39
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1
new file mode 100644
index 0000000000..581ff5eae6
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT-sources.jar.sha1
@@ -0,0 +1 @@
+c3f2e4799b56685158e5a73dcd8c7722d7dc76ad
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar
new file mode 100644
index 0000000000..b5713f0919
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5
new file mode 100644
index 0000000000..4b620789df
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.md5
@@ -0,0 +1 @@
+1c6a5bccddc9a561fcf8538a64295827
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1
new file mode 100644
index 0000000000..86529e6241
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-SNAPSHOT.jar.sha1
@@ -0,0 +1 @@
+d4a7756cfaed55f88d2a4530ec9863090ccbe31c
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar
new file mode 100644
index 0000000000..1f6da30c50
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5
new file mode 100644
index 0000000000..01755c4776
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.md5
@@ -0,0 +1 @@
+c542d1d94a9414332b48a2acbc67f102
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1
new file mode 100644
index 0000000000..c9a35c9959
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10-sources.jar.sha1
@@ -0,0 +1 @@
+ee8a52eb16efe7128f25b7bb40cc1874f81569fc
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar
new file mode 100644
index 0000000000..9ef80c4afa
Binary files /dev/null and b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar differ
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5
new file mode 100644
index 0000000000..73196af557
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.md5
@@ -0,0 +1 @@
+fed5044bb581894f692eb769c7c4cde2
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1 b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1
new file mode 100644
index 0000000000..98870e0599
--- /dev/null
+++ b/lib/org.kohsuke.stapler/jars/stapler-1.10.jar.sha1
@@ -0,0 +1 @@
+1d6db1a40716be247008a700efcab520e2e048a2
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom
new file mode 100644
index 0000000000..0b3f1be858
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom
@@ -0,0 +1,101 @@
+<project>
+  <pomVersion>3</pomVersion>
+  <groupId>org.kohsuke.stapler</groupId>
+  <artifactId>stapler</artifactId>
+  <currentVersion>1.10-SNAPSHOT</currentVersion>
+  <shortDescription>Stapler HTTP request handling engine</shortDescription>
+  <description>Stapler HTTP request handling engine</description>
+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>
+  <mailingLists>
+    <mailingList>
+      <name>Users List</name>
+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>
+    </mailingList>
+    <mailingList>
+      <name>Issues List</name>
+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>
+    </mailingList>
+    <mailingList>
+      <name>CVS List</name>
+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>
+    </mailingList>
+  </mailingLists>
+  <developers>
+    <developer>
+      <id>kohsuke</id>
+      <name>Kohsuke Kawaguchi</name>
+      <email>kk@kohsuke.org</email>
+    </developer>
+  </developers>
+  <reports>
+    <report>maven-license-plugin</report>
+    <report>maven-changelog-plugin</report>
+    <report>maven-changes-plugin</report>
+    <report>maven-developer-activity-plugin</report>
+    <report>maven-file-activity-plugin</report>
+    <report>maven-javadoc-plugin</report>
+    <report>maven-jellydoc-plugin</report>
+    <report>maven-junit-report-plugin</report>
+    <report>maven-linkcheck-plugin</report>
+  </reports>
+  <organization>
+    <url>http://www.java.net/</url>
+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>
+  </organization>
+  <package>org.kohsuke.stapler</package>
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+    <unitTest />
+    <resources>
+      <resource>
+        <directory>src</directory>
+        <includes>
+          <include>META-INF/taglib.tld</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>servlet-api</artifactId>
+      <version>2.3</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jsp-api</artifactId>
+      <version>2.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jelly</groupId>
+      <artifactId>commons-jelly</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>dom4j</groupId>
+      <artifactId>dom4j</artifactId>
+      <version>1.6.1</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jexl</groupId>
+      <artifactId>commons-jexl</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-beanutils</groupId>
+      <artifactId>commons-beanutils</artifactId>
+      <version>1.6</version>
+    </dependency>
+    <dependency>
+      <groupId>groovy</groupId>
+      <artifactId>groovy-all</artifactId>
+      <version>1.0-jsr-06</version>
+    </dependency>
+  </dependencies>
+</project>
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5
new file mode 100644
index 0000000000..ffe9e03fe2
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.md5
@@ -0,0 +1 @@
+4252d528de5ef2faa907d61f26604e81
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1
new file mode 100644
index 0000000000..10646d21de
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10-SNAPSHOT.pom.sha1
@@ -0,0 +1 @@
+a9b30bcfbf91151c47720124b756b25e137cfb4d
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom
new file mode 100644
index 0000000000..4873d4a1f7
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom
@@ -0,0 +1,101 @@
+<project>
+  <pomVersion>3</pomVersion>
+  <groupId>org.kohsuke.stapler</groupId>
+  <artifactId>stapler</artifactId>
+  <currentVersion>1.10</currentVersion>
+  <shortDescription>Stapler HTTP request handling engine</shortDescription>
+  <description>Stapler HTTP request handling engine</description>
+  <issueTrackingUrl>https://stapler.dev.java.net/servlets/ProjectIssues</issueTrackingUrl>
+  <mailingLists>
+    <mailingList>
+      <name>Users List</name>
+      <subscribe>users-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>users-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=users</archive>
+    </mailingList>
+    <mailingList>
+      <name>Issues List</name>
+      <subscribe>issues-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>issues-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=issues</archive>
+    </mailingList>
+    <mailingList>
+      <name>CVS List</name>
+      <subscribe>cvs-subscribe@stapler.dev.java.net</subscribe>
+      <unsubscribe>cvs-unsubscribe@stapler.dev.java.net</unsubscribe>
+      <archive>https://stapler.dev.java.net/servlets/SummarizeList?listName=cvs</archive>
+    </mailingList>
+  </mailingLists>
+  <developers>
+    <developer>
+      <id>kohsuke</id>
+      <name>Kohsuke Kawaguchi</name>
+      <email>kk@kohsuke.org</email>
+    </developer>
+  </developers>
+  <reports>
+    <report>maven-license-plugin</report>
+    <report>maven-changelog-plugin</report>
+    <report>maven-changes-plugin</report>
+    <report>maven-developer-activity-plugin</report>
+    <report>maven-file-activity-plugin</report>
+    <report>maven-javadoc-plugin</report>
+    <report>maven-jellydoc-plugin</report>
+    <report>maven-junit-report-plugin</report>
+    <report>maven-linkcheck-plugin</report>
+  </reports>
+  <organization>
+    <url>http://www.java.net/</url>
+    <logo>https://dalma.dev.java.net/maven/images/java.net-logo.png</logo>
+  </organization>
+  <package>org.kohsuke.stapler</package>
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+    <unitTest />
+    <resources>
+      <resource>
+        <directory>src</directory>
+        <includes>
+          <include>META-INF/taglib.tld</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>servlet-api</artifactId>
+      <version>2.3</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jsp-api</artifactId>
+      <version>2.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jelly</groupId>
+      <artifactId>commons-jelly</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>dom4j</groupId>
+      <artifactId>dom4j</artifactId>
+      <version>1.6.1</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-jexl</groupId>
+      <artifactId>commons-jexl</artifactId>
+      <version>1.0</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-beanutils</groupId>
+      <artifactId>commons-beanutils</artifactId>
+      <version>1.6</version>
+    </dependency>
+    <dependency>
+      <groupId>groovy</groupId>
+      <artifactId>groovy-all</artifactId>
+      <version>1.0-jsr-06</version>
+    </dependency>
+  </dependencies>
+</project>
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5
new file mode 100644
index 0000000000..e5f694f5bb
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.md5
@@ -0,0 +1 @@
+6a403564d86482a0a0e77338aa2d021d
\ No newline at end of file
diff --git a/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1 b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1
new file mode 100644
index 0000000000..32a4aa5552
--- /dev/null
+++ b/lib/org.kohsuke.stapler/poms/stapler-1.10.pom.sha1
@@ -0,0 +1 @@
+1e636393906fc019a4a3132112daa18a8fb14145
\ No newline at end of file",fixed a few more bugs . . git - svn - id : https : / / hudson . dev . java . net / svn / hudson / trunk / hudson / main @ 1044 71c3de6d - 444a - 0410 - be80 - ed276b4c234a,"""Added Stapler library version 1.10 and its dependencies""","""Added Stapler 1.10-SNAPSHOT and 1.10 artifacts and POMs""","The commit message could be:

""Added Stapler library files and POMs for versions 1.10 and 1.10-SNAPSHOT""

This commit includes the addition of several files related to the Stapler library, including JAR files, sources JAR files, and POM files for both version 1.10 and 1.10-SNAPSHOT. The diff output shows that these files are new additions to the repository.","Add stapler-1.10 and stapler-1.10-SNAPSHOT libraries and their respective metadata files (JARs, source JARs, POMs).",Model 1
"diff --git a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
index 69bcc01a1..6101bb1ad 100644
--- a/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
+++ b/libraries/SoftwareSerial/examples/SoftwareSerialExample/SoftwareSerialExample.ino
@@ -5,11 +5,20 @@
  Receives from software serial, sends to hardware serial.
  
  The circuit: 
- * RX is digital pin 2 (connect to TX of other device)
- * TX is digital pin 3 (connect to RX of other device)
+ * RX is digital pin 10 (connect to TX of other device)
+ * TX is digital pin 11 (connect to RX of other device)
+ 
+ Note:
+ Not all pins on the Mega and Mega 2560 support change interrupts, 
+ so only the following can be used for RX: 
+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69
+ 
+ Not all pins on the Leonardo support change interrupts, 
+ so only the following can be used for RX: 
+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).
  
  created back in the mists of time
- modified 9 Apr 2012
+ modified 25 May 2012
  by Tom Igoe
  based on Mikal Hart's example
  
@@ -18,17 +27,17 @@
  */
 #include <SoftwareSerial.h>
 
-SoftwareSerial mySerial(2, 3); // RX, TX
+SoftwareSerial mySerial(10, 11); // RX, TX
 
 void setup()  
 {
- // Open serial communications and wait for port to open:
+  // Open serial communications and wait for port to open:
   Serial.begin(57600);
-   while (!Serial) {
+  while (!Serial) {
     ; // wait for serial port to connect. Needed for Leonardo only
   }
 
-  
+
   Serial.println(""Goodnight moon!"");
 
   // set the data rate for the SoftwareSerial port
@@ -43,3 +52,4 @@ void loop() // run over and over
   if (Serial.available())
     mySerial.write(Serial.read());
 }
+
diff --git a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
index d9f8f453f..d607ee622 100644
--- a/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
+++ b/libraries/SoftwareSerial/examples/TwoPortReceive/TwoPortReceive.ino
@@ -16,8 +16,17 @@
  * First serial device's TX attached to digital pin 2, RX to pin 3
  * Second serial device's TX attached to digital pin 4, RX to pin 5
  
+ Note:
+ Not all pins on the Mega and Mega 2560 support change interrupts, 
+ so only the following can be used for RX: 
+ 10, 11, 12, 13, 50, 51, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69
+ 
+ Not all pins on the Leonardo support change interrupts, 
+ so only the following can be used for RX: 
+ 8, 9, 10, 11, 14 (MISO), 15 (SCK), 16 (MOSI).
+ 
  created 18 Apr. 2011
- modified 9 Apr 2012
+ modified 25 May 2012
  by Tom Igoe
  based on Mikal Hart's twoPortRXExample
  
@@ -26,11 +35,12 @@
  */
 
 #include <SoftwareSerial.h>
-// software serial #1: TX = digital pin 2, RX = digital pin 3
-SoftwareSerial portOne(2, 3);
+// software serial #1: TX = digital pin 10, RX = digital pin 11
+SoftwareSerial portOne(10,11);
 
-// software serial #2: TX = digital pin 4, RX = digital pin 5
-SoftwareSerial portTwo(4, 5);
+// software serial #2: TX = digital pin 8, RX = digital pin 9
+// on the Mega, use other pins instead, since 8 and 9 don't work on the Mega
+SoftwareSerial portTwo(8,9);
 
 void setup()
 {",Updated SoftwareSerial examples so that they work easier with Leonardo and Mega,"""Update SoftwareSerial examples to use supported RX pins and add notes on pin limitations for Mega and Leonardo boards.""","""Updated SoftwareSerial library examples to use recommended RX/TX pin combinations for Mega and Leonardo boards.""","""Updated SoftwareSerialExample and TwoPortReceive examples to use different pins for RX and TX, and added notes about pin restrictions on Mega and Leonardo boards.""",Changed RX and TX pins for Mega and Leonardo compatibility; updated modification date and comments in SoftwareSerialExample and TwoPortReceive examples.,Model 3
"diff --git a/appengine/.project b/appengine/.project
index c7fc93149..e964d8042 100644
--- a/appengine/.project
+++ b/appengine/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks appengine</name>
+	<name>gridworks-appengine</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/extensions/jython/.project b/extensions/jython/.project
index 8999f66f4..6deffdf48 100644
--- a/extensions/jython/.project
+++ b/extensions/jython/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks jython</name>
+	<name>gridworks-jython</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/extensions/sample-extension/.project b/extensions/sample-extension/.project
index 294e44993..1c17169c4 100644
--- a/extensions/sample-extension/.project
+++ b/extensions/sample-extension/.project
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-	<name>gridworks sample-extension</name>
+	<name>gridworks-sample-extension</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/main/.classpath b/main/.classpath
index 067c64ff7..d96531809 100644
--- a/main/.classpath
+++ b/main/.classpath
@@ -28,7 +28,7 @@
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/jrdf-0.5.6.jar""/>
 	<classpathentry kind=""lib"" path=""tests/server/lib/mockito-all-1.8.4.jar"" sourcepath=""tests/server/lib-src/mockito-all-1.8.4-sources.jar""/>
 	<classpathentry kind=""lib"" path=""tests/server/lib/testng-5.12.1.jar"" sourcepath=""tests/server/lib-src/testng-5.12.1-sources.jar""/>
-	<classpathentry kind=""lib"" path=""/gridworks server/lib/servlet-api-2.5.jar"" sourcepath=""/gridworks server/lib-src/servlet-api-2.5-sources.jar""/>
+	<classpathentry kind=""lib"" path=""/Users/dfhuynh/dev/standalones/gridworks/server/lib/servlet-api-2.5.jar"" sourcepath=""/gridworks server/lib-src/servlet-api-2.5-sources.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/jcl-over-slf4j-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib-src/jcl-over-slf4j-1.5.6-sources.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/slf4j-api-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib/slf4j-api-1.5.6.jar""/>
 	<classpathentry kind=""lib"" path=""webapp/WEB-INF/lib/slf4j-log4j12-1.5.6.jar"" sourcepath=""webapp/WEB-INF/lib-src/slf4j-log4j12-1.5.6-sources.jar""/>
diff --git a/server/.project b/server/.project
index be4b2f9d5..e3c41ddb0 100644
--- a/server/.project
+++ b/server/.project
@@ -1,12 +1,17 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
 <projectDescription>
-  <name>gridworks server</name>
-  <projects/>
-  <buildSpec>
-    <buildCommand>
-      <name>org.eclipse.jdt.core.javabuilder</name>
-    </buildCommand>
-  </buildSpec>
-  <natures>
-    <nature>org.eclipse.jdt.core.javanature</nature>
-  </natures>
-</projectDescription>
\ No newline at end of file
+	<name>gridworks-server</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/server/IDEs/eclipse/Gridworks.launch b/server/IDEs/eclipse/Gridworks.launch
index bde9d67c1..f7465acd7 100644
--- a/server/IDEs/eclipse/Gridworks.launch
+++ b/server/IDEs/eclipse/Gridworks.launch
@@ -1,13 +1,13 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
 <launchConfiguration type=""org.eclipse.jdt.launching.localJavaApplication"">
 <listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"">
-<listEntry value=""/gridworks server/src/com/metaweb/gridworks/Gridworks.java""/>
+<listEntry value=""/gridworks-server/src/com/metaweb/gridworks/Gridworks.java""/>
 </listAttribute>
 <listAttribute key=""org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"">
 <listEntry value=""1""/>
 </listAttribute>
 <stringAttribute key=""org.eclipse.jdt.launching.MAIN_TYPE"" value=""com.metaweb.gridworks.Gridworks""/>
-<stringAttribute key=""org.eclipse.jdt.launching.PROJECT_ATTR"" value=""gridworks server""/>
+<stringAttribute key=""org.eclipse.jdt.launching.PROJECT_ATTR"" value=""gridworks-server""/>
 <stringAttribute key=""org.eclipse.jdt.launching.VM_ARGUMENTS"" value=""-Dgridworks.autoreloading=true""/>
 <stringAttribute key=""org.eclipse.jdt.launching.WORKING_DIRECTORY"" value=""${workspace_loc:gridworks}""/>
 </launchConfiguration>",Renamed projects to remove spaces in their names . . git - svn - id : http : / / google - refine . googlecode . com / svn / trunk @ 987 7d457c2a - affb - 35e4 - 300a - 418c747d4874,"""Update project names and paths for consistency and fix absolute path in classpath""","""Update project names to follow naming conventions (e.g. gridworks-appengine, gridworks-server)""","""Updated project names and paths in Eclipse configuration files""",Renamed project files for consistency and updated paths in Eclipse configuration files for the Gridworks project.,Model 4
"diff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
index 4456f208c7..c2bd937272 100644
--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceClassWriter.java
@@ -15,7 +15,6 @@ package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Optional;
 import com.google.devtools.build.android.AndroidFrameworkAttrIdProvider.AttrLookupException;
 import com.google.devtools.build.android.resources.FieldInitializers;
 import com.google.devtools.build.android.resources.RClassGenerator;
@@ -99,11 +98,6 @@ public class AndroidResourceClassWriter implements Flushable, AndroidResourceSym
     generator.addSimpleResource(dependencyInfo, type, name);
   }
 
-  @Override
-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {
-    generator.addPublicResource(type, name, value);
-  }
-
   @Override
   public void acceptStyleableResource(
       DependencyInfo dependencyInfo,
diff --git a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
index bba4f323cb..0ceacf34c3 100644
--- a/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
+++ b/src/tools/android/java/com/google/devtools/build/android/AndroidResourceSymbolSink.java
@@ -14,7 +14,6 @@
 package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import java.util.Map;
 
 /** Defines a sink for collecting data about resource symbols. */
@@ -29,13 +28,4 @@ public interface AndroidResourceSymbolSink {
       DependencyInfo dependencyInfo,
       FullyQualifiedName key,
       Map<FullyQualifiedName, /*inlineable=*/ Boolean> attrs);
-
-  /**
-   * Marks a resource as public.
-   *
-   * <p>This is orthogonal to the two methods above, and omits the 'DependencyInfo' parameter since
-   * a 'public' declaration must also have a matching definition (which triggers a call to one of
-   * the above methods).
-   */
-  void acceptPublicResource(ResourceType type, String name, Optional<Integer> value);
 }
diff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
index f31e3a78cd..28ff6b5f39 100644
--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderIdFieldInitializerBuilder.java
@@ -14,7 +14,6 @@
 package com.google.devtools.build.android;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -37,7 +36,6 @@ import java.util.Set;
 import java.util.SortedMap;
 import java.util.TreeMap;
 import java.util.TreeSet;
-import java.util.logging.Logger;
 
 /**
  * Generates {@link FieldInitializer}s placeholder unique ids. The real ids will be assigned when
@@ -110,45 +108,8 @@ class PlaceholderIdFieldInitializerBuilder {
 
   private static final int APP_PACKAGE_MASK = 0x7f000000;
   private static final int ATTR_TYPE_ID = 1;
-  private static final Logger logger =
-      Logger.getLogger(PlaceholderIdFieldInitializerBuilder.class.getName());
   private static final String NORMALIZED_ANDROID_PREFIX = ""android_"";
 
-  /**
-   * Assign any public ids to the given idBuilder.
-   *
-   * @param nameToId where to store the final name -> id mappings
-   * @param publicIds known public resources (can contain null values, if ID isn't reserved)
-   * @param typeId the type slot for the current resource type.
-   * @return the final set of assigned resource ids (includes those without apriori assignments).
-   */
-  private static Set<Integer> assignPublicIds(
-      Map<String, Integer> nameToId, SortedMap<String, Optional<Integer>> publicIds, int typeId) {
-    LinkedHashMap<Integer, String> assignedIds = new LinkedHashMap<>();
-    int prevId = getInitialIdForTypeId(typeId);
-    for (Map.Entry<String, Optional<Integer>> entry : publicIds.entrySet()) {
-      Optional<Integer> id = entry.getValue();
-      if (id.isPresent()) {
-        prevId = id.get();
-      } else {
-        prevId = nextFreeId(prevId + 1, assignedIds.keySet());
-      }
-      String previousMapping = assignedIds.put(prevId, entry.getKey());
-      if (previousMapping != null) {
-        logger.warning(
-            String.format(
-                ""Multiple entry names declared for public entry identifier 0x%x (%s and %s)"",
-                prevId, previousMapping, entry.getKey()));
-      }
-      nameToId.put(entry.getKey(), prevId);
-    }
-    return assignedIds.keySet();
-  }
-
-  private static int extractTypeId(int fullID) {
-    return (fullID & 0x00FF0000) >> 16;
-  }
-
   private static int getInitialIdForTypeId(int typeId) {
     return APP_PACKAGE_MASK | (typeId << 16);
   }
@@ -176,9 +137,6 @@ class PlaceholderIdFieldInitializerBuilder {
   private final Map<ResourceType, SortedMap<String, DependencyInfo>> innerClasses =
       new EnumMap<>(ResourceType.class);
 
-  private final Map<ResourceType, SortedMap<String, Optional<Integer>>> publicIds =
-      new EnumMap<>(ResourceType.class);
-
   private final Map<String, Map<String, /*inlineable=*/ Boolean>> styleableAttrs =
       new LinkedHashMap<>();
 
@@ -186,29 +144,6 @@ class PlaceholderIdFieldInitializerBuilder {
     this.androidIdProvider = androidIdProvider;
   }
 
-  public void addPublicResource(ResourceType type, String name, Optional<Integer> value) {
-    SortedMap<String, Optional<Integer>> publicMappings = publicIds.get(type);
-    if (publicMappings == null) {
-      publicMappings = new TreeMap<>();
-      publicIds.put(type, publicMappings);
-    }
-    Optional<Integer> oldValue = publicMappings.put(name, value);
-    // AAPT should issue an error, but do a bit of sanity checking here just in case.
-    if (oldValue != null && !oldValue.equals(value)) {
-      // Enforce a consistent ordering on the warning message.
-      Integer lower = oldValue.orNull();
-      Integer higher = value.orNull();
-      if (Ordering.natural().compare(oldValue.orNull(), value.orNull()) > 0) {
-        lower = higher;
-        higher = oldValue.orNull();
-      }
-      logger.warning(
-          String.format(
-              ""resource %s/%s has conflicting public identifiers (0x%x vs 0x%x)"",
-              type, name, lower, higher));
-    }
-  }
-
   public void addSimpleResource(DependencyInfo dependencyInfo, ResourceType type, String name) {
     innerClasses
         .computeIfAbsent(type, t -> new TreeMap<>())
@@ -255,9 +190,6 @@ class PlaceholderIdFieldInitializerBuilder {
     // After assigning public IDs, we count up monotonically, so we don't need to track additional
     // assignedIds to avoid collisions (use an ImmutableSet to ensure we don't add more).
     Set<Integer> assignedIds = ImmutableSet.of();
-    if (publicIds.containsKey(ResourceType.ATTR)) {
-      assignedIds = assignPublicIds(attrToId, publicIds.get(ResourceType.ATTR), attrTypeId);
-    }
     Set<String> inlineAttrs = new LinkedHashSet<>();
     Set<String> styleablesWithInlineAttrs = new TreeSet<>();
     for (Map.Entry<String, Map<String, Boolean>> styleableAttrEntry : styleableAttrs.entrySet()) {
@@ -291,65 +223,6 @@ class PlaceholderIdFieldInitializerBuilder {
     return ImmutableMap.copyOf(attrToId);
   }
 
-  private Map<ResourceType, Integer> assignTypeIdsForPublic() {
-    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);
-    if (publicIds.isEmpty()) {
-      return allocatedTypeIds;
-    }
-    // Keep track of the reverse mapping from Int -> Type for validation.
-    Map<Integer, ResourceType> assignedIds = new LinkedHashMap<>();
-    for (Map.Entry<ResourceType, SortedMap<String, Optional<Integer>>> publicTypeEntry :
-        publicIds.entrySet()) {
-      ResourceType currentType = publicTypeEntry.getKey();
-      Integer reservedTypeSlot = null;
-      String previousResource = null;
-      for (Map.Entry<String, Optional<Integer>> publicEntry :
-          publicTypeEntry.getValue().entrySet()) {
-        Optional<Integer> reservedId = publicEntry.getValue();
-        if (!reservedId.isPresent()) {
-          continue;
-        }
-        Integer typePortion = extractTypeId(reservedId.get());
-        if (reservedTypeSlot == null) {
-          reservedTypeSlot = typePortion;
-          previousResource = publicEntry.getKey();
-        } else {
-          if (!reservedTypeSlot.equals(typePortion)) {
-            logger.warning(
-                String.format(
-                    ""%s has conflicting type codes for its public identifiers (%s=%s vs %s=%s)"",
-                    currentType.getName(),
-                    previousResource,
-                    reservedTypeSlot,
-                    publicEntry.getKey(),
-                    typePortion));
-          }
-        }
-      }
-      if (currentType == ResourceType.ATTR
-          && reservedTypeSlot != null
-          && !reservedTypeSlot.equals(ATTR_TYPE_ID)) {
-        logger.warning(
-            String.format(
-                ""Cannot force ATTR to have type code other than 0x%02x (got 0x%02x from %s)"",
-                ATTR_TYPE_ID, reservedTypeSlot, previousResource));
-      }
-      if (reservedTypeSlot == null) {
-        logger.warning(String.format(""Invalid public resource of type %s - ignoring"", currentType));
-      } else {
-        allocatedTypeIds.put(currentType, reservedTypeSlot);
-        ResourceType alreadyAssigned = assignedIds.put(reservedTypeSlot, currentType);
-        if (alreadyAssigned != null) {
-          logger.warning(
-              String.format(
-                  ""Multiple type names declared for public type identifier 0x%x (%s vs %s)"",
-                  reservedTypeSlot, alreadyAssigned, currentType));
-        }
-      }
-    }
-    return allocatedTypeIds;
-  }
-
   public FieldInitializers build() throws AttrLookupException {
     Map<ResourceType, Collection<FieldInitializer>> initializers =
         new EnumMap<>(ResourceType.class);
@@ -366,7 +239,7 @@ class PlaceholderIdFieldInitializerBuilder {
         fields = getAttrInitializers(attrAssignments, sortedFields);
       } else {
         int typeId = typeIdMap.get(type);
-        fields = getResourceInitializers(type, typeId, sortedFields);
+        fields = getResourceInitializers(typeId, sortedFields);
       }
       // The maximum number of Java fields is 2^16.
       // See the JVM reference ""4.11. Limitations of the Java Virtual Machine.""
@@ -377,9 +250,7 @@ class PlaceholderIdFieldInitializerBuilder {
   }
 
   private Map<ResourceType, Integer> chooseTypeIds() {
-    // Go through public entries. Those may have forced certain type assignments, so take those
-    // into account first.
-    Map<ResourceType, Integer> allocatedTypeIds = assignTypeIdsForPublic();
+    Map<ResourceType, Integer> allocatedTypeIds = new EnumMap<>(ResourceType.class);
     Set<Integer> reservedTypeSlots = ImmutableSet.copyOf(allocatedTypeIds.values());
     // ATTR always takes up slot #1, even if it isn't present.
     allocatedTypeIds.put(ResourceType.ATTR, ATTR_TYPE_ID);
@@ -416,13 +287,10 @@ class PlaceholderIdFieldInitializerBuilder {
   }
 
   private ImmutableList<FieldInitializer> getResourceInitializers(
-      ResourceType type, int typeId, SortedMap<String, DependencyInfo> sortedFields) {
+      int typeId, SortedMap<String, DependencyInfo> sortedFields) {
     ImmutableList.Builder<FieldInitializer> initList = ImmutableList.builder();
     Map<String, Integer> publicNameToId = new LinkedHashMap<>();
     Set<Integer> assignedIds = ImmutableSet.of();
-    if (publicIds.containsKey(type)) {
-      assignedIds = assignPublicIds(publicNameToId, publicIds.get(type), typeId);
-    }
     int resourceIds = nextFreeId(getInitialIdForTypeId(typeId), assignedIds);
     for (Map.Entry<String, DependencyInfo> entry : sortedFields.entrySet()) {
       String field = entry.getKey();
diff --git a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
index e66a2e6052..744163380b 100644
--- a/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
+++ b/src/tools/android/java/com/google/devtools/build/android/PlaceholderRTxtWriter.java
@@ -16,7 +16,6 @@ package com.google.devtools.build.android;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import com.android.resources.ResourceType;
-import com.google.common.base.Optional;
 import java.io.BufferedWriter;
 import java.io.Flushable;
 import java.io.IOException;
@@ -70,9 +69,6 @@ final class PlaceholderRTxtWriter implements Flushable, AndroidResourceSymbolSin
     }
   }
 
-  @Override
-  public void acceptPublicResource(ResourceType type, String name, Optional<Integer> value) {}
-
   @Override
   public void flush() throws IOException {
     try (BufferedWriter writer = Files.newBufferedWriter(rTxtOut, UTF_8)) {
diff --git a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
index 00062cde13..6de515849f 100644
--- a/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
+++ b/src/tools/android/java/com/google/devtools/build/android/xml/PublicXmlResourceValue.java
@@ -92,11 +92,7 @@ public class PublicXmlResourceValue implements XmlResourceValue {
 
   @Override
   public void writeResourceToClass(
-      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {
-    for (Map.Entry<ResourceType, Optional<Integer>> entry : typeToId.entrySet()) {
-      sink.acceptPublicResource(entry.getKey(), key.name(), entry.getValue());
-    }
-  }
+      DependencyInfo dependencyInfo, FullyQualifiedName key, AndroidResourceSymbolSink sink) {}
 
   @Override
   public int hashCode() {",Remove deprecated code for pre - assigned resource IDs .,Remove public resource handling from AndroidResourceSymbolSink and related classes.,"The commit message should be:

""Remove public resource handling from AndroidResourceClassWriter and related classes""

This commit message accurately reflects the changes made in the diff, which involve removing the handling of public resources from several classes, including AndroidResourceClassWriter, AndroidResourceSymbolSink, PlaceholderIdFieldInitializerBuilder, and PublicXmlResourceValue.","This commit removes the `acceptPublicResource` method and its usages from several classes in the `com/google/devtools/build/android` package. It also removes an import statement for `com.google.common.base.Optional` from each of these classes. Additionally, it removes a logging statement and a method `extractTypeId` from the `PlaceholderIdFieldInitializerBuilder` class.",Removed `acceptPublicResource` method and related `Optional<Integer>` handling from multiple classes for simplifying the Android resource processing code.,Model 1
"diff --git a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
index ab4fd14ea..cdfaad2e6 100644
--- a/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
+++ b/blueocean-dashboard/src/main/js/components/PipelineRunGraph.jsx
@@ -1,7 +1,7 @@
 import React, { Component, PropTypes } from 'react';
 import { PipelineGraph } from '@jenkins-cd/design-language';
 
-const { string, array, object, any, func } = PropTypes;
+const { string, array, any, func } = PropTypes;
 
 
 function badNode(jenkinsNode) {
@@ -149,22 +149,6 @@ export default class PipelineRunGraph extends Component {
                   stages={graphNodes}
                   onNodeClick={
                     (name, id) => {
-                        const pathname = this.props.location.pathname;
-                        // if path ends with pipeline we simply add the node id
-                        if (pathname.endsWith('pipeline/')) {
-                            this.props.router.push(`${pathname}${id}`);
-                        } else if (pathname.endsWith('pipeline')) {
-                            this.props.router.push(`${pathname}/${id}`);
-                        } else {
-                            // remove last bit and replace it with node
-                            const pathArray = pathname.split('/');
-                            pathArray.pop();
-                            if (pathname.endsWith('/')) {
-                                pathArray.pop();
-                            }
-                            pathArray.shift();
-                            this.props.router.push(`${pathArray.join('/')}/${id}`);
-                        }
                         this.props.callback(id);
                     }
                   }
@@ -181,6 +165,4 @@ PipelineRunGraph.propTypes = {
     nodes: array,
     node: any,
     callback: func,
-    router: object.isRequired, // From react-router
-    location: object.isRequired, // From react-router
 };
diff --git a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
index 41169d006..f609ef2cc 100644
--- a/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
+++ b/blueocean-dashboard/src/main/js/components/RunDetailsPipeline.jsx
@@ -63,7 +63,6 @@ export class RunDetailsPipeline extends Component {
                             // if the step_stage_id has changed we need to change the focus
                             if (event.pipeline_step_stage_id !== this.mergedConfig.node) {
                                 delete this.mergedConfig.node;
-                                console.log('only nodes', this.mergedConfig.node);
                                 fetchNodes({ ...this.mergedConfig, refetch });
                             } else {
                                 // console.log('only steps');
@@ -97,14 +96,12 @@ export class RunDetailsPipeline extends Component {
     componentDidMount() {
         const onScrollHandler = (elem) => {
             if (elem.deltaY < 0 && this.state.followAlong) {
-                console.log('this.setState({ followAlong: false });');
                 this.setState({ followAlong: false });
             }
         };
 
         const _handleKeys = (event) => {
             if (event.keyCode === 38 && this.state.followAlong) {
-                console.log('this.setState({ followAlong: false });');
                 this.setState({ followAlong: false });
             }
         };
@@ -113,18 +110,15 @@ export class RunDetailsPipeline extends Component {
         document.addEventListener('keydown', _handleKeys, false);
     }
 
-    // shouldComponentUpdate(nextProps, nextState) {
-    // }
-
     componentWillReceiveProps(nextProps) {
         const followAlong = this.state.followAlong;
         this.mergedConfig = this.generateConfig({ ...nextProps, followAlong });
 
-        // console.log('       this.pipelineListener', this.mergedConfig, this.props);
         if (!this.state.followAlong && this.timeout) {
             // console.log('clearTO');
             clearTimeout(this.timeout);
         }
+
         const nodeAction = calculateNode(this.props, nextProps, this.mergedConfig);
         if (nodeAction && nodeAction.action) {
             // use updated config
@@ -145,8 +139,8 @@ export class RunDetailsPipeline extends Component {
                 if (Number(newStart) > 0) {
                     // kill current  timeout if any
                     // console.log('prefollow', this.state.followAlong);
-                    clearTimeout(this.timeout);
                     if (this.state.followAlong) {
+                        clearTimeout(this.timeout);
                         // console.log('follow', this.state.followAlong);
                         this.timeout = setTimeout(() => fetchLog({ ...logGeneral, newStart }), 1000);
                     }
@@ -156,7 +150,6 @@ export class RunDetailsPipeline extends Component {
     }
 
     componentWillUnmount() {
-        // console.log('unmounting');
         if (this.pipelineListener) {
             sse.unsubscribe(this.pipelineListener);
             delete this.pipelineListener;
@@ -167,15 +160,12 @@ export class RunDetailsPipeline extends Component {
 
     generateConfig(props) {
         const {
-            location,
             config = {},
         } = this.context;
         const followAlong = this.state.followAlong;
         const {
-            steps,
             isMultiBranch,
             params: { pipeline: name, branch, runId, node: nodeParam },
-            result,
         } = props;
         // we would use default properties however the node can be null so no default properties will be triggered
         let { nodeReducer } = props;
@@ -183,43 +173,12 @@ export class RunDetailsPipeline extends Component {
             nodeReducer = { id: null, displayName: 'Steps' };
         }
         // if we have a node param we do not want the calculation of the focused node
-        let node = nodeParam || nodeReducer.id;
-        if (followAlong) {
-            node = nodeReducer.id;
-        }
-        // however if we follow along we actually do want to change the focus
-        if (result.state === 'RUNNING' && nodeReducer && nodeReducer.id > Number(node)) {
-            console.log('leo', nodeReducer, steps, followAlong, location);
-            const pathname = location.pathname;
-            // if path ends with pipeline we simply add the node id
-            let xxx;
-            if (pathname.endsWith('pipeline/')) {
-                // router.push(`${pathname}${node}`);
-                xxx = `${pathname}${nodeReducer.id}`;
-            } else if (pathname.endsWith('pipeline')) {
-                // router.push(`${pathname}/${node}`);
-                xxx = `${pathname}/${nodeReducer.id}`;
-            } else {
-                // remove last bit and replace it with node
-                const pathArray = pathname.split('/');
-                pathArray.pop();
-                if (pathname.endsWith('/')) {
-                    pathArray.pop();
-                }
-                pathArray.shift();
-                // router.push(`${pathArray.join('/')}/${node}`);
-                xxx = `${pathArray.join('/')}/${nodeReducer.id}`;
-            }
-            console.log('xxx', xxx);
-        }
+        const node = nodeParam || nodeReducer.id;
+
         const mergedConfig = { ...config, name, branch, runId, isMultiBranch, node, nodeReducer, followAlong };
         return mergedConfig;
     }
 
-    nodeInformation() {
-
-    }
-
     render() {
         const {
             location,
@@ -244,43 +203,61 @@ export class RunDetailsPipeline extends Component {
             || (resultRun.toLowerCase() === 'running' && followAlong)
         ;
 
-
         const nodeKey = calculateNodeBaseUrl(this.mergedConfig);
         const key = calculateStepsBaseUrl(this.mergedConfig);
         const logGeneral = calculateRunLogURLObject(this.mergedConfig);
         const log = logs ? logs[logGeneral.url] : null;
-        // console.log('merged', this.mergedConfig.node, key);
         let title = this.mergedConfig.nodeReducer.displayName;
         if (log) {
             title = 'Logs';
         } else if (this.mergedConfig.nodeReducer.id !== null) {
             title = `Steps - ${title}`;
         }
-        /*
-        const stopFollowing = (event) => {
-            console.log(this.refs, event, !followAlong);
-            this.setState({ followAlong: !followAlong });
-        };
-        */
         const currentSteps = steps ? steps[key] : null;
-        console.log('steps to render', key, steps, nodeKey);
-        if (steps && steps[key]) {
-            console.log('steps to render found', steps[key]);
-        }
         const afterClick = (id) => {
             const nodeInfo = nodes[nodeKey].model.filter((item) => item.id === id)[0];
-            console.log('clickID', id, nodeInfo);
+            const pathname = location.pathname;
+            let newPath;
+            // if path ends with pipeline we simply add the node id
+            if (pathname.endsWith('pipeline/')) {
+                if (nodeInfo.state === 'FINISHED') {
+                    newPath = `${pathname}${id}`;
+                } else {
+                    newPath = pathname;
+                }
+            } else if (pathname.endsWith('pipeline')) {
+                if (nodeInfo.state === 'FINISHED') {
+                    newPath = `${pathname}/${id}`;
+                } else {
+                    newPath = pathname;
+                }
+            } else {
+                // remove last bit and replace it with node
+                const pathArray = pathname.split('/');
+                pathArray.pop();
+                if (pathname.endsWith('/')) {
+                    pathArray.pop();
+                }
+                pathArray.shift();
+                if (nodeInfo.state !== 'FINISHED') {
+                    newPath = pathArray.join('/');
+                } else {
+                    newPath = `${pathArray.join('/')}/${id}`;
+                }
+            }
+            if (nodeInfo.state === 'FINISHED' && followAlong) {
+                this.setState({ followAlong: false });
+            }
             if (nodeInfo.state !== 'FINISHED' && !followAlong) {
                 this.setState({ followAlong: true });
             }
+            router.push(newPath);
         };
         return (
             <div ref=""scrollArea"">
                 { nodes && nodes[nodeKey] && <Extensions.Renderer
                   extensionPoint=""jenkins.pipeline.run.result""
                   callback={afterClick}
-                  router={router}
-                  location={location}
                   nodes={nodes[nodeKey].model}
                   pipelineName={name}
                   branchName={isMultiBranch ? branch : undefined}
diff --git a/blueocean-dashboard/src/main/js/components/Step.jsx b/blueocean-dashboard/src/main/js/components/Step.jsx
index e6a1984c8..444a2c49e 100644
--- a/blueocean-dashboard/src/main/js/components/Step.jsx
+++ b/blueocean-dashboard/src/main/js/components/Step.jsx
@@ -18,13 +18,9 @@ export default class Node extends Component {
 
     componentWillReceiveProps(nextProps) {
         const { node, logs, nodesBaseUrl, fetchLog, followAlong } = nextProps;
-        if (followAlong) {
-            // kill current timeout if any
-            this.clearThisTimeout();
-        }
         const { config = {} } = this.context;
         const mergedConfig = { ...config, node, nodesBaseUrl };
-        if (logs !== this.props.logs) {
+        if (logs && logs !== this.props.logs) {
             const key = calculateLogUrl(mergedConfig);
             const log = logs ? logs[key] : null;
             if (log && log !== null) {
@@ -32,10 +28,9 @@ export default class Node extends Component {
                 // kill current  timeout if any
                 this.clearThisTimeout();
                 if (number > 0 && followAlong) {
-                    // we turn on refetch so we always fetch a new Node result
-                    const refetch = true;
                     mergedConfig.newStart = log.newStart;
-                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig, refetch }), 1000);
+                    this.clearThisTimeout();
+                    this.timeout = setTimeout(() => fetchLog({ ...mergedConfig }), 1000);
                 }
             }
         }
@@ -70,11 +65,8 @@ export default class Node extends Component {
         const resultRun = result === 'UNKNOWN' || !result ? state : result;
         const log = logs ? logs[calculateLogUrl({ ...config, node, nodesBaseUrl })] : null;
         const getLogForNode = () => {
-// console.log('ddd',followAlong, log)
-            if (!log || followAlong) {
-                // we turn on refetch so we always fetch a new Node result
-                const refetch = true;
-                fetchLog({ ...config, node, nodesBaseUrl, refetch });
+            if (!log || !log.logArray) {
+                fetchLog({ ...config, node, nodesBaseUrl });
             }
         };
         const runResult = resultRun.toLowerCase();
diff --git a/blueocean-dashboard/src/main/js/components/Steps.jsx b/blueocean-dashboard/src/main/js/components/Steps.jsx
index 0f8ac1456..33bb01cb8 100644
--- a/blueocean-dashboard/src/main/js/components/Steps.jsx
+++ b/blueocean-dashboard/src/main/js/components/Steps.jsx
@@ -12,7 +12,6 @@ export default class Nodes extends Component {
             model,
             nodesBaseUrl,
         } = nodeInformation;
-        console.log('renderSteps', model, nodesBaseUrl);
         return (<div>
             {
               model.map((item, index) =>
diff --git a/blueocean-dashboard/src/main/js/redux/actions.js b/blueocean-dashboard/src/main/js/redux/actions.js
index b8b32e76d..21e23a5f2 100644
--- a/blueocean-dashboard/src/main/js/redux/actions.js
+++ b/blueocean-dashboard/src/main/js/redux/actions.js
@@ -61,7 +61,6 @@ export const actionHandlers = {
         return state.set('currentRuns', payload);
     },
     [ACTION_TYPES.SET_NODE](state, { payload }): State {
-",remove console log statements finish up the logic of stepping back and forward in a running node,"""Remove unused code and console logs from PipelineRunGraph and RunDetailsPipeline components""","According to the diff, the commit message should be:

""Remove react-router dependencies and simplify node navigation""

This commit message captures the essence of the changes made in the code, which include removing dependencies on react-router and simplifying the navigation logic for nodes.","This commit removes the `router` and `location` prop types from the `PipelineRunGraph` component, as they are no longer being used in the component. It also removes some unused imports and console.log statements in the `RunDetailsPipeline` component. Additionally, it updates the way the `node` prop is calculated in the `generateConfig` method of the `RunDetailsPipeline` component, and updates the way the pathname is constructed in the `afterClick` method of the `RunDetailsPipeline` component. Finally, it removes some unused code in the `Node` and `Steps` components.","""Removed unnecessary logs and router path handling code, cleaned up lifecycle methods, and improved log fetching logic.""",Model 4
"diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
index 8f34909c5..63031015d 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame.properties
@@ -336,4 +336,4 @@ startup.selectopen = Click open icon on the top panel or drag SWF file to this w
 
 error.font.nocharacter = Selected source font does not contain character ""%char%"".
 
-warning.initializers = WARNING:\nStatic fields and consts are often initialized in initializers.\nEditing value here is usually not enough!
\ No newline at end of file
+warning.initializers = WARNING:\nStatic fields and consts are often initialized in initializers.\nEditing value here is usually not enough!
diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
index 8c6396a10..1456070c2 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_hu.properties
@@ -45,7 +45,7 @@ menu.settings.gotoMainClassOnStartup = Dokumentum oszt\u00e1ly kiemel\u00e9se in
 menu.help = S\u00fag\u00f3
 menu.help.checkupdates = Friss\u00edt\u00e9sek keres\u00e9se...
 menu.help.helpus = Seg\u00edts nek\u00fcnk!
-menu.help.homepage = Honlap megyit\u00e1sa
+menu.help.homepage = Honlap megnyit\u00e1sa
 menu.help.about = N\u00e9vjegy...
 
 contextmenu.remove = Elt\u00e1vol\u00edt\u00e1s
@@ -60,7 +60,7 @@ notavailonthisplatform = Ennek az objektumnak az el\u0151n\u00e9zete nem el\u00e
 swfpreview = SWF el\u0151n\u00e9zet
 swfpreview.internal = SWF el\u0151n\u00e9zet (Be\u00e9p\u00edtett n\u00e9z\u0151ke)
 
-parameters = Parameterek
+parameters = Param\u00e9terek
 
 rename.enternew = \u00cdrja be az \u00faj nevet:
 
@@ -87,7 +87,7 @@ message.confirm.on = BE szeretn\u00e9 kapcsolni?
 message.confirm.off = KI szeretn\u00e9 kapcsolni?
 message.confirm = Meger\u0151s\u00edt\u00e9s
 
-message.confirm.autodeobfuscate = Automatikus deobfuszk\u00e1l\u00e1s egy m\u00f3d az obfuszk\u00e1lt k\u00f3d visszaford\u00edt\u00e1s\u00e1ra.\r\nDeobfuszk\u00e1l\u00e1s lassabb visszaford\u00edt\u00e1st eredm\u00e9nyez, \u00e9s n\u00e9h\u00e1ny halott k\u00f3dr\u00e9szlet elt\u00e1vol\u00edt\u00e1sra ker\u00fclhet.\r\nHa a k\u00f3d nincs obfuzk\u00e1lva jobb kikapcsolni az automatikus deobfuszk\u00e1l\u00e1st.
+message.confirm.autodeobfuscate = Automatikus deobfuszk\u00e1l\u00e1s egy m\u00f3d az obfuszk\u00e1lt k\u00f3d visszaford\u00edt\u00e1s\u00e1ra.\r\nDeobfuszk\u00e1l\u00e1s lassabb visszaford\u00edt\u00e1st eredm\u00e9nyez, \u00e9s n\u00e9h\u00e1ny halott k\u00f3dr\u00e9szlet elt\u00e1vol\u00edt\u00e1sra ker\u00fclhet.\r\nHa a k\u00f3d nincs obfuszk\u00e1lva jobb kikapcsolni az automatikus deobfuszk\u00e1l\u00e1st.
 
 message.parallel = P\u00e1rhuzamos\u00edt\u00e1s
 message.trait.saved = Jellemz\u0151 sikeresen lementve
@@ -97,13 +97,13 @@ message.constant.new.string = Karakterl\u00e1nc ""%value%"" nem tal\u00e1lhat\u00f
 message.constant.new.string.title = Karakterl\u00e1nc hozz\u00e1ad\u00e1sa
 message.constant.new.integer = Eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.integer.title = Eg\u00e9sz hozz\u00e1ad\u00e1sa
-message.constant.new.unsignedinteger = El\u0151jel n\u00e1lk\u00fcli eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
+message.constant.new.unsignedinteger = El\u0151jel n\u00e9lk\u00fcli eg\u00e9sz \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.unsignedinteger.title = El\u0151jel n\u00e9lk\u00fcli eg\u00e9sz hozz\u00e1ad\u00e1sa
 message.constant.new.double = Lebeg\u0151pontos \u00e9rt\u00e9k ""%value%"" nem tal\u00e1lhat\u00f3 a konstans t\u00e1bl\u00e1ban. Szeretn\u00e9 hozz\u00e1adni?
 message.constant.new.double.title = Lebeg\u0151pontos \u00e9rt\u00e9k hozz\u00e1ad\u00e1sa
 
 work.buffering = Pufferel\u00e9s
-work.waitingfordissasembly = V\u00e1rakot\u00e1s a visszafejt\u00e9sre
+work.waitingfordissasembly = V\u00e1rakoz\u00e1s a visszafejt\u00e9sre
 work.gettinghilights = Kiemel\u00e9sek elk\u00e9sz\u00edt\u00e9se
 work.disassembling = Visszafejt\u00e9s
 work.exporting = Export\u00e1l\u00e1s
@@ -175,10 +175,10 @@ abc.detail.traitname = N\u00e9v:
 
 abc.detail.body.params.maxstack = Maximum stack:
 abc.detail.body.params.localregcount = Lok\u00e1lis regiszterek sz\u00e1ma:
-abc.detail.body.params.minscope = \u00c9rv\u00e9nyess\u00e1gi k\u00f6r minimum m\u00e9lys\u00e9ge:
-abc.detail.body.params.maxscope = \u00c9rv\u00e9nyess\u00e1gi k\u00f6r maximum m\u00e9lys\u00e9ge:
-abc.detail.body.params.autofill = Automtikus kit\u00f6lt\u00e9s k\u00f3d ment\u00e9sekor (GLOB\u00c1LIS BE\u00c1LL\u00cdT\u00c1S)
-abc.detail.body.params.autofill.experimental = ...K\u00cdS\u00c1RLETI
+abc.detail.body.params.minscope = \u00c9rv\u00e9nyess\u00e9gi k\u00f6r minimum m\u00e9lys\u00e9ge:
+abc.detail.body.params.maxscope = \u00c9rv\u00e9nyess\u00e9gi k\u00f6r maximum m\u00e9lys\u00e9ge:
+abc.detail.body.params.autofill = Automatikus kit\u00f6lt\u00e9s k\u00f3d ment\u00e9sekor (GLOB\u00c1LIS BE\u00c1LL\u00cdT\u00c1S)
+abc.detail.body.params.autofill.experimental = ...K\u00cdS\u00c9RLETI
 
 abc.detail.methodinfo.methodindex = Met\u00f3dus Index:
 abc.detail.methodinfo.parameters = Param\u00e9terek:
@@ -198,7 +198,7 @@ error.slotconst.typevalue = SlotConst t\u00edpus\u00e9rt\u00e9k Hiba
 
 
 message.autofill.failed = K\u00f3d statisztika nem el\u00e9rhet\u0151 az automatikus t\u00f6rzs param\u00e9terekhez.\r\nVegye ki a pip\u00e1t az az automatikus kit\u00f6lt\u00e9s mell\u0151l ennek az \u00fczenetnek az elket\u00fcl\u00e9s\u00e9hez.
-info.selecttrait = V\u00e1lasszon ki egy oszt\u00e1lyt \u00e9s kattintson egy jellemz\u0151re az Actionscript forr\u00e1sban a szerkeszt\u00e9shez.
+info.selecttrait = V\u00e1lasszon ki egy oszt\u00e1lyt \u00e9s kattintson egy jellemz\u0151re az ActionScript forr\u00e1sban a szerkeszt\u00e9shez.
 
 button.viewgraph = Gr\u00e1f mutat\u00e1sa
 button.viewhex = Hexa mutat\u00e1sa
@@ -206,7 +206,7 @@ button.viewhex = Hexa mutat\u00e1sa
 abc.traitslist.instanceinitializer = p\u00e9ld\u00e1ny inicializ\u00e1l\u00f3
 abc.traitslist.classinitializer = oszt\u00e1ly inicializ\u00e1l\u00f3
 
-action.edit.experimental = (Kis\u00e9rleti)
+action.edit.experimental = (K\u00eds\u00e9rleti)
 
 message.action.saved = K\u00f3d sikeresen lementve
 
@@ -264,13 +264,13 @@ FileChooser.fileAttrHeaderText = Tulajdons\u00e1gok
 FileChooser.openDialogTitleText = Megnyit\u00e1s
 FileChooser.directoryDescriptionText = K\u00f6nyvt\u00e1r
 FileChooser.directoryOpenButtonText = Megnyit\u00e1s
-FileChooser.directoryOpenButtonToolTipText = A kiv\u00e1laszott k\u00f6nyvt\u00e1r megnyit\u00e1sa
+FileChooser.directoryOpenButtonToolTipText = A kiv\u00e1lasztott k\u00f6nyvt\u00e1r megnyit\u00e1sa
 FileChooser.fileDescriptionText = \u00c1ltal\u00e1nos f\u00e1jl
 FileChooser.fileNameLabelText = F\u00e1jln\u00e9v:
 FileChooser.helpButtonText = S\u00fag\u00f3
 FileChooser.helpButtonToolTipText = FileChooser s\u00fag\u00f3
 FileChooser.newFolderAccessibleName = \u00daj mappa
-FileChooser.newFolderErrorText = Hiva az \u00faj mappa l\u00e9trehoz\u00e1sakor
+FileChooser.newFolderErrorText = Hiba az \u00faj mappa l\u00e9trehoz\u00e1sakor
 FileChooser.newFolderToolTipText = \u00daj mappa l\u00e9trehoz\u00e1sa
 FileChooser.other.newFolder = \u00dajMappa
 FileChooser.other.newFolder.subsequent = \u00dajMappa.{0}
@@ -322,4 +322,16 @@ button.abort = Megszak\u00edt
 button.retry = Ism\u00e9t
 button.ignore = Mell\u0151z
 
-font.source = Forr\u00e1s bet\u0171t\u00edpus:
\ No newline at end of file
+font.source = Forr\u00e1s bet\u0171t\u00edpus:
+
+#after version 1.6.7:
+menu.export = Export\u00e1l\u00e1s
+menu.general = \u00c1ltal\u00e1nos
+menu.language = Nyelv
+
+startup.welcometo = \u00dcdv\u00f6zli az
+startup.selectopen = A kezd\u00e9shez kattintson a megnyit\u00e1s ikonra a fels\u0151 panelen, vagy h\u00fazzon egy SWF f\u00e1jlt ebbe az ablakba.
+
+error.font.nocharacter = A kiv\u00e1lasztott forr\u00e1s bet\u0171t\u00edpus nem tartalmazza a ""%char%"" karaktert.
+
+warning.initializers = WARNING:\nA statikus mez\u0151k \u00e9s konstansok gyakram az initializerekben vannak inicializ\u00e1lva.\nAz \u00e9rt\u00e9k szerkeszt\u00e9se csak itt \u00e1ltal\u00e1ban nem elegend\u0151!
\ No newline at end of file
diff --git a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
index 033b48cc1..ee20fe515 100644
--- a/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
+++ b/trunk/src/com/jpexs/decompiler/flash/gui/locales/MainFrame_ru.properties
@@ -313,4 +313,16 @@ button.abort = \u041e\u0442\u043c\u0435\u043d\u0438\u0442\u044c
 button.retry = \u041f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c
 button.ignore = \u0418\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c
 
-font.source = \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0448\u0440\u0438\u0444\u0442\u0430:
\ No newline at end of file
+font.source = \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u0448\u0440\u0438\u0444\u0442\u0430:
+
+#after version 1.6.7:
+menu.export = \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c
+menu.general = \u041e\u0431\u0449\u0438\u0435
+menu.language = \u042f\u0437\u044b\u043a
+
+startup.welcometo = \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432
+startup.selectopen = \u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043a ""\u043e\u0442\u043a\u0440\u044b\u0442\u044c"" \u043d\u0430 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u043f\u0430\u043d\u0435\u043b\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 SWF \u0444\u0430\u0439\u043b \u0432 \u044d\u0442\u043e \u043e\u043a\u043d\u043e.
+
+error.font.nocharacter = \u0421\u0438\u043c\u0432\u043e\u043b ""%char%"" \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c \u0448\u0440\u0438\u0444\u0442\u0435.
+
+warning.initializers = \u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415:\n\u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u0445.\n\u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c, \u043d\u043e \u0438 \u0442\u0430\u043c!
\ No newline at end of file",Updated russian and hungarian translation,"""Updated Hungarian and Russian translations for MainFrame properties""","""Updated Hungarian and Russian translations for MainFrame properties""","The commit message could be: ""Added newline at the end of MainFrame.properties file and updated some translations in MainFrame_hu.properties and MainFrame_ru.properties.""",Hungarian and Russian localization updates for MainFrame.properties including typo corrections and new translations after version 1.6.7.,Model 4
"diff --git a/modules/ballerina-core/pom.xml b/modules/ballerina-core/pom.xml
index 77446ee1620..68d49cccdd9 100644
--- a/modules/ballerina-core/pom.xml
+++ b/modules/ballerina-core/pom.xml
@@ -116,11 +116,6 @@
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-lang3</artifactId>
         </dependency>
-        <dependency>
-            <groupId>org.apache.activemq</groupId>
-            <artifactId>activemq-broker</artifactId>
-            <scope>test</scope>
-        </dependency>
     </dependencies>
 
     <build>
diff --git a/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java
new file mode 100644
index 00000000000..5e4bb0ac17a
--- /dev/null
+++ b/modules/ballerina-core/src/test/java/org/wso2/ballerina/lang/service/JMSServiceTest.java
@@ -0,0 +1,60 @@
+package org.wso2.ballerina.lang.service;
+
+import org.testng.Assert;
+import org.testng.annotations.AfterClass;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+import org.wso2.ballerina.core.EnvironmentInitializer;
+import org.wso2.ballerina.core.exception.BallerinaException;
+import org.wso2.ballerina.core.model.Application;
+import org.wso2.ballerina.core.runtime.ServerConnectorMessageHandler;
+import org.wso2.ballerina.core.runtime.dispatching.jms.Constants;
+import org.wso2.carbon.messaging.CarbonMessage;
+import org.wso2.carbon.messaging.TextCarbonMessage;
+
+/**
+ * Testing the JMS Service Dispatcher.
+ */
+public class JMSServiceTest {
+    private Application application;
+
+    @BeforeClass
+    public void setup() {
+        application = EnvironmentInitializer.setup(""lang/service/serviceLevelVariable.bal"");
+    }
+
+    @Test(description = ""Test for exceptions when a jms message does not have a service id"")
+    public void testJMSServiceAvailabilityCheckWithoutJmsServiceId() {
+        try {
+            CarbonMessage cMsg = new TextCarbonMessage(""test"");
+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);
+            ServerConnectorMessageHandler.handleInbound(cMsg, null);
+            Assert.fail(""Exception is not thrown when a message is passed without jms service id"");
+        } catch (BallerinaException ex) {
+            Assert.assertEquals(ex.getCause().getMessage(), ""org.wso2.ballerina.core.exception.BallerinaException: ""
+                            + ""error in ballerina program: service Id is not found in JMS Message"",
+                    ""Exception message does not match when the message is passed without service id"");
+        }
+    }
+
+    @Test(description = ""est for exceptions when a jms message contains non-existing service id"")
+    public void testJMSServiceAvailabilityWithWrongServiceId() {
+        try {
+            CarbonMessage cMsg = new TextCarbonMessage(""test"");
+            cMsg.setProperty(org.wso2.carbon.messaging.Constants.PROTOCOL, Constants.PROTOCOL_JMS);
+            cMsg.setProperty(Constants.JMS_SERVICE_ID, ""testabc"");
+            ServerConnectorMessageHandler.handleInbound(cMsg, null);
+            Assert.fail(""Exception is not thrown when a non-existing service is called"");
+        } catch (BallerinaException ex) {
+            Assert.assertEquals(ex.getCause().getMessage(), ""org.wso2.ballerina.core.exception.BallerinaException: ""
+                    + ""error in ballerina program: no jms service is registered with the service id testabc"",
+                    ""Exception message does not match when the message is passed is dispatched to non-existing ""
+                    + ""service"");
+        }
+    }
+
+    @AfterClass
+    public void tearDown() {
+        EnvironmentInitializer.cleanup(application);
+    }
+}
diff --git a/modules/ballerina-core/src/test/resources/testng.xml b/modules/ballerina-core/src/test/resources/testng.xml
index 3b0ba42742f..15ae323e24d 100644
--- a/modules/ballerina-core/src/test/resources/testng.xml
+++ b/modules/ballerina-core/src/test/resources/testng.xml
@@ -93,6 +93,7 @@ under the License.
         <classes>
             <class name=""org.wso2.ballerina.TestConfigurationUtil"" />
             <class name=""org.wso2.ballerina.lang.service.ServiceVariableTest""/>
+            <class name=""org.wso2.ballerina.lang.service.JMSServiceTest"" />
         </classes>
     </test>",Adding test cases to core without transport dependency,"""Added test cases for JMS Service Dispatcher and removed unused ActiveMQ dependency""","Added JMS Service test cases and removed activemq-broker dependency

This commit message accurately reflects the changes made in the commit. It mentions the addition of JMS Service test cases and the removal of the activemq-broker dependency.","""Remove activemq-broker dependency from ballerina-core pom.xml and add JMSServiceTest.java""

This commit removes the activemq-broker dependency from the ballerina-core module's pom.xml file and adds a new test class, JMSServiceTest.java, to the module's test directory. The JMSServiceTest class contains tests for the JMS service dispatcher in the ballerina-core module.","""Remove unused activemq-broker dependency and add JMSServiceTest for testing JMS service dispatcher in Ballerina.""",Model 1
"diff --git a/pom.xml b/pom.xml
index abf278304c..d0e9c75401 100644
--- a/pom.xml
+++ b/pom.xml
@@ -348,6 +348,14 @@
 			  <properties>
 			    <maven.test.failure.ignore>true</maven.test.failure.ignore>
 			  </properties>
+    </profile>
+    <profile>
+      <id>deploy</id>
+      <modules>
+        <module>modules/activiti-spring</module>
+        <module>modules/activiti-cxf</module>
+        <module>modules/activiti-mule</module>
+      </modules>
     </profile>
 		<profile>
 			<id>check</id>",added deploy profile,"""Added 'deploy' Maven profile with activiti modules""",Added deploy profile to pom.xml with activiti modules.,"""Added a new 'deploy' profile in pom.xml for modules activiti-spring, activiti-cxf, and activiti-mule""","Added deploy profile for activiti modules (spring, cxf, mule) in pom.xml.",Model 1
"diff --git a/src/java/voldemort/client/protocol/admin/AdminClient.java b/src/java/voldemort/client/protocol/admin/AdminClient.java
index f16315d46..3787176be 100644
--- a/src/java/voldemort/client/protocol/admin/AdminClient.java
+++ b/src/java/voldemort/client/protocol/admin/AdminClient.java
@@ -546,11 +546,20 @@ public class AdminClient {
         }
     }
 
+    /**
+     * For a particular store and node, runs the replication job
+     * 
+     * @param restoringNodeId The node which we want to restore
+     * @param cluster The cluster metadata
+     * @param storeDef The definition of the store which we want to restore
+     * @param executorService An executor to allow us to run the replication job
+     */
     private void restoreStoreFromReplication(final int restoringNodeId,
                                              final Cluster cluster,
                                              final StoreDefinition storeDef,
                                              final ExecutorService executorService) {
-        logger.info(""Restoring data for store:"" + storeDef.getName());
+        logger.info(""Restoring data for store "" + storeDef.getName() + "" on node ""
+                    + restoringNodeId);
         RoutingStrategyFactory factory = new RoutingStrategyFactory();
         RoutingStrategy strategy = factory.updateRoutingStrategy(storeDef, cluster);
 
@@ -589,9 +598,18 @@ public class AdminClient {
         }
     }
 
-    private Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,
-                                                              int nodeId,
-                                                              RoutingStrategy strategy) {
+    /**
+     * For a particular node and routing strategy, generates a mapping of node
+     * to their corresponding list of replica partitions.
+     * 
+     * @param cluster The cluster metadata
+     * @param nodeId The id of the node
+     * @param strategy The routing strategy used
+     * @return Mapping of node to replica partitions of nodeId
+     */
+    public Map<Integer, List<Integer>> getReplicationMapping(Cluster cluster,
+                                                             int nodeId,
+                                                             RoutingStrategy strategy) {
         Map<Integer, Integer> partitionsToNodeMapping = RebalanceUtils.getCurrentPartitionMapping(cluster);
         HashMap<Integer, List<Integer>> restoreMapping = new HashMap<Integer, List<Integer>>();
 
@@ -618,6 +636,23 @@ public class AdminClient {
         return restoreMapping;
     }
 
+    /**
+     * For a particular node id and routing strategy, finds all the partitions
+     * which are replicas to the partitions belonging to this particular node.
+     * This returned list includes the partitions belonging to the particular
+     * node as well. <br>
+     * 
+     * For example, say we have 4 nodes, N_0 => P_3, N_1 => P_0, N_2 => P_1 and
+     * N_3 => P_2 and if zone routing is being used then the replica mapping is
+     * P_3 => P_1, P_0 => P_1, P_1 => P_3 and P_2 => P_3. So if we're moving
+     * node N_0, the replicas of partition P_3 would be P_1 and P_2 ( in other
+     * words we need to read from nodes N_2 and N_3 respectively)
+     * 
+     * @param cluster The cluster metadata
+     * @param nodeId The id of the node
+     * @param strategy Routing strategy used
+     * @return List of replica partitions
+     */
     private List<Integer> getNodePartitions(Cluster cluster, int nodeId, RoutingStrategy strategy) {
         List<Integer> partitionsList = new ArrayList<Integer>(cluster.getNodeById(nodeId)
                                                                      .getPartitionIds());
diff --git a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
index 239f4174d..60273a500 100644
--- a/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
+++ b/src/java/voldemort/client/rebalance/RebalanceClusterPlan.java
@@ -276,13 +276,13 @@ public class RebalanceClusterPlan {
     public static void main(String args[]) throws IOException {
         OptionParser parser = new OptionParser();
         parser.accepts(""help"", ""print help information"");
-        parser.accepts(""cluster-xml"", ""[REQUIRED] cluster xml file location"")
+        parser.accepts(""cluster-xml"", ""[REQUIRED] old cluster xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
         parser.accepts(""stores-xml"", ""[REQUIRED] stores xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
-        parser.accepts(""old-cluster-xml"", ""[REQUIRED] old cluster xml file location"")
+        parser.accepts(""target-cluster-xml"", ""[REQUIRED] new cluster xml file location"")
               .withRequiredArg()
               .describedAs(""path"");
 
@@ -296,20 +296,21 @@ public class RebalanceClusterPlan {
         Set<String> missing = CmdUtils.missing(options,
                                                ""cluster-xml"",
                                                ""stores-xml"",
-                                               ""old-cluster-xml"");
+                                               ""target-cluster-xml"");
         if(missing.size() > 0) {
             System.err.println(""Missing required arguments: "" + Joiner.on("", "").join(missing));
             parser.printHelpOn(System.err);
             System.exit(1);
         }
 
-        String newClusterXml = (String) options.valueOf(""cluster-xml"");
-        String oldClusterXml = (String) options.valueOf(""old-cluster-xml"");
+        String newClusterXml = (String) options.valueOf(""target-cluster-xml"");
+        String oldClusterXml = (String) options.valueOf(""cluster-xml"");
         String storesXml = (String) options.valueOf(""stores-xml"");
 
         if(!Utils.isReadableFile(newClusterXml) || !Utils.isReadableFile(oldClusterXml)
            || !Utils.isReadableFile(storesXml)) {
             System.err.println(""Could not read files"");
+            parser.printHelpOn(System.err);
             System.exit(1);
         }
 
diff --git a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
index 1a428a99a..fc91cb3a8 100644
--- a/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
+++ b/src/java/voldemort/server/protocol/admin/AdminServiceRequestHandler.java
@@ -51,7 +51,6 @@ import voldemort.store.ErrorCodeMapper;
 import voldemort.store.StorageEngine;
 import voldemort.store.StoreDefinition;
 import voldemort.store.StoreOperationFailureException;
-import voldemort.store.grandfather.GrandfatherState;
 import voldemort.store.metadata.MetadataStore;
 import voldemort.store.readonly.FileFetcher;
 import voldemort.store.readonly.ReadOnlyStorageConfiguration;
@@ -259,8 +258,8 @@ public class AdminServiceRequestHandler implements RequestHandler {
 
             if(metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
                 // If normal, set the state + rebalancer state
-                metadataStore.put(MetadataStore.GRANDFATHERING_INFO,
-                                  new GrandfatherState(plans, storeDefs));
+                // metadataStore.put(MetadataStore.GRANDFATHERING_INFO,
+                // new GrandfatherState(plans, storeDefs));
                 metadataStore.put(MetadataStore.SERVER_STATE_KEY,
                                   MetadataStore.VoldemortState.GRANDFATHERING_SERVER);
             }
diff --git a/src/java/voldemort/store/metadata/MetadataStore.java b/src/java/voldemort/store/metadata/MetadataStore.java
index 69b1b1339..615e03367 100644
--- a/src/java/voldemort/store/metadata/MetadataStore.java
+++ b/src/java/voldemort/store/metadata/MetadataStore.java
@@ -496,8 +496,9 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {
             RebalancerState rebalancerState = (RebalancerState) value.getValue();
             valueStr = rebalancerState.toJsonString();
         } else if(GRANDFATHERING_INFO.equals(key)) {
-            GrandfatherState grandfatherState = (GrandfatherState) value.getValue();
-            valueStr = grandfatherState.toJsonString();
+            // GrandfatherState grandfatherState = (GrandfatherState)
+            // value.getValue();
+            // valueStr = grandfatherState.toJsonString();
         } else if(SERVER_STATE_KEY.equals(key) || NODE_ID_KEY.equals(key)) {
             valueStr = value.getValue().toString();
         } else {
@@ -537,12 +538,13 @@ public class MetadataStore implements StorageEngine<ByteArray, byte[], byte[]> {
                 valueObject = new RebalancerState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
             }
         } else if(GRANDFATHERING_INFO.equals(key)) {
-            String valueString = value.getValue();
-            if(valueString.startsWith(""["")) {
-                valueObject = GrandfatherState.create(valueString);
-            } else {
-                valueObject = new GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
-            }
+            // String valueString = value.getValue();
+            // if(valueString.startsWith(""["")) {
+            // valueObject = GrandfatherState.create(valueString);
+            // } else {
+            // valueObject = new
+            // GrandfatherState(Arrays.asList(RebalancePartitionsInfo.create(valueString)));
+            // }
         } else {
             throw new VoldemortException(""Unhandled key:'"" + key
                                          + ""' for String to Object serialization."");
diff --git a/test/common/voldemort/ServerTestUtils.java b/test/common/voldemort/ServerTestUtils.java
index 77b1b1197..10d324d1a 100644
--- a/test/common/voldemort/ServerTestUtils.java
+++ b/test/common/voldemort/ServerTestUtils.java
@@ -22,8 +22,10 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.net.ServerSocket;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Properties;
 
@@ -40,6 +42,7 @@ import voldemort.client.protocol.admin.AdminClient;
 import voldemort.client.protocol.admin.AdminClientConfig;
 import voldemort.cluster.Cluster;
 import voldemort.cluster.Node;
+import voldemort.cluster.Zone;
 import voldemort.routing.RoutingStrategyType;
 import voldemort.serialization.SerializerDefinition;
 import voldemort.server.AbstractSocketService;
@@ -72,6 +75,7 @@ import voldemort.xml.ClusterMapper;
 import voldemort.xml.StoreDefinitionsMapper;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 
 /**
  * Helper functions for testing with real server implementations
@@ -277,6 +281,64 @@ public class ServerTestUtils {
         return new Cluster(""test-cluster"", nodes);
     }
 
+    /**
+     * Returns a cluster with <b>numberOfNodes</b> nodes in <b>numberOfZones</b>
+     * zones. It is important that <b>numberOfNodes</b> be divisible by
+     * <b>numberOfZones</b>
+     * 
+     * @param numberOfNodes Number of nodes in the cluster
+     * @param numberOfZones Number of zones
+     * @return Cluster
+     */
+    public static Cluster getLocalCluster(int numberOfNodes, int numberOfZones) {
+
+        if(numberOfZones > 0 && numberOfNodes > 0 && numberOfNodes % numberOfZones != 0) {
+            throw new VoldemortException(""The number of nodes ("" + numberOfNodes
+",Added some more grandfathering tests,"""Refactor AdminClient and RebalanceClusterPlan to improve replication and rebalancing logic, and remove unused GrandfatherState code""","According to the diff, the commit message should be:

""Refactor replication and rebalancing logic to improve readability and maintainability""

This commit message captures the essence of the changes made in the code, which include refactoring the replication and rebalancing logic to make it more readable and maintainable.","This commit appears to make several changes to the Voldemort codebase, specifically in the AdminClient, RebalanceClusterPlan, AdminServiceRequestHandler, MetadataStore, and ServerTestUtils classes. Here's a summary of the changes:

1. In AdminClient, a new method `restoreStoreFromReplication` is added to restore data for a specific store on a specific node using a provided executor service. Additionally, the `getReplicationMapping` method is modified to accept an additional `nodeId` parameter and is made public. The `getNodePartitions` method is also modified to accept an additional `nodeId` parameter.

2. In RebalanceClusterPlan, the command-line argument for the old cluster XML file is renamed from `old-cluster-xml` to `target-cluster-xml`.

3. In AdminServiceRequestHandler, a block of code related to the GrandfatherState class is commented out.

4. In MetadataStore, a block of code related to the GrandfatherState class is commented out.

5. In ServerTestUtils, a new method `getLocalCluster` is added to create a cluster with a specified number of nodes and zones. However, this method seems to be incomplete and is missing a closing parenthesis and a return statement.

The commit message should reflect these changes. For example: ""Added new methods in AdminClient for restoring stores and getting replication mapping, renamed command-line argument in RebalanceClusterPlan, commented out code related to GrandfatherState in AdminServiceRequestHandler and MetadataStore, and started adding a new method in ServerTestUtils for creating a local cluster."" Please ensure to complete the `getLocalCluster` method in ServerTestUtils before committing the changes.","Added Javadoc comments, renamed XML arguments, and commented out GrandfatherState references for cluster restoration and rebalance functionality.",Model 4
"diff --git a/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java b/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java
index cd1105914d0..54dabecb1a7 100644
--- a/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java
+++ b/siddhi-core/src/test/java/org/wso2/siddhi/core/query/extension/ExtensionTestCase.java
@@ -29,6 +29,7 @@ import org.wso2.siddhi.core.query.extension.util.StringConcatAggregatorString;
 import org.wso2.siddhi.core.query.output.callback.QueryCallback;
 import org.wso2.siddhi.core.stream.input.InputHandler;
 import org.wso2.siddhi.core.util.EventPrinter;
+import org.wso2.siddhi.query.api.exception.ExecutionPlanValidationException;
 
 public class ExtensionTestCase {
     static final Logger log = Logger.getLogger(ExtensionTestCase.class);
@@ -119,7 +120,7 @@ public class ExtensionTestCase {
         executionPlanRuntime.shutdown();
     }
 
-    @Test
+    @Test(expected = ExecutionPlanValidationException.class)
     public void extensionTest3() throws InterruptedException {
         log.info(""extension test3"");
         SiddhiManager siddhiManager = new SiddhiManager();",Fixing test case,"""Update ExtensionTestCase to expect ExecutionPlanValidationException in extensionTest3""","According to the diff, the commit message should be:

""Added expected exception handling for extension validation in ExtensionTestCase""","""Added expected ExecutionPlanValidationException to extensionTest3 method in ExtensionTestCase.java""",Added exception handling for extensionTest3 in ExtensionTestCase to ensure it throws ExecutionPlanValidationException.,Model 1
"diff --git a/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache b/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache
index 04f0a006356..b0c3c9b5d39 100644
--- a/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache
+++ b/modules/swagger-codegen/src/main/resources/perl/APIClient.mustache
@@ -7,7 +7,7 @@ use utf8;
 use LWP::UserAgent;
 use HTTP::Headers;
 use HTTP::Response;
-use HTTP::Request::Common;
+use HTTP::Request::Common qw(DELETE POST GET HEAD PUT);
 use HTTP::Status;
 use URI::Query;
 use JSON;
@@ -75,7 +75,8 @@ sub call_api {
   }
 
   # body data
-  my $_body_data = %$post_params ? $post_params : to_json($body_data->to_hash);
+  $body_data = to_json($body_data->to_hash) if defined $body_data && $body_data->can('to_hash'); # model to json string
+  my $_body_data = %$post_params ? $post_params : $body_data;
 
   # Make the HTTP request
   my $_request;
@@ -84,6 +85,7 @@ sub call_api {
       # multipart
       my $_content_type = lc $header_params->{'Content-Type'} eq 'multipart/form' ? 
           'form-data' : $header_params->{'Content-Type'};
+
       $_request = POST($_url, Accept => $header_params->{Accept},
         Content_Type => $_content_type, Content => $_body_data);
     }
@@ -98,9 +100,17 @@ sub call_api {
       $_request = GET($_url, Accept => $header_params->{'Accept'},
         Content_Type => $header_params->{'Content-Type'});
     }
-    case 'PUT' {
-
+    case 'HEAD' {
+      $_request = HEAD($_url, Accept => $header_params->{'Accept'},
+        Content_Type => $header_params->{'Content-Type'});
     }
+    case 'DELETE' { #TODO support form data
+      $_request = DELETE($_url, Accept => $header_params->{'Accept'},
+        Content_Type => $header_params->{'Content-Type'}, Content => $_body_data);
+    }
+    case 'PATCH' { #TODO
+    }
+
   }
  
   $ua->timeout($http_timeout); 
@@ -109,8 +119,7 @@ sub call_api {
   my $_response = $ua->request($_request);
 
   unless ($_response->is_success) {
-    croak(""Can't connect to the server"");
-    #croak(""Can't connect to the api ($_response{code}): $_response{message}"");
+    croak(""API Exception("".$_response->code.""): "".$_response->message);
   }
      
   return $_response->content;
diff --git a/modules/swagger-codegen/src/main/resources/perl/api.mustache b/modules/swagger-codegen/src/main/resources/perl/api.mustache
index 7eb16b8a1a5..25c0d80fb95 100644
--- a/modules/swagger-codegen/src/main/resources/perl/api.mustache
+++ b/modules/swagger-codegen/src/main/resources/perl/api.mustache
@@ -112,7 +112,11 @@ sub new {
       }{{/pathParams}}
       {{#formParams}} # form params
       if ( exists $args->{'{{paramName}}'} ) {
-        $form_params->{'{{baseName}}'} = {{#isFile}}'@' . {{/isFile}}WWW::{{invokerPackage}}::APIClient::to_form_value($args->{'{{paramName}}'});
+        {{#isFile}}$form_params->{'{{baseName}}'} = [] unless defined $form_params->{'{{baseName}}'};
+        push $form_params->{'{{baseName}}'}, $args->{'{{paramName}}'};
+        {{/isFile}}
+        {{^isFile}}$form_params->{'{{baseName}}'} = WWW::{{invokerPackage}}::APIClient::to_form_value($args->{'{{paramName}}'});
+        {{/isFile}}
       }{{/formParams}}
       my $_body_data;
       {{#bodyParams}} # body params
diff --git a/samples/client/petstore/perl/http.pl b/samples/client/petstore/perl/http.pl
deleted file mode 100644
index 282b06ba3e5..00000000000
--- a/samples/client/petstore/perl/http.pl
+++ /dev/null
@@ -1,25 +0,0 @@
-use LWP::UserAgent;
- 
-my $ua = LWP::UserAgent->new;
- 
-my $server_endpoint = ""http://petstore.swagger.io/v2/pet/10002"";
- 
-# set custom HTTP request header fields
-my $req = HTTP::Request->new(GET => $server_endpoint);
-$req->header('content-type' => 'application/json');
-
-use Data::Dumper;
-print Dumper($req);
- 
-my $resp = $ua->request($req);
-if ($resp->is_success) {
-    my $message = $resp->decoded_content;
-    print ""Received reply: $message\n"";
-}
-else {
-    print ""HTTP GET error code: "", $resp->code, ""\n"";
-    print ""HTTP GET error message: "", $resp->message, ""\n"";
-}
-
-
-
diff --git a/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm b/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm
index 577bd23003f..6d0ecc44dc6 100644
--- a/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm
+++ b/samples/client/petstore/perl/lib/WWW/SwaggerClient/APIClient.pm
@@ -7,7 +7,7 @@ use utf8;
 use LWP::UserAgent;
 use HTTP::Headers;
 use HTTP::Response;
-use HTTP::Request::Common;
+use HTTP::Request::Common qw(DELETE POST GET HEAD PUT);
 use HTTP::Status;
 use URI::Query;
 use JSON;
@@ -75,7 +75,8 @@ sub call_api {
   }
 
   # body data
-  my $_body_data = %$post_params ? $post_params : to_json($body_data->to_hash);
+  $body_data = to_json($body_data->to_hash) if defined $body_data && $body_data->can('to_hash'); # model to json string
+  my $_body_data = %$post_params ? $post_params : $body_data;
 
   # Make the HTTP request
   my $_request;
@@ -84,6 +85,7 @@ sub call_api {
       # multipart
       my $_content_type = lc $header_params->{'Content-Type'} eq 'multipart/form' ? 
           'form-data' : $header_params->{'Content-Type'};
+
       $_request = POST($_url, Accept => $header_params->{Accept},
         Content_Type => $_content_type, Content => $_body_data);
     }
@@ -98,9 +100,17 @@ sub call_api {
       $_request = GET($_url, Accept => $header_params->{'Accept'},
         Content_Type => $header_params->{'Content-Type'});
     }
-    case 'PUT' {
-
+    case 'HEAD' {
+      $_request = HEAD($_url, Accept => $header_params->{'Accept'},
+        Content_Type => $header_params->{'Content-Type'});
     }
+    case 'DELETE' { #TODO support form data
+      $_request = DELETE($_url, Accept => $header_params->{'Accept'},
+        Content_Type => $header_params->{'Content-Type'}, Content => $_body_data);
+    }
+    case 'PATCH' { #TODO
+    }
+
   }
  
   $ua->timeout($http_timeout); 
@@ -109,8 +119,7 @@ sub call_api {
   my $_response = $ua->request($_request);
 
   unless ($_response->is_success) {
-    croak(""Can't connect to the server"");
-    #croak(""Can't connect to the api ($_response{code}): $_response{message}"");
+    croak(""API Exception("".$_response->code.""): "".$_response->message);
   }
      
   return $_response->content;
diff --git a/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm b/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm
index 8b02083e637..bd7c0b5fc6b 100644
--- a/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm
+++ b/samples/client/petstore/perl/lib/WWW/SwaggerClient/PetApi.pm
@@ -385,10 +385,14 @@ sub new {
       }
        # form params
       if ( exists $args->{'name'} ) {
+        
         $form_params->{'name'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'name'});
+        
       } # form params
       if ( exists $args->{'status'} ) {
+        
         $form_params->{'status'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'status'});
+        
       }
       my $_body_data;
       
@@ -513,10 +517,15 @@ sub new {
       }
        # form params
       if ( exists $args->{'additional_metadata'} ) {
+        
         $form_params->{'additionalMetadata'} = WWW::SwaggerClient::APIClient::to_form_value($args->{'additional_metadata'});
+        
       } # form params
       if ( exists $args->{'file'} ) {
-        $form_params->{'file'} = '@' . WWW::SwaggerClient::APIClient::to_form_value($args->{'file'});
+        $form_params->{'file'} = [] unless defined $form_params->{'file'};
+        push $form_params->{'file'}, $args->{'file'};
+        
+        
       }
       my $_body_data;
       
diff --git a/samples/client/petstore/perl/test.pl b/samples/client/petstore/perl/test.pl
index 3fb7c3e0a08..504461710cd 100644
--- a/samples/client/petstore/perl/test.pl
+++ b/samples/client/petstore/perl/test.pl
@@ -1,7 +1,7 @@
 #!/usr/bin/perl
 #
 #
-
+use lib 'lib';
 use strict;
 use warnings;
 use WWW::SwaggerClient::PetApi;
@@ -15,46 +15,26 @@ use DateTime;
 
 my $api = WWW::SwaggerClient::PetApi->new();
 
-#print WWW::SwaggerClient::APIClient::to_form_value('testing 123');
-
 my $pet_id = 88;
-my $dt = DateTime->new(
-  year      => 1972,
-  month     => 12,
-  day       => 31,
-  hour      => 23,
-  minute    => 59,
-  second    => 30,
-  time_zone => 'UTC'
-);
-
-print ""dt = $dt\n"";
-print ""dt = "".$dt->datetime().""\n"";
-
-
-my $category =  WWW::SwaggerClient::Object::Category->new({'id' => '2', 'name' => 'pending'});
-my $tag =  WWW::SwaggerClient::Object::Tag->new({'id' => '1', 'name' => 'just kidding', 
-    ""photoUrls"" => ['123', 'oop']});
+
+my $category =  WWW::SwaggerClient::Object::Category->new({'id' => '2', 'name' => 'perl'});
+my $tag =  WWW::SwaggerClient::Object::Tag->new({'id' => '1', 'name' => 'just kidding'}); 
 my $pet =  WWW::SwaggerClient::Object::Pet->new({'id' => $pet_id, 'name' => 'perl test', 
-    ""photoUrls"" => ['123', 'oop'], 'tags' => [$tag], 'status' => 'pending'});
+    ""photoUrls"" => ['123', 'oop'], 'tags' => [$tag], 'status' => 'pending', 'category' => $category});
 
-print Dumper $pet;
+print ""\npet(object)="".Dumper $pet;
 my $json = JSON->new->convert_blessed;
 
-#print $json->convert_blessed->encode($pet);
-#print $json->get_convert_blessed;
-print Dumper($pet->to_hash);
-#my $pet2 = WWW::SwaggerClient::Model::Pet->from_json($pet->to_hash);
-my $pet2 = WWW::SwaggerClient::Object::Pet->new();
-$pet2 = $pet2->from_hash($pet->to_hash);
-#$pet2->from_json($pet->to_hash);
-print Dumper($pet2->to_hash);
-#exit;
-print ""============================\n"";
-print Dumper $api->add_pet({body => $pet});
-#print Dumper $api->get_pet_by_id({pet_id => $pet_id});
-#print Dumper $api->update_pet_with_form({pet_id => $pet_id, name => 'test_name', status => 'test status'});
-#print Dumper $api->delete_pet({pet_id => $pet_id});
+my $new_pet = WWW::SwaggerClient::Object::Pet->new();
+$new_pet = $new_pet->from_hash($pet->to_hash);
+print ""new_pet(hash):"".Dumper($new_pet->to_hash);
+
+print ""\nTest Petstore endpoints\n"";
+#print ""\nupload_file:"".Dumper $api->upload_file({pet_id => $pet_id, additional_metadata => 'testabc', file => '/var/tmp/f5.jpg'});
+print ""\nadd_pet:"".Dumper $api->add_pet({body => $pet});
+print ""\nget_pet_by_id:"".Dumper $api->get_pet_by_id({pet_id => $pet_id});
+print ""\nupdate_pet_with_form:"".Dumper $api->update_pet_with_form({pet_id => $pet_id, name => 'test_name', status => 'test status'});
+print ""\ndelete_pet:"".Dumper $api->delete_pet({pet_id => $pet_id});","update error message , update test script","""Enhance Perl API Client with Improved HTTP Request Handling and Error Messages""

This commit message summarizes the changes made to the Perl API client, including improvements to HTTP request handling, error messages, and form data handling.","""Added support for HEAD, DELETE, and PATCH HTTP methods in Perl client""","This commit contains several changes to the Perl API client generated by Swagger Codegen. Here's a summary of the changes:

1. In `APIClient.mustache` and `APIClient.pm`, the import statement for `HTTP::Request::Common` has been modified to only import the necessary HTTP methods (`DELETE`, `POST`, `GET`, `HEAD`, `PUT`).

2. The handling of body data in `APIClient.mustache` and `APIClient.pm` has been updated. If the body data is a model, it is now converted to a JSON string using the `to_hash` method.

3. The HTTP request creation in `APIClient.mustache` and `APIClient.pm` has been updated to handle different HTTP methods (`GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`).

4. The error message in `APIClient.mustache` and `APIClient.pm` has been updated to provide more detailed information about the API exception.

5. In `api.mustache`, the handling of form parameters has been updated to properly handle file uploads.

6. The file `http.pl` has been removed from the Petstore sample client.

7. In `PetApi.pm` of the Petstore sample client, the handling of form parameters in the `addPet` and `updatePetWithForm` methods has been updated.

8. The test script `test.pl` in the Petstore sample client has been updated to use the correct package name for the `Category` and `Tag` objects, and to print out the results of various API calls.

The commit message could be: ""Update Perl API client: improve HTTP request handling, body data handling, and error messages. Remove unnecessary import in HTTP. Update Petstore sample client and test script.""","""Added support for HTTP methods DELETE and HEAD, removed redundant sample file, and updated multiple files for CRUD operations.""",Model 2
"diff --git a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
index 4c11d194a..958fd94f5 100644
--- a/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
+++ b/src/main/java/com/sk89q/bukkit/util/DynamicPluginCommand.java
@@ -18,11 +18,8 @@
 
 package com.sk89q.bukkit.util;
 
-import com.sk89q.minecraft.util.commands.Command;
 import org.bukkit.command.CommandExecutor;
 import org.bukkit.command.CommandSender;
-import org.bukkit.plugin.Plugin;
-
 import java.util.Arrays;
 
 /**",Fixed some warnings .,"""Remove unused imports in DynamicPluginCommand""",Removed unused imports from DynamicPluginCommand.java,"This commit removes unused imports and updates the package declaration in the file DynamicPluginCommand.java.

 Specifically, the following changes were made:

 * The unused import `com.sk89q.minecraft.util.commands.Command` was removed.
 * The unused import `org.bukkit.plugin.Plugin` was removed.
 * The package declaration was updated from `package com.sk89q.bukkit.util` to `package com.sk89q.worldguard.util`.

 This commit may have been made to refactor the code and remove unnecessary dependencies, as well as to update the package structure to better reflect the project's organization.",Removed unused imports from DynamicPluginCommand.java to improve code cleanliness and efficiency.,Model 1
"diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy
deleted file mode 100644
index 99e4a2be5bc..00000000000
--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the ""License""); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.elasticsearch.gradle.test
-
-import org.elasticsearch.gradle.testclusters.ElasticsearchCluster
-import org.elasticsearch.gradle.testclusters.RestTestRunnerTask
-import org.gradle.api.DefaultTask
-import org.gradle.api.Task
-import org.gradle.api.tasks.testing.Test
-
-/**
- * A wrapper task around setting up a cluster and running rest tests.
- */
-class RestIntegTestTask extends DefaultTask {
-
-    protected Test runner
-
-    RestIntegTestTask() {
-        runner = project.tasks.create(""${name}Runner"", RestTestRunnerTask.class)
-        super.dependsOn(runner)
-
-        ElasticsearchCluster cluster = project.testClusters.create(name)
-        runner.useCluster cluster
-
-        runner.include('**/*IT.class')
-        runner.systemProperty('tests.rest.load_packaged', 'false')
-
-        if (System.getProperty(""tests.rest.cluster"") == null) {
-            if (System.getProperty(""tests.cluster"") != null) {
-                throw new IllegalArgumentException(""tests.rest.cluster and tests.cluster must both be null or non-null"")
-            }
-
-            runner.nonInputProperties.systemProperty('tests.rest.cluster', ""${-> cluster.allHttpSocketURI.join("","")}"")
-            runner.nonInputProperties.systemProperty('tests.cluster', ""${-> cluster.transportPortURI}"")
-            runner.nonInputProperties.systemProperty('tests.clustername', ""${-> cluster.getName()}"")
-        } else {
-            if (System.getProperty(""tests.cluster"") == null) {
-                throw new IllegalArgumentException(""tests.rest.cluster and tests.cluster must both be null or non-null"")
-            }
-            // an external cluster was specified and all responsibility for cluster configuration is taken by the user
-            runner.systemProperty('tests.rest.cluster', System.getProperty(""tests.rest.cluster""))
-            runner.systemProperty('test.cluster', System.getProperty(""tests.cluster""))
-        }
-
-        // this must run after all projects have been configured, so we know any project
-        // references can be accessed as a fully configured
-        project.gradle.projectsEvaluated {
-            if (enabled == false) {
-                runner.enabled = false
-                return // no need to add cluster formation tasks if the task won't run!
-            }
-        }
-    }
-
-    @Override
-    public Task dependsOn(Object... dependencies) {
-        runner.dependsOn(dependencies)
-        for (Object dependency : dependencies) {
-            if (dependency instanceof Fixture) {
-                runner.finalizedBy(((Fixture)dependency).getStopTask())
-            }
-        }
-        return this
-    }
-
-    @Override
-    public void setDependsOn(Iterable<?> dependencies) {
-        runner.setDependsOn(dependencies)
-        for (Object dependency : dependencies) {
-            if (dependency instanceof Fixture) {
-                runner.finalizedBy(((Fixture)dependency).getStopTask())
-            }
-        }
-    }
-
-    public void runner(Closure configure) {
-        project.tasks.getByName(""${name}Runner"").configure(configure)
-    }
-
-}
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
index 7e808724035..cfabb5575f6 100644
--- a/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/SystemPropertyCommandLineArgumentProvider.java
@@ -5,11 +5,16 @@ import org.gradle.process.CommandLineArgumentProvider;
 
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
 public class SystemPropertyCommandLineArgumentProvider implements CommandLineArgumentProvider {
     private final Map<String, Object> systemProperties = new LinkedHashMap<>();
 
+    public void systemProperty(String key, Supplier<String> value) {
+        systemProperties.put(key, value);
+    }
+
     public void systemProperty(String key, Object value) {
         systemProperties.put(key, value);
     }
@@ -18,7 +23,12 @@ public class SystemPropertyCommandLineArgumentProvider implements CommandLineArg
     public Iterable<String> asArguments() {
         return systemProperties.entrySet()
             .stream()
-            .map(entry -> ""-D"" + entry.getKey() + ""="" + entry.getValue())
+            .map(
+                entry -> ""-D""
+                    + entry.getKey()
+                    + ""=""
+                    + (entry.getValue() instanceof Supplier ? ((Supplier) entry.getValue()).get() : entry.getValue())
+            )
             .collect(Collectors.toList());
     }
 
diff --git a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
similarity index 89%
rename from buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy
rename to buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
index 498a1627b35..551acec4e75 100644
--- a/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/Fixture.java
@@ -7,7 +7,7 @@
  * not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the License is distributed on an
@@ -16,7 +16,8 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.elasticsearch.gradle.test
+
+package org.elasticsearch.gradle.test;
 
 /**
  * Any object that can produce an accompanying stop task, meant to tear down
@@ -25,6 +26,6 @@ package org.elasticsearch.gradle.test
 public interface Fixture {
 
     /** A task which will stop this fixture. This should be used as a finalizedBy for any tasks that use the fixture. */
-    public Object getStopTask()
+    Object getStopTask();
 
 }
diff --git a/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java
new file mode 100644
index 00000000000..4a05067df45
--- /dev/null
+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/test/RestIntegTestTask.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.gradle.test;
+
+import org.elasticsearch.gradle.SystemPropertyCommandLineArgumentProvider;
+import org.elasticsearch.gradle.testclusters.ElasticsearchCluster;
+import org.elasticsearch.gradle.testclusters.RestTestRunnerTask;
+import org.elasticsearch.gradle.testclusters.TestClustersPlugin;
+import org.gradle.api.Action;
+import org.gradle.api.DefaultTask;
+import org.gradle.api.NamedDomainObjectContainer;
+import org.gradle.api.Project;
+import org.gradle.api.Task;
+
+public class RestIntegTestTask extends DefaultTask {
+
+    protected RestTestRunnerTask runner;
+    private static final String TESTS_REST_CLUSTER = ""tests.rest.cluster"";
+    private static final String TESTS_CLUSTER = ""tests.cluster"";
+    private static final String TESTS_CLUSTER_NAME = ""tests.clustername"";
+
+    public RestIntegTestTask() {
+        Project project = getProject();
+        String name = getName();
+        runner = project.getTasks().create(name + ""Runner"", RestTestRunnerTask.class);
+        super.dependsOn(runner);
+        @SuppressWarnings(""unchecked"")
+        NamedDomainObjectContainer<ElasticsearchCluster> testClusters = (NamedDomainObjectContainer<ElasticsearchCluster>) project
+            .getExtensions()
+            .getByName(TestClustersPlugin.EXTENSION_NAME);
+        ElasticsearchCluster cluster = testClusters.create(name);
+        runner.useCluster(cluster);
+        runner.include(""**/*IT.class"");
+        runner.systemProperty(""tests.rest.load_packaged"", Boolean.FALSE.toString());
+        if (System.getProperty(TESTS_REST_CLUSTER) == null) {
+            if (System.getProperty(TESTS_CLUSTER) != null || System.getProperty(TESTS_CLUSTER_NAME) != null) {
+                throw new IllegalArgumentException(
+                    String.format(""%s, %s, and %s must all be null or non-null"", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)
+                );
+            }
+            SystemPropertyCommandLineArgumentProvider runnerNonInputProperties = (SystemPropertyCommandLineArgumentProvider) runner
+                .getExtensions()
+                .getByName(""nonInputProperties"");
+            runnerNonInputProperties.systemProperty(TESTS_REST_CLUSTER, () -> String.join("","", cluster.getAllHttpSocketURI()));
+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER, () -> String.join("","", cluster.getAllTransportPortURI()));
+            runnerNonInputProperties.systemProperty(TESTS_CLUSTER_NAME, cluster::getName);
+        } else {
+            if (System.getProperty(TESTS_CLUSTER) == null || System.getProperty(TESTS_CLUSTER_NAME) == null) {
+                throw new IllegalArgumentException(
+                    String.format(""%s, %s, and %s must all be null or non-null"", TESTS_REST_CLUSTER, TESTS_CLUSTER, TESTS_CLUSTER_NAME)
+                );
+            }
+        }
+        // this must run after all projects have been configured, so we know any project
+        // references can be accessed as a fully configured
+        project.getGradle().projectsEvaluated(x -> {
+            if (isEnabled() == false) {
+                runner.setEnabled(false);
+            }
+        });
+    }
+
+    @Override
+    public Task dependsOn(Object... dependencies) {
+        runner.dependsOn(dependencies);
+        for (Object dependency : dependencies) {
+            if (dependency instanceof Fixture) {
+                runner.finalizedBy(((Fixture) dependency).getStopTask());
+            }
+        }
+        return this;
+    }
+
+    @Override
+    public void setDependsOn(Iterable<?> dependencies) {
+        runner.setDependsOn(dependencies);
+        for (Object dependency : dependencies) {
+            if (dependency instanceof Fixture) {
+                runner.finalizedBy(((Fixture) dependency).getStopTask());
+            }
+        }
+    }
+
+    public void runner(Action<? super RestTestRunnerTask> configure) {
+        configure.execute(runner);
+    }
+}",Convert RestIntegTestTask to Java ( <issue_id> ) ( <issue_id> ) .,"""Refactor RestIntegTestTask from Groovy to Java and update SystemPropertyCommandLineArgumentProvider to support Supplier values""","The commit message should be:

""Move RestIntegTestTask to Java and refactor to use new SystemPropertyCommandLineArgumentProvider""

This commit message accurately reflects the changes made in the commit, including the migration of the RestIntegTestTask from Groovy to Java and the refactoring to use the new SystemPropertyCommandLineArgumentProvider class.","This commit deletes the file `RestIntegTestTask.groovy` and modifies the file `SystemPropertyCommandLineArgumentProvider.java`.

The deleted file `RestIntegTestTask.groovy` was a Groovy class that defined a Gradle task for running Elasticsearch integration tests using a REST interface.

The modified file `SystemPropertyCommandLineArgumentProvider.java` is a Java class that provides command line arguments based on system properties. The modification adds a new method `systemProperty(String key, Supplier<String> value)` which allows setting a system property with a value obtained from a `Supplier`. The existing method `systemProperty(String key, Object value)` is also modified to accept any `Object` as the value (previously it only accepted `String`).

The commit message should briefly summarize these changes, for example: ""Delete RestIntegTestTask.groovy and update SystemPropertyCommandLineArgumentProvider.java to accept Supplier for system property values.""","Refactor and migrate RestIntegTestTask and Fixture from Groovy to Java, supporting dynamic system properties with Supplier interface.",Model 2
"diff --git a/edxp-core/build.gradle b/edxp-core/build.gradle
index 9e1a3998..01b3910c 100644
--- a/edxp-core/build.gradle
+++ b/edxp-core/build.gradle
@@ -69,6 +69,27 @@ afterEvaluate {
         }
 
         pushTask.dependsOn(zipTask)
+
+        zipTask = task(""zipWhale${nameCapped}"", type: Exec, dependsOn: "":edxp-whale:makeAndCopy${nameCapped}"") {
+            workingDir '..'
+            commandLine 'sh', 'build.sh',    \
+                        project.name,    \
+                        ""Whale-${project.version}-${nameLowered}"",    \
+                        ""${project.extensions['module_name']}""
+        }
+
+        pushTask = task(""pushWhale${nameCapped}"", type: Exec) {
+            workingDir 'release'
+            def commands = [""adb"", ""push"", ""magisk-${project.extensions['module_name']}-Whale"" +
+                    ""-${project.version}-${nameLowered}.zip"", ""/sdcard/""]
+            if (OperatingSystem.current().isWindows()) {
+                commandLine 'cmd', '/c', commands.join("" "")
+            } else {
+                commandLine commands
+            }
+        }
+
+        pushTask.dependsOn(zipTask)
     }
 
 }
diff --git a/edxp-core/jni/main/native_hook/native_hook.h b/edxp-core/jni/main/native_hook/native_hook.h
index 0a79f2c2..eb6f7a9a 100644
--- a/edxp-core/jni/main/native_hook/native_hook.h
+++ b/edxp-core/jni/main/native_hook/native_hook.h
@@ -5,10 +5,10 @@
 
 #if defined(__LP64__)
 static constexpr const char *kLibArtPath = ""/system/lib64/libart.so"";
-static constexpr const char *kLibWhalePath = ""/system/lib64/libwhale.so"";
+static constexpr const char *kLibWhalePath = ""/system/lib64/libwhale.edxp.so"";
 #else
 static constexpr const char *kLibArtPath = ""/system/lib/libart.so"";
-static constexpr const char *kLibWhalePath = ""/system/lib/libwhale.so"";
+static constexpr const char *kLibWhalePath = ""/system/lib/libwhale.edxp.so"";
 #endif
 
 #define XHOOK_REGISTER(NAME) \
diff --git a/edxp-core/template_override/system/etc/public.libraries-edxp.txt b/edxp-core/template_override/system/etc/public.libraries-edxp.txt
index 3c8badba..03b2c76d 100644
--- a/edxp-core/template_override/system/etc/public.libraries-edxp.txt
+++ b/edxp-core/template_override/system/etc/public.libraries-edxp.txt
@@ -1 +1,2 @@
 libsandhook.edxp.so
+libwhale.edxp.so
diff --git a/edxp-core/template_override/system/lib/libwhale.so b/edxp-core/template_override/system/lib/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system/lib/libwhale.so
rename to edxp-core/template_override/system/lib/libwhale.edxp.so
diff --git a/edxp-core/template_override/system/lib64/libwhale.so b/edxp-core/template_override/system/lib64/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system/lib64/libwhale.so
rename to edxp-core/template_override/system/lib64/libwhale.edxp.so
diff --git a/edxp-core/template_override/system_x86/lib/libwhale.so b/edxp-core/template_override/system_x86/lib/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system_x86/lib/libwhale.so
rename to edxp-core/template_override/system_x86/lib/libwhale.edxp.so
diff --git a/edxp-core/template_override/system_x86/lib64/libwhale.so b/edxp-core/template_override/system_x86/lib64/libwhale.edxp.so
similarity index 100%
rename from edxp-core/template_override/system_x86/lib64/libwhale.so
rename to edxp-core/template_override/system_x86/lib64/libwhale.edxp.so
diff --git a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
index da08315b..967b2410 100644
--- a/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
+++ b/edxp-sandhook/src/main/java/com/elderdrivers/riru/edxp/sandhook/config/SandHookProvider.java
@@ -2,12 +2,10 @@ package com.elderdrivers.riru.edxp.sandhook.config;
 
 import com.elderdrivers.riru.edxp.hook.HookProvider;
 import com.elderdrivers.riru.edxp.sandhook.dexmaker.DexMakerUtils;
-import com.elderdrivers.riru.edxp.sandhook.dexmaker.DynamicBridge;
 import com.elderdrivers.riru.edxp.sandhook.util.PrebuiltMethodsDeopter;
 import com.swift.sandhook.xposedcompat.XposedCompat;
 import com.swift.sandhook.xposedcompat.methodgen.SandHookXposedBridge;
 
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Member;
 
 import de.robv.android.xposed.XposedBridge;
@@ -19,7 +17,7 @@ public class SandHookProvider implements HookProvider {
     }
 
     @Override
-    public Object invokeOriginalMethod(Member method, Object thisObject, Object[] args) throws Throwable {
+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {
         return SandHookXposedBridge.invokeOriginalMethod(method, thisObject, args);
     }
 
@@ -32,4 +30,9 @@ public class SandHookProvider implements HookProvider {
     public void deoptMethods(String packageName, ClassLoader classLoader) {
         PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);
     }
+
+    @Override
+    public long getMethodId(Member member) {
+        return 0;
+    }
 }
diff --git a/edxp-whale/.gitignore b/edxp-whale/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/edxp-whale/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/edxp-whale/build.gradle b/edxp-whale/build.gradle
new file mode 100644
index 00000000..7087eedb
--- /dev/null
+++ b/edxp-whale/build.gradle
@@ -0,0 +1,61 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 28
+
+    defaultConfig {
+        applicationId ""com.elderdrivers.riru.edxp.whale""
+        minSdkVersion 26
+        targetSdkVersion 28
+        versionCode 1
+        versionName ""1.0""
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+    compileOnly files(""libs/framework-stub.jar"")
+    implementation project(':edxp-common')
+    implementation project(':xposed-bridge')
+}
+
+
+preBuild.doLast {
+    def imlFile = file(project.name + "".iml"")
+    println 'Change ' + project.name + '.iml order'
+    try {
+        def parsedXml = (new groovy.util.XmlParser()).parse(imlFile)
+        def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
+        parsedXml.component[1].remove(jdkNode)
+        def sdkString = ""Android API "" + android.compileSdkVersion.substring(""android-"".length()) + "" Platform""
+        new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
+        groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
+    } catch (FileNotFoundException e) {
+        // nop, iml not found
+    }
+}
+
+afterEvaluate {
+
+    tasks.withType(JavaCompile) {
+        options.compilerArgs.add(""-Xbootclasspath/p:${projectDir.absolutePath}/libs/framework-stub.jar"")
+    }
+
+    android.applicationVariants.all { variant ->
+        def nameCapped = variant.name.capitalize()
+        def nameLowered = variant.name.toLowerCase()
+
+        def makeAndCopyTask = task(""makeAndCopy${nameCapped}"", type: Jar, dependsOn: ""assemble${nameCapped}"") {
+            from ""build/intermediates/dex/${nameLowered}/mergeDex${nameCapped}/out/""
+            destinationDir file(""../edxp-core/template_override/system/framework/"")
+            baseName ""edxp""
+        }
+    }
+}
\ No newline at end of file
diff --git a/edxp-whale/libs/framework-stub.jar b/edxp-whale/libs/framework-stub.jar
new file mode 100644
index 00000000..36cd86b3
Binary files /dev/null and b/edxp-whale/libs/framework-stub.jar differ
diff --git a/edxp-whale/proguard-rules.pro b/edxp-whale/proguard-rules.pro
new file mode 100644
index 00000000..1d01a7a1
--- /dev/null
+++ b/edxp-whale/proguard-rules.pro
@@ -0,0 +1,33 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
+
+-dontobfuscate
+-keep class de.robv.android.xposed.** {*;}
+-keep class android.** { *; }
+
+-keep interface com.elderdrivers.riru.common.KeepAll
+-keep interface com.elderdrivers.riru.common.KeepMembers
+
+-keep class * implements com.elderdrivers.riru.common.KeepAll { *; }
+-keepclassmembers class * implements com.elderdrivers.riru.common.KeepMembers { *; }
+
+-keep class * com.lody.** {*;}
\ No newline at end of file
diff --git a/edxp-whale/src/main/AndroidManifest.xml b/edxp-whale/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..38b7acf3
--- /dev/null
+++ b/edxp-whale/src/main/AndroidManifest.xml
@@ -0,0 +1 @@
+<manifest package=""com.elderdrivers.riru.edxp.whale"" />
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java
new file mode 100644
index 00000000..33d4939e
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/Main.java
@@ -0,0 +1,146 @@
+package com.elderdrivers.riru.edxp;
+
+import android.annotation.SuppressLint;
+import android.os.Build;
+import android.os.Process;
+
+import com.elderdrivers.riru.common.KeepAll;
+import com.elderdrivers.riru.edxp.BuildConfig;
+import com.elderdrivers.riru.edxp.config.InstallerChooser;
+import com.elderdrivers.riru.edxp.yahfa.core.HookMethodResolver;
+import com.elderdrivers.riru.edxp.yahfa.entry.Router;
+import com.elderdrivers.riru.edxp.yahfa.proxy.BlackWhiteListProxy;
+import com.elderdrivers.riru.edxp.yahfa.proxy.NormalProxy;
+import com.elderdrivers.riru.edxp.util.Utils;
+import com.lody.whale.WhaleRuntime;
+
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+@SuppressLint(""DefaultLocale"")
+public class Main implements KeepAll {
+
+    public static String appDataDir = """";
+    public static String niceName = """";
+    public static String appProcessName = """";
+    private static String forkAndSpecializePramsStr = """";
+    private static String forkSystemServerPramsStr = """";
+
+    static {
+        init(Build.VERSION.SDK_INT);
+        HookMethodResolver.init();
+        Router.injectConfig();
+        InstallerChooser.setInstallerPackageName(getInstallerPkgName());
+        try {
+        WhaleRuntime.getMethodSlot(null);
+        } catch (Throwable throwable) {}
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+    // entry points
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+
+    public static void forkAndSpecializePre(int uid, int gid, int[] gids, int debugFlags,
+                                            int[][] rlimits, int mountExternal, String seInfo,
+                                            String niceName, int[] fdsToClose, int[] fdsToIgnore,
+                                            boolean startChildZygote, String instructionSet,
+                                            String appDataDir) {
+        if (BuildConfig.DEBUG) {
+            forkAndSpecializePramsStr = String.format(
+                    ""Zygote#forkAndSpecialize(%d, %d, %s, %d, %s, %d, %s, %s, %s, %s, %s, %s, %s)"",
+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),
+                    mountExternal, seInfo, niceName, Arrays.toString(fdsToClose),
+                    Arrays.toString(fdsToIgnore), startChildZygote, instructionSet, appDataDir);
+        }
+        if (isBlackWhiteListEnabled()) {
+            BlackWhiteListProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits,
+                    mountExternal, seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote,
+                    instructionSet, appDataDir);
+        } else {
+            NormalProxy.forkAndSpecializePre(uid, gid, gids, debugFlags, rlimits, mountExternal,
+                    seInfo, niceName, fdsToClose, fdsToIgnore, startChildZygote, instructionSet,
+                    appDataDir);
+        }
+    }
+
+    public static void forkAndSpecializePost(int pid, String appDataDir, String niceName) {
+        if (pid == 0) {
+            Utils.logD(forkAndSpecializePramsStr + "" = "" + Process.myPid());
+            if (isBlackWhiteListEnabled()) {
+                BlackWhiteListProxy.forkAndSpecializePost(pid, appDataDir, niceName);
+            } else {
+                NormalProxy.forkAndSpecializePost(pid, appDataDir, niceName);
+            }
+        } else {
+            // in zygote process, res is child zygote pid
+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66
+        }
+    }
+
+    public static void forkSystemServerPre(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits,
+                                           long permittedCapabilities, long effectiveCapabilities) {
+        if (BuildConfig.DEBUG) {
+            forkSystemServerPramsStr = String.format(""Zygote#forkSystemServer(%d, %d, %s, %d, %s, %d, %d)"",
+                    uid, gid, Arrays.toString(gids), debugFlags, Arrays.toString(rlimits),
+                    permittedCapabilities, effectiveCapabilities);
+        }
+        if (isBlackWhiteListEnabled()) {
+            BlackWhiteListProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,
+                    permittedCapabilities, effectiveCapabilities);
+        } else {
+            NormalProxy.forkSystemServerPre(uid, gid, gids, debugFlags, rlimits,
+                    permittedCapabilities, effectiveCapabilities);
+        }
+    }
+
+    public static void forkSystemServerPost(int pid) {
+        if (pid == 0) {
+            Utils.logD(forkSystemServerPramsStr + "" = "" + Process.myPid());
+            if (isBlackWhiteListEnabled()) {
+                BlackWhiteListProxy.forkSystemServerPost(pid);
+            } else {
+                NormalProxy.forkSystemServerPost(pid);
+            }
+        } else {
+            // in zygote process, res is child zygote pid
+            // don't print log here, see https://github.com/RikkaApps/Riru/blob/77adfd6a4a6a81bfd20569c910bc4854f2f84f5e/riru-core/jni/main/jni_native_method.cpp#L55-L66
+        }
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+    // native methods
+    ///////////////////////////////////////////////////////////////////////////////////////////////
+
+    public static native boolean backupAndHookNative(Object target, Method hook, Method backup);
+
+    public static native void setMethodNonCompilable(Object member);
+
+    public static native void ensureMethodCached(Method hook, Method backup);
+
+    // JNI.ToReflectedMethod() could return either Method or Constructor
+    public static native Object findMethodNative(Class targetClass, String methodName, String methodSig);
+
+    private static native void init(int SDK_version);
+
+    public static native String getInstallerPkgName();
+
+    public static native boolean isBlackWhiteListEnabled();
+
+    public static native boolean isDynamicModulesEnabled();
+
+    public static native boolean isAppNeedHook(String appDataDir);
+
+    // prevent from fatal error caused by holding not whitelisted file descriptors when forking zygote
+    // https://github.com/rovo89/Xposed/commit/b3ba245ad04cd485699fb1d2ebde7117e58214ff
+    public static native void closeFilesBeforeForkNative();
+
+    public static native void reopenFilesAfterForkNative();
+
+    public static native void deoptMethodNative(Object object);
+
+    public static native long suspendAllThreads();
+
+    public static native void resumeAllThreads(long obj);
+
+    public static native int waitForGcToComplete(long thread);
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java
new file mode 100644
index 00000000..60f364bd
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleEdxpConfig.java
@@ -0,0 +1,23 @@
+package com.elderdrivers.riru.edxp.yahfa.config;
+
+import com.elderdrivers.riru.edxp.config.EdXpConfig;
+import com.elderdrivers.riru.edxp.config.InstallerChooser;
+import com.elderdrivers.riru.edxp.Main;
+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.XposedBlackListHooker;
+
+public class WhaleEdxpConfig implements EdXpConfig {
+    @Override
+    public String getInstallerBaseDir() {
+        return InstallerChooser.INSTALLER_DATA_BASE_DIR;
+    }
+
+    @Override
+    public String getBlackListModulePackageName() {
+        return XposedBlackListHooker.BLACK_LIST_PACKAGE_NAME;
+    }
+
+    @Override
+    public boolean isDynamicModulesMode() {
+        return Main.isDynamicModulesEnabled();
+    }
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java
new file mode 100644
index 00000000..cb94160b
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/config/WhaleHookProvider.java
@@ -0,0 +1,37 @@
+package com.elderdrivers.riru.edxp.yahfa.config;
+
+import com.elderdrivers.riru.edxp.hook.HookProvider;
+import com.elderdrivers.riru.edxp.yahfa.util.PrebuiltMethodsDeopter;
+import com.lody.whale.WhaleRuntime;
+
+import java.lang.reflect.Member;
+
+import de.robv.android.xposed.XposedBridge;
+
+public class WhaleHookProvider implements HookProvider {
+
+    @Override
+    public void hookMethod(Member method, XposedBridge.AdditionalHookInfo additionalInfo) {
+        WhaleRuntime.hookMethodNative(method.getDeclaringClass(), method, additionalInfo);
+    }
+
+    @Override
+    public Object invokeOriginalMethod(Member method, long methodId, Object thisObject, Object[] args) throws Throwable {
+        return WhaleRuntime.invokeOriginalMethodNative(methodId, thisObject, args);
+    }
+
+    @Override
+    public Member findMethodNative(Member hookMethod) {
+        return hookMethod;
+    }
+
+    @Override
+    public void deoptMethods(String packageName, ClassLoader classLoader) {
+        PrebuiltMethodsDeopter.deoptMethods(packageName, classLoader);
+    }
+
+    @Override
+    public long getMethodId(Member member) {
+        return WhaleRuntime.getMethodSlot(member);
+    }
+}
diff --git a/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java
new file mode 100644
index 00000000..13da190a
--- /dev/null
+++ b/edxp-whale/src/main/java/com/elderdrivers/riru/edxp/yahfa/core/HookMain.java
@@ -0,0 +1,186 @@
+package com.elderdrivers.riru.edxp.yahfa.core;
+
+import com.elderdrivers.riru.edxp.Main;
+import com.elderdrivers.riru.edxp.yahfa.entry.hooker.OnePlusWorkAroundHooker;
+import com.elderdrivers.riru.edxp.util.Utils;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Set;
+
+import de.robv.android.xposed.XposedHelpers;
+
+import static com.elderdrivers.riru.edxp.Main.backupAndHookNative;
+import static com.elderdrivers.riru.edxp.Main.findMethodNative;
+
+public class HookMain {
+
+    private static Set<String> hookItemWhiteList = Collections.singleton(OnePlusWorkAroundHooker.class.getName());
+
+    public static void doHookDefault(ClassLoader patchClassLoader, ClassLoader originClassLoader, String hookInfoClassName) {
+        try {
+            Class<?> hookInfoClass = Class.forName(hookInfoClassName, true, patchClassLoader);
+            String[] hookItemNames = (String[]) hookInfoClass.getField(""hookItemNames"").get(null);
+            for (String hookItemName : hookItemNames) {
+                doHookItemDefault(patchClassLoader, hookItemName, originClassLoader);
+            }
+        } catch (Throwable e) {
+            Utils.logE(""error when hooking all in: "" + hookInfoClassName, e);
+        }
+    }
+
+    private static void doHookItemDefault(ClassLoader patchClassLoader, String hookItemName, ClassLoader originClassLoader) {
+        try {
+            Utils.logD(""Start hooking with item "" + hookItemName);
+            Class<?> hookItem = Class.forName(hookItemName, true, patchClassLoader);
+
+            String className = (String) hookItem.getField(""className"").get(null);
+            String methodName = (String) hookItem.getField(""methodName"").get(null);
+            String methodSig = (String) hookItem.getField(""methodSig"").get(null);
+
+            if (className == null || className.equals("""")) {
+                Utils.logW(""No target class. Skipping..."");
+                return;
+            }
+            Class<?> clazz = null;
+            try {
+                clazz = Class.forName(className, true, originClassLoader);
+            } catch (ClassNotFoundException cnfe) {
+                Utils.logE(className + "" not found in "" + originClassLoader);
+                return;
+            }
+            if (Modifier.isAbstract(clazz.getModifiers())) {
+                Utils.logW(""Hook may fail for abstract class: "" + className);
+            }
+
+            Method hook = null;
+            Method backup = null;
+            for (Method method : hookItem.getDeclaredMethods()) {
+                if (method.getName().equals(""hook"") && Modifier.isStatic(method.getModifiers())) {
+                    hook = method;
+                } else if (method.getName().equals(""backup"") && Modifier.isStatic(method.getModifiers())) {
+                    backup = method;
+                }
+            }
+            if (hook == null) {
+                Utils.logE(""Cannot find hook for "" + methodName);
+                return;
+            }
+            findAndBackupAndHook(clazz, methodName, methodSig, hook, backup);
+        } catch (Throwable e) {
+            if (!hookItemWhiteList.contains(hookItemName)) {
+                Utils.logE(""error when hooking "" + hookItemName, e);
+            }
+        }
+    }
+
+    public static void findAndHook(Class targetClass, String methodName, String methodSig, Method hook) {
+        hook(findMethod(targetClass, methodName, methodSig), hook);
+    }
+
+    public static void findAndBackupAndHook(Class targetClass, String methodName, String methodSig,
+                                            Method hook, Method backup) {
+        backupAndHook(findMethod(targetClass, methodName, methodSig), hook, backup);
+    }
+
+    public static void hook(Object target, Method hook) {
+        backupAndHook(target, hook, null);
+    }
+
+    public static void backupAndHook(Object target, Method hook, Method backup) {
+        Utils.logD(String.format(""target=%s, hook=%s, backup=%s"", target, hook, backup));
+        if (target == null) {
+            throw new IllegalArgumentException(""null target method"");
+        }
+        if (hook == null) {
+            throw new IllegalArgumentException(""null hook method"");
+        }
+
+        if (!Modifier.isStatic(hook.getModifiers())) {
+            throw new IllegalArgumentException(""Hook must be a static method: "" + hook);
+        }
+        checkCompatibleMethods(target, hook, ""Original"", ""Hook"");
+        if (backup != null) {
+            if (!Modifier.isStatic(backup.getModifiers())) {
+                throw new IllegalArgumentException(""Backup must be a static method: "" + backup);
+            }
+            // backup is just a placeholder and the constraint could be less strict
+            checkCompatibleMethods(target, backup, ""Original"", ""Backup"");
+        }
+        if (backup != null) {
+            HookMethodResolver.resolveMethod(hook, backup);
+        }
+        // make sure GC completed before hook
+        Thread currentThread = Thread.currentThread();
+        int lastGcType = Main.waitForGcToComplete(
+                XposedHelpers.getLongField(currentThread, ""nativePeer""));
+        if (lastGcType < 0) {
+            Utils.logW(""waitForGcToComplete failed, using fallback"");
+            Runtime.getRuntime().gc();
+        }
+        if (!backupAndHookNative(target, hook, backup)) {
+            throw new RuntimeException(""Failed to hook "" + target + "" with "" + hook);
+        }
+    }
+
+    public static Object findMethod(Class cls, String methodName, String methodSig) {
+        if (cls == null) {
+            throw new IllegalArgumentException(""null class"");
+        }
+        if (methodName == null) {
+            throw new IllegalArgumentException(""null method name"");
+        }
+        if (methodSig == null) {
+            throw new IllegalArgumentException(""null method signature"");
+        }
+        return findMethodNative(cls, methodName, methodSig);
+    }
+
+    private static void checkCompatibleMethods(Object original, Method replacement, String originalName, String replacementName) {
+        ArrayList<Class<?>> originalParams;
+        if (original instanceof Method) {
+            originalParams = new ArrayList<>(Arrays.asList(((Method) original).getParameterTypes()));
+        } else if (original instanceof Constructor) {
+            originalParams = new ArrayList<>(Arrays.asList(((Constructor<?>) original).getParameterTypes()));
+        } else",Introduce Whale hook for Android,"""Add support for Whale runtime and refactor hooking logic""","""Added edxp-whale module with native hooks and configuration""","""Add Whale-related changes to EDXP""

This commit includes several changes related to Whale in the EDXP project:

1. Renaming and updating paths for `libwhale.so` in the `edxp-core` module.
2. Adding Whale-related tasks in the `build.gradle` file of the `edxp-core` module.
3. Updating the `SandHookProvider` class in the `edxp-sandhook` module.
4. Adding a new `edxp-whale` module with its own `build.gradle` file, `framework-stub.jar`, `proguard-rules.pro`, `AndroidManifest.xml`, `Main.java`, `WhaleEdxpConfig.java`, and `WhaleHookProvider.java` files.
5. Adding a `.gitignore` file in the `edxp-whale` module.

These changes seem to be adding a new module to the EDXP project, named `edxp-whale`, and making necessary modifications in other modules to accommodate the new module. The `libwhale.so` library is also updated and renamed to `libwhale.edxp.so`.","Added build and configuration for Whale module, updated native methods reference headers, and included related Java classes.",Model 3
"diff --git a/src/main/java/org/robolectric/Robolectric.java b/src/main/java/org/robolectric/Robolectric.java
index de8203987..a674be4a6 100644
--- a/src/main/java/org/robolectric/Robolectric.java
+++ b/src/main/java/org/robolectric/Robolectric.java
@@ -1317,7 +1317,6 @@ public class Robolectric {
     ShadowStatFs.reset();
     ShadowTypeface.reset();
     ShadowCursorWindow.reset();
-    //ShadowSQLiteConnection.reset();
   }
 
   public static <T extends Activity> ActivityController<T> buildActivity(Class<T> activityClass) {
diff --git a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
index 02b8dcfdd..80237a12d 100644
--- a/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
+++ b/src/main/java/org/robolectric/shadows/ShadowSQLiteConnection.java
@@ -11,7 +11,12 @@ import org.robolectric.util.SQLiteLibraryLoader;
 
 import java.io.File;
 import java.util.Map;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -31,10 +36,6 @@ public class ShadowSQLiteConnection {
     SQLiteLibraryLoader.load();
   }
 
-  public static void reset() {
-    CONNECTIONS.reset();
-  }
-
   private static SQLiteConnection connection(final int pointer) {
     return CONNECTIONS.getConnection(pointer);
   }
@@ -68,138 +69,150 @@ public class ShadowSQLiteConnection {
   }
 
   @Implementation
-  public static int nativeGetParameterCount(int connectionPtr, int statementPtr) {
+  public static int nativeGetParameterCount(final int connectionPtr, final int statementPtr) {
     if (statementPtr == IGNORED_REINDEX_STMT) { return 0; } // TODO
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.getBindParameterCount();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get parameters count in prepared statement"", e);
-      return 0;
-    }
+    return CONNECTIONS.execute(""get parameters count in prepared statement"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.getBindParameterCount();
+      }
+    });
   }
 
   @Implementation
-  public static boolean nativeIsReadOnly(int connectionPtr, int statementPtr) {
+  public static boolean nativeIsReadOnly(final int connectionPtr, final int statementPtr) {
     if (statementPtr == IGNORED_REINDEX_STMT) { return true; } // TODO
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.isReadOnly();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot call isReadOnly"", e);
-      return false;
-    }
+    return CONNECTIONS.execute(""call isReadOnly"", new Callable<Boolean>() {
+      @Override
+      public Boolean call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.isReadOnly();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForLong(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      if (!stmt.step()) {
-        throw new SQLiteDoneException();
+  public static long nativeExecuteForLong(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for long"", new Callable<Long>() {
+      @Override
+      public Long call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        if (!stmt.step()) {
+          throw new SQLiteDoneException();
+        }
+        return stmt.columnLong(0);
       }
-      return stmt.columnLong(0);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for long"", e);
-      return -1;
-    }
+    });
   }
 
   @Implementation
-  public static void nativeExecute(int connectionPtr, int statementPtr) {
-    if (statementPtr == IGNORED_REINDEX_STMT) { return; }
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute"", e);
-    }
+  public static void nativeExecute(final int connectionPtr, final int statementPtr) {
+    if (statementPtr == IGNORED_REINDEX_STMT) { return; } // TODO
+    CONNECTIONS.execute(""execute"", new Callable<Object>() {
+      @Override
+      public Object call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static String nativeExecuteForString(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      if (!stmt.step()) {
-        throw new SQLiteDoneException();
+  public static String nativeExecuteForString(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for string"", new Callable<String>() {
+      @Override
+      public String call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        if (!stmt.step()) {
+          throw new SQLiteDoneException();
+        }
+        return stmt.columnString(0);
       }
-      return stmt.columnString(0);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for string"", e);
-      return null;
-    }
+    });
   }
 
   @Implementation
-  public static int nativeGetColumnCount(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.columnCount();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get columns count"", e);
-      return 0;
-    }
+  public static int nativeGetColumnCount(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""get columns count"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.columnCount();
+      }
+    });
   }
 
   @Implementation
-  public static String nativeGetColumnName(int connectionPtr, int statementPtr, int index) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return stmt.getColumnName(index);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot get column name at index "" + index, e);
-      return null;
-    }
+  public static String nativeGetColumnName(final int connectionPtr, final int statementPtr, final int index) {
+    return CONNECTIONS.execute(""get column name at index "" + index, new Callable<String>() {
+      @Override
+      public String call() throws SQLiteException {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return stmt.getColumnName(index);
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindNull(int connectionPtr, int statementPtr, int index) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bindNull(index);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind null at index "" + index, e);
-    }
+  public static void nativeBindNull(final int connectionPtr, final int statementPtr, final int index) {
+    CONNECTIONS.execute(""bind null at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bindNull(index);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindLong(int connectionPtr, int statementPtr, int index, long value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind long at index "" + index, e);
-    }
+  public static void nativeBindLong(final int connectionPtr, final int statementPtr, final int index, final long value) {
+    CONNECTIONS.execute(""bind long at index "" + index + "" with value "" + value, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindDouble(int connectionPtr, int statementPtr, int index, double value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind double at index "" + index, e);
-    }
+  public static void nativeBindDouble(final int connectionPtr, final int statementPtr, final int index, final double value) {
+    CONNECTIONS.execute(""bind double at index "" + index + "" with value "" + value, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindString(int connectionPtr, int statementPtr, int index, String value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind string at index "" + index, e);
-    }
+  public static void nativeBindString(final int connectionPtr, final int statementPtr, final int index, final String value) {
+    CONNECTIONS.execute(""bind string at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
-  public static void nativeBindBlob(int connectionPtr, int statementPtr, int index, byte[] value) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.bind(index, value);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot bind blob at index "" + index, e);
-    }
+  public static void nativeBindBlob(final int connectionPtr, final int statementPtr, final int index, final byte[] value) {
+    CONNECTIONS.execute(""bind blob at index "" + index, new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.bind(index, value);
+        return null;
+      }
+    });
   }
 
   @Implementation
@@ -210,50 +223,53 @@ public class ShadowSQLiteConnection {
   }
 
   @Implementation
-  public static int nativeExecuteForChangedRowCount(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-      return connection(connectionPtr).getChanges();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for changed row count"", e);
-      return 0;
-    }
+  public static int nativeExecuteForChangedRowCount(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for changed row count"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return connection(connectionPtr).getChanges();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForLastInsertedRowId(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.stepThrough();
-      return connection(connectionPtr).getLastInsertId();
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for last inserted row ID"", e);
-      return 0;
-    }
+  public static long nativeExecuteForLastInsertedRowId(final int connectionPtr, final int statementPtr) {
+    return CONNECTIONS.execute(""execute for last inserted row ID"", new Callable<Long>() {
+      @Override
+      public Long call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.stepThrough();
+        return connection(connectionPtr).getLastInsertId();
+      }
+    });
   }
 
   @Implementation
-  public static long nativeExecuteForCursorWindow(int connectionPtr, int statementPtr, int windowPtr,
-                                                  int startPos, int requiredPos, boolean countAllRows) {
-
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      return ShadowCursorWindow.setData(windowPtr, stmt);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot execute for cursor window"", e);
-      return 0;
-    }
+  public static long nativeExecuteForCursorWindow(final int connectionPtr, final int statementPtr, final int windowPtr,
+                                                  final int startPos, final int requiredPos, final boolean countAllRows) {
+
+    return CONNECTIONS.execute(""execute for cursor window"", new Callable<Integer>() {
+      @Override
+      public Integer call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        return ShadowCursorWindow.setData(windowPtr, stmt);
+      }
+    });
+
   }
 
   @Implementation
-  public static void nativeResetStatementAndClearBindings(int connectionPtr, int statementPtr) {
-    SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
-    try {
-      stmt.reset(true);
-    } catch (SQLiteException e) {
-      rethrow(""Cannot reset statement"", e);
-    }
+  public static void nativeResetStatementAndClearBindings(final int connectionPtr, final int statementPtr) {
+    CONNECTIONS.execute(""reset statement"", new Callable<Object>() {
+      @Override
+      public Object call() throws Exception {
+        SQLiteStatement stmt = stmt(connectionPtr, statementPtr);
+        stmt.reset(true);
+        return null;
+      }
+    });
   }
 
   @Implementation
@@ -291,11 +307,13 @@ public class ShadowSQLiteConnection {
     private final Map<Integer, SQLiteStatement> statementsMap = new ConcurrentHashMap<Integer, SQLiteStatement>();
     private final Map<Integer, SQLiteConnection> connectionsMap = new ConcurrentHashMap<Integer, SQLiteConnection>();
 
+    private final ExecutorService dbExecutor = Executors.newSingleThreadExecutor();
+
     public SQLiteConnection getConnection(final int pointer) {
       SQLiteConnection connection = connectionsMap.get(pointer);
       if (connection == null) {
         throw new IllegalStateException(""Illegal connection pointer "" + pointer
-            + "". Current posinters for thread "" + Thread.currentThread() + "" "" + connectionsMap.keySet());
+            + "". Current pointers for thread "" + Thread.currentThread() + "" "" + connectionsMap.keySet());
       }
       return connection;
     }
@@ -314,68 +332,134 @@ public class ShadowSQLiteConnection {
       return stmt;
     }
 
-    public int open(String path) {
-      SQLiteConnection dbConnection = IN_MEMORY_PATH.equals(path)
-          ? new SQLiteConnection()
-          : new SQLiteConnection(new File(path));
+    public int open(final String path) {
 
-      try {
-        dbConnection.open();
-      } catch (SQLiteException e) {
-        rethrow(""Cannot open SQLite connection"", e);
-      }
+      SQLiteConnection dbConnection = execute(""open SQLite connection"", new Callable<SQLiteConnection>() {
+        @Override
+        public SQLiteConnection call() throws Exception {
+          SQLiteConnection connection = IN_MEMORY_PATH.equals(path)
+              ? new SQLiteConnection()
+              : new SQLiteConnection(new File(path));
+
+          connection.open();
+
+          return connection;
+        }
+      });
 
       int ptr = pointerCounter.incrementAndGet();
       connectionsMap.put(ptr, dbConnection);
       return ptr;
     }
 
-    public int prepareStatement(int connectionPtr, String sql) {
+    public int prepareStatement(final int connectionPtr, final String sql) {
       // TODO: find a way to create collators
       if (""REINDEX LOCALIZED"".equals(sql)) {
         return IGNORED_REINDEX_STMT;
       }
 
-      SQLiteConnection connection = getConnection(connectionPtr);
-      try {
-        SQLiteStatement stmt = connection.prepare(sql);
-        int pointer = pointerCounter.incrementAndGet();
-        statementsMap.put(pointer, stmt);
-        return pointer;
-      } catch (SQLiteException e) {
-        rethrow(""Cannot prepare statement "" + sql, e);
-        return 0;
-      }
+      SQLiteStatement stmt = execute(""prepare statement"", new Callable<SQLiteStatement>() {
+        @Override
+        public SQLiteStatement call() throws Exception {
+          SQLiteConnection connection = getConnection(connectionPtr);
+          return connection.prepare(sql);
+        }
+      });
+
+      int pointer = pointerCounter.incrementAndGet();
+      statementsMap.put(pointer, stmt);
+      return pointer;
     }
 
-    public void close(int ptr) {
-      SQLiteConnection connection = getConnection(ptr);
-      connection.dispose();
+    public void close(final int ptr) {
+      execute(""close connection"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteConnection connection = getConnection(ptr);
+          connection.dispose();
+          return null;
+        }
+      });
     }
 
-    public void finalizeStmt(int connectionPtr, int statementPtr) {
+    public void finalizeStmt(final int connectionPtr, final int statementPtr) {
       if (statementPtr == IGNORED_REINDEX_STMT) {
         return;
       }
-      SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);
-      statementsMap.remove(statementPtr);
-      stmt.dispose();
+      execute(""finalize statement"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteStatement stmt = getStatement(connectionPtr, statementPtr);
+          statementsMap.remove(statementPtr);
+          stmt.dispose();
+          return null;
+        }
+      });
     }
 
     public void cancel(int connectionPtr) {
       getConnection(connectionPtr); // check connection
 
-      SQLiteStatement statement = statementsMap.get(pointerCounter.get());
-      if (statement != null) {
-        statement.cancel();
-      }
+      execute(""cancel"", new Callable<Object>() {
+        @Override
+        public Object call() throws Exception {
+          SQLiteStatement statement = statementsMap.get(pointerCounter.get());
+          if (statement != null) {
+            statement.cancel();
+          }
+          return null;
+        }
+      });
     }
 
-    public void reset() {
-      statementsMap.clear();
-      connectionsMap.clear();
+    public <T> T execute(final String comment, final Callable<T> work) {
+      Future<DbOperationResult<T>> future = dbExecutor.submit(new Callable<DbOperationResult<T>>() {
+        @Override
+        public DbOperationResult<T> call() throws Exception {
+          T result = null;
+          Exception error = null;
+          try {
+            result = work.call();
+          } catch (Exception e) {
+            error = e;
+          }
+          return new DbOperationResult<T>(result, error);
+        }
+      });
+
+      DbOperationResult<T> execResult;
+      try {
+        execResult = future.get();
+
+        if (execResult.error != null) {
+          if (execResult.error instanceof SQLiteException) {
+            rethrow(""Cannot "" + comment, (SQLiteException) execResult.error);
+          } else if (execResult.error instanceof android.database.sqlite.SQLiteException) {
+            throw (android.database.sqlite.SQLiteException) execResult.error;
+          } else {
+            throw new RuntimeException(execResult.error);
+          }
+        }
+
+        return execResult.value;
+
+      } catch (ExecutionException e) {
+        throw new RuntimeException(e);
+      } catch (InterruptedException e) {
+        throw new RuntimeException(e);
+      }
+
     }
 
+    private static class DbOperationResult<T> {
+      final T value;
+      final Exception error;
+
+      DbOperationResult(T value, Exception error) {
+        this.value = value;
+        this.error = error;
+      }
+    }
   }
 
 }
diff --git a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
index 7f50988e6..8a65d2390 100644
--- a/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
+++ b/src/test/java/org/robolectric/shadows/SQLiteDatabaseTest.java
@@ -15,6 +15,7 @@ import org.robolectric.Robolectric;
 import org.robolectric.TestRunners;
 
 import java.io.File;
+import java.util.concurrent.CountDownLatch;
 
 import static android.database.sqlite.SQLiteDatabase.OPEN_READWRITE;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -687,6 +688,37 @@ public class SQLiteDatabaseTest extends DatabaseTestBase {
     }
   }
 
+
+  @Test
+  public void shouldBeAbleToBeUsedFromDifferentThread() {
+    final CountDownLatch sync = new CountDownLatch(1);
+    final Throwable[] error = {null};
+
+    new Thread() {
+      @Override
+      public void run() {
+        try {
+          executeQuery(""select * from table_name"");
+        } catch (Throwable e) {
+          e.printStackTrace();
+          error[0] = e;
+        } finally {
+          sync.countDown();
+        }
+      }
+    }
+    .start();
+
+    try {
+      sync.await();
+    }","do all the operations on SQLite connections in a single thread , remove reset from ShadowSQLiteConnection .","""Introduce thread safety to SQLite operations by executing them on a single-threaded executor""","Here's a possible commit message based on the provided diff:

""Refactor ShadowSQLiteConnection to use asynchronous execution and improve thread safety""

This commit message captures the main changes made in the diff, which include:

* Refactoring ShadowSQLiteConnection to use asynchronous execution using ExecutorService
* Improving thread safety by using ConcurrentHashMap and synchronized access to shared resources
* Moving database operations to a separate thread to avoid blocking the main thread

This commit message is concise, clear, and accurately describes the changes made in the diff.","""Remove ShadowSQLiteConnection.reset() and add multithreading support to ShadowSQLiteConnection""

Explanation:

* The method `ShadowSQLiteConnection.reset()` has been removed.
* Several methods in `ShadowSQLiteConnection` have been modified to execute their logic in a separate thread using an `ExecutorService`. This allows for multithreading support.
* A `CountDownLatch` has been added to the test `shouldBeAbleToBeUsedFromDifferentThread()` in `SQLiteDatabaseTest` to wait for the background thread to complete.
* The `DbOperationResult` class has been added to hold the result and any error that may have occurred during the execution of the `Callable` in `ShadowSQLiteConnection`.
* The `SQLiteDatabaseTest` now imports `java.util.concurrent.CountDownLatch`.","""Add Callable task execution and multi-threading support to ShadowSQLiteConnection methods.""",Model 1
"diff --git a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
index 115938955ac..a1c05e040a8 100644
--- a/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
+++ b/community/bolt/src/main/java/org/neo4j/bolt/v1/messaging/Neo4jPackV1.java
@@ -296,43 +296,57 @@ public class Neo4jPackV1 implements Neo4jPack
         @Override
         public void writeDuration( long months, long days, long seconds, int nanos ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Duration is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDate( long epochDay ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Date is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeLocalTime( long nanoOfDay ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""LocalTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""Time is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeLocalDateTime( long epochSecond, int nano ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""LocalDateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""DateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
         public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws IOException
         {
-            throw new UnsupportedOperationException( ""not implemented"" );
+            error = new Error( Status.Request.Invalid,
+                    ""DateTime is not yet supported as a return type in Bolt"" );
+            packNull();
         }
 
         @Override
diff --git a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
index 57f9dcebc31..1f7c321a99f 100644
--- a/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
+++ b/community/cypher/cypher/src/main/java/org/neo4j/cypher/internal/codegen/ParameterConverter.java
@@ -20,8 +20,14 @@
 package org.neo4j.cypher.internal.codegen;
 
 import java.lang.reflect.Array;
+import java.time.Instant;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -38,19 +44,15 @@ import org.neo4j.helpers.collection.ReverseArrayIterator;
 import org.neo4j.kernel.impl.core.EmbeddedProxySPI;
 import org.neo4j.values.AnyValueWriter;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
-import org.neo4j.values.storable.DateTimeValue;
-import org.neo4j.values.storable.DateValue;
 import org.neo4j.values.storable.DurationValue;
-import org.neo4j.values.storable.LocalDateTimeValue;
-import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.TextArray;
 import org.neo4j.values.storable.TextValue;
-import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.storable.Values;
-import org.neo4j.values.virtual.RelationshipValue;
 import org.neo4j.values.virtual.MapValue;
 import org.neo4j.values.virtual.NodeValue;
+import org.neo4j.values.virtual.RelationshipValue;
 
+import static java.time.ZoneOffset.UTC;
 import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;
 
 /**
@@ -365,37 +367,37 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>
     @Override
     public void writeDate( long epochDay ) throws RuntimeException
     {
-        writeValue( DateValue.epochDate( epochDay ) );
+        writeValue( LocalDate.ofEpochDay( epochDay ) );
     }
 
     @Override
     public void writeLocalTime( long nanoOfDay ) throws RuntimeException
     {
-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );
+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );
     }
 
     @Override
     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException
     {
-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );
+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );
+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );
     }
 
     private interface Writer
diff --git a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
index d94a0ffcd1c..7ea08c68ea1 100644
--- a/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
+++ b/community/cypher/cypher/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_4/runtime/executionplan/procs/ProcedureExecutionResult.scala
@@ -19,6 +19,8 @@
  */
 package org.neo4j.cypher.internal.compatibility.v3_4.runtime.executionplan.procs
 
+import java.time.temporal.TemporalAmount
+import java.time._
 import java.util
 
 import org.neo4j.cypher.internal.util.v3_4.{ProfilerStatisticsNotReadyException, TaskCloser}
@@ -35,7 +37,7 @@ import org.neo4j.graphdb.spatial.{Geometry, Point}
 import org.neo4j.kernel.impl.util.ValueUtils
 import org.neo4j.kernel.impl.util.ValueUtils._
 import org.neo4j.values.AnyValue
-import org.neo4j.values.storable.Values
+import org.neo4j.values.storable._
 import org.neo4j.values.storable.Values.{of => DONT_USE_OMG, _}
 
 /**
@@ -108,6 +110,12 @@ class ProcedureExecutionResult(context: QueryContext,
           case CTBoolean => transform(res(pos), booleanValue)
           case CTPoint => transform(res(pos), (p: Point) => asPointValue(p))
           case CTGeometry => transform(res(pos), (g: Geometry) => asGeometryValue(g))
+          case CTDateTime => transform(res(pos), (g: ZonedDateTime) => DateTimeValue.datetime(g))
+          case CTLocalDateTime => transform(res(pos), (g: LocalDateTime) => LocalDateTimeValue.localDateTime(g))
+          case CTDate => transform(res(pos), (g: LocalDate) => DateValue.date(g))
+          case CTTime => transform(res(pos), (g: OffsetTime) => TimeValue.time(g))
+          case CTLocalTime => transform(res(pos), (g: LocalTime) => LocalTimeValue.localTime(g))
+          case CTDuration => transform(res(pos), (g: TemporalAmount) => Values.durationValue(g))
           case CTMap => transform(res(pos), asMapValue)
           case ListType(_) => transform(res(pos), asListValue)
           case CTAny => transform(res(pos), ValueUtils.of)
diff --git a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
index a6cc6f05cd9..de5bb613db5 100644
--- a/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
+++ b/community/cypher/cypher/src/test/java/org/neo4j/cypher/internal/codegen/ParameterConverterTest.java
@@ -22,6 +22,11 @@ package org.neo4j.cypher.internal.codegen;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
+import java.time.ZonedDateTime;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -34,7 +39,13 @@ import org.neo4j.kernel.impl.core.NodeProxy;
 import org.neo4j.kernel.impl.core.RelationshipProxy;
 import org.neo4j.values.AnyValue;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
+import org.neo4j.values.storable.DateTimeValue;
+import org.neo4j.values.storable.DateValue;
+import org.neo4j.values.storable.DurationValue;
+import org.neo4j.values.storable.LocalDateTimeValue;
+import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.LongArray;
+import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.storable.Values;
 import org.neo4j.values.virtual.RelationshipValue;
 import org.neo4j.values.virtual.ListValue;
@@ -198,6 +209,96 @@ public class ParameterConverterTest
         assertThat( point.getCRS().getCode(), equalTo( 4326 ) );
     }
 
+    @Test
+    public void shouldHandleDateTime()
+    {
+        // Given
+        DateTimeValue dvalue = DateTimeValue.datetime( 1, 2, 3, 4, 5, 6, 7, ""+00:00"" );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( ZonedDateTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleLocalDateTime()
+    {
+        // Given
+        LocalDateTimeValue dvalue = LocalDateTimeValue.localDateTime( 1, 2, 3, 4, 5, 6, 7 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalDateTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleDate()
+    {
+        // Given
+        DateValue dvalue = DateValue.date( 1, 2, 3 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalDate.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleTime()
+    {
+        // Given
+        TimeValue dvalue = TimeValue.time( 1, 2, 3, 4, ""+00:00"" );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( OffsetTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleLocalTime()
+    {
+        // Given
+        LocalTimeValue dvalue = LocalTimeValue.localTime( 1, 2, 3, 4 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( LocalTime.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
+    @Test
+    public void shouldHandleDurations()
+    {
+        // Given
+        DurationValue dvalue = DurationValue.duration( 1, 2, 3, 4 );
+
+        // When
+        dvalue.writeTo( converter );
+
+        // Then
+        Object value = converter.value();
+        assertThat( value, instanceOf( DurationValue.class ) );
+        assertThat( value, equalTo( dvalue.asObjectCopy() ) );
+    }
+
     @Test
     public void shouldHandleLists()
     {
diff --git a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
index 15ea2e65066..bd9c1fe1a55 100644
--- a/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
+++ b/community/cypher/interpreted-runtime/src/main/scala/org/neo4j/cypher/internal/runtime/interpreted/ValueConversion.scala
@@ -19,13 +19,16 @@
  */
 package org.neo4j.cypher.internal.runtime.interpreted
 
+import java.time._
+import java.time.temporal.TemporalAmount
+
 import org.neo4j.cypher.internal.util.v3_4.Eagerly
 import org.neo4j.cypher.internal.util.v3_4.symbols._
 import org.neo4j.graphdb.spatial.{Geometry, Point}
 import org.neo4j.graphdb.{Node, Path, Relationship}
 import org.neo4j.kernel.impl.util.ValueUtils
 import org.neo4j.values.AnyValue
-import org.neo4j.values.storable.Values
+import org.neo4j.values.storable._
 import org.neo4j.values.storable.Values.byteArray
 import org.neo4j.values.virtual.VirtualValues.fromArray
 import org.neo4j.values.virtual.{MapValue, VirtualValues}
@@ -48,6 +51,12 @@ object ValueConversion {
       case CTAny => o => ValueUtils.of(o)
       case CTPoint => o => ValueUtils.asPointValue(o.asInstanceOf[Point])
       case CTGeometry => o => ValueUtils.asGeometryValue(o.asInstanceOf[Geometry])
+      case CTDateTime => o => DateTimeValue.datetime(o.asInstanceOf[ZonedDateTime])
+      case CTLocalDateTime => o => LocalDateTimeValue.localDateTime(o.asInstanceOf[LocalDateTime])
+      case CTDate => o => DateValue.date(o.asInstanceOf[LocalDate])
+      case CTTime => o => TimeValue.time(o.asInstanceOf[OffsetTime])
+      case CTLocalTime => o => LocalTimeValue.localTime(o.asInstanceOf[LocalTime])
+      case CTDuration => o => Values.durationValue(o.asInstanceOf[TemporalAmount])
     }
 
     (v) => if (v == null) Values.NO_VALUE else converter(v)
@@ -67,6 +76,12 @@ object ValueConversion {
     case p: Path => ValueUtils.asPathValue(p)
     case p: Point => ValueUtils.asPointValue(p)
     case p: Geometry => ValueUtils.asGeometryValue(p)
+    case x: ZonedDateTime => DateTimeValue.datetime(x)
+    case x: LocalDateTime => LocalDateTimeValue.localDateTime(x)
+    case x: LocalDate => DateValue.date(x)
+    case x: OffsetTime => TimeValue.time(x)
+    case x: LocalTime => LocalTimeValue.localTime(x)
+    case x: TemporalAmount => Values.durationValue(x)
     case m: Map[_, _] => VirtualValues.map(Eagerly.immutableMapValues(m.asInstanceOf[Map[String, Any]], asValue).asJava)
     case m: java.util.Map[_, _] => ValueUtils.asMapValue(m.asInstanceOf[java.util.Map[String, AnyRef]])
     case a: TraversableOnce[_] => VirtualValues.list(a.map(asValue).toArray:_*)
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
index dcc7c4b5b43..660ea1cf7ff 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/BaseToObjectValueWriter.java
@@ -20,8 +20,14 @@
 package org.neo4j.kernel.impl.util;
 
 import java.lang.reflect.Array;
+import java.time.Instant;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.OffsetTime;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -41,18 +47,14 @@ import org.neo4j.graphdb.traversal.Paths;
 import org.neo4j.helpers.collection.ReverseArrayIterator;
 import org.neo4j.values.AnyValueWriter;
 import org.neo4j.values.storable.CoordinateReferenceSystem;
-import org.neo4j.values.storable.DateTimeValue;
-import org.neo4j.values.storable.DateValue;
 import org.neo4j.values.storable.DurationValue;
-import org.neo4j.values.storable.LocalDateTimeValue;
-import org.neo4j.values.storable.LocalTimeValue;
 import org.neo4j.values.storable.TextArray;
 import org.neo4j.values.storable.TextValue;
-import org.neo4j.values.virtual.RelationshipValue;
-import org.neo4j.values.storable.TimeValue;
 import org.neo4j.values.virtual.MapValue;
 import org.neo4j.values.virtual.NodeValue;
+import org.neo4j.values.virtual.RelationshipValue;
 
+import static java.time.ZoneOffset.UTC;
 import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;
 
 /**
@@ -417,37 +419,37 @@ public abstract class BaseToObjectValueWriter<E extends Exception> implements An
     @Override
     public void writeDate( long epochDay ) throws RuntimeException
     {
-        writeValue( DateValue.epochDate( epochDay ) );
+        writeValue( LocalDate.ofEpochDay( epochDay ) );
     }
 
     @Override
     public void writeLocalTime( long nanoOfDay ) throws RuntimeException
     {
-        writeValue( LocalTimeValue.localTime( nanoOfDay ) );
+        writeValue( LocalTime.ofNanoOfDay( nanoOfDay ) );
     }
 
     @Override
     public void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( TimeValue.time( nanosOfDayUTC, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( OffsetTime.of( LocalTime.ofNanoOfDay( nanosOfDayUTC ), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeLocalDateTime( long epochSecond, int nano ) throws RuntimeException
     {
-        writeValue( LocalDateTimeValue.localDateTime( epochSecond, nano ) );
+        writeValue( LocalDateTime.ofInstant( Instant.ofEpochSecond(epochSecond, nano), UTC ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
+        writeValue( ZonedDateTime.ofInstant( Instant.ofEpochSecond(epochSecondUTC, nano), ZoneOffset.ofTotalSeconds( offsetSeconds ) ) );
     }
 
     @Override
     public void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws RuntimeException
     {
-        writeValue( DateTimeValue.datetime( epochSecondUTC, nano, ZoneId.of( zoneId ) ) );
+        writeValue( ZonedDateTime.of( LocalDate.ofEpochDay( epochSecondUTC ), LocalTime.ofNanoOfDay( nano ), ZoneId.of( zoneId ) ) );
     }
 
     private interface Writer",Fixing some remaining Cypherland stuff around temporal values .,"""Improve handling of temporal types in Bolt and Cypher""",Implement support for Java 8 date and time types in Neo4j Cypher and Bolt protocols.,"""Add unsupported return type errors for temporal types in Neo4jPackV1""

Explanation: The commit adds error messages for unsupported temporal types (Duration, Date, LocalTime, Time, LocalDateTime, DateTime) in the packStream method of Neo4jPackV1 class. When any of these types are encountered, an Error object is created with a message indicating that the type is not yet supported as a return type in Bolt, and a null value is packed instead.","""Add support for temporal types (Date, Time, DateTime, LocalDateTime, Duration) in Neo4jPack, ParameterConverter, and ValueConversion processing.""",Model 4
"diff --git a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
index 623f1c8087f..e14e0dfa506 100644
--- a/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
+++ b/sonar-server/src/main/webapp/WEB-INF/db/migrate/170_delete_unvalid_project_snapshots.rb
@@ -24,17 +24,14 @@
 class DeleteUnvalidProjectSnapshots < ActiveRecord::Migration
 
   def self.up
-   metric=Metric.find(:first, :conditions => ['name=?','lines'])
-   if metric
-     snapshots=select_snapshots_without_measures(metric)
-     delete_snapshots(snapshots)
-   end
+    snapshots=select_snapshots_without_measures
+    delete_snapshots(snapshots)
   end
 
-  def self.select_snapshots_without_measures(metric)
+  def self.select_snapshots_without_measures
    snapshots=nil
    say_with_time ""Select project snapshots without measures..."" do
-     snapshots=Snapshot.find_by_sql [""SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id AND m.metric_id=?)"", false, metric.id]
+     snapshots=Snapshot.find_by_sql [""SELECT s.id FROM snapshots s WHERE s.scope='PRJ' and s.qualifier IN ('TRK', 'BRC') AND status='P' AND islast=? AND NOT EXISTS (select m.id from project_measures m WHERE m.snapshot_id=s.id)"", false]
    end
    snapshots
   end",improve db migration to avoid deleting special snapshots ( like pacbase projects ),"""Remove dependency on 'lines' metric in DeleteUnvalidProjectSnapshots migration""","""Refactor delete_unvalid_project_snapshots migration to remove dependency on specific metric""","""Refactor DeleteUnvalidProjectSnapshots migration to remove unnecessary metric dependency""

Explanation:
The change removes the dependency on the 'lines' metric in the `select_snapshots_without_measures` method, making the method more generic and reusable. The `delete_snapshots` method call is also simplified by removing the metric parameter and using the updated `select_snapshots_without_measures` method.","""Remove metric dependency when selecting project snapshots without measures in migration script.""",Model 1
"diff --git a/src/com/android/launcher2/AppsCustomizePagedView.java b/src/com/android/launcher2/AppsCustomizePagedView.java
index 3fcff726f..a44765acd 100644
--- a/src/com/android/launcher2/AppsCustomizePagedView.java
+++ b/src/com/android/launcher2/AppsCustomizePagedView.java
@@ -32,7 +32,6 @@ import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
-import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.MaskFilter;
 import android.graphics.Matrix;
@@ -170,7 +169,8 @@ class AppsCustomizeAsyncTask extends AsyncTask<AsyncTaskPageData, Void, AsyncTas
  */
 public class AppsCustomizePagedView extends PagedViewWithDraggableItems implements
         AllAppsView, View.OnClickListener, View.OnKeyListener, DragSource,
-        PagedViewIcon.PressedCallback, PagedViewWidget.ShortPressListener {
+        PagedViewIcon.PressedCallback, PagedViewWidget.ShortPressListener,
+        LauncherTransitionable {
     static final String LOG_TAG = ""AppsCustomizePagedView"";
 
     /**
@@ -241,6 +241,11 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
     PendingAddWidgetInfo mCreateWidgetInfo = null;
     private boolean mDraggingWidget = false;
 
+    // Deferral of loading widget previews during launcher transitions
+    private boolean mInTransition;
+    private ArrayList<AsyncTaskPageData> mDeferredSyncWidgetPageItems =
+        new ArrayList<AsyncTaskPageData>();
+
     public AppsCustomizePagedView(Context context, AttributeSet attrs) {
         super(context, attrs);
         mLayoutInflater = LayoutInflater.from(context);
@@ -731,6 +736,32 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
         mLauncher.unlockScreenOrientationOnLargeUI();
     }
 
+    @Override
+    public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWorkspace) {
+        mInTransition = true;
+        if (toWorkspace) {
+            cancelAllTasks();
+        }
+    }
+
+    @Override
+    public View getContent() {
+        return null;
+    }
+
+    @Override
+    public void onLauncherTransitionStep(Launcher l, float t) {
+    }
+
+    @Override
+    public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
+        mInTransition = false;
+        for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {
+            onSyncWidgetPageItems(d);
+        }
+        mDeferredSyncWidgetPageItems.clear();
+    }
+
     @Override
     public void onDropCompleted(View target, DragObject d, boolean success) {
         endDragging(target, success);
@@ -785,6 +816,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();
             task.cancel(false);
             iter.remove();
+            mDirtyPageContent.set(task.page, true);
         }
     }
 
@@ -804,7 +836,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
         Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();
         while (iter.hasNext()) {
             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();
-            int pageIndex = task.page + mNumAppsPages;
+            int pageIndex = task.page;
             if ((mNextPage > mCurrentPage && pageIndex >= mCurrentPage) ||
                 (mNextPage < mCurrentPage && pageIndex <= mCurrentPage)) {
                 task.setThreadPriority(getThreadPriorityForPage(pageIndex));
@@ -906,7 +938,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
         int minPageDiff = Integer.MAX_VALUE;
         while (iter.hasNext()) {
             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();
-            minPageDiff = Math.abs(task.page + mNumAppsPages - toPage);
+            minPageDiff = Math.abs(task.page - toPage);
         }
 
         int rawPageDiff = Math.abs(page - toPage);
@@ -941,7 +973,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
         Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();
         while (iter.hasNext()) {
             AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();
-            int taskPage = task.page + mNumAppsPages;
+            int taskPage = task.page;
             if (taskPage < getAssociatedLowerPageBound(mCurrentPage) ||
                     taskPage > getAssociatedUpperPageBound(mCurrentPage)) {
                 task.cancel(false);
@@ -952,7 +984,7 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
         }
 
         // We introduce a slight delay to order the loading of side pages so that we don't thrash
-        final int sleepMs = getSleepForPage(page + mNumAppsPages);
+        final int sleepMs = getSleepForPage(page);
         AsyncTaskPageData pageData = new AsyncTaskPageData(page, widgets, cellWidth, cellHeight,
             new AsyncTaskCallback() {
                 @Override
@@ -972,20 +1004,17 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
             new AsyncTaskCallback() {
                 @Override
                 public void run(AppsCustomizeAsyncTask task, AsyncTaskPageData data) {
-                    try {
-                        mRunningTasks.remove(task);
-                        if (task.isCancelled()) return;
-                        onSyncWidgetPageItems(data);
-                    } finally {
-                        data.cleanup(task.isCancelled());
-                    }
+                    mRunningTasks.remove(task);
+                    if (task.isCancelled()) return;
+                    // do cleanup inside onSyncWidgetPageItems
+                    onSyncWidgetPageItems(data);
                 }
             });
 
         // Ensure that the task is appropriately prioritized and runs in parallel
         AppsCustomizeAsyncTask t = new AppsCustomizeAsyncTask(page,
                 AsyncTaskPageData.Type.LoadWidgetPreviewData);
-        t.setThreadPriority(getThreadPriorityForPage(page + mNumAppsPages));
+        t.setThreadPriority(getThreadPriorityForPage(page));
         t.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, pageData);
         mRunningTasks.add(t);
     }
@@ -1128,13 +1157,13 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
                 - ((mWidgetCountY - 1) * mWidgetHeightGap)) / mWidgetCountY);
 
         // Prepare the set of widgets to load previews for in the background
-        int offset = page * numItemsPerPage;
+        int offset = (page - mNumAppsPages) * numItemsPerPage;
         for (int i = offset; i < Math.min(offset + numItemsPerPage, mWidgets.size()); ++i) {
             items.add(mWidgets.get(i));
         }
 
         // Prepopulate the pages with the other widget info, and fill in the previews later
-        final PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page + mNumAppsPages);
+        final PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page);
         layout.setColumnCount(layout.getCellCountX());
         for (int i = 0; i < items.size(); ++i) {
             Object rawInfo = items.get(i);
@@ -1245,29 +1274,38 @@ public class AppsCustomizePagedView extends PagedViewWithDraggableItems implemen
             }
         }
     }
-    private void onSyncWidgetPageItems(AsyncTaskPageData data) {
-        int page = data.page;
-        PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page + mNumAppsPages);
 
-        ArrayList<Object> items = data.items;
-        int count = items.size();
-        for (int i = 0; i < count; ++i) {
-            PagedViewWidget widget = (PagedViewWidget) layout.getChildAt(i);
-            if (widget != null) {
-                Bitmap preview = data.generatedImages.get(i);
-                widget.applyPreview(new FastBitmapDrawable(preview), i);
-            }
+    private void onSyncWidgetPageItems(AsyncTaskPageData data) {
+        if (mInTransition) {
+            mDeferredSyncWidgetPageItems.add(data);
+            return;
         }
+        try {
+            int page = data.page;
+            PagedViewGridLayout layout = (PagedViewGridLayout) getPageAt(page);
+
+            ArrayList<Object> items = data.items;
+            int count = items.size();
+            for (int i = 0; i < count; ++i) {
+                PagedViewWidget widget = (PagedViewWidget) layout.getChildAt(i);
+                if (widget != null) {
+                    Bitmap preview = data.generatedImages.get(i);
+                    widget.applyPreview(new FastBitmapDrawable(preview), i);
+                }
+            }
 
-        layout.createHardwareLayer();
-        invalidate();
+            layout.createHardwareLayer();
+            invalidate();
 
-        // Update all thread priorities
-        Iterator<AppsCustomizeAsyncTask> iter = mRunningTasks.iterator();
-        while (iter.hasNext()) {
-            AppsCustomizeAsyncTask task = (AppsCustomizeAsyncTask) iter.next();
-            int pageIndex = task.page + mNumAppsPages;
-",Fix more cases where blips show up in All Apps .,"""Optimize AppsCustomizePagedView for launcher transitions by deferring widget preview loading""","""Implement launcher transition support for AppsCustomizePagedView""","This commit appears to add support for launcher transitions in the AppsCustomizePagedView class. It adds several methods related to launcher transitions, such as onLauncherTransitionStart, onLauncherTransitionEnd, and others. It also adds a new field mInTransition to keep track of whether the launcher is currently in a transition. Additionally, it modifies the onSyncWidgetPageItems method to defer loading widget previews during launcher transitions, and adds a new field mDeferredSyncWidgetPageItems to store the deferred tasks. Finally, it modifies the cancelAllTasks method to cancel all tasks when transitioning to the workspace.","""Add deferral of loading widget previews during launcher transitions to improve performance and user experience.""",Model 1
"diff --git a/dropwizard-http2/pom.xml b/dropwizard-http2/pom.xml
index b69a786ee..59600a69a 100644
--- a/dropwizard-http2/pom.xml
+++ b/dropwizard-http2/pom.xml
@@ -13,7 +13,7 @@
 
     <properties>
         <!-- Default alpn-boot version. See <profiles> for specific profiles. -->
-        <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+        <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>
     </properties>
 
     <build>
@@ -459,5 +459,53 @@
                 <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
             </properties>
         </profile>
+        <profile>
+            <id>jdk-1.8.0_151</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_151</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+            </properties>
+        </profile>
+        <profile>
+            <id>jdk-1.8.0_152</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_152</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.11.v20170118</alpn-boot.version>
+            </properties>
+        </profile>
+        <profile>
+            <id>jdk-1.8.0_161</id>
+            <activation>
+                <property>
+                    <name>java.version</name>
+                    <value>1.8.0_161</value>
+                </property>
+            </activation>
+            <properties>
+                <alpn-boot.version>8.1.12.v20180117</alpn-boot.version>
+            </properties>
+",Add a new Maven profile to support Jetty ALPN on jdk8u161 ( <issue_id> ) .,"""Update alpn-boot version to 8.1.12.v20180117 and add profiles for JDK 1.8.0_151, 1.8.0_152, and 1.8.0_161""","""Update alpn-boot version to 8.1.12.v20180117 and add profiles for specific JDK versions""","""Updated alpn-boot version to 8.1.12.v20180117 and added new JDK profiles for versions 1.8.0_151, 1.8.0_152, and 1.8.0_161""","Update alpn-boot version and add specific JDK profiles for versions 1.8.0_151, 1.8.0_152, and 1.8.0_161.",Model 4
"diff --git a/site2/docs/reference-pulsar-admin.md b/site2/docs/reference-pulsar-admin.md
index d64b131211..419b5071d3 100644
--- a/site2/docs/reference-pulsar-admin.md
+++ b/site2/docs/reference-pulsar-admin.md
@@ -21,10 +21,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
index 5c3a4207ff..422d8a53b8 100644
--- a/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.0/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
index 959e62d679..86e1b95186 100644
--- a/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.1/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`
diff --git a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
index 7323c17cb0..d9be03abac 100644
--- a/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
+++ b/site2/website/versioned_docs/version-2.5.2/reference-pulsar-admin.md
@@ -22,10 +22,10 @@ Commands
 * `ns-isolation-policy`
 * `sources`
 
-    For more information, see [here](reference-connector-admin.md#sources)
+  For more information, see [here](io-cli.md#sources)
 * `sinks`
   
-  For more information, see [here](reference-connector-admin.md#sinks)
+  For more information, see [here](io-cli.md#sinks)
 * `topics`
 * `tenants`
 * `resource-quotas`",Fix the links to the docs about sinks and sources CLI ( <issue_id> ),"""Update links to sources and sinks documentation in pulsar-admin reference""","Update reference-pulsar-admin.md to point to io-cli.md for sources and sinks documentation

This commit message accurately reflects the changes made in the diff, which involves updating the links in the reference-pulsar-admin.md file to point to io-cli.md instead of reference-connector-admin.md.","""Update links to Pulsar admin reference documentation for sources and sinks""",Update links to point to the new io-cli.md for sources and sinks information in Pulsar admin references.,Model 4
"diff --git a/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java b/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java
index 4109d64e..d0c495e2 100644
--- a/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java
+++ b/Camera/Content/app/src/main/java/com/commonsware/android/camcon/CameraContentDemoActivity.java
@@ -1,3 +1,17 @@
+/***
+ Copyright (c) 2008-2016 CommonsWare, LLC
+ Licensed under the Apache License, Version 2.0 (the ""License""); you may not
+ use this file except in compliance with the License. You may obtain a copy
+ of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
+ by applicable law or agreed to in writing, software distributed under the
+ License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
+ OF ANY KIND, either express or implied. See the License for the specific
+ language governing permissions and limitations under the License.
+
+ From _The Busy Coder's Guide to Android Development_
+ https://commonsware.com/Android
+ */
+
 package com.commonsware.android.camcon;
 
 import android.app.Activity;
@@ -9,6 +23,9 @@ import android.provider.MediaStore;
 import java.io.File;
 
 public class CameraContentDemoActivity extends Activity {
+  private static final String EXTRA_FILENAME=
+    ""com.commonsware.android.camcon.EXTRA_FILENAME"";
+  private static final String FILENAME=""CameraContentDemo.jpeg"";
   private static final int CONTENT_REQUEST=1337;
   private File output=null;
 
@@ -17,15 +34,34 @@ public class CameraContentDemoActivity extends Activity {
     super.onCreate(savedInstanceState);
 
     Intent i=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-    File dir=
+
+    if (savedInstanceState==null) {
+      File dir=
         Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
 
-    output=new File(dir, ""CameraContentDemo.jpeg"");
+      dir.mkdirs();
+      output=new File(dir, FILENAME);
+    }
+    else {
+      output=(File)savedInstanceState.getSerializable(EXTRA_FILENAME);
+    }
+
+    if (output.exists()) {
+      output.delete();
+    }
+
     i.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(output));
 
     startActivityForResult(i, CONTENT_REQUEST);
   }
 
+  @Override
+  protected void onSaveInstanceState(Bundle outState) {
+    super.onSaveInstanceState(outState);
+
+    outState.putSerializable(EXTRA_FILENAME, output);
+  }
+
   @Override
   protected void onActivityResult(int requestCode, int resultCode,
                                   Intent data) {",handle config changes / process termination,"""Added license header and implemented state saving for camera output file""","Here's a possible commit message based on the provided diff:

`Add filename persistence and cleanup for camera content demo`

This commit message summarizes the main changes introduced in the diff, which include adding filename persistence and cleanup logic for the camera content demo.","This commit appears to add a license header to the Java file, initialize the output file from saved instance state if available, delete the output file if it already exists before starting the camera activity, and save the output file to the instance state Bundle.

Here's a suggested commit message:

""Add license header, improve output file handling and add instance state management""

Explanation:

1. ""Add license header"" - Self-explanatory, the Apache License header is added to the file.
2. ""Improve output file handling"" - The code now checks if the output file already exists and deletes it before starting the camera activity.
3. ""Add instance state management"" - The output file is now saved and restored using the instance state Bundle. This ensures that the correct file is used even if the activity is recreated (e.g., due to a configuration change).","""Add license info, handle saved instance state and improve file management in CameraContentDemoActivity.java.""",Model 1
"diff --git a/changelog.html b/changelog.html
index 7427f622d0..7ec010eda8 100644
--- a/changelog.html
+++ b/changelog.html
@@ -46,7 +46,10 @@ Upcoming changes</a>
 
 <!-- these changes are controlled by the release process. DO NOT MODIFY -->
 <div id=""rc"" style=""display:none;""><!--=BEGIN=-->
-<h3><a name=v1.394>What's new in 1.394</a> <!--=DATE=--></h3>
+<h3><a name=v1.395>What's new in 1.395</a> <!--=DATE=--></h3>
+<!--=RC-CHANGES=-->
+</div><!--=END=-->
+<h3><a name=v1.394>What's new in 1.394</a> (2011/01/15)</h3>
 <ul class=image>
   <li class=bug> Parsing poms fails if a module is a path to a pom (and not to a directory)
    (<a href=""http://issues.hudson-ci.org/browse/HUDSON-8445"">issue 8445</a>)
@@ -69,7 +72,6 @@ Upcoming changes</a>
    Maven 3 support : display same logging output as a maven build with the cli
    (<a href=""http://issues.hudson-ci.org/browse/HUDSON-8490"">issue 8490</a>)           
 </ul>
-</div><!--=END=-->
 <h3><a name=v1.393>What's new in 1.393</a> (2011/01/09)</h3>
 <ul class=image>
   <li class=rfe>",updated changelog for release,"""Update changelog to reflect version 1.395 and add release date for 1.394""","The commit message should be:

""Update changelog to reflect new release version 1.395 and add missing changes for version 1.394""","It seems like you're working with a changelog file in HTML format and you're looking for help with a commit message. Based on the context, here's a suggestion for your commit message:

```bash
Update changelog for upcoming version 1.395 and release of version 1.394
```

This commit message indicates that you've made changes to the changelog, specifically for the upcoming version 1.395 and the release of version 1.394. It's always a good idea to make your commit messages descriptive and concise to help others understand the changes you've made.",The commit updates the version of the changelog from 1.394 to 1.395 and fixes HTML tags for better structure.,Model 4
"diff --git a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
index 73c00d3fa2..1208995695 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/CommandEnvironment.java
@@ -166,10 +166,10 @@ public final class CommandEnvironment {
   }
 
   /**
-   * Return an ordered version of the client environment restricted to those variables
-   * whitelisted by the command-line options to be inheritable by actions.
+   * Return an ordered version of the client environment restricted to those variables whitelisted
+   * by the command-line options to be inheritable by actions.
    */
-  private Map<String, String> getCommandlineWhitelistedClientEnv() {
+  public Map<String, String> getWhitelistedClientEnv() {
     Map<String, String> visibleEnv = new TreeMap<>();
     for (String var : visibleClientEnv) {
       String value = clientEnv.get(var);
@@ -426,7 +426,7 @@ public final class CommandEnvironment {
         getCommandId(),
         // TODO(bazel-team): this optimization disallows rule-specified additional dependencies
         // on the client environment!
-        getCommandlineWhitelistedClientEnv(),
+        getWhitelistedClientEnv(),
         timestampGranularityMonitor);
   }
 
diff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
index 0d7fb6abab..b5e596fb88 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoCommand.java
@@ -193,29 +193,31 @@ public class InfoCommand implements BlazeCommand {
 
   static Map<String, InfoItem> getHardwiredInfoItemMap(OptionsProvider commandOptions,
       String productName) {
-    List<InfoItem> hardwiredInfoItems = ImmutableList.<InfoItem>of(
-        new InfoItem.WorkspaceInfoItem(),
-        new InfoItem.InstallBaseInfoItem(),
-        new InfoItem.OutputBaseInfoItem(productName),
-        new InfoItem.ExecutionRootInfoItem(),
-        new InfoItem.OutputPathInfoItem(),
-        new InfoItem.BlazeBinInfoItem(productName),
-        new InfoItem.BlazeGenfilesInfoItem(productName),
-        new InfoItem.BlazeTestlogsInfoItem(productName),
-        new InfoItem.CommandLogInfoItem(),
-        new InfoItem.MessageLogInfoItem(),
-        new InfoItem.ReleaseInfoItem(productName),
-        new InfoItem.ServerPidInfoItem(productName),
-        new InfoItem.PackagePathInfoItem(commandOptions),
-        new InfoItem.UsedHeapSizeInfoItem(),
-        new InfoItem.UsedHeapSizeAfterGcInfoItem(),
-        new InfoItem.CommitedHeapSizeInfoItem(),
-        new InfoItem.MaxHeapSizeInfoItem(),
-        new InfoItem.GcTimeInfoItem(),
-        new InfoItem.GcCountInfoItem(),
-        new InfoItem.DefaultsPackageInfoItem(),
-        new InfoItem.BuildLanguageInfoItem(),
-        new InfoItem.DefaultPackagePathInfoItem(commandOptions));
+    List<InfoItem> hardwiredInfoItems =
+        ImmutableList.<InfoItem>of(
+            new InfoItem.WorkspaceInfoItem(),
+            new InfoItem.InstallBaseInfoItem(),
+            new InfoItem.OutputBaseInfoItem(productName),
+            new InfoItem.ExecutionRootInfoItem(),
+            new InfoItem.OutputPathInfoItem(),
+            new InfoItem.ClientEnv(),
+            new InfoItem.BlazeBinInfoItem(productName),
+            new InfoItem.BlazeGenfilesInfoItem(productName),
+            new InfoItem.BlazeTestlogsInfoItem(productName),
+            new InfoItem.CommandLogInfoItem(),
+            new InfoItem.MessageLogInfoItem(),
+            new InfoItem.ReleaseInfoItem(productName),
+            new InfoItem.ServerPidInfoItem(productName),
+            new InfoItem.PackagePathInfoItem(commandOptions),
+            new InfoItem.UsedHeapSizeInfoItem(),
+            new InfoItem.UsedHeapSizeAfterGcInfoItem(),
+            new InfoItem.CommitedHeapSizeInfoItem(),
+            new InfoItem.MaxHeapSizeInfoItem(),
+            new InfoItem.GcTimeInfoItem(),
+            new InfoItem.GcCountInfoItem(),
+            new InfoItem.DefaultsPackageInfoItem(),
+            new InfoItem.BuildLanguageInfoItem(),
+            new InfoItem.DefaultPackagePathInfoItem(commandOptions));
     ImmutableMap.Builder<String, InfoItem> result = new ImmutableMap.Builder<>();
     for (InfoItem item : hardwiredInfoItems) {
       result.put(item.getName(), item);
diff --git a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
index e8dc77f352..e8836e554f 100644
--- a/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
+++ b/src/main/java/com/google/devtools/build/lib/runtime/commands/InfoItem.java
@@ -46,6 +46,7 @@ import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryMXBean;
 import java.lang.management.MemoryUsage;
 import java.util.Collection;
+import java.util.Map;
 
 /**
  * An item that is returned by <code>blaze info</code>.
@@ -482,6 +483,29 @@ public abstract class InfoItem {
     }
   }
 
+  /** Info item for the effective current client environment. */
+  public static final class ClientEnv extends InfoItem {
+    public ClientEnv() {
+      super(
+          ""client-env"",
+          ""The specifications that need to be added to the project-specific rc file to freeze the""
+              + "" current client environment"",
+          true);
+    }
+
+    @Override
+    public byte[] get(Supplier<BuildConfiguration> configurationSupplier, CommandEnvironment env)
+        throws AbruptExitException {
+      String result = """";
+      for (Map.Entry<String, String> entry : env.getWhitelistedClientEnv().entrySet()) {
+        // TODO(bazel-team): as the syntax of our rc-files does not support to express new-lines in
+        // values, we produce syntax errors if the value of the entry contains a newline character.
+        result += ""common --action_env="" + entry.getKey() + ""="" + entry.getValue() + ""\n"";
+      }
+      return print(result);
+    }
+  }
+
   /**
    * Info item for the default package. It is deprecated, it still works, when
    * explicitly requested, but are not shown by default. It prints multi-line messages and thus
diff --git a/src/test/shell/integration/action_env_test.sh b/src/test/shell/integration/action_env_test.sh
index 017aa892d3..80976ed34b 100755
--- a/src/test/shell/integration/action_env_test.sh
+++ b/src/test/shell/integration/action_env_test.sh
@@ -121,4 +121,26 @@ function test_latest_wins_env() {
   expect_not_log ""FOO=foo""
 }
 
+function test_env_freezing() {
+  cat > .${PRODUCT_NAME}rc <<EOF
+common --action_env=FREEZE_TEST_FOO
+common --action_env=FREEZE_TEST_BAR=is_fixed
+common --action_env=FREEZE_TEST_BAZ=will_be_overridden
+build --action_env=FREEZE_TEST_BUILD
+EOF
+
+  export FREEZE_TEST_FOO=client_foo
+  export FREEZE_TEST_BAR=client_bar
+  export FREEZE_TEST_BAZ=client_baz
+  export FREEZE_TEST_BUILD=client_build
+
+  $bazel info --action_env=FREEZE_TEST_BAZ client-env > $TEST_log
+  expect_log ""common --action_env=FREEZE_TEST_FOO=client_foo""
+  expect_not_log ""FREEZE_TEST_BAR""
+  expect_log ""common --action_env=FREEZE_TEST_BAZ=client_baz""
+  expect_log ""common --action_env=FREEZE_TEST_BUILD=client_build""
+
+  rm -f .${PRODUCT_NAME}rc
+}
+
 run_suite ""Tests for bazel's handling of environment variables in actions""",Add an info item to show the currently inherited client environment .,"""Add 'client-env' info item to display the effective client environment""","""Expose client environment variables in info command and add test for env variable freezing""","""Add ClientEnv InfoItem and use getWhitelistedClientEnv in CommandEnvironment""

This commit introduces a new InfoItem called ClientEnv, which provides information about the effective current client environment. It also modifies the CommandEnvironment class to use the new getWhitelistedClientEnv method instead of the previous getCommandlineWhitelistedClientEnv.

The changes include:

1. Adding the ClientEnv InfoItem to the hardwiredInfoItems list in InfoCommand.java.
2. Implementing the ClientEnv InfoItem in InfoItem.java, which returns the specifications needed to freeze the current client environment.
3. Changing the visibility of getCommandlineWhitelistedClientEnv to public and renaming it to getWhitelistedClientEnv in CommandEnvironment.java.
4. Updating the method call in CommandEnvironment.java to use the new getWhitelistedClientEnv method.

The additional function test_env_freezing in action_env_test.sh seems unrelated to these changes and might be part of another commit or a separate functional change.",Add client environment freezing functionality and expose whitelisted environment variables for actions via Bazel info command.,Model 4
"diff --git a/src/java/org/jivesoftware/messenger/net/SocketConnection.java b/src/java/org/jivesoftware/messenger/net/SocketConnection.java
index b47b4144a..0001ae92a 100644
--- a/src/java/org/jivesoftware/messenger/net/SocketConnection.java
+++ b/src/java/org/jivesoftware/messenger/net/SocketConnection.java
@@ -88,6 +88,8 @@ public class SocketConnection implements Connection {
         }
         try {
             synchronized (writer) {
+                // Register that we started sending data on the connection
+                SocketSendingTracker.getInstance().socketStartedSending(socket);
                 writer.write("" "");
                 writer.flush();
             }
@@ -96,6 +98,10 @@ public class SocketConnection implements Connection {
             Log.warn(""Closing no longer valid connection"" + ""\n"" + this.toString(), e);
             close();
         }
+        finally {
+            // Register that we finished sending data on the connection
+            SocketSendingTracker.getInstance().socketFinishedSending(socket);
+        }
         return !isClosed();
     }
 
@@ -197,6 +203,8 @@ public class SocketConnection implements Connection {
                     }
                     synchronized (writer) {
                         try {
+                            // Register that we started sending data on the connection
+                            SocketSendingTracker.getInstance().socketStartedSending(socket);
                             writer.write(""</stream:stream>"");
                             if (flashClient) {
                                 writer.write('\0');
@@ -204,6 +212,10 @@ public class SocketConnection implements Connection {
                             xmlSerializer.flush();
                         }
                         catch (IOException e) {}
+                        finally {
+                            // Register that we finished sending data on the connection
+                            SocketSendingTracker.getInstance().socketFinishedSending(socket);
+                        }
                     }
                 }
                 catch (Exception e) {
@@ -236,6 +248,8 @@ public class SocketConnection implements Connection {",Added tracking of sending operations .,"""Track socket sending state in SocketConnection""","According to the diff, the commit message should be:

""Added socket sending tracking to SocketConnection""

This commit message accurately describes the changes made in the commit, which involve adding tracking for when a socket starts and finishes sending data.","""Added tracking of data sending on sockets with SocketSendingTracker""

This commit appears to add calls to `SocketSendingTracker.getInstance().socketStartedSending(socket)` before data is written to a socket, and `SocketSendingTracker.getInstance().socketFinishedSending(socket)` after data is written to a socket, in the `SocketConnection` class. This allows the `SocketSendingTracker` to keep track of when data is being sent over a socket. The changes are made in the `write` and `close` methods of the `SocketConnection` class.","""Add SocketSendingTracker to monitor data sending start and end in SocketConnection class.""",Model 1
"diff --git a/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java b/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java
index d883e7e05..4d5200023 100644
--- a/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java
+++ b/src/test/java/io/vertx/core/spi/cluster/ClusterManagerDelegate.java
@@ -112,4 +112,8 @@ public class ClusterManagerDelegate implements ClusterManager {
   public Future<RegistrationListener> registrationListener(String address) {
     return clusterManager.registrationListener(address);
   }
+
+  public ClusterManager unwrap() {
+    return clusterManager;
+  }
 }",Added unwrap method to ClusterManagerDelegate .,"""Added unwrap method to ClusterManagerDelegate""","""Added unwrap method to ClusterManagerDelegate""","""Added unwrap method to ClusterManagerDelegate class""",Added unwrap method to ClusterManagerDelegate to retrieve the underlying ClusterManager instance.,Model 2
"diff --git a/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java b/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java
index 95564889d7..1086f6b178 100644
--- a/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java
+++ b/src/main/src/main/java/org/geoserver/catalog/impl/LocalWorkspaceCatalog.java
@@ -129,14 +129,15 @@ public LayerGroupInfo getLayerGroup(String id) {
 
     @Override
     public LayerGroupInfo getLayerGroupByName(String name) {
-        WorkspaceInfo workspace = LocalWorkspace.get();// may be null
-        LayerGroupInfo lgi;
-        if (null == workspace) {
-            lgi = super.getLayerGroupByName(name);
-        } else {
-            lgi = super.getLayerGroupByName(workspace, name);
+        if (LocalWorkspace.get() != null) {
+            LayerGroupInfo layerGroup = super.getLayerGroupByName(LocalWorkspace.get(), name);
+            if (layerGroup != null) {
+                return wrap(layerGroup);
+            }
+            // else fall back on unqualified lookup
         }
-        return wrap(lgi);
+
+        return wrap(super.getLayerGroupByName(name));
     }
 
     /*
diff --git a/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java b/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java
index ed96c7d3ff..55da669859 100644
--- a/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java
+++ b/src/restconfig/src/main/java/org/geoserver/catalog/rest/LayerGroupResource.java
@@ -86,7 +86,7 @@ protected void handleObjectPut(Object object) throws Exception {
                 + workspace == null ? "", workspace "" + workspace : """");
         
         LayerGroupInfo lg = (LayerGroupInfo) object;
-        LayerGroupInfo original = catalog.getLayerGroupByName( layergroup );
+        LayerGroupInfo original = catalog.getLayerGroupByName(workspace, layergroup );
        
         //ensure not a name change
         if ( lg.getName() != null && !lg.getName().equals( original.getName() ) ) {","restore LocalWorkspaceCatalog . getLayerGroupByName to its original form , have interpreted it wrong , and make sure LayerGroupResource uses the specified workspace .","""Improve LayerGroup lookup by workspace and name""","""Improve workspace fallback behavior in LocalWorkspaceCatalog and LayerGroupResource""","""Update LocalWorkspaceCatalog and LayerGroupResource to use workspace when looking up layer groups by name""

Explanation:
The changes in the code are related to the way layer groups are looked up by name. In the first file, LocalWorkspaceCatalog.java, the method getLayerGroupByName is modified to first check if there is a current LocalWorkspace, and if so, it looks up the layer group using the workspace and name. If there is no current LocalWorkspace, it falls back to looking up the layer group using just the name.

In the second file, LayerGroupResource.java, the method handleObjectPut is modified to look up the original layer group using the workspace and name, instead of just the name.

These changes suggest that the code is being updated to properly handle layer group lookups when a workspace is specified. Therefore, the commit message should reflect this change.",Fix getLayerGroupByName to handle qualified/unqualified names; update lookup logic in LayerGroupResource.,Model 4
"diff --git a/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java b/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java
index 925a741..32a712a 100644
--- a/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java
+++ b/bottomsheet/src/main/java/com/flipboard/bottomsheet/BottomSheetLayout.java
@@ -594,6 +594,10 @@ public class BottomSheetLayout extends FrameLayout {
                 int newSheetViewHeight = sheetView.getMeasuredHeight();
                 if (state != State.HIDDEN) {
                     if (newSheetViewHeight < currentSheetViewHeight) {
+                        // The sheet can no longer be in the expanded state if it has shrunk
+",Evaluate state if sheetView shrinks while expanded,"""Prevent bottom sheet from remaining in expanded state after shrinking""",Prevent sheet from expanding if it has shrunk.,"""Prevent bottom sheet from being in expanded state if it has shrunk""

This commit message describes the change made in the code, where a check has been added to ensure that the bottom sheet cannot be in the expanded state if its height has decreased. This is done by comparing the new measured height of the sheet view with its current height, and if the new height is less, the sheet state is not set to State.EXPANDED.",Prevent sheet from remaining in expanded state if its height decreases.,Model 1
"diff --git a/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java b/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java
new file mode 100644
index 0000000000..7da1d284b5
--- /dev/null
+++ b/clients/java/src/test/java/com/thoughtworks/selenium/TestSomeStuff.java
@@ -0,0 +1,13 @@
+package com.thoughtworks.selenium;
+
+public class TestSomeStuff extends SeleneseTestCase {
+    public void testTextArea() throws Throwable {
+        selenium.setContext(""Test text area"", ""error"");
+        selenium.open(""/selenium-server/tests/html/test_verifications.html"");
+        String s = selenium.getText(""theTextarea"");
+        boolean b = ""Line 1\nLine 2"".equals(s)  // IE
+        || ""Line 1 Line 2"".equals(s);           // firefox
+        assertTrue(""text area"", b);
+        System.out.println(s);
+    }
+}",add a textarea test .,"""Added test case for text area verification in TestSomeStuff.java""",Added test for text area functionality in Selenium tests.,"""Added TestSomeStuff class to test text area functionality in Selenium""

Explanation:

* The diff shows a new file `TestSomeStuff.java` being added to the `com/thoughtworks/selenium` package.
* The file contains a single test case `testTextArea()` that tests the functionality of a text area in a web page using Selenium.
* The test case checks whether the text area contains the expected text by comparing it with a string that includes a line break (for IE) or no line break (for Firefox).
* The test case also prints the actual text from the text area for debugging purposes.

Therefore, the commit message should reflect the addition of a new test case for text area functionality in Selenium.","""Add TestSomeStuff.java to test textarea content on different browsers (IE and Firefox) using Selenium.""",Model 2
"diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java
index 347cbf93e8..214daf54c1 100644
--- a/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/skyframe/CollectPackagesUnderDirectoryFunction.java
@@ -19,7 +19,6 @@ import com.google.common.collect.Iterables;
 import com.google.devtools.build.lib.analysis.BlazeDirectories;
 import com.google.devtools.build.lib.cmdline.RepositoryName;
 import com.google.devtools.build.lib.packages.NoSuchPackageException;
-import com.google.devtools.build.lib.packages.Package;
 import com.google.devtools.build.lib.skyframe.RecursivePkgValue.RecursivePkgKey;
 import com.google.devtools.build.lib.vfs.PathFragment;
 import com.google.devtools.build.lib.vfs.RootedPath;
@@ -49,15 +48,16 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {
   }
 
   private class MyTraversalFunction
-      extends RecursiveDirectoryTraversalFunction<MyVisitor, CollectPackagesUnderDirectoryValue> {
+      extends RecursiveDirectoryTraversalFunction<
+          MyPackageDirectoryConsumer, CollectPackagesUnderDirectoryValue> {
 
     private MyTraversalFunction() {
       super(directories);
     }
 
     @Override
-    protected MyVisitor getInitialVisitor() {
-      return new MyVisitor();
+    protected MyPackageDirectoryConsumer getInitialConsumer() {
+      return new MyPackageDirectoryConsumer();
     }
 
     @Override
@@ -71,7 +71,7 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {
 
     @Override
     protected CollectPackagesUnderDirectoryValue aggregateWithSubdirectorySkyValues(
-        MyVisitor visitor, Map<SkyKey, SkyValue> subdirectorySkyValues) {
+        MyPackageDirectoryConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues) {
       // Aggregate the child subdirectory package state.
       ImmutableMap.Builder<RootedPath, Boolean> builder = ImmutableMap.builder();
       for (SkyKey key : subdirectorySkyValues.keySet()) {
@@ -91,30 +91,30 @@ public class CollectPackagesUnderDirectoryFunction implements SkyFunction {
         builder.put(recursivePkgKey.getRootedPath(), packagesOrErrorsInSubdirectory);
       }
       ImmutableMap<RootedPath, Boolean> subdirectories = builder.build();
-      String errorMessage = visitor.getErrorMessage();
+      String errorMessage = consumer.getErrorMessage();
       if (errorMessage != null) {
         return CollectPackagesUnderDirectoryValue.ofError(errorMessage, subdirectories);
       }
       return CollectPackagesUnderDirectoryValue.ofNoError(
-          visitor.isDirectoryPackage(), subdirectories);
+          consumer.isDirectoryPackage(), subdirectories);
     }
   }
 
-  private static class MyVisitor implements RecursiveDirectoryTraversalFunction.Visitor {
+  private static class MyPackageDirectoryConsumer
+      implements RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer {
 
     private boolean isDirectoryPackage;
     @Nullable private String errorMessage;
 
-    private MyVisitor() {}
+    private MyPackageDirectoryConsumer() {}
 
     @Override
-    public void visitPackageValue(Package pkg, Environment env) {
+    public void notePackage(PathFragment pkgPath) {
       isDirectoryPackage = true;
     }
 
     @Override
-    public void visitPackageError(NoSuchPackageException e, Environment env)
-        throws InterruptedException {
+    public void notePackageError(NoSuchPackageException e) {
       errorMessage = e.getMessage();
     }
 
diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java
index fcdccbd04a..f72e436f02 100644
--- a/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/skyframe/RecursiveDirectoryTraversalFunction.java
@@ -40,7 +40,7 @@ import java.util.Map;
  * customized by classes that derive from it.
  */
 abstract class RecursiveDirectoryTraversalFunction<
-    TVisitor extends RecursiveDirectoryTraversalFunction.Visitor, TReturn> {
+    TConsumer extends RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer, TReturn> {
 
   private final ProcessPackageDirectory processPackageDirectory;
 
@@ -61,12 +61,12 @@ abstract class RecursiveDirectoryTraversalFunction<
   }
 
   /**
-   * Called by {@link #visitDirectory}, which will next call {@link Visitor#visitPackageValue} if
-   * the {@code recursivePkgKey} specifies a directory with a package, and which will lastly be
-   * provided to {@link #aggregateWithSubdirectorySkyValues} to compute the {@code TReturn} value
-   * returned by {@link #visitDirectory}.
+   * Called by {@link #visitDirectory}, which will next call {@link
+   * PackageDirectoryConsumer#notePackage} if the {@code recursivePkgKey} specifies a directory with
+   * a package, and which will lastly be provided to {@link #aggregateWithSubdirectorySkyValues} to
+   * compute the {@code TReturn} value returned by {@link #visitDirectory}.
    */
-  protected abstract TVisitor getInitialVisitor();
+  protected abstract TConsumer getInitialConsumer();
 
   /**
    * Called by {@link #visitDirectory} to get the {@link SkyKey}s associated with recursive
@@ -80,29 +80,22 @@ abstract class RecursiveDirectoryTraversalFunction<
 
   /**
    * Called by {@link #visitDirectory} to compute the {@code TReturn} value it returns, as a
-   * function of {@code visitor} and the {@link SkyValue}s computed for subdirectories
-   * of the directory specified by {@code recursivePkgKey}, contained in
-   * {@code subdirectorySkyValues}.
+   * function of {@code consumer} and the {@link SkyValue}s computed for subdirectories of the
+   * directory specified by {@code recursivePkgKey}, contained in {@code subdirectorySkyValues}.
    */
   protected abstract TReturn aggregateWithSubdirectorySkyValues(
-      TVisitor visitor, Map<SkyKey, SkyValue> subdirectorySkyValues);
+      TConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues);
 
   /**
-   * A type of value used by {@link #visitDirectory} as it checks for a package in the directory
-   * specified by {@code recursivePkgKey}; if such a package exists, {@link #visitPackageValue}
-   * is called.
+   * A type of consumer used by {@link #visitDirectory} as it checks for a package in the directory
+   * specified by {@code recursivePkgKey}; if such a package exists, {@link #notePackage} is called.
    *
-   * <p>The value is then provided to {@link #aggregateWithSubdirectorySkyValues} to compute the
+   * <p>The consumer is then provided to {@link #aggregateWithSubdirectorySkyValues} to compute the
    * value returned by {@link #visitDirectory}.
    */
-  interface Visitor {
-
-    /**
-     * Called iff the directory contains a package. Provides an {@link Environment} {@code env} so
-     * that the visitor may do additional lookups. {@link Environment#valuesMissing} will be checked
-     * afterwards.
-     */
-    void visitPackageValue(Package pkg, Environment env) throws InterruptedException;
+  interface PackageDirectoryConsumer {
+    /** Called iff the directory contains a package. */
+    void notePackage(PathFragment pkgPath) throws InterruptedException;
 
     /**
      * Called iff the directory contains a BUILD file but *not* a package, which can happen under
@@ -114,19 +107,19 @@ abstract class RecursiveDirectoryTraversalFunction<
      *       cycle
      * </ol>
      */
-    void visitPackageError(NoSuchPackageException e, Environment env) throws InterruptedException;
+    void notePackageError(NoSuchPackageException e);
   }
 
   /**
    * Looks in the directory specified by {@code recursivePkgKey} for a package, does some work as
-   * specified by {@link Visitor} if such a package exists, then recursively does work in each
-   * non-excluded subdirectory as specified by {@link #getSkyKeyForSubdirectory}, and finally
-   * aggregates the {@link Visitor} value along with values from each subdirectory as specified by
-   * {@link #aggregateWithSubdirectorySkyValues}, and returns that aggregation.
+   * specified by {@link PackageDirectoryConsumer} if such a package exists, then recursively does
+   * work in each non-excluded subdirectory as specified by {@link #getSkyKeyForSubdirectory}, and
+   * finally aggregates the {@link PackageDirectoryConsumer} value along with values from each
+   * subdirectory as specified by {@link #aggregateWithSubdirectorySkyValues}, and returns that
+   * aggregation.
    *
    * <p>Returns null if {@code env.valuesMissing()} is true, checked after each call to one of
    * {@link RecursiveDirectoryTraversalFunction}'s abstract methods that were given {@code env}.
-   * (And after each of {@code visitDirectory}'s own uses of {@code env}, of course.)
    */
   TReturn visitDirectory(RecursivePkgKey recursivePkgKey, Environment env)
       throws InterruptedException {
@@ -140,7 +133,7 @@ abstract class RecursiveDirectoryTraversalFunction<
 
     Iterable<SkyKey> childDeps = packageExistenceAndSubdirDeps.getChildDeps();
 
-    TVisitor visitor = getInitialVisitor();
+    TConsumer consumer = getInitialConsumer();
 
     Map<SkyKey, SkyValue> subdirectorySkyValues;
     if (packageExistenceAndSubdirDeps.packageExists()) {
@@ -155,28 +148,22 @@ abstract class RecursiveDirectoryTraversalFunction<
       if (env.valuesMissing()) {
         return null;
       }
-      Package pkg = null;
       try {
         PackageValue pkgValue = (PackageValue) dependentSkyValues.get(packageKey).get();
         if (pkgValue == null) {
           return null;
         }
-        pkg = pkgValue.getPackage();
+        Package pkg = pkgValue.getPackage();
         if (pkg.containsErrors()) {
           env.getListener()
               .handle(Event.error(""package contains errors: "" + rootRelativePath.getPathString()));
         }
+        consumer.notePackage(rootRelativePath);
       } catch (NoSuchPackageException e) {
         // The package had errors, but don't fail-fast as there might be subpackages below the
         // current directory.
         env.getListener().handle(Event.error(e.getMessage()));
-        visitor.visitPackageError(e, env);
-        if (env.valuesMissing()) {
-          return null;
-        }
-      }
-      if (pkg != null) {
-        visitor.visitPackageValue(pkg, env);
+        consumer.notePackageError(e);
         if (env.valuesMissing()) {
           return null;
         }
@@ -198,6 +185,6 @@ abstract class RecursiveDirectoryTraversalFunction<
     if (env.valuesMissing()) {
       return null;
     }
-    return aggregateWithSubdirectorySkyValues(visitor, subdirectorySkyValues);
+    return aggregateWithSubdirectorySkyValues(consumer, subdirectorySkyValues);
   }
 }
diff --git a/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java b/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java
index 58f79be753..8430c286a5 100644
--- a/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/skyframe/RecursivePkgFunction.java
@@ -20,7 +20,6 @@ import com.google.devtools.build.lib.collect.nestedset.NestedSet;
 import com.google.devtools.build.lib.collect.nestedset.NestedSetBuilder;
 import com.google.devtools.build.lib.collect.nestedset.Order;
 import com.google.devtools.build.lib.packages.NoSuchPackageException;
-import com.google.devtools.build.lib.packages.Package;
 import com.google.devtools.build.lib.skyframe.RecursivePkgValue.RecursivePkgKey;
 import com.google.devtools.build.lib.vfs.PathFragment;
 import com.google.devtools.build.lib.vfs.RootedPath;
@@ -51,15 +50,15 @@ public class RecursivePkgFunction implements SkyFunction {
   }
 
   private class MyTraversalFunction
-      extends RecursiveDirectoryTraversalFunction<MyVisitor, RecursivePkgValue> {
+      extends RecursiveDirectoryTraversalFunction<MyPackageDirectoryConsumer, RecursivePkgValue> {
 
     private MyTraversalFunction() {
       super(directories);
     }
 
     @Override
-    protected MyVisitor getInitialVisitor() {
-      return new MyVisitor();
+    protected MyPackageDirectoryConsumer getInitialConsumer() {
+      return new MyPackageDirectoryConsumer();
     }
 
     @Override
@@ -70,28 +69,28 @@ public class RecursivePkgFunction implements SkyFunction {
     }
 
     @Override
-    protected RecursivePkgValue aggregateWithSubdirectorySkyValues(MyVisitor visitor,
-        Map<SkyKey, SkyValue> subdirectorySkyValues) {
+    protected RecursivePkgValue aggregateWithSubdirectorySkyValues(
+        MyPackageDirectoryConsumer consumer, Map<SkyKey, SkyValue> subdirectorySkyValues) {
       // Aggregate the transitive subpackages.
       for (SkyValue childValue : subdirectorySkyValues.values()) {
-        visitor.addTransitivePackages(((RecursivePkgValue) childValue).getPackages());
+        consumer.addTransitivePackages(((RecursivePkgValue) childValue).getPackages());
       }
-      return visitor.createRecursivePkgValue();
+      return consumer.createRecursivePkgValue();
     }
   }
 
-  private static class MyVisitor implements RecursiveDirectoryTraversalFunction.Visitor {
+  private static class MyPackageDirectoryConsumer
+      implements RecursiveDirectoryTraversalFunction.PackageDirectoryConsumer {
 
     private final NestedSetBuilder<String> packages = new NestedSetBuilder<>(Order.STABLE_ORDER);
 
     @Override
-    public void visitPackageValue(Package pkg, Environment env) {
-      packages.add(pkg.getName());
+    public void notePackage(PathFragment pkgPath) {
+      packages.add(pkgPath.getPathString());
     }
 
     @Override
-    public void visitPackageError(NoSuchPackageException e, Environment env)
-        throws InterruptedException {
+    public void notePackageError(NoSuchPackageException e) {
       // Nothing to do because the RecursiveDirectoryTraversalFunction has already emitted an error
       // event.
     }","Simplify RecursiveDirectoryTraversalFunction : neither of its use cases were using the env variable passed into their visitors \' methods , which means that we can stop passing them , and simplify the code a bit . . Just a cleanup I noticed . . PiperOrigi","""Refactor RecursiveDirectoryTraversalFunction to use PackageDirectoryConsumer instead of Visitor""","""Replace Visitor with PackageDirectoryConsumer in RecursiveDirectoryTraversalFunction and its subclasses""","""Refactor CollectPackagesUnderDirectoryFunction and RecursivePkgFunction to use PackageDirectoryConsumer instead of Visitor in RecursiveDirectoryTraversalFunction""

This commit appears to refactor the `CollectPackagesUnderDirectoryFunction` and `RecursivePkgFunction` classes to use a new `PackageDirectoryConsumer` interface instead of the `Visitor` interface in the `RecursiveDirectoryTraversalFunction` class. The `MyVisitor` inner classes in both `CollectPackagesUnderDirectoryFunction` and `RecursivePkgFunction` have been renamed to `MyPackageDirectoryConsumer`, and their methods have been updated to match the new interface. The `RecursiveDirectoryTraversalFunction` class has also been updated to use the new `PackageDirectoryConsumer` interface.",Refactor to rename Visitor to PackageDirectoryConsumer in RecursiveDirectoryTraversalFunction and related classes.,Model 4
"diff --git a/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java b/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java
new file mode 100644
index 00000000..86fc0540
--- /dev/null
+++ b/hystrix-contrib/hystrix-yammer-metrics-publisher/src/main/java/com/netflix/hystrix/contrib/yammermetricspublisher/HystrixYammerMetricsPublisherCollapser.java
@@ -0,0 +1,202 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.netflix.hystrix.contrib.yammermetricspublisher;
+
+import com.netflix.hystrix.HystrixCollapserKey;
+import com.netflix.hystrix.HystrixCollapserMetrics;
+import com.netflix.hystrix.HystrixCollapserProperties;
+import com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherCollapser;
+import com.netflix.hystrix.util.HystrixRollingNumberEvent;
+import com.yammer.metrics.core.Gauge;
+import com.yammer.metrics.core.MetricName;
+import com.yammer.metrics.core.MetricsRegistry;
+
+/**
+ * Implementation of {@link HystrixMetricsPublisherCollapser} using Yammer Metrics
+ */
+public class HystrixYammerMetricsPublisherCollapser implements HystrixMetricsPublisherCollapser {
+    private final HystrixCollapserKey key;
+    private final HystrixCollapserMetrics metrics;
+    private final HystrixCollapserProperties properties;
+    private final MetricsRegistry metricsRegistry;
+    private final String metricType;
+
+    public HystrixYammerMetricsPublisherCollapser(HystrixCollapserKey collapserKey, HystrixCollapserMetrics metrics, HystrixCollapserProperties properties, MetricsRegistry metricsRegistry) {
+        this.key = collapserKey;
+        this.metrics = metrics;
+        this.properties = properties;
+        this.metricsRegistry = metricsRegistry;
+        this.metricType = key.name();
+    }
+
+    @Override
+    public void initialize() {
+        // allow monitor to know exactly at what point in time these stats are for so they can be plotted accurately
+        metricsRegistry.newGauge(createMetricName(""currentTime""), new Gauge<Long>() {
+            @Override
+            public Long value() {
+                return System.currentTimeMillis();
+            }
+        });
+
+        // cumulative counts
+        createCumulativeCountForEvent(""countRequestsBatched"", HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED);
+        createCumulativeCountForEvent(""countBatches"", HystrixRollingNumberEvent.COLLAPSER_BATCH);
+        createCumulativeCountForEvent(""countResponsesFromCache"", HystrixRollingNumberEvent.RESPONSE_FROM_CACHE);
+
+        // rolling counts
+        createRollingCountForEvent(""rollingRequestsBatched"", HystrixRollingNumberEvent.COLLAPSER_REQUEST_BATCHED);
+        createRollingCountForEvent(""rollingBatches"", HystrixRollingNumberEvent.COLLAPSER_BATCH);
+        createRollingCountForEvent(""rollingCountResponsesFromCache"", HystrixRollingNumberEvent.RESPONSE_FROM_CACHE);
+
+        // batch size metrics
+        metricsRegistry.newGauge(createMetricName(""batchSize_mean""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizeMean();
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_25""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(25);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_50""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(50);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_75""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(75);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_90""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(90);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_99""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(99);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""batchSize_percentile_995""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getBatchSizePercentile(99.5);
+            }
+        });
+
+        // shard size metrics
+        metricsRegistry.newGauge(createMetricName(""shardSize_mean""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizeMean();
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_25""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(25);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_50""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(50);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_75""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(75);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_90""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(90);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_99""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(99);
+            }
+        });
+        metricsRegistry.newGauge(createMetricName(""shardSize_percentile_995""), new Gauge<Integer>() {
+            @Override
+            public Integer value() {
+                return metrics.getShardSizePercentile(99.5);
+            }
+        });
+
+        // properties (so the values can be inspected and monitored)
+        metricsRegistry.newGauge(createMetricName(""propertyValue_rollingStatisticalWindowInMilliseconds""), new Gauge<Number>() {
+            @Override
+            public Number value() {
+                return properties.metricsRollingStatisticalWindowInMilliseconds().get();
+            }
+        });
+
+        metricsRegistry.newGauge(createMetricName(""propertyValue_requestCacheEnabled""), new Gauge<Boolean>() {
+            @Override
+            public Boolean value() {
+                return properties.requestCacheEnabled().get();
+            }
+        });
+
+        metricsRegistry.newGauge(createMetricName(""propertyValue_maxRequestsInBatch""), new Gauge<Number>() {
+            @Override
+            public Number value() {
+                return properties.maxRequestsInBatch().get();
+            }
+        });
+
+        metricsRegistry.newGauge(createMetricName(""propertyValue_timerDelayInMilliseconds""), new Gauge<Number>() {
+            @Override
+            public Number value() {
+",Added RequestCollapser metrics to Yammer Metrics Publisher,"""Added HystrixYammerMetricsPublisherCollapser implementation for publishing Hystrix collapser metrics using Yammer Metrics""",Added HystrixYammerMetricsPublisherCollapser implementation for Yammer Metrics.,"""Added HystrixYammerMetricsPublisherCollapser class for implementing HystrixMetricsPublisherCollapser using Yammer Metrics.""

This new file is an implementation of the HystrixMetricsPublisherCollapser interface using Yammer Metrics. It creates and registers various metrics gauges for Hystrix Collapser, including cumulative counts, rolling counts, batch size metrics, shard size metrics, and property values. The class is initialized with a HystrixCollapserKey, HystrixCollapserMetrics, HystrixCollapserProperties, and MetricsRegistry objects, and the metric type is set to the name of the collapser key. The initialize() method is called to register all the gauges with the MetricsRegistry.",Added HystrixYammerMetricsPublisherCollapser for publishing Hystrix collapser metrics using Yammer Metrics library.,Model 1
"diff --git a/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java b/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java
index 0cd62ec80..a4e4762e6 100644
--- a/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java
+++ b/plugins/jdbcCloudClient/src/java/edu/umd/cs/findbugs/cloud/db/DBCloud.java
@@ -1836,7 +1836,25 @@ public class DBCloud extends AbstractCloud implements OnlineCloud {
     }
 
     public boolean isInCloud(BugInstance b) {
-        return instanceMap.get(b.getInstanceHash()).inDatabase;
+    	if (b == null)
+    		throw new NullPointerException(""null bug"");
+        String instanceHash = b.getInstanceHash();
+		BugData bugData = instanceMap.get(instanceHash);
+		return bugData != null && bugData.inDatabase;
+    }
+
+    @Override
+    public String notInCloudeMsg(BugInstance b) {
+    	if (isInCloud(b)) {
+    		assert false;
+    		return ""Is in cloud"";
+    	}
+    	int rank = BugRanker.findRank(b);
+		if (rank > MAX_DB_RANK) 
+    		return 
+    		String.format(""This issue is rank %d, only issues up to rank %d are recorded in the cloud"",
+    				rank, MAX_DB_RANK);
+		return ""Issue is not recorded in cloud"";
     }
 
     public boolean isOnlineCloud() {",generate a more specific msg when an issue is not persisted to the cloud .,"""Improve isInCloud method and add notInCloudMsg method in DBCloud class""

Or, in a more detailed and conventional commit message format:

""Improve bug instance cloud check and add not in cloud message

Enhance the isInCloud method to handle null bug instances and add a new notInCloudMsg method to provide a descriptive message when a bug instance is not in the cloud.""","""Added null check and improved isInCloud and notInCloud methods in DBCloud class""","""Added null check for bug instance and implemented notInCloudMsg method in DBCloud class""

This commit includes the following changes:

1. A null check for the `BugInstance` object `b` has been added in the `isInCloud` method. If `b` is null, a `NullPointerException` with the message ""null bug"" is thrown.

2. The `isInCloud` method has been modified to first get the `BugData` object associated with the `instanceHash` of the `BugInstance`. If the `BugData` object is not null, the method checks if the `inDatabase` field of the `BugData` object is true and returns the result.

3. The `notInCloudMsg` method has been implemented. This method checks if the `BugInstance` is in the cloud using the `isInCloud` method. If the `BugInstance` is in the cloud, the method returns ""Is in cloud"". If the `BugInstance` is not in the cloud, the method checks the rank of the `BugInstance`. If the rank is greater than `MAX_DB_RANK`, the method returns a formatted string indicating that only issues up to a certain rank are recorded in the cloud. If the rank is less than or equal to `MAX_DB_RANK`, the method returns ""Issue is not recorded in cloud"".",Improve `isInCloud` and add `notInCloudeMsg` method for better bug instance handling and messaging in `DBCloud`.,Model 4
"diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index bc4aa7ad8..8c7680cef 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -460,7 +460,7 @@ public final class IntegrationTest extends IntegrationTestCase {
   public void testBug31448683() {
     CompilerOptions options = createCompilerOptions();
     WarningLevel.QUIET.setOptionsForWarningLevel(options);
-    options.setInlineFunctions(true);
+    options.setInlineFunctions(Reach.ALL);
     test(
         options,
         LINE_JOINER.join(
@@ -2444,7 +2444,7 @@ public final class IntegrationTest extends IntegrationTestCase {
     String code = ""function f() { return 3; } f(); "";
     testSame(options, code);
 
-    options.setInlineFunctions(true);
+    options.setInlineFunctions(Reach.ALL);
     test(options, code, ""3;"");
   }
 
@@ -2808,7 +2808,7 @@ public final class IntegrationTest extends IntegrationTestCase {
   // https://github.com/google/closure-compiler/issues/2388
   public void testNoCrash_varInCatch() {
     CompilerOptions options = createCompilerOptions();
-    options.setInlineFunctions(true);
+    options.setInlineFunctions(Reach.ALL);
 
     test(
         options,
@@ -4524,7 +4524,7 @@ public final class IntegrationTest extends IntegrationTestCase {
 
   public void testMaxFunSizeAfterInliningUsage() {
     CompilerOptions options = new CompilerOptions();
-    options.setInlineFunctions(false);
+    options.setInlineFunctions(Reach.NONE);
     options.setMaxFunctionSizeAfterInlining(1);
     try {
       test(options, """", """");",Remove the last few references to setInlineFunctions ( boolean ) .,"""Update inlineFunctions option to use Reach enum in IntegrationTest""","""Update inline functions behavior in IntegrationTest.java to use Reach.ALL by default and Reach.NONE for maxFunSizeAfterInlining test.""","""Updated IntegrationTest.java to use Reach.ALL or Reach.NONE for setInlineFunctions""

This commit changes the way the CompilerOptions are set in the IntegrationTest.java file. Specifically, it replaces instances of `options.setInlineFunctions(true)` with `options.setInlineFunctions(Reach.ALL)` and `options.setInlineFunctions(false)` with `options.setInlineFunctions(Reach.NONE)`. The Reach parameter specifies the scope of functions that should be considered for inlining. Reach.ALL includes all functions, while Reach.NONE excludes all functions. This change may affect how the compiler inline functions and could potentially impact the performance or behavior of the compiled code.",Refactor `setInlineFunctions` to use `Reach` enum for better function inlining control in IntegrationTest.java.,Model 4
"diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java
index a0ee7029266..df419ceebea 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/factory/EditionModule.java
@@ -262,7 +262,7 @@ public abstract class EditionModule
         return new BufferedIdController( idGeneratorFactory, scheduler );
     }
 
-    private DefaultIdController createDefaultIdController()
+    protected DefaultIdController createDefaultIdController()
     {
         return new DefaultIdController();
     }
diff --git a/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java b/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java
index 4938ef2766c..7fad82cc4ff 100644
--- a/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java
+++ b/enterprise/causal-clustering/src/main/java/org/neo4j/causalclustering/readreplica/EnterpriseReadReplicaEditionModule.java
@@ -144,6 +144,7 @@ public class EnterpriseReadReplicaEditionModule extends EditionModule
         idTypeConfigurationProvider = new EnterpriseIdTypeConfigurationProvider( config );
         idGeneratorFactory = dependencies
                 .satisfyDependency( new DefaultIdGeneratorFactory( fileSystem, idTypeConfigurationProvider ) );
+        idController = createDefaultIdController();
         dependencies.satisfyDependency( new IdBasedStoreEntityCounters( this.idGeneratorFactory ) );
 
         propertyKeyTokenHolder = life.add(",Initialize id controller in replica edition .,"""Change visibility of createDefaultIdController method to protected""

This commit message accurately reflects the change made in the EditionModule class, where the visibility of the createDefaultIdController method was changed from private to protected.","Based on the provided diff, the commit message could be:

""Make idController creation in EnterpriseReadReplicaEditionModule explicit and add protected method to EditionModule for default id controller creation""

However, a more concise and conventional commit message would be:

""Make idController creation explicit in EnterpriseReadReplicaEditionModule""

This commit message directly addresses the main change introduced by the commit, which is making the creation of `idController` explicit in `EnterpriseReadReplicaEditionModule`.","""Make idController creation method protected in EditionModule and initialize it in EnterpriseReadReplicaEditionModule""

Explanation:
The commit changes the access modifier of the method `createDefaultIdController()` from private to protected in the `EditionModule` class, allowing it to be accessed by its subclasses. Then, in the `EnterpriseReadReplicaEditionModule` class, it initializes the `idController` field using this method.",Made `createDefaultIdController` protected in `EditionModule` and utilized it in `EnterpriseReadReplicaEditionModule`.,Model 1
"diff --git a/src/main/java/org/mybatis/spring/SqlSessionUtils.java b/src/main/java/org/mybatis/spring/SqlSessionUtils.java
index b5521b7c..4c53a102 100644
--- a/src/main/java/org/mybatis/spring/SqlSessionUtils.java
+++ b/src/main/java/org/mybatis/spring/SqlSessionUtils.java
@@ -65,41 +65,8 @@ public final class SqlSessionUtils {
      *             {@literal SqlSessionFactory} is not using a {@literal SpringManagedTransactionFactory}
      */
     public static SqlSession getSqlSession(SqlSessionFactory sqlSessionFactory) {
-        DataSource dataSource = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource();
         ExecutorType executorType = sqlSessionFactory.getConfiguration().getDefaultExecutorType();
-        return getSqlSession(sqlSessionFactory, dataSource, executorType);
-    }
-
-    /**
-     * Creates a new MyBatis {@link SqlSession} with a different {@link DataSource} than
-     * the one holden into {@link SqlSessionFactory}. 
-     * It is just for testing purposes. Using this can cause runtime errors.
-     *
-     * @param sessionFactory a MyBatis {@literal SqlSessionFactory} to create new sessions
-     * @param dataSource overrides MyBatis {@literal SqlSessionFactory} {@literal DataSource}
-     * @return a MyBatis {@literal SqlSession}
-     * @throws TransientDataAccessResourceException if a transaction is active and the
-     *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}
-     */
-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, DataSource dataSource) {
-        ExecutorType executorType = sessionFactory.getConfiguration().getDefaultExecutorType();
-        return getSqlSession(sessionFactory, dataSource, executorType);
-    }
-
-    /**
-     * Creates a new MyBatis {@link SqlSession} from the provided {@link SqlSessionFactory}
-     * using the {@link ExecutorType} provided as an argument and the {@link DataSource}
-     * configured in the {@link SqlSessionFactory}
-     *
-     * @param sessionFactory a MyBatis {@literal SqlSessionFactory} to create new sessions
-     * @param executorType type of executor to use BATCH, REUSE, SIMPLE..
-     * @return
-     * @throws TransientDataAccessResourceException if a transaction is active and the
-     *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}
-     */
-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType) {
-        DataSource dataSource = sessionFactory.getConfiguration().getEnvironment().getDataSource();
-        return getSqlSession(sessionFactory, dataSource, executorType);
+        return getSqlSession(sqlSessionFactory, executorType);
     }
 
     /**
@@ -113,7 +80,7 @@ public final class SqlSessionUtils {
      *             {@link SqlSessionFactory} is not using a {@link SpringManagedTransactionFactory}
      * @see org.mybatis.spring.transaction.SpringManagedTransactionFactory
      */
-    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, DataSource dataSource, ExecutorType executorType) {
+    public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType) {
         // either return the existing SqlSession or create a new one
         SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);
 
@@ -131,6 +98,7 @@ public final class SqlSessionUtils {
             return holder.getSqlSession();
         }
 
+        DataSource dataSource = sessionFactory.getConfiguration().getEnvironment().getDataSource();
         boolean transactionAware = (dataSource instanceof TransactionAwareDataSourceProxy);
         Connection conn;
 
diff --git a/src/test/java/org/mybatis/spring/MyBatisSpringTest.java b/src/test/java/org/mybatis/spring/MyBatisSpringTest.java
index a056b375..eafcd572 100644
--- a/src/test/java/org/mybatis/spring/MyBatisSpringTest.java
+++ b/src/test/java/org/mybatis/spring/MyBatisSpringTest.java
@@ -15,9 +15,6 @@
  */
 package org.mybatis.spring;
 
-import org.junit.Test;
-import org.junit.After;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.fail;
@@ -25,11 +22,13 @@ import static org.junit.Assert.fail;
 import org.apache.ibatis.mapping.Environment;
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.session.SqlSession;
-
+import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
-
+import org.junit.After;
+import org.junit.Test;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.Resource;
 import org.springframework.dao.TransientDataAccessResourceException;
-
 import org.springframework.transaction.TransactionStatus;
 import org.springframework.transaction.support.DefaultTransactionDefinition;
 
@@ -134,7 +133,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
     @Test
     public void testWithSameDataSource() {
         // use the same DataSource the SqlSession is configured with
-        session = SqlSessionUtils.getSqlSession(sqlSessionFactory, dataSource);
+        session = SqlSessionUtils.getSqlSession(sqlSessionFactory);
         session.getMapper(TestMapper.class).findTest();
         SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);
 
@@ -142,28 +141,6 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
         assertSingleConnection();
     }
 
-    @Test
-    public void testWithDifferentDataSource() {
-        try {
-            CountingMockDataSource ds = new CountingMockDataSource();
-            ds.setupConnection(createMockConnection());
-
-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);
-            session.getMapper(TestMapper.class).findTest();
-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);
-
-            assertNoCommit();
-            assertEquals(""should only call DataSource.getConnection() once"", 1, ds.getConnectionCount());
-            assertEquals(""should not call DataSource.getConnection() on SqlSession DataSource"", 0, dataSource
-                    .getConnectionCount());
-            assertConnectionClosed(ds.getMockConnection());
-        } finally {
-            // null the connection since it was not used
-            // this avoids failing in validateConnectionClosed()
-            connection = null;
-        }
-    }
-
     // Spring API should work with a MyBatis TransactionFactories, as long as there is not a Spring
     // TX is progress
     @Test
@@ -271,24 +248,31 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
         final PooledMockDataSource ds = new PooledMockDataSource();
         ds.addConnection(connection1);
         ds.addConnection(connection2);
-
+        
+        // session not in existing tx, should use first connection
+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();
+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(""org/mybatis/spring/TestMapper.xml"") });
+        sfb1.setDataSource(ds);
+  
+        SqlSessionFactory sf1 = sfb1.getObject();
+  
         try {
             txManager.setDataSource(ds);
             TransactionStatus status = txManager.getTransaction(new DefaultTransactionDefinition());
 
-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);
+            session = SqlSessionUtils.getSqlSession(sf1);
 
             // start a new tx while the other is in progress
             DefaultTransactionDefinition txRequiresNew = new DefaultTransactionDefinition();
             txRequiresNew.setPropagationBehaviorName(""PROPAGATION_REQUIRES_NEW"");
             TransactionStatus status2 = txManager.getTransaction(txRequiresNew);
 
-            SqlSession session2 = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds, ExecutorType.BATCH);
+            SqlSession session2 = SqlSessionUtils.getSqlSession(sf1, ExecutorType.BATCH);
 
-            SqlSessionUtils.closeSqlSession(session2, sqlSessionFactory);
+            SqlSessionUtils.closeSqlSession(session2, sf1);
             txManager.rollback(status2);
 
-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);
+            SqlSessionUtils.closeSqlSession(session, sf1);
             txManager.rollback(status);
 
         } finally {
@@ -298,6 +282,9 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
             // null the connection since it was not used
             // this avoids failing in validateConnectionClosed()
             connection = null;
+            
+            // Don't check if session is closed?
+            session = null;
         }
     }
 
@@ -362,7 +349,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
     }
 
     @Test
-    public void testWithOtherTx() {
+    public void testWithOtherTx() throws Exception {
         MockConnection connection1 = createMockConnection();
         MockConnection connection2 = createMockConnection();
 
@@ -371,7 +358,15 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
         ds.addConnection(connection2);
 
         // session not in existing tx, should use first connection
-        session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);
+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();
+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(""org/mybatis/spring/TestMapper.xml"") });
+        sfb1.setDataSource(ds);
+        ExecutorInterceptor ei = new ExecutorInterceptor();
+
+        SqlSessionFactory sf1 = sfb1.getObject();
+        sf1.getConfiguration().addInterceptor(ei);
+
+        session = SqlSessionUtils.getSqlSession(sf1);
 
         try {
             // this transaction should use another Connection
@@ -381,7 +376,7 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
             // all MyBatis work happens during the tx, but should not be participating
             session.getMapper(TestMapper.class).findTest();
             session.commit(true);
-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);
+            SqlSessionUtils.closeSqlSession(session, sf1);
 
             // this should succeed
             // SpringManagedTransaction (from SqlSession.commit()) should not interfere with tx
@@ -398,8 +393,8 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
             assertEquals(""should not call rollback on Connection 2"", 0, connection2.getNumberRollbacks());
 
             // the SqlSession should have also committed
-            assertEquals(""should call commit on SqlSession"", 1, executorInterceptor.getCommitCount());
-            assertEquals(""should call rollback on SqlSession"", 0, executorInterceptor.getRollbackCount());
+            assertEquals(""should call commit on SqlSession"", 1, ei.getCommitCount());
+            assertEquals(""should call rollback on SqlSession"", 0, ei.getRollbackCount());
 
             assertConnectionClosed(connection1);
             assertConnectionClosed(connection2);
@@ -410,11 +405,15 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
             // null the connection since it was not used
             // this avoids failing in validateConnectionClosed()
             connection = null;
+            
+            // null the session since it was not used
+            // this avoids failing in validateSessionClosed()
+            session = null;
         }
     }
 
     @Test
-    public void testSuspendAndResume() {
+    public void testSuspendAndResume() throws Exception {
         MockConnection connection1 = createMockConnection();
         MockConnection connection2 = createMockConnection();
 
@@ -422,27 +421,36 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {
         ds.addConnection(connection1);
         ds.addConnection(connection2);
 
+        // session not in existing tx, should use first connection
+        SqlSessionFactoryBean sfb1 = new SqlSessionFactoryBean();
+        sfb1.setMapperLocations(new Resource[] { new ClassPathResource(""org/mybatis/spring/TestMapper.xml"") });
+        sfb1.setDataSource(ds);
+  
+        ExecutorInterceptor ei = new ExecutorInterceptor();
+        SqlSessionFactory sf1 = sfb1.getObject();
+        sf1.getConfiguration().addInterceptor(ei);
+
         try {
             txManager.setDataSource(ds);
             TransactionStatus status = txManager.getTransaction(new DefaultTransactionDefinition());
 
-            session = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);
+            session = SqlSessionUtils.getSqlSession(sf1);
 
             // start a new tx while the other is in progress
             DefaultTransactionDefinition txRequiresNew = new DefaultTransactionDefinition();
             txRequiresNew.setPropagationBehaviorName(""PROPAGATION_REQUIRES_NEW"");
             TransactionStatus status2 = txManager.getTransaction(txRequiresNew);
 
-            SqlSession session2 = SqlSessionUtils.getSqlSession(sqlSessionFactory, ds);
+            SqlSession session2 = SqlSessionUtils.getSqlSession(sf1);
 
             assertNotSame(""getSqlSession() should not return suspended SqlSession"", session, session2);
 
-            SqlSessionUtils.closeSqlSession(session2, sqlSessionFactory);
+            SqlSessionUtils.closeSqlSession(session2, sf1);
             txManager.commit(status2);
 
             // first tx should be resumed now and this should succeed
             session.getMapper(TestMapper.class).findTest();
-            SqlSessionUtils.closeSqlSession(session, sqlSessionFactory);
+            SqlSessionUtils.closeSqlSession(session, sf1);
             txManager.commit(status);
 
             // two transactions should have completed, each using their own Connection
@@ -456,8 +464,8 @@ public final class MyBatisSpringTest extends AbstractMyBatisSpringTest {",removed datasource from SqlSessionUtils . getSqlSession,"Here's a possible commit message based on the provided diff:

`Refactor SqlSessionUtils to simplify getSqlSession methods and remove unnecessary DataSource parameter`

This commit message summarizes the main changes made in the commit, which is the simplification of the `getSqlSession` methods in `SqlSessionUtils` and the removal of the unnecessary `DataSource` parameter.",Simplified `SqlSessionUtils.getSqlSession` method to use `SqlSessionFactory` directly instead of requiring a `DataSource` or `ExecutorType` separately.,"The commit message could be:

""Refactor SqlSessionUtils to simplify method signatures and remove unused test cases

- Removed DataSource parameter from getSqlSession methods as it is not necessary and can be obtained from the SqlSessionFactory.
- Removed testWithDifferentDataSource test case as it is not a recommended usage and can cause runtime errors.
- Updated test cases to use the refactored methods.
- Added missing imports and annotations in MyBatisSpringTest.""",Refactor `SqlSessionUtils` to remove methods with redundant `DataSource` parameters and update corresponding tests.,Model 2
"diff --git a/docs/reference/query-dsl/prefix-query.asciidoc b/docs/reference/query-dsl/prefix-query.asciidoc
index e168bb4de0d..9d28dfb6b42 100644
--- a/docs/reference/query-dsl/prefix-query.asciidoc
+++ b/docs/reference/query-dsl/prefix-query.asciidoc
@@ -43,7 +43,8 @@ information, see the <<query-dsl-multi-term-rewrite, `rewrite` parameter>>.
 
 `case_insensitive`::
 (Optional, boolean) allows ASCII case insensitive matching of the
-value with the indexed field values when set to true. Setting to false is disallowed.
+value with the indexed field values when set to true. Default is false which means
+the case sensitivity of matching depends on the underlying field's mapping.
 
 [[prefix-query-notes]]
 ==== Notes
diff --git a/docs/reference/query-dsl/regexp-query.asciidoc b/docs/reference/query-dsl/regexp-query.asciidoc
index a0ead3ea9df..c50207299f2 100644
--- a/docs/reference/query-dsl/regexp-query.asciidoc
+++ b/docs/reference/query-dsl/regexp-query.asciidoc
@@ -70,7 +70,8 @@ expression syntax>>.
 
 `case_insensitive`::
 (Optional, boolean) allows case insensitive matching of the regular expression
-value with the indexed field values when set to true. Setting to false is disallowed.
+value with the indexed field values when set to true. Default is false which means
+the case sensitivity of matching depends on the underlying field's mapping.
 
 `max_determinized_states`::
 +
diff --git a/docs/reference/query-dsl/term-query.asciidoc b/docs/reference/query-dsl/term-query.asciidoc
index 62de4d835ed..40f8d5e5ed7 100644
--- a/docs/reference/query-dsl/term-query.asciidoc
+++ b/docs/reference/query-dsl/term-query.asciidoc
@@ -64,7 +64,8 @@ increases the relevance score.
 
 `case_insensitive`::
 (Optional, boolean) allows ASCII case insensitive matching of the
-value with the indexed field values when set to true. Setting to false is disallowed.
+value with the indexed field values when set to true. Default is false which means
+the case sensitivity of matching depends on the underlying field's mapping
 
 [[term-query-notes]]
 ==== Notes
diff --git a/docs/reference/query-dsl/wildcard-query.asciidoc b/docs/reference/query-dsl/wildcard-query.asciidoc
index 8d3c0f2630a..56daf53e120 100644
--- a/docs/reference/query-dsl/wildcard-query.asciidoc
+++ b/docs/reference/query-dsl/wildcard-query.asciidoc
@@ -71,7 +71,8 @@ increases the relevance score.
 
 `case_insensitive`::
 (Optional, boolean) allows case insensitive matching of the
-pattern with the indexed field values when set to true. Setting to false is disallowed.
+pattern with the indexed field values when set to true. Default is false which means
+the case sensitivity of matching depends on the underlying field's mapping.
 
 [[wildcard-query-notes]]
 ==== Notes
diff --git a/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java
index 2e8f6606a33..1134fe4a753 100644
--- a/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java
@@ -109,9 +109,6 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>
     }
 
     public PrefixQueryBuilder caseInsensitive(boolean caseInsensitive) {
-        if (caseInsensitive == false) {
-            throw new IllegalArgumentException(""The case insensitive setting cannot be set to false."");
-        }
         this.caseInsensitive = caseInsensitive;
         return this;
     }
@@ -175,10 +172,6 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>
                             rewrite = parser.textOrNull();
                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {
                             caseInsensitive = parser.booleanValue();
-                            if (caseInsensitive == false) {
-                                throw new ParsingException(parser.getTokenLocation(),
-                                    ""[prefix] query does not support ["" + currentFieldName + ""] = false"");
-                            }
                         } else {
                             throw new ParsingException(parser.getTokenLocation(),
                                     ""[prefix] query does not support ["" + currentFieldName + ""]"");
@@ -196,9 +189,7 @@ public class PrefixQueryBuilder extends AbstractQueryBuilder<PrefixQueryBuilder>
                 .rewrite(rewrite)
                 .boost(boost)
                 .queryName(queryName);
-        if (caseInsensitive) {
-            result.caseInsensitive(caseInsensitive);
-        }
+        result.caseInsensitive(caseInsensitive);
         return result;
     }
 
diff --git a/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java
index f9403de0def..d4dfce79f56 100644
--- a/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java
@@ -154,9 +154,6 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>
     }
 
     public RegexpQueryBuilder caseInsensitive(boolean caseInsensitive) {
-        if (caseInsensitive == false) {
-            throw new IllegalArgumentException(""The case insensitive setting cannot be set to false."");
-        }
         this.caseInsensitive = caseInsensitive;
         return this;
     }
@@ -240,10 +237,6 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>
                             flagsValue = parser.intValue();
                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {
                             caseInsensitive = parser.booleanValue();
-                            if (caseInsensitive == false) {
-                                throw new ParsingException(parser.getTokenLocation(),
-                                    ""[regexp] query does not support ["" + currentFieldName + ""] = false"");
-                            }
                         } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {
                             queryName = parser.text();
                         } else {
@@ -265,9 +258,7 @@ public class RegexpQueryBuilder extends AbstractQueryBuilder<RegexpQueryBuilder>
                 .rewrite(rewrite)
                 .boost(boost)
                 .queryName(queryName);
-        if (caseInsensitive) {
-            result.caseInsensitive(caseInsensitive);
-        }
+        result.caseInsensitive(caseInsensitive);
         return result;
     }
 
diff --git a/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java
index 3730efa7d01..73e85b34bd4 100644
--- a/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java
@@ -86,9 +86,6 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {
     }
 
     public TermQueryBuilder caseInsensitive(boolean caseInsensitive) {
-        if (caseInsensitive == false) {
-            throw new IllegalArgumentException(""The case insensitive setting cannot be set to false."");
-        }
         this.caseInsensitive = caseInsensitive;
         return this;
     }
@@ -143,10 +140,6 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {
                             boost = parser.floatValue();
                         } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {
                             caseInsensitive = parser.booleanValue();
-                            if (caseInsensitive == false) {
-                                throw new ParsingException(parser.getTokenLocation(),
-                                    ""[term] query does not support ["" + currentFieldName + ""] = false"");
-                            }
                         } else {
                             throw new ParsingException(parser.getTokenLocation(),
                                     ""[term] query does not support ["" + currentFieldName + ""]"");
@@ -167,9 +160,7 @@ public class TermQueryBuilder extends BaseTermQueryBuilder<TermQueryBuilder> {
         if (queryName != null) {
             termQuery.queryName(queryName);
         }
-        if (caseInsensitive) {
-            termQuery.caseInsensitive(caseInsensitive);
-        }
+        termQuery.caseInsensitive(caseInsensitive);
         return termQuery;
     }
 
diff --git a/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java b/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java
index 099a8c3a6e5..08db089a844 100644
--- a/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java
@@ -128,9 +128,6 @@ public class WildcardQueryBuilder extends AbstractQueryBuilder<WildcardQueryBuil
     }
 
     public WildcardQueryBuilder caseInsensitive(boolean caseInsensitive) {
-        if (caseInsensitive == false) {
-            throw new IllegalArgumentException(""The case insensitive setting cannot be set to false."");
-        }
         this.caseInsensitive = caseInsensitive;
         return this;",make term / prefix / wildcard / regex query parsing more lenient ( <issue_id> ) .,"""Relax case insensitive query parameter restrictions""

This commit message accurately reflects the changes made in the code. The changes allow the `case_insensitive` parameter to be set to `false` (or not set at all, in which case it defaults to `false`), whereas previously it was only allowed to be set to `true`.","The commit message should be:

""Allow case insensitive matching for prefix, regexp, term and wildcard queries by default""

However, a more idiomatic commit message in the context of Elasticsearch would be:

""Allow case insensitive matching for prefix, regexp, term and wildcard queries by default, removing the disallowed false setting""

This commit message clearly conveys the change made in the code and follows the standard commit message format used in the Elasticsearch project.","""Update case_insensitive parameter description in query DSL docs and remove false check in PrefixQueryBuilder, RegexpQueryBuilder, TermQueryBuilder, and WildcardQueryBuilder""

The changes made in the code remove the check for the false value of the `case_insensitive` parameter and update the documentation to reflect that the default value is false and depends on the underlying field's mapping. The commit message should summarize these changes and indicate that they affect the query DSL documentation and the four mentioned query builders.","Allow setting case_insensitive to false in query builders, reflecting default behavior based on the underlying field's mapping.",Model 4
"diff --git a/README.md b/README.md
index 8f441a836e..566eff19e5 100644
--- a/README.md
+++ b/README.md
@@ -34,7 +34,6 @@ Contact the team and keep up to date using any of the following:
  - Our [mailing list](https://groups.google.com/forum/#!forum/bitsquare)
  - [@bitsquare_](https://twitter.com/bitsquare_) on Twitter
  - [team@bitsquare.io](mailto:team@bitsquare.io)
- - The [Bitsquare thread](https://bitcointalk.org/index.php?topic=647457) on the Bitcointalk forum
  - GitHub [Issues](https://github.com/bitsquare/bitsquare/issues)",Remove bitcointalk forum link,"""Remove Bitcointalk forum thread from README""","Remove Bitcointalk forum link from README.md

This commit message accurately reflects the changes made in the diff, which is the removal of the Bitcointalk forum link from the README.md file.","""Removed link to Bitsquare thread on Bitcointalk forum from README.md""","""Remove outdated Bitcointalk forum link from README.md for better clarity.""",Model 3
"diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java
index 54077c82c09..a164e8156f6 100644
--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java
+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/integrationtest/KernelIT.java
@@ -19,24 +19,16 @@
  */
 package org.neo4j.kernel.impl.api.integrationtest;
 
-import org.junit.Assert;
 import org.junit.Test;
 
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.neo4j.graphdb.GraphDatabaseService;
-import org.neo4j.graphdb.Label;
 import org.neo4j.graphdb.Node;
 import org.neo4j.graphdb.Transaction;
-import org.neo4j.graphdb.TransactionFailureException;
 import org.neo4j.internal.kernel.api.IndexReference;
-import org.neo4j.internal.kernel.api.LabelSet;
 import org.neo4j.internal.kernel.api.NodeCursor;
-import org.neo4j.internal.kernel.api.NodeLabelIndexCursor;
 import org.neo4j.internal.kernel.api.SchemaWrite;
 import org.neo4j.internal.kernel.api.TokenWrite;
 import org.neo4j.internal.kernel.api.exceptions.InvalidTransactionTypeKernelException;
@@ -48,13 +40,9 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;
 import org.neo4j.kernel.internal.GraphDatabaseAPI;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.neo4j.graphdb.Label.label;
 import static org.neo4j.internal.kernel.api.security.LoginContext.AUTH_DISABLED;
 import static org.neo4j.kernel.api.schema.SchemaDescriptorFactory.forLabel;
 import static org.neo4j.test.assertion.Assert.assertEventually;",Remove imports,"""Remove unused imports in KernelIT.java""","Based on the provided diff, it appears that several import statements have been removed from the `KernelIT.java` file. Here's a possible commit message:

`Remove unused import statements from KernelIT.java`

Alternatively, if you want to make the commit message more concise, you could use:

`Clean up import statements in KernelIT.java`","""Remove unused imports and static imports in KernelIT.java""

Explanation: The diff shows that several import statements have been removed from the KernelIT.java file. These imports were either unused or replaced with explicit class references. The removed imports include java.util.Collections, java.util.HashSet, java.util.Set, org.junit.Assert, org.neo4j.graphdb.Label, org.neo4j.internal.kernel.api.LabelSet, and some static imports from org.junit.Assert and org.neo4j.graphdb.Label. The commit message should reflect that these unused imports and static imports were removed from the file.","""Refactor KernelIT test: remove unused imports, streamline assertions, improve code clarity.""",Model 4
"diff --git a/lib/felix.client.run.properties b/lib/felix.client.run.properties
index 7ab9a0cde..9900f3edd 100644
--- a/lib/felix.client.run.properties
+++ b/lib/felix.client.run.properties
@@ -65,6 +65,7 @@ felix.auto.start.50= \
  reference:file:sc-bundles/protocol-jabber.jar \
  reference:file:sc-bundles/protocol-msn.jar \
  reference:file:sc-bundles/protocol-yahoo.jar \
+ reference:file:sc-bundles/protocol-gibberish.jar \
  reference:file:sc-bundles/netaddr.jar \
  reference:file:sc-bundles/meta-cl.jar
 
@@ -78,13 +79,14 @@ felix.auto.start.60= \
  felix.auto.start.66= \
  reference:file:sc-bundles/swing-ui.jar \
  reference:file:sc-bundles/systray.jar
- 
+
  felix.auto.start.67= \
  reference:file:sc-bundles/icqaccregwizz.jar \
  reference:file:sc-bundles/sipaccregwizz.jar \
  reference:file:sc-bundles/jabberaccregwizz.jar \
  reference:file:sc-bundles/msnaccregwizz.jar \
  reference:file:sc-bundles/yahooaccregwizz.jar \
+ reference:file:sc-bundles/gibberishaccregwizz.jar \
  reference:file:sc-bundles/shutdown.jar
 
 # Uncomment the following lines if you want to run the architect viewer",Added multichat operation set definition and Gibberish protocol implementation .,"""Added support for Gibberish protocol in Felix client""",Added protocol-gibberish.jar and gibberishaccregwizz.jar to auto-start bundles.,"Added Gibberish protocol and account registration wizard bundles to the Felix client run properties.

This commit added two new lines to the `felix.client.run.properties` file:

1. `reference:file:sc-bundles/protocol-gibberish.jar` to the `felix.auto.start.50` section.
2. `reference:file:sc-bundles/gibberishaccregwizz.jar` to the `felix.auto.start.67` section.

These lines add the Gibberish protocol and its corresponding account registration wizard to the list of bundles that are started automatically by the Felix client.",Added support for gibberish protocol and registry wizard in felix client run properties.,Model 1
"diff --git a/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java
index 16bd0f04a..c4614bf68 100644
--- a/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java
+++ b/spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java
@@ -68,6 +68,9 @@ public class DepInterpreter extends Interpreter {
         DepInterpreter.class.getName(),
         new InterpreterPropertyBuilder()
             .add(""zeppelin.dep.localrepo"", ""local-repo"", ""local repository for dependency loader"")
+            .add(""zeppelin.dep.additionalRemoteRepository"",
+                ""spark-packages,http://dl.bintray.com/spark-packages/maven,false;"",
+                ""A list of 'id,remote-repository-URL,is-snapshot;' for each remote repository."")
             .build());
 
   }
@@ -146,7 +149,8 @@ public class DepInterpreter extends Interpreter {
     intp.setContextClassLoader();
     intp.initializeSynchronous();
 
-    depc = new DependencyContext(getProperty(""zeppelin.dep.localrepo""));
+    depc = new DependencyContext(getProperty(""zeppelin.dep.localrepo""),
+                                 getProperty(""zeppelin.dep.additionalRemoteRepository""));
     completor = new SparkJLineCompletion(intp);
 
     intp.interpret(""@transient var _binder = new java.util.HashMap[String, Object]()"");
diff --git a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
index a2e31fb22..77d4986bf 100644
--- a/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
+++ b/spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
@@ -228,7 +228,10 @@ public class SparkInterpreter extends Interpreter {
 
   public DependencyResolver getDependencyResolver() {
     if (dep == null) {
-      dep = new DependencyResolver(intp, sc, getProperty(""zeppelin.dep.localrepo""));
+      dep = new DependencyResolver(intp,
+                                   sc,
+                                   getProperty(""zeppelin.dep.localrepo""),
+                                   getProperty(""zeppelin.dep.additionalRemoteRepository""));
     }
     return dep;
   }
diff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java
index 053380459..ece39c3c9 100644
--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java
+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java
@@ -67,4 +67,9 @@ public class Booter {
   public static RemoteRepository newCentralRepository() {
     return new RemoteRepository(""central"", ""default"", ""http://repo1.maven.org/maven2/"");
   }
+
+  public static RemoteRepository newLocalRepository() {
+    return new RemoteRepository(""local"",
+        ""default"", ""file://"" + System.getProperty(""user.home"") + ""/.m2/repository"");
+  }
 }
diff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java
index f0fd31325..0f465f1c2 100644
--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java
+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyContext.java
@@ -49,13 +49,13 @@ public class DependencyContext {
   List<File> filesDist = new LinkedList<File>();
   private RepositorySystem system = Booter.newRepositorySystem();
   private RepositorySystemSession session;
-  private RemoteRepository mavenCentral = new RemoteRepository(""central"",
-      ""default"", ""http://repo1.maven.org/maven2/"");
-  private RemoteRepository mavenLocal = new RemoteRepository(""local"",
-      ""default"", ""file://"" + System.getProperty(""user.home"") + ""/.m2/repository"");
+  private RemoteRepository mavenCentral = Booter.newCentralRepository();
+  private RemoteRepository mavenLocal = Booter.newLocalRepository();
+  private List<RemoteRepository> additionalRepos = new LinkedList<RemoteRepository>();
 
-  public DependencyContext(String localRepoPath) {
+  public DependencyContext(String localRepoPath, String additionalRemoteRepository) {
     session =  Booter.newRepositorySystemSession(system, localRepoPath);
+    addRepoFromProperty(additionalRemoteRepository);
   }
 
   public Dependency load(String lib) {
@@ -82,6 +82,24 @@ public class DependencyContext {
     filesDist = new LinkedList<File>();
   }
 
+  private void addRepoFromProperty(String listOfRepo) {
+    if (listOfRepo != null) {
+      String[] repos = listOfRepo.split("";"");
+      for (String repo : repos) {
+        String[] parts = repo.split("","");
+        if (parts.length == 3) {
+          String id = parts[0].trim();
+          String url = parts[1].trim();
+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());
+          if (id.length() > 1 && url.length() > 1) {
+            RemoteRepository rr = new RemoteRepository(id, ""default"", url);
+            rr.setPolicy(isSnapshot, null);
+            additionalRepos.add(rr);
+          }
+        }
+      }
+    }
+  }
 
   /**
    * fetch all artifacts
@@ -129,6 +147,9 @@ public class DependencyContext {
 
     collectRequest.addRepository(mavenCentral);
     collectRequest.addRepository(mavenLocal);
+    for (RemoteRepository repo : additionalRepos) {
+      collectRequest.addRepository(repo);
+    }
     for (Repository repo : repositories) {
       RemoteRepository rr = new RemoteRepository(repo.getName(), ""default"", repo.getUrl());
       rr.setPolicy(repo.isSnapshot(), null);
diff --git a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java
index 0702948fb..0a305300d 100644
--- a/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java
+++ b/spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java
@@ -83,14 +83,15 @@ public class DependencyResolver {
                                                     ""org.apache.zeppelin:zeppelin-spark"",
                                                     ""org.apache.zeppelin:zeppelin-server""};
 
-  public DependencyResolver(SparkIMain intp, SparkContext sc, String localRepoPath) {
+  public DependencyResolver(SparkIMain intp, SparkContext sc, String localRepoPath,
+                            String additionalRemoteRepository) {
     this.intp = intp;
     this.global = intp.global();
     this.sc = sc;
     session = Booter.newRepositorySystemSession(system, localRepoPath);
     repos.add(Booter.newCentralRepository()); // add maven central
-    repos.add(new RemoteRepository(""local"", ""default"", ""file://""
-        + System.getProperty(""user.home"") + ""/.m2/repository""));
+    repos.add(Booter.newLocalRepository());
+    addRepoFromProperty(additionalRemoteRepository);
   }
 
   public void addRepo(String id, String url, boolean snapshot) {
@@ -116,6 +117,23 @@ public class DependencyResolver {
     return null;
   }
 
+  private void addRepoFromProperty(String listOfRepo) {
+    if (listOfRepo != null) {
+      String[] repos = listOfRepo.split("";"");
+      for (String repo : repos) {
+        String[] parts = repo.split("","");
+        if (parts.length == 3) {
+          String id = parts[0].trim();
+          String url = parts[1].trim();
+          boolean isSnapshot = Boolean.parseBoolean(parts[2].trim());
+          if (id.length() > 1 && url.length() > 1) {
+            addRepo(id, url, isSnapshot);
+          }
+        }
+      }
+    }
+  }
+
   private void updateCompilerClassPath(URL[] urls) throws IllegalAccessException,
       IllegalArgumentException, InvocationTargetException {
 
diff --git a/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java b/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
index 6adaa14f7..efa8fae25 100644
--- a/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
+++ b/spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
@@ -90,5 +90,12 @@ public class DepInterpreterTest {
 
     assertEquals(1, dep.getDependencyContext().getFiles().size());
     assertEquals(1, dep.getDependencyContext().getFilesDist().size());
+
+    // Add a test for the spark-packages repo - default in additionalRemoteRepository
+    ret = dep.interpret(""z.load(\""amplab:spark-indexedrdd:0.3\"")"", context);
+    assertEquals(Code.SUCCESS, ret.code());
+
+    // Reset at the end of the test
+    dep.getDependencyContext().reset();
   }
 }",Add support for a configurable list of repo for dependencies .,"""Added support for multiple remote repositories in Zeppelin Spark Interpreter""

This commit message is short and to the point, it clearly states the main feature that was added in the commit.","""Added support for additional remote repositories in dependency loading""

This commit message accurately summarizes the changes made in the code, which include adding support for additional remote repositories in the dependency loading process.","""Add additional remote repository configuration for Spark Dependency Interpreter""

This commit adds a new configuration property `zeppelin.dep.additionalRemoteRepository` for the Spark Dependency Interpreter. This property allows users to specify a list of additional remote repositories to search for dependencies. The property is a semicolon-separated list of repository specifiers, each consisting of an ID, a URL, and a boolean flag indicating whether the repository contains snapshot versions.

The commit also updates the `DependencyContext` and `DependencyResolver` classes to use the new property when searching for dependencies. Finally, it adds a new test case to the `DepInterpreterTest` class to ensure that the new property is working correctly.",Add support for additional remote repositories in DepInterpreter and DependencyResolver.,Model 1
"diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java
index 8f5a9964cd..6db102fc64 100644
--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java
+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -133,7 +133,8 @@ public interface JdbcOperations {
 	 * object via a RowMapper.
 	 * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 	 * execute a static query with a PreparedStatement, use the overloaded
-	 * {@code queryForObject} method with {@code null} as argument array.
+	 * {@link #queryForObject(String, RowMapper, Object...)} method with
+	 * {@code null} as argument array.
 	 * @param sql SQL query to execute
 	 * @param rowMapper object that will map one object per row
 	 * @return the single mapped object
@@ -148,7 +149,8 @@ public interface JdbcOperations {
 	 * Execute a query for a result object, given static SQL.
 	 * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 	 * execute a static query with a PreparedStatement, use the overloaded
-	 * {@code queryForObject} method with {@code null} as argument array.
+	 * {@link #queryForObject(String, Class, Object...)} method with
+	 * {@code null} as argument array.
 	 * <p>This method is useful for running static SQL with a known outcome.
 	 * The query is expected to be a single row/single column query; the returned
 	 * result will be directly mapped to the corresponding object type.
@@ -166,7 +168,8 @@ public interface JdbcOperations {
 	 * Execute a query for a result Map, given static SQL.
 	 * <p>Uses a JDBC Statement, not a PreparedStatement. If you want to
 	 * execute a static query with a PreparedStatement, use the overloaded
-	 * {@code queryForMap} method with {@code null} as argument array.
+	 * {@link #queryForMap(String, Object...)} method with {@code null}
+	 * as argument array.
 	 * <p>The query is expected to be a single row query; the result row will be
 	 * mapped to a Map (one entry for each column, using the column name as the key).
 	 * @param sql SQL query to execute
@@ -194,7 +197,9 @@ public interface JdbcOperations {
 	 * exactly one row, or does not return exactly one column in that row
 	 * @throws DataAccessException if there is any problem executing the query
 	 * @see #queryForLong(String, Object[])
+	 * @deprecated in favor of {@link #queryForObject(String, Class)}
 	 */
+	@Deprecated
 	long queryForLong(String sql) throws DataAccessException;
 
 	/**
@@ -211,7 +216,9 @@ public interface JdbcOperations {
 	 * exactly one row, or does not return exactly one column in that row
 	 * @throws DataAccessException if there is any problem executing the query
 	 * @see #queryForInt(String, Object[])
+	 * @deprecated in favor of {@link #queryForObject(String, Class)}
 	 */
+	@Deprecated
 	int queryForInt(String sql) throws DataAccessException;
 
 	/**
@@ -712,7 +719,9 @@ public interface JdbcOperations {
 	 * @throws DataAccessException if the query fails
 	 * @see #queryForLong(String)
 	 * @see java.sql.Types
+	 * @deprecated in favor of {@link #queryForObject(String, Object[], int[], Class)} )}
 	 */
+	@Deprecated
 	long queryForLong(String sql, Object[] args, int[] argTypes) throws DataAccessException;
 
 	/**
@@ -730,7 +739,9 @@ public interface JdbcOperations {
 	 * exactly one row, or does not return exactly one column in that row
 	 * @throws DataAccessException if the query fails
 	 * @see #queryForLong(String)
+	 * @deprecated in favor of {@link #queryForObject(String, Class, Object[])} )}
 	 */
+	@Deprecated
 	long queryForLong(String sql, Object... args) throws DataAccessException;
 
 	/**
@@ -748,7 +759,9 @@ public interface JdbcOperations {
 	 * @throws DataAccessException if the query fails
 	 * @see #queryForInt(String)
 	 * @see java.sql.Types
+	 * @deprecated in favor of {@link #queryForObject(String, Object[], int[], Class)} )}
 	 */
+	@Deprecated
 	int queryForInt(String sql, Object[] args, int[] argTypes) throws DataAccessException;
 
 	/**
@@ -766,7 +779,9 @@ public interface JdbcOperations {
 	 * exactly one row, or does not return exactly one column in that row
 	 * @throws DataAccessException if the query fails
 	 * @see #queryForInt(String)
+	 * @deprecated in favor of {@link #queryForObject(String, Class, Object[])} )}
 	 */
+	@Deprecated
 	int queryForInt(String sql, Object... args) throws DataAccessException;
 
 	/**
diff --git a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java
index 3f0085cebf..910d206872 100644
--- a/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java
+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  * you may not use this file except in compliance with the License.
@@ -477,11 +477,13 @@ public class JdbcTemplate extends JdbcAccessor implements JdbcOperations {
 		return queryForObject(sql, getSingleColumnRowMapper(requiredType));
 	}
 
+	@Deprecated
 	public long queryForLong(String sql) throws DataAccessException {
 		Number number = queryForObject(sql, Long.class);
 		return (number != null ? number.longValue() : 0);
 	}
 
+	@Deprecated
 	public int queryForInt(String sql) throws DataAccessException {
 		Number number = queryForObject(sql, Integer.class);
 		return (number != null ? number.intValue() : 0);
@@ -757,21 +759,25 @@ public class JdbcTemplate extends JdbcAccessor implements JdbcOperations {
 		return queryForObject(sql, args, getColumnMapRowMapper());
 	}
 
+	@Deprecated
 	public long queryForLong(String sql, Object[] args, int[] argTypes) throws DataAccessException {
 		Number number = queryForObject(sql, args, argTypes, Long.class);
 		return (number != null ? number.longValue() : 0);
 	}
 
+	@Deprecated
 	public long queryForLong(String sql, Object... args) throws DataAccessException {
 		Number number = queryForObject(sql, args, Long.class);
 		return (number != null ? number.longValue() : 0);
 	}
 
+	@Deprecated
 	public int queryForInt(String sql, Object[] args, int[] argTypes) throws DataAccessException {
 		Number number = queryForObject(sql, args, argTypes, Integer.class);
 		return (number != null ? number.intValue() : 0);
 	}
 
+	@Deprecated
 	public int queryForInt(String sql, Object... args) throws DataAccessException {
 		Number number = queryForObject(sql, args, Integer.class);
 		return (number != null ? number.intValue() : 0);",Deprecated JdbcTemplate \' s queryForInt / Long operations in favor of queryForObject ( following NamedParameterJdbcTemplate ) .,"""Deprecate queryForLong and queryForInt methods in JdbcOperations and JdbcTemplate in favor of queryForObject""","""Update copyright year and deprecate query methods in JdbcOperations and JdbcTemplate.""","""Update JdbcOperations and JdbcTemplate to deprecate queryForLong and queryForInt methods""

Explanation:
The diff shows that several methods in the JdbcOperations interface and JdbcTemplate class have been deprecated. Specifically, the methods queryForLong and queryForInt have been deprecated in favor of using the queryForObject method with a Class parameter. The @Deprecated annotation has been added to each of these methods, and a deprecation message has been included in the Javadoc comments. The copyright notice has also been updated from 2012 to 2013.",Deprecated queryForInt and queryForLong methods in JdbcOperations and JdbcTemplate in favor of queryForObject with specific arguments.,Model 2
"diff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java
index b6f086708d0..890a84f78f4 100644
--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java
+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java
@@ -63,6 +63,7 @@ import org.wso2.ballerinalang.compiler.tree.BLangIdentifier;
 import org.wso2.ballerinalang.compiler.tree.BLangImportPackage;
 import org.wso2.ballerinalang.compiler.tree.BLangNameReference;
 import org.wso2.ballerinalang.compiler.tree.BLangPackageDeclaration;
+import org.wso2.ballerinalang.compiler.tree.BLangResource;
 import org.wso2.ballerinalang.compiler.tree.BLangService;
 import org.wso2.ballerinalang.compiler.tree.BLangStruct;
 import org.wso2.ballerinalang.compiler.tree.BLangVariable;
@@ -1372,10 +1373,11 @@ public class BLangPackageBuilder {
                 .forEach(varDef -> serviceNode.addVariable((VariableDefinitionNode) varDef));
     }
 
-    public void endServiceDef(Set<Whitespace> ws, String protocolPkg, String serviceName) {
+    public void endServiceDef(DiagnosticPos pos, Set<Whitespace> ws, String protocolPkg, String serviceName) {
         ServiceNode serviceNode = serviceNodeStack.pop();
         serviceNode.setName(createIdentifier(serviceName));
         serviceNode.setProtocolPackageIdentifier(createIdentifier(protocolPkg));
+        ((BLangService) serviceNode).pos = pos;
         serviceNode.addWS(ws);
         this.compUnit.addTopLevelNode(serviceNode);
     }
@@ -1385,10 +1387,11 @@ public class BLangPackageBuilder {
         invokableNodeStack.push(resourceNode);
     }
 
-    public void endResourceDef(Set<Whitespace> ws, String resourceName, int annotCount) {
+    public void endResourceDef(DiagnosticPos pos, Set<Whitespace> ws, String resourceName, int annotCount) {
         ResourceNode resourceNode = (ResourceNode) invokableNodeStack.pop();
         resourceNode.addWS(ws);
         resourceNode.setName(createIdentifier(resourceName));
+        ((BLangResource) resourceNode).pos = pos;
         attachAnnotations(resourceNode, annotCount);
         varListStack.pop().forEach(resourceNode::addParameter);
         serviceNodeStack.peek().addResource(resourceNode);
diff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java
index 12ccbb3104a..62b1f95bf6c 100644
--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java
+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java
@@ -182,7 +182,8 @@ public class BLangParserListener extends BallerinaParserBaseListener {
         if (ctx.exception != null) {
             return;
         }
-        this.pkgBuilder.endServiceDef(getWS(ctx), ctx.Identifier(0).getText(), ctx.Identifier(1).getText());
+        this.pkgBuilder.endServiceDef(getCurrentPos(ctx), getWS(ctx), ctx.Identifier(0).getText(),
+                ctx.Identifier(1).getText());
     }
 
     /**
@@ -236,7 +237,8 @@ public class BLangParserListener extends BallerinaParserBaseListener {
         if (ctx.exception != null) {
             return;
         }
-        this.pkgBuilder.endResourceDef(getWS(ctx), ctx.Identifier().getText(), ctx.annotationAttachment().size());
+        this.pkgBuilder.endResourceDef(getCurrentPos(ctx), getWS(ctx), ctx.Identifier().getText(),
+                ctx.annotationAttachment().size());
     }
 
     /**
diff --git a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java
index 230fff678be..3b85a923ab6 100644
--- a/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java
+++ b/modules/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserErrorStrategy.java
@@ -124,7 +124,7 @@ public class BallerinaParserErrorStrategy extends DefaultErrorStrategy {
      * 
      * @param parser Current parser
      */
-    private void setContextException(Parser parser) {
+    protected void setContextException(Parser parser) {
         // Here the type of the exception is not important.
         InputMismatchException e = new InputMismatchException(parser);
         for (ParserRuleContext context = parser.getContext(); context != null; context = context.getParent()) {",Add position for resource and service,"""Added position information to service and resource definitions""","""Added position tracking for services and resources in the parser and parser listener.""","""Added position information to BLangService and BLangResource nodes and updated BLangParserListener to pass the position information""

Explanation:

* In BLangPackageBuilder.java, position information (DiagnosticPos) has been added as a parameter in the methods endServiceDef() and endResourceDef(). Also, the position information is set to the corresponding nodes ((BLangService) serviceNode).pos and ((BLangResource) resourceNode).pos.
* In BLangParserListener.java, the method getCurrentPos() has been added to retrieve the position information, and it's being passed as an argument when calling endServiceDef() and endResourceDef() methods.
* In BallerinaParserErrorStrategy.java, the visibility of the method setContextException() has been changed from private to protected.",Add position tracking for BLangService and BLangResource nodes in the Ballerina parser.,Model 3
"diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java
index bccfd97e534..2cb04260125 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/command/BasePrimaryAllocationCommand.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.cluster.routing.allocation.command;
 
 import org.elasticsearch.common.ParseField;
-import org.elasticsearch.common.ParseFieldMatcherSupplier;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.xcontent.ObjectParser;
diff --git a/core/src/main/java/org/elasticsearch/index/IndexSettings.java b/core/src/main/java/org/elasticsearch/index/IndexSettings.java
index dbe6d3505a4..25751cfc771 100644
--- a/core/src/main/java/org/elasticsearch/index/IndexSettings.java
+++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java
@@ -22,7 +22,6 @@ import org.apache.logging.log4j.Logger;
 import org.apache.lucene.index.MergePolicy;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
-import org.elasticsearch.common.ParseFieldMatcher;
 import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.IndexScopedSettings;
 import org.elasticsearch.common.settings.Setting;
@@ -136,7 +135,6 @@ public final class IndexSettings {
     private final Settings nodeSettings;
     private final int numberOfShards;
     private final boolean isShadowReplicaIndex;
-    private final ParseFieldMatcher parseFieldMatcher;
     // volatile fields are updated via #updateIndexMetaData(IndexMetaData) under lock
     private volatile Settings settings;
     private volatile IndexMetaData indexMetaData;
@@ -237,7 +235,6 @@ public final class IndexSettings {
         this.queryStringLenient = QUERY_STRING_LENIENT_SETTING.get(settings);
         this.queryStringAnalyzeWildcard = QUERY_STRING_ANALYZE_WILDCARD.get(nodeSettings);
         this.queryStringAllowLeadingWildcard = QUERY_STRING_ALLOW_LEADING_WILDCARD.get(nodeSettings);
-        this.parseFieldMatcher = new ParseFieldMatcher(settings);
         this.defaultAllowUnmappedFields = scopedSettings.get(ALLOW_UNMAPPED);
         this.durability = scopedSettings.get(INDEX_TRANSLOG_DURABILITY_SETTING);
         syncInterval = INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.get(settings);
@@ -388,11 +385,6 @@ public final class IndexSettings {
         return nodeSettings;
     }
 
-    /**
-     * Returns a {@link ParseFieldMatcher} for this index.
-     */
-    public ParseFieldMatcher getParseFieldMatcher() { return parseFieldMatcher; }
-
     /**
      * Updates the settings and index metadata and notifies all registered settings consumers with the new settings iff at least one setting has changed.
      *
diff --git a/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java b/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java
index 543a02d3e86..5cb9f6111f5 100644
--- a/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java
+++ b/core/src/main/java/org/elasticsearch/ingest/PipelineConfiguration.java
@@ -22,7 +22,6 @@ package org.elasticsearch.ingest;
 import org.elasticsearch.cluster.AbstractDiffable;
 import org.elasticsearch.cluster.Diff;
 import org.elasticsearch.common.ParseField;
-import org.elasticsearch.common.ParseFieldMatcherSupplier;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
@@ -40,7 +39,7 @@ import java.util.Map;
  */
 public final class PipelineConfiguration extends AbstractDiffable<PipelineConfiguration> implements ToXContent {
 
-    private static final ObjectParser<Builder, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(""pipeline_config"", Builder::new);
+    private static final ObjectParser<Builder, Void> PARSER = new ObjectParser<>(""pipeline_config"", Builder::new);
     static {
         PARSER.declareString(Builder::setId, new ParseField(""id""));
         PARSER.declareField((parser, builder, aVoid) -> {
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java
index 00f0f2667e0..87c7404c088 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.search.aggregations.bucket.histogram;
 
 import org.elasticsearch.common.ParseField;
-import org.elasticsearch.common.ParseFieldMatcherSupplier;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
@@ -51,7 +50,7 @@ public class HistogramAggregationBuilder
         extends ValuesSourceAggregationBuilder<ValuesSource.Numeric, HistogramAggregationBuilder> {
     public static final String NAME = ""histogram"";
 
-    private static final ObjectParser<double[], ParseFieldMatcherSupplier> EXTENDED_BOUNDS_PARSER = new ObjectParser<>(
+    private static final ObjectParser<double[], Void> EXTENDED_BOUNDS_PARSER = new ObjectParser<>(
             Histogram.EXTENDED_BOUNDS_FIELD.getPreferredName(),
             () -> new double[]{ Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY });
     static {
diff --git a/core/src/main/java/org/elasticsearch/tasks/TaskResult.java b/core/src/main/java/org/elasticsearch/tasks/TaskResult.java
index 362eb7a4b07..5df43b7485c 100644
--- a/core/src/main/java/org/elasticsearch/tasks/TaskResult.java
+++ b/core/src/main/java/org/elasticsearch/tasks/TaskResult.java
@@ -22,7 +22,6 @@ import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.client.Requests;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.ParseField;
-import org.elasticsearch.common.ParseFieldMatcherSupplier;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.io.stream.StreamInput;
diff --git a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java
index f88ecc981a8..32f6ad6f360 100644
--- a/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java
+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/RestSearchTemplateAction.java
@@ -94,7 +94,7 @@ public class RestSearchTemplateAction extends BaseRestHandler {
 
         // Creates the search request with all required params
         SearchRequest searchRequest = new SearchRequest();
-        RestSearchAction.parseSearchRequest(searchRequest, request, parseFieldMatcher, null);
+        RestSearchAction.parseSearchRequest(searchRequest, request, null);
 
         // Creates the search template request
         SearchTemplateRequest searchTemplateRequest;
diff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java
index 1b6b8c74a78..4a786907f71 100644
--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java
+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByQueryRestHandler.java
@@ -62,7 +62,7 @@ public abstract class AbstractBulkByQueryRestHandler<
              * the generated parser probably is a noop but we should do the accounting just in case. It doesn't hurt to close twice but it
              * really hurts not to close if by some miracle we have to. */
             try {
-                RestSearchAction.parseSearchRequest(searchRequest, restRequest, parseFieldMatcher, searchRequestParser);
+                RestSearchAction.parseSearchRequest(searchRequest, restRequest, searchRequestParser);
             } finally {
                 IOUtils.close(searchRequestParser);
             }",Remove ParseFieldMatcher usages from IndexSettings,"""Remove unused ParseFieldMatcher and ParseFieldMatcherSupplier""","Remove unused ParseFieldMatcherSupplier instances and related code

This commit message accurately reflects the changes made in the provided diff. The changes involve removing unused `ParseFieldMatcherSupplier` instances and related code from various classes in the Elasticsearch project.","""Removed unused import statements and updated method calls accordingly""",Removed deprecated ParseFieldMatcher and related dependencies across various classes for cleaner code.,Model 2
"diff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java
similarity index 82%
rename from docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java
rename to docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java
index a56c1e41a51..738a65bc08b 100644
--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStatsImpl.java
+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/ContainerStats.java
@@ -10,14 +10,14 @@ import java.util.Optional;
  *
  * @author freva
  */
-public class ContainerStatsImpl implements Docker.ContainerStats {
+public class ContainerStats {
     private final Map<String, Object> networks;
     private final Map<String, Object> cpuStats;
     private final Map<String, Object> memoryStats;
     private final Map<String, Object> blkioStats;
 
-    public ContainerStatsImpl(Map<String, Object> networks, Map<String, Object> cpuStats,
-                              Map<String, Object> memoryStats, Map<String, Object> blkioStats) {
+    public ContainerStats(Map<String, Object> networks, Map<String, Object> cpuStats,
+                          Map<String, Object> memoryStats, Map<String, Object> blkioStats) {
         // Network stats are null when container uses host network
         this.networks = Optional.ofNullable(networks).orElse(Collections.emptyMap());
         this.cpuStats = cpuStats;
diff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java
index 5e8a0feb099..64f804e0d02 100644
--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java
+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/Docker.java
@@ -61,13 +61,6 @@ public interface Docker {
             ContainerName containerName,
             String hostName);
 
-    interface ContainerStats {
-        Map<String, Object> getNetworks();
-        Map<String, Object> getCpuStats();
-        Map<String, Object> getMemoryStats();
-        Map<String, Object> getBlkioStats();
-    }
-
     default boolean networkNATed() {
         return false;
     }
diff --git a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java
index c5c4547f796..d118ce30b68 100644
--- a/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java
+++ b/docker-api/src/main/java/com/yahoo/vespa/hosted/dockerapi/DockerImpl.java
@@ -273,7 +273,7 @@ public class DockerImpl implements Docker {
             DockerStatsCallback statsCallback = dockerClient.statsCmd(containerName.asString()).exec(new DockerStatsCallback());
             statsCallback.awaitCompletion(5, TimeUnit.SECONDS);
 
-            return statsCallback.stats.map(stats -> new ContainerStatsImpl(
+            return statsCallback.stats.map(stats -> new ContainerStats(
                     stats.getNetworks(), stats.getCpuStats(), stats.getMemoryStats(), stats.getBlkioStats()));
         } catch (NotFoundException ignored) {
             return Optional.empty();
diff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java
index 90d71c067bc..a76733a6947 100644
--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java
+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperations.java
@@ -3,7 +3,7 @@ package com.yahoo.vespa.hosted.node.admin.docker;
 
 import com.yahoo.vespa.hosted.dockerapi.Container;
 import com.yahoo.vespa.hosted.dockerapi.ContainerName;
-import com.yahoo.vespa.hosted.dockerapi.Docker;
+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;
 import com.yahoo.vespa.hosted.dockerapi.DockerImage;
 import com.yahoo.vespa.hosted.dockerapi.ProcessResult;
 import com.yahoo.vespa.hosted.node.admin.configserver.noderepository.NodeSpec;
@@ -38,7 +38,7 @@ public interface DockerOperations {
 
     void trySuspendNode(ContainerName containerName);
 
-    Optional<Docker.ContainerStats> getContainerStats(ContainerName containerName);
+    Optional<ContainerStats> getContainerStats(ContainerName containerName);
 
     /**
      * Returns the list of containers managed by node-admin
diff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java
index a197eafe923..ccecb4e1d67 100644
--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java
+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java
@@ -8,6 +8,7 @@ import com.yahoo.system.ProcessExecuter;
 import com.yahoo.vespa.hosted.dockerapi.Container;
 import com.yahoo.vespa.hosted.dockerapi.ContainerName;
 import com.yahoo.vespa.hosted.dockerapi.ContainerResources;
+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;
 import com.yahoo.vespa.hosted.dockerapi.Docker;
 import com.yahoo.vespa.hosted.dockerapi.DockerImage;
 import com.yahoo.vespa.hosted.dockerapi.DockerNetworkCreator;
@@ -323,7 +324,7 @@ public class DockerOperationsImpl implements DockerOperations {
     }
 
     @Override
-    public Optional<Docker.ContainerStats> getContainerStats(ContainerName containerName) {
+    public Optional<ContainerStats> getContainerStats(ContainerName containerName) {
         return docker.getContainerStats(containerName);
     }
 
diff --git a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java
index 7c84150009e..07b2e3ec193 100644
--- a/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java
+++ b/node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImpl.java
@@ -6,7 +6,7 @@ import com.yahoo.concurrent.ThreadFactoryFactory;
 import com.yahoo.vespa.hosted.dockerapi.Container;
 import com.yahoo.vespa.hosted.dockerapi.ContainerName;
 import com.yahoo.vespa.hosted.dockerapi.ContainerResources;
-import com.yahoo.vespa.hosted.dockerapi.Docker;
+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;
 import com.yahoo.vespa.hosted.dockerapi.DockerException;
 import com.yahoo.vespa.hosted.dockerapi.DockerExecTimeoutException;
 import com.yahoo.vespa.hosted.dockerapi.DockerImage;
@@ -554,7 +554,7 @@ public class NodeAgentImpl implements NodeAgent {
         final NodeSpec node = lastNode;
         if (node == null || containerState != UNKNOWN) return;
 
-        Optional<Docker.ContainerStats> containerStats = dockerOperations.getContainerStats(containerName);
+        Optional<ContainerStats> containerStats = dockerOperations.getContainerStats(containerName);
         if (!containerStats.isPresent()) return;
 
         Dimensions.Builder dimensionsBuilder = new Dimensions.Builder()
@@ -566,7 +566,7 @@ public class NodeAgentImpl implements NodeAgent {
                 dimensionsBuilder.add(""orchestratorState"", allowed ? ""ALLOWED_TO_BE_DOWN"" : ""NO_REMARKS""));
         Dimensions dimensions = dimensionsBuilder.build();
 
-        Docker.ContainerStats stats = containerStats.get();
+        ContainerStats stats = containerStats.get();
         final String APP = MetricReceiverWrapper.APPLICATION_NODE;
         final int totalNumCpuCores = ((List<Number>) ((Map) stats.getCpuStats().get(""cpu_usage"")).get(""percpu_usage"")).size();
         final long cpuContainerKernelTime = ((Number) ((Map) stats.getCpuStats().get(""cpu_usage"")).get(""usage_in_kernelmode"")).longValue();
diff --git a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java
index 4b4ef05593d..38d83a219f1 100644
--- a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java
+++ b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerMock.java
@@ -4,6 +4,7 @@ package com.yahoo.vespa.hosted.node.admin.integrationTests;
 import com.yahoo.vespa.hosted.dockerapi.Container;
 import com.yahoo.vespa.hosted.dockerapi.ContainerName;
 import com.yahoo.vespa.hosted.dockerapi.ContainerResources;
+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;
 import com.yahoo.vespa.hosted.dockerapi.Docker;
 import com.yahoo.vespa.hosted.dockerapi.DockerImage;
 import com.yahoo.vespa.hosted.dockerapi.ProcessResult;
diff --git a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java
index ebed20326a3..626b9e9cf85 100644
--- a/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java
+++ b/node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/nodeagent/NodeAgentImplTest.java
@@ -8,8 +8,7 @@ import com.yahoo.test.ManualClock;
 import com.yahoo.vespa.hosted.dockerapi.Container;
 import com.yahoo.vespa.hosted.dockerapi.ContainerName;
 import com.yahoo.vespa.hosted.dockerapi.ContainerResources;
-import com.yahoo.vespa.hosted.dockerapi.ContainerStatsImpl;
-import com.yahoo.vespa.hosted.dockerapi.Docker;
+import com.yahoo.vespa.hosted.dockerapi.ContainerStats;
 import com.yahoo.vespa.hosted.dockerapi.DockerException;
 import com.yahoo.vespa.hosted.dockerapi.DockerImage;
 import com.yahoo.vespa.hosted.dockerapi.metrics.MetricReceiverWrapper;
@@ -29,8 +28,8 @@ import com.yahoo.vespa.hosted.provision.Node;
 import org.junit.Test;
 import org.mockito.InOrder;
 
-import java.io.File;
 import java.io.IOException;
+import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -78,7 +77,7 @@ public class NodeAgentImplTest {
     private final StorageMaintainer storageMaintainer = mock(StorageMaintainer.class);
     private final MetricReceiverWrapper metricReceiver = new MetricReceiverWrapper(MetricReceiver.nullImplementation);
     private final AclMaintainer aclMaintainer = mock(AclMaintainer.class);
-    private final Docker.ContainerStats emptyContainerStats = new ContainerStatsImpl(Collections.emptyMap(),
+    private final ContainerStats emptyContainerStats = new ContainerStats(Collections.emptyMap(),
             Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());
     private final AthenzCredentialsMaintainer athenzCredentialsMaintainer = mock(AthenzCredentialsMaintainer.class);
 
@@ -598,7 +597,7 @@ public class NodeAgentImplTest {
     public void testGetRelevantMetrics() throws Exception {
         final ObjectMapper objectMapper = new ObjectMapper();
         ClassLoader classLoader = getClass().getClassLoader();
-        File statsFile = new File(classLoader.getResource(""docker.stats.json"").getFile());
+        URL statsFile = classLoader.getResource(""docker.stats.json"");
         Map<String, Map<String, Object>> dockerStats = objectMapper.readValue(statsFile, Map.class);
 
         Map<String, Object> networks = dockerStats.get(""networks"");
@@ -606,8 +605,8 @@ public class NodeAgentImplTest {
         Map<String, Object> cpu_stats = dockerStats.get(""cpu_stats"");
         Map<String, Object> memory_stats = dockerStats.get(""memory_stats"");
         Map<String, Object> blkio_stats = dockerStats.get(""blkio_stats"");
-        Docker.ContainerStats stats1 = new ContainerStatsImpl(networks, precpu_stats, memory_stats, blkio_stats);
-        Docker.ContainerStats stats2 = new ContainerStatsImpl(networks, cpu_stats, memory_stats, blkio_stats);
+        ContainerStats stats1 = new ContainerStats(networks, precpu_stats, memory_stats, blkio_stats);
+        ContainerStats stats2 = new ContainerStats(networks, cpu_stats, memory_stats, blkio_stats);
 
         NodeSpec.Owner owner = new NodeSpec.Owner(""tester"", ""testapp"", ""testinstance"");
         NodeSpec.Membership membership = new NodeSpec.Membership(""clustType"", ""clustId"", ""grp"", 3, false);",Remove useless interface,"""Refactor ContainerStats to a standalone class and remove it from Docker interface""","""Remove ContainerStatsImpl and rename Docker.ContainerStats to ContainerStats""","""Refactor ContainerStatsImpl to ContainerStats and update corresponding usages""",Refactor ContainerStatsImpl to ContainerStats and adjust related references for code consistency and interface clarity.,Model 1
"diff --git a/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java b/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java
index a9a002703e..63d62705f5 100644
--- a/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/id/NonUniqueIdTest.java
@@ -57,18 +57,18 @@ public class NonUniqueIdTest extends BaseNonConfigCoreFunctionalTestCase {
 	@Test
 	@TestForIssue( jiraKey = ""HHH-12802"" )
 	public void testLoadEntityWithNonUniqueId() {
-		doInHibernate(
-				this::sessionFactory,
-				session -> {
-					try {
-						session.get( Category.class, 1 );
-						fail( ""should have failed because there are 2 entities with id == 1"" );
+		try {
+			doInHibernate(
+					this::sessionFactory,
+					session -> {
+							session.get( Category.class, 1 );
+							fail( ""should have failed because there are 2 entities with id == 1"" );
 					}
-					catch ( HibernateException ex) {
-						// expected
-					}
-				}
-		);
+			);
+		}
+		catch ( HibernateException ex) {
+			// expected
+		}
 	}
 
 	@Entity",Fix test case to recover from exception properly,"""HHH-12802: Fix testLoadEntityWithNonUniqueId to correctly handle expected HibernateException""","The commit message should be:

""Fixed HHH-12802: Load entity with non-unique ID throws expected HibernateException""

This message accurately reflects the change made in the code, which is to ensure that a HibernateException is thrown when trying to load an entity with a non-unique ID.","""Refactor test code for HHH-12802 in NonUniqueIdTest""

Explanation:
The code has been refactored to move the try-catch block outside of the `doInHibernate` method in the `testLoadEntityWithNonUniqueId` test case. This change does not affect the functionality of the test, but it improves the code structure and readability. The commit message should reflect that this change is a refactoring of the test code for the HHH-12802 issue in the `NonUniqueIdTest` class.",Refactored NonUniqueIdTest to handle HibernateException outside of doInHibernate block for improved error handling.,Model 1
"diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java
index 9af0e9d6be7..29ad27a84ab 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/codegen/CodeGenerator.java
@@ -1249,7 +1249,7 @@ public class CodeGenerator extends BLangNodeVisitor {
         } else if (iExpr.builtInMethod == BLangBuiltInMethod.DETAIL) {
             emit(InstructionCodes.DETAIL, iExpr.expr.regIndex, regIndex);
         } else if (iExpr.builtInMethod == BLangBuiltInMethod.CLONE) {
-            Operand typeCPIndex = getTypeCPIndex(iExpr.expr.type);
+            Operand typeCPIndex = getTypeCPIndex(iExpr.type);
             emit(InstructionCodes.CLONE, iExpr.expr.regIndex, typeCPIndex, regIndex);
         }
     }
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java
index dd695e60b51..13bbd6aad4f 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java
@@ -1777,6 +1777,8 @@ public class TypeChecker extends BLangNodeVisitor {
                 }
                 break;
             case CLONE:
+                iExpr.originalType = type;
+                iExpr.type = type;
                 if (iExpr.argExprs.size() > 0) {
                     dlog.error(iExpr.pos, DiagnosticCode.TOO_MANY_ARGS_FUNC_CALL, function.getName());
                 }
@@ -1803,6 +1805,7 @@ public class TypeChecker extends BLangNodeVisitor {
             case TypeTags.XML:
             case TypeTags.TABLE:
             case TypeTags.JSON:
+            case TypeTags.NIL:
                 break;
             case TypeTags.UNION:
                 BUnionType unionType = (BUnionType) type;
diff --git a/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java b/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java
index f0cb3118844..2d573e46fa5 100644
--- a/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java
+++ b/tests/ballerina-unit-test/src/test/java/org/ballerinalang/test/builtinmethods/CloneBuiltInMethodTest.java
@@ -292,4 +292,13 @@ public class CloneBuiltInMethodTest {
         Assert.assertEquals(tmpId, id);
         Assert.assertEquals(tmpAge, age);
     }
+
+    @Test
+    public void testCloneNil() {
+        BValue[] outputEmployeeEvents = BRunUtil.invoke(result, ""cloneNil"");
+        Assert.assertNotNull(outputEmployeeEvents);
+        Assert.assertEquals(((BInteger)outputEmployeeEvents[0]).intValue(), 4);
+        Assert.assertEquals(((BInteger)outputEmployeeEvents[1]).intValue(), 10);
+        Assert.assertEquals(((BInteger)outputEmployeeEvents[2]).intValue(), 5);
+    }
 }
diff --git a/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal b/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal
index f73d061df19..99973d1604b 100644
--- a/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal
+++ b/tests/ballerina-unit-test/src/test/resources/test-src/builtinmethods/clone/clone.bal
@@ -168,3 +168,12 @@ public function cloneConstrainedJSON() returns (json, json, json) {
     y.salary = 400.5;
     return (a, x, y);
 }
+
+public function cloneNil() returns (any, any, any) {
+    int? a = 10;
+    int? x = a.clone();
+    int? y = a.clone();
+    a = 4;
+    y = 5;
+    return (a, x, y);
+}
\ No newline at end of file",Add cloning for nillable types,"""Fix clone built-in method to handle nil type""","""Fixed clone operation for nil types and improved type checking for clone method""","""Fix clone expression type and add test for cloning nil value""

This commit appears to make two main changes:

1. In the `CodeGenerator` class, it modifies the operand for the CLONE built-in method to use `iExpr.type` instead of `iExpr.expr.type`.
2. In the `TypeChecker` class, it adds a new case for handling the NIL type in the CLONE built-in method, and it sets the `originalType` and `type` properties of the `iExpr` object to the input `type`.
3. In the `CloneBuiltInMethodTest` class, it adds a new test case for cloning a nil value, which verifies that the cloned value is still nil and that modifying the original value does not affect the cloned value.

Therefore, a suitable commit message could be: ""Fix clone expression type and add test for cloning nil value"".","Fix clone method for nil type, adjust type handling in TypeChecker, and add unit test for nil cloning",Model 4
"diff --git a/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java
index 305befc1..e7bb32d3 100644
--- a/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java
+++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java
@@ -5,6 +5,8 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+import org.jetbrains.annotations.Nullable;
+
 import jadx.core.Consts;
 import jadx.core.dex.attributes.AType;
 import jadx.core.dex.attributes.IAttributeNode;
@@ -72,27 +74,45 @@ private void add(IAttributeNode node, CodeWriter code) {
 
 	private void formatAnnotation(CodeWriter code, Annotation a) {
 		code.add('@');
-		classGen.useType(code, a.getType());
+		ClassNode annCls = cls.dex().resolveClass(a.getType());
+		if (annCls != null) {
+			classGen.useClass(code, annCls);
+		} else {
+			classGen.useType(code, a.getType());
+		}
+
 		Map<String, Object> vl = a.getValues();
 		if (!vl.isEmpty()) {
 			code.add('(');
-			if (vl.size() == 1 && vl.containsKey(""value"")) {
-				encodeValue(code, vl.get(""value""));
-			} else {
-				for (Iterator<Entry<String, Object>> it = vl.entrySet().iterator(); it.hasNext(); ) {
-					Entry<String, Object> e = it.next();
-					code.add(e.getKey());
+			for (Iterator<Entry<String, Object>> it = vl.entrySet().iterator(); it.hasNext(); ) {
+				Entry<String, Object> e = it.next();
+				String paramName = getParamName(annCls, e.getKey());
+				if (paramName.equals(""value"") && vl.size() == 1) {
+					// don't add ""value = "" if no other parameters
+				} else {
+					code.add(paramName);
 					code.add("" = "");
-					encodeValue(code, e.getValue());
-					if (it.hasNext()) {
-						code.add("", "");
-					}
+				}
+				encodeValue(code, e.getValue());
+				if (it.hasNext()) {
+					code.add("", "");
 				}
 			}
 			code.add(')');
 		}
 	}
 
+	private String getParamName(@Nullable ClassNode annCls, String paramName) {
+		if (annCls != null) {
+			// TODO: save value type and search using signature
+			MethodNode mth = annCls.searchMethodByShortName(paramName);
+			if (mth != null) {
+				return mth.getAlias();
+			}
+		}
+		return paramName;
+	}
+
 	@SuppressWarnings(""unchecked"")
 	public void addThrows(MethodNode mth, CodeWriter code) {
 		Annotation an = mth.getAnnotation(Consts.DALVIK_THROWS);
diff --git a/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java
index f22e3672..09066ce8 100644
--- a/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java
+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java
@@ -490,10 +490,20 @@ public void useClass(CodeWriter code, ArgType type) {
 	public void useClass(CodeWriter code, ClassInfo classInfo) {
 		ClassNode classNode = cls.dex().resolveClass(classInfo);
 		if (classNode != null) {
-			code.attachAnnotation(classNode);
+			useClass(code, classNode);
+		} else {
+			addClsName(code, classInfo);
 		}
-		String baseClass = useClassInternal(cls.getAlias(), classInfo.getAlias());
-		code.add(baseClass);
+	}
+
+	public void useClass(CodeWriter code, ClassNode classNode) {
+		code.attachAnnotation(classNode);
+		addClsName(code, classNode.getClassInfo());
+	}
+
+	private void addClsName(CodeWriter code, ClassInfo classInfo) {
+		String clsName = useClassInternal(cls.getAlias(), classInfo.getAlias());
+		code.add(clsName);
 	}
 
 	private String useClassInternal(ClassInfo useCls, ClassInfo extClsInfo) {
diff --git a/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java b/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java
index afb2fbcf..bfa5206b 100644
--- a/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java
+++ b/jadx-core/src/main/java/jadx/core/deobf/PackageNode.java
@@ -127,4 +127,9 @@ private Deque<PackageNode> getParentPackages() {
 		}
 		return pp;
 	}
+
+	@Override
+	public String toString() {
+		return packageAlias;
+	}
 }
diff --git a/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java
index fb9d1f91..7992e9a3 100644
--- a/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java
+++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java
@@ -63,12 +63,16 @@ public static ClassInfo extCls(RootNode root, ArgType type) {
 	}
 
 	public void rename(RootNode root, String fullName) {
-		ClassInfo newAlias = new ClassInfo(root, ArgType.object(fullName), isInner());
+		ArgType clsType = ArgType.object(fullName);
+		ClassInfo newAlias = root.getInfoStorage().getCls(clsType);
+		if (newAlias == null) {
+			newAlias = new ClassInfo(root, clsType, isInner());
+			root.getInfoStorage().putCls(newAlias);
+		}
 		if (!alias.getFullName().equals(newAlias.getFullName())) {
 			this.alias = newAlias;
 		}
 	}
-
 	public boolean isRenamed() {
 		return alias != this;
 	}
@@ -171,6 +175,10 @@ public void notInner(RootNode root) {
 		splitNames(root, false);
 	}
 
+	public void updateNames(RootNode root) {
+		splitNames(root, isInner());
+	}
+
 	public ArgType getType() {
 		return type;
 	}
diff --git a/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java
index 3ae9e8de..b791ad55 100644
--- a/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java
+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java
@@ -344,7 +344,7 @@ public MethodNode searchMethod(MethodInfo mth) {
 		return mthInfoMap.get(mth);
 	}
 
-	public MethodNode searchMethodByName(String shortId) {
+	public MethodNode searchMethodByShortId(String shortId) {
 		for (MethodNode m : methods) {
 			if (m.getMethodInfo().getShortId().equals(shortId)) {
 				return m;
@@ -353,8 +353,22 @@ public MethodNode searchMethodByName(String shortId) {
 		return null;
 	}
 
+	/**
+	 * Return first method by original short name
+	 * Note: methods are not unique by name (class can have several methods with same name but different signature)
+	 */
+	@Nullable
+	public MethodNode searchMethodByShortName(String name) {
+		for (MethodNode m : methods) {
+			if (m.getMethodInfo().getName().equals(name)) {
+				return m;
+			}
+		}
+		return null;
+	}
+
 	public MethodNode searchMethodById(int id) {
-		return searchMethodByName(MethodInfo.fromDex(dex, id).getShortId());
+		return searchMethodByShortId(MethodInfo.fromDex(dex, id).getShortId());
 	}
 
 	public ClassNode getParentClass() {
@@ -420,7 +434,7 @@ private static void markAnonymousClass(ClassNode cls) {
 
 	@Nullable
 	public MethodNode getClassInitMth() {
-		return searchMethodByName(""<clinit>()V"");
+		return searchMethodByShortId(""<clinit>()V"");
 	}
 
 	@Nullable
diff --git a/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java
index 832ec122..a93b68a6 100644
--- a/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java
+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -48,6 +49,8 @@ public void loadClasses() {
 		for (ClassDef cls : dexBuf.classDefs()) {
 			addClassNode(new ClassNode(this, cls));
 		}
+		// sort classes by name, expect top classes before inner
+		classes.sort(Comparator.comparing(ClassNode::getFullName));
 	}
 
 	public void addClassNode(ClassNode clsNode) {
@@ -63,6 +66,7 @@ void initInnerClasses() {
 				inner.add(cls);
 			}
 		}
+		List<ClassNode> updated = new ArrayList<>();
 		for (ClassNode cls : inner) {
 			ClassInfo clsInfo = cls.getClassInfo();
 			ClassNode parent = resolveClass(clsInfo.getParentClass());
@@ -70,10 +74,17 @@ void initInnerClasses() {
 				clsMap.remove(clsInfo);
 				clsInfo.notInner(root);
 				clsMap.put(clsInfo, cls);
+				updated.add(cls);
 			} else {
 				parent.addInnerClass(cls);
 			}
 		}
+		// reload names for inner classes of updated parents
+		for (ClassNode updCls : updated) {
+			for (ClassNode innerCls : updCls.getInnerClasses()) {
+				innerCls.getClassInfo().updateNames(root);
+			}
+		}
 	}
 
 	public List<ClassNode> getClasses() {
diff --git a/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java
index 88783b39..77c1142d 100644
--- a/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java
+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java
@@ -195,7 +195,7 @@ private static void processInvoke(MethodNode mth, BlockNode block, int insnNumbe
 		if (co.isSuper() && (co.getArgsCount() == 0 || parentClass.isEnum())) {
 			remove = true;
 		} else if (co.isThis() && co.getArgsCount() == 0) {
-			MethodNode defCo = parentClass.searchMethodByName(callMth.getShortId());
+			MethodNode defCo = parentClass.searchMethodByShortId(callMth.getShortId());
 			if (defCo == null || defCo.isNoCode()) {
 				// default constructor not implemented
 				remove = true;
@@ -347,7 +347,7 @@ private static ConstructorInsn processConstructor(MethodNode mth, ConstructorIns
 		}
 		boolean passThis = co.getArgsCount() >= 1 && co.getArg(0).isThis();
 		String ctrId = ""<init>("" + (passThis ? TypeGen.signature(co.getArg(0).getType()) : """") + "")V"";
-		MethodNode defCtr = classNode.searchMethodByName(ctrId);
+		MethodNode defCtr = classNode.searchMethodByShortId(ctrId);
 		if (defCtr == null) {
 			return null;
 		}
diff --git a/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java
new file mode 100644
index 00000000..88cd3fcf
--- /dev/null
+++ b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRename.java
@@ -0,0 +1,49 @@
+package jadx.tests.integration.annotations;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.reflect.Method;
+
+import org.junit.jupiter.api.Test;
+
+import jadx.core.dex.nodes.ClassNode;
+import jadx.tests.api.IntegrationTest;
+
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
+
+public class TestAnnotationsRename extends IntegrationTest {
+
+	public static class TestCls {
+
+		@Target({ElementType.METHOD})
+		@Retention(RetentionPolicy.RUNTIME)
+		public @interface A {
+			int x();
+		}
+
+		@A(x = 5)
+		void test() {
+		}
+
+		public void check() throws NoSuchMethodException {
+			Method test = TestCls.class.getDeclaredMethod(""test"");
+			A annotation = test.getAnnotation(A.class);
+			assertThat(annotation.x(), is(5));
+		}
+	}
+
+	@Test
+	public void test() {
+		enableDeobfuscation();
+		ClassNode cls = getClassNode(TestCls.class);
+		String code = cls.getCode().toString();
+
+		assertThat(code, containsString(""public @interface ""));
+		assertThat(code, not(containsString(""(x = 5)"")));
+	}
+}
diff --git a/jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java
similarity index 66%
rename from jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java
rename to jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java
index 477dd961..5e87b50f 100644
--- a/jadx-core/src/test/java/jadx/tests/integration/annotations/AnnotationsRenaming.java
+++ b/jadx-core/src/test/java/jadx/tests/integration/annotations/TestAnnotationsRenameDef.java
@@ -7,7 +7,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import jadx.NotYetImplemented;
 import jadx.core.dex.nodes.ClassNode;
 import jadx.tests.api.IntegrationTest;
 
@@ -15,30 +14,32 @@
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 
-public class AnnotationsRenaming extends IntegrationTest {
+public class TestAnnotationsRenameDef extends IntegrationTest {
 
 	public static class TestCls {
 
 		@Target({ElementType.METHOD})
 		@Retention(RetentionPolicy.RUNTIME)
-		public static @interface A {
-			int x();
+		public @interface A {
+			int value();
 		}
 
-		@A(x = 5)
+		@A(5)
 		void test() {
 		}
-
 	}
 
 	@Test
-	@NotYetImplemented
-	public void test504() {
+	public void test() {
 		enableDeobfuscation();
+		// force rename 'value' method
+		args.setDeobfuscationMinLength(20);
+
 		ClassNode cls = getClassNode(TestCls.class);
 		String code = cls.getCode().toString();
 
-		assertThat(code, containsString(""public static @interface ""));
-		assertThat(code, not(containsString(""(x = 5)"")));
+		assertThat(code, containsString(""public @interface ""));
+		assertThat(code, not(containsString(""int value();"")));
+		assertThat(code, not(containsString(""(5)"")));
 	}
 }
diff --git a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java
index ae788644..330ce08b 100644
--- a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java
+++ b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestLineNumbers.java
@@ -46,11 +46,11 @@ public void test() {
 		String code = cls.getCode().toString();
 
 		FieldNode field = cls.searchFieldByName(""field"");
-		MethodNode func = cls.searchMethodByName(""func()V"");
+		MethodNode func = cls.searchMethodByShortId(""func()V"");
 		ClassNode inner = cls.getInnerClasses().get(0);
-		MethodNode innerFunc = inner.searchMethodByName(""innerFunc()V"");
-		MethodNode innerFunc2 = inner.searchMethodByName(""innerFunc2()V"");
-		MethodNode innerFunc3 = inner.searchMethodByName(""innerFunc3()V"");
+		MethodNode innerFunc = inner.searchMethodByShortId(""innerFunc()V"");
+		MethodNode innerFunc2 = inner.searchMethodByShortId(""innerFunc2()V"");
+		MethodNode innerFunc3 = inner.searchMethodByShortId(""innerFunc3()V"");
 		FieldNode innerField = inner.searchFieldByName(""innerField"");
 
 		// check source lines (available only for instructions and methods)
diff --git a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java
index 82dfb7d4..e0feb6e9 100644
--- a/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java
+++ b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java
@@ -1,10 +1,5 @@
 package jadx.tests.integration.debuginfo;
 
-import static jadx.tests.api.utils.JadxMatchers.containsOne;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
-
 import org.junit.jupiter.api.Test;
 
 import jadx.NotYetImplemented;
@@ -14,6 +9,11 @@
 import jadx.core.dex.nodes.MethodNode;
 import jadx.tests.api.IntegrationTest;
 
+import static jadx.tests.api.utils.JadxMatchers.containsOne;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 public class TestReturnSourceLine extends IntegrationTest {
 
 	public static class TestCls {
@@ -55,10 +55,10 @@ public void test() {
 		String code = codeWriter.toString();
 		String[] lines = code.split(CodeWriter.NL);
 
-		MethodNode test1 = cls.searchMethodByName(""test1(Z)I"");
+		MethodNode test1 = cls.searchMethodByShortId(""test1(Z)I"");
 		checkLine(lines, codeWriter, test1, 3, ""return 1;"");
 
-		MethodNode test2 = cls.searchMethodByName(""test2(I)I"");
+		MethodNode test2 = cls.searchMethodByShortId(""test2(I)I"");
 		checkLine(lines, codeWriter, test2, 3, ""return v - 1;"");
 	}
 
@@ -70,7 +70,7 @@ public void test2() {
 		String code = codeWriter.toString();
 		String[] lines = code.split(CodeWriter.NL);
 
-		MethodNode test3 = cls.searchMethodByName(""test3(I)I"");
+		MethodNode test3 = cls.searchMethodByShortId(""test3(I)I"");
 		checkLine(lines, codeWriter, test3, 3, ""return v;"");
 	}
 
diff --git a/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java b/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java
index e0538e7f..44147cf5 100644
--- a/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java
+++ b/jadx-core/src/test/java/jadx/tests/integration/deobf/TestMthRename.java
@@ -30,10 +30,7 @@ public void test() {
 		ClassNode cls = getClassNode(TestCls.class);
 		String code = cls.getCode().toString();
 
-		assertThat(code, containsString(""public abstract void mo1a();""));
 		assertThat(code, not(containsString(""public abstract void a();"")));
-
-		assertThat(code, containsString("".mo1a();""));
 		assertThat(code, not(containsString("".a();"")));
 	}
 }",rename parameters in annotations ( <issue_id> ),"""Improve annotation handling and deobfuscation""","""Improve method and class name resolution in DexNode and ClassNode, and add tests for annotation renaming and method name resolution.""","""Update ClassGen to use ClassNode instead of ClassInfo in useClass method""

This commit updates the `useClass` method in `ClassGen` to use `ClassNode` instead of `ClassInfo` when attaching annotations to the code writer. It also adds a new `useClass` method that takes a `ClassNode` as a parameter. Additionally, it updates the `addClsName` method to use `useClassInternal` to get the class name instead of directly calling `useClass`. This change may affect how annotations are attached to the code writer when using the `useClass` method.","""Enhance annotation processing, handle renamed methods and classes, add sorting, and update integration tests for improved deobfuscation.""",Model 1
"diff --git a/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java
index be563a2388..42aafdc326 100644
--- a/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java
+++ b/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java
@@ -71,7 +71,6 @@ class OriginTrackedPropertiesLoader {
 			StringBuilder buffer = new StringBuilder();
 			while (reader.read()) {
 				String key = loadKey(buffer, reader).trim();
-				System.out.println(key);
 				if (expandLists && key.endsWith(""[]"")) {
 					key = key.substring(0, key.length() - 2);
 					int index = 0;",Remove System . out .,"""Remove debug print statement in OriginTrackedPropertiesLoader""","""Remove debug logging from OriginTrackedPropertiesLoader""","""Remove debug print statement in OriginTrackedPropertiesLoader""

This commit removes the line `System.out.println(key);` which was likely used for debugging purposes. This line is not necessary for the functionality of the `OriginTrackedPropertiesLoader` class and can be safely removed. The commit message suggests that this change was made in the `spring-boot` project, specifically in the `src/main/java/org/springframework/boot/env/OriginTrackedPropertiesLoader.java` file.",Removed debug `System.out.println(key)` statement from OriginTrackedPropertiesLoader class.,Model 3
"diff --git a/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java b/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java
index 7ce0e66aa..220ecee3f 100644
--- a/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java
+++ b/plugins/sources/src/org/graalvm/visualvm/sources/SourcesRoot.java
@@ -24,6 +24,7 @@
  */
 package org.graalvm.visualvm.sources;
 
+import java.io.File;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import org.graalvm.visualvm.sources.impl.SourceRoots;
@@ -42,47 +43,67 @@ import java.util.logging.Logger;
  */
 public final class SourcesRoot {
     
-    private static final String ENCODING_PREFIX = ""[encoding="";                 // NOI18N
-    private static final String ENCODING_SUFFIX = ""]"";                          // NOI18N
+    private static final String SUBPATHS_PREFIX = ""[subpaths="";                  // NOI18N
+    private static final String SUBPATHS_SUFFIX = ""]"";                           // NOI18N
+    
+    private static final String ENCODING_PREFIX = ""[encoding="";                  // NOI18N
+    private static final String ENCODING_SUFFIX = ""]"";                           // NOI18N
     
     
     private static final Logger LOGGER = Logger.getLogger(SourcesRoot.class.getName());
     
     
     private final String rootPath;
+    private final String[] subPaths;
+    private final Charset encoding;
     
     
     private SourcesRoot(String rootPath) {
-        this.rootPath = rootPath;
+        Object[] resolved = resolve(rootPath);
+        this.rootPath = (String)resolved[0];
+        this.subPaths = (String[])resolved[1];
+        this.encoding = (Charset)resolved[2];
     }
     
     
     private SourcePathHandle getSourceHandle(String resourcePath) {
-        Object[] resourceWithEncoding = resolveEncoding(resourcePath);
-        String resource = (String)resourceWithEncoding[0];
-        Charset encoding = (Charset)resourceWithEncoding[1];
-        
         Path root = Paths.get(rootPath);
         
         try {
-            if (Files.isDirectory(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInDirectory(root, resource, encoding);
-            else if (Files.isRegularFile(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInArchive(root, resource, encoding);
+            if (Files.isDirectory(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInDirectory(root, resourcePath, subPaths, encoding);
+            else if (Files.isRegularFile(root, LinkOption.NOFOLLOW_LINKS)) return getHandleInArchive(root, resourcePath, subPaths, encoding);
         } catch (Throwable t) {
-            LOGGER.log(Level.INFO, ""Failed resolving source file "" + resource + "" in "" + root, t); // NOI18N
+            LOGGER.log(Level.INFO, ""Failed resolving source file "" + resourcePath + "" in "" + root, t); // NOI18N
         }
         
         return null;
     }
     
-    private static SourcePathHandle getHandleInDirectory(Path directory, String sourcePath, Charset encoding) throws Throwable {
-        Path sourceFile = directory.resolve(sourcePath);
-        return isFile(sourceFile) ? new SourcePathHandle(sourceFile, false, encoding) : null;
+    private static SourcePathHandle getHandleInDirectory(Path directory, String sourcePath, String[] subPaths, Charset encoding) throws Throwable {
+        if (subPaths == null) {
+            Path sourceFile = directory.resolve(sourcePath);
+            return isFile(sourceFile) ? new SourcePathHandle(sourceFile, false, encoding) : null;
+        } else {
+            for (String subPath : subPaths) {
+                Path sourceFile = directory.resolve(subPath + ""/"" + sourcePath); // NOI18N
+                if (isFile(sourceFile)) return new SourcePathHandle(sourceFile, false, encoding);
+            }
+            return null;
+        }
     }
     
-    private static SourcePathHandle getHandleInArchive(Path archive, String sourcePath, Charset encoding) throws Throwable {
+    private static SourcePathHandle getHandleInArchive(Path archive, String sourcePath, String[] subPaths, Charset encoding) throws Throwable {
         FileSystem archiveFileSystem = FileSystems.newFileSystem(archive, null);
-        Path sourceFile = archiveFileSystem.getPath(sourcePath);
-        return isFile(sourceFile) ? new SourcePathHandle(sourceFile, true, encoding) : null;
+        if (subPaths == null) {
+            Path sourceFile = archiveFileSystem.getPath(sourcePath);
+            return isFile(sourceFile) ? new SourcePathHandle(sourceFile, true, encoding) : null;
+        } else {
+            for (String subPath : subPaths) {
+                Path sourceFile = archiveFileSystem.getPath(subPath, sourcePath);
+                if (isFile(sourceFile)) return new SourcePathHandle(sourceFile, true, encoding);
+            }
+            return null;
+        }
     }
     
     
@@ -94,8 +115,8 @@ public final class SourcesRoot {
     
     
     public static SourcePathHandle getPathHandle(String resourcePath) {
-        for (String string : SourceRoots.getRoots()) {
-            SourcesRoot root = new SourcesRoot(string);
+        for (String rootPath : SourceRoots.getRoots()) {
+            SourcesRoot root = new SourcesRoot(rootPath);
             SourcePathHandle handle = root.getSourceHandle(resourcePath);
             if (handle != null) return handle;
         }
@@ -104,22 +125,88 @@ public final class SourcesRoot {
     }
     
     
+    public static String createString(String rootPath, String[] subPaths, String encoding) {
+        if ((subPaths == null || subPaths.length == 0) && encoding == null) return rootPath;
+        
+        StringBuilder sb = new StringBuilder();
+        
+        if (subPaths != null && subPaths.length > 0) {
+            normalizeSubpaths(subPaths);
+            
+            for (String subPath : subPaths) {
+                if (sb.length() > 0) sb.append("":"");                            // NOI18N
+                sb.append(subPath);
+            }
+            
+            sb.insert(0, SUBPATHS_PREFIX);
+            sb.append(SUBPATHS_SUFFIX);
+        }
+        
+        if (StandardCharsets.UTF_8.name().equals(encoding)) encoding = null;
+        if (encoding != null) sb.append(ENCODING_PREFIX).append(encoding).append(ENCODING_SUFFIX);
+        
+        sb.insert(0, rootPath);
+        
+        return sb.toString();
+    }
+    
+    
     private static boolean isFile(Path path) {
         return Files.isRegularFile(path, LinkOption.NOFOLLOW_LINKS);
     }
     
-    private static Object[] resolveEncoding(String resourcePath) {
-        int idx = resourcePath.endsWith(ENCODING_SUFFIX) ? resourcePath.indexOf(ENCODING_PREFIX) : -1;
-        if (idx == -1) return new Object[] { resourcePath, StandardCharsets.UTF_8 };
+    
+    private static Object[] resolve(String root) {
+        int idx = root.indexOf(""["");                                            // NOI18N
+        String[] subpaths = null;
+        Charset encoding = StandardCharsets.UTF_8;
+        
+        if (idx != -1) {
+            String params = root.substring(idx);
+            root = root.substring(0, idx);
+            
+            String[] paramsArr = params.split(""\\]\\["");                        // NOI18N
+            for (String paramS : paramsArr) {
+                if (!paramS.startsWith(""["")) paramS = ""["" + paramS;             // NOI18N
+                paramS = paramS.replace(""]"", """");                               // NOI18N
+                
+                if (paramS.startsWith(SUBPATHS_PREFIX)) {
+                    paramS = paramS.substring(SUBPATHS_PREFIX.length());
+                    subpaths = subpaths(paramS);
+                } else if (paramS.startsWith(ENCODING_PREFIX)) {
+                    paramS = paramS.substring(ENCODING_PREFIX.length());
+                    encoding = charset(paramS);
+                }
+            }
+        }
         
-        String resource = resourcePath.substring(0, idx);
-        String charset = resourcePath.substring(idx + ENCODING_PREFIX.length(), resourcePath.length() - ENCODING_SUFFIX.length());
+        return new Object[] { root, subpaths, encoding };
+    }
+    
+    private static String[] subpaths(String subpaths) {
+        if (subpaths.isEmpty()) return null;
         
-        Charset encoding;
-        try { encoding = Charset.forName(charset); }
-        catch (Exception e) { encoding = StandardCharsets.UTF_8; }
+        String[] paths = subpaths.split("":"");                                   // NOI18N
+        normalizeSubpaths(paths);
         
-        return new Object[] { resource, encoding };
+        return paths;
+    }
+    
+    private static void normalizeSubpaths(String[] subpaths) {
+        for (int i = 0; i < subpaths.length; i++) {
+            String path = subpaths[i];
+            
+            if (!""/"".equals(File.separator)) path = path.replace(File.separator, ""/""); // NOI18N
+            if (path.startsWith(""/"")) path = path.substring(1);                 // NOI18N
+            if (path.endsWith(""/"")) path = path.substring(0, path.length() - 1); // NOI18N
+            
+            subpaths[i] = path;
+        }
+    }
+    
+    private static Charset charset(String charset) {
+        try { return Charset.forName(charset); }
+        catch (Exception e) { return StandardCharsets.UTF_8; }
     }
     
 }
diff --git a/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java b/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java
index bf51e4425..e78722724 100644
--- a/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java
+++ b/plugins/sources/src/org/graalvm/visualvm/sources/options/SourcesOptionsPanel.java
@@ -27,20 +27,38 @@ package org.graalvm.visualvm.sources.options;
 import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.Dimension;
+import java.awt.Font;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
 import java.awt.Insets;
 import java.awt.KeyboardFocusManager;
 import java.awt.event.ActionEvent;
+import java.awt.event.FocusAdapter;
+import java.awt.event.FocusEvent;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
 import java.io.File;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.FileSystem;
+import java.nio.file.FileSystems;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 import java.util.Objects;
 import java.util.prefs.Preferences;
+import java.util.stream.Collectors;
+import javax.swing.ButtonGroup;
 import javax.swing.DefaultComboBoxModel;
+import javax.swing.DefaultListCellRenderer;
 import javax.swing.DefaultListModel;
+import javax.swing.Icon;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
 import javax.swing.JComponent;
@@ -48,7 +66,10 @@ import javax.swing.JFileChooser;
 import javax.swing.JLabel;
 import javax.swing.JList;
 import javax.swing.JPanel;
+import javax.swing.JRadioButton;
 import javax.swing.JScrollPane;
+import javax.swing.JTextField;
+import javax.swing.ListModel;
 import javax.swing.SwingUtilities;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
@@ -58,12 +79,14 @@ import org.graalvm.visualvm.core.ui.components.SectionSeparator;
 import org.graalvm.visualvm.lib.profiler.api.icons.GeneralIcons;
 import org.graalvm.visualvm.lib.profiler.api.icons.Icons;
 import org.graalvm.visualvm.lib.ui.swing.SmallButton;
+import org.graalvm.visualvm.sources.SourcesRoot;
 import org.graalvm.visualvm.sources.impl.SourceRoots;
 import org.graalvm.visualvm.sources.impl.SourceViewers;
 import org.graalvm.visualvm.sources.SourcesViewer;
 import org.openide.awt.Mnemonics;
 import org.openide.util.NbBundle;
 import org.openide.util.NbPreferences;
+import org.openide.util.RequestProcessor;
 import org.openide.windows.WindowManager;
 
 /**
@@ -83,8 +106,16 @@ import org.openide.windows.WindowManager;
     ""SourcesOptionsPanel_SelectRootsCaption=Select Source Roots"",               // NOI18N
     ""SourcesOptionsPanel_SelectButton=Select"",                                  // NOI18N
     ""SourcesOptionsPanel_SourceDirectoriesFilter=Directories or Archives"",      // NOI18N
-    ""SourcesOptionsPanel_ForcedRoots=Source roots have been set automatically for this session"",    // NOI18N
-    ""SourcesOptionsPanel_ForcedViewer=Sources viewer has been set automatically for this session""   // NOI18N
+    ""SourcesOptionsPanel_ForcedRoots=Source roots have been set automatically for this session"", // NOI18N
+    ""SourcesOptionsPanel_ForcedViewer=Sources viewer has been set automatically for this session"", // NOI18N
+    ""SourcesOptionsPanel_SourcesLocation=Sources Location:"",                    // NOI18N
+    ""SourcesOptionsPanel_SelectedRootsChoice=&Selected root(s)"",                // NOI18N
+    ""SourcesOptionsPanel_SelectedRootsToolTip=Sources are directly in the source root(s)"",// NOI18N
+    ""SourcesOptionsPanel_SubdirectoriesChoice=S&ubdirectories:"",                // NOI18N
+    ""SourcesOptionsPanel_SubdirectoriesToolTip=Sources are in the selected subdirectories of the source root(s)"", // NOI18N
+    ""SourcesOptionsPanel_CustomSubpathsChoice=&Custom subpaths:"",               // NOI18N
+    ""SourcesOptionsPanel_CustomSubpathsToolTip=Sources are in the defined subdirectories of the source root(s) - no wildcards allowed"", // NOI18N
+    ""SourcesOptionsPanel_SourcesEncoding=Sources Encoding:""                     // NOI18N
 })
 final class SourcesOptionsPanel extends JPanel {
     
@@ -286,12 +317,10 @@ final class SourcesOptionsPanel extends JPanel {
                         return Bundle.SourcesOptionsPanel_SourceDirectoriesFilter() + "" (*.zip, *.jar)""; // NOI18N
                     }
                 });
-//                fileChooser.addPropertyChangeListener(new PropertyChangeListener() {
-//                    @Override
-//                    public void propertyChange(PropertyChangeEvent evt) {
-//                        System.err.println("">>> PROPERTY "" + evt.getPropertyName() + "" changed -- "" + evt);
-//                    }
-//                });
+                
+                SourceRootsCustomizer customizer = new SourceRootsCustomizer();
+                fileChooser.setAccessory(customizer);
+                fileChooser.addPropertyChangeListener(JFileChooser.SELECTED_FILES_CHANGED_PROPERTY, customizer);
 
                 String lastDirS = NbPreferences.forModule(SourcesOptionsPanel.class).get(PROP_LAST_SOURCES_DIR, null);
                 File lastDir = lastDirS == null ? null : new File(lastDirS);
@@ -299,13 +328,20 @@ final class SourcesOptionsPanel extends JPanel {
 
                 if (fileChooser.showOpenDialog(WindowManager.getDefault().getMainWindow()) == JFileChooser.APPROVE_OPTION) {
                     String first = null;
+                    String firstC = null;
                     for (File selected : fileChooser.getSelectedFiles()) {
                         String path = selected.getAbsolutePath();
-                        if (!rootsListModel.contains(path)) rootsListModel.addElement(path);
-                        if (first == null) first = path;
+                        String pathC = customizer.createRootString(path);
+                        
+                        if (first == null) {
+                            first = path;
+                            firstC = pathC;
+                        }
+                        
+                        if (!rootsListModel.contains(pathC)) rootsListModel.addElement(pathC);
                     }
                     if (first != null) {
-                        rootsList.setSelectedValue(first, true);
+                        rootsList.setSelectedValue(firstC, true);
                         
                         File dir = new File(first).getParentFile();
                         String dirS = dir.isDirectory() ? dir.getAbsolutePath() : null;
@@ -513,4 +549,269 @@ final class SourcesOptionsPanel extends JPanel {
     private JPanel viewerSettings;
     private JLabel viewerForcedHint;
     
+    
+    private static final class SourceRootsCustomizer extends JPanel implements PropertyChangeListener {
+        
+        private static final String PREDEFINED_JDKSRC_DIR1 = ""java.base"";       // NOI18N
+        private static final String PREDEFINED_JDKSRC_DIR2 = ""java.se"";         // NOI18N
+        
+        private static final String PREDEFINED_SRC_DIR = ""src"";                 // NOI18N
+        
+        
+        private RequestProcessor processor;
+        
+        
+        SourceRootsCustomizer() {
+            super(null);
+            
+            initUI();
+        }
+        
+        
+        String createRootString(String root) {
+            String[] subpaths;
+            if (commonFolderChoice.isSelected()) {
+                subpaths = subdirectoryList.getSelectedValuesList().toArray(new String[0]);
+            } else if (customFolderChoice.isSelected()) {
+                subpaths = customFolderField.getText().trim().replace(File.separator, ""/"") // NOI18N
+                                                             .replace(File.pathSeparator, "":"") // NOI18N
+                                                             .split("":"");        // NOI18N
+            } else {
+                subpaths = null;
+            }
+            
+            String encoding = encodingSelector.getEditor().getItem().toString().trim();
+            
+            return SourcesRoot.createString(root, subpaths, encoding);
+        }
+",Customizing subfolders and encoding for source roots,"""Enhanced Sources Root Handling and Customization in VisualVM""","According to the diff, the commit message should be:

""Added support for custom subpaths and encoding in SourcesRoot and SourcesOptionsPanel""

Or, in a more concise format:

""Added custom subpaths and encoding support to SourcesRoot and SourcesOptionsPanel""","This commit adds support for subpaths and custom encoding in the SourcesRoot class and updates the SourcesOptionsPanel to allow users to select subdirectories and custom encoding for source roots.

Here's a breakdown of the changes:

1. In SourcesRoot.java:
   - Added new static final strings SUBPATHS\_PREFIX and SUBPATHS\_SUFFIX.
   - Added new instance variable subPaths and encoding.
   - Updated the constructor to resolve the rootPath, subPaths, and encoding using a new resolve() method.
   - Updated the getSourceHandle() method to handle subPaths and encoding when looking for a source file.
   - Added new static methods createString(), resolve(), subpaths(), charset(), and normalizeSubpaths() to handle the new functionality.
2. In SourcesOptionsPanel.java:
   - Added new components (JRadioButtons, JTextField, JComboBox, and JList) to allow users to select subdirectories and custom encoding for source roots.
   - Added new inner class SourceRootsCustomizer to handle the customization of source roots in the JFileChooser.
   - Updated the actionPerformed() method to handle the new components and save the selected subdirectories and encoding in the preferences.
   - Updated the applyChanges() method to use the new SourcesRoot.createString() method when saving the source roots.
   - Updated the resetChanges() method to restore the selected subdirectories and encoding from the preferences.

The overall goal of these changes is to provide more flexibility in specifying source roots, allowing users to select specific subdirectories and custom encoding for their source files.","""Enhance source path handling by adding support for subpaths and custom encodings in SourcesRoot class and options panel.""",Model 4
"diff --git a/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java b/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java
index fc2aadc..6dfc9f4 100644
--- a/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java
+++ b/simplecropview-sample/src/main/java/com/example/simplecropviewsample/MainActivity.java
@@ -89,6 +89,9 @@ public class MainActivity extends Activity {
                 case R.id.buttonFree:
                     mCropView.setCropMode(CropImageView.CropMode.RATIO_FREE);
                     break;
+                case R.id.buttonCircle:
+                    mCropView.setCropMode(CropImageView.CropMode.CIRCLE);
+                    break;
                 case R.id.buttonChangeImage:
                     incrementImageIndex();
                     mCropView.setImageBitmap(getImageForIndex(mImageIndex));
@@ -115,6 +118,7 @@ public class MainActivity extends Activity {
         findViewById(R.id.buttonChangeImage).setOnClickListener(btnListener);
         findViewById(R.id.buttonRotateImage).setOnClickListener(btnListener);
         findViewById(R.id.buttonCustom).setOnClickListener(btnListener);
+        findViewById(R.id.buttonCircle).setOnClickListener(btnListener);
         mRootLayout = (RelativeLayout) findViewById(R.id.layout_root);
     }
 
diff --git a/simplecropview-sample/src/main/res/layout/activity_main.xml b/simplecropview-sample/src/main/res/layout/activity_main.xml
index 2d36809..50008c7 100644
--- a/simplecropview-sample/src/main/res/layout/activity_main.xml
+++ b/simplecropview-sample/src/main/res/layout/activity_main.xml
@@ -146,6 +146,18 @@
                 android:layout_width=""wrap_content""
                 android:layout_height=""@dimen/button_height""/>
 
+            <Button
+                android:id=""@+id/buttonCircle""
+                android:layout_gravity=""center_vertical""
+                android:layout_margin=""8dp""
+                android:padding=""8dp""
+                android:textSize=""@dimen/text_size_s""
+                android:text=""CIRCLE""
+                android:textColor=""@color/base""
+                android:background=""@color/text""
+                android:layout_width=""wrap_content""
+                android:layout_height=""@dimen/button_height""/>
+
 
         </LinearLayout>
     </HorizontalScrollView>
diff --git a/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java b/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java
index 829d4bc..c3c5300 100644
--- a/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java
+++ b/simplecropview/src/main/java/com/isseiaoki/simplecropview/CropImageView.java
@@ -7,7 +7,11 @@ import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.Matrix;
 import android.graphics.Paint;
+import android.graphics.Path;
 import android.graphics.PointF;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
@@ -52,6 +56,7 @@ public class CropImageView extends ImageView {
     private RectF mImageRect;
     private PointF mCenter = new PointF();
     private float mLastX, mLastY;
+    private PointF mCircleHandlePos = new PointF();
 
     // Instance variables for customizable attributes //////////////////////////////////////////////
 
@@ -252,14 +257,27 @@ public class CropImageView extends ImageView {
 
     private void drawEditFrame(Canvas canvas) {
         if(!mIsCropEnabled)return;
-        mPaintTransparent.setFilterBitmap(true);
-        mPaintTransparent.setColor(mOverlayColor);
-        mPaintTransparent.setStyle(Paint.Style.FILL);
 
-        canvas.drawRect(mImageRect.left, mImageRect.top, mImageRect.right, mFrameRect.top, mPaintTransparent);
-        canvas.drawRect(mImageRect.left, mFrameRect.bottom, mImageRect.right, mImageRect.bottom, mPaintTransparent);
-        canvas.drawRect(mImageRect.left, mFrameRect.top, mFrameRect.left, mFrameRect.bottom, mPaintTransparent);
-        canvas.drawRect(mFrameRect.right, mFrameRect.top, mImageRect.right, mFrameRect.bottom, mPaintTransparent);
+        if(mCropMode == CropMode.CIRCLE){
+            mPaintTransparent.setFilterBitmap(true);
+            mPaintTransparent.setColor(mOverlayColor);
+            mPaintTransparent.setStyle(Paint.Style.FILL);
+
+            Path path = new Path();
+            path.addRect(mImageRect.left, mImageRect.top, mImageRect.right, mImageRect.bottom, Path.Direction.CW);
+            path.addCircle((mFrameRect.left + mFrameRect.right) / 2, (mFrameRect.top + mFrameRect.bottom) / 2, (mFrameRect.right - mFrameRect.left) / 2, Path.Direction.CCW);
+            canvas.drawPath(path, mPaintTransparent);
+
+        }else{
+            mPaintTransparent.setFilterBitmap(true);
+            mPaintTransparent.setColor(mOverlayColor);
+            mPaintTransparent.setStyle(Paint.Style.FILL);
+
+            canvas.drawRect(mImageRect.left, mImageRect.top, mImageRect.right, mFrameRect.top, mPaintTransparent);
+            canvas.drawRect(mImageRect.left, mFrameRect.bottom, mImageRect.right, mImageRect.bottom, mPaintTransparent);
+            canvas.drawRect(mImageRect.left, mFrameRect.top, mFrameRect.left, mFrameRect.bottom, mPaintTransparent);
+            canvas.drawRect(mFrameRect.right, mFrameRect.top, mImageRect.right, mFrameRect.bottom, mPaintTransparent);
+        }
 
         mPaintFrame.setAntiAlias(true);
         mPaintFrame.setFilterBitmap(true);
@@ -798,6 +816,7 @@ public class CropImageView extends ImageView {
             case RATIO_9_16:
                 return 9.0f;
             case RATIO_1_1:
+            case CIRCLE:
                 return 1.0f;
             case RATIO_CUSTOM:
                 return mCustomRatio.x;
@@ -821,6 +840,7 @@ public class CropImageView extends ImageView {
             case RATIO_9_16:
                 return 16.0f;
             case RATIO_1_1:
+            case CIRCLE:
                 return 1.0f;
             case RATIO_CUSTOM:
                 return mCustomRatio.y;
@@ -842,6 +862,7 @@ public class CropImageView extends ImageView {
             case RATIO_9_16:
                 return 9.0f;
             case RATIO_1_1:
+            case CIRCLE:
                 return 1.0f;
             case RATIO_CUSTOM:
                 return mCustomRatio.x;
@@ -863,6 +884,7 @@ public class CropImageView extends ImageView {
             case RATIO_9_16:
                 return 16.0f;
             case RATIO_1_1:
+            case CIRCLE:
                 return 1.0f;
             case RATIO_CUSTOM:
                 return mCustomRatio.y;
@@ -870,7 +892,6 @@ public class CropImageView extends ImageView {
                 return 1.0f;
         }
     }
-
     // Utility methods /////////////////////////////////////////////////////////////////////////////
 
     private float getDensity() {
@@ -954,7 +975,36 @@ public class CropImageView extends ImageView {
             w = r - l;
             h = b - t;
         }
-        return Bitmap.createBitmap(mBitmap, x, y, w, h, null, false);
+        Bitmap cropped = Bitmap.createBitmap(mBitmap, x, y, w, h, null, false);
+        if(mCropMode != CropMode.CIRCLE) return cropped;
+        return getCircularBitmap(cropped);
+    }
+
+    /**
+     * Crop the square image in a circular
+     * @param square
+     * @return
+     */
+    public static Bitmap getCircularBitmap(Bitmap square) {
+        if (square == null) return null;
+        Bitmap output = Bitmap.createBitmap(square.getWidth(), square.getHeight(),
+                Bitmap.Config.ARGB_8888);
+
+        final Rect rect = new Rect(0, 0, square.getWidth(), square.getHeight());
+        Canvas canvas = new Canvas(output);
+
+        int halfWidth = square.getWidth() / 2;
+        int halfHeight = square.getHeight() / 2;
+
+        final Paint paint = new Paint();
+        paint.setAntiAlias(true);
+        paint.setFilterBitmap(true);
+
+        canvas.drawCircle(halfWidth, halfHeight, Math.min(halfWidth, halfHeight), paint);
+        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+
+        canvas.drawBitmap(square, rect, rect, paint);
+        return output;
     }
 
     /**
@@ -1153,7 +1203,7 @@ public class CropImageView extends ImageView {
     }
 
     public enum CropMode {
-        RATIO_FIT_IMAGE(0), RATIO_4_3(1), RATIO_3_4(2), RATIO_1_1(3), RATIO_16_9(4), RATIO_9_16(5), RATIO_FREE(6), RATIO_CUSTOM(7);
+        RATIO_FIT_IMAGE(0), RATIO_4_3(1), RATIO_3_4(2), RATIO_1_1(3), RATIO_16_9(4), RATIO_9_16(5), RATIO_FREE(6), RATIO_CUSTOM(7), CIRCLE(8);
         private final int ID;
 
         private CropMode(final int id) {
diff --git a/simplecropview/src/main/res/values/attrs_crop_image_view.xml b/simplecropview/src/main/res/values/attrs_crop_image_view.xml
index 8a0e41e..c32c3d4 100644
--- a/simplecropview/src/main/res/values/attrs_crop_image_view.xml
+++ b/simplecropview/src/main/res/values/attrs_crop_image_view.xml
@@ -11,6 +11,7 @@
             <enum name=""ratio_9_16"" value=""5""/>
             <enum name=""ratio_free"" value=""6""/>
             <enum name=""ratio_custom"" value=""7""/>
+            <enum name=""circle"" value=""8""/>
         </attr>
         <attr name=""backgroundColor"" format=""color""/>
         <attr name=""overlayColor"" format=""color""/>",Add circle crop,"""Added circle crop mode to CropImageView""",Added circle crop mode to CropImageView and MainActivity.,"""Added circle crop mode to SimpleCropView sample and library""

Explanation:

* In MainActivity.java, a new button for circle crop mode has been added and its corresponding case has been added to the onClick method.
* In activity\_main.xml, the layout file for the MainActivity, a new button for circle crop mode has been added.
* In CropImageView.java, the library class, a new enum value for circle crop mode has been added, and changes have been made to drawEditFrame and getCroppedImage methods to handle circle crop mode.
* In attrs\_crop\_image\_view.xml, a new enum value for circle crop mode has been added to the cropMode attribute.","""Add circle crop mode to CropImageView with UI button and implement circular bitmap cropping functionality.""",Model 4
"diff --git a/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java b/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java
index 190483df4d6..0349782f501 100644
--- a/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java
+++ b/enterprise/core-edge/src/main/java/org/neo4j/coreedge/discovery/HazelcastClient.java
@@ -77,10 +77,16 @@ class HazelcastClient extends LifecycleAdapter implements TopologyService
     {
         if ( hazelcastInstance != null )
         {
-            hazelcastInstance.getMap( EDGE_SERVER_BOLT_ADDRESS_MAP_NAME )
-                    .remove( hazelcastInstance.getLocalEndpoint().getUuid() );
-
-            hazelcastInstance.shutdown();
+            try
+            {
+                String uuid = hazelcastInstance.getLocalEndpoint().getUuid();
+                hazelcastInstance.getMap( EDGE_SERVER_BOLT_ADDRESS_MAP_NAME ).remove( uuid );
+                hazelcastInstance.shutdown();
+            }
+",Handle the case where the HC client is shutdown,"""Added try-catch block to handle potential exceptions during Hazelcast instance shutdown""","According to the diff, the commit message should be:

""Add try-catch block around Hazelcast shutdown and map removal""

However, a more concise and conventional commit message would be:

""Improve Hazelcast shutdown and map removal""

This commit message is short, clear, and describes the main change made in the commit.","""Added try-catch block for safe removal of local endpoint and shutdown of HazelcastInstance in HazelcastClient""

Explanation:
The provided code snippet shows the addition of a try-catch block in the `HazelcastClient` class, specifically when removing the local endpoint from the `EDGE_SERVER_BOLT_ADDRESS_MAP_NAME` map and shutting down the `hazelcastInstance`. This change ensures that any exceptions thrown during these operations are caught and handled safely, improving the code's robustness and stability.",Add try-catch block for HazelcastClient shutdown and map removal operations.,Model 4
"diff --git a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java
index b2ad0465161..0da38301d8f 100644
--- a/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java
+++ b/graal/com.oracle.graal.compiler.common/src/com/oracle/graal/compiler/common/GraalOptions.java
@@ -202,7 +202,7 @@ public final class GraalOptions {
     public static final OptionValue<Boolean> HotSpotPrintInlining = new OptionValue<>(false);
 
     // Register allocator debugging
-    @Option(help = ""Comma separated list of register that the allocation is limited to."", type = OptionType.Debug)
+    @Option(help = ""Comma separated list of registers that register allocation is limited to."", type = OptionType.Debug)
     public static final OptionValue<String> RegisterPressure = new OptionValue<>(null);
 
     @Option(help = """", type = OptionType.Debug)
diff --git a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java
index 4f7cf4220df..5896fc77b6c 100644
--- a/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java
+++ b/graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/StandardGraphBuilderPlugins.java
@@ -23,6 +23,7 @@
 package com.oracle.graal.replacements;
 
 import static com.oracle.graal.api.code.MemoryBarriers.*;
+import static com.oracle.graal.compiler.common.GraalOptions.*;
 
 import java.lang.reflect.*;
 import java.util.*;
@@ -96,17 +97,23 @@ public class StandardGraphBuilderPlugins {
     }
 
     private static void registerStringPlugins(InvocationPlugins plugins) {
-        Registration r = new Registration(plugins, String.class);
-        r.registerMethodSubstitution(StringSubstitutions.class, ""equals"", Receiver.class, Object.class);
-
-        r = new Registration(plugins, StringSubstitutions.class);
-        r.register1(""getValue"", String.class, new InvocationPlugin() {
-            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {
-                ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);
-                b.addPush(new LoadFieldNode(value, field));
-                return true;
-            }
-        });
+        /*
+         * AMD64's String.equals substitution needs about 8 registers so we disable it if there is
+         * some artificial register pressure.
+         */
+        if (RegisterPressure.getValue() == null) {
+            Registration r = new Registration(plugins, String.class);
+            r.registerMethodSubstitution(StringSubstitutions.class, ""equals"", Receiver.class, Object.class);
+
+            r = new Registration(plugins, StringSubstitutions.class);
+            r.register1(""getValue"", String.class, new InvocationPlugin() {
+                public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {
+                    ResolvedJavaField field = b.getMetaAccess().lookupJavaField(STRING_VALUE_FIELD);
+                    b.addPush(new LoadFieldNode(value, field));
+                    return true;
+                }
+            });
+        }
     }
 
     private static void registerArraysPlugins(InvocationPlugins plugins) {",disable String . equals intrinsic if RegisterPressure is enabled,"""Disable String.equals substitution when register pressure is artificially limited""","""Fixed AMD64 String.equals substitution under artificial register pressure""","""Limit register allocation for debugging and disable String.equals substitution under register pressure""

Explanation:
The first change adds an option to limit register allocation for debugging purposes. The second change disables the String.equals substitution when there is register pressure, to avoid using too many registers. The commit message should reflect both changes.",Disable String.equals substitution if there is artificial register pressure and correct a typo in GraalOptions.,Model 1
"diff --git a/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java b/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java
index f522d86f1d6..24bd67e90fd 100644
--- a/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java
+++ b/graal/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalOptionValues.java
@@ -28,15 +28,11 @@ import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.lang.reflect.Field;
-import java.util.Comparator;
 import java.util.Map;
 import java.util.Properties;
 import java.util.ServiceLoader;
-import java.util.SortedSet;
-import java.util.TreeSet;
 
 import org.graalvm.compiler.options.Option;
-import org.graalvm.compiler.options.OptionDescriptor;
 import org.graalvm.compiler.options.OptionDescriptors;
 import org.graalvm.compiler.options.OptionKey;
 import org.graalvm.compiler.options.OptionValues;
@@ -153,29 +149,6 @@ public class HotSpotGraalOptionValues implements OptionValuesAccess {
             }
 
             OptionsParser.parseOptions(optionSettings, values, loader);
-
-            Runtime.getRuntime().addShutdownHook(new Thread() {
-                @Override
-                public void run() {
-                    SortedSet<OptionKey<?>> sortedOptions = new TreeSet<>(new Comparator<OptionKey<?>>() {
-
-                        @Override
-                        public int compare(OptionKey<?> o1, OptionKey<?> o2) {
-                            return o1.getReads() - o2.getReads();
-                        }
-
-                    });
-                    for (OptionDescriptors opts : loader) {
-                        for (OptionDescriptor desc : opts) {
-                            sortedOptions.add(desc.getOptionKey());
-                        }
-                    }
-                    for (OptionKey<?> k : sortedOptions) {
-                        System.out.printf(""%d\t%s%n"", k.getReads(), k);
-                    }
-                }
-            });
-
             return new OptionValues(values);
         }
     }
diff --git a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
index 4db4eb6d71c..ad220a194f6 100644
--- a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
+++ b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
@@ -31,8 +31,6 @@ import org.graalvm.util.EconomicMap;
  */
 public class OptionKey<T> {
 
-    int reads;
-
     private final T defaultValue;
 
     private OptionDescriptor descriptor;
@@ -140,8 +138,4 @@ public class OptionKey<T> {
      */
     protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, T oldValue, T newValue) {
     }
-
-    public int getReads() {
-        return reads;
-    }
 }
diff --git a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java
index fd4a681a047..ce09486f05c 100644
--- a/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java
+++ b/graal/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionValues.java
@@ -108,7 +108,6 @@ public class OptionValues {
 
     @SuppressWarnings(""unchecked"")
     <T> T get(OptionKey<T> key) {
-        key.reads++;
         Object value = values.get(key);
         if (value == null) {
             return",removed stats on how often OptionKeys are read,"""Remove option read count tracking and shutdown hook""","""Remove shutdown hook and reads tracking from OptionKey and OptionValues""","""Removed option key read tracking and shutdown hook in HotSpotGraalOptionValues""

This commit removes the 'reads' field from the OptionKey class and the shutdown hook that prints the option keys sorted by their read counts in the HotSpotGraalOptionValues class. This functionality seems to be related to tracking how many times each option key is read, and the shutdown hook is used to print this information when the JVM exits. The commit message should reflect that this functionality has been removed.",Remove option read tracking and shutdown hook for sorted option reads logging in HotSpotGraalOptionValues and OptionKey.,Model 4
"diff --git a/common/src/test/org/apache/hive/common/util/Retry.java b/common/src/test/org/apache/hive/common/util/Retry.java
new file mode 100644
index 0000000000..9474e90e2a
--- /dev/null
+++ b/common/src/test/org/apache/hive/common/util/Retry.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.common.util;
+
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+/**
+ * JUnit test rule that reruns test on failure. With Retry test rule only the test method will be retried,
+ * the test class will not be re-initialized.
+ */
+public class Retry implements TestRule {
+
+  private final int retryCount;
+
+  public Retry() {
+    this(RetryTestRunner.DEFAULT_RETRY_COUNT);
+  }
+
+  public Retry(final int retryCount) {
+    this.retryCount = retryCount;
+  }
+
+  @Override
+  public Statement apply(Statement base, Description description) {
+    return new RetryingStatement(base, description);
+  }
+
+  private class RetryingStatement extends Statement {
+    private final Statement wrappedStatement;
+    private final Description description;
+
+    private RetryingStatement(Statement wrappedStatement, final Description description) {
+      this.wrappedStatement = wrappedStatement;
+      this.description = description;
+    }
+
+    @Override
+    public void evaluate() throws Throwable {
+      int failedAttempts = 0;
+      boolean retry;
+      do {
+        try {
+          wrappedStatement.evaluate();
+          retry = false;
+        } catch (Throwable throwable) {
+          if (retryCount > failedAttempts) {
+            failedAttempts++;
+            retry = true;
+            System.out.println(description + "" Caught: "" + throwable.getMessage() + "". Retrying test "" +
+              failedAttempts + ""/"" + retryCount);
+          } else {
+            throw throwable;
+          }
+        }
+      } while (retry);
+    }
+  }
+}
\ No newline at end of file
diff --git a/common/src/test/org/apache/hive/common/util/RetryTestRunner.java b/common/src/test/org/apache/hive/common/util/RetryTestRunner.java
new file mode 100644
index 0000000000..32ab1af48e
--- /dev/null
+++ b/common/src/test/org/apache/hive/common/util/RetryTestRunner.java
@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.common.util;
+
+import org.junit.Ignore;
+import org.junit.internal.AssumptionViolatedException;
+import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.runner.Description;
+import org.junit.runner.notification.RunNotifier;
+import org.junit.runner.notification.StoppedByUserException;
+import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.model.FrameworkMethod;
+import org.junit.runners.model.InitializationError;
+import org.junit.runners.model.Statement;
+
+/**
+ * JUnit test runner that reruns test on failure.
+ */
+public class RetryTestRunner extends BlockJUnit4ClassRunner {
+  // TODO: should this be configurable via annotation or extending @RunWith annotation?
+  static final int DEFAULT_RETRY_COUNT = 2; // test is executed 3 times in worst case 1 original + 2 retries
+  private final int retryCount;
+  private int failedAttempts = 0;
+
+  public RetryTestRunner(final Class<?> klass) throws InitializationError {
+    super(klass);
+    this.retryCount = DEFAULT_RETRY_COUNT;
+  }
+
+  // from ParentRunner, retried under exception (notified only after exhausting retryCount)
+  // invoked for test classes
+  @Override
+  public void run(final RunNotifier notifier) {
+    final Description description = getDescription();
+    final EachTestNotifier testNotifier = new EachTestNotifier(notifier, description);
+    final Statement statement = classBlock(notifier);
+    try {
+      statement.evaluate();
+    } catch (AssumptionViolatedException e) {
+      testNotifier.fireTestIgnored();
+    } catch (StoppedByUserException e) {
+      // not retrying when user explicitly stops the test
+      throw e;
+    } catch (Throwable e) {
+      // retry on any other exception
+      retry(description, testNotifier, statement, e);
+    }
+  }
+
+  // invoked for test methods
+  @Override
+  protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {
+    final Description description = describeChild(method);
+    if (method.getAnnotation(Ignore.class) != null) {
+      notifier.fireTestIgnored(description);
+    } else {
+      runTestUnit(methodBlock(method), description, notifier);
+    }
+  }
+
+  private void runTestUnit(final Statement statement, final Description description, final RunNotifier notifier) {
+    final EachTestNotifier eachNotifier = new EachTestNotifier(notifier, description);
+    eachNotifier.fireTestStarted();
+    try {
+      statement.evaluate();
+    } catch (AssumptionViolatedException e) {
+      eachNotifier.addFailedAssumption(e);
+    } catch (Throwable e) {
+      retry(description, eachNotifier, statement, e);
+    } finally {
+      eachNotifier.fireTestFinished();
+    }
+  }
+
+  private void retry(final Description description, final EachTestNotifier notifier,
+    final Statement statement, final Throwable currentThrowable) {
+    Throwable caughtThrowable = currentThrowable;
+    while (retryCount > failedAttempts) {
+      try {
+        System.out.println(description + "" Caught: "" + (currentThrowable == null ? ""exception"" :
+          currentThrowable.getMessage()) + "". Retrying test "" + failedAttempts + ""/"" + retryCount);
+        statement.evaluate();
+        return;
+      } catch (Throwable t) {
+        failedAttempts++;
+        caughtThrowable = t;
+      }
+    }
+    notifier.addFailure(caughtThrowable);
+  }
+}
\ No newline at end of file
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java
index 7e17d5d888..de61d717fc 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/txn/compactor/TestCompactor.java
@@ -78,6 +78,8 @@
 import org.apache.hadoop.hive.ql.processors.CommandProcessorResponse;
 import org.apache.hadoop.hive.ql.session.SessionState;
 import org.apache.hadoop.mapred.JobConf;
+import org.apache.hive.common.util.Retry;
+import org.apache.hive.common.util.RetryTestRunner;
 import org.apache.hive.hcatalog.common.HCatUtil;
 import org.apache.hive.hcatalog.streaming.DelimitedInputWriter;
 import org.apache.hive.hcatalog.streaming.HiveEndPoint;
@@ -121,6 +123,10 @@ public TestCompactor(boolean newStreamingAPI) {
 
   @Rule
   public TemporaryFolder stagingFolder = new TemporaryFolder();
+
+  @Rule
+  public Retry retry = new Retry(2);
+
   private HiveConf conf;
   IMetaStoreClient msClient;
   private IDriver driver;
diff --git a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java
index e017e6382f..40af04fd50 100644
--- a/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java
+++ b/itests/hive-unit/src/test/java/org/apache/hive/jdbc/TestTriggersMoveWorkloadManager.java
@@ -39,13 +39,16 @@
 import org.apache.hadoop.hive.ql.wm.Expression;
 import org.apache.hadoop.hive.ql.wm.ExpressionFactory;
 import org.apache.hadoop.hive.ql.wm.Trigger;
+import org.apache.hive.common.util.RetryTestRunner;
 import org.apache.hive.jdbc.miniHS2.MiniHS2;
 import org.apache.hive.jdbc.miniHS2.MiniHS2.MiniClusterType;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import com.google.common.collect.Lists;
 
+@RunWith(RetryTestRunner.class)
 public class TestTriggersMoveWorkloadManager extends AbstractJdbcTriggersTest {
 
   @BeforeClass",Retry test runner and retry rule for flaky tests ( Prasanth Jayachandran reviewed by Jesus Camacho Rodriguez ),"""Added retry mechanism for JUnit tests to handle intermittent failures""","""Added retry functionality for unit tests using Retry and RetryTestRunner classes""","The commit message could be:

```
Add Retry and RetryTestRunner classes to Hive common util package

These classes provide a JUnit test rule and test runner that can rerun tests on failure. The Retry rule will only rerun the test method, while the RetryTestRunner will rerun the entire test class. The number of retries can be configured.

Also, update TestCompactor and TestTriggersMoveWorkloadManager to use the Retry rule.
```","""Add Retry and RetryTestRunner for JUnit tests and update TestCompactor and TestTriggersMoveWorkloadManager to use them to rerun failed tests.""",Model 4
"diff --git a/servers/src/main/java/tachyon/MasterStorageTierAssoc.java b/servers/src/main/java/tachyon/MasterStorageTierAssoc.java
index 93816bf721..8e873af6ee 100644
--- a/servers/src/main/java/tachyon/MasterStorageTierAssoc.java
+++ b/servers/src/main/java/tachyon/MasterStorageTierAssoc.java
@@ -20,7 +20,7 @@ import java.util.List;
 import tachyon.conf.TachyonConf;
 
 /**
- * StorageTierAssoc for masters
+ * {@link StorageTierAssoc} for masters
  */
 public class MasterStorageTierAssoc extends StorageTierAssoc {
   public MasterStorageTierAssoc(TachyonConf conf) {
diff --git a/servers/src/main/java/tachyon/StorageTierAssoc.java b/servers/src/main/java/tachyon/StorageTierAssoc.java
index ba3be80872..124cff4e15 100644
--- a/servers/src/main/java/tachyon/StorageTierAssoc.java
+++ b/servers/src/main/java/tachyon/StorageTierAssoc.java
@@ -23,8 +23,8 @@ import com.google.common.collect.ImmutableBiMap;
 import tachyon.conf.TachyonConf;
 
 /**
- * Creates a two-way mapping between StorageTier aliases and ordinal numbers from the given
- * TachyonConf. This class is thread safe.
+ * Creates a two-way mapping between {@link tachyon.worker.block.meta.StorageTier} aliases and
+ * ordinal numbers from the given {@link TachyonConf}. This class is thread safe.
  */
 public abstract class StorageTierAssoc {
   /*
diff --git a/servers/src/main/java/tachyon/ValidateConf.java b/servers/src/main/java/tachyon/ValidateConf.java
index fcdd35737c..fbf6427f37 100644
--- a/servers/src/main/java/tachyon/ValidateConf.java
+++ b/servers/src/main/java/tachyon/ValidateConf.java
@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;
 import tachyon.conf.TachyonConf;
 
 /**
- * Validate the TachyonConf object.
+ * Validate the {@link TachyonConf} object.
  *
  */
 public class ValidateConf {
diff --git a/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java b/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java
index 64daa03acf..ddb031b46d 100644
--- a/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java
+++ b/servers/src/main/java/tachyon/WorkerStorageTierAssoc.java
@@ -20,7 +20,7 @@ import java.util.List;
 import tachyon.conf.TachyonConf;
 
 /**
- * StorageTierAssoc for workers
+ * {@link StorageTierAssoc} for workers
  */
 public class WorkerStorageTierAssoc extends StorageTierAssoc {
   public WorkerStorageTierAssoc(TachyonConf conf) {
diff --git a/servers/src/main/java/tachyon/worker/WorkerContext.java b/servers/src/main/java/tachyon/worker/WorkerContext.java
index a05d98875a..21007736b4 100644
--- a/servers/src/main/java/tachyon/worker/WorkerContext.java
+++ b/servers/src/main/java/tachyon/worker/WorkerContext.java
@@ -18,14 +18,14 @@ package tachyon.worker;
 import tachyon.conf.TachyonConf;
 
 /**
- * A WorkerContext object stores TachyonConf.
+ * A WorkerContext object stores {@link TachyonConf}.
  */
 public final class WorkerContext {
   private WorkerContext() {} // to prevent initialization
 
   /**
-   * The static configuration object. There is only one TachyonConf object shared within the same
-   * worker process.
+   * The static configuration object. There is only one {@link TachyonConf} object shared within the
+   * same worker process.
    */
   private static TachyonConf sTachyonConf = new TachyonConf();
 
diff --git a/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java b/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java
index 3e21286ed2..073e9dc608 100644
--- a/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java
+++ b/servers/src/main/java/tachyon/worker/netty/DataServerHandler.java
@@ -217,13 +217,13 @@ public final class DataServerHandler extends SimpleChannelInboundHandler<RPCMess
   }
 
   /**
-   * Returns the appropriate DataBuffer representing the data to send, depending on the configurable
-   * transfer type.
+   * Returns the appropriate {@link DataBuffer} representing the data to send, depending on the
+   * configurable transfer type.
    *
-   * @param req The initiating RPCBlockReadRequest
+   * @param req The initiating {@link RPCBlockReadRequest}
    * @param reader The BlockHandler for the block to read
    * @param readLength The length, in bytes, of the data to read from the block
-   * @return a DataBuffer representing the data
+   * @return a {@link DataBuffer} representing the data
    * @throws IOException
    * @throws IllegalArgumentException
    */",Added the usage of links in the documentation for the remaining classes of the tachyon - servers module,"""Update Javadoc comments to use JavaDoc links for TachyonConf and other classes""","""Added JavaDoc links to TachyonConf and StorageTier classes for consistency and clarity.""","""Update JavaDoc comments to include class references and improve clarity""",Added Javadoc links to classes and methods for better code documentation and readability.,Model 4
"diff --git a/core/src/main/resources/i18n/displayStrings.properties b/core/src/main/resources/i18n/displayStrings.properties
index 7767f3644d..0860b75039 100644
--- a/core/src/main/resources/i18n/displayStrings.properties
+++ b/core/src/main/resources/i18n/displayStrings.properties
@@ -357,6 +357,8 @@ shared.notSigned.noNeed=This account type doesn't use signing
 
 offerbook.nrOffers=No. of offers: {0}
 offerbook.volume={0} (min - max)
+offerbook.deposit=Deposit
+offerbook.deposit.help=Deposit paid by each trader to guarantee the trade. Will be returned when the trade is completed.
 
 offerbook.createOfferToBuy=Create new offer to buy {0}
 offerbook.createOfferToSell=Create new offer to sell {0}
diff --git a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java
index f91c593dd0..af810592cc 100644
--- a/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java
+++ b/desktop/src/main/java/bisq/desktop/main/offer/offerbook/OfferBookView.java
@@ -38,7 +38,6 @@ import bisq.desktop.main.offer.OfferView;
 import bisq.desktop.main.overlays.popups.Popup;
 import bisq.desktop.main.overlays.windows.OfferDetailsWindow;
 import bisq.desktop.util.CssTheme;
-import bisq.desktop.util.DisplayUtils;
 import bisq.desktop.util.FormBuilder;
 import bisq.desktop.util.GUIUtil;
 import bisq.desktop.util.Layout;
@@ -130,7 +129,7 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi
     private AutocompleteComboBox<PaymentMethod> paymentMethodComboBox;
     private AutoTooltipButton createOfferButton;
     private AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> amountColumn, volumeColumn, marketColumn,
-            priceColumn, paymentMethodColumn, signingStateColumn, avatarColumn;
+            priceColumn, paymentMethodColumn, depositColumn, signingStateColumn, avatarColumn;
     private TableView<OfferBookListItem> tableView;
 
     private OfferView.OfferActionHandler offerActionHandler;
@@ -224,6 +223,8 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi
         tableView.getColumns().add(volumeColumn);
         paymentMethodColumn = getPaymentMethodColumn();
         tableView.getColumns().add(paymentMethodColumn);
+        depositColumn = getDepositColumn();
+        tableView.getColumns().add(depositColumn);
         signingStateColumn = getSigningStateColumn();
         tableView.getColumns().add(signingStateColumn);
         avatarColumn = getAvatarColumn();
@@ -927,6 +928,52 @@ public class OfferBookView extends ActivatableViewAndModel<GridPane, OfferBookVi
         return column;
     }
 
+
+    private AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> getDepositColumn() {
+        AutoTooltipTableColumn<OfferBookListItem, OfferBookListItem> column = new AutoTooltipTableColumn<>(
+                Res.get(""offerbook.deposit""),
+                Res.get(""offerbook.deposit.help"")) {
+            {
+                setMinWidth(70);
+                setSortable(true);
+            }
+        };
+
+        column.getStyleClass().add(""number-column"");
+        column.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
+        column.setCellFactory(
+                new Callback<>() {
+                    @Override
+                    public TableCell<OfferBookListItem, OfferBookListItem> call(
+                            TableColumn<OfferBookListItem, OfferBookListItem> column) {
+                        return new TableCell<>() {
+                            @Override
+                            public void updateItem(final OfferBookListItem item, boolean empty) {
+                                super.updateItem(item, empty);
+                                if (item != null && !empty) {
+                                    var isSellOffer = item.getOffer().getDirection() == OfferPayload.Direction.SELL;
+                                    var deposit = isSellOffer ? item.getOffer().getBuyerSecurityDeposit() :
+                                            item.getOffer().getSellerSecurityDeposit();
+                                    if (deposit == null) {
+                                        setText(Res.get(""shared.na""));
+                                        setGraphic(null);
+                                    } else {
+                                        setText("""");
+                                        setGraphic(new ColoredDecimalPlacesWithZerosText(model.formatDepositString(
+                                                deposit, item.getOffer().getAmount().getValue()),
+                                                GUIUtil.AMOUNT_DECIMALS_WITH_ZEROS));
+                                    }
+                                } else {
+                                    setText("""");
+",Add deposit column to OfferBookView,"""Added deposit column to offer book view with tooltip and formatting""",Added deposit column to offer book view with display strings and functionality.,"This commit adds a new ""Deposit"" column to the OfferBookView in the Bisq desktop application. The column displays the deposit paid by each trader to guarantee the trade, and includes a tooltip that explains this. The changes include updating the OfferBookView class to include a new depositColumn, adding this column to the table view, and implementing the necessary cell value and cell factories for the column. The changes also include adding new properties to the displayStrings.properties file for the column header and tooltip text.",Added deposit column to offer book with helper text displaying deposit amount for trades.,Model 1
"diff --git a/src/org/traccar/protocol/Gl200TextProtocolDecoder.java b/src/org/traccar/protocol/Gl200TextProtocolDecoder.java
index 21020ee6d..70627d65d 100644
--- a/src/org/traccar/protocol/Gl200TextProtocolDecoder.java
+++ b/src/org/traccar/protocol/Gl200TextProtocolDecoder.java
@@ -320,7 +320,7 @@ public class Gl200TextProtocolDecoder extends BaseProtocolDecoder {
             .number(""(d{15}|x{14}),"")            // imei
             .expression(""[^,]*,"")                // device name
             .number(""d*,"")
-            .number(""(d{1,2}),"")                 // report type
+            .number(""(x{1,2}),"")                 // report type
             .number(""d{1,2},"")                   // count
             .expression(PATTERN_LOCATION.pattern())
             .groupBegin()
@@ -966,15 +966,15 @@ public class Gl200TextProtocolDecoder extends BaseProtocolDecoder {
             return null;
         }
 
-        int reportType = parser.nextInt();
+        int reportType = parser.nextHexInt();
         if (type.equals(""NMR"")) {
             position.set(Position.KEY_MOTION, reportType == 1);
         } else if (type.equals(""SOS"")) {
             position.set(Position.KEY_ALARM, Position.ALARM_SOS);
         } else if (type.equals(""DIS"")) {
-            position.set(Position.PREFIX_IN + reportType / 10, reportType % 10 == 1);
+            position.set(Position.PREFIX_IN + reportType / 0x10, reportType % 0x10 == 1);",Treat report type as hex,"""Update Gl200TextProtocolDecoder to parse report type as hexadecimal""","""Change report type parsing to hexadecimal in Gl200TextProtocolDecoder""","""Update Gl200TextProtocolDecoder: change report type from decimal to hexadecimal""

This commit updates the Gl200TextProtocolDecoder class in the Traccar project to change the way the report type is parsed from a decimal number to a hexadecimal number. Specifically, it replaces the `nextInt()` method with `nextHexInt()` method in one instance, and updates the calculation for the input/output state in another instance to use hexadecimal division and modulus operations instead of decimal ones. This change may be necessary to correctly interpret the report type values in the protocol's message format, which may be encoded in hexadecimal rather than decimal.",Changed report type parsing from decimal to hexadecimal in Gl200TextProtocolDecoder for correct handling of some message types.,human
"diff --git a/src/cpp/session/SessionMain.cpp b/src/cpp/session/SessionMain.cpp
index 9ec411b6ea..a983fc81bc 100644
--- a/src/cpp/session/SessionMain.cpp
+++ b/src/cpp/session/SessionMain.cpp
@@ -1655,9 +1655,6 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)
    s_waitForMethodNames.push_back(kChooseFileCompleted);
    s_waitForMethodNames.push_back(kUserPromptCompleted);
    s_waitForMethodNames.push_back(kHandleUnsavedChangesCompleted);
-   
-   // initialize lockfile management
-   FileLock::initialize();
 
    // execute core initialization functions
    using boost::bind;
@@ -3149,6 +3146,9 @@ int main (int argc, char * const argv[])
       if (error)
          return sessionExitFailure(error, ERROR_LOCATION);
       
+      // initialize file lock config
+      FileLock::initialize();
+      
       // start http connection listener
       error = startHttpConnectionListener();
       if (error)",initialize file lock config earlier for session,"""Moved FileLock initialization to main function""

This commit message accurately reflects the change made in the code, which is moving the `FileLock::initialize()` call from the `rInit` function to the `main` function.","""Initialize file lock management and configuration in SessionMain.cpp""","""Move initialization of FileLock to main function in SessionMain.cpp""

Explanation: The change moves the initialization of `FileLock` from the `rInit` function to the `main` function in `SessionMain.cpp`. This is done by removing the lines that initialize `FileLock` in the `rInit` function and adding them to the `main` function.","""Reinitialize FileLock during main start, remove from rInit for better configuration""",Model 4
"diff --git a/lib/installer-exclude/libjitsi.jar b/lib/installer-exclude/libjitsi.jar
index 64fb2ea96..cee1f5f46 100644
Binary files a/lib/installer-exclude/libjitsi.jar and b/lib/installer-exclude/libjitsi.jar differ
diff --git a/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java b/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java
index 47ace2235..415c694ff 100644
--- a/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java
+++ b/src/net/java/sip/communicator/impl/neomedia/DeviceConfigurationComboBoxModel.java
@@ -226,8 +226,11 @@ private AudioSystem[] getAudioSystems()
         if (type != AUDIO)
             throw new IllegalStateException(""type"");
 
-        if (audioSystems == null)
-            audioSystems = deviceConfiguration.getAvailableAudioSystems();
+        // This must updated at each call to allows hotplug device system to be
+        // enabled (if the number of devices change to someting greater than 0)
+        // or disabled (if the number of available device changes to 0).
+        audioSystems = deviceConfiguration.getAvailableAudioSystems();
+
         return audioSystems;
     }",Activates update for reloadable audio systems in order to activate them if the number of devices changes from 0 to something greater .,"""Update audio systems on each call to support hotplug devices""","""Update DeviceConfigurationComboBoxModel to handle hotplug device systems""

This commit message accurately reflects the changes made in the code, which involve updating the `DeviceConfigurationComboBoxModel` to handle changes in available audio systems due to hotplug device systems.","""Updated DeviceConfigurationComboBoxModel to enable/disable hotplug device system based on available devices""

Explanation: The code change in the diff updates the `audioSystems` variable at each call to allow hotplug device systems to be enabled or disabled based on the number of available devices. The original code only updated the `audioSystems` variable if it was null. This change ensures that the `audioSystems` variable is always up-to-date with the current number of available devices.",Update getAudioSystems to refresh audioSystems for hotplug device support.,Model 4
"diff --git a/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java b/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
index 62ed8c3e4..2175a20b2 100644
--- a/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
+++ b/elastic-job-core/src/test/java/com/dangdang/ddframe/reg/zookeeper/ZookeeperRegistryCenterModifyTest.java
@@ -96,7 +96,7 @@ public final class ZookeeperRegistryCenterModifyTest extends AbstractNestedZooke
         assertThat(actual.size(), is(2));
         for (String each : actual) {
             assertThat(each, startsWith(""test_sequential""));
-            assertThat(zkRegCenter.get(each), startsWith(""test_value""));
+            assertThat(zkRegCenter.get(""/sequential/"" + each), startsWith(""test_value""));
         }
     }",fix test case,"""Fix ZookeeperRegistryCenterModifyTest to correctly retrieve node values""","""Update ZookeeperRegistryCenterModifyTest to correctly retrieve values from Zookeeper registry""","""Update ZookeeperRegistryCenterModifyTest to add '/sequential/' in the path for zkRegCenter.get()""",Fix path in ZookeeperRegistryCenterModifyTest to correctly retrieve sequential nodes' values.,Model 4
"diff --git a/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java b/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java
index c2f2f2793c..8b943200b4 100644
--- a/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java
+++ b/languagetool-language-modules/de/src/main/java/org/languagetool/rules/de/AgreementRule.java
@@ -443,7 +443,7 @@ public class AgreementRule extends Rule {
 
   private void replacePrepositionsByArticle (AnalyzedTokenReadings[] tokens) {
   	for (int i = 0; i < tokens.length; i++) {
-  		if (StringUtils.equalsAny(tokens[i].getToken(), ""ins"", ""ans"")) {
+      if (StringUtils.equalsAny(tokens[i].getToken(), ""ins"", ""ans"", ""aufs"", ""vors"", ""durchs"")) {
   			tokens[i] = new AnalyzedTokenReadings(INS_REPLACEMENT, tokens[i].getStartPos());
   		} else if (StringUtils.equalsAny(tokens[i].getToken(), ""zur"")) {
   			tokens[i] = new AnalyzedTokenReadings(ZUR_REPLACEMENT, tokens[i].getStartPos());",improve DE_AGREEMENT,"""Expand AgreementRule to handle additional prepositions ('aufs', 'vors', 'durchs') in German""","""Add more prepositions to be replaced by articles in AgreementRule""","""Added 'aufs', 'vors', 'durchs' to the list of prepositions replaced by articles in AgreementRule.java""","Added replacements for ""aufs"", ""vors"", and ""durchs"" in the replacePrepositionsByArticle method in AgreementRule.java.",Model 3
"diff --git a/src/main/java/reactor/core/publisher/EventLoopProcessor.java b/src/main/java/reactor/core/publisher/EventLoopProcessor.java
index a2e08e62d..4e3940189 100644
--- a/src/main/java/reactor/core/publisher/EventLoopProcessor.java
+++ b/src/main/java/reactor/core/publisher/EventLoopProcessor.java
@@ -36,6 +36,8 @@ import reactor.core.Exceptions;
 import reactor.core.MultiProducer;
 import reactor.core.Producer;
 import reactor.core.Receiver;
+import reactor.util.Logger;
+import reactor.util.Loggers;
 import reactor.util.concurrent.QueueSupplier;
 import reactor.util.concurrent.RingBuffer;
 import reactor.util.concurrent.RingBufferReader;
@@ -543,6 +545,7 @@ abstract class EventLoopProcessor<IN> extends FluxProcessor<IN, IN>
 			this.prefetch = prefetch;
 		}
 
+		static Logger logger = Loggers.getLogger(RequestTask.class);
 		@Override
 		public void run() {
 			final long bufferSize = prefetch;
@@ -552,14 +555,15 @@ abstract class EventLoopProcessor<IN> extends FluxProcessor<IN, IN>
 				spinObserver.run();
 				upstream.request(bufferSize - 1);
 
+				long c;
 				for (; ; ) {
-					cursor = cursor + limit;
-					waitStrategy.waitFor(cursor, readCount, spinObserver);
+					c = cursor + limit;
+					cursor = waitStrategy.waitFor(c, readCount, spinObserver);
 					if (postWaitCallback != null) {
 						postWaitCallback.accept(cursor);
 					}
 					//spinObserver.accept(null);
-					upstream.request(limit);
+					upstream.request(limit + (cursor - (c - limit)));
 				}
 			}
 			catch (InterruptedException e) {",tweaks event loop processor request task,"""Add logging and optimize request handling in EventLoopProcessor""",Added logging and improved wait strategy in EventLoopProcessor.,"""Add Logger and update request amount in EventLoopProcessor""

This commit has two main changes:

1. It adds a static Logger named `logger` to the `EventLoopProcessor` class, which is initialized with `Loggers.getLogger(RequestTask.class)`. This allows for logging within the class, which can be useful for debugging or monitoring the application.

2. It modifies the request amount in the `run()` method of the `EventLoopProcessor` class. In the original code, the `upstream.request(limit)` was called within the infinite loop. In the updated code, the request amount is calculated as `limit + (cursor - (c - limit))`, where `c` is the new cursor position calculated as `c = cursor + limit`. This change might be aimed at improving the request strategy or fixing a bug related to the request amount.

As always, it's a good practice to write a clear and concise commit message that describes the changes made in the commit. This makes it easier for other developers (or future you) to understand what changes were made and why.","""Added logging support and improved request handling logic in EventLoopProcessor""",Model 2
"diff --git a/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java b/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java
index cd8ba3f3e2..4e1c7e0bcd 100644
--- a/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java
+++ b/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/ModelPreferences.java
@@ -207,7 +207,7 @@ public final class ModelPreferences
         PrefUtils.setDefaultPreferenceValue(store, SQL_ANONYMOUS_PARAMETERS_MARK, String.valueOf(SQLConstants.DEFAULT_PARAMETER_MARK));
         PrefUtils.setDefaultPreferenceValue(store, SQL_NAMED_PARAMETERS_PREFIX, String.valueOf(SQLConstants.DEFAULT_PARAMETER_PREFIX));
         PrefUtils.setDefaultPreferenceValue(store, SQL_CONTROL_COMMAND_PREFIX, String.valueOf(SQLConstants.DEFAULT_CONTROL_COMMAND_PREFIX));
-        PrefUtils.setDefaultPreferenceValue(store, SQL_VARIABLES_ENABLED, false);
+        PrefUtils.setDefaultPreferenceValue(store, SQL_VARIABLES_ENABLED, true);
         PrefUtils.setDefaultPreferenceValue(store, SQL_FILTER_FORCE_SUBSELECT, false);
 
         PrefUtils.setDefaultPreferenceValue(store, SQL_FORMAT_FORMATTER, SQLFormatterTokenized.FORMATTER_ID);",Enable SQL variables by default .,"""Enable SQL variables by default""","""Enable SQL variables by default""","""Changed default preference value for SQL_VARIABLES_ENABLED to true in ModelPreferences.java""",Enable SQL variables by default in ModelPreferences.,Model 2
"diff --git a/tools/apt_deps.sh b/tools/apt_deps.sh
index 2b377791..6cb71412 100755
--- a/tools/apt_deps.sh
+++ b/tools/apt_deps.sh
@@ -76,4 +76,5 @@ apt-get install -y zlib1g-dev \
                    libbz2-dev \",Added phantomjs to dependency,"""Added zlib1g-dev and libbz2-dev dependencies to apt_deps.sh""","""Added zlib1g-dev to apt-get install command""","""Added liblzma-dev to the list of packages to be installed in apt_deps.sh""",Update apt_deps.sh to include new dependencies for zlib1g-dev and libbz2-dev installation.,Model 4
"diff --git a/helloworlds/1.6-usefull-libraries/collections/readme.md b/helloworlds/1.6-usefull-libraries/collections/readme.md
new file mode 100644
index 0000000..1ea2c9e
--- /dev/null
+++ b/helloworlds/1.6-usefull-libraries/collections/readme.md
@@ -0,0 +1,83 @@
+## **Alternative java collections overview**
+*In progress*
+
+### 1. General overview
+*In progress*
+
+### 2. New collections types
+#### 2.1 MultiSet/Bag in Guava, Apache Commons Collections and Eclipse (GS) Collections
+
+| **Type** | **Guava** | **Apache Commons Collections** | **GS Collections** | **JDK** |
+| -------------	 | 	-------------| 	-------------| -------------| 	-------------|
+| Order not defined | [HashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/HashMultiset.html) | [HashBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/HashBag.html) | [HashBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/HashBag.html) | [HashMap](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html) |
+| Sorted  | [TreeMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/TreeMultiset.html) | [TreeBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/TreeBag.html) | [TreeBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/sorted/mutable/TreeBag.html) | [TreeMap](https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html) |
+| Insertion-order  | [LinkedHashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/LinkedHashMultiset.html) | - | - | [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html) |
+| Concurrent variant | [ConcurrentHashMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ConcurrentHashMultiset.html) | [SynchronizedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/SynchronizedBag.html) | [SynchronizedBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/SynchronizedBag.html) | [Collections.synchronizedMap(HashMap<string, integer="""">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |
+| Concurrent and sorted | - | [SynchronizedSortedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/SynchronizedSortedBag.html) | [SynchronizedSortedBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/sorted/mutable/SynchronizedSortedBag.html) | [Collections.synchronizedSortedMap(TreeMap<string ,="""" integer="""">)</string>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |
+| Immutable collection | [ImmutableMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableMultiset.html) | [UnmodifiableBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/UnmodifiableBag.html) | [UnmodifiableBag](http://www.goldmansachs.com/gs-collections/javadoc/6.1.0/com/gs/collections/impl/bag/mutable/UnmodifiableBag.html) | [Collections.unmodifiableMap(HashMap<string, integer="""">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |
+| Immutable and sorted | [ImmutableSortedMultiset](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableSortedMultiset.html) | [UnmodifiableSortedBag](http://commons.apache.org/proper/commons-collections/javadocs/api-3.2.1/org/apache/commons/collections/bag/UnmodifiableSortedBag.html) | [UnmodifiableSortedBag](UnmodifiableSortedBag) | [Collections.unmodifiableSortedMap(TreeMap<string, integer="""">)</string,>](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html) |
+
+##### **Examples using MultiSet/Bag**
+*In progress*
+        
+
+#### 2.2 Multimap in Guava, Apache Commons Collections and Eclipse (GS) Collections
+
+| Key's order |  Value's order | Duplicate | Analog key | Analog value | Guava | Apache | Eclipse (GS) Collections | JDK |
+| ----------  | -------------  | ----------| -----------| 	 ----------|-------| -------| -------------------------|-----|
+| not defined | Insertion-order | yes | `HashMap` | `ArrayList` | `ArrayListMultimap` | `MultiValueMap` | `FastListMultimap` | `HashMap<K, ArrayList<V>>` |
+| not defined | not defined | no | `HashMap` | `HashSet` | `HashMultimap` | `MultiValueMap. multiValueMap( new HashMap<K, Set>(), HashSet.class);` | `UnifiedSetMultimap` | `HashMap<K, HashSet<V>>` |
+| not defined | sorted | no | `HashMap` | `TreeSet` | `Multimaps. newMultimap( HashMap, Supplier <TreeSet>)` | `MultiValueMap. multiValueMap( new HashMap<K, Set>(), TreeSet.class)` | `TreeSortedSet- Multimap` | `HashMap<K, TreeSet<V>>` |
+| Insertion-order | Insertion-order | yes | Linked HashMap | ArrayList | LinkedList- Multimap | MultiValueMap. multiValueMap(new LinkedHashMap<K, List>(), ArrayList.class); | |LinkedHashMap< K, ArrayList<V>> |
+| Insertion-order | Insertion-order | no | `LinkedHash- Multimap` | `Linked- HashSet` | `LinkedHash- Multimap` | `MultiValueMap. multiValueMap(new LinkedHashMap<K, Set>(), LinkedHashSet.class)` | |`LinkedHashMap<K, LinkedHashSet<V>>` |
+| sorted | sorted | no | `TreeMap` | `TreeSet` | `TreeMultima` | `MultiValueMap. multiValueMap( new TreeMap<K, Set>(),TreeSet.class)` | |`TreeMap<K, TreeSet<V>>` |
+
+
+##### **Examples using Multimap**
+*In progress*
+
+####  **2.3 Using BiMap in Guava, Apache Commons Collections and GS Collections**
+
+##### **Examples using BiMap**
+*In progress*
+
+### 3. Compare operation with collections
+
+#### 3.1 Create collections
+
+| Description | JDK | guava | gs-collections |
+| -------------	 | 	-------------| 	-------------| -------------|
+| Create empty list | new ArrayList<>() | Lists.newArrayList() | FastList.newList() |
+| Create list from values | Arrays.asList(""1"", ""2"", ""3"") | Lists.newArrayList(""1"", ""2"", ""3"") | FastList.newListWith(""1"", ""2"", ""3"") |
+| Create list with capacity = 100 | new ArrayList<>(100) | Lists.newArrayListWithCapacity(100) | FastList.newList(100) |
+| Create list from any collectin | new ArrayList<>(collection) | Lists.newArrayList(collection) | FastList.newList(collection) |
+| Create list from any Iterable | - | Lists.newArrayList(iterable) | FastList.newList(iterable) |
+| Create list from Iterator | - | Lists.newArrayList(iterator) | - |
+| Create list from array | Arrays.asList(array) | Lists.newArrayList(array) | FastList.newListWith(array) |
+| Create list using factory | - | - | FastList.newWithNValues(10, () -> ""1"") |
+
+**Examples:** 
+*In progress*
+
+| Description | JDK | guava | gs-collections |
+| -------------	 | 	-------------| 	-------------| -------------|
+| Create empty set | new HashSet<>() | Sets.newHashSet() | UnifiedSet.newSet() |
+| Creatre set from values | new HashSet<>(Arrays.asList(""alpha"", ""beta"", ""gamma"")) | Sets.newHashSet(""alpha"", ""beta"", ""gamma"") | UnifiedSet.newSetWith(""alpha"", ""beta"", ""gamma"") |
+| Create set from any collections | new HashSet<>(collection) | Sets.newHashSet(collection) | UnifiedSet.newSet(collection) |
+| Create set from any Iterable | - | Sets.newHashSet(iterable) | UnifiedSet.newSet(iterable) |
+| Create set from any Iterator | - | Sets.newHashSet(iterator); | - |
+| Create set from Array | new HashSet<>(Arrays.asList(array)) | Sets.newHashSet(array) | UnifiedSet.newSetWith(array) |
+
+**Examples:** 
+*In progress*
+
+| Description | JDK | guava | gs-collections |
+| -------------	 | 	-------------| 	-------------| -------------|
+| Create empty map | new HashMap<>() | Maps.newHashMap() | UnifiedMap.newMap() |
+| Create map with capacity = 130 | new HashMap<>(130) | Maps.newHashMapWithExpectedSize(100) | UnifiedMap.newMap(130) |
+| Create map from other map | new HashMap<>(map) | Maps.newHashMap(map) | UnifiedMap.newMap(map) |
+| Create map from keys | - | - | UnifiedMap.newWithKeysValues(""1"", ""a"", ""2"", ""b"") |
+
+**Examples:** 
+*In progress*
+",Add readme . md in Collections sections,"""Added README for alternative Java collections overview""","Added alternative Java collections overview and comparison with JDK, Guava, Apache Commons Collections, and GS Collections.","It seems like you've added a new file named `readme.md` under the directory `helloworlds/1.6-usefull-libraries/collections/`. This file appears to be a comprehensive overview of alternative Java collections, covering topics such as general overviews, new collection types, and comparison operations with collections.

The file includes a detailed table comparing different types of Multiset/Bag in Guava, Apache Commons Collections, Eclipse (GS) Collections, and JDK. It also includes placeholders for examples and further information, indicated by ""*In progress*"".

As for the commit message, it could be something like: ""Added a new file 'readme.md' providing an overview of alternative Java collections, including a detailed comparison of Multiset/Bag types in various libraries. Still in progress.""","""Add a readme for alternative Java collections overview, including Guava, Apache Commons, and GS Collections with examples in progress.""",Model 1
"diff --git a/src/com/nobu_games/android/view/web/TitleBarWebView.java b/src/com/nobu_games/android/view/web/TitleBarWebView.java
index 510605e49..2df1c99dd 100644
--- a/src/com/nobu_games/android/view/web/TitleBarWebView.java
+++ b/src/com/nobu_games/android/view/web/TitleBarWebView.java
@@ -58,7 +58,7 @@ public class TitleBarWebView extends WebView {
             if(!mTouchInTitleBar) {
                 return false;
             } else {
-                switch(ev.getActionMasked()) {
+                switch(ev.getAction() & MotionEvent.ACTION_MASK) {
                     case MotionEvent.ACTION_UP:
                     case MotionEvent.ACTION_CANCEL:
                         mTouchInTitleBar = false;
@@ -110,7 +110,7 @@ public class TitleBarWebView extends WebView {
             final float x = event.getX();
             float y = event.getY();
 
-            switch(event.getActionMasked()) {
+            switch(event.getAction() & MotionEvent.ACTION_MASK) {
                 case MotionEvent.ACTION_DOWN:
                     if(y <= visTitleHeight) {
                         mTouchInTitleBar = true;
@@ -305,16 +305,12 @@ public class TitleBarWebView extends WebView {
                     ViewGroup.LayoutParams.MATCH_PARENT,
                     ViewGroup.LayoutParams.WRAP_CONTENT, 0, 0);
 
-","Make the setEmbeddedTitleBar fall - back work on pre - API16 , too","""Replace getActionMasked() with getAction() & MotionEvent.ACTION_MASK in TitleBarWebView""","According to the diff, the commit message should be:

""Improved MotionEvent handling in TitleBarWebView""

This commit message is concise and accurately describes the changes made in the commit, which involve improving the handling of MotionEvent in the TitleBarWebView class.","The commit message could be:

""Refactor MotionEvent handling: Replace getActionMasked() with getAction() & MotionEvent.ACTION_MASK""

This commit message explains that the code has been refactored to change the way MotionEvent actions are handled. The method getActionMasked() has been replaced with the bitwise AND operation of getAction() & MotionEvent.ACTION_MASK. This change has been made in both the onTouchEvent() and onInterceptTouchEvent() methods.","""Fix MotionEvent handling by using getAction() & ACTION_MASK instead of getActionMasked() in TitleBarWebView.""",Model 4
"diff --git a/src/main/java/io/antmedia/rest/BroadcastRestService.java b/src/main/java/io/antmedia/rest/BroadcastRestService.java
index c243954da..01a3389c0 100644
--- a/src/main/java/io/antmedia/rest/BroadcastRestService.java
+++ b/src/main/java/io/antmedia/rest/BroadcastRestService.java
@@ -748,16 +748,20 @@ public class BroadcastRestService extends RestServiceBase{
 					if (broadcast.getMp4Enabled() != RECORD_ENABLE) 
 					{
 						result = getDataStore().setMp4Muxing(streamId, RECORD_ENABLE);
+						
+						streamId = streamId.replaceAll(REPLACE_CHARS, ""_"");
 						//if it's not enabled, start it
 						if (broadcast.getStatus().equals(AntMediaApplicationAdapter.BROADCAST_STATUS_BROADCASTING))
 						{
 							result = startRecord(streamId, RecordType.MP4);
 							if (!result) 
 							{
-								streamId = streamId.replaceAll(REPLACE_CHARS, ""_"");
 								logger.warn(""Mp4 recording could not be started for stream: {}"", streamId);
 							}
-						}	
+						}
+						else {
+							logger.info(""Broadcast is not broadcasting status so recording only saved to the database for stream:{}"", streamId);
+						}
 					}
 					else 
 					{",Add some logs for recording,"""Fixed MP4 recording start logic and added logging for non-broadcasting status""","According to the diff, the commit message should be:

""Fixed mp4 recording logic for non-broadcasting streams and added logging for non-broadcasting status""

Or, in a more concise format:

""Improve mp4 recording logic for non-broadcasting streams""","""Added a log message when broadcast is not broadcasting and MP4 recording is enabled only in the database""

Explanation:
The code changes in this diff are:

1. Added a new log message when the broadcast is not broadcasting, and MP4 recording is enabled only in the database.
2. Removed the unnecessary streamId replacement code, as it is already done in the previous lines.
3. Changed the else block to only include the log message, as the previous code was commented out.

The commit message should reflect the main purpose of the changes, which is to add a log message for a specific scenario. Therefore, a suggested commit message would be: ""Added a log message when broadcast is not broadcasting and MP4 recording is enabled only in the database"".","""Fix MP4 recording initiation and improve logging when broadcast status is not broadcasting.""",Model 4
"diff --git a/config/.gitignore b/config/.gitignore
new file mode 100644
index 0000000..5e56e04
--- /dev/null
+++ b/config/.gitignore
@@ -0,0 +1 @@
+/bin
diff --git a/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java b/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java
index 394931d..bcda80d 100644
--- a/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java
+++ b/config/src/main/java/com/typesafe/config/impl/AbstractConfigObject.java
@@ -17,7 +17,7 @@ import com.typesafe.config.ConfigRenderOptions;
 import com.typesafe.config.ConfigValue;
 import com.typesafe.config.ConfigValueType;
 
-abstract class AbstractConfigObject extends AbstractConfigValue implements ConfigObject {
+abstract class AbstractConfigObject extends AbstractConfigValue implements ConfigObject, Container {
 
     final private SimpleConfig config;
 
@@ -56,7 +56,8 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi
     /**
      * This looks up the key with no transformation or type conversion of any
      * kind, and returns null if the key is not present. The object must be
-     * resolved; use attemptPeekWithPartialResolve() if it is not.
+     * resolved along the nodes needed to get the key or
+     * ConfigException.NotResolved will be thrown.
      *
      * @param key
      * @return the unmodified raw value or null
@@ -78,67 +79,34 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi
      *            key to look up
      * @return the value of the key, or null if known not to exist
      * @throws ConfigException.NotResolved
-     *             if can't figure out key's value or can't know whether it
-     *             exists
+     *             if can't figure out key's value (or existence) without more
+     *             resolving
      */
-    protected abstract AbstractConfigValue attemptPeekWithPartialResolve(String key);
+    abstract AbstractConfigValue attemptPeekWithPartialResolve(String key);
 
     /**
-     * Looks up the path with no transformation, type conversion, or exceptions
-     * (just returns null if path not found). Does however resolve the path, if
-     * resolver != null.
-     *
-     * @throws NotPossibleToResolve
-     *             if context is not null and resolution fails
+     * Looks up the path with no transformation or type conversion. Returns null
+     * if the path is not found; throws ConfigException.NotResolved if we need
+     * to go through an unresolved node to look up the path.
      */
-    protected AbstractConfigValue peekPath(Path path, ResolveContext context) throws NotPossibleToResolve {
-        return peekPath(this, path, context);
+    protected AbstractConfigValue peekPath(Path path) {
+        return peekPath(this, path);
     }
 
-    /**
-     * Looks up the path. Doesn't do any resolution, will throw if any is
-     * needed.
-     */
-    AbstractConfigValue peekPath(Path path) {
+    private static AbstractConfigValue peekPath(AbstractConfigObject self, Path path) {
         try {
-            return peekPath(this, path, null);
-        } catch (NotPossibleToResolve e) {
-            throw new ConfigException.BugOrBroken(
-                    ""NotPossibleToResolve happened though we had no ResolveContext in peekPath"");
-        }
-    }
+            // we'll fail if anything along the path can't
+            // be looked at without resolving.
+            Path next = path.remainder();
+            AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());
 
-    // as a side effect, peekPath() will have to resolve all parents of the
-    // child being peeked, but NOT the child itself. Caller has to resolve
-    // the child itself if needed.
-    private static AbstractConfigValue peekPath(AbstractConfigObject self, Path path,
-            ResolveContext context) throws NotPossibleToResolve {
-        try {
-            if (context != null) {
-                // walk down through the path resolving only things along that
-                // path, and then recursively call ourselves with no resolve
-                // context.
-                AbstractConfigValue partiallyResolved = context.restrict(path).resolve(self);
-                if (partiallyResolved instanceof AbstractConfigObject) {
-                    return peekPath((AbstractConfigObject) partiallyResolved, path, null);
-                } else {
-                    throw new ConfigException.BugOrBroken(""resolved object to non-object "" + self
-                            + "" to "" + partiallyResolved);
-                }
+            if (next == null) {
+                return v;
             } else {
-                // with no resolver, we'll fail if anything along the path can't
-                // be looked at without resolving.
-                Path next = path.remainder();
-                AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());
-
-                if (next == null) {
-                    return v;
+                if (v instanceof AbstractConfigObject) {
+                    return peekPath((AbstractConfigObject) v, next);
                 } else {
-                    if (v instanceof AbstractConfigObject) {
-                        return peekPath((AbstractConfigObject) v, next, null);
-                    } else {
-                        return null;
-                    }
+                    return null;
                 }
             }
         } catch (ConfigException.NotResolved e) {
@@ -209,7 +177,8 @@ abstract class AbstractConfigObject extends AbstractConfigValue implements Confi
     }
 
     @Override
-    abstract AbstractConfigObject resolveSubstitutions(ResolveContext context) throws NotPossibleToResolve;
+    abstract AbstractConfigObject resolveSubstitutions(ResolveContext context, ResolveSource source)
+            throws NotPossibleToResolve;
 
     @Override
     abstract AbstractConfigObject relativized(final Path prefix);
diff --git a/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java b/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java
index 9b6b1fd..1eb05c8 100644
--- a/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java
+++ b/config/src/main/java/com/typesafe/config/impl/AbstractConfigValue.java
@@ -68,9 +68,11 @@ abstract class AbstractConfigValue implements ConfigValue, MergeableValue {
      *
      * @param context
      *            state of the current resolve
+     * @param source
+     *            where to look up values
      * @return a new value if there were changes, or this if no changes
      */
-    AbstractConfigValue resolveSubstitutions(ResolveContext context)
+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source)
             throws NotPossibleToResolve {
         return this;
     }
@@ -79,6 +81,38 @@ abstract class AbstractConfigValue implements ConfigValue, MergeableValue {
         return ResolveStatus.RESOLVED;
     }
 
+    protected static List<AbstractConfigValue> replaceChildInList(List<AbstractConfigValue> list,
+            AbstractConfigValue child, AbstractConfigValue replacement) {
+        int i = 0;
+        while (i < list.size() && list.get(i) != child)
+            ++i;
+        if (i == list.size())
+            throw new ConfigException.BugOrBroken(""tried to replace "" + child + "" which is not in "" + list);
+        List<AbstractConfigValue> newStack = new ArrayList<AbstractConfigValue>(list);
+        if (replacement != null)
+            newStack.set(i, replacement);
+        else
+            newStack.remove(i);
+
+        if (newStack.isEmpty())
+            return null;
+        else
+            return newStack;
+    }
+
+    protected static boolean hasDescendantInList(List<AbstractConfigValue> list, AbstractConfigValue descendant) {
+        for (AbstractConfigValue v : list) {
+            if (v == descendant)
+                return true;
+        }
+        // now the expensive traversal
+        for (AbstractConfigValue v : list) {
+            if (v instanceof Container && ((Container) v).hasDescendant(descendant))
+                return true;
+        }
+        return false;
+    }
+
     /**
      * This is used when including one file in another; the included file is
      * relativized to the path it's included into in the parent file. The point
diff --git a/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java b/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java
index 8cb1575..e4f031e 100644
--- a/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java
+++ b/config/src/main/java/com/typesafe/config/impl/ConfigConcatenation.java
@@ -22,7 +22,7 @@ import com.typesafe.config.ConfigValueType;
  * concatenations of objects, but ConfigDelayedMerge should be used for that
  * since a concat of objects really will merge, not concatenate.
  */
-final class ConfigConcatenation extends AbstractConfigValue implements Unmergeable {
+final class ConfigConcatenation extends AbstractConfigValue implements Unmergeable, Container {
 
     final private List<AbstractConfigValue> pieces;
 
@@ -170,7 +170,7 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab
     }
 
     @Override
-    AbstractConfigValue resolveSubstitutions(ResolveContext context) throws NotPossibleToResolve {
+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source) throws NotPossibleToResolve {
         if (ConfigImpl.traceSubstitutionsEnabled()) {
             int indent = context.depth() + 2;
             ConfigImpl.trace(indent - 1, ""concatenation has "" + pieces.size() + "" pieces:"");
@@ -181,11 +181,16 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab
             }
         }
 
+        // Right now there's no reason to pushParent here because the
+        // content of ConfigConcatenation should not need to replaceChild,
+        // but if it did we'd have to do this.
+        ResolveSource sourceWithParent = source; // .pushParent(this);
+
         List<AbstractConfigValue> resolved = new ArrayList<AbstractConfigValue>(pieces.size());
         for (AbstractConfigValue p : pieces) {
             // to concat into a string we have to do a full resolve,
             // so unrestrict the context
-            AbstractConfigValue r = context.unrestricted().resolve(p);
+            AbstractConfigValue r = context.unrestricted().resolve(p, sourceWithParent);
             if (ConfigImpl.traceSubstitutionsEnabled())
                 ConfigImpl.trace(context.depth(), ""resolved concat piece to "" + r);
             if (r == null) {
@@ -215,6 +220,20 @@ final class ConfigConcatenation extends AbstractConfigValue implements Unmergeab
         return ResolveStatus.UNRESOLVED;
     }
 
+    @Override
+    public ConfigConcatenation replaceChild(AbstractConfigValue child, AbstractConfigValue replacement) {
+        List<AbstractConfigValue> newPieces = replaceChildInList(pieces, child, replacement);
+        if (newPieces == null)
+            return null;
+        else
+            return new ConfigConcatenation(origin(), newPieces);
+    }
+
+    @Override
+    public boolean hasDescendant(AbstractConfigValue descendant) {
+        return hasDescendantInList(pieces, descendant);
+    }
+
     // when you graft a substitution into another object,
     // you have to prefix it with the location in that object
     // where you grafted it; but save prefixLength so
diff --git a/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java b/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java
index 206f18b..32a8ea6 100644
--- a/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java
+++ b/config/src/main/java/com/typesafe/config/impl/ConfigDelayedMerge.java
@@ -54,20 +54,19 @@ final class ConfigDelayedMerge extends AbstractConfigValue implements Unmergeabl
     }
 
     @Override
-    AbstractConfigValue resolveSubstitutions(ResolveContext context)
+    AbstractConfigValue resolveSubstitutions(ResolveContext context, ResolveSource source)
             throws NotPossibleToResolve {
-        return resolveSubstitutions(this, stack, context);
+        return resolveSubstitutions(this, stack, context, source);
     }
 
     // static method also used by ConfigDelayedMergeObject
-    static AbstractConfigValue resolveSubstitutions(ReplaceableMergeStack replaceable,
-            List<AbstractConfigValue> stack, ResolveContext context) throws NotPossibleToResolve {
+    static AbstractConfigValue resolveSubstitutions(ReplaceableMergeStack replaceable, List<AbstractConfigValue> stack,
+            ResolveContext context, ResolveSource source) throws NotPossibleToResolve {
         if (ConfigImpl.traceSubstitutionsEnabled()) {
-            int indent = context.depth() + 2;
-            ConfigImpl.trace(indent - 1, ""delayed merge stack has "" + stack.size() + "" items:"");
+            ConfigImpl.trace(context.depth(), ""delayed merge stack has "" + stack.size() + "" items:"");
             int count = 0;
             for (AbstractConfigValue v : stack) {
-                ConfigImpl.trace(indent, count + "": "" + v);
+                ConfigImpl.trace(context.depth() + 1, count + "": "" + v);
                 count += 1;
             }
         }
@@ -75,91 +74,93 @@ final class ConfigDelayedMerge extends AbstractConfigValue implements Unmergeabl
         // to resolve substitutions, we need to recursively resolve
         // the stack of stuff to merge, and merge the stack so
         // we won't be a delayed merge anymore. If restrictToChildOrNull
-        // is non-null, we may remain a delayed merge though.
+        // is non-null, or resolve options allow partial resolves,
+        // we may remain a delayed merge though.
 
         int count = 0;
         AbstractConfigValue merged = null;
-        for (AbstractConfigValue v : stack) {
-            if (v instanceof ReplaceableMergeStack)
-                throw new ConfigException.BugOrBroken(
-                        ""A delayed merge should not contain another one: "" + replaceable);
-
-            boolean replaced = false;
-            // we only replace if we have a substitution, or
-            // value-concatenation containing one. The Unmergeable
-            // here isn't a delayed merge stack since we can't contain
-            // another stack (see assertion above).
-            if (v instanceof Unmergeable) {
-                // If, while resolving 'v' we come back to the same
-                // merge stack, we only want to look _below_ 'v'
+        for (AbstractConfigValue end : stack) {
+            // the end value may or may not be resolved already
+
+            ResolveSource sourceForEnd;
+
+            if (end instanceof ReplaceableMergeStack)
+                throw new ConfigException.BugOrBroken(""A delayed merge should not contain another one: "" + replaceable);
+            else if (end instanceof Unmergeable) {
+                // the remainder could be any kind of value, including another
+                // ConfigDelayedMerge
+                AbstractConfigValue remainder = replaceable.makeReplacement(context, count + 1);
+
+                if (ConfigImpl.traceSubstitutionsEnabled())
+                    ConfigImpl.trace(context.depth(), ""remainder portion: "" + remainder);
+
+                // If, while resolving 'end' we come back to the same
+                // merge stack, we only want to look _below_ 'end'
                 // in the stack. So we arrange to replace the
                 // ConfigDelayedMerge with a value that is only
                 // the remainder of the stack below this one.
 
                 if (ConfigImpl.traceSubstitutionsEnabled())
-                    ConfigImpl.trace(context.depth() + 1, ""because item "" + count
-                            + "" in this stack is unresolved, resolving it can only look at remaining ""
-                            + (stack.size() - count - 1) + "" items"");
-                context.source().replace((AbstractConfigValue) replaceable,
-                        replaceable.makeReplacer(count + 1));
-                replaced = true;
-            }
+                    ConfigImpl.trace(context.depth(), ""building sourceForEnd"");
 
-            AbstractConfigValue resolved;
-            try {
+                // we resetParents() here because we'll be resolving ""end""
+                // against a root which does NOT contain ""end""
+                sourceForEnd = source.replaceWithinCurrentParent((AbstractConfigValue) replaceable, remainder);
+
+                if (ConfigImpl.traceSubstitutionsEnabled())
+                    ConfigImpl.trace(context.depth(), ""  sourceForEnd before reset parents but after replace: ""
+                            + sourceForEnd);
+
+                sourceForEnd = sourceForEnd.resetParents();
+            } else {
                 if (ConfigImpl.traceSubstitutionsEnabled())
-                    ConfigImpl.trace(context.depth() + 1, ""resolving item "" + count + "" in merge stack of ""
-                            + stack.size());
-                resolved = context.resolve(v);
-            } finally {
-                if (replaced)
-                    context.source().unreplace((AbstractConfigValue) replaceable);
+                    ConfigImpl
+                            .trace(context.depth(), ""will resolve end against the original source with parent pushed"");
+
+                sourceForEnd = source.pushParent(replaceable);
             }
 
-            if (resolved != null) {
+            if (ConfigImpl.traceSubstitutionsEnabled()) {
+                ConfigImpl.trace(context.depth(), ""sourceForEnd      ="" + sourceForEnd);
+            }
+
+            if (ConfigImpl.traceSubstitutionsEnabled())
+","Rewrite substitution resolver , use explicit immutable ResolveSource .","""Refactor AbstractConfigObject and related classes to improve resolution and substitution handling""","""Added Container interface and implemented it in AbstractConfigObject and various value classes""","This commit appears to introduce several changes to the codebase, including:

1. Adding a new file `config/.gitignore` with the content `/bin`, which will ignore the `bin` directory in the `config` directory.
2. Modifying the `AbstractConfigObject` class to implement the `Container` interface.
3. Adding a new method `attemptPeekWithPartialResolve(String key)` to the `AbstractConfigObject` class.
4. Changing the `peekPath` method in the `AbstractConfigObject` class to call the new `peekPath` method with only two arguments instead of three.
5. Removing the `NotPossibleToResolve` exception from the `peekPath` method in the `AbstractConfigObject` class.

Based on these changes, a possible commit message could be:

Refactor AbstractConfigObject to implement Container interface and simplify peekPath method

This commit introduces a new method attemptPeekWithPartialResolve(String key) to AbstractConfigObject and modifies the peekPath method to call the new method with only two arguments instead of three. The NotPossibleToResolve exception has been removed from the peekPath method. Additionally, AbstractConfigObject now implements the Container interface. Finally, a .gitignore file has been added to the config directory to ignore the bin directory.","Implement Container Interface, update resolveSubstitutions for multi-path resolution, added utility methods in AbstractConfigValue.",Model 4
"diff --git a/parent/pom.xml b/parent/pom.xml
index b1698018b0e..b6dde191ff0 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -396,6 +396,7 @@
     <maven-resources-plugin-version>2.7</maven-resources-plugin-version>
     <maven-reporting-api-version>2.2.1</maven-reporting-api-version>
     <maven-reporting-impl-version>2.0.5</maven-reporting-impl-version>
+    <maven-scr-plugin-version>1.19.0</maven-scr-plugin-version>
     <maven-shade-plugin-version>2.4.1</maven-shade-plugin-version>
     <maven-surefire-report-plugin-version>2.13</maven-surefire-report-plugin-version>
     <maven-war-plugin-version>2.6</maven-war-plugin-version>
diff --git a/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml b/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml
index b926d12b3a0..9dfd796b910 100644
--- a/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml
+++ b/tooling/archetypes/camel-archetype-scr/src/main/resources-filtered/META-INF/maven/archetype-metadata.xml
@@ -25,20 +25,17 @@
         <requiredProperty key=""camel-version"">
           <defaultValue>${project.version}</defaultValue>
         </requiredProperty>
-        <requiredProperty key=""commons-lang-version"">
-          <defaultValue>2.6</defaultValue>
-        </requiredProperty>
-        <requiredProperty key=""slf4j-version"">
-          <defaultValue>${slf4j-version}</defaultValue>
-        </requiredProperty>
         <requiredProperty key=""log4j-version"">
           <defaultValue>${log4j-version}</defaultValue>
         </requiredProperty>
-        <requiredProperty key=""maven-scm-provider-gitexe-version"">
-          <defaultValue>1.9</defaultValue>
-        </requiredProperty>
         <requiredProperty key=""maven-bundle-plugin-version"">
-          <defaultValue>${maven-bundle-version}</defaultValue>
+          <defaultValue>${maven-bundle-plugin-version}</defaultValue>
+        </requiredProperty>
+        <requiredProperty key=""maven-scr-plugin-version"">
+          <defaultValue>${maven-scr-plugin-version}</defaultValue>
+        </requiredProperty>
+        <requiredProperty key=""maven-jar-plugin-version"">
+          <defaultValue>${maven-jar-plugin-version}</defaultValue>
         </requiredProperty>
         <requiredProperty key=""maven-compiler-plugin-version"">
           <defaultValue>${maven-compiler-plugin-version}</defaultValue>
@@ -46,20 +43,8 @@
         <requiredProperty key=""maven-resources-plugin-version"">
           <defaultValue>${maven-resources-plugin-version}</defaultValue>
         </requiredProperty>
-        <requiredProperty key=""maven-javadoc-plugin-version"">
-          <defaultValue>${maven-javadoc-plugin-version}</defaultValue>
-        </requiredProperty>
-        <requiredProperty key=""maven-source-plugin-version"">
-          <defaultValue>2.3</defaultValue>
-        </requiredProperty>
-        <requiredProperty key=""maven-release-plugin-version"">
-          <defaultValue>2.5</defaultValue>
-        </requiredProperty>
-        <requiredProperty key=""versions-maven-plugin-version"">
-          <defaultValue>2.1</defaultValue>
-        </requiredProperty>
-        <requiredProperty key=""maven-scr-plugin-version"">
-          <defaultValue>1.19.0</defaultValue>
+        <requiredProperty key=""slf4j-version"">
+          <defaultValue>${slf4j-version}</defaultValue>
         </requiredProperty>
     </requiredProperties>
     <fileSets>
diff --git a/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml b/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml
index bea2cf2a564..3a1f799f268 100644
--- a/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml
+++ b/tooling/archetypes/camel-archetype-scr/src/main/resources/archetype-resources/pom.xml
@@ -1,20 +1,20 @@
 <?xml version=""1.0"" encoding=""UTF-8""?>
-    ## ------------------------------------------------------------------------
-    ## Licensed to the Apache Software Foundation (ASF) under one or more
-    ## contributor license agreements.  See the NOTICE file distributed with
-    ## this work for additional information regarding copyright ownership.
-    ## The ASF licenses this file to You under the Apache License, Version 2.0
-    ## (the ""License""); you may not use this file except in compliance with
-    ## the License.  You may obtain a copy of the License at
-    ##
-    ## http://www.apache.org/licenses/LICENSE-2.0
-    ##
-    ## Unless required by applicable law or agreed to in writing, software
-    ## distributed under the License is distributed on an ""AS IS"" BASIS,
-    ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    ## See the License for the specific language governing permissions and
-    ## limitations under the License.
-    ## ------------------------------------------------------------------------
+## ------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the ""License""); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+## http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an ""AS IS"" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ------------------------------------------------------------------------
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 
@@ -22,51 +22,61 @@
 
   <groupId>${groupId}</groupId>
   <artifactId>${artifactId}</artifactId>
-  <packaging>jar</packaging>
   <version>${version}</version>
+  <packaging>jar</packaging>
 
-  <name>Camel SCR route</name>
+  <name>A Camel SCR Route</name>
 
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+
+    <camel-version>${camel-version}</camel-version>
+
+    <slf4j-version>${slf4j-version}</slf4j-version>
+    <log4j-version>${log4j-version}</log4j-version>
   </properties>
 
   <dependencies>
+
+    <!-- Camel -->
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-core</artifactId>
-      <version>${camel-version}</version>
+      <version>\${camel-version}</version>
     </dependency>
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-scr</artifactId>
-      <version>${camel-version}</version>
+      <version>\${camel-version}</version>
     </dependency>
 
-    <!-- logging -->
+    <!-- Testing -->
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-test</artifactId>
+      <version>\${camel-version}</version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-api</artifactId>
-      <version>${slf4j-version}</version>
+      <artifactId>slf4j-log4j12</artifactId>
+      <version>\${slf4j-version}</version>
+      <scope>test</scope>
     </dependency>
     <dependency>
       <groupId>log4j</groupId>
       <artifactId>log4j</artifactId>
-      <version>${log4j-version}</version>
-    </dependency>
-
-    <!-- testing -->
-    <dependency>
-      <groupId>org.apache.camel</groupId>
-      <artifactId>camel-test</artifactId>
-      <version>${camel-version}</version>
+      <version>\${log4j-version}</version>
       <scope>test</scope>
     </dependency>
+
   </dependencies>
 
   <build>
     <plugins>
+
+      <!-- compiler plugin -->
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
@@ -85,6 +95,7 @@
         </configuration>
       </plugin>
 
+      <!-- to include SRC descriptors in MANIFEST.MF file -->
       <plugin>
         <groupId>org.apache.felix</groupId>
         <artifactId>maven-scr-plugin</artifactId>
@@ -99,28 +110,31 @@
           </execution>
         </executions>
       </plugin>
-
-      <!-- to generate the MANIFEST-FILE of the bundle -->
+      <!-- to generate the MANIFEST.MF of the bundle -->
       <plugin>
         <groupId>org.apache.felix</groupId>
         <artifactId>maven-bundle-plugin</artifactId>
         <version>${maven-bundle-plugin-version}</version>
-        <extensions>true</extensions>
+        <extensions>false</extensions>
         <executions>
           <execution>
             <id>bundle-manifest</id>
-            <phase>process-classes</phase>
+            <phase>prepare-package</phase>
             <goals>
               <goal>manifest</goal>
             </goals>
           </execution>
         </executions>
+      </plugin>
+      <!-- to include MANIFEST.MF in the bundle -->
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <version>${maven-jar-plugin-version}</version>
         <configuration>
-          <instructions>
-            <Bundle-SymbolicName>${artifactId}</Bundle-SymbolicName>
-            <Private-Package>${package}.*</Private-Package>
-            <Import-Package>*</Import-Package>
-          </instructions>
+          <archive>
+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
+          </archive>
         </configuration>
       </plugin>
 
diff --git a/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties b/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties
index 9fc70a06a47..aba6b05bd3c 100644
--- a/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties
+++ b/tooling/archetypes/camel-archetype-scr/src/test/resources/projects/camel-scr-example/archetype.properties
@@ -20,15 +20,10 @@ version = 1.0-SNAPSHOT
 package = example
 className = CamelScrExample
 camel-version = ${project.version}
-commons-lang-version = 2.6
 log4j-version = ${log4j-version}
+maven-bundle-plugin-version = ${maven-bundle-plugin-version}
 maven-compiler-plugin-version = ${maven-compiler-plugin-version}
+maven-jar-plugin-version = ${maven-jar-plugin-version}
 maven-resources-plugin-version = ${maven-resources-plugin-version}
-maven-javadoc-plugin-version = ${maven-javadoc-plugin-version}
-maven-source-plugin-version = 2.3
-maven-release-plugin-version = 2.5
-maven-scm-provider-gitexe-version = 1.9
-versions-maven-plugin-version = 2.1
-maven-scr-plugin-version = 1.19.0
-maven-bundle-plugin-version = ${maven-bundle-version}
+maven-scr-plugin-version = ${maven-scr-plugin-version}
 slf4j-version = ${slf4j-version}",Migrate Maven Archetypes to new build system,"""Update maven-scr-plugin version and refactor archetype properties and pom.xml files""","""Update Maven versions and plugin configurations for Camel SCR archetype""","Update parent POM and archetype files to include maven-scr-plugin version and other updates

The changes in this commit primarily revolve around updating the parent POM.xml and archetype files for a project using Apache Camel and the Service Component Runtime (SCR). Here are the main changes:

1. **Parent POM.xml**: The `maven-scr-plugin-version` is added to the list of plugin versions.

2. **Archetype metadata XML**: Several required properties are updated or added, including `maven-scr-plugin-version`, `maven-bundle-plugin-version`, and `slf4j-version`. Some other properties like `commons-lang-version` and `maven-scm-provider-gitexe-version` are removed.

3. **Archetype resource POM.xml**: This file is significantly updated. Here are the key changes:
   - The `camel-version` and `slf4j-version` properties are added.
   - The `maven-scr-plugin` is configured to include SCR descriptors in the MANIFEST.MF file.
   - The `maven-bundle-plugin` is configured to generate the MANIFEST.MF file of the bundle.
   - The `maven-jar-plugin` is configured to include the MANIFEST.MF file in the bundle.

4. **Archetype properties file**: This file is updated with new versions and properties, including `maven-bundle-plugin-version`, `maven-scr-plugin-version`, and `slf4j-version`.

These changes seem to be aimed at updating the build configuration for a project using Apache Camel and SCR, adding and updating various Maven plugins and dependencies.","Added maven-scr-plugin to pom.xml, updated dependencies, and refined plugin configurations in camel-archetype-scr module.",Model 4
"diff --git a/build.xml b/build.xml
index 55dde1aec..516ed7bc3 100644
--- a/build.xml
+++ b/build.xml
@@ -705,6 +705,12 @@
         </antcall>
     </target>
 
+    <target name=""run-v4"" description=""Starts SC with a preference for IPv4."">
+        <ant target=""run"">
+          <property name=""java.net.preferIPv6Addresses"" value=""false""/>
+        </ant>
+    </target>
+
     <!--PROFILE-SIP-COMMUNICATOR-IN-NETBEANS-IDE -->
     <target name=""profile"" depends=""bundle-plugin-profiler4j,deploy-os-specific-bundles""
         description=""Profile Project"">
@@ -812,7 +818,7 @@
         bundle-argdelegation,bundle-zrtp4j,
         bundle-filehistory,bundle-metahistory,bundle-metahistory-slick,
         bundle-facebook,bundle-plugin-facebookaccregwizz,
-		bundle-bouncycastle,bundle-plugin-otr""/>
+        bundle-bouncycastle,bundle-plugin-otr""/>
 
     <!--BUNDLE-SC-LAUNCHER-->
     <target name=""bundle-sc-launcher"">
@@ -1142,7 +1148,7 @@ javax.swing.event, javax.swing.border""/>
                 <include name=""protocol/jabber/**/*""/>
                 <include name=""protocol/msn/**/*""/>
                 <include name=""protocol/yahoo/**/*""/>
-            </zipfileset> 
+            </zipfileset>
         </jar>
     </target>
 
@@ -1467,7 +1473,7 @@ javax.swing.event, javax.swing.border""/>
              Wizard.-->
         <jar compress=""false"" destfile=""${bundles.dest}/facebookaccregwizz.jar""
                 manifest=""${src}/net/java/sip/communicator/plugin/facebookaccregwizz/facebookaccregwizz.manifest.mf"">
-            <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/facebookaccregwizz"" 
+            <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/facebookaccregwizz""
                     prefix=""net/java/sip/communicator/plugin/facebookaccregwizz"" />
         </jar>
     </target>
@@ -2032,16 +2038,16 @@ org.apache.http.util""/>
             <zipfileset src=""${lib.noinst}/zrtp4j-light.jar"" prefix=""""/>
             <manifest>
                 <attribute name=""Export-Package"" value=""
-                	gnu.java.zrtp,
-                	gnu.java.zrtp.packets,
-                	gnu.java.zrtp.utils,
-                	gnu.java.zrtp.zidfile""/>
-    	        <attribute name=""Import-Package"" value=""org.bouncycastle.crypto,
-    	        	org.bouncycastle.crypto.digests,
-    	        	org.bouncycastle.crypto.macs,
-    	        	org.bouncycastle.crypto.params,
-    	        	org.bouncycastle.crypto.engines,
-    	        	org.bouncycastle.crypto.modes""/>
+                    gnu.java.zrtp,
+                    gnu.java.zrtp.packets,
+                    gnu.java.zrtp.utils,
+                    gnu.java.zrtp.zidfile""/>
+                <attribute name=""Import-Package"" value=""org.bouncycastle.crypto,
+                    org.bouncycastle.crypto.digests,
+                    org.bouncycastle.crypto.macs,
+                    org.bouncycastle.crypto.params,
+                    org.bouncycastle.crypto.engines,
+                    org.bouncycastle.crypto.modes""/>
                 <attribute name=""Bundle-Name"" value=""ZRTP4J""/>
                 <attribute name=""Bundle-Description"" value=""ZRTP for Java library.""/>
                 <attribute name=""Bundle-Version"" value=""1.4.5""/>
@@ -2072,33 +2078,33 @@ org.apache.http.util""/>
                 prefix=""net/java/sip/communicator/impl/metahistory"" />
         </jar>
     </target>
-	<!--BUNDLE-BOUNCYCASTLE -->
+    <!--BUNDLE-BOUNCYCASTLE -->
     <target name=""bundle-bouncycastle"">
-    	<jar compress=""true"" destfile=""${bundles.dest}/bouncycastle.jar"">
-    		<zipfileset src=""${lib.noinst}/lcrypto-jdk16-143.jar""/>
-    		<manifest>
-    		    <attribute name=""Export-Package"" value=""org.bouncycastle.crypto,
-    	        	org.bouncycastle.crypto.digests,
-    	        	org.bouncycastle.crypto.macs,
-    	        	org.bouncycastle.crypto.params,
-    	        	org.bouncycastle.crypto.engines,
-    	        	org.bouncycastle.crypto.modes,
-    		    	org.bouncycastle.crypto.generators,
-    		    	org.bouncycastle.crypto.signers,
-    		    	org.bouncycastle.util.encoders,
-    		    	org.bouncycastle.util""/>
-    		    <attribute name=""Bundle-Name"" value=""BouncyCastle""/>
-    		    <attribute name=""Bundle-Version"" value=""1.4.3.1""/>
-    		    <attribute name=""System-Bundle"" value=""yes""/>
+        <jar compress=""true"" destfile=""${bundles.dest}/bouncycastle.jar"">
+            <zipfileset src=""${lib.noinst}/lcrypto-jdk16-143.jar""/>
+            <manifest>
+                <attribute name=""Export-Package"" value=""org.bouncycastle.crypto,
+                    org.bouncycastle.crypto.digests,
+                    org.bouncycastle.crypto.macs,
+                    org.bouncycastle.crypto.params,
+                    org.bouncycastle.crypto.engines,
+                    org.bouncycastle.crypto.modes,
+                    org.bouncycastle.crypto.generators,
+                    org.bouncycastle.crypto.signers,
+                    org.bouncycastle.util.encoders,
+                    org.bouncycastle.util""/>
+                <attribute name=""Bundle-Name"" value=""BouncyCastle""/>
+                <attribute name=""Bundle-Version"" value=""1.4.3.1""/>
+                <attribute name=""System-Bundle"" value=""yes""/>
             </manifest>
-    	</jar>
+        </jar>
     </target>
-	<!--BUNDLE-PLUGIN-OTR -->
+    <!--BUNDLE-PLUGIN-OTR -->
     <target name=""bundle-plugin-otr"">
         <jar compress=""false"" destfile=""${bundles.dest}/otr.jar"" manifest=""${src}/net/java/sip/communicator/plugin/otr/otr.manifest.mf"">
             <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/otr""
                 prefix=""net/java/sip/communicator/plugin/otr""/>
-        	<zipfileset src=""${lib.noinst}/otr4j.jar""/>
+            <zipfileset src=""${lib.noinst}/otr4j.jar""/>
         </jar>
     </target>
     <!--BUNDLE-METAHISTORY-SLICK-->",adds a utility target ( run - v4 ) for running SC with a preference for IPv4 rather than the default IPv6,"""Added IPv4 preference target and fixed formatting in build.xml""","The commit message should be:

""Added IPv4 preference and updated BouncyCastle and OTR bundles""

However, a more descriptive and conventional commit message would be:

""Added IPv4 preference and updated BouncyCastle and OTR bundles for improved compatibility and functionality""

This commit message clearly describes the changes made in the commit, making it easier for others to understand the purpose and impact of the changes.","The commit message could be:

""Added new target 'run-v4' to start SIP Communicator with a preference for IPv4. Also, fixed some indentation issues and added missing spaces in the build.xml file.""","```plaintext
Added run-v4 target to build.xml and corrected indentation and whitespace issues.
```",Model 1
"diff --git a/vm/benchmarks/agentscript/sieve-filter1.js b/vm/benchmarks/agentscript/sieve-filter1.js
index 168e65a0fc9..6aec8202ff9 100644
--- a/vm/benchmarks/agentscript/sieve-filter1.js
+++ b/vm/benchmarks/agentscript/sieve-filter1.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 /* global agent */
 
 var sum = 0;
diff --git a/vm/benchmarks/agentscript/sieve-filter2.js b/vm/benchmarks/agentscript/sieve-filter2.js
index 1a40cfcbf5a..62112543e95 100644
--- a/vm/benchmarks/agentscript/sieve-filter2.js
+++ b/vm/benchmarks/agentscript/sieve-filter2.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 /* global agent */
 
 var sum = 0;
diff --git a/vm/benchmarks/agentscript/sieve.js b/vm/benchmarks/agentscript/sieve.js
index 57646999de7..d38366ce811 100644
--- a/vm/benchmarks/agentscript/sieve.js
+++ b/vm/benchmarks/agentscript/sieve.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 function Natural() {
     this.x = 2;
 };",Add copyright headers .,"""Add copyright notice to AgentScript benchmarks""","The commit message should be:

""Add copyright notices to sieve-filter1.js, sieve-filter2.js, and sieve.js""

However, a more concise and conventional commit message would be:

""Add copyright notices to sieve benchmarks""

This commit message clearly conveys the changes made in the commit, which is adding copyright notices to three files.","Added Oracle license header to AgentScript files sieve-filter1.js, sieve-filter2.js, and sieve.js

The provided diff shows that the Oracle license header has been added to the beginning of three JavaScript files: sieve-filter1.js, sieve-filter2.js, and sieve.js. The added header includes a copyright notice, information about the GNU General Public License version 2, and contact information for Oracle.","Added Oracle copyright and licensing notice to sieve-filter1.js, sieve-filter2.js, and sieve.js files.",Model 1
"diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
new file mode 100644
index 000000000..b299b2fd7
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
@@ -0,0 +1,112 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.Constants;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.common.timer.Timer;
+import org.apache.dubbo.common.timer.TimerTask;
+import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * AbstractRetryTask
+ */
+public abstract class AbstractRetryTask implements TimerTask {
+
+    protected final Logger logger = LoggerFactory.getLogger(getClass());
+
+    /**
+     * url for retry task
+     */
+    protected final URL url;
+
+    /**
+     * registry for this task
+     */
+    protected final FailbackRegistry registry;
+
+    /**
+     * retry period
+     */
+    protected final long retryPeriod;
+
+    /**
+     * task name for this task
+     */
+    protected final String taskName;
+
+    private volatile boolean cancel;
+
+    AbstractRetryTask(URL url, FailbackRegistry registry, String taskName) {
+        if (url == null || StringUtils.isBlank(taskName)) {
+            throw new IllegalArgumentException();
+        }
+        this.url = url;
+        this.registry = registry;
+        this.taskName = taskName;
+        cancel = false;
+        this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);
+    }
+
+    public void cancel() {
+        cancel = true;
+    }
+
+    public boolean isCancel() {
+        return cancel;
+    }
+
+    protected void reput(Timeout timeout, long tick) {
+        if (timeout == null) {
+            throw new IllegalArgumentException();
+        }
+
+        Timer timer = timeout.timer();
+        if (timer.isStop() || timeout.isCancelled() || isCancel()) {
+            return;
+        }
+
+        timer.newTimeout(timeout.task(), tick, TimeUnit.MILLISECONDS);
+    }
+
+    @Override
+    public void run(Timeout timeout) throws Exception {
+        if (timeout.isCancelled() || timeout.timer().isStop() || isCancel()) {
+            // other thread cancel this timeout or stop the timer.
+            return;
+        }
+        if (logger.isInfoEnabled()) {
+            logger.info(taskName + "" : "" + url);
+        }
+        try {
+            doRetry(url, registry, timeout);
+        } catch (Throwable t) { // Ignore all the exceptions and wait for the next retry
+            logger.warn(""Failed to execute task "" + taskName + "", url: "" + url + "", waiting for again, cause:"" + t.getMessage(), t);
+            // reput this task when catch exception.
+            reput(timeout, retryPeriod);
+        }
+    }
+
+    protected abstract void doRetry(URL url, FailbackRegistry registry, Timeout timeout);
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java
new file mode 100644
index 000000000..9ccb67301
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+/**
+ * FailedNotifiedTask
+ */
+public final class FailedNotifiedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry subscribe"";
+
+    private final NotifyListener listener;
+
+    private final List<URL> urls = new CopyOnWriteArrayList<>();
+
+    public FailedNotifiedTask(URL url, NotifyListener listener) {
+        super(url, null, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    public void addUrlToRetry(List<URL> urls) {
+        if (CollectionUtils.isEmpty(urls)) {
+            return;
+        }
+        this.urls.addAll(urls);
+    }
+
+    public void removeRetryUrl(List<URL> urls) {
+        this.urls.removeAll(urls);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        if (CollectionUtils.isNotEmpty(urls)) {
+            listener.notify(urls);
+            urls.clear();
+        }
+        reput(timeout, retryPeriod);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java
new file mode 100644
index 000000000..c4d9cc6f0
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedRegisteredTask
+ */
+public final class FailedRegisteredTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry register"";
+
+    public FailedRegisteredTask(URL url, FailbackRegistry registry) {
+        super(url, registry, NAME);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doRegister(url);
+        registry.removeFailedRegisteredTask(url);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java
new file mode 100644
index 000000000..06d1ec315
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedSubscribedTask
+ */
+public final class FailedSubscribedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry subscribe"";
+
+    private final NotifyListener listener;
+
+    public FailedSubscribedTask(URL url, FailbackRegistry registry, NotifyListener listener) {
+        super(url, registry, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doSubscribe(url, listener);
+        registry.removeFailedSubscribedTask(url, listener);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java
new file mode 100644
index 000000000..4cf3aa4eb
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedUnregisteredTask
+ */
+public final class FailedUnregisteredTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry unregister"";
+
+    public FailedUnregisteredTask(URL url, FailbackRegistry registry) {
+        super(url, registry, NAME);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doUnregister(url);
+        registry.removeFailedUnregisteredTask(url);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
new file mode 100644
index 000000000..6814583df
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedUnsubscribedTask
+ */
+public final class FailedUnsubscribedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry unsubscribe"";
+
+    private final NotifyListener listener;
+
+    public FailedUnsubscribedTask(URL url, FailbackRegistry registry, NotifyListener listener) {
+        super(url, registry, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.unsubscribe(url, listener);
+        registry.removeFailedUnsubscribedTask(url, listener);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
index 5c456d528..5d2d2f041 100644
--- a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
@@ -18,10 +18,14 @@ package org.apache.dubbo.registry.support;
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.utils.ConcurrentHashSet;
-import org.apache.dubbo.common.utils.ExecutorUtil;
+import org.apache.dubbo.common.timer.HashedWheelTimer;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.retry.FailedNotifiedTask;
+import org.apache.dubbo.registry.retry.FailedRegisteredTask;
+import org.apache.dubbo.registry.retry.FailedSubscribedTask;
+import org.apache.dubbo.registry.retry.FailedUnregisteredTask;
+import org.apache.dubbo.registry.retry.FailedUnsubscribedTask;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -30,108 +34,197 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
 /**
  * FailbackRegistry. (SPI, Prototype, ThreadSafe)
- *
  */
 public abstract class FailbackRegistry extends AbstractRegistry {
 
-    // Scheduled executor service
-    private final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(""DubboRegistryFailedRetryTimer"", true));
-
-    // Timer for failure retry, regular check if there is a request for failure, and if there is, an unlimited retry
-    private final ScheduledFuture<?> retryFuture;
+    /*  retry task map */
 
-    private final Set<URL> failedRegistered = new ConcurrentHashSet<URL>();
+    private final ConcurrentMap<URL, FailedRegisteredTask> failedRegistered = new ConcurrentHashMap<URL, FailedRegisteredTask>();
 
-    private final Set<URL> failedUnregistered = new ConcurrentHashSet<URL>();
+    private final ConcurrentMap<URL, FailedUnregisteredTask> failedUnregistered = new ConcurrentHashMap<URL, FailedUnregisteredTask>();
 
-    private final ConcurrentMap<URL, Set<NotifyListener>> failedSubscribed = new ConcurrentHashMap<URL, Set<NotifyListener>>();
+    private final ConcurrentMap<Holder, FailedSubscribedTask> failedSubscribed = new ConcurrentHashMap<Holder, FailedSubscribedTask>();
 
-    private final ConcurrentMap<URL, Set<NotifyListener>> failedUnsubscribed = new ConcurrentHashMap<URL, Set<NotifyListener>>();
+    private final ConcurrentMap<Holder, FailedUnsubscribedTask> failedUnsubscribed = new ConcurrentHashMap<Holder, FailedUnsubscribedTask>();
 
-    private final ConcurrentMap<URL, Map<NotifyListener, List<URL>>> failedNotified = new ConcurrentHashMap<URL, Map<NotifyListener, List<URL>>>();
+    private final ConcurrentMap<Holder, FailedNotifiedTask> failedNotified = new ConcurrentHashMap<Holder, FailedNotifiedTask>();
 
     /**
      * The time in milliseconds the retryExecutor will wait
      */
     private final int retryPeriod;
 
+    // Timer for failure retry, regular check if there is a request for failure, and if there is, an unlimited retry
+    private final HashedWheelTimer retryTimer;
+
     public FailbackRegistry(URL url) {
         super(url);
         this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);
-        this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {
-            @Override
-            public void run() {
-                // Check and connect to the registry
-                try {
-                    retry();
-                } catch (Throwable t) { // Defensive fault tolerance
-                    logger.error(""Unexpected error occur at failed retry, cause: "" + t.getMessage(), t);
-                }
-            }
-        }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);
+
+        // since the retry task will not be very much. 128 ticks is enough.
+        retryTimer = new HashedWheelTimer(new NamedThreadFactory(""DubboRegistryRetryTimer"", true), retryPeriod, TimeUnit.MILLISECONDS, 128);
     }
 
-    public Future<?> getRetryFuture() {
-        return retryFuture;
+    public void removeFailedRegisteredTask(URL url) {
+        failedRegistered.remove(url);
     }
 
-    public Set<URL> getFailedRegistered() {
-        return failedRegistered;
+    public void removeFailedUnregisteredTask(URL url) {
+        failedUnregistered.remove(url);
     }
 
-    public Set<URL> getFailedUnregistered() {
-        return failedUnregistered;
+    public void removeFailedSubscribedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedSubscribed.remove(h);
     }
 
-    public Map<URL, Set<NotifyListener>> getFailedSubscribed() {
-        return failedSubscribed;
+    public void removeFailedUnsubscribedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedUnsubscribed.remove(h);
     }
 
-    public Map<URL, Set<NotifyListener>> getFailedUnsubscribed() {
-        return failedUnsubscribed;
+    public void removeFailedNotifiedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedNotified.remove(h);
     }
 
-    public Map<URL, Map<NotifyListener, List<URL>>> getFailedNotified() {
-        return failedNotified;
+    private void addFailedRegistered(URL url) {
+        FailedRegisteredTask oldOne = failedRegistered.get(url);
+        if (oldOne != null) {
+            return;
+        }
+        FailedRegisteredTask newTask = new FailedRegisteredTask(url, this);
+        oldOne = failedRegistered.putIfAbsent(url, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedRegistered(URL url) {
+        FailedRegisteredTask f = failedRegistered.remove(url);
+        if (f != null) {
+            f.cancel();
+        }
+    }
+
+    private void addFailedUnregistered(URL url) {
+        FailedUnregisteredTask oldOne = failedUnregistered.get(url);
+        if (oldOne != null) {
+            return;
+        }
+        FailedUnregisteredTask newTask = new FailedUnregisteredTask(url, this);
+        oldOne = failedUnregistered.putIfAbsent(url, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedUnregistered(URL url) {
+        FailedUnregisteredTask f = failedUnregistered.remove(url);
+        if (f != null) {
+            f.cancel();
+        }
     }
 
     private void addFailedSubscribed(URL url, NotifyListener listener) {
-        Set<NotifyListener> listeners = failedSubscribed.get(url);
-        if (listeners == null) {
-            failedSubscribed.putIfAbsent(url, new ConcurrentHashSet<NotifyListener>());
-            listeners = failedSubscribed.get(url);
+        Holder h = new Holder(url, listener);
+        FailedSubscribedTask oldOne = failedSubscribed.get(h);
+        if (oldOne != null) {
+            return;
+        }
+        FailedSubscribedTask newTask = new FailedSubscribedTask(url, this, listener);
+        oldOne = failedSubscribed.putIfAbsent(h, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
         }
-        listeners.add(listener);
     }
 
     private void removeFailedSubscribed(URL url, NotifyListener listener) {
-        Set<NotifyListener> listeners = failedSubscribed.get(url);
-        if (listeners != null) {
-            listeners.remove(listener);
+        Holder h = new Holder(url, listener);
+        FailedSubscribedTask f = failedSubscribed.remove(h);
+        if (f != null) {
+            f.cancel();
+        }
+        removeFailedUnsubscribed(url, listener);
+        removeFailedNotified(url, listener);
+    }
+
+    private void addFailedUnsubscribed(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedUnsubscribedTask oldOne = failedUnsubscribed.get(h);
+        if (oldOne != null) {
+            return;
+        }
+        FailedUnsubscribedTask newTask = new FailedUnsubscribedTask(url, this, listener);
+        oldOne = failedUnsubscribed.putIfAbsent(h, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedUnsubscribed(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedUnsubscribedTask f = failedUnsubscribed.remove(h);
+        if (f != null) {
+            f.cancel();
         }
-        listeners = failedUnsubscribed.get(url);
-        if (listeners != null) {
-            listeners.remove(listener);
+    }
+
+    private void addFailedNotified(URL url, NotifyListener listener, List<URL> urls) {
+        Holder h = new Holder(url, listener);
+        FailedNotifiedTask newTask = new FailedNotifiedTask(url, listener);
+        FailedNotifiedTask f = failedNotified.putIfAbsent(h, newTask);
+        if (f == null) {
+            // never has a retry task. then start a new task for retry.
+            newTask.addUrlToRetry(urls);
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        } else {
+            // just add urls which needs retry.
+            newTask.addUrlToRetry(urls);
         }
-        Map<NotifyListener, List<URL>> notified = failedNotified.get(url);
-        if (notified != null) {
-            notified.remove(listener);
+    }
+
+    private void removeFailedNotified(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedNotifiedTask f = failedNotified.remove(h);
+        if (f != null) {
+            f.cancel();
         }
     }
 
+    public ConcurrentMap<URL, FailedRegisteredTask> getFailedRegistered() {
+        return failedRegistered;
+    }
+
+    public ConcurrentMap<URL, FailedUnregisteredTask> getFailedUnregistered() {
+        return failedUnregistered;
+    }
+
+    public ConcurrentMap<Holder, FailedSubscribedTask> getFailedSubscribed() {
+        return failedSubscribed;
+    }
+
+    public ConcurrentMap<Holder, FailedUnsubscribedTask> getFailedUnsubscribed() {
+        return failedUnsubscribed;
+    }
+
+    public ConcurrentMap<Holder, FailedNotifiedTask> getFailedNotified() {
+        return failedNotified;
+    }
+
     @Override
     public void register(URL url) {
         super.register(url);
-        failedRegistered.remove(url);
-        failedUnregistered.remove(url);
+        removeFailedRegistered(url);
+        removeFailedUnregistered(url);
         try {
             // Sending a registration request to the server side
             doRegister(url);
@@ -153,15 +246,15 @@ public abstract class FailbackRegistry extends AbstractRegistry {
     ",Optimize retry for FailbackRegistry .,"""Introduce retry mechanism for registry operations""","According to the diff, the commit message should be:

""Implement retry mechanism for failed registry operations""

This commit message accurately reflects the changes made in the code, which include the introduction of a retry mechanism for failed registry operations, including registration, unregistration, subscription, and unsubscription.","Refactor FailbackRegistry to use HashedWheelTimer for failure retry

 This commit refactors the FailbackRegistry class to use a HashedWheelTimer for failure retry instead of a ScheduledExecutorService. The retry tasks are now stored in ConcurrentMaps and the Holder class is used to hold the URL and NotifyListener. The changes also include adding methods to remove failed tasks, adding URLs to the failed notified task, and cancelling the tasks. The diff shows that the changes are extensive and involve many parts of the class, including the constructor, fields, and methods.","""Introduce retry tasks for registry operations to handle failures robustly in Dubbo.""",Model 4
"diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
index 5fe7d6b868f..772cbd6d81d 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
@@ -80,8 +80,8 @@ public class BallerinaParser extends Parser {
 		RULE_objectFunctionDefinition = 23, RULE_annotationDefinition = 24, RULE_constantDefinition = 25, 
 		RULE_globalVariableDefinition = 26, RULE_channelType = 27, RULE_attachmentPoint = 28, 
 		RULE_workerDeclaration = 29, RULE_workerDefinition = 30, RULE_finiteType = 31, 
-		RULE_finiteTypeUnit = 32, RULE_typeName = 33, RULE_openRecordTypeDescriptor = 34, 
-		RULE_closedRecordTypeDescriptor = 35, RULE_fieldDescriptor = 36, RULE_simpleTypeName = 37, 
+		RULE_finiteTypeUnit = 32, RULE_typeName = 33, RULE_inclusiveRecordTypeDescriptor = 34, 
+		RULE_exclusiveRecordTypeDescriptor = 35, RULE_fieldDescriptor = 36, RULE_simpleTypeName = 37, 
 		RULE_referenceTypeName = 38, RULE_userDefineTypeName = 39, RULE_valueTypeName = 40, 
 		RULE_builtInReferenceTypeName = 41, RULE_functionTypeName = 42, RULE_errorTypeName = 43, 
 		RULE_xmlNamespaceName = 44, RULE_xmlLocalName = 45, RULE_annotationAttachment = 46, 
@@ -157,18 +157,18 @@ public class BallerinaParser extends Parser {
 		""sealedLiteral"", ""restDescriptorPredicate"", ""objectFunctionDefinition"", 
 		""annotationDefinition"", ""constantDefinition"", ""globalVariableDefinition"", 
 		""channelType"", ""attachmentPoint"", ""workerDeclaration"", ""workerDefinition"", 
-		""finiteType"", ""finiteTypeUnit"", ""typeName"", ""openRecordTypeDescriptor"", 
-		""closedRecordTypeDescriptor"", ""fieldDescriptor"", ""simpleTypeName"", ""referenceTypeName"", 
-		""userDefineTypeName"", ""valueTypeName"", ""builtInReferenceTypeName"", ""functionTypeName"", 
-		""errorTypeName"", ""xmlNamespaceName"", ""xmlLocalName"", ""annotationAttachment"", 
-		""statement"", ""variableDefinitionStatement"", ""recordLiteral"", ""staticMatchLiterals"", 
-		""tupleLiteral"", ""recordKeyValue"", ""recordKey"", ""tableLiteral"", ""tableColumnDefinition"", 
-		""tableColumn"", ""tableDataArray"", ""tableDataList"", ""tableData"", ""arrayLiteral"", 
-		""assignmentStatement"", ""tupleDestructuringStatement"", ""recordDestructuringStatement"", 
-		""errorDestructuringStatement"", ""compoundAssignmentStatement"", ""compoundOperator"", 
-		""variableReferenceList"", ""ifElseStatement"", ""ifClause"", ""elseIfClause"", 
-		""elseClause"", ""matchStatement"", ""matchPatternClause"", ""bindingPattern"", 
-		""structuredBindingPattern"", ""errorBindingPattern"", ""tupleBindingPattern"", 
+		""finiteType"", ""finiteTypeUnit"", ""typeName"", ""inclusiveRecordTypeDescriptor"", 
+		""exclusiveRecordTypeDescriptor"", ""fieldDescriptor"", ""simpleTypeName"", 
+		""referenceTypeName"", ""userDefineTypeName"", ""valueTypeName"", ""builtInReferenceTypeName"", 
+		""functionTypeName"", ""errorTypeName"", ""xmlNamespaceName"", ""xmlLocalName"", 
+		""annotationAttachment"", ""statement"", ""variableDefinitionStatement"", ""recordLiteral"", 
+		""staticMatchLiterals"", ""tupleLiteral"", ""recordKeyValue"", ""recordKey"", 
+		""tableLiteral"", ""tableColumnDefinition"", ""tableColumn"", ""tableDataArray"", 
+		""tableDataList"", ""tableData"", ""arrayLiteral"", ""assignmentStatement"", ""tupleDestructuringStatement"", 
+		""recordDestructuringStatement"", ""errorDestructuringStatement"", ""compoundAssignmentStatement"", 
+		""compoundOperator"", ""variableReferenceList"", ""ifElseStatement"", ""ifClause"", 
+		""elseIfClause"", ""elseClause"", ""matchStatement"", ""matchPatternClause"", 
+		""bindingPattern"", ""structuredBindingPattern"", ""errorBindingPattern"", ""tupleBindingPattern"", 
 		""recordBindingPattern"", ""openRecordBindingPattern"", ""closedRecordBindingPattern"", 
 		""entryBindingPattern"", ""fieldBindingPattern"", ""restBindingPattern"", ""bindingRefPattern"", 
 		""structuredRefBindingPattern"", ""tupleRefBindingPattern"", ""recordRefBindingPattern"", 
@@ -2845,20 +2845,6 @@ public class BallerinaParser extends Parser {
 			super.copyFrom(ctx);
 		}
 	}
-	public static class OpenRecordTypeNameLabelContext extends TypeNameContext {
-		public OpenRecordTypeDescriptorContext openRecordTypeDescriptor() {
-			return getRuleContext(OpenRecordTypeDescriptorContext.class,0);
-		}
-		public OpenRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
-		@Override
-		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterOpenRecordTypeNameLabel(this);
-		}
-		@Override
-		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitOpenRecordTypeNameLabel(this);
-		}
-	}
 	public static class TupleTypeNameLabelContext extends TypeNameContext {
 		public TerminalNode LEFT_PARENTHESIS() { return getToken(BallerinaParser.LEFT_PARENTHESIS, 0); }
 		public List<TypeNameContext> typeName() {
@@ -2903,6 +2889,20 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitUnionTypeNameLabel(this);
 		}
 	}
+	public static class ExclusiveRecordTypeNameLabelContext extends TypeNameContext {
+		public ExclusiveRecordTypeDescriptorContext exclusiveRecordTypeDescriptor() {
+			return getRuleContext(ExclusiveRecordTypeDescriptorContext.class,0);
+		}
+		public ExclusiveRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterExclusiveRecordTypeNameLabel(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitExclusiveRecordTypeNameLabel(this);
+		}
+	}
 	public static class SimpleTypeNameLabelContext extends TypeNameContext {
 		public SimpleTypeNameContext simpleTypeName() {
 			return getRuleContext(SimpleTypeNameContext.class,0);
@@ -2932,20 +2932,6 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitNullableTypeNameLabel(this);
 		}
 	}
-	public static class ClosedRecordTypeNameLabelContext extends TypeNameContext {
-		public ClosedRecordTypeDescriptorContext closedRecordTypeDescriptor() {
-			return getRuleContext(ClosedRecordTypeDescriptorContext.class,0);
-		}
-		public ClosedRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
-		@Override
-		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterClosedRecordTypeNameLabel(this);
-		}
-		@Override
-		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitClosedRecordTypeNameLabel(this);
-		}
-	}
 	public static class ArrayTypeNameLabelContext extends TypeNameContext {
 		public TypeNameContext typeName() {
 			return getRuleContext(TypeNameContext.class,0);
@@ -3013,6 +2999,20 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitGroupTypeNameLabel(this);
 		}
 	}
+	public static class InclusiveRecordTypeNameLabelContext extends TypeNameContext {
+		public InclusiveRecordTypeDescriptorContext inclusiveRecordTypeDescriptor() {
+			return getRuleContext(InclusiveRecordTypeDescriptorContext.class,0);
+		}
+		public InclusiveRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterInclusiveRecordTypeNameLabel(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitInclusiveRecordTypeNameLabel(this);
+		}
+	}
 
 	public final TypeNameContext typeName() throws RecognitionException {
 		return typeName(0);
@@ -3147,20 +3147,20 @@ public class BallerinaParser extends Parser {
 				break;
 			case 5:
 				{
-				_localctx = new OpenRecordTypeNameLabelContext(_localctx);
+				_localctx = new InclusiveRecordTypeNameLabelContext(_localctx);
 				_ctx = _localctx;
 				_prevctx = _localctx;
 				setState(847);
-				openRecordTypeDescriptor();
+				inclusiveRecordTypeDescriptor();
 				}
 				break;
 			case 6:
 				{
-				_localctx = new ClosedRecordTypeNameLabelContext(_localctx);
+				_localctx = new ExclusiveRecordTypeNameLabelContext(_localctx);
 				_ctx = _localctx;
 				_prevctx = _localctx;
 				setState(848);
-				closedRecordTypeDescriptor();
+				exclusiveRecordTypeDescriptor();
 				}
 				break;
 			}
@@ -3286,7 +3286,7 @@ public class BallerinaParser extends Parser {
 		return _localctx;
 	}
 
-	public static class OpenRecordTypeDescriptorContext extends ParserRuleContext {
+	public static class InclusiveRecordTypeDescriptorContext extends ParserRuleContext {
 		public TerminalNode RECORD() { return getToken(BallerinaParser.RECORD, 0); }
 		public TerminalNode LEFT_BRACE() { return getToken(BallerinaParser.LEFT_BRACE, 0); }
 		public TerminalNode RIGHT_BRACE() { return getToken(BallerinaParser.RIGHT_BRACE, 0); }
@@ -3296,29 +3296,25 @@ public class BallerinaParser extends Parser {
 		public FieldDescriptorContext fieldDescriptor(int i) {
 			return getRuleContext(FieldDescriptorContext.class,i);
 		}
-		public RecordRestFieldDefinitionContext recordRestFieldDefinition() {
-			return getRuleContext(RecordRestFieldDefinitionContext.class,0);
-		}
-		public OpenRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
+		public InclusiveRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
 			super(parent, invokingState);
 		}
-		@Override public int getRuleIndex() { return RULE_openRecordTypeDescriptor; }
+		@Override public int getRuleIndex() { return RULE_inclusiveRecordTypeDescriptor; }
 		@Override
 		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterOpenRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterInclusiveRecordTypeDescriptor(this);
 		}
 		@Override
 		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitOpenRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitInclusiveRecordTypeDescriptor(this);
 		}
 	}
 
-	public final OpenRecordTypeDescriptorContext openRecordTypeDescriptor() throws RecognitionException {
-		OpenRecordTypeDescriptorContext _localctx = new OpenRecordTypeDescriptorContext(_ctx, getState());
-		enterRule(_localctx, 68, RULE_openRecordTypeDescriptor);
+	public final InclusiveRecordTypeDescriptorContext inclusiveRecordTypeDescriptor() throws RecognitionException {
+		InclusiveRecordTypeDescriptorContext _localctx = new InclusiveRecordTypeDescriptorContext(_ctx, getState());
+		enterRule(_localctx, 68, RULE_inclusiveRecordTypeDescriptor);
 		int _la;
 		try {
-			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
 			setState(876);
@@ -3327,30 +3323,19 @@ public class BallerinaParser extends Parser {
 			match(LEFT_BRACE);
 			setState(881);
 			_errHandler.sync(this);
-			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
-			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
-				if ( _alt==1 ) {
-					{
-					{
-					setState(878);
-					fieldDescriptor();
-					}
-					} 
-				}
-				setState(883);
-				_errHandler.sync(this);
-				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
-			}
-			setState(885);
 			_la = _input.LA(1);
-			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || _la==LEFT_PARENTHESIS || _la==Identifier) {
+			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LEFT_PARENTHESIS - 129)) | (1L << (MUL - 129)) | (1L << (AT - 129)) | (1L << (Identifier - 129)))) != 0)) {
 				{
-				setState(884);
-				recordRestFieldDefinition();
+				{
+				setState(878);
+				fieldDescriptor();
 				}
+				}
+				setState(883);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
 			}
-
-			setState(887);
+			setState(884);
 			match(RIGHT_BRACE);
 			}
 		}
@@ -3365,7 +3350,7 @@ public class BallerinaParser extends Parser {
 		return _localctx;
 	}
 
-	public static class ClosedRecordTypeDescriptorContext extends ParserRuleContext {
+	public static class ExclusiveRecordTypeDescriptorContext extends ParserRuleContext {
 		public TerminalNode RECORD() { return getToken(BallerinaParser.RECORD, 0); }
 		public TerminalNode LEFT_CLOSED_RECORD_DELIMITER() { return getToken(BallerinaParser.LEFT_CLOSED_RECORD_DELIMITER, 0); }
 		public TerminalNode RIGHT_CLOSED_RECORD_DELIMITER() { return getToken(BallerinaParser.RIGHT_CLOSED_RECORD_DELIMITER, 0); }
@@ -3375,45 +3360,60 @@ public class BallerinaParser extends Parser {
 		public FieldDescriptorContext fieldDescriptor(int i) {
 			return getRuleContext(FieldDescriptorContext.class,i);
 		}
-		public ClosedRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
+		public RecordRestFieldDefinitionContext recordRestFieldDefinition() {
+			return getRuleContext(RecordRestFieldDefinitionContext.class,0);
+		}
+		public ExclusiveRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
 			super(parent, invokingState);
 		}
-		@Override public int getRuleIndex() { return RULE_closedRecordTypeDescriptor; }
+		@Override public int getRuleIndex() { return RULE_exclusiveRecordTypeDescriptor; }
 		@Override
 		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterClosedRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterExclusiveRecordTypeDescriptor(this);
 		}
 		@Override
 		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitClosedRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitExclusiveRecordTypeDescriptor(this);
 		}
 	}
 
-	public final ClosedRecordTypeDescriptorContext closedRecordTypeDescriptor() throws RecognitionException {
-		ClosedRecordTypeDescriptorContext _localctx = new ClosedRecordTypeDescriptorContext(_ctx, getState());
-		enterRule(_localctx, 70, RULE_closedRecordTypeDescriptor);
+	public final ExclusiveRecordTypeDescriptorContext exclusiveRecordTypeDescriptor() throws RecognitionException {
+		ExclusiveRecordTypeDescriptorContext _localctx = new ExclusiveRecordTypeDescriptorContext(_ctx, getState());
+		enterRule(_localctx, 70, RULE_exclusiveRecordTypeDescriptor);
 		int _la;
 		try {
+			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(889);
+			setState(886);
 			match(RECORD);
-			setState(890);
+			setState(887);
 			match(LEFT_CLOSED_RECORD_DELIMITER);
-			setState(894);
+			setState(891);
 			_errHandler.sync(this);
+			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
+			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
+				if ( _alt==1 ) {
+					{
+					{
+					setState(888);
+					fieldDescriptor();
+					}
+					} 
+				}
+				setState(893);
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
+			}
+			setState(895);
 			_la = _input.LA(1);
-			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LEFT_PARENTHESIS - 129)) | (1L << (MUL - 129)) | (1L << (AT - 129)) | (1L << (Identifier - 129)))) != 0)) {
-				{
+			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || _la==LEFT_PARENTHESIS || _la==Identifier) {
 				{
-				setState(891);
-				fieldDescriptor();
-				}
+				setState(894);
+				recordRestFieldDefinition();
 				}
-				setState(896);
-				_errHandler.sync(this);
-				_la = _input.LA(1);
 			}
+
 			setState(897);
 			match(RIGHT_CLOSED_RECORD_DELIMITER);
 			}
@@ -17659,7 +17659,7 @@ public class BallerinaParser extends Parser {
 		""\5#\u0348\n#\3#\5#\u034b\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0354\n#\3#\3#\3#""+
 		""\3#\5#\u035a\n#\3#\6#\u035d\n#\r#\16#\u035e\3#\3#\3#\6#\u0364\n#\r#\16""+
 		""#\u0365\3#\3#\7#\u036a\n#\f#\16#\u036d\13#\3$\3$\3$\7$\u0372\n$\f$\16""+
-		""$\u0375\13$\3$\5$\u0378\n$\3$\3$\3%\3%\3%\7%\u037f\n%\f%\16%\u0382\13""+
+		""$\u0375\13$\3$\3$\3%\3%\3%\7%\u037c\n%\f%\16%\u037f\13%\3%\5%\u0382\n""+
 		""%\3%\3%\3&\3&\5&\u0388\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0390\n\'\3(\3(""+
 		""\5(\u0394\n(\3)\3)\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+""+
 		""\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u03b3\n+\3,\3,\3,\3,\5,\u03b9\n,\3,""+
@@ -17853,7 +17853,7 @@ public class BallerinaParser extends Parser {
 		""\2\2\2.\u02b1\3\2\2\2\60\u02b4\3\2\2\2\62\u02cd\3\2\2\2\64\u02e4\3\2\2""+
 		""\2\66\u030b\3\2\2\28\u030d\3\2\2\2:\u0312\3\2\2\2<\u0314\3\2\2\2>\u031e""+
 		""\3\2\2\2@\u0323\3\2\2\2B\u032d\3\2\2\2D\u0353\3\2\2\2F\u036e\3\2\2\2H""+
-		""\u037b\3\2\2\2J\u0387\3\2\2\2L\u038f\3\2\2\2N\u0393\3\2\2\2P\u0395\3\2""+
+		""\u0378\3\2\2\2J\u0387\3\2\2\2L\u038f\3\2\2\2N\u0393\3\2\2\2P\u0395\3\2""+
 		""\2\2R\u0397\3\2\2\2T\u03b2\3\2\2\2V\u03b4\3\2\2\2X\u03be\3\2\2\2Z\u03c9""+
 		""\3\2\2\2\\\u03cb\3\2\2\2^\u03cd\3\2\2\2`\u03ec\3\2\2\2b\u03fe\3\2\2\2""+
 		""d\u0400\3\2\2\2f\u0412\3\2\2\2h\u041c\3\2\2\2j\u0427\3\2\2\2l\u042d\3""+
@@ -18052,12 +18052,12 @@ public class BallerinaParser extends Parser {
 		""\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b""+
 		""\u036c\3\2\2\2\u036cE\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7\r\2\2""+
 		""\u036f\u0373\7\u0081\2\2\u0370\u0372\5J&\2\u0371\u0370\3\2\2\2\u0372\u0375""+
-		""\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0377\3\2\2\2\u0375""+
-		""\u0373\3\2\2\2\u0376\u0378\5*\26\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2""+
-		""\2\2\u0378\u0379\3\2\2\2\u0379\u037a\7\u0082\2\2\u037aG\3\2\2\2\u037b""+
-		""\u037c\7\r\2\2\u037c\u0380\7\u0088\2\2\u037d\u037f\5J&\2\u037e\u037d\3""+
-		""\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381""+
-		""\u0383\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0384\7\u0089\2\2\u0384I\3\2""+
+		""\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2\2\u0375""+
+		""\u0373\3\2\2\2\u0376\u0377\7\u0082\2\2\u0377G\3\2\2\2\u0378\u0379\7\r""+
+		""\2\2\u0379\u037d\7\u0088\2\2\u037a\u037c\5J&\2\u037b\u037a\3\2\2\2\u037c""+
+		""\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0381\3\2""+
+		""\2\2\u037f\u037d\3\2\2\2\u0380\u0382\5*\26\2\u0381\u0380\3\2\2\2\u0381""+
+		""\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\7\u0089\2\2\u0384I\3\2""+
 		""\2\2\u0385\u0388\5(\25\2\u0386\u0388\5$\23\2\u0387\u0385\3\2\2\2\u0387""+
 		""\u0386\3\2\2\2\u0388K\3\2\2\2\u0389\u0390\7O\2\2\u038a\u0390\7S\2\2\u038b""+
 		""\u0390\7P\2\2\u038c\u0390\5R*\2\u038d\u0390\5N(\2\u038e\u0390\5\u0144""+
@@ -18657,7 +18657,7 @@ public class BallerinaParser extends Parser {
 		""\u025d\u0260\u0265\u026c\u0270\u0273\u027d\u027f\u0289\u028d\u0293\u029a""+
 		""\u02a0\u02a4\u02b4\u02b9\u02bd\u02c0\u02c7\u02ca\u02cd\u02d6\u02db\u02df""+
 		""\u02e4\u02e8\u02f0\u02fa\u02fe\u030b\u0319\u0321\u0328\u032d\u033b\u0341""+
-		""\u0344\u0347\u034a\u0353\u0359\u035e\u0365\u0369\u036b\u0373\u0377\u0380""+
+		""\u0344\u0347\u034a\u0353\u0359\u035e\u0365\u0369\u036b\u0373\u037d\u0381""+
 		""\u0387\u038f\u0393\u03b2\u03b8\u03bc\u03c3\u03c7\u03d0\u03ec\u03f3\u03f7""+
 		""\u03fe\u0406\u0409\u0412\u0419\u0422\u042d\u0432\u0436\u0440\u0443\u0448""+
 		""\u044e\u0457\u045b\u0463\u0487\u048e\u0492\u049a\u04a6\u04b0\u04bb\u04c6""+
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
index 3aa83943773..f81874ba341 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
@@ -412,37 +412,37 @@ public class BallerinaParserBaseListener implements BallerinaParserListener {
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx) { }
+	@Override public void enterTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx) { }
+	@Override public void exitTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
+	@Override public void enterUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
+	@Override public void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
+	@Override public void enterExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
+	@Override public void exitExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
@@ -472,73 +472,73 @@ public class BallerinaParserBaseListener implements BallerinaParserListener {
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx) { }
+	@Override public void enterArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx) { }
+	@Override public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
+	@Override public void enterObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
+	@Override public void exitObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
+	@Override public void enterGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
+	@Override public void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
+	@Override public void enterInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
+	@Override public void exitInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx) { }
+	@Override public void enterInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx) { }
+	@Override public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx) { }
+	@Override public void enterExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx) { }
+	@Override public void exitExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
index c34d997f40f..51bd71975d7 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
@@ -337,18 +337,6 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 * @param ctx the parse tree
 	 */
 	void exitFiniteTypeUnit(BallerinaParser.FiniteTypeUnitContext ctx);
-	/**
-	 * Enter a parse tree produced by the {@code openRecordTypeNameLabel}
-	 * labeled alternative in {@link BallerinaParser#typeName}.
-	 * @param ctx the parse tree
-	 */
-	void enterOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx);
-	/**
-	 * Exit a parse tree produced by the {@code openRecordTypeNameLabel}
-	 * labeled alternative in {@link BallerinaParser#typeName}.
-	 * @param ctx the parse tree
-	 */
-	void exitOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx);
 	/**
 	 * Enter a parse tree produced by the {@code tupleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
@@ -374,41 +362,41 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 */
 	void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code simpleTypeNameLabel}
+	 * Enter a parse tree produced by the {@code exclusiveRecordTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
+	void enterExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code simpleTypeNameLabel}
+	 * Exit a parse tree produced by the {@code exclusiveRecordTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
+	void exitExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code nullableTypeNameLabel}
+	 * Enter a parse tree produced by the {@code simpleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
+	void enterSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code nullableTypeNameLabel}
+	 * Exit a parse tree produced by the {@code simpleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
+	void exitSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code closedRecordTypeNameLabel}
+	 * Enter a parse tree produced by the {@code nullableTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx);
+	void enterNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code closedRecordTypeNameLabel}
+	 * Exit a parse tree produced by the {@code nullableTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx);
+	void exitNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
 	/**
 	 * Enter a parse tree produced by the {@code arrayTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
@@ -446,25 +434,37 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 */
 	void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by {@link BallerinaParser#openRecordTypeDescriptor}.
+	 * Enter a parse tree produced by the {@code inclusiveRecordTypeNameLabel}
+	 * labeled alternative in {@link BallerinaParser#typeName}.
+	 * @param ctx the parse tree
+	 */
+	void enterInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx);
+	/**
+	 * Exit a parse tree produced by the {@code inclusiveRecordTypeNameLabel}
+	 * labeled alternative in {@link BallerinaParser#typeName}.
+	 * @param ctx the parse tree
+	 */
+	void exitInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link BallerinaParser#inclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void enterOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx);
+	void enterInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Exit a parse tree produced by {@link BallerinaParser#openRecordTypeDescriptor}.
+	 * Exit a parse tree produced by {@link BallerinaParser#inclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void exitOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx);
+	void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Enter a parse tree produced by {@link BallerinaParser#closedRecordTypeDescriptor}.
+	 * Enter a parse tree produced by {@link BallerinaParser#exclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void enterClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx);
+	void enterExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Exit a parse tree produced by {@link BallerinaParser#closedRecordTypeDescriptor}.
+	 * Exit a parse tree produced by {@link BallerinaParser#exclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void exitClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx);
+	void exitExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx);
 	/**
 	 * Enter a parse tree produced by {@link BallerinaParser#fieldDescriptor}.
 	 * @param ctx the parse tree",Regenerate the parser,"""Refactor record type descriptors in Ballerina parser""",Added support for inclusive and exclusive record types in Ballerina language.,"This commit updates the ANTLR4 generated parser code for Ballerina language to replace open record type descriptors with inclusive record type descriptors and closed record type descriptors with exclusive record type descriptors. It also updates the corresponding listener and base listener interfaces. The changes involve renaming classes, methods, and updating rule indices.","Refactor `openRecordTypeDescriptor` and `closedRecordTypeDescriptor` to `inclusiveRecordTypeDescriptor` and `exclusiveRecordTypeDescriptor`, respectively, in BallerinaParser.",Model 2
"diff --git a/appclient/pom.xml b/appclient/pom.xml
index 42a8fd0612..131a7df34d 100644
--- a/appclient/pom.xml
+++ b/appclient/pom.xml
@@ -130,6 +130,11 @@
             <artifactId>jboss-marshalling-river</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.jboss.metadata</groupId>
+            <artifactId>jboss-metadata-appclient</artifactId>
+        </dependency>
+
         <dependency>
             <groupId>org.jboss.spec.javax.jms</groupId>
             <artifactId>jboss-jms-api_1.1_spec</artifactId>
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
index 043e24c885..51bd6f1108 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
@@ -22,6 +22,7 @@
 package org.jboss.as.appclient.deployment;
 
 import org.jboss.as.server.deployment.AttachmentKey;
+import org.jboss.metadata.appclient.spec.ApplicationClientMetaData;
 
 /**
  * @author Stuart Douglas
@@ -32,6 +33,8 @@ public class AppClientAttachments {
 
     public static final AttachmentKey<Boolean> START_APP_CLIENT = AttachmentKey.create(Boolean.class);
 
+    public static final AttachmentKey<ApplicationClientMetaData> APPLICATION_CLIENT_META_DATA = AttachmentKey.create(ApplicationClientMetaData.class);
+
     private AppClientAttachments() {
     }
 }
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java
new file mode 100644
index 0000000000..1ee3f65ba0
--- /dev/null
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java
@@ -0,0 +1,90 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2010, Red Hat Inc., and individual contributors as indicated
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.as.appclient.deployment;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.jboss.as.ee.component.DeploymentDescriptorEnvironment;
+import org.jboss.as.ee.structure.DeploymentType;
+import org.jboss.as.ee.structure.DeploymentTypeMarker;
+import org.jboss.as.server.deployment.Attachments;
+import org.jboss.as.server.deployment.DeploymentPhaseContext;
+import org.jboss.as.server.deployment.DeploymentUnit;
+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;
+import org.jboss.as.server.deployment.DeploymentUnitProcessor;
+import org.jboss.metadata.appclient.parser.spec.ApplicationClientMetaDataParser;
+import org.jboss.metadata.appclient.spec.ApplicationClientMetaData;
+import org.jboss.metadata.parser.util.NoopXmlResolver;
+import org.jboss.vfs.VirtualFile;
+
+/**
+ * @author Stuart Douglas
+ */
+public class ApplicationClientParsingDeploymentProcessor implements DeploymentUnitProcessor {
+
+    private static final String APP_XML = ""META-INF/application-client.xml"";
+
+    @Override
+    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
+        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();
+        if (!DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) {
+            return;
+        }
+        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
+        final VirtualFile appXml = deploymentRoot.getChild(APP_XML);
+        if (appXml.exists()) {
+            InputStream is = null;
+            try {
+                is = appXml.openStream();
+                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+                inputFactory.setXMLResolver(NoopXmlResolver.create());
+                XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is);
+                ApplicationClientMetaData data = new ApplicationClientMetaDataParser().parse(xmlReader);
+                deploymentUnit.putAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA, data);
+                DeploymentDescriptorEnvironment environment = new DeploymentDescriptorEnvironment(""java:module/env"",data.getEnvironmentRefsGroupMetaData() );
+                deploymentUnit.putAttachment(org.jboss.as.ee.component.Attachments.MODULE_DEPLOYMENT_DESCRIPTOR_ENVIRONMENT, environment);
+
+            } catch (XMLStreamException e) {
+                throw new DeploymentUnitProcessingException(""Failed to parse "" + appXml + "" at ["" + e.getLocation().getLineNumber() + "","" +  e.getLocation().getColumnNumber() + ""]"");
+            } catch (IOException e) {
+                throw new DeploymentUnitProcessingException(""Failed to parse "" + appXml, e);
+            } finally {
+                try {
+                    if (is != null) {
+                        is.close();
+                    }
+                } catch (IOException e) {
+                    // Ignore
+                }
+            }
+        }
+    }
+
+    @Override
+    public void undeploy(DeploymentUnit context) {
+    }
+}
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
index 55e9dc1c56..3f7111fa6b 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Method;
 
 import org.jboss.as.appclient.service.ApplicationClientDeploymentService;
 import org.jboss.as.appclient.service.ApplicationClientStartService;
+import org.jboss.as.ee.component.EEModuleDescription;
 import org.jboss.as.server.deployment.Attachments;
 import org.jboss.as.server.deployment.DeploymentPhaseContext;
 import org.jboss.as.server.deployment.DeploymentUnit;
@@ -35,6 +36,7 @@ import org.jboss.as.server.deployment.reflect.DeploymentReflectionIndex;
 
 /**
  * Processor that starts an application client deployment
+ *
  * @author Stuart Douglas
  */
 public class ApplicationClientStartProcessor implements DeploymentUnitProcessor {
@@ -48,7 +50,7 @@ public class ApplicationClientStartProcessor implements DeploymentUnitProcessor
     @Override
     public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();
-        final DeploymentUnit topLevel = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
+        final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
 
         final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX);
         Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT);
@@ -65,10 +67,10 @@ public class ApplicationClientStartProcessor implements DeploymentUnitProcessor
         if (method == null) {
             throw new RuntimeException(""Could not start app client "" + deploymentUnit.getName() + "" as no main main was found on main class "" + mainClass);
         }
-        final ApplicationClientStartService startService = new ApplicationClientStartService(method, parameters);
+        final ApplicationClientStartService startService = new ApplicationClientStartService(method, parameters, moduleDescription.getNamespaceContextSelector());
         phaseContext.getServiceTarget()
                 .addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService)
-                .addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class,  startService.getApplicationClientDeploymentServiceInjectedValue())
+                .addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue())
                 .install();
     }
 
diff --git a/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java b/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
index 6c7a185326..81cdea761e 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
@@ -24,6 +24,8 @@ package org.jboss.as.appclient.service;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import org.jboss.as.ee.naming.InjectedEENamespaceContextSelector;
+import org.jboss.as.naming.context.NamespaceContextSelector;
 import org.jboss.as.server.CurrentServiceContainer;
 import org.jboss.logging.Logger;
 import org.jboss.msc.service.Service;
@@ -46,6 +48,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
     public static final ServiceName SERVICE_NAME = ServiceName.of(""appClientStart"");
 
     private final InjectedValue<ApplicationClientDeploymentService> applicationClientDeploymentServiceInjectedValue = new InjectedValue<ApplicationClientDeploymentService>();
+    private final InjectedEENamespaceContextSelector namespaceContextSelectorInjectedValue;
     private final Method mainMethod;
     private final String[] parameters;
 
@@ -53,9 +56,10 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
 
     private final Logger logger = Logger.getLogger(ApplicationClientStartService.class);
 
-    public ApplicationClientStartService(final Method mainMethod, final String[] parameters) {
+    public ApplicationClientStartService(final Method mainMethod, final String[] parameters, final InjectedEENamespaceContextSelector namespaceContextSelectorInjectedValue) {
         this.mainMethod = mainMethod;
         this.parameters = parameters;
+        this.namespaceContextSelectorInjectedValue = namespaceContextSelectorInjectedValue;
     }
 
     @Override
@@ -66,6 +70,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
             public void run() {
                 try {
                     applicationClientDeploymentServiceInjectedValue.getValue().getDeploymentCompleteLatch().await();
+                    NamespaceContextSelector.pushCurrentSelector(namespaceContextSelectorInjectedValue);
                     mainMethod.invoke(null,new Object[] { parameters});
                 } catch (InvocationTargetException e) {
                     logger.error(e.getTargetException(), e.getTargetException());
@@ -74,6 +79,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
                 } catch (InterruptedException e) {
                     logger.error(e);
                 } finally {
+                    NamespaceContextSelector.popCurrentSelector();
                     CurrentServiceContainer.getServiceContainer().shutdown();
                 }
             }
@@ -95,4 +101,5 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
     public InjectedValue<ApplicationClientDeploymentService> getApplicationClientDeploymentServiceInjectedValue() {
         return applicationClientDeploymentServiceInjectedValue;
     }
+
 }
diff --git a/build/build.xml b/build/build.xml
index c266fb3c08..1671fc285a 100644
--- a/build/build.xml
+++ b/build/build.xml
@@ -752,6 +752,7 @@
 
         <module-def name=""org.jboss.metadata"">
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-common""/>
+            <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-appclient""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-ejb""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-web""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-ear""/>
diff --git a/build/pom.xml b/build/pom.xml
index 9905f1b83a..f294c9b340 100644
--- a/build/pom.xml
+++ b/build/pom.xml
@@ -53,7 +53,7 @@
                         <phase>package</phase>
                         <configuration>
                             <target>
-                                <ant antfile=""build.xml""  inheritRefs=""true"">
+                                <ant antfile=""build.xml"" inheritRefs=""true"">
                                     <target name=""all""/>
                                 </ant>
                             </target>
@@ -611,45 +611,45 @@
             <groupId>org.jboss.as</groupId>
             <artifactId>jboss-as-appclient</artifactId>
         </dependency>
-        
+
         <dependency>
             <groupId>org.jboss.as</groupId>
             <artifactId>jboss-as-cli</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-api</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-api</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-common</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-common</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-impl</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-impl</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-infinispan</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-infinispan</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-jgroups</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-jgroups</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-web-infinispan</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-web-infinispan</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-web-spi</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-web-spi</artifactId>
         </dependency>
 
         <dependency>
@@ -1008,6 +1008,11 @@
             <artifactId>jboss-marshalling-river</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.jboss.metadata</groupId>
+            <artifactId>jboss-metadata-appclient</artifactId>
+        </dependency>
+
         <dependency>
             <groupId>org.jboss.metadata</groupId>
             <artifactId>jboss-metadata-common</artifactId>
@@ -1543,8 +1548,12 @@
                                 </goals>
                                 <phase>package</phase>
                                 <configuration>
-                                    <licensesOutputDirectory>${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses</licensesOutputDirectory>
-                                    <licensesOutputFile>${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses/licenses.xml</licensesOutputFile>
+                                    <licensesOutputDirectory>
+                                        ${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses
+                                    </licensesOutputDirectory>
+                                    <licensesOutputFile>
+                                        ${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses/licenses.xml
+                                    </licensesOutputFile>
                                 </configuration>
                             </execution>
                         </executions>
diff --git a/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml b/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
index 6fba0a1d16..859710e2ae 100644
--- a/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
+++ b/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
@@ -44,6 +44,7 @@
         <module name=""org.jboss.stdio""/>
         <module name=""org.jboss.threads""/>
         <module name=""org.jboss.vfs""/>
+        <module name=""org.jboss.as.naming""/>
         <module name=""org.jboss.as.controller""/>
         <module name=""org.jboss.as.deployment-repository""/>
         <module name=""org.jboss.as.domain-http-api""/>
@@ -55,5 +56,6 @@
         <module name=""org.jboss.as.process-controller""/>
         <module name=""org.jboss.as.protocol""/>
         <module name=""org.jboss.as.remoting""/>
+        <module name=""org.jboss.metadata""/>
     </dependencies>
 </module>
diff --git a/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java b/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
index ff7301d2f3..e7f25178a3 100644
--- a/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
+++ b/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
@@ -21,7 +21,7 @@
  */
 package org.jboss.as.ee.component;
 
-import org.jboss.metadata.javaee.spec.Environment;
+import org.jboss.metadata.javaee.spec.RemoteEnvironment;
 
 /**
  * The environment as read from a deployment descriptor
@@ -32,9 +32,9 @@ public class DeploymentDescriptorEnvironment {
 
     private final String defaultContext;
 
-    private final Environment environment;
+    private final RemoteEnvironment environment;
 
-    public DeploymentDescriptorEnvironment(String defaultContext, Environment environment) {
+    public DeploymentDescriptorEnvironment(String defaultContext, RemoteEnvironment environment) {
         this.defaultContext = defaultContext;
         this.environment = environment;
     }
@@ -43,7 +43,7 @@ public class DeploymentDescriptorEnvironment {
         return defaultContext;
     }
 
-    public Environment getEnvironment() {
+    public RemoteEnvironment getEnvironment() {
         return environment;
     }
 }
diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java b/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
index 4b0c545cc7..36fb450f70 100644
--- a/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
+++ b/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
@@ -22,6 +22,9 @@
 
 package org.jboss.as.ejb3.deployment.processors;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.jboss.as.ee.component.BindingConfiguration;
 import org.jboss.as.ee.component.ComponentDescription;
 import org.jboss.as.ee.component.DeploymentDescriptorEnvironment;
@@ -35,9 +38,10 @@ import org.jboss.as.server.deployment.DeploymentUnitProcessingException;
 import org.jboss.as.server.deployment.reflect.DeploymentReflectionIndex;
 import org.jboss.metadata.javaee.spec.EJBLocalReferenceMetaData;
 import org.jboss.metadata.javaee.spec.EJBLocalReferencesMetaData;
-
-import java.util.ArrayList;
-import java.util.List;
+import org.jboss.metadata.javaee.spec.EJBReferenceMetaData;
+import org.jboss.metadata.javaee.spec.EJBReferencesMetaData;
+import org.jboss.metadata.javaee.spec.Environment;
+import org.jboss.metadata.javaee.spec.RemoteEnvironment;
 
 /**
  * Deployment processor responsible for processing ejb references from deployment descriptors
@@ -57,22 +61,23 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
      * @return The bindings for the environment entries
      */
     protected List<BindingConfiguration> processDescriptorEntries(DeploymentUnit deploymentUnit, DeploymentDescriptorEnvironment environment, EEModuleDescription moduleDescription, ComponentDescription componentDescription, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {
-        EJBLocalReferencesMetaData ejbLocalRefs = environment.getEnvironment().getEjbLocalReferences();
+        final RemoteEnvironment remoteEnvironment = environment.getEnvironment();
         List<BindingConfiguration> bindingDescriptions = new ArrayList<BindingConfiguration>();
-        //TODO: this needs a lot more work
-        if (ejbLocalRefs != null) {
-            for (EJBLocalReferenceMetaData ejbRef : ejbLocalRefs) {
+
+        EJBReferencesMetaData ejbRefs = remoteEnvironment.getEjbReferences();
+        if (ejbRefs != null) {
+            for (EJBReferenceMetaData ejbRef : ejbRefs) {
                 String name = ejbRef.getEjbRefName();
                 String ejbName = ejbRef.getLink();
                 String lookup = ejbRef.getLookupName();
-                String localInterface = ejbRef.getLocal();
-                Class<?> localInterfaceType = null;
+                String remoteInterface = ejbRef.getRemote();
+                Class<?> remoteInterfaceType = null;
 
-                if (!isEmpty(localInterface)) {
+                if (!isEmpty(remoteInterface)) {
                     try {
-                        localInterfaceType = classLoader.loadClass(localInterface);
+                        remoteInterfaceType = classLoader.loadClass(remoteInterface);
                     } catch (ClassNotFoundException e) {
-                        throw new DeploymentUnitProcessingException(""Could not load local interface type "" + localInterface, e);
+                        throw new DeploymentUnitProcessingException(""Could not load local interface type "" + remoteInterface, e);
                     }
                 }
 
@@ -84,10 +89,10 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
                 LookupInjectionSource injectionSource = new LookupInjectionSource(name);
 
                 //add any injection targets
-                localInterfaceType = processInjectionTargets(moduleDescription, applicationClasses, injectionSource, classLoader, deploymentReflectionIndex, ejbRef, localInterfaceType);
+                remoteInterfaceType = processInjectionTargets(moduleDescription, applicationClasses, injectionSource, classLoader, deploymentReflectionIndex, ejbRef, remoteInterfaceType);
 
-                if (localInterfaceType == null) {
-                    throw new DeploymentUnitProcessingException(""Could not determine type of ejb-local-ref "" + name + "" for component "" + componentDescription);
+                if (remoteInterfaceType == null) {
+                    throw new DeploymentUnitProcessingException(""Could not determine type of ejb-ref "" + name + "" for component "" + componentDescription);
                 }
                 final BindingConfiguration bindingConfiguration;
                 EjbInjectionSource ejbInjectionSource = null;
@@ -99,9 +104,9 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
                         bindingConfiguration = new BindingConfiguration(name, new LookupInjectionSource(lookup));
                     }
              ",Set up application - client . xml parsing,"""Added support for application client deployment descriptors""","""Added support for application client deployments, including parsing of application-client.xml and injection of environment entries.""","This commit appears to add support for parsing application-client.xml files in the JBoss Application Server. The new class `ApplicationClientParsingDeploymentProcessor` is responsible for parsing the XML file and extracting the `ApplicationClientMetaData` object. The `ApplicationClientStartProcessor` class has also been updated to use the `ApplicationClientMetaData` object to start the application client. Additionally, the `ApplicationClientStartService` class has been updated to use the `InjectedEENamespaceContextSelector` object to push the current namespace context selector before invoking the main method of the application client. The `DeploymentDescriptorEnvironment` class has been updated to use the `RemoteEnvironment` object instead of the `Environment` object. The `EjbRefProcessor` class has been updated to process `EJBReferenceMetaData` objects instead of `EJBLocalReferenceMetaData` objects. Finally, the `org.jboss.metadata` module has been updated to include the `jboss-metadata-appclient` resource.","""Added support for application client metadata processing and updated dependencies and processors.""",Model 1
"diff --git a/smalidea/META-INF/plugin.xml b/smalidea/META-INF/plugin.xml
index 82cf8dd0..1229db1f 100644
--- a/smalidea/META-INF/plugin.xml
+++ b/smalidea/META-INF/plugin.xml
@@ -21,6 +21,9 @@
       <lang.parserDefinition language=""smali"" implementationClass=""org.jf.smalidea.SmaliParserDefinition""/>
       <java.elementFinder implementation=""org.jf.smalidea.psi.index.SmaliClassFinder""/>
       <stubIndex implementation=""org.jf.smalidea.psi.index.SmaliClassNameIndex""/>
+      <debugger.positionManagerFactory implementation=""org.jf.smalidea.debugging.SmaliPositionManagerFactory""/>
+      <xdebugger.debuggerSupport id=""SmaliDebuggerSupport"" order=""first,before XDebuggerSupport""
+                                 implementation=""org.jf.smalidea.debugging.SmaliDebuggerSupport""/>
   </extensions>
 
   <application-components>
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java
new file mode 100644
index 00000000..a5105fee
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.actions.StepOverActionHandler;
+import com.intellij.debugger.impl.DebuggerSession;
+import com.intellij.debugger.ui.JavaDebuggerSupport;
+import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.intellij.openapi.project.Project;
+import com.intellij.xdebugger.impl.actions.DebuggerActionHandler;
+import com.sun.jdi.request.StepRequest;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Method;
+
+public class SmaliDebuggerSupport extends JavaDebuggerSupport {
+    private static boolean useModifiedMethod;
+
+    {
+        try {
+            Method method = DebuggerSession.class.getMethod(""stepOver"", boolean.class, int.class);
+            useModifiedMethod = true;
+        } catch (NoSuchMethodException ex) {
+        }
+    }
+
+    private final StepOverActionHandler myStepOverActionHandler = new StepOverActionHandler() {
+        @Override
+        public void perform(@NotNull final Project project, AnActionEvent e) {
+            final DebuggerSession session = getSession(project);
+
+            if (session != null) {
+                if (useModifiedMethod) {
+                    session.stepOver(false, StepRequest.STEP_MIN);
+                } else {
+                    session.stepOver(false);
+                }
+            }
+        }
+
+        @Override public boolean isEnabled(@NotNull Project project, AnActionEvent event) {
+            // TODO: check if we're currently in a smali file?
+            return super.isEnabled(project, event);
+        }
+    };
+
+    @NotNull
+    @Override
+    public DebuggerActionHandler getStepOverHandler() {
+        return myStepOverActionHandler;
+    }
+
+}
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java
new file mode 100644
index 00000000..97423bc8
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java
@@ -0,0 +1,157 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.NoDataException;
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.SourcePosition;
+import com.intellij.debugger.engine.DebugProcess;
+import com.intellij.debugger.requests.ClassPrepareRequestor;
+import com.intellij.openapi.application.ApplicationManager;
+import com.intellij.openapi.util.Computable;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.sun.jdi.Location;
+import com.sun.jdi.ReferenceType;
+import com.sun.jdi.request.ClassPrepareRequest;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jf.smalidea.psi.impl.SmaliClass;
+import org.jf.smalidea.psi.impl.SmaliFile;
+import org.jf.smalidea.psi.impl.SmaliMethod;
+import org.jf.smalidea.psi.index.SmaliClassNameIndex;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+public class SmaliPositionManager implements PositionManager {
+    private final DebugProcess debugProcess;
+
+    public SmaliPositionManager(DebugProcess debugProcess) {
+        this.debugProcess = debugProcess;
+    }
+
+    public SourcePosition getSourcePosition(String declaringType, String methodName, String methodSignature,
+                                            int codeIndex) throws NoDataException {
+        Collection<SmaliClass> classes = SmaliClassNameIndex.INSTANCE.get(declaringType,
+                debugProcess.getProject(), GlobalSearchScope.projectScope(debugProcess.getProject()));
+
+        if (classes.size() > 0) {
+            SmaliClass smaliClass = classes.iterator().next();
+
+            // TODO: make an index for this?
+            for (SmaliMethod smaliMethod: smaliClass.getMethods()) {
+                if (smaliMethod.getName().equals(methodName) &&
+                        smaliMethod.getMethodPrototype().getText().equals(methodSignature)) {
+                    return smaliMethod.getSourcePositionForCodeOffset(codeIndex * 2);
+                }
+            }
+        }
+
+        throw NoDataException.INSTANCE;
+    }
+
+    @Override
+    public SourcePosition getSourcePosition(@Nullable Location location) throws NoDataException {
+        if (location == null) {
+            throw NoDataException.INSTANCE;
+        }
+
+        return getSourcePosition(location.declaringType().name(), location.method().name(),
+                location.method().signature(), (int)location.codeIndex());
+    }
+
+    @Override @NotNull
+    public List<ReferenceType> getAllClasses(@NotNull SourcePosition classPosition) throws NoDataException {
+        if (!(classPosition.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        String className = getClassFromPosition(classPosition);
+        return debugProcess.getVirtualMachineProxy().classesByName(className);
+    }
+
+    @NotNull
+    private String getClassFromPosition(@NotNull final SourcePosition position) {
+        return ApplicationManager.getApplication().runReadAction(new Computable<String>() {
+            @Override public String compute() {
+                return ((SmaliClass)position.getElementAt().getContainingFile().getFirstChild()).getQualifiedName();
+            }
+        });
+    }
+
+    @Override @NotNull
+    public List<Location> locationsOfLine(@NotNull final ReferenceType type,
+                                          @NotNull final SourcePosition position) throws NoDataException {
+        if (!(position.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        final ArrayList<Location> locations = new ArrayList<Location>(1);
+
+        ApplicationManager.getApplication().runReadAction(new Runnable() {
+            @Override
+            public void run() {
+                String typeName = type.name();
+                Collection<SmaliClass> classes = SmaliClassNameIndex.INSTANCE.get(typeName, debugProcess.getProject(),
+                        GlobalSearchScope.projectScope(debugProcess.getProject()));
+
+                if (classes.size() > 0) {
+                    final SmaliClass smaliClass = classes.iterator().next();
+
+                    Location location = smaliClass.getLocationForSourcePosition(type, position);
+
+                    if (location != null) {
+                        locations.add(location);
+                    }
+                }
+            }
+        });
+        return locations;
+    }
+
+    @Override
+    public ClassPrepareRequest createPrepareRequest(@NotNull final ClassPrepareRequestor requestor,
+                                                    @NotNull final SourcePosition position) throws NoDataException {
+        if (!(position.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        String className = getClassFromPosition(position);
+        return debugProcess.getRequestsManager().createClassPrepareRequest(new ClassPrepareRequestor() {
+            @Override
+            public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {
+                requestor.processClassPrepare(debuggerProcess, referenceType);
+            }
+        }, className);
+    }
+}
\ No newline at end of file
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java
new file mode 100644
index 00000000..3d261096
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2012, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.PositionManagerFactory;
+import com.intellij.debugger.engine.DebugProcess;
+
+public class SmaliPositionManagerFactory extends PositionManagerFactory {
+    @Override
+    public PositionManager createPositionManager(DebugProcess process) {
+        return new SmaliPositionManager(process);
+    }
+}
diff --git a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
index 274098a6..d390dfab 100644
--- a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
+++ b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
@@ -31,6 +31,7 @@
 
 package org.jf.smalidea.psi.impl;
 
+import com.intellij.debugger.SourcePosition;
 import com.intellij.lang.ASTNode;
 import com.intellij.openapi.util.Pair;
 import com.intellij.psi.*;
@@ -39,6 +40,9 @@ import com.intellij.psi.impl.PsiClassImplUtil;
 import com.intellij.psi.impl.PsiImplUtil;
 import com.intellij.psi.javadoc.PsiDocComment;
 import com.intellij.util.IncorrectOperationException;
+import com.sun.jdi.Location;
+import com.sun.jdi.Method;
+import com.sun.jdi.ReferenceType;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -307,4 +311,23 @@ public class SmaliClass extends SmaliStubBasedPsiElement<SmaliClassStub> impleme
         // TODO: implement this
         return null;
     }
+
+    @Nullable public Location getLocationForSourcePosition(@Nonnull ReferenceType type,
+                                                           @Nonnull SourcePosition position) {
+
+        SmaliMethod[] smaliMethods = findChildrenByType(SmaliElementTypes.METHOD, SmaliMethod.class);
+
+        for (SmaliMethod smaliMethod: smaliMethods) {
+            //TODO: check the start line+end line of the method
+            int offset = smaliMethod.getOffsetForLine(position.getLine());
+            if (offset != -1) {
+                List<Method> methods = type.methodsByName(smaliMethod.getName(),
+                        smaliMethod.getMethodPrototype().getText());
+                if (methods.size() > 0) {
+                    return methods.get(0).locationOfCodeIndex(offset/2);
+                }
+            }
+        }
+        return null;
+    }
 }
\ No newline at end of file
diff --git a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
index 72c30c68..0a33abad 100644
--- a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
+++ b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
@@ -33,6 +33,7 @@ package org.jf.smalidea.psi.impl;
 
 import com.intellij.debugger.SourcePosition;
 import com.intellij.lang.ASTNode;
+import com.intellij.openapi.editor.Document;
 import com.intellij.psi.*;
 import com.intellij.psi.PsiModifier.ModifierConstant;
 import com.intellij.psi.impl.PsiImplUtil;
@@ -119,6 +120,22 @@ public class SmaliMethod extends SmaliStubBasedPsiElement<SmaliMethodStub>
         return null;
     }
 
+    public int getOffsetForLine(int line) {
+        PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject());
+        final Document document = documentManager.getDocument(getContainingFile());
+        if (document == null) {
+            return -1;
+        }
+
+        for (final SmaliInstruction instruction: getInstructions()) {
+            int curLine = document.getLineNumber(instruction.getTextOffset());
+            if (curLine >= line) {
+                return instruction.getOffset();
+            }
+        }
+        return -1;
+    }
+
     public int getRegisterCount() {
         SmaliRegistersStatement registersStatement = findChildByClass(SmaliRegistersStatement.class);
         if (registersStatement == null) {
diff --git a/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java b/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java
new file mode 100644
index 00000000..7104b96e
--- /dev/null
+++ b/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java
@@ -0,0 +1,237 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea;
+
+import com.google.common.collect.Lists;
+import com.intellij.debugger.NoDataException;
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.SourcePosition;
+import com.intellij.debugger.engine.DebugProcess;
+import com.intellij.debugger.engine.DebugProcessListener;
+import com.intellij.debugger.engine.evaluation.EvaluateException;
+import com.intellij.debugger.engine.evaluation.EvaluationContext;
+import com.intellij.debugger.engine.jdi.VirtualMachineProxy;
+import com.intellij.debugger.engine.managerThread.DebuggerManagerThread;
+import com.intellij.debugger.requests.RequestManager;
+import com.intellij.execution.ExecutionResult;
+import com.intellij.execution.process.ProcessHandler;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.util.Key;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.intellij.testFramework.fixtures.LightCodeInsightFixtureTestCase;
+import com.sun.jdi.*;
+import org.jetbrains.annotations.NotNull;
+import org.jf.dexlib2.Opcode;
+import org.jf.smalidea.debugging.SmaliPositionManager;
+import org.jf.smalidea.psi.impl.SmaliInstruction;
+import org.junit.Assert;
+
+import java.util.List;
+import java.util.Map;
+
+public class SmaliPositionManagerTest extends LightCodeInsightFixtureTestCase {
+    private static final String testClass =
+            "".class public Lmy/pkg/blah; .super Ljava/lang/Object;\n"" +
+                    "".method public getRandomParentType(I)I\n"" +
+                    ""    .registers 4\n"" +
+                    ""    .param p1, \""edge\""    # I\n"" +
+                    ""\n"" +
+                    ""    .prologue\n"" +
+                    ""    const/4 v1, 0x2\n"" +
+                    ""\n"" +
+                    ""    .line 179\n"" +
+                    ""    if-nez p1, :cond_5\n"" +
+                    ""\n"" +
+                    ""    move v0, v1\n"" +
+                    ""\n"" +
+                    ""    .line 185\n"" +
+                    ""    :goto_4\n"" +
+                    ""    return v0\n"" +
+                    ""\n"" +
+                    ""    .line 182\n"" +
+                    ""    :cond_5\n"" +
+                    ""    if-ne p1, v1, :cond_f\n"" +
+                    ""\n"" +
+                    ""    .line 183\n"" +
+                    ""    sget-object v0, Lorg/jf/Penroser/PenroserApp;->random:Ljava/util/Random;\n"" +
+                    ""\n"" +
+                    ""    const/4 v1, 0x3\n"" +
+                    ""\n"" +
+                    ""    invoke-virtual {v0, v1}, Ljava/util/Random;->nextInt(I)I\n"" +
+                    ""\n"" +
+                    ""    move-result v0\n"" +
+                    ""\n"" +
+                    ""    goto :goto_4\n"" +
+                    ""\n"" +
+                    ""    .line 185\n"" +
+                    ""    :cond_f\n"" +
+                    ""    sget-object v0, Lorg/jf/Penroser/PenroserApp;->random:Ljava/util/Random;\n"" +
+                    ""\n"" +
+                    ""    invoke-virtual {v0, v1}, Ljava/util/Random;->nextInt(I)I\n"" +
+                    ""\n"" +
+                    ""    move-result v0\n"" +
+                    ""\n"" +
+                    ""    goto :goto_4\n"" +
+                    "".end method"";
+
+    public void testGetSourcePosition() throws NoDataException {
+        myFixture.addFileToProject(""my/pkg/blah.smali"", testClass);
+
+        SmaliPositionManager positionManager = new SmaliPositionManager(new MockDebugProcess());
+
+        SourcePosition sourcePosition = positionManager.getSourcePosition(
+                ""my.pkg.blah"", ""getRandomParentType"", ""(I)I"", 0);
+        Assert.assertEquals(Opcode.CONST_4, ((SmaliInstruction)sourcePosition.getElementAt()).getOpcode());
+        Assert.assertEquals(0, ((SmaliInstruction)sourcePosition.getElementAt()).getOffset());
+
+        sourcePosition = positionManager.getSourcePosition(""my.pkg.blah"", ""getRandomParentType"", ""(I)I"", 10);
+        Assert.assertEquals(Opcode.INVOKE_VIRTUAL, ((SmaliInstruction)sourcePosition.getElementAt()).getOpcode());
+  ",Implement initial debugging support,"""Added Smali debugger support""","Added Smali debugger support

This commit adds support for debugging Smali code in IntelliJ IDEA. It includes the following changes:

* Added a new `SmaliDebuggerSupport` class that provides a custom debugger support for Smali code.
* Added a new `SmaliPositionManager` class that provides a custom position manager for Smali code.
* Added a new `SmaliPositionManagerFactory` class that creates instances of the `SmaliPositionManager` class.
* Updated the `SmaliClass` class to include a method for getting the location of a Smali method in the source code.
* Updated the `SmaliMethod` class to include a method for getting the offset of a line in the source code.
* Added a new test class `SmaliPositionManagerTest` that tests the `SmaliPositionManager` class.","""Added support for debugging Smali code""

This commit adds several new files and makes modifications to existing ones in order to add support for debugging Smali code in IntelliJ IDEA.

The new files include:

* SmaliDebuggerSupport: This class extends JavaDebuggerSupport and provides a custom StepOverActionHandler that allows stepping over Smali code.
* SmaliPositionManager: This class implements PositionManager and provides methods for getting the source position for a given location in the code, as well as getting all classes and locations of a line for a given reference type and source position.
* SmaliPositionManagerFactory: This class extends PositionManagerFactory and creates instances of SmaliPositionManager.

The existing file that has been modified is SmaliClass, which now includes a new method getLocationForSourcePosition that returns the location for a given source position in the Smali code.

Overall, these changes enable debugging of Smali code in IntelliJ IDEA, allowing developers to step through the code and inspect variables at runtime.","""Add SmaliDebuggerSupport, SmaliPositionManager, and SmaliPositionManagerFactory for enhanced debugging support.""",Model 3
"diff --git a/docs/en/Running-Alluxio-on-GCE.md b/docs/en/Running-Alluxio-on-GCE.md
index 7ae517bca1..054df65158 100644
--- a/docs/en/Running-Alluxio-on-GCE.md
+++ b/docs/en/Running-Alluxio-on-GCE.md
@@ -33,14 +33,14 @@ Download Alluxio to your local machine, and unzip it:
 
 Install [python>=2.7](https://www.python.org/), not python3.
 
-Under `deploy/vagrant` directory in your home directory, run:
+If you already have [pip](https://pip.pypa.io/en/latest/installing/) installed, you can directly
+install the dependencies by running the following in the `deploy/vagrant` of the Alluxio install:
 
-{% include Running-Alluxio-on-GCE/install-vagrant.md %}
+{% include Running-Alluxio-on-GCE/install-pip.md %}
 
-Alternatively, you can manually install [pip](https://pip.pypa.io/en/latest/installing/), and then
-in `deploy/vagrant` run:
+If you do not have `pip` installed, in the `deploy/vagrant` directory of the Alluxio install, run:
 
-{% include Running-Alluxio-on-GCE/install-pip.md %}
+{% include Running-Alluxio-on-GCE/install-vagrant.md %}
 
 ## Launch a Cluster
 
@@ -48,9 +48,16 @@ To run an Alluxio cluster on GCE, you need a [Google Cloud](https://cloud.google
 
 If you are new to Google Cloud, create a billing account and project at the [free trial signup page](https://console.cloud.google.com/billing/freetrial). Also, If you are not familiar with Google Compute Engine, you may want to review the [documentation](https://cloud.google.com/compute/docs) first.
 
-Next, new and existing Google Cloud users need to choose or create a service account within the [Console](https://console.google.com) on the [Permissions](https://console.cloud.google.com/permissions) page, under the [Service Accounts](https://console.cloud.google.com/permissions) tab.
-If creating a new service account, check ""Furnish a new private key."" from the account creation dialog box. Download and store the JSON key in a safe location.
-If reusing a service account, you'll need to have saved JSON keys for the account or download new keys. To download keys for an existing service account, while still in the [Service Accounts](https://console.cloud.google.com/permissions) tab, find the menu for the account under the 3 dots at the right of the service account list and select ""create key."" Save the JSON key in a safe location.
+Next, you will need your JSON keys for your GCE project. Go to the
+[Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) section of the
+[IAM & Admin](https://console.cloud.google.com/projectselector/iam-admin) page in the Console.
+
+If you are creating a new service account, make sure to check the option ""Furnish a new private key""
+and the ""JSON"" key type, and the JSON key will be downloaded. Save the JSON key in a safe location.
+
+If you are using an existing service account, you should have already downloaded the JSON keys.
+If not, you can create a new JSON key for the existing service account (click on the 3 dots to the
+right, then ""create key""), which will download the JSON key. Save the JSON key in a safe location.
 
 Using the [gcloud sdk](https://console.cloud.google.com) configure keys for ssh:
 
@@ -62,13 +69,14 @@ Copy `deploy/vagrant/conf/gce.yml.template` to `deploy/vagrant/conf/gce.yml` by:
 
 In the configuration file `deploy/vagrant/conf/gce.yml`, set the project id, service account, location to JSON key and ssh username you've just created.
 
-For GCE, the default underfs is Google Cloud Storage (GCS). You need to sign into your
-[Google Cloud console](https://console.cloud.google.com), create a GCS bucket and write
-the bucket's name to the field `GCS:Bucket` in `conf/ufs.yml`. To use other under storage systems,
-configure the field `Type` and the corresponding configurations in `conf/ufs.yml`.
+For GCE, the default underfs is Google Cloud Storage (GCS). Visit the
+[Storage](https://console.cloud.google.com/storage/)  of the Google Cloud console, create a GCS
+bucket, and fill in the bucket's name to the field `GCS:Bucket` in `conf/ufs.yml`. To use other
+under storage systems, configure the field `Type` and the corresponding configurations in
+`conf/ufs.yml`.
 
-To access GCS with access keys, you need to create [developer keys](https://cloud.google.com/storage/docs/migrating#keys)
-in GCS console [Interoperability setting](https://console.cloud.google.com/storage/settings)
+To access GCS, you need to create [developer keys](https://cloud.google.com/storage/docs/migrating#keys)
+in the [Interoperability tab](https://console.cloud.google.com/storage/settings) of the GCS console,
 and set shell environment variables `GCS_ACCESS_KEY_ID` and `GCS_SECRET_ACCESS_KEY` by:
 
 {% include Running-Alluxio-on-GCE/access-key.md %}
@@ -97,15 +105,14 @@ following, which assumes a network named 'default'.
 
 {% include Running-Alluxio-on-GCE/add-firewall-rule.md %}
 
-Visit `http://{MASTER_IP}:{PORT}` in the browser to access the Web UIs.
+Visit `http://{MASTER_IP}:{PORT}` in the browser to access the Alluxio Web UI.
 
 You can also monitor the instances state through
 [Google Cloud console](https://console.cloud.google.com).
 
 Here are some scenarios when you may want to check the console:
  - When the cluster creation fails, check GCE instances status/logs.
- - After the cluster is destroyed, confirm GCE instances are terminated.
- - When you no longer need the cluster, make sure GCE instances are NOT costing you extra money.
+ - After the cluster is destroyed, confirm GCE instances are terminated (to avoid unexpected costs).
 
 **Access with ssh**
 
@@ -121,21 +128,20 @@ For example, you can ssh into `AlluxioMaster` with:
 
 All software is installed under the root directory, e.g. Alluxio is installed in `/alluxio`.
 
-On the `AlluxioMaster` node, you can run tests against Alluxio to check its health:
+On the `AlluxioMaster` node, you can run sample tests on Alluxio to check its health:
 
 {% include Running-Alluxio-on-GCE/runTests.md %}
 
 After the tests finish, visit Alluxio web UI at `http://{MASTER_IP}:19999` again. Click `Browse
-File System` in the navigation bar, and you should see the files written to Alluxio by the above
-tests.
+File System` in the navigation bar, and you should see the files written to Alluxio by the tests.
 
-From a node in the cluster, you can ssh to other nodes in the cluster without password with:
+From a node in the cluster, you can ssh to other nodes in the cluster with:
 
 {% include Running-Alluxio-on-GCE/ssh-other-node.md %}
 
 ## Destroy the cluster
 
-Under `deploy/vagrant` directory, you can run:
+In the `deploy/vagrant` directory, you can run:
 
 {% include Running-Alluxio-on-GCE/destroy.md %}
 ",Clarify GCE documentation,"""Update Running-Alluxio-on-GCE documentation for improved clarity and accuracy""","""Update documentation for running Alluxio on GCE to reflect changes in installing dependencies and accessing GCS""","The commit message could be:

 ""Update Running-Alluxio-on-GCE.md: Add instructions for installing pip and updating GCE configuration""

This commit message reflects the changes made in the diff, which include adding instructions for installing pip and updating the instructions for configuring GCE.","""Updated instructions for installing dependencies, setting up service accounts, accessing GCS, and running tests on GCE.""",Model 1
"diff --git a/third-party/py/scandir/.gitattributes b/third-party/py/scandir/.gitattributes
new file mode 100755
index 0000000000..176a458f94
--- /dev/null
+++ b/third-party/py/scandir/.gitattributes
@@ -0,0 +1 @@
+* text=auto
diff --git a/third-party/py/scandir/.gitignore b/third-party/py/scandir/.gitignore
new file mode 100755
index 0000000000..0b5c2d88ec
--- /dev/null
+++ b/third-party/py/scandir/.gitignore
@@ -0,0 +1,14 @@
+*.pyc
+*.pyd
+*.so
+*.sublime-project
+*.sublime-workspace
+benchtree
+build
+dist
+build.bat
+upload.bat
+MANIFEST
+test/*.log
+test/testdir
+__pycache__
diff --git a/third-party/py/scandir/LICENSE.txt b/third-party/py/scandir/LICENSE.txt
new file mode 100755
index 0000000000..0759f503f2
--- /dev/null
+++ b/third-party/py/scandir/LICENSE.txt
@@ -0,0 +1,27 @@
+Copyright (c) 2012, Ben Hoyt
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+* Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer.
+
+* Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution.
+
+* Neither the name of Ben Hoyt nor the names of its contributors may be used
+to endorse or promote products derived from this software without specific
+prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/third-party/py/scandir/MANIFEST.in b/third-party/py/scandir/MANIFEST.in
new file mode 100755
index 0000000000..91d586c9a9
--- /dev/null
+++ b/third-party/py/scandir/MANIFEST.in
@@ -0,0 +1,7 @@
+include *.py
+include *.c
+include *.h
+include *.txt
+include README.md
+recursive-include test *.py
+recursive-include test *.txt
diff --git a/third-party/py/scandir/README.facebook b/third-party/py/scandir/README.facebook
new file mode 100644
index 0000000000..8091d9585a
--- /dev/null
+++ b/third-party/py/scandir/README.facebook
@@ -0,0 +1,6 @@
+Project URL:
+Git repo to clone: https://github.com/benhoyt/scandir
+Git revision: 03d8b14b9c25543cbf26e0351935c83f658f701d
+License: BSD
+Local modifications:
+  - None
diff --git a/third-party/py/scandir/README.rst b/third-party/py/scandir/README.rst
new file mode 100755
index 0000000000..9c6c885743
--- /dev/null
+++ b/third-party/py/scandir/README.rst
@@ -0,0 +1,193 @@
+scandir, a better directory iterator and faster os.walk()
+=========================================================
+
+``scandir()`` is a directory iteration function like ``os.listdir()``,
+except that instead of returning a list of bare filenames, it yields
+``DirEntry`` objects that include file type and stat information along
+with the name. Using ``scandir()`` increases the speed of ``os.walk()``
+by 2-20 times (depending on the platform and file system) by avoiding
+unnecessary calls to ``os.stat()`` in most cases.
+
+
+Now included in a Python near you!
+----------------------------------
+
+``scandir`` has been included in the Python 3.5 standard library as
+``os.scandir()``, and the related performance improvements to
+``os.walk()`` have also been included. So if you're lucky enough to be
+using Python 3.5 (release date September 13, 2015) you get the benefit
+immediately, otherwise just
+`download this module from PyPI <https://pypi.python.org/pypi/scandir>`_,
+install it with ``pip install scandir``, and then do something like
+this in your code::
+
+    # Use the built-in version of scandir/walk if possible, otherwise
+    # use the scandir module version
+    try:
+        from os import scandir, walk
+    except ImportError:
+        from scandir import scandir, walk
+
+`PEP 471 <https://www.python.org/dev/peps/pep-0471/>`_, which is the
+PEP that proposes including ``scandir`` in the Python standard library,
+was `accepted <https://mail.python.org/pipermail/python-dev/2014-July/135561.html>`_
+in July 2014 by Victor Stinner, the BDFL-delegate for the PEP.
+
+This ``scandir`` module is intended to work on Python 2.6+ and Python
+3.2+ (and it has been tested on those versions).
+
+
+Background
+----------
+
+Python's built-in ``os.walk()`` is significantly slower than it needs to be,
+because -- in addition to calling ``listdir()`` on each directory -- it calls
+``stat()`` on each file to determine whether the filename is a directory or not.
+But both ``FindFirstFile`` / ``FindNextFile`` on Windows and ``readdir`` on Linux/OS
+X already tell you whether the files returned are directories or not, so
+no further ``stat`` system calls are needed. In short, you can reduce the number
+of system calls from about 2N to N, where N is the total number of files and
+directories in the tree.
+
+In practice, removing all those extra system calls makes ``os.walk()`` about
+**7-50 times as fast on Windows, and about 3-10 times as fast on Linux and Mac OS
+X.** So we're not talking about micro-optimizations. See more benchmarks
+in the ""Benchmarks"" section below.
+
+Somewhat relatedly, many people have also asked for a version of
+``os.listdir()`` that yields filenames as it iterates instead of returning them
+as one big list. This improves memory efficiency for iterating very large
+directories.
+
+So as well as a faster ``walk()``, scandir adds a new ``scandir()`` function.
+They're pretty easy to use, but see ""The API"" below for the full docs.
+
+
+Benchmarks
+----------
+
+Below are results showing how many times as fast ``scandir.walk()`` is than
+``os.walk()`` on various systems, found by running ``benchmark.py`` with no
+arguments:
+
+====================   ==============   =============
+System version         Python version   Times as fast
+====================   ==============   =============
+Windows 7 64-bit       2.7.7 64-bit     10.4
+Windows 7 64-bit SSD   2.7.7 64-bit     10.3
+Windows 7 64-bit NFS   2.7.6 64-bit     36.8
+Windows 7 64-bit SSD   3.4.1 64-bit     9.9
+Windows 7 64-bit SSD   3.5.0 64-bit     9.5
+CentOS 6.2 64-bit      2.6.6 64-bit     3.9
+Ubuntu 14.04 64-bit    2.7.6 64-bit     5.8
+Mac OS X 10.9.3        2.7.5 64-bit     3.8
+====================   ==============   =============
+
+All of the above tests were done using the fast C version of scandir
+(source code in ``_scandir.c``).
+
+Note that the gains are less than the above on smaller directories and greater
+on larger directories. This is why ``benchmark.py`` creates a test directory
+tree with a standardized size.
+
+
+The API
+-------
+
+walk()
+~~~~~~
+
+The API for ``scandir.walk()`` is exactly the same as ``os.walk()``, so just
+`read the Python docs <https://docs.python.org/3.5/library/os.html#os.walk>`_.
+
+scandir()
+~~~~~~~~~
+
+The full docs for ``scandir()`` and the ``DirEntry`` objects it yields are
+available in the `Python documentation here <https://docs.python.org/3.5/library/os.html#os.scandir>`_. 
+But below is a brief summary as well.
+
+    scandir(path='.') -> iterator of DirEntry objects for given path
+
+Like ``listdir``, ``scandir`` calls the operating system's directory
+iteration system calls to get the names of the files in the given
+``path``, but it's different from ``listdir`` in two ways:
+
+* Instead of returning bare filename strings, it returns lightweight
+  ``DirEntry`` objects that hold the filename string and provide
+  simple methods that allow access to the additional data the
+  operating system may have returned.
+
+* It returns a generator instead of a list, so that ``scandir`` acts
+  as a true iterator instead of returning the full list immediately.
+
+``scandir()`` yields a ``DirEntry`` object for each file and
+sub-directory in ``path``. Just like ``listdir``, the ``'.'``
+and ``'..'`` pseudo-directories are skipped, and the entries are
+yielded in system-dependent order. Each ``DirEntry`` object has the
+following attributes and methods:
+
+* ``name``: the entry's filename, relative to the scandir ``path``
+  argument (corresponds to the return values of ``os.listdir``)
+
+* ``path``: the entry's full path name (not necessarily an absolute
+  path) -- the equivalent of ``os.path.join(scandir_path, entry.name)``
+
+* ``is_dir(*, follow_symlinks=True)``: similar to
+  ``pathlib.Path.is_dir()``, but the return value is cached on the
+  ``DirEntry`` object; doesn't require a system call in most cases;
+  don't follow symbolic links if ``follow_symlinks`` is False
+
+* ``is_file(*, follow_symlinks=True)``: similar to
+  ``pathlib.Path.is_file()``, but the return value is cached on the
+  ``DirEntry`` object; doesn't require a system call in most cases; 
+  don't follow symbolic links if ``follow_symlinks`` is False
+
+* ``is_symlink()``: similar to ``pathlib.Path.is_symlink()``, but the
+  return value is cached on the ``DirEntry`` object; doesn't require a
+  system call in most cases
+
+* ``stat(*, follow_symlinks=True)``: like ``os.stat()``, but the
+  return value is cached on the ``DirEntry`` object; does not require a
+  system call on Windows (except for symlinks); don't follow symbolic links
+  (like ``os.lstat()``) if ``follow_symlinks`` is False
+
+* ``inode()``: return the inode number of the entry; the return value
+  is cached on the ``DirEntry`` object
+
+Here's a very simple example of ``scandir()`` showing use of the
+``DirEntry.name`` attribute and the ``DirEntry.is_dir()`` method::
+
+    def subdirs(path):
+        """"""Yield directory names not starting with '.' under given path.""""""
+        for entry in os.scandir(path):
+            if not entry.name.startswith('.') and entry.is_dir():
+                yield entry.name
+
+This ``subdirs()`` function will be significantly faster with scandir
+than ``os.listdir()`` and ``os.path.isdir()`` on both Windows and POSIX
+systems, especially on medium-sized or large directories.
+
+
+Further reading
+---------------
+
+* `The Python docs for scandir <https://docs.python.org/3.5/library/os.html#os.scandir>`_
+* `PEP 471 <https://www.python.org/dev/peps/pep-0471/>`_, the
+  (now-accepted) Python Enhancement Proposal that proposed adding
+  ``scandir`` to the standard library -- a lot of details here,
+  including rejected ideas and previous discussion
+
+
+Flames, comments, bug reports
+-----------------------------
+
+Please send flames, comments, and questions about scandir to Ben Hoyt:
+
+http://benhoyt.com/
+
+File bug reports for the version in the Python 3.5 standard library
+`here <https://docs.python.org/3.5/bugs.html>`_, or file bug reports
+or feature requests for this module at the GitHub project page:
+
+https://github.com/benhoyt/scandir
diff --git a/third-party/py/scandir/_scandir.c b/third-party/py/scandir/_scandir.c
new file mode 100755
index 0000000000..12a6706f67
--- /dev/null
+++ b/third-party/py/scandir/_scandir.c
@@ -0,0 +1,1818 @@
+/* C speedups for scandir module
+
+This is divided into four sections (each prefixed with a ""SECTION:""
+comment):
+
+1) Python 2/3 compatibility
+2) Helper utilities from posixmodule.c, fileutils.h, etc
+3) SECTION: Main DirEntry and scandir implementation, taken from
+   Python 3.5's posixmodule.c
+4) Module and method definitions and initialization code
+
+*/
+
+#include <Python.h>
+#include <structseq.h>
+#include <structmember.h>
+#include ""osdefs.h""
+
+#ifdef MS_WINDOWS
+#include <windows.h>
+#include ""winreparse.h""
+#else
+#include <dirent.h>
+#ifndef HAVE_DIRENT_H
+#define HAVE_DIRENT_H 1
+#endif
+#endif
+
+#define MODNAME ""scandir""
+
+
+/* SECTION: Python 2/3 compatibility */
+
+#if PY_MAJOR_VERSION >= 3
+#define INIT_ERROR return NULL
+#else
+#define INIT_ERROR return
+#endif
+
+#if PY_MAJOR_VERSION < 3 || PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION <= 2
+#define _Py_IDENTIFIER(name) static char * PyId_##name = #name;
+#define _PyObject_GetAttrId(obj, pyid_name) PyObject_GetAttrString((obj), *(pyid_name))
+#define PyExc_FileNotFoundError PyExc_OSError
+#define PyUnicode_AsUnicodeAndSize(unicode, addr_length) \
+    PyUnicode_AsUnicode(unicode); *(addr_length) = PyUnicode_GetSize(unicode)
+#endif
+
+
+/* SECTION: Helper utilities from posixmodule.c, fileutils.h, etc */
+
+#if !defined(MS_WINDOWS) && defined(DT_UNKNOWN)
+#define HAVE_DIRENT_D_TYPE 1
+#endif
+
+#ifdef HAVE_DIRENT_H
+#include <dirent.h>
+#define NAMLEN(dirent) strlen((dirent)->d_name)
+#else
+#if defined(__WATCOMC__) && !defined(__QNX__)
+#include <direct.h>
+#define NAMLEN(dirent) strlen((dirent)->d_name)
+#else
+#define dirent direct
+#define NAMLEN(dirent) (dirent)->d_namlen
+#endif
+#ifdef HAVE_SYS_NDIR_H
+#include <sys/ndir.h>
+#endif
+#ifdef HAVE_SYS_DIR_H
+#include <sys/dir.h>
+#endif
+#ifdef HAVE_NDIR_H
+#include <ndir.h>
+#endif
+#endif
+
+#ifndef Py_CLEANUP_SUPPORTED
+#define Py_CLEANUP_SUPPORTED 0x20000
+#endif
+
+#ifndef S_IFLNK
+/* Windows doesn't define S_IFLNK but posixmodule.c maps
+ * IO_REPARSE_TAG_SYMLINK to S_IFLNK */
+#  define S_IFLNK 0120000
+#endif
+
+// _Py_stat_struct is already defined in fileutils.h on Python 3.5+
+#if PY_MAJOR_VERSION < 3 || (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION < 5)
+#ifdef MS_WINDOWS
+struct _Py_stat_struct {
+    unsigned long st_dev;
+    __int64 st_ino;
+    unsigned short st_mode;
+    int st_nlink;
+    int st_uid;
+    int st_gid;
+    unsigned long st_rdev;
+    __int64 st_size;
+    time_t st_atime;
+    int st_atime_nsec;
+    time_t st_mtime;
+    int st_mtime_nsec;
+    time_t st_ctime;
+    int st_ctime_nsec;
+    unsigned long st_file_attributes;
+};
+#else
+#  define _Py_stat_struct stat
+#endif
+#endif
+
+/* choose the appropriate stat and fstat functions and return structs */
+#undef STAT
+#undef FSTAT
+#undef STRUCT_STAT
+#ifdef MS_WINDOWS
+#       define STAT win32_stat
+#       define LSTAT win32_lstat
+#       define FSTAT _Py_fstat_noraise
+#       define STRUCT_STAT struct _Py_stat_struct
+#else
+#       define STAT stat
+#       define LSTAT lstat
+#       define FSTAT fstat
+#       define STRUCT_STAT struct stat
+#endif
+
+#ifdef MS_WINDOWS
+
+static __int64 secs_between_epochs = 11644473600; /* Seconds between 1.1.1601 and 1.1.1970 */
+
+static void
+FILE_TIME_to_time_t_nsec(FILETIME *in_ptr, time_t *time_out, int* nsec_out)
+{
+    /* XXX endianness. Shouldn't matter, as all Windows implementations are little-endian */
+    /* Cannot simply cast and dereference in_ptr,
+       since it might not be aligned properly */
+    __int64 in;
+    memcpy(&in, in_ptr, sizeof(in));
+    *nsec_out = (int)(in % 10000000) * 100; /* FILETIME is in units of 100 nsec. */
+    *time_out = Py_SAFE_DOWNCAST((in / 10000000) - secs_between_epochs, __int64, time_t);
+}
+
+/* Below, we *know* that ugo+r is 0444 */
+#if _S_IREAD != 0400
+#error Unsupported C library
+#endif
+static int
+attributes_to_mode(DWORD attr)
+{
+    int m = 0;
+    if (attr & FILE_ATTRIBUTE_DIRECTORY)
+        m |= _S_IFDIR | 0111; /* IFEXEC for user,group,other */
+    else
+        m |= _S_IFREG;
+    if (attr & FILE_ATTRIBUTE_READONLY)
+        m |= 0444;
+    else
+        m |= 0666;
+    return m;
+}
+
+void
+_Py_attribute_data_to_stat(BY_HANDLE_FILE_INFORMATION *info, ULONG reparse_tag,
+                           struct _Py_stat_struct *result)
+{
+    memset(result, 0, sizeof(*result));
+    result->st_mode = attributes_to_mode(info->dwFileAttributes);
+    result->st_size = (((__int64)info->nFileSizeHigh)<<32) + info->nFileSizeLow;
+    result->st_dev = info->dwVolumeSerialNumber;
+    result->st_rdev = result->st_dev;
+    FILE_TIME_to_time_t_nsec(&info->ftCreationTime, &result->st_ctime, &result->st_ctime_nsec);
+    FILE_TIME_to_time_t_nsec(&info->ftLastWriteTime, &result->st_mtime, &result->st_mtime_nsec);
+    FILE_TIME_to_time_t_nsec(&info->ftLastAccessTime, &result->st_atime, &result->st_atime_nsec);
+    result->st_nlink = info->nNumberOfLinks;
+    result->st_ino = (((__int64)info->nFileIndexHigh)<<32) + info->nFileIndexLow;
+    if (reparse_tag == IO_REPARSE_TAG_SYMLINK) {
+        /* first clear the S_IFMT bits */
+        result->st_mode ^= (result->st_mode & S_IFMT);
+        /* now set the bits that make this a symlink */
+        result->st_mode |= S_IFLNK;
+    }
+    result->st_file_attributes = info->dwFileAttributes;
+}
+
+static BOOL
+get_target_path(HANDLE hdl, wchar_t **target_path)
+{
+    int buf_size, result_length;
+    wchar_t *buf;
+
+    /* We have a good handle to the target, use it to determine
+       the target path name (then we'll call lstat on it). */
+    buf_size = GetFinalPathNameByHandleW(hdl, 0, 0,
+                                         VOLUME_NAME_DOS);
+    if(!buf_size)
+        return FALSE;
+
+    buf = PyMem_New(wchar_t, buf_size+1);
+    if (!buf) {
+        SetLastError(ERROR_OUTOFMEMORY);
+        return FALSE;
+    }
+
+    result_length = GetFinalPathNameByHandleW(hdl,
+                       buf, buf_size, VOLUME_NAME_DOS);
+
+    if(!result_length) {
+        PyMem_Free(buf);
+        return FALSE;
+    }
+
+    if(!CloseHandle(hdl)) {
+        PyMem_Free(buf);
+        return FALSE;
+    }
+
+    buf[result_length] = 0;
+
+    *target_path = buf;
+    return TRUE;
+}
+
+static int
+win32_get_reparse_tag(HANDLE reparse_point_handle, ULONG *reparse_tag)
+{
+    char target_buffer[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
+    REPARSE_DATA_BUFFER *rdb = (REPARSE_DATA_BUFFER *)target_buffer;
+    DWORD n_bytes_returned;
+
+    if (0 == DeviceIoControl(
+        reparse_point_handle,
+        FSCTL_GET_REPARSE_POINT,
+        NULL, 0, /* in buffer */
+        target_buffer, sizeof(target_buffer),
+        &n_bytes_returned,
+        NULL)) /* we're not using OVERLAPPED_IO */
+        return FALSE;
+
+    if (reparse_tag)
+        *reparse_tag = rdb->ReparseTag;
+
+    return TRUE;
+}
+
+static void
+find_data_to_file_info_w(WIN32_FIND_DATAW *pFileData,
+                         BY_HANDLE_FILE_INFORMATION *info,
+                         ULONG *reparse_tag)
+{
+    memset(info, 0, sizeof(*info));
+    info->dwFileAttributes = pFileData->dwFileAttributes;
+    info->ftCreationTime   = pFileData->ftCreationTime;
+    info->ftLastAccessTime = pFileData->ftLastAccessTime;
+    info->ftLastWriteTime  = pFileData->ftLastWriteTime;
+    info->nFileSizeHigh    = pFileData->nFileSizeHigh;
+    info->nFileSizeLow     = pFileData->nFileSizeLow;
+/*  info->nNumberOfLinks   = 1; */
+    if (pFileData->dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
+        *reparse_tag = pFileData->dwReserved0;
+    else
+        *reparse_tag = 0;
+}
+
+static BOOL
+attributes_from_dir_w(LPCWSTR pszFile, BY_HANDLE_FILE_INFORMATION *info, ULONG *reparse_tag)
+{
+    HANDLE hFindFile;
+    WIN32_FIND_DATAW FileData;
+    hFindFile = FindFirstFileW(pszFile, &FileData);
+    if (hFindFile == INVALID_HANDLE_VALUE)
+        return FALSE;
+    FindClose(hFindFile);
+    find_data_to_file_info_w(&FileData, info, reparse_tag);
+    return TRUE;
+}
+
+static int
+win32_xstat_impl_w(const wchar_t *path, struct _Py_stat_struct *result,
+                   BOOL traverse)
+{
+    int code;
+    HANDLE hFile, hFile2;
+    BY_HANDLE_FILE_INFORMATION info;
+    ULONG reparse_tag = 0;
+    wchar_t *target_path;
+    const wchar_t *dot;
+
+    hFile = CreateFileW(
+        path,
+        FILE_READ_ATTRIBUTES, /* desired access */
+        0, /* share mode */
+        NULL, /* security attributes */
+        OPEN_EXISTING,
+        /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
+        /* FILE_FLAG_OPEN_REPARSE_POINT does not follow the symlink.
+           Because of this, calls like GetFinalPathNameByHandle will return
+           the symlink path again and not the actual final path. */
+        FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS|
+            FILE_FLAG_OPEN_REPARSE_POINT,
+        NULL);
+
+    if (hFile == INVALID_HANDLE_VALUE) {
+        /* Either the target doesn't exist, or we don't have access to
+           get a handle to it. If the former, we need to return an error.
+           If the latter, we can use attributes_from_dir. */
+        if (GetLastError() != ERROR_SHARING_VIOLATION)
+            return -1;
+        /* Could not get attributes on open file. Fall back to
+           reading the directory. */
+        if (!attributes_from_dir_w(path, &info, &reparse_tag))
+            /* Very strange. This should not fail now */
+            return -1;
+        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
+            if (traverse) {
+                /* Should traverse, but could not open reparse point handle */
+                SetLastError(ERROR_SHARING_VIOLATION);
+                return -1;
+            }
+        }
+    } else {
+        if (!GetFileInformationByHandle(hFile, &info)) {
+            CloseHandle(hFile);
+            return -1;
+        }
+        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
+            if (!win32_get_reparse_tag(hFile, &reparse_tag))
+                return -1;
+
+            /* Close the outer open file handle now that we're about to
+               reopen it with different flags. */
+            if (!CloseHandle(hFile))
+                return -1;
+
+            if (traverse) {
+                /* In order to call GetFinalPathNameByHandle we need to open
+                   the file without the reparse handling flag set. */
+                hFile2 = CreateFileW(
+                           path, FILE_READ_ATTRIBUTES, FILE_SHARE_READ,
+                           NULL, OPEN_EXISTING,
+                           FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS,
+                           NULL);
+                if (hFile2 == INVALID_HANDLE_VALUE)
+                    return -1;
+
+                if (!get_target_path(hFile2, &target_path))
+                    return -1;
+
+                code = win32_xstat_impl_w(target_path, result, FALSE);
+                PyMem_Free(target_path);
+                return code;
+            }
+        } else
+            CloseHandle(hFile);
+    }
+    _Py_attribute_data_to_stat(&info, reparse_tag, result);
+
+    /* Set S_IEXEC if it is an .exe, .bat, ... */
+    dot = wcsrchr(path, '.');
+    if (dot) {
+        if (_wcsicmp(dot, L"".bat"") == 0 || _wcsicmp(dot, L"".cmd"") == 0 ||
+            _wcsicmp(dot, L"".exe"") == 0 || _wcsicmp(dot, L"".com"") == 0)
+            result->st_mode |= 0111;
+    }
+    return 0;
+}
+
+static int
+win32_xstat_w(const wchar_t *path, struct _Py_stat_struct *result, BOOL traverse)
+{
+    /* Protocol violation: we explicitly clear errno, instead of
+       setting it to a POSIX error. Callers should use GetLastError. */
+    int code = win32_xstat_impl_w(path, result, traverse);
+    errno = 0;
+    return code;
+}
+
+static int
+win32_lstat_w(const wchar_t* path, struct _Py_stat_struct *result)
+{
+    return win32_xstat_w(path, result, FALSE);
+}
+
+static int
+win32_stat_w(const wchar_t* path, struct _Py_stat_struct *result)
+{
+    return win32_xstat_w(path, result, TRUE);
+}
+
+#endif /* MS_WINDOWS */
+
+static PyTypeObject StatResultType;
+
+static PyObject *billion = NULL;
+
+static newfunc structseq_new;
+
+static PyObject *
+statresult_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
+{
+    PyStructSequence *result;
+    int i;
+
+    result = (PyStructSequence*)structseq_new(type, args, kwds);
+    if (!result)
+        return NULL;
+    /* If we have been initialized from a tuple,
+       st_?time might be set to None. Initialize it
+       from the int slots.  */
+    for (i = 7; i <= 9; i++) {
+        if (result->ob_item[i+3] == Py_None) {
+            Py_DECREF(Py_None);
+            Py_INCREF(result->ob_item[i]);
+            result->ob_item[i+3] = result->ob_item[i];
+        }
+    }
+    return (PyObject*)result;
+}
+
+/* If true, st_?time is float. */
+static int _stat_float_times = 1;
+
+static void
+fill_time(PyObject *v, int index, time_t sec, unsigned long nsec)
+{
+#if SIZEOF_TIME_T > SIZEOF_LONG
+    PyObject *s = PyLong_FromLongLong((PY_LONG_LONG)sec);
+#else
+#if PY_MAJOR_VERSION >= 3
+    PyObject *s = PyLong_FromLong((long)sec);
+#else
+    PyObject *s = PyInt_FromLong((long)sec);
+#endif
+#endif
+    PyObject *ns_fractional = PyLong_FromUnsignedLong(nsec);
+    PyObject *s_in_ns = NULL;
+    PyObject *ns_total = NULL;
+    PyObject *float_s = NULL;
+
+    if (!(s && ns_fractional))
+        goto exit;
+
+    s_in_ns = PyNumber_Multiply(s, billion);
+    if (!s_in_ns)
+        goto exit;
+
+    ns_total = PyNumber_Add(s_in_ns, ns_fractional);
+    if (!ns_total)
+        goto exit;
+
+    if (_stat_float_times) {
+        float_s = PyFloat_FromDouble(sec + 1e-9*nsec);
+        if (!float_s)
+            goto exit;
+    }
+    else {
+        float_s = s;
+        Py_INCREF(float_s);
+    }
+
+    PyStructSequence_SET_ITEM(v, index, s);
+    PyStructSequence_SET_ITEM(v, index+3, float_s);
+    PyStructSequence_SET_ITEM(v, index+6, ns_total);
+    s = NULL;
+    float_s = NULL;
+    ns_total = NULL;
+exit:
+    Py_XDECREF(s);
+    Py_XDECREF(ns_fractional);
+    Py_XDECREF(s_in_ns);
+    Py_XDECREF(ns_total);
+    Py_XDECREF(float_s);
+}
+
+#ifdef MS_WINDOWS
+#define HAVE_STAT_NSEC 1
+#define HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES 1
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
+#define ST_BLKSIZE_IDX 16
+#else
+#define ST_BLKSIZE_IDX 15
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BLOCKS
+#define ST_BLOCKS_IDX (ST_BLKSIZE_IDX+1)
+#else
+#define ST_BLOCKS_IDX ST_BLKSIZE_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_RDEV
+#define ST_RDEV_IDX (ST_BLOCKS_IDX+1)
+#else
+#define ST_RDEV_IDX ST_BLOCKS_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_FLAGS
+#define ST_FLAGS_IDX (ST_RDEV_IDX+1)
+#else
+#define ST_FLAGS_IDX ST_RDEV_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_GEN
+#define ST_GEN_IDX (ST_FLAGS_IDX+1)
+#else
+#define ST_GEN_IDX ST_FLAGS_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BIRTHTIME
+#define ST_BIRTHTIME_IDX (ST_GEN_IDX+1)
+#else
+#define ST_BIRTHTIME_IDX ST_GEN_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES
+#define ST_FILE_ATTRIBUTES_IDX (ST_BIRTHTIME_IDX+1)
+#else
+#define ST_FILE_ATTRIBUTES_IDX ST_BIRTHTIME_IDX
+#endif
+
+#ifdef HAVE_LONG_LONG
+#  define _PyLong_FromDev PyLong_FromLongLong
+#else
+#  define _PyLong_FromDev PyLong_FromLong
+#endif
+
+#ifndef MS_WINDOWS
+PyObject *
+_PyLong_FromUid(uid_t uid)
+{
+    if (uid == (uid_t)-1)
+        return PyLong_FromLong(-1);
+    return PyLong_FromUnsignedLong(uid);
+}
+
+PyObject *
+_PyLong_FromGid(gid_t gid)
+{
+    if (gid == (gid_t)-1)
+        return PyLong_FromLong(-1);
+    return PyLong_FromUnsignedLong(gid);
+}
+#endif
+
+/* pack a system stat C structure into the Python stat tuple
+   (used by posix_stat() and posix_fstat()) */
+static PyObject*
+_pystat_fromstructstat(STRUCT_STAT *st)
+{
+    unsigned long ansec, mnsec, cnsec;
+    PyObject *v = PyStructSequence_New(&StatResultType);
+    if (v == NULL)
+     ",Adding scandir to third - party .,"""Add third-party py/scandir module""",Added scandir module for improved directory iteration and os.walk() performance.,"The commit message should provide a brief summary of the changes made in the commit. Based on the diff, it appears that the commit adds a new module called 'scandir' which provides a faster and more memory-efficient way to iterate over directories and files. The commit message could be something like:
+
+'Add scandir module for faster and more memory-efficient directory iteration'
+
+If the commit includes any other changes or fixes, those should also be mentioned in the commit message. It's also a good practice to include a more detailed explanation of the changes in the commit message, especially if the changes are complex or have a significant impact on the codebase.","Added scandir directory iteration function for efficient filesystem traversal. Includes LICENSE, README, and initial implementation with C extensions.",Model 2
"diff --git a/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java b/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
index 52604c00cb6..480fd627c66 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
@@ -32,6 +32,10 @@ class EventValidator {
   private static final Set<String> AUTHORIZED_CATEGORIES = ImmutableSet.of(""Version"", ""Other"");
   private static final String AUTHORIZED_CATEGORIES_INLINED = Joiner.on("", "").join(AUTHORIZED_CATEGORIES);
 
+  private EventValidator() {
+    // prevent instantiation
+  }
+
   static Consumer<EventDto> checkModifiable() {
     return event -> checkArgument(AUTHORIZED_CATEGORIES.contains(event.getCategory()),
       ""Event of category '%s' cannot be modified. Authorized categories: %s"",
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
index baea3587c53..482c5ee554d 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
@@ -98,7 +98,7 @@ public class ResetAction implements SettingsWsAction {
       resetRequest.getKeys().forEach(key -> {
         SettingData data = new SettingData(key, emptyList(), component.orElse(null));
         ImmutableList.of(validations.scope(), validations.qualifier())
-          .forEach(validation -> validation.validate(data));
+          .forEach(validation -> validation.accept(data));
       });
 
       List<String> keys = getKeys(resetRequest);
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
index 38fbb074e17..7036a0572f1 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
@@ -206,10 +206,10 @@ public class SetAction implements SettingsWsAction {
     checkValueIsSet(request);
     SettingData settingData = new SettingData(request.getKey(), valuesFromRequest(request), component.orElse(null));
     ImmutableList.of(validations.scope(), validations.qualifier(), validations.valueType())
-      .forEach(validation -> validation.validate(settingData));
+      .forEach(validation -> validation.accept(settingData));
   }
 
-  private void validatePropertySet(SetRequest request, @Nullable PropertyDefinition definition) {
+  private static void validatePropertySet(SetRequest request, @Nullable PropertyDefinition definition) {
     checkRequest(definition != null, ""Setting '%s' is undefined"", request.getKey());
     checkRequest(PropertyType.PROPERTY_SET.equals(definition.type()), ""Parameter '%s' is used for setting of property set type only"", PARAM_FIELD_VALUES);
 
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
index 89291bbc97b..c5b905d8b02 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
@@ -22,6 +22,7 @@ package org.sonar.server.setting.ws;
 
 import java.util.List;
 import java.util.Locale;
+import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nullable;
@@ -51,7 +52,7 @@ public class SettingValidations {
     this.i18n = i18n;
   }
 
-  public SettingValidation scope() {
+  public Consumer<SettingData> scope() {
     return data -> {
       PropertyDefinition definition = definitions.get(data.key);
       checkRequest(data.component != null || definition == null || definition.global() || isGlobal(definition),
@@ -59,7 +60,7 @@ public class SettingValidations {
     };
   }
 
-  public SettingValidation qualifier() {
+  public Consumer<SettingData> qualifier() {
     return data -> {
       String qualifier = data.component == null ? """" : data.component.qualifier();
       PropertyDefinition definition = definitions.get(data.key);
@@ -68,7 +69,7 @@ public class SettingValidations {
     };
   }
 
-  public SettingValidation valueType() {
+  public Consumer<SettingData> valueType() {
     return new ValueTypeValidation();
   }
 
@@ -76,11 +77,6 @@ public class SettingValidations {
     return !definition.global() && definition.qualifiers().isEmpty();
   }
 
-  @FunctionalInterface
-  public interface SettingValidation {
-    void validate(SettingData data);
-  }
-
   public static class SettingData {
     private final String key;
     private final List<String> values;
@@ -94,10 +90,9 @@ public class SettingValidations {
     }
   }
 
-  private class ValueTypeValidation implements SettingValidation {
-
+  private class ValueTypeValidation implements Consumer<SettingData> {
     @Override
-    public void validate(SettingData data) {
+    public void accept(SettingData data) {
       PropertyDefinition definition = definitions.get(data.key);
       if (definition == null) {
         return;
diff --git a/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java b/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java
new file mode 100644
index 00000000000..9b7cf2aeb0c
--- /dev/null
+++ b/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java
@@ -0,0 +1,25 @@
+/*
+ * SonarQube
+ * Copyright (C) 2009-2016 SonarSource SA
+ * mailto:contact AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+@ParametersAreNonnullByDefault
+package org.sonarqube.ws.client.license;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+
diff --git a/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java b/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
index 75586393422..1d07f29b1ce 100644
--- a/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
+++ b/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
@@ -49,7 +49,7 @@ public class CreateEventRequestTest {
   public void other_category_by_default() {
     CreateEventRequest result = underTest.setAnalysis(""P1"").setName(""name"").build();
 
-    assertThat(OTHER.equals(result.getCategory()));
+    assertThat(OTHER).isEqualTo(result.getCategory());
   }
 
   @Test",Fix quality flaws,"""Refactor SettingValidations to use Consumer interface and make EventValidator non-instantiable""","""Refactor validation logic to use Consumer instead of custom interfaces""","The commit message could be:

```bash
Refactor EventValidator to prevent instantiation
Refactor SettingValidations to use Consumer instead of SettingValidation
Refactor ResetAction to use Consumer instead of SettingValidation
Refactor SetAction to make validatePropertySet static
Add package-info.java for org.sonarqube.ws.client.license
Update CreateEventRequestTest to use isEqualTo instead of equals
```

This commit message summarizes the changes made in the provided diffs. It includes refactoring `EventValidator` to prevent instantiation, refactoring `SettingValidations` to use `Consumer` instead of `SettingValidation`, refactoring `ResetAction` to use `Consumer` instead of `SettingValidation`, making `validatePropertySet` in `SetAction` static, adding `package-info.java` for `org.sonarqube.ws.client.license`, and updating `CreateEventRequestTest` to use `isEqualTo` instead of `equals`.","Refactor validation logic by using `Consumer<SettingData>`, enforce non-instantiability of `EventValidator`, and add package-info.java for license package.",Model 4
"diff --git a/app/schemas/eu.faircode.email.DB/174.json b/app/schemas/eu.faircode.email.DB/174.json
new file mode 100644
index 0000000000..5f2a12f36e
--- /dev/null
+++ b/app/schemas/eu.faircode.email.DB/174.json
@@ -0,0 +1,2298 @@
+{
+  ""formatVersion"": 1,
+  ""database"": {
+    ""version"": 174,
+    ""identityHash"": ""48657efe9bc7d6c7a844ec83604d6f9a"",
+    ""entities"": [
+      {
+        ""tableName"": ""identity"",
+        ""createSql"": ""CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` TEXT NOT NULL, `email` TEXT NOT NULL, `account` INTEGER NOT NULL, `display` TEXT, `color` INTEGER, `signature` TEXT, `host` TEXT NOT NULL, `starttls` INTEGER NOT NULL, `insecure` INTEGER NOT NULL, `port` INTEGER NOT NULL, `auth_type` INTEGER NOT NULL, `provider` TEXT, `user` TEXT NOT NULL, `password` TEXT NOT NULL, `certificate` INTEGER NOT NULL, `certificate_alias` TEXT, `realm` TEXT, `fingerprint` TEXT, `use_ip` INTEGER NOT NULL, `ehlo` TEXT, `synchronize` INTEGER NOT NULL, `primary` INTEGER NOT NULL, `self` INTEGER NOT NULL, `sender_extra` INTEGER NOT NULL, `sender_extra_regex` TEXT, `replyto` TEXT, `cc` TEXT, `bcc` TEXT, `unicode` INTEGER NOT NULL, `plain_only` INTEGER NOT NULL, `encrypt` INTEGER NOT NULL, `delivery_receipt` INTEGER NOT NULL, `read_receipt` INTEGER NOT NULL, `store_sent` INTEGER NOT NULL, `sent_folder` INTEGER, `sign_key` INTEGER, `sign_key_alias` TEXT, `tbd` INTEGER, `state` TEXT, `error` TEXT, `last_connected` INTEGER, `max_size` INTEGER, FOREIGN KEY(`account`) REFERENCES `account`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )"",
+        ""fields"": [
+          {
+            ""fieldPath"": ""id"",
+            ""columnName"": ""id"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""name"",
+            ""columnName"": ""name"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""email"",
+            ""columnName"": ""email"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""account"",
+            ""columnName"": ""account"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""display"",
+            ""columnName"": ""display"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""color"",
+            ""columnName"": ""color"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""signature"",
+            ""columnName"": ""signature"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""host"",
+            ""columnName"": ""host"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encryption"",
+            ""columnName"": ""starttls"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""insecure"",
+            ""columnName"": ""insecure"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""port"",
+            ""columnName"": ""port"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""auth_type"",
+            ""columnName"": ""auth_type"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""provider"",
+            ""columnName"": ""provider"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""user"",
+            ""columnName"": ""user"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""password"",
+            ""columnName"": ""password"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""certificate"",
+            ""columnName"": ""certificate"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""certificate_alias"",
+            ""columnName"": ""certificate_alias"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""realm"",
+            ""columnName"": ""realm"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""fingerprint"",
+            ""columnName"": ""fingerprint"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""use_ip"",
+            ""columnName"": ""use_ip"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""ehlo"",
+            ""columnName"": ""ehlo"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""synchronize"",
+            ""columnName"": ""synchronize"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""primary"",
+            ""columnName"": ""primary"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""self"",
+            ""columnName"": ""self"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sender_extra"",
+            ""columnName"": ""sender_extra"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sender_extra_regex"",
+            ""columnName"": ""sender_extra_regex"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""replyto"",
+            ""columnName"": ""replyto"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""cc"",
+            ""columnName"": ""cc"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""bcc"",
+            ""columnName"": ""bcc"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""unicode"",
+            ""columnName"": ""unicode"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""plain_only"",
+            ""columnName"": ""plain_only"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encrypt"",
+            ""columnName"": ""encrypt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""delivery_receipt"",
+            ""columnName"": ""delivery_receipt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""read_receipt"",
+            ""columnName"": ""read_receipt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""store_sent"",
+            ""columnName"": ""store_sent"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sent_folder"",
+            ""columnName"": ""sent_folder"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""sign_key"",
+            ""columnName"": ""sign_key"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""sign_key_alias"",
+            ""columnName"": ""sign_key_alias"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""tbd"",
+            ""columnName"": ""tbd"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""state"",
+            ""columnName"": ""state"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""error"",
+            ""columnName"": ""error"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""last_connected"",
+            ""columnName"": ""last_connected"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""max_size"",
+            ""columnName"": ""max_size"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          }
+        ],
+        ""primaryKey"": {
+          ""columnNames"": [
+            ""id""
+          ],
+          ""autoGenerate"": true
+        },
+        ""indices"": [
+          {
+            ""name"": ""index_identity_account"",
+            ""unique"": false,
+            ""columnNames"": [
+              ""account""
+            ],
+            ""createSql"": ""CREATE INDEX IF NOT EXISTS `index_identity_account` ON `${TABLE_NAME}` (`account`)""
+          },
+          {
+            ""name"": ""index_identity_account_email"",
+            ""unique"": false,
+            ""columnNames"": [
+              ""account"",
+              ""email""
+            ],
+            ""createSql"": ""CREATE INDEX IF NOT EXISTS `index_identity_account_email` ON `${TABLE_NAME}` (`account`, `email`)""
+          }
+        ],
+        ""foreignKeys"": [
+          {
+            ""table"": ""account"",
+            ""onDelete"": ""CASCADE"",
+            ""onUpdate"": ""NO ACTION"",
+            ""columns"": [
+              ""account""
+            ],
+            ""referencedColumns"": [
+              ""id""
+            ]
+          }
+        ]
+      },
+      {
+        ""tableName"": ""account"",
+        ""createSql"": ""CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`order` INTEGER, `id` INTEGER PRIMARY KEY AUTOINCREMENT, `pop` INTEGER NOT NULL, `host` TEXT NOT NULL, `starttls` INTEGER NOT NULL, `insecure` INTEGER NOT NULL, `port` INTEGER NOT NULL, `auth_type` INTEGER NOT NULL, `provider` TEXT, `user` TEXT NOT NULL, `password` TEXT NOT NULL, `certificate` INTEGER NOT NULL, `certificate_alias` TEXT, `realm` TEXT, `fingerprint` TEXT, `name` TEXT, `signature` TEXT, `color` INTEGER, `synchronize` INTEGER NOT NULL, `ondemand` INTEGER NOT NULL, `poll_exempted` INTEGER NOT NULL, `primary` INTEGER NOT NULL, `notify` INTEGER NOT NULL, `browse` INTEGER NOT NULL, `leave_on_server` INTEGER NOT NULL, `leave_deleted` INTEGER NOT NULL, `leave_on_device` INTEGER NOT NULL, `max_messages` INTEGER, `auto_seen` INTEGER NOT NULL, `separator` INTEGER, `swipe_left` INTEGER, `swipe_right` INTEGER, `move_to` INTEGER, `poll_interval` INTEGER NOT NULL, `keep_alive_ok` INTEGER NOT NULL, `keep_alive_failed` INTEGER NOT NULL, `keep_alive_succeeded` INTEGER NOT NULL, `partial_fetch` INTEGER NOT NULL, `ignore_size` INTEGER NOT NULL, `use_date` INTEGER NOT NULL, `use_received` INTEGER NOT NULL, `prefix` TEXT, `quota_usage` INTEGER, `quota_limit` INTEGER, `created` INTEGER, `tbd` INTEGER, `thread` INTEGER, `state` TEXT, `warning` TEXT, `error` TEXT, `last_connected` INTEGER, `max_size` INTEGER)"",
+        ""fields"": [
+          {
+            ""fieldPath"": ""order"",
+            ""columnName"": ""order"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""id"",
+            ""columnName"": ""id"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""protocol"",
+            ""columnName"": ""pop"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""host"",
+            ""columnName"": ""host"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encryption"",
+            ""columnName"": ""starttls"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""insecure"",
+            ""columnName"": ""insecure"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""port"",
+            ""columnName"": ""port"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+",Added template groups,"""Added database schema for identity and account tables""",Added database schema for email identities and accounts in version 174.,"This is a new file that contains a database schema for an email application. The schema includes two tables, ""identity"" and ""account"", with multiple fields and indices defined for each table. The ""identity"" table seems to store information about email identities, including SMTP settings and signature preferences, while the ""account"" table stores information about email accounts, including POP3/IMAP settings and synchronization preferences. The schema also includes foreign key constraints and default values for certain fields.","""Add schema version 174 for accounts and identities including fields and indices for email database structure.""",Model 1
"diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 3d76f7204..2e7244413 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -191,12 +191,12 @@ public class GraphHopperWeb implements GraphHopperAPI
         if (pathWrapper.hasErrors())
             return pathWrapper;
 
-        double distance = path.getDouble(""distance"");
-        long time = path.getLong(""time"");
-
-        String snappedPointStr = path.getString(""points"");
-        PointList snappedPoints = WebHelper.decodePolyline(snappedPointStr, 5, tmpElevation);
-        pathWrapper.setWaypoints(snappedPoints);
+        if (path.has(""snapped_waypoints""))
+        {
+            String snappedPointStr = path.getString(""snapped_waypoints"");
+            PointList snappedPoints = WebHelper.decodePolyline(snappedPointStr, 5, tmpElevation);
+            pathWrapper.setWaypoints(snappedPoints);
+        }
 
         if (tmpCalcPoints)
         {
@@ -275,6 +275,9 @@ public class GraphHopperWeb implements GraphHopperAPI
                 pathWrapper.setInstructions(il);
             }
         }
+
+        double distance = path.getDouble(""distance"");
+        long time = path.getLong(""time"");
         pathWrapper.setDistance(distance).setTime(time);
         return pathWrapper;
     }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
index 479050e8c..423b0e142 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
@@ -58,10 +58,10 @@ public class GraphHopperWebTest
         assertEquals(5, arsp.getInstructions().getSize());
         assertEquals(""(0,Geradeaus auf A 100,1268.519329705091,65237)"", arsp.getInstructions().get(0).toString());
         assertEquals(11, arsp.getInstructions().get(0).getPoints().size());
-        
-        assertEquals(52.47384, arsp.getWaypoints().getLat(0), 1e-4);
-        assertEquals(13.36285, arsp.getWaypoints().getLon(0), 1e-4);
-        assertEquals(52.47361, arsp.getWaypoints().getLat(1), 1e-4);
+
+        assertEquals(43.73595, arsp.getWaypoints().getLat(0), 1e-4);
+        assertEquals(7.42015, arsp.getWaypoints().getLon(0), 1e-4);
+        assertEquals(43.73761, arsp.getWaypoints().getLat(1), 1e-4);
     }
 
     @Test",fix bug in web client related to snapped_waypoints <issue_id>,"""Fix snapped waypoints handling and update test case with correct coordinates""","According to the diff, the commit message should be:

""Fix snapped waypoints and distance/time calculation in GraphHopperWeb API""

This commit message accurately reflects the changes made in the code, which include:

1. Fixing the snapped waypoints calculation by checking for the ""snapped_waypoints"" key in the path object.
2. Moving the distance and time calculation to after the snapped waypoints calculation.
3. Updating the test cases to reflect the changes in the snapped waypoints and distance/time calculation.","""Update GraphHopperWeb to handle snapped_waypoints and adjust test lat/lon values""

Explanation: The change in the first file (GraphHopperWeb.java) adds a condition to check if ""snapped_waypoints"" exists in the path object before extracting and decoding the snapped points. The change in the second file (GraphHopperWebTest.java) modifies the expected latitude and longitude values for the waypoints in a test case. Therefore, the commit message should reflect both the update in the main code and the adjustment in the test values.",Update GraphHopperWeb to conditionally handle `snapped_waypoints` and adjust GraphHopperWebTest waypoints assertions accordingly.,Model 1
"diff --git a/Makefile.am b/Makefile.am
index 12cf6330..2d7888be 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -203,6 +203,7 @@ test_SRC := \
 	test/tsd/TestTreeRpc.java	\
 	test/tsd/TestUniqueIdRpc.java	\
 	test/uid/TestNoSuchUniqueId.java	\
+	test/uid/TestRandomUniqueId.java	\
 	test/uid/TestUniqueId.java \
 	test/utils/TestByteArrayPair.java \
 	test/utils/TestConfig.java \
diff --git a/test/uid/TestRandomUniqueId.java b/test/uid/TestRandomUniqueId.java
new file mode 100644
index 00000000..079938c7
--- /dev/null
+++ b/test/uid/TestRandomUniqueId.java
@@ -0,0 +1,92 @@
+// This file is part of OpenTSDB.
+// Copyright (C) 2015  The OpenTSDB Authors.
+//
+// This program is free software: you can redistribute it and/or modify it
+// under the terms of the GNU Lesser General Public License as published by
+// the Free Software Foundation, either version 2.1 of the License, or (at your
+// option) any later version.  This program is distributed in the hope that it
+// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
+// General Public License for more details.  You should have received a copy
+// of the GNU Lesser General Public License along with this program.  If not,
+// see <http://www.gnu.org/licenses/>.
+package net.opentsdb.uid;
+
+import static org.junit.Assert.assertTrue;
+import net.opentsdb.core.TSDB;
+
+import org.hbase.async.Bytes;
+import org.junit.Test;
+
+public final class TestRandomUniqueId {
+
+  @Test
+  public void getRandomUIDMetricWidth() throws Exception {
+    generateAndTestUID(TSDB.metrics_width(), 100);
+  }
+  
+  @Test
+  public void getRandomUID1Byte() throws Exception {
+    generateAndTestUID(1, 100);
+  }
+  
+  @Test
+  public void getRandomUID2Byte() throws Exception {
+    generateAndTestUID(2, 100);
+  }
+  
+  @Test
+  public void getRandomUID3Byte() throws Exception {
+    generateAndTestUID(3, 100);
+  }
+  
+  @Test
+  public void getRandomUID4Byte() throws Exception {
+    generateAndTestUID(4, 100);
+  }
+  
+  @Test
+  public void getRandomUID5Byte() throws Exception {
+    generateAndTestUID(5, 100);
+  }
+  
+  @Test
+  public void getRandomUID6Byte() throws Exception {
+    generateAndTestUID(6, 100);
+  }
+  
+  @Test
+  public void getRandomUID7Byte() throws Exception {
+    generateAndTestUID(7, 100);
+  }
+  /**
+   * Runs the test n times and makes sure it's greater than 0 and less than or
+   * equal to the max value on {@link width} bytes.
+   * @param width The number of bytes to generate a UID for
+   * @param n How many times to run the tests
+   */
+  private void generateAndTestUID(final int width, final int n) {
+    final long max_value = getMax(width);
+    for (int i = 0; i < n; i++) {
+      long uid = RandomUniqueId.getRandomUID(width);
+      assertTrue(uid > 0 && uid <= max_value);
+    }
+  }
+  
+  /**
+   * Simple helper to calculate the max value for any width of long
+   * @param width The width of the byte array we're comparing
+   * @return The maximum integer value on {@link width} bytes.
+   */
+  private long getMax(final int width) {
+    if (width > 7) {
+      throw new IllegalArgumentException(""Can't use a width of ["" + width + 
+          ""] in this unit test"");
+    }
+    final byte[] value = new byte[8];
+    for (int i = 0; i < width; i++) {
+      value[8 - (i + 1)] = (byte) 0xFF;
+    }
+    return Bytes.getLong(value);
+  }
+}",Add unit tests for RandomUniqueId .,"""Added test for RandomUniqueId generation with varying byte widths""","""Added test for RandomUniqueId generation with varying widths""","""Added TestRandomUniqueId.java and updated Makefile.am to include it""

This commit adds a new Java file `TestRandomUniqueId.java` to the `test/uid` directory and updates the `Makefile.am` to include this new file in the build process.

The `TestRandomUniqueId.java` file contains a series of tests for the `RandomUniqueId` class, specifically testing the `getRandomUIDMetricWidth()` method and the `getRandomUID()` method with different byte widths.

The `Makefile.am` file has been updated to include `TestRandomUniqueId.java` in the list of source files for the tests. This ensures that the new tests will be compiled and run when the tests are built.",Added TestRandomUniqueId.java to validate UID generation for various byte widths in OpenTSDB. Updated Makefile.am.,Model 3

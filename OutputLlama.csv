diff,label,llama2-Output
"diff --git a/camel-core/src/main/docs/string-dataformat.adoc b/camel-core/src/main/docs/string-dataformat.adoc
new file mode 100644
index 00000000000..2ccf0c835ca
--- /dev/null
+++ b/camel-core/src/main/docs/string-dataformat.adoc
@@ -0,0 +1,56 @@
+[[String-Dataformat]]
+String Dataformat
+~~~~~~~~~~~~~~~~~
+
+The String link:data-format.html[Data Format] is a textual based format
+that supports encoding.
+
+[[String-Options]]
+Options
+^^^^^^^
+
+// dataformat options: START
+The String Encoding dataformat supports 1 options which are listed below.
+
+
+
+{% raw %}
+[width=""100%"",cols=""2s,1m,1m,6"",options=""header""]
+|=======================================================================
+| Name | Default | Java Type | Description
+| charset |  | String | Sets an encoding to use. Will by default use the JVM platform default charset.
+|=======================================================================
+{% endraw %}
+// dataformat options: END
+
+[[String-Marshal]]
+Marshal
+^^^^^^^
+
+In this example we marshal the file content to String object in UTF-8
+encoding.
+
+[source,java]
+----------------------------------------------------------------------
+from(""file://data.csv"").marshal().string(""UTF-8"").to(""jms://myqueue"");
+----------------------------------------------------------------------
+
+[[String-Unmarshal]]
+Unmarshal
+^^^^^^^^^
+
+In this example we unmarshal the payload from the JMS queue to a String
+object using UTF-8 encoding, before its processed by the newOrder
+processor.
+
+[source,java]
+-----------------------------------------------------------------------------
+from(""jms://queue/order"").unmarshal().string(""UTF-8"").processRef(""newOrder"");
+-----------------------------------------------------------------------------
+
+[[String-Dependencies]]
+Dependencies
+^^^^^^^^^^^^
+
+This data format is provided in *camel-core* so no additional
+dependencies is needed.",Added String dataformat docs to Gitbook,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/camel-core/src/main/docs/string-dataformat.adoc b/camel-core/src/main/docs/string-dataformat.adoc
new file mode 100644
index 00000000000..2ccf0c835ca
--- /dev/null
+++ b/camel-core/src/main/docs/string-dataformat.adoc
@@ -0,0 +1,56 @@
+[[String-Dataformat]]
+String Dataformat
+~~~~~~~~~~~~~~~~~
+
+The String link:data-format.html[Data Format] is a textual based format
+that supports encoding.
+
+[[String-Options]]
+Options
+^^^^^^^
+
+// dataformat options: START
+The String Encoding dataformat supports 1 options which are listed below.
+
+
+
+{% raw %}
+[width=""100%"",cols=""2s,1m,1m,6"",options=""header""]
+|=======================================================================
+| Name | Default | Java Type | Description
+| charset |  | String | Sets an encoding to use. Will by default use the JVM platform default charset.
+|=======================================================================
+{% endraw %}
+// dataformat options: END
+
+[[String-Marshal]]
+Marshal
+^^^^^^^
+
+In this example we marshal the file content to String object in UTF-8
+encoding.
+
+[source,java]
+----------------------------------------------------------------------
+from(""file://data.csv"").marshal().string(""UTF-8"").to(""jms://myqueue"");
+----------------------------------------------------------------------
+
+[[String-Unmarshal]]
+Unmarshal
+^^^^^^^^^
+
+In this example we unmarshal the payload from the JMS queue to a String
+object using UTF-8 encoding, before its processed by the newOrder
+processor.
+
+[source,java]
+-----------------------------------------------------------------------------
+from(""jms://queue/order"").unmarshal().string(""UTF-8"").processRef(""newOrder"");
+-----------------------------------------------------------------------------
+
+[[String-Dependencies]]
+Dependencies
+^^^^^^^^^^^^
+
+This data format is provided in *camel-core* so no additional
+dependencies is needed. [/INST]  Here is a meaningful Git commit message based on the diff you provided:

`Added String Dataformat documentation`

This commit message provides a brief summary of the changes made in the commit, including the addition of a new file"
"diff --git a/.test-infra/jenkins/job_Inventory.groovy b/.test-infra/jenkins/job_Inventory.groovy
index 32e0645cfd..fec1ba24ce 100644
--- a/.test-infra/jenkins/job_Inventory.groovy
+++ b/.test-infra/jenkins/job_Inventory.groovy
@@ -35,7 +35,7 @@ nums.each {
     // Allows triggering this build against pull requests.
     commonJobProperties.enablePhraseTriggeringFromPullRequest(
       delegate,
-      'Machine Inventory',
+      ""Machine Inventory ${machine}"",
       ""Run Inventory ${machine}"")
 
     parameters {
@@ -66,6 +66,7 @@ nums.each {
       shell('virtualenv -p python3.7 test37 && . ./test37/bin/activate && python --version && deactivate || echo ""python 3.7 not found""')
       shell('echo ""Maven home $MAVEN_HOME""')
       shell('env')
+      shell('docker system prune --all --filter until=24h --force')
     }
   }
 }",Add docker system prune to inventory job .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/.test-infra/jenkins/job_Inventory.groovy b/.test-infra/jenkins/job_Inventory.groovy
index 32e0645cfd..fec1ba24ce 100644
--- a/.test-infra/jenkins/job_Inventory.groovy
+++ b/.test-infra/jenkins/job_Inventory.groovy
@@ -35,7 +35,7 @@ nums.each {
     // Allows triggering this build against pull requests.
     commonJobProperties.enablePhraseTriggeringFromPullRequest(
       delegate,
-      'Machine Inventory',
+      ""Machine Inventory ${machine}"",
       ""Run Inventory ${machine}"")
 
     parameters {
@@ -66,6 +66,7 @@ nums.each {
       shell('virtualenv -p python3.7 test37 && . ./test37/bin/activate && python --version && deactivate || echo ""python 3.7 not found""')
       shell('echo ""Maven home $MAVEN_HOME""')
       shell('env')
+      shell('docker system prune --all --filter until=24h --force')
     }
   }
 } [/INST]  Here's a possible commit message based on the diff:

`Fixed triggering of build for pull requests with machine inventory`

This commit message provides a brief summary of the changes made in the commit. It highlights the"
"diff --git a/changelog.html b/changelog.html
index f209df8e4d..60b7e19c11 100644
--- a/changelog.html
+++ b/changelog.html
@@ -54,6 +54,14 @@ Upcoming changes</a>
 
 <!-- Record your changes in the trunk here. -->
 <div id=""trunk"" style=""display:none""><!--=TRUNK-BEGIN=-->
+<ul class=image>
+  <li class=>
+</ul>
+</div><!--=TRUNK-END=-->
+
+<!-- these changes are controlled by the release process. DO NOT MODIFY -->
+<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
+<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
 <ul class=image>
   <li class=bug>
     Spurious warnings in the log after deleting builds.
@@ -66,12 +74,6 @@ Upcoming changes</a>
     (<a href=""https://issues.jenkins-ci.org/browse/JENKINS-25499"">issue 25499</a>,
      <a href=""https://issues.jenkins-ci.org/browse/JENKINS-25498"">issue 25498</a>)
 </ul>
-</div><!--=TRUNK-END=-->
-
-<!-- these changes are controlled by the release process. DO NOT MODIFY -->
-<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
-<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
-<!--=RC-CHANGES=-->
 </div><!--=END=-->
 <h3><a name=v1.594>What's new in 1.594</a> (2014/12/14)</h3>
 <ul class=image>",creating an RC branch,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/changelog.html b/changelog.html
index f209df8e4d..60b7e19c11 100644
--- a/changelog.html
+++ b/changelog.html
@@ -54,6 +54,14 @@ Upcoming changes</a>
 
 <!-- Record your changes in the trunk here. -->
 <div id=""trunk"" style=""display:none""><!--=TRUNK-BEGIN=-->
+<ul class=image>
+  <li class=>
+</ul>
+</div><!--=TRUNK-END=-->
+
+<!-- these changes are controlled by the release process. DO NOT MODIFY -->
+<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
+<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
 <ul class=image>
   <li class=bug>
     Spurious warnings in the log after deleting builds.
@@ -66,12 +74,6 @@ Upcoming changes</a>
     (<a href=""https://issues.jenkins-ci.org/browse/JENKINS-25499"">issue 25499</a>,
      <a href=""https://issues.jenkins-ci.org/browse/JENKINS-25498"">issue 25498</a>)
 </ul>
-</div><!--=TRUNK-END=-->
-
-<!-- these changes are controlled by the release process. DO NOT MODIFY -->
-<div id=""rc"" style=""display:none;""><!--=BEGIN=-->
-<h3><a name=v1.595>What's new in 1.595</a> <!--=DATE=--></h3>
-<!--=RC-CHANGES=-->
 </div><!--=END=-->
 <h3><a name=v1.594>What's new in 1.594</a> (2014/12/14)</h3>
 <ul class=image> [/INST]  Here is a possible meaningful commit message based on the diff output you provided:

`Added release notes for 1.595 and fixed spurious warnings in the log after deleting builds`

This commit message highlight"
"diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
index a8c5f901f1f..36a6200ec0b 100644
--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java
+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
@@ -74,13 +74,6 @@ public class MasterUtil
     
     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )
     {
-        if ( Config.osIsWindows() )
-        {
-            throw new UnsupportedOperationException(
-                ""Streaming store files live (as used in HA and backup) ""
-                    + ""isn't supported on Windows due to limitations in OS/filesystem"" );
-        }
-
         File baseDir = getBaseDir( graphDb );
         XaDataSourceManager dsManager =
                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
index 7d55c553e4d..cb4acdf5391 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
@@ -91,7 +91,6 @@ public class TestBackup
     @Test
     public void fullThenIncremental() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
         OnlineBackup backup = OnlineBackup.from( ""localhost"" );
@@ -109,7 +108,6 @@ public class TestBackup
     @Test
     public void makeSureStoreIdIsEnforced() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         // Create data set X on server A
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
index 4ee63dbf284..d067458ef8e 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.neo4j.graphdb.GraphDatabaseService;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class TestConfiguration
@@ -85,7 +84,6 @@ public class TestConfiguration
     @Test
     public void testEnableDefaultsInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         GraphDatabaseService db = newDb( ""true"" );
         OnlineBackup.from( ""localhost"" ).full( BACKUP_DIR );
         db.shutdown();
@@ -94,7 +92,6 @@ public class TestConfiguration
     @Test
     public void testEnableCustomPortInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int customPort = 12345;
         GraphDatabaseService db = newDb( ""port="" + customPort );
         try
diff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java
index 969983f97df..f3cc6d9055e 100644
--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java
+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java
@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;
 import org.neo4j.graphdb.RelationshipType;
 import org.neo4j.helpers.collection.IteratorUtil;
 import org.neo4j.helpers.collection.MapUtil;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.ha.Broker;
 import org.neo4j.kernel.ha.BrokerFactory;
 
@@ -393,7 +392,6 @@ public abstract class AbstractHaTest
     @Test
     public void slaveCreateNode() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 2, 2, 0, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );
@@ -402,7 +400,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMultipleSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 3 );
         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );
@@ -415,7 +412,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterFailure() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(
                 getMasterShutdownDispatcher() ), 0 );
@@ -429,7 +425,6 @@ public abstract class AbstractHaTest
     @Test
     public void testSlaveConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -443,7 +438,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -458,7 +452,6 @@ public abstract class AbstractHaTest
     @Test
     public void testGetRelationships() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -475,7 +468,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNoTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -488,7 +480,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNodeDeleted() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 1, 0, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -503,7 +494,6 @@ public abstract class AbstractHaTest
     @Test
     public void testDeadlock() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
 
         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );
@@ -526,7 +516,6 @@ public abstract class AbstractHaTest
     @Test
     public void createNodeAndIndex() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 1, 0, 1, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Neo"" ), 0 );
@@ -535,7 +524,6 @@ public abstract class AbstractHaTest
     @Test
     public void indexingAndTwoSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Morpheus"" ) );
         pullUpdates();
@@ -548,7 +536,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNewIndexFramework() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 2, 0, 0, 2 );
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( ""users"",
@@ -559,7 +546,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );
     }
@@ -567,7 +553,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );
         pullUpdates();
@@ -576,7 +561,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );
     }
@@ -584,7 +568,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );
         pullUpdates();
@@ -593,7 +576,6 @@ public abstract class AbstractHaTest
     @Test
     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         startUpMaster( MapUtil.stringMap() );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );
         addDb( MapUtil.stringMap() );
@@ -604,7 +586,6 @@ public abstract class AbstractHaTest
     @Test
     public void canCopyInitialDbWithLuceneIndexes() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int additionalNodeCount = 50;
         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );
         startUpMaster( MapUtil.stringMap() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java
index dec1cc8f691..06d100dbc64 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java
@@ -29,7 +29,6 @@ import java.util.Map;
 import org.junit.After;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class MultiJvmTest extends AbstractHaTest
@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest
     @After
     public void shutdownDbsAndVerify() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         shutdownDbs();
 
         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
index b9806cdc7ee..018208324b9 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
@@ -28,7 +28,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.neo4j.ha.LocalhostZooKeeperCluster;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 
 public class MultiJvmWithZooKeeperTest extends MultiJvmTest
 {
@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @Before
     public void startZooKeeperCluster() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );
         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );
     }
@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @After
     public void shutdownZooKeeperCluster()
     {
-        if ( Config.osIsWindows() ) return;
         zooKeeperCluster.shutdown();
     }
 }
diff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java
index 544c2db3373..b5eb6dead4e 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java
@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest
     @After
     public void verifyAndShutdownDbs()
     {
-        if ( Config.osIsWindows() ) return;
         try
         {
             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );
@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest
     @Test
     public void testMixingEntitiesFromWrongDbs() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
-
         initializeDbs( 1 );
         GraphDatabaseService haDb1 = haDbs.get( 0 );
         GraphDatabaseService mDb = master.getGraphDb();
diff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
index 61184920a50..e48248e2cf2 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
@@ -25,7 +25,6 @@ import org.junit.Test;
 import org.neo4j.com.Protocol;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.helpers.Pair;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.HighlyAvailableGraphDatabase;
 import org.neo4j.kernel.ha.AbstractBroker;
 import org.neo4j.kernel.ha.Broker;
@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest
     @Test
     public void assertThatNettyIsUsed() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         assertTrue(
                 ""Slave Broker is not a client"",
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
index 550752cf419..7b6805b6b49 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;
 import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;
 import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;
 import org.neo4j.kernel.impl.core.RelationshipTypeCreator;
+import org.neo4j.kernel.impl.nioneo.store.FileLock;
 import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;
 import org.neo4j.kernel.impl.nioneo.store.IdGenerator;
 import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;
@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxFinishHook;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;
 
@@ -139,6 +142,17 @@ public class CommonFactories
             {
                 return new RandomAccessFile( fileName, mode ).getChannel();
             }
+            
+            @Override
+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException
+            {
+                return FileLock.getOsSpecificFileLock( fileName, channel );
+            }
         };
     }
+    
+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )
+    {
+        return DefaultLogBufferFactory.create( config );
+    }
 }
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
index 5f18875c8d9..abf36792d62 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;
 import org.neo4j.kernel.impl.persistence.PersistenceModule;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 
 /**
@@ -111,7 +112,8 @@ public class Config
             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,
             TxEventSyncHookFactory txSyncHookFactory,
             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,
-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )
+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,
+            LogBufferFactory logBufferFactory )
     {
         this.storeDir = storeDir;
         this.inputParams = inputParams;
@@ -129,6 +131,7 @@ public class Config
         this.syncHookFactory = txSyncHookFactory;
         this.persistenceModule = new PersistenceModule();
         this.cacheManager = new AdaptiveCacheManager();
+        params.put( LogBufferFactory.class, logBufferFactory );
         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,
                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),
                 readOnly );
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
index e48d8343e80..7c6e974f46d 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl
         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,
                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,
                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),
-                lastCommittedTxIdSetter, fileSystem );
+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );
         graphDbInstance = new GraphDbInstance( storeDir, true, config );
         this.msgLog = StringLogger.getLogger( storeDir );
         this.graphDbService = graphDbService;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
index 53e62b027d7..1ad4282b7b5 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
@@ -23,7 +23,6 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
 import java.nio.channels.OverlappingFileLockException;
 import java.util.Map;
 import java.util.logging.Logger;
@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore
         {
             if ( (!readOnly || backupSlave) && grabFileLock )
             {
-                this.fileLock = this.fileChannel.tryLock();
+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );
                 if ( fileLock == null )
                 {
                     throw new IllegalStateException( ""Unable to lock store [""
@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore
                     fileChannel.write( buffer );
                     fileChannel.truncate( fileChannel.position() );
                     fileChannel.force( false );
-                    fileLock.release();
+                    if ( fileLock != null )
+                    {
+                        fileLock.release();
+                    }
                     fileChannel.close();
                     fileChannel = null;
                     success = true;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
new file mode 100644
index 00000000000..62f3ef72bb7
--- /dev/null
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright (c) 2002-2011 ""Neo Technology,""
+ * Network Engine for Objects in Lund AB [http://neotechnology.com]
+ *
+ * This file is part of Neo4j.
+ *
+ * Neo4j is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.neo4j.kernel.impl.nioneo.store;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
+import java.nio.channels.OverlappingFileLockException;
+
+import org.neo4j.kernel.Config;
+
+public abstract class FileLock
+{
+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )
+    {
+        if ( lock == null )
+        {
+            return null;
+        }
+        
+        return new FileLock()
+        {
+            @Override
+            public void release() throws IOException
+            {
+                lock.release();
+            }
+        };
+    }
+    
+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )
+            throws IOException
+    {
+        if ( Config.osIsWindows() )
+        {
+            // Only grab one lock, say for the ""neostore"" file
+            if ( fileName.endsWith( ""neostore"" ) )
+            {
+                return getWindowsFileLock( new File( fileName ).getParentFile() );
+            }
+            
+            // For the rest just return placebo locks
+            return new PlaceboFileLock();
+        }
+        else
+        {
+            return wrapOrNull( channel.tryLock() );
+        }
+    }
+    
+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException
+    {
+        File lockFile = new File( storeDir, ""lock"" );
+        if ( !lockFile.exists() )
+        {
+            if ( !lockFile.createNewFile() )
+            {
+                throw new IOException( ""Couldn't create lock file "" + lockFile.getAbsolutePath() );
+            }
+        }
+        FileChannel fileChannel = new RandomAccessFile( lockFile, ""rw"" ).getChannel();
+        java.nio.channels.FileLock fileChannelLock = null;
+        try
+        {
+            fileChannelLock = fileChannel.tryLock(); 
+        }
+        catch ( OverlappingFileLockException e )
+        {
+            // OK, let fileChannelLock continue to be null and we'll deal with it below
+        }
+        if ( fileChannelLock == null )
+        {
+            fileChannel.close();
+            return null;
+        }
+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );
+    }
+
+    public abstract void release() throws IOException;
+    
+    private static class PlaceboFileLock extends FileLock
+    {
+        @Override
+        public void release() throws IOException
+        {
+        }
+    }
+    
+    private static class WindowsFileLock extends FileLock
+    {
+        private final File lockFile;
+        private final FileChannel fileChannel;
+        private final java.nio.channels.FileLock fileChannelLock;
+
+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )
+                throws IOException
+        {
+            this.lockFile = lockFile;
+            this.fileChannel = fileChannel;
+            this.fileChannelLock",Added support for backup and HA for Windows by adding a separate file locking method and made DirectMappedLogBuffer HA friendly,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/community/com/src/main/java/org/neo4j/com/MasterUtil.java b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
index a8c5f901f1f..36a6200ec0b 100644
--- a/community/com/src/main/java/org/neo4j/com/MasterUtil.java
+++ b/community/com/src/main/java/org/neo4j/com/MasterUtil.java
@@ -74,13 +74,6 @@ public class MasterUtil
     
     public static SlaveContext rotateLogsAndStreamStoreFiles( GraphDatabaseService graphDb, StoreWriter writer )
     {
-        if ( Config.osIsWindows() )
-        {
-            throw new UnsupportedOperationException(
-                ""Streaming store files live (as used in HA and backup) ""
-                    + ""isn't supported on Windows due to limitations in OS/filesystem"" );
-        }
-
         File baseDir = getBaseDir( graphDb );
         XaDataSourceManager dsManager =
                 ((AbstractGraphDatabase) graphDb).getConfig().getTxModule().getXaDataSourceManager();
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
index 7d55c553e4d..cb4acdf5391 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestBackup.java
@@ -91,7 +91,6 @@ public class TestBackup
     @Test
     public void fullThenIncremental() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
         OnlineBackup backup = OnlineBackup.from( ""localhost"" );
@@ -109,7 +108,6 @@ public class TestBackup
     @Test
     public void makeSureStoreIdIsEnforced() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         // Create data set X on server A
         DbRepresentation initialDataSetRepresentation = createInitialDataSet( serverPath );
         ServerInterface server = startServer( serverPath );
diff --git a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
index 4ee63dbf284..d067458ef8e 100644
--- a/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
+++ b/community/com/src/test/java/org/neo4j/com/backup/TestConfiguration.java
@@ -29,7 +29,6 @@ import org.apache.commons.io.FileUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.neo4j.graphdb.GraphDatabaseService;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class TestConfiguration
@@ -85,7 +84,6 @@ public class TestConfiguration
     @Test
     public void testEnableDefaultsInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         GraphDatabaseService db = newDb( ""true"" );
         OnlineBackup.from( ""localhost"" ).full( BACKUP_DIR );
         db.shutdown();
@@ -94,7 +92,6 @@ public class TestConfiguration
     @Test
     public void testEnableCustomPortInConfig() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int customPort = 12345;
         GraphDatabaseService db = newDb( ""port="" + customPort );
         try
diff --git a/community/ha/src/test/java/slavetest/AbstractHaTest.java b/community/ha/src/test/java/slavetest/AbstractHaTest.java
index 969983f97df..f3cc6d9055e 100644
--- a/community/ha/src/test/java/slavetest/AbstractHaTest.java
+++ b/community/ha/src/test/java/slavetest/AbstractHaTest.java
@@ -46,7 +46,6 @@ import org.neo4j.graphdb.Relationship;
 import org.neo4j.graphdb.RelationshipType;
 import org.neo4j.helpers.collection.IteratorUtil;
 import org.neo4j.helpers.collection.MapUtil;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.ha.Broker;
 import org.neo4j.kernel.ha.BrokerFactory;
 
@@ -393,7 +392,6 @@ public abstract class AbstractHaTest
     @Test
     public void slaveCreateNode() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 2, 2, 0, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateSomeEntitiesJob(), 0 );
@@ -402,7 +400,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMultipleSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 3 );
         executeJob( new CommonJobs.CreateSubRefNodeJob( CommonJobs.REL_TYPE.name(), null, null ), 0 );
@@ -415,7 +412,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterFailure() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         Serializable[] result = executeJob( new CommonJobs.CreateSubRefNodeMasterFailJob(
                 getMasterShutdownDispatcher() ), 0 );
@@ -429,7 +425,6 @@ public abstract class AbstractHaTest
     @Test
     public void testSlaveConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -443,7 +438,6 @@ public abstract class AbstractHaTest
     @Test
     public void testMasterConstraintViolation() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 1, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -458,7 +452,6 @@ public abstract class AbstractHaTest
     @Test
     public void testGetRelationships() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 3, 2, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -475,7 +468,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNoTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 1, 0, 1, 0, 0 );
         initializeDbs( 1 );
 
@@ -488,7 +480,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNodeDeleted() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 1, 0, 0, 0, 0, 0 );
         initializeDbs( 1 );
 
@@ -503,7 +494,6 @@ public abstract class AbstractHaTest
     @Test
     public void testDeadlock() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
 
         Long[] nodes = executeJobOnMaster( new CommonJobs.CreateNodesJob( 2 ) );
@@ -526,7 +516,6 @@ public abstract class AbstractHaTest
     @Test
     public void createNodeAndIndex() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 1, 0, 1, 0 );
         initializeDbs( 1 );
         executeJob( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Neo"" ), 0 );
@@ -535,7 +524,6 @@ public abstract class AbstractHaTest
     @Test
     public void indexingAndTwoSlaves() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndIndexJob( ""name"", ""Morpheus"" ) );
         pullUpdates();
@@ -548,7 +536,6 @@ public abstract class AbstractHaTest
     @Test
     public void testNewIndexFramework() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         setExpectedResults( 2, 0, 2, 0, 0, 2 );
         initializeDbs( 2 );
         long id = executeJobOnMaster( new CommonJobs.CreateNodeAndNewIndexJob( ""users"",
@@ -559,7 +546,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 20, 1 ), 0 );
     }
@@ -567,7 +553,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransaction() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 20, 1 ) );
         pullUpdates();
@@ -576,7 +561,6 @@ public abstract class AbstractHaTest
     @Test
     public void testLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJob( new CommonJobs.LargeTransactionJob( 1, 20 ), 0 );
     }
@@ -584,7 +568,6 @@ public abstract class AbstractHaTest
     @Test
     public void testPullLargeTransactionData() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 20 ) );
         pullUpdates();
@@ -593,7 +576,6 @@ public abstract class AbstractHaTest
     @Test
     public void makeSureSlaveCanCopyLargeInitialDatabase() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         startUpMaster( MapUtil.stringMap() );
         executeJobOnMaster( new CommonJobs.LargeTransactionJob( 1, 60 ) );
         addDb( MapUtil.stringMap() );
@@ -604,7 +586,6 @@ public abstract class AbstractHaTest
     @Test
     public void canCopyInitialDbWithLuceneIndexes() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         int additionalNodeCount = 50;
         setExpectedResults( 1+additionalNodeCount, 0, additionalNodeCount*2, 0, 0, additionalNodeCount*2 );
         startUpMaster( MapUtil.stringMap() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmTest.java b/community/ha/src/test/java/slavetest/MultiJvmTest.java
index dec1cc8f691..06d100dbc64 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmTest.java
@@ -29,7 +29,6 @@ import java.util.Map;
 import org.junit.After;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.EmbeddedGraphDatabase;
 
 public class MultiJvmTest extends AbstractHaTest
@@ -68,7 +67,6 @@ public class MultiJvmTest extends AbstractHaTest
     @After
     public void shutdownDbsAndVerify() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         shutdownDbs();
 
         GraphDatabaseService masterDb = new EmbeddedGraphDatabase( dbPath( 0 ).getAbsolutePath() );
diff --git a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
index b9806cdc7ee..018208324b9 100644
--- a/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
+++ b/community/ha/src/test/java/slavetest/MultiJvmWithZooKeeperTest.java
@@ -28,7 +28,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.neo4j.ha.LocalhostZooKeeperCluster;
 import org.neo4j.ha.StandaloneDatabase;
-import org.neo4j.kernel.Config;
 
 public class MultiJvmWithZooKeeperTest extends MultiJvmTest
 {
@@ -43,7 +42,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @Before
     public void startZooKeeperCluster() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         FileUtils.deleteDirectory( BASE_ZOO_KEEPER_DATA_DIR );
         zooKeeperCluster = new LocalhostZooKeeperCluster( getClass(), /*ports:*/2181, 2182, 2183 );
     }
@@ -84,7 +82,6 @@ public class MultiJvmWithZooKeeperTest extends MultiJvmTest
     @After
     public void shutdownZooKeeperCluster()
     {
-        if ( Config.osIsWindows() ) return;
         zooKeeperCluster.shutdown();
     }
 }
diff --git a/community/ha/src/test/java/slavetest/SingleJvmTest.java b/community/ha/src/test/java/slavetest/SingleJvmTest.java
index 544c2db3373..b5eb6dead4e 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmTest.java
@@ -119,7 +119,6 @@ public class SingleJvmTest extends AbstractHaTest
     @After
     public void verifyAndShutdownDbs()
     {
-        if ( Config.osIsWindows() ) return;
         try
         {
             verify( master.getGraphDb(), haDbs.toArray( new GraphDatabaseService[haDbs.size()] ) );
@@ -184,8 +183,6 @@ public class SingleJvmTest extends AbstractHaTest
     @Test
     public void testMixingEntitiesFromWrongDbs() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
-
         initializeDbs( 1 );
         GraphDatabaseService haDb1 = haDbs.get( 0 );
         GraphDatabaseService mDb = master.getGraphDb();
diff --git a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
index 61184920a50..e48248e2cf2 100644
--- a/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
+++ b/community/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java
@@ -25,7 +25,6 @@ import org.junit.Test;
 import org.neo4j.com.Protocol;
 import org.neo4j.graphdb.GraphDatabaseService;
 import org.neo4j.helpers.Pair;
-import org.neo4j.kernel.Config;
 import org.neo4j.kernel.HighlyAvailableGraphDatabase;
 import org.neo4j.kernel.ha.AbstractBroker;
 import org.neo4j.kernel.ha.Broker;
@@ -39,7 +38,6 @@ public class SingleJvmWithNettyTest extends SingleJvmTest
     @Test
     public void assertThatNettyIsUsed() throws Exception
     {
-        if ( Config.osIsWindows() ) return;
         initializeDbs( 1 );
         assertTrue(
                 ""Slave Broker is not a client"",
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
index 550752cf419..7b6805b6b49 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/CommonFactories.java
@@ -31,6 +31,7 @@ import javax.transaction.TransactionManager;
 import org.neo4j.kernel.impl.core.DefaultRelationshipTypeCreator;
 import org.neo4j.kernel.impl.core.LastCommittedTxIdSetter;
 import org.neo4j.kernel.impl.core.RelationshipTypeCreator;
+import org.neo4j.kernel.impl.nioneo.store.FileLock;
 import org.neo4j.kernel.impl.nioneo.store.FileSystemAbstraction;
 import org.neo4j.kernel.impl.nioneo.store.IdGenerator;
 import org.neo4j.kernel.impl.nioneo.store.IdGeneratorImpl;
@@ -38,6 +39,8 @@ import org.neo4j.kernel.impl.nioneo.store.NeoStore;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxFinishHook;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.DefaultLogBufferFactory;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGeneratorFactory;
 
@@ -139,6 +142,17 @@ public class CommonFactories
             {
                 return new RandomAccessFile( fileName, mode ).getChannel();
             }
+            
+            @Override
+            public FileLock tryLock( String fileName, FileChannel channel ) throws IOException
+            {
+                return FileLock.getOsSpecificFileLock( fileName, channel );
+            }
         };
     }
+    
+    public static LogBufferFactory defaultLogBufferFactory( Map<?, ?> config )
+    {
+        return DefaultLogBufferFactory.create( config );
+    }
 }
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/Config.java b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
index 5f18875c8d9..abf36792d62 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/Config.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/Config.java
@@ -43,6 +43,7 @@ import org.neo4j.kernel.impl.persistence.IdGeneratorModule;
 import org.neo4j.kernel.impl.persistence.PersistenceModule;
 import org.neo4j.kernel.impl.transaction.LockManager;
 import org.neo4j.kernel.impl.transaction.TxModule;
+import org.neo4j.kernel.impl.transaction.xaframework.LogBufferFactory;
 import org.neo4j.kernel.impl.transaction.xaframework.TxIdGenerator;
 
 /**
@@ -111,7 +112,8 @@ public class Config
             LockReleaser lockReleaser, IdGeneratorFactory idGeneratorFactory,
             TxEventSyncHookFactory txSyncHookFactory,
             RelationshipTypeCreator relTypeCreator, TxIdGenerator txIdGenerator,
-            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem )
+            LastCommittedTxIdSetter lastCommittedTxIdSetter, FileSystemAbstraction fileSystem,
+            LogBufferFactory logBufferFactory )
     {
         this.storeDir = storeDir;
         this.inputParams = inputParams;
@@ -129,6 +131,7 @@ public class Config
         this.syncHookFactory = txSyncHookFactory;
         this.persistenceModule = new PersistenceModule();
         this.cacheManager = new AdaptiveCacheManager();
+        params.put( LogBufferFactory.class, logBufferFactory );
         graphDbModule = new GraphDbModule( graphDb, cacheManager, lockManager,
                 txModule.getTxManager(), idGeneratorModule.getIdGenerator(),
                 readOnly );
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
index e48d8343e80..7c6e974f46d 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/EmbeddedGraphDbImpl.java
@@ -111,7 +111,7 @@ class EmbeddedGraphDbImpl
         final Config config = new Config( graphDbService, storeDir, storeId, inputParams,
                 kernelPanicEventGenerator, txModule, lockManager, lockReleaser, idGeneratorFactory,
                 new SyncHookFactory(), relTypeCreator, txIdFactory.create( txModule.getTxManager() ),
-                lastCommittedTxIdSetter, fileSystem );
+                lastCommittedTxIdSetter, fileSystem, CommonFactories.defaultLogBufferFactory( inputParams ) );
         graphDbInstance = new GraphDbInstance( storeDir, true, config );
         this.msgLog = StringLogger.getLogger( storeDir );
         this.graphDbService = graphDbService;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
index 53e62b027d7..1ad4282b7b5 100644
--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/CommonAbstractStore.java
@@ -23,7 +23,6 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.nio.channels.FileLock;
 import java.nio.channels.OverlappingFileLockException;
 import java.util.Map;
 import java.util.logging.Logger;
@@ -259,7 +258,7 @@ public abstract class CommonAbstractStore
         {
             if ( (!readOnly || backupSlave) && grabFileLock )
             {
-                this.fileLock = this.fileChannel.tryLock();
+                this.fileLock = getFileSystem().tryLock( storageFileName, fileChannel );
                 if ( fileLock == null )
                 {
                     throw new IllegalStateException( ""Unable to lock store [""
@@ -686,7 +685,10 @@ public abstract class CommonAbstractStore
                     fileChannel.write( buffer );
                     fileChannel.truncate( fileChannel.position() );
                     fileChannel.force( false );
-                    fileLock.release();
+                    if ( fileLock != null )
+                    {
+                        fileLock.release();
+                    }
                     fileChannel.close();
                     fileChannel = null;
                     success = true;
diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
new file mode 100644
index 00000000000..62f3ef72bb7
--- /dev/null
+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/nioneo/store/FileLock.java
@@ -0,0 +1,144 @@
+/**
+ * Copyright (c) 2002-2011 ""Neo Technology,""
+ * Network Engine for Objects in Lund AB [http://neotechnology.com]
+ *
+ * This file is part of Neo4j.
+ *
+ * Neo4j is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.neo4j.kernel.impl.nioneo.store;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
+import java.nio.channels.OverlappingFileLockException;
+
+import org.neo4j.kernel.Config;
+
+public abstract class FileLock
+{
+    private static FileLock wrapOrNull( final java.nio.channels.FileLock lock )
+    {
+        if ( lock == null )
+        {
+            return null;
+        }
+        
+        return new FileLock()
+        {
+            @Override
+            public void release() throws IOException
+            {
+                lock.release();
+            }
+        };
+    }
+    
+    public static FileLock getOsSpecificFileLock( String fileName, FileChannel channel )
+            throws IOException
+    {
+        if ( Config.osIsWindows() )
+        {
+            // Only grab one lock, say for the ""neostore"" file
+            if ( fileName.endsWith( ""neostore"" ) )
+            {
+                return getWindowsFileLock( new File( fileName ).getParentFile() );
+            }
+            
+            // For the rest just return placebo locks
+            return new PlaceboFileLock();
+        }
+        else
+        {
+            return wrapOrNull( channel.tryLock() );
+        }
+    }
+    
+    private static FileLock getWindowsFileLock( File storeDir ) throws IOException
+    {
+        File lockFile = new File( storeDir, ""lock"" );
+        if ( !lockFile.exists() )
+        {
+            if ( !lockFile.createNewFile() )
+            {
+                throw new IOException( ""Couldn't create lock file "" + lockFile.getAbsolutePath() );
+            }
+        }
+        FileChannel fileChannel = new RandomAccessFile( lockFile, ""rw"" ).getChannel();
+        java.nio.channels.FileLock fileChannelLock = null;
+        try
+        {
+            fileChannelLock = fileChannel.tryLock(); 
+        }
+        catch ( OverlappingFileLockException e )
+        {
+            // OK, let fileChannelLock continue to be null and we'll deal with it below
+        }
+        if ( fileChannelLock == null )
+        {
+            fileChannel.close();
+            return null;
+        }
+        return new WindowsFileLock( lockFile, fileChannel, fileChannelLock );
+    }
+
+    public abstract void release() throws IOException;
+    
+    private static class PlaceboFileLock extends FileLock
+    {
+        @Override
+        public void release() throws IOException
+        {
+        }
+    }
+    
+    private static class WindowsFileLock extends FileLock
+    {
+        private final File lockFile;
+        private final FileChannel fileChannel;
+        private final java.nio.channels.FileLock fileChannelLock;
+
+        public WindowsFileLock( File lockFile, FileChannel fileChannel, java.nio.channels.FileLock lock )
+                throws IOException
+        {
+            this.lockFile = lockFile;
+            this.fileChannel = fileChannel;
+            this.fileChannelLock [/INST]tlḥ
cgi
 soc eastern
ć
 eastern crack
ḥ ); ];
 };拳 ); ]; amaz -> entirely

 );
ḥ entirely
 externas
"
"diff --git a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
index fa7cacc..9ab237f 100644
--- a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
+++ b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
@@ -28,13 +28,8 @@ import net.wequick.small.webkit.WebActivity;
 import net.wequick.small.webkit.WebViewPool;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Properties;
 
 /**
  * Created by galen on 15/1/28.",Remove unused import,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
index fa7cacc..9ab237f 100644
--- a/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
+++ b/Android/aar-small/src/main/java/net/wequick/small/WebBundleLauncher.java
@@ -28,13 +28,8 @@ import net.wequick.small.webkit.WebActivity;
 import net.wequick.small.webkit.WebViewPool;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Properties;
 
 /**
  * Created by galen on 15/1/28. [/INST]  Here is a possible meaningful commit message based on the diff you provided:

""Fixed issue with loading web bundle in WebBundleLauncher (#1234). Modified line 28 to fix the issue."""
"diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
index 7ec87b722..d912d12c1 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
@@ -15,6 +15,7 @@ public class MetadataClient extends ClientBase {
 
     public MetadataClient(String address, int port) {
         super(address, port);
+        this.stub = MetadataServiceGrpc.newBlockingStub(this.channel);
     }
 
     /**
diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
index b9b155cd7..d9b170704 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
@@ -1,6 +1,8 @@
 package com.netflix.conductor.client.grpc;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
 import com.netflix.conductor.common.metadata.tasks.Task;
 import com.netflix.conductor.common.metadata.tasks.TaskExecLog;
 import com.netflix.conductor.common.metadata.tasks.TaskResult;
@@ -9,8 +11,7 @@ import com.netflix.conductor.grpc.TaskServicePb;
 import com.netflix.conductor.proto.TaskPb;
 import org.apache.commons.lang3.StringUtils;
 
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class TaskClient extends ClientBase {
@@ -44,6 +45,46 @@ public class TaskClient extends ClientBase {
         return protoMapper.fromProto(task);
     }
 
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return List of tasks awaiting to be executed.
+     */
+    public List<Task> batchPollTasksByTaskType(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        return Lists.newArrayList(batchPollTasksByTaskTypeAsync(taskType, workerId, count, timeoutInMillisecond));
+    }
+
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     * Returns an iterator that streams tasks as they become available through GRPC.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return Iterator of tasks awaiting to be executed.
+     */
+    public Iterator<Task> batchPollTasksByTaskTypeAsync(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), ""Task type cannot be blank"");
+        Preconditions.checkArgument(StringUtils.isNotBlank(workerId), ""Worker id cannot be blank"");
+        Preconditions.checkArgument(count > 0, ""Count must be greater than 0"");
+
+        Iterator<TaskPb.Task> it = stub.batchPoll(
+                TaskServicePb.BatchPollRequest.newBuilder()
+                        .setTaskType(taskType)
+                        .setWorkerId(workerId)
+                        .setCount(count)
+                        .setTimeout(timeoutInMillisecond)
+                        .build()
+        );
+
+        return Iterators.transform(it, protoMapper::fromProto);
+    }
+
     /**
      * Retrieve pending tasks by type
      *
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
index 3ae78d3d0..f32e996a1 100644
--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
@@ -35,6 +35,7 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
 
     private static final int MAX_TASK_COUNT = 100;
     private static final int POLL_TIMEOUT_MS = 100;
+    private static final int MAX_POLL_TIMEOUT_MS = 5000;
 
     private final ExecutionService taskService;
     private final QueueDAO queues;
@@ -60,41 +61,24 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
     }
 
     @Override
-    public StreamObserver<TaskServicePb.StreamingPollRequest> pollStream(StreamObserver<TaskPb.Task> observer) {
-        final ServerCallStreamObserver<TaskPb.Task> responseObserver =
-                (ServerCallStreamObserver<TaskPb.Task>) observer;
-
-        return new StreamObserver<TaskServicePb.StreamingPollRequest>() {
-            @Override
-            public void onNext(TaskServicePb.StreamingPollRequest req) {
-                try {
-                    for (TaskResultPb.TaskResult result : req.getCompletedList()) {
-                        TaskResult task = protoMapper.fromProto(result);
-                        taskService.updateTask(task);
-                    }
-
-                    List<Task> newTasks = taskService.poll(
-                            req.getTaskType(), req.getWorkerId(), req.getDomain(),
-                            req.getCapacity(), POLL_TIMEOUT_MS);
-
-                    for (Task task : newTasks) {
-                        responseObserver.onNext(protoMapper.toProto(task));
-                    }
-                } catch (Exception e) {
-                    grpcHelper.onError(observer, e);
-                }
-            }
-
-            @Override
-            public void onError(Throwable t) {
-                responseObserver.onError(t);
-            }
+    public void batchPoll(TaskServicePb.BatchPollRequest req, StreamObserver<TaskPb.Task> response) {
+        final int count = (req.getCount() == 0) ? 1 : req.getCount();
+        final int timeout = (req.getTimeout() == 0) ? POLL_TIMEOUT_MS : req.getTimeout();
+
+        if (timeout > MAX_POLL_TIMEOUT_MS) {
+            response.onError(Status.INVALID_ARGUMENT
+                    .withDescription(""longpoll timeout cannot be longer than "" + MAX_POLL_TIMEOUT_MS + ""ms"")
+                    .asRuntimeException()
+            );
+            return;
+        }
 
-            @Override
-            public void onCompleted() {
-                responseObserver.onCompleted();
-            }
-        };
+        try {
+            List<Task> polledTasks = taskService.poll(req.getTaskType(), req.getWorkerId(), req.getDomain(), count, timeout);
+            polledTasks.stream().map(protoMapper::toProto).forEach(response::onNext);
+        } catch (Exception e) {
+            grpcHelper.onError(response, e);
+        }
     }
 
     @Override
diff --git a/grpc/src/main/proto/grpc/task_service.proto b/grpc/src/main/proto/grpc/task_service.proto
index 1dc98c54a..1caef0e10 100644
--- a/grpc/src/main/proto/grpc/task_service.proto
+++ b/grpc/src/main/proto/grpc/task_service.proto
@@ -14,8 +14,8 @@ service TaskService {
     // GET /poll/{tasktype}
     rpc Poll(PollRequest) returns (conductor.proto.Task);
 
-    // GRPC-only
-    rpc PollStream(stream StreamingPollRequest) returns (stream conductor.proto.Task);
+    // /poll/batch/{tasktype}
+    rpc BatchPoll(BatchPollRequest) returns (stream conductor.proto.Task);
 
     // GET /in_progress/{tasktype}
     rpc GetTasksInProgress(TasksInProgressRequest) returns (TasksInProgressResponse);
@@ -57,12 +57,12 @@ message PollRequest {
     string domain = 3;
 }
 
-message",Implement batchPoll,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
index 7ec87b722..d912d12c1 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/MetadataClient.java
@@ -15,6 +15,7 @@ public class MetadataClient extends ClientBase {
 
     public MetadataClient(String address, int port) {
         super(address, port);
+        this.stub = MetadataServiceGrpc.newBlockingStub(this.channel);
     }
 
     /**
diff --git a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
index b9b155cd7..d9b170704 100644
--- a/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
+++ b/grpc-client/src/main/java/com/netflix/conductor/client/grpc/TaskClient.java
@@ -1,6 +1,8 @@
 package com.netflix.conductor.client.grpc;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Lists;
 import com.netflix.conductor.common.metadata.tasks.Task;
 import com.netflix.conductor.common.metadata.tasks.TaskExecLog;
 import com.netflix.conductor.common.metadata.tasks.TaskResult;
@@ -9,8 +11,7 @@ import com.netflix.conductor.grpc.TaskServicePb;
 import com.netflix.conductor.proto.TaskPb;
 import org.apache.commons.lang3.StringUtils;
 
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class TaskClient extends ClientBase {
@@ -44,6 +45,46 @@ public class TaskClient extends ClientBase {
         return protoMapper.fromProto(task);
     }
 
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return List of tasks awaiting to be executed.
+     */
+    public List<Task> batchPollTasksByTaskType(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        return Lists.newArrayList(batchPollTasksByTaskTypeAsync(taskType, workerId, count, timeoutInMillisecond));
+    }
+
+    /**
+     * Perform a batch poll for tasks by task type. Batch size is configurable by count.
+     * Returns an iterator that streams tasks as they become available through GRPC.
+     *
+     * @param taskType             Type of task to poll for
+     * @param workerId             Name of the client worker. Used for logging.
+     * @param count                Maximum number of tasks to be returned. Actual number of tasks returned can be less than this number.
+     * @param timeoutInMillisecond Long poll wait timeout.
+     * @return Iterator of tasks awaiting to be executed.
+     */
+    public Iterator<Task> batchPollTasksByTaskTypeAsync(String taskType, String workerId, int count, int timeoutInMillisecond) {
+        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), ""Task type cannot be blank"");
+        Preconditions.checkArgument(StringUtils.isNotBlank(workerId), ""Worker id cannot be blank"");
+        Preconditions.checkArgument(count > 0, ""Count must be greater than 0"");
+
+        Iterator<TaskPb.Task> it = stub.batchPoll(
+                TaskServicePb.BatchPollRequest.newBuilder()
+                        .setTaskType(taskType)
+                        .setWorkerId(workerId)
+                        .setCount(count)
+                        .setTimeout(timeoutInMillisecond)
+                        .build()
+        );
+
+        return Iterators.transform(it, protoMapper::fromProto);
+    }
+
     /**
      * Retrieve pending tasks by type
      *
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
index 3ae78d3d0..f32e996a1 100644
--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/TaskServiceImpl.java
@@ -35,6 +35,7 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
 
     private static final int MAX_TASK_COUNT = 100;
     private static final int POLL_TIMEOUT_MS = 100;
+    private static final int MAX_POLL_TIMEOUT_MS = 5000;
 
     private final ExecutionService taskService;
     private final QueueDAO queues;
@@ -60,41 +61,24 @@ public class TaskServiceImpl extends TaskServiceGrpc.TaskServiceImplBase {
     }
 
     @Override
-    public StreamObserver<TaskServicePb.StreamingPollRequest> pollStream(StreamObserver<TaskPb.Task> observer) {
-        final ServerCallStreamObserver<TaskPb.Task> responseObserver =
-                (ServerCallStreamObserver<TaskPb.Task>) observer;
-
-        return new StreamObserver<TaskServicePb.StreamingPollRequest>() {
-            @Override
-            public void onNext(TaskServicePb.StreamingPollRequest req) {
-                try {
-                    for (TaskResultPb.TaskResult result : req.getCompletedList()) {
-                        TaskResult task = protoMapper.fromProto(result);
-                        taskService.updateTask(task);
-                    }
-
-                    List<Task> newTasks = taskService.poll(
-                            req.getTaskType(), req.getWorkerId(), req.getDomain(),
-                            req.getCapacity(), POLL_TIMEOUT_MS);
-
-                    for (Task task : newTasks) {
-                        responseObserver.onNext(protoMapper.toProto(task));
-                    }
-                } catch (Exception e) {
-                    grpcHelper.onError(observer, e);
-                }
-            }
-
-            @Override
-            public void onError(Throwable t) {
-                responseObserver.onError(t);
-            }
+    public void batchPoll(TaskServicePb.BatchPollRequest req, StreamObserver<TaskPb.Task> response) {
+        final int count = (req.getCount() == 0) ? 1 : req.getCount();
+        final int timeout = (req.getTimeout() == 0) ? POLL_TIMEOUT_MS : req.getTimeout();
+
+        if (timeout > MAX_POLL_TIMEOUT_MS) {
+            response.onError(Status.INVALID_ARGUMENT
+                    .withDescription(""longpoll timeout cannot be longer than "" + MAX_POLL_TIMEOUT_MS + ""ms"")
+                    .asRuntimeException()
+            );
+            return;
+        }
 
-            @Override
-            public void onCompleted() {
-                responseObserver.onCompleted();
-            }
-        };
+        try {
+            List<Task> polledTasks = taskService.poll(req.getTaskType(), req.getWorkerId(), req.getDomain(), count, timeout);
+            polledTasks.stream().map(protoMapper::toProto).forEach(response::onNext);
+        } catch (Exception e) {
+            grpcHelper.onError(response, e);
+        }
     }
 
     @Override
diff --git a/grpc/src/main/proto/grpc/task_service.proto b/grpc/src/main/proto/grpc/task_service.proto
index 1dc98c54a..1caef0e10 100644
--- a/grpc/src/main/proto/grpc/task_service.proto
+++ b/grpc/src/main/proto/grpc/task_service.proto
@@ -14,8 +14,8 @@ service TaskService {
     // GET /poll/{tasktype}
     rpc Poll(PollRequest) returns (conductor.proto.Task);
 
-    // GRPC-only
-    rpc PollStream(stream StreamingPollRequest) returns (stream conductor.proto.Task);
+    // /poll/batch/{tasktype}
+    rpc BatchPoll(BatchPollRequest) returns (stream conductor.proto.Task);
 
     // GET /in_progress/{tasktype}
     rpc GetTasksInProgress(TasksInProgressRequest) returns (TasksInProgressResponse);
@@ -57,12 +57,12 @@ message PollRequest {
     string domain = 3;
 }
 
-message [/INST]  Based on the diff, it seems that the `BatchPoll` method has been added to the `TaskService` service in the updated version of the protobuf file. This method takes a `BatchPollRequest` message as input and"
"diff --git a/base/src/com/thoughtworks/go/util/FileDigester.java b/base/src/com/thoughtworks/go/util/FileDigester.java
index a49f6b6d42..c8f2b95650 100644
--- a/base/src/com/thoughtworks/go/util/FileDigester.java
+++ b/base/src/com/thoughtworks/go/util/FileDigester.java
@@ -16,18 +16,15 @@
 
 package com.thoughtworks.go.util;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-
+import org.apache.commons.codec.CharEncoding;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.comparator.NameFileComparator;
 import org.apache.commons.io.output.NullOutputStream;
 
-import static com.thoughtworks.go.util.ExceptionUtils.bomb;
+import java.io.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
 
 public class FileDigester {
     private final InputStream input;
@@ -75,6 +72,19 @@ public class FileDigester {
         }
     }
 
+    public static String md5DigestOfFolderContent(File directory) throws IOException {
+        File[] files = directory.listFiles();
+        Arrays.sort(files, NameFileComparator.NAME_COMPARATOR);
+        StringBuilder md5 = new StringBuilder();
+        for (File file : files) {
+            if (file.isDirectory())
+                md5.append(md5DigestOfFolderContent(file));
+            else
+                md5.append(md5DigestOfFile(file));
+        }
+        return md5DigestOfStream(new ByteArrayInputStream(md5.toString().getBytes(CharEncoding.UTF_8)));
+    }
+
     public static String md5DigestOfStream(InputStream stream) throws IOException {
         return copyAndDigest(stream, new NullOutputStream());
     }
diff --git a/base/test/com/thoughtworks/go/util/FileDigesterTest.java b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
index 62de31eddb..17bd7f4819 100644
--- a/base/test/com/thoughtworks/go/util/FileDigesterTest.java
+++ b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
@@ -16,7 +16,11 @@
 
 package com.thoughtworks.go.util;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,20 +30,45 @@ import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 public class FileDigesterTest {
-    private File createFileWithSampleData() throws IOException {
-        File tempFile = TestFileUtil.createTempFile(""test.txt"");
-        FileUtil.writeContentToFile(""sample data"", tempFile);
-        return tempFile;
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+
+    @Before
+    public void setUp() throws Exception {
+        temporaryFolder.create();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        temporaryFolder.delete();
     }
 
     @Test
     public void shouldReturnSameMd5ForSameData() throws Exception {
-        String digest1 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        File fileWithSampleData = createFileWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        String digest2 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(digest1, is(digest2));
+    }
+
+    @Test
+    public void shouldReturnSameMd5ForFolderContents() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
-        String digest2 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        String digest2 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(digest1, is(digest2));
     }
 
+    @Test
+    public void shouldReturnConsistentMd5BySortingTheFileList() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        assertThat(digest1, is(""FJ9Q0KO4KE5ukH6Y7r1FIQ==""));
+    }
+
     @Test
     public void shouldThrowExceptionIfITryToGetMd5WithoutDigestingFile() {
         FileDigester fileDigester = new FileDigester(null, null);
@@ -49,4 +78,20 @@ public class FileDigesterTest {
         } catch (Exception ignored) {
         }
     }
+
+    private File createFileWithSampleData() throws IOException {
+        File tempFile = temporaryFolder.newFile(""test.txt"");
+        FileUtil.writeContentToFile(""sample data"", tempFile);
+        return tempFile;
+    }
+
+    private File createFolderWithSampleData() throws IOException {
+        File firstPlugin = temporaryFolder.newFile(""first-plugin"");
+        File secondPlugin = temporaryFolder.newFile(""second-plugin"");
+        File thirdPlugin = temporaryFolder.newFile(""third-plugin"");
+        FileUtil.writeContentToFile(""sample plugin for first plugin"", firstPlugin);
+        FileUtil.writeContentToFile(""sample plugin for third plugin"", secondPlugin);
+        FileUtil.writeContentToFile(""sample plugin for second plugin"", thirdPlugin);
+        return temporaryFolder.getRoot();
+    }
 }
diff --git a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
index c19ceae5b6..7975597a5d 100644
--- a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
+++ b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
@@ -22,16 +22,18 @@ import com.thoughtworks.go.util.ZipUtil;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.IOException;
+import java.io.FileWriter;
 
 import static com.thoughtworks.go.util.FileDigester.md5DigestOfFile;
+import static com.thoughtworks.go.util.FileDigester.md5DigestOfFolderContent;
 
 @Component
 public class PluginsZip {
     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PluginsZip.class);
     private ZipUtil zipUtil;
-    private String md5DigestOfFile;
+    private String md5DigestOfPlugins;
     private final File destZipFile;
     private final File bundledPlugins;
     private final File externalPlugins;
@@ -53,16 +55,30 @@ public class PluginsZip {
         try {
             ZipBuilder zipBuilder = zipUtil.zipContentsOfMultipleFolders(destZipFile, true);
             zipBuilder.add(""bundled"", bundledPlugins).add(""external"", externalPlugins).done();
-            md5DigestOfFile = md5DigestOfFile(destZipFile);
+            md5DigestOfPlugins = computeMd5DigestOfPlugins();
         } catch (Exception e) {
             LOG.error(""Could not create zip of plugins for agent to download."", e);
         }
     }
 
-    public String md5() throws IOException {
-        if (md5DigestOfFile == null) {
-            return md5DigestOfFile(destZipFile);
+    public String md5() {
+        if (md5DigestOfPlugins == null) {
+            return computeMd5DigestOfPlugins();
+        }
+        return md5DigestOfPlugins;
+    }
+
+    private String computeMd5DigestOfPlugins() {
+        try {
+            String digestOfBundledFolder = md5DigestOfFolderContent(bundledPlugins);
+            String digestOfExternalFolder = md5DigestOfFolderContent(externalPlugins);
+            File tempFileToStoreMd5 = File.createTempFile(""tempFileToStoreMd5"", "".txt"");
+            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileToStoreMd5));
+            writer.write(String.format(""digestOfBundledFolder:"" + digestOfBundledFolder + ""\tdigestOfExternalFolder:"" + digestOfExternalFolder));
+            writer.close();
+            return md5DigestOfFile(tempFileToStoreMd5);
+        } catch (Exception e) {
+            throw new RuntimeException(String.format(""Could not compute md5 of plugins. Exception occurred: %s"", e.getStackTrace()));
         }
-        return md5DigestOfFile;
     }
 }
diff --git a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
index ba52e244b7..40a2bdcb3c 100644
--- a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
+++ b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
@@ -27,7 +27,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.util.zip.ZipFile;
 
 import static com.thoughtworks.go.util.SystemEnvironment.*;
@@ -112,8 +111,8 @@ public class PluginsZipTest {
 
     @Test
     public void shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile() throws Exception {
-        expectedException.expect(FileNotFoundException.class);
-        expectedException.expectMessage(containsString(""go-plugins-all.zip (No such file or directory)""));
+        expectedException.expect(RuntimeException.class);
+        expectedException.expectMessage(containsString(""Could not compute md5 of plugins. Exception occurred:""));
 
         temporaryFolder.delete();
         pluginsZip.md5();","Changed the way md5 was checked . . * Due to plugins zip being recreated on every server restart , the md5 changed when the server was migrated to a new machine .","[INST] Generate a meaningful git commit message from the following diff:
diff --git a/base/src/com/thoughtworks/go/util/FileDigester.java b/base/src/com/thoughtworks/go/util/FileDigester.java
index a49f6b6d42..c8f2b95650 100644
--- a/base/src/com/thoughtworks/go/util/FileDigester.java
+++ b/base/src/com/thoughtworks/go/util/FileDigester.java
@@ -16,18 +16,15 @@
 
 package com.thoughtworks.go.util;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-
+import org.apache.commons.codec.CharEncoding;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.comparator.NameFileComparator;
 import org.apache.commons.io.output.NullOutputStream;
 
-import static com.thoughtworks.go.util.ExceptionUtils.bomb;
+import java.io.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
 
 public class FileDigester {
     private final InputStream input;
@@ -75,6 +72,19 @@ public class FileDigester {
         }
     }
 
+    public static String md5DigestOfFolderContent(File directory) throws IOException {
+        File[] files = directory.listFiles();
+        Arrays.sort(files, NameFileComparator.NAME_COMPARATOR);
+        StringBuilder md5 = new StringBuilder();
+        for (File file : files) {
+            if (file.isDirectory())
+                md5.append(md5DigestOfFolderContent(file));
+            else
+                md5.append(md5DigestOfFile(file));
+        }
+        return md5DigestOfStream(new ByteArrayInputStream(md5.toString().getBytes(CharEncoding.UTF_8)));
+    }
+
     public static String md5DigestOfStream(InputStream stream) throws IOException {
         return copyAndDigest(stream, new NullOutputStream());
     }
diff --git a/base/test/com/thoughtworks/go/util/FileDigesterTest.java b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
index 62de31eddb..17bd7f4819 100644
--- a/base/test/com/thoughtworks/go/util/FileDigesterTest.java
+++ b/base/test/com/thoughtworks/go/util/FileDigesterTest.java
@@ -16,7 +16,11 @@
 
 package com.thoughtworks.go.util;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,20 +30,45 @@ import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 public class FileDigesterTest {
-    private File createFileWithSampleData() throws IOException {
-        File tempFile = TestFileUtil.createTempFile(""test.txt"");
-        FileUtil.writeContentToFile(""sample data"", tempFile);
-        return tempFile;
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+
+    @Before
+    public void setUp() throws Exception {
+        temporaryFolder.create();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        temporaryFolder.delete();
     }
 
     @Test
     public void shouldReturnSameMd5ForSameData() throws Exception {
-        String digest1 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        File fileWithSampleData = createFileWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        String digest2 = FileDigester.md5DigestOfFile(fileWithSampleData);
+        assertThat(digest1, is(digest2));
+    }
+
+    @Test
+    public void shouldReturnSameMd5ForFolderContents() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
-        String digest2 = FileDigester.md5DigestOfFile(createFileWithSampleData());
+        String digest2 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
         assertThat(digest1, is(digest2));
     }
 
+    @Test
+    public void shouldReturnConsistentMd5BySortingTheFileList() throws Exception {
+        File folderWithSampleData = createFolderWithSampleData();
+        String digest1 = FileDigester.md5DigestOfFolderContent(folderWithSampleData);
+        assertThat(""md5 should not be empty"", digest1.length() > 0, is(true));
+        assertThat(digest1, is(""FJ9Q0KO4KE5ukH6Y7r1FIQ==""));
+    }
+
     @Test
     public void shouldThrowExceptionIfITryToGetMd5WithoutDigestingFile() {
         FileDigester fileDigester = new FileDigester(null, null);
@@ -49,4 +78,20 @@ public class FileDigesterTest {
         } catch (Exception ignored) {
         }
     }
+
+    private File createFileWithSampleData() throws IOException {
+        File tempFile = temporaryFolder.newFile(""test.txt"");
+        FileUtil.writeContentToFile(""sample data"", tempFile);
+        return tempFile;
+    }
+
+    private File createFolderWithSampleData() throws IOException {
+        File firstPlugin = temporaryFolder.newFile(""first-plugin"");
+        File secondPlugin = temporaryFolder.newFile(""second-plugin"");
+        File thirdPlugin = temporaryFolder.newFile(""third-plugin"");
+        FileUtil.writeContentToFile(""sample plugin for first plugin"", firstPlugin);
+        FileUtil.writeContentToFile(""sample plugin for third plugin"", secondPlugin);
+        FileUtil.writeContentToFile(""sample plugin for second plugin"", thirdPlugin);
+        return temporaryFolder.getRoot();
+    }
 }
diff --git a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
index c19ceae5b6..7975597a5d 100644
--- a/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
+++ b/plugin-infra/go-plugin-infra/src/com/thoughtworks/go/plugin/infra/commons/PluginsZip.java
@@ -22,16 +22,18 @@ import com.thoughtworks.go.util.ZipUtil;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.IOException;
+import java.io.FileWriter;
 
 import static com.thoughtworks.go.util.FileDigester.md5DigestOfFile;
+import static com.thoughtworks.go.util.FileDigester.md5DigestOfFolderContent;
 
 @Component
 public class PluginsZip {
     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PluginsZip.class);
     private ZipUtil zipUtil;
-    private String md5DigestOfFile;
+    private String md5DigestOfPlugins;
     private final File destZipFile;
     private final File bundledPlugins;
     private final File externalPlugins;
@@ -53,16 +55,30 @@ public class PluginsZip {
         try {
             ZipBuilder zipBuilder = zipUtil.zipContentsOfMultipleFolders(destZipFile, true);
             zipBuilder.add(""bundled"", bundledPlugins).add(""external"", externalPlugins).done();
-            md5DigestOfFile = md5DigestOfFile(destZipFile);
+            md5DigestOfPlugins = computeMd5DigestOfPlugins();
         } catch (Exception e) {
             LOG.error(""Could not create zip of plugins for agent to download."", e);
         }
     }
 
-    public String md5() throws IOException {
-        if (md5DigestOfFile == null) {
-            return md5DigestOfFile(destZipFile);
+    public String md5() {
+        if (md5DigestOfPlugins == null) {
+            return computeMd5DigestOfPlugins();
+        }
+        return md5DigestOfPlugins;
+    }
+
+    private String computeMd5DigestOfPlugins() {
+        try {
+            String digestOfBundledFolder = md5DigestOfFolderContent(bundledPlugins);
+            String digestOfExternalFolder = md5DigestOfFolderContent(externalPlugins);
+            File tempFileToStoreMd5 = File.createTempFile(""tempFileToStoreMd5"", "".txt"");
+            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileToStoreMd5));
+            writer.write(String.format(""digestOfBundledFolder:"" + digestOfBundledFolder + ""\tdigestOfExternalFolder:"" + digestOfExternalFolder));
+            writer.close();
+            return md5DigestOfFile(tempFileToStoreMd5);
+        } catch (Exception e) {
+            throw new RuntimeException(String.format(""Could not compute md5 of plugins. Exception occurred: %s"", e.getStackTrace()));
         }
-        return md5DigestOfFile;
     }
 }
diff --git a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
index ba52e244b7..40a2bdcb3c 100644
--- a/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
+++ b/plugin-infra/go-plugin-infra/test/com/thoughtworks/go/plugin/infra/commons/PluginsZipTest.java
@@ -27,7 +27,6 @@ import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.util.zip.ZipFile;
 
 import static com.thoughtworks.go.util.SystemEnvironment.*;
@@ -112,8 +111,8 @@ public class PluginsZipTest {
 
     @Test
     public void shouldThrowExceptionWhileRetrievingChecksumOfUnavailableFile() throws Exception {
-        expectedException.expect(FileNotFoundException.class);
-        expectedException.expectMessage(containsString(""go-plugins-all.zip (No such file or directory)""));
+        expectedException.expect(RuntimeException.class);
+        expectedException.expectMessage(containsString(""Could not compute md5 of plugins. Exception occurred:""));
 
         temporaryFolder.delete();
         pluginsZip.md5(); [/INST]  Here are some meaningful commit messages based on the diff output you provided:

1. `FileDigester: fixed issue where digest of empty folder was returning empty string`
This commit message suggests that the `FileDigester`"
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
index 543bf64e8c..36c0b8d222 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
@@ -292,9 +292,9 @@ public class ProtoCommon {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
     ImmutableList<Artifact> srcs = ruleContext.getPrerequisiteArtifacts(""srcs"", TARGET).list();
     if (srcs.isEmpty()) {
-      for (ProtoSupportDataProvider provider :
-          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSupportDataProvider.class)) {
-        result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+      for (ProtoSourcesProvider provider :
+          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSourcesProvider.class)) {
+        result.addTransitive(provider.getProtosInDirectDeps());
       }
     } else {
       for (ProtoSourcesProvider provider :
@@ -312,9 +312,9 @@ public class ProtoCommon {
   @Nullable
   public static NestedSet<Artifact> computeProtosInExportedDeps(RuleContext ruleContext) {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
-    for (ProtoSupportDataProvider provider :
-        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSupportDataProvider.class)) {
-      result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+    for (ProtoSourcesProvider provider :
+        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSourcesProvider.class)) {
+      result.addTransitive(provider.getProtosInDirectDeps());
     }
     return result.build();
   }",Remove references to SupportData everywhere except in CcProtoAspect . . RELNOTES : None . . PiperOrigin - RevId : 222216840,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
index 543bf64e8c..36c0b8d222 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCommon.java
@@ -292,9 +292,9 @@ public class ProtoCommon {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
     ImmutableList<Artifact> srcs = ruleContext.getPrerequisiteArtifacts(""srcs"", TARGET).list();
     if (srcs.isEmpty()) {
-      for (ProtoSupportDataProvider provider :
-          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSupportDataProvider.class)) {
-        result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+      for (ProtoSourcesProvider provider :
+          ruleContext.getPrerequisites(""deps"", TARGET, ProtoSourcesProvider.class)) {
+        result.addTransitive(provider.getProtosInDirectDeps());
       }
     } else {
       for (ProtoSourcesProvider provider :
@@ -312,9 +312,9 @@ public class ProtoCommon {
   @Nullable
   public static NestedSet<Artifact> computeProtosInExportedDeps(RuleContext ruleContext) {
     NestedSetBuilder<Artifact> result = NestedSetBuilder.stableOrder();
-    for (ProtoSupportDataProvider provider :
-        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSupportDataProvider.class)) {
-      result.addTransitive(provider.getSupportData().getProtosInDirectDeps());
+    for (ProtoSourcesProvider provider :
+        ruleContext.getPrerequisites(""exports"", TARGET, ProtoSourcesProvider.class)) {
+      result.addTransitive(provider.getProtosInDirectDeps());
     }
     return result.build();
   } [/INST]  Here is a meaningful commit message based on the diff:

`Fix proto common: handle empty srcs list correctly`

The commit message explains the change made in the commit, which is to fix an issue with handling an"
"diff --git a/.travis.yml b/.travis.yml
index 171280c26..f0586c145 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -13,7 +13,7 @@ deploy:
     api_key:
       secure: Cv5wFtWt62/A24EvSEQvMow7gKPbZ3oATEFPuSghhB2TQz1dA40Zee3Qvk4LFlpLrhYo4K0ZSczCZRGpR+hCd8+Dpww52bheYEvWuh3ZQfvu/fXtEx2j5PwP1qMpmIgSxETV/gkD7l9FImdh0VzktYiAvQfmi0bEocG9/D4QwjFpNat7iwBdcMiw1MvAygpdIWRsjiw0RKlB2mWarmoHhQ7Gu7qlU3j50uaEvcrtmU0pBUPggNQwQRv32i9NPvNFxrqqlUjDLIS8JFea99zCkp8BwYqbEvBIMzd+Qip1/stLJJA3+cDUClbsDtg8rAVetzpOrdLEEBmqShFe5MDl2yEHcsgpN9CFsyTaUfvB3P3rVjizvycMm42IsUkXQiarm5xTQ/TIA8Rd8AHiSKuweNCg1Fd5SFaRtKy8JVLXuxyfUccmyje6hhz2L4lS2Wfj3mAG7sqZUCXhWP79EKdGkiPOjKv4CwXEKmuH3BMVqPlNUZJr9Eg3sV1FG0h2l+MVOOnR635qdUbb49sYojYxVruMLX0BH1c4ZCu230m8CUoWA1Em1QNI75ya7+9Y5T6AsgWDVpBvdUo9fWNbdp+VQ0GskFQsJD5wtnxbcbHeFiERAgGBm7z6qt9u9LrQpBH+dsW52ADvYsu3L4nQEa+sdMHwTTwmGY+iUvsxu0DqxGg=
     file:
-    - desktop/build/libs/desktop-release.jar
+    - desktop/build/libs/Mindustry.jar
     - server/build/libs/server-release.jar
     on:
       repo: Anuken/Mindustry
diff --git a/README.md b/README.md
index 791a99452..b0ec7c49e 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ If the terminal returns `Permission denied` or `Command not found` on Mac/Linux,
 ---
 
 Gradle may take up to several minutes to download files. Be patient. <br>
-After building, the output .JAR file should be in `/desktop/build/libs/desktop-release.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
+After building, the output .JAR file should be in `/desktop/build/libs/Mindustry.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
 
 ### Downloads
 
diff --git a/desktop/build.gradle b/desktop/build.gradle
index 26392656d..db32ac459 100644
--- a/desktop/build.gradle
+++ b/desktop/build.gradle
@@ -32,35 +32,32 @@ task run(dependsOn: classes, type: JavaExec){
     }
 }
 
-[""Windows"", ""Linux"", ""Mac"", ""All""].each{ target ->
-    task ""dist$target""(type: Jar, dependsOn: classes){
-        from files(sourceSets.main.output.classesDirs)
-        from files(sourceSets.main.output.resourcesDir)
-        from {configurations.compile.collect {zipTree(it)}}
-        from files(project.assetsDir)
-
-        if(target.contains(""windows"")) exclude('**.so', ""**.dylib"")
-        if(target == ""mac"") exclude('**.so', ""**.dll"")
-        if(target == ""linux"") exclude('**.dll', ""**.dylib"")
-        archiveName = ""$appName-${target}.jar""
-
-        manifest{
-            attributes 'Main-Class': project.mainClassName
-        }
+
+task dist(type: Jar, dependsOn: classes){
+    from files(sourceSets.main.output.classesDirs)
+    from files(sourceSets.main.output.resourcesDir)
+    from {configurations.compile.collect {zipTree(it)}}
+    from files(project.assetsDir)
+
+    archiveName = ""${appName}.jar""
+
+    manifest{
+        attributes 'Main-Class': project.mainClassName
     }
 }
 
+
 PackrConfig.Platform.values().each{ platform ->
     task ""packr${platform.toString()}""{
         def platformName = platform.toString().replace('64', '').replace('32', '').replace('MacOS', 'Mac')
 
-        dependsOn ""dist$platformName""
+        dependsOn dist
 
         doLast{
             copy{
                 into ""build/packr/""
-                rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                from ""build/libs/$appName-${platformName}.jar""
+                rename(""${appName}.jar"", ""desktop.jar"")
+                from ""build/libs/${appName}.jar""
             }
 
             delete{
@@ -75,8 +72,8 @@ PackrConfig.Platform.values().each{ platform ->
 
                 copy{
                     into ""build/packr/output/jre""
-                    rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                    from ""build/libs/$appName-${platformName}.jar""
+                    rename(""${appName}.jar"", ""desktop.jar"")
+                    from ""build/libs/${appName}.jar""
                 }
             }else{
                 def config = new PackrConfig()",Removed pointless platform - specific dists,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/.travis.yml b/.travis.yml
index 171280c26..f0586c145 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -13,7 +13,7 @@ deploy:
     api_key:
       secure: Cv5wFtWt62/A24EvSEQvMow7gKPbZ3oATEFPuSghhB2TQz1dA40Zee3Qvk4LFlpLrhYo4K0ZSczCZRGpR+hCd8+Dpww52bheYEvWuh3ZQfvu/fXtEx2j5PwP1qMpmIgSxETV/gkD7l9FImdh0VzktYiAvQfmi0bEocG9/D4QwjFpNat7iwBdcMiw1MvAygpdIWRsjiw0RKlB2mWarmoHhQ7Gu7qlU3j50uaEvcrtmU0pBUPggNQwQRv32i9NPvNFxrqqlUjDLIS8JFea99zCkp8BwYqbEvBIMzd+Qip1/stLJJA3+cDUClbsDtg8rAVetzpOrdLEEBmqShFe5MDl2yEHcsgpN9CFsyTaUfvB3P3rVjizvycMm42IsUkXQiarm5xTQ/TIA8Rd8AHiSKuweNCg1Fd5SFaRtKy8JVLXuxyfUccmyje6hhz2L4lS2Wfj3mAG7sqZUCXhWP79EKdGkiPOjKv4CwXEKmuH3BMVqPlNUZJr9Eg3sV1FG0h2l+MVOOnR635qdUbb49sYojYxVruMLX0BH1c4ZCu230m8CUoWA1Em1QNI75ya7+9Y5T6AsgWDVpBvdUo9fWNbdp+VQ0GskFQsJD5wtnxbcbHeFiERAgGBm7z6qt9u9LrQpBH+dsW52ADvYsu3L4nQEa+sdMHwTTwmGY+iUvsxu0DqxGg=
     file:
-    - desktop/build/libs/desktop-release.jar
+    - desktop/build/libs/Mindustry.jar
     - server/build/libs/server-release.jar
     on:
       repo: Anuken/Mindustry
diff --git a/README.md b/README.md
index 791a99452..b0ec7c49e 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,7 @@ If the terminal returns `Permission denied` or `Command not found` on Mac/Linux,
 ---
 
 Gradle may take up to several minutes to download files. Be patient. <br>
-After building, the output .JAR file should be in `/desktop/build/libs/desktop-release.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
+After building, the output .JAR file should be in `/desktop/build/libs/Mindustry.jar` for desktop builds, and in `/server/build/libs/server-release.jar` for server builds.
 
 ### Downloads
 
diff --git a/desktop/build.gradle b/desktop/build.gradle
index 26392656d..db32ac459 100644
--- a/desktop/build.gradle
+++ b/desktop/build.gradle
@@ -32,35 +32,32 @@ task run(dependsOn: classes, type: JavaExec){
     }
 }
 
-[""Windows"", ""Linux"", ""Mac"", ""All""].each{ target ->
-    task ""dist$target""(type: Jar, dependsOn: classes){
-        from files(sourceSets.main.output.classesDirs)
-        from files(sourceSets.main.output.resourcesDir)
-        from {configurations.compile.collect {zipTree(it)}}
-        from files(project.assetsDir)
-
-        if(target.contains(""windows"")) exclude('**.so', ""**.dylib"")
-        if(target == ""mac"") exclude('**.so', ""**.dll"")
-        if(target == ""linux"") exclude('**.dll', ""**.dylib"")
-        archiveName = ""$appName-${target}.jar""
-
-        manifest{
-            attributes 'Main-Class': project.mainClassName
-        }
+
+task dist(type: Jar, dependsOn: classes){
+    from files(sourceSets.main.output.classesDirs)
+    from files(sourceSets.main.output.resourcesDir)
+    from {configurations.compile.collect {zipTree(it)}}
+    from files(project.assetsDir)
+
+    archiveName = ""${appName}.jar""
+
+    manifest{
+        attributes 'Main-Class': project.mainClassName
     }
 }
 
+
 PackrConfig.Platform.values().each{ platform ->
     task ""packr${platform.toString()}""{
         def platformName = platform.toString().replace('64', '').replace('32', '').replace('MacOS', 'Mac')
 
-        dependsOn ""dist$platformName""
+        dependsOn dist
 
         doLast{
             copy{
                 into ""build/packr/""
-                rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                from ""build/libs/$appName-${platformName}.jar""
+                rename(""${appName}.jar"", ""desktop.jar"")
+                from ""build/libs/${appName}.jar""
             }
 
             delete{
@@ -75,8 +72,8 @@ PackrConfig.Platform.values().each{ platform ->
 
                 copy{
                     into ""build/packr/output/jre""
-                    rename(""$appName-${platformName}.jar"", ""desktop.jar"")
-                    from ""build/libs/$appName-${platformName}.jar""
+                    rename(""${appName}.jar"", ""desktop.jar"")
+                    from ""build/libs/${appName}.jar""
                 }
             }else{
                 def config = new PackrConfig() [/INST]  This is a Git diff output, showing the changes between two commits (a and b) in the `travis.yml` file. Here's a breakdown of the changes:

1. In the `travis.yml"
"diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
index d8a8b3bac7..d7de792531 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
@@ -48,6 +48,7 @@ import static org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 import static org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 import static org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 
+import java.io.StringReader;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -62,6 +63,7 @@ import org.jooq.Result;
 import org.jooq.SQLDialect;
 import org.jooq.SortOrder;
 import org.jooq.impl.DSL;
+import org.jooq.tools.csv.CSVReader;
 import org.jooq.util.AbstractDatabase;
 import org.jooq.util.AbstractIndexDefinition;
 import org.jooq.util.ArrayDefinition;
@@ -69,6 +71,7 @@ import org.jooq.util.CatalogDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DefaultCheckConstraintDefinition;
 import org.jooq.util.DefaultDataTypeDefinition;
+import org.jooq.util.DefaultEnumDefinition;
 import org.jooq.util.DefaultIndexColumnDefinition;
 import org.jooq.util.DefaultRelations;
 import org.jooq.util.DefaultSequenceDefinition;
@@ -463,6 +466,61 @@ public class H2Database extends AbstractDatabase {
     @Override
     protected List<EnumDefinition> getEnums0() throws SQLException {
         List<EnumDefinition> result = new ArrayList<EnumDefinition>();
+
+        Result<Record4<String, String, String, String>> records = create()
+            .select(
+                Columns.TABLE_SCHEMA,
+                Columns.TABLE_NAME,
+                Columns.COLUMN_NAME,
+                Columns.COLUMN_TYPE)
+            .from(COLUMNS)
+            .where(
+                Columns.COLUMN_TYPE.like(""ENUM(%)%"").and(
+                Columns.TABLE_SCHEMA.in(getInputSchemata())))
+            .orderBy(
+                Columns.TABLE_SCHEMA.asc(),
+                Columns.TABLE_NAME.asc(),
+                Columns.COLUMN_NAME.asc())
+            .fetch();
+
+        for (Record record : records) {
+            SchemaDefinition schema = getSchema(record.get(Columns.TABLE_SCHEMA));
+
+            String table = record.get(Columns.TABLE_NAME);
+            String column = record.get(Columns.COLUMN_NAME);
+            String name = table + ""_"" + column;
+            String columnType = record.get(Columns.COLUMN_TYPE);
+
+            // [#1237] Don't generate enum classes for columns in MySQL tables
+            // that are excluded from code generation
+            TableDefinition tableDefinition = getTable(schema, table);
+            if (tableDefinition != null) {
+                ColumnDefinition columnDefinition = tableDefinition.getColumn(column);
+
+                if (columnDefinition != null) {
+
+                    // [#1137] Avoid generating enum classes for enum types that
+                    // are explicitly forced to another type
+                    if (getConfiguredForcedType(columnDefinition, columnDefinition.getType()) == null) {
+                        DefaultEnumDefinition definition = new DefaultEnumDefinition(schema, name, """");
+
+                        CSVReader reader = new CSVReader(
+                            new StringReader(columnType.replaceAll(""(^enum\\()|(\\).*$)"", """"))
+                           ,','  // Separator
+                           ,'\'' // Quote character
+                           ,true // Strict quotes
+                        );
+
+                        for (String string : reader.next()) {
+                            definition.addLiteral(string);
+                        }
+
+                        result.add(definition);
+                    }
+                }
+            }
+        }
+
         return result;
     }
 
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
index a52b2e6e0f..5f1110a3d8 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
@@ -38,7 +38,9 @@
 package org.jooq.util.h2;
 
 import static org.jooq.impl.DSL.choose;
+import static org.jooq.impl.DSL.falseCondition;
 import static org.jooq.impl.DSL.inline;
+import static org.jooq.impl.DSL.name;
 import static org.jooq.impl.DSL.zero;
 import static org.jooq.tools.StringUtils.defaultString;
 import static org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
@@ -49,6 +51,7 @@ import java.util.List;
 
 import org.jooq.Param;
 import org.jooq.Record;
+import org.jooq.exception.DataAccessException;
 import org.jooq.util.AbstractTableDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DataTypeDefinition;
@@ -65,6 +68,8 @@ import org.jooq.util.h2.information_schema.tables.Columns;
  */
 public class H2TableDefinition extends AbstractTableDefinition {
 
+    private static Boolean is1_4_197;
+
     public H2TableDefinition(SchemaDefinition schema, String name, String comment) {
         super(schema, name, comment);
     }
@@ -84,6 +89,7 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 Columns.COLUMN_NAME,
                 Columns.ORDINAL_POSITION,
                 Columns.TYPE_NAME,
+                is1_4_197() ? Columns.COLUMN_TYPE : inline("""").as(Columns.COLUMN_TYPE),
                 choose().when(Columns.NUMERIC_PRECISION.eq(maxP).and(Columns.NUMERIC_SCALE.eq(maxS)), zero())
                         .otherwise(Columns.CHARACTER_MAXIMUM_LENGTH).as(Columns.CHARACTER_MAXIMUM_LENGTH),
                 Columns.NUMERIC_PRECISION.decode(maxP, zero(), Columns.NUMERIC_PRECISION).as(Columns.NUMERIC_PRECISION),
@@ -113,7 +119,8 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 record.get(Columns.NUMERIC_PRECISION),
                 record.get(Columns.NUMERIC_SCALE),
                 record.get(Columns.IS_NULLABLE, boolean.class),
-                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT));
+                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT),
+                name(getSchema().getName(), getName() + ""_"" + record.get(Columns.COLUMN_NAME)));
 
             ColumnDefinition column = new DefaultColumnDefinition(
             	getDatabase().getTable(getSchema(), getName()),
@@ -128,4 +135,26 @@ public class H2TableDefinition extends AbstractTableDefinition {
 
         return result;
     }
+
+
+    boolean is1_4_197() {
+        if (is1_4_197 == null) {
+
+            // [#5874] The COLUMNS.COLUMN_TYPE column was introduced in H2 1.4.197
+            try {
+                create(true)
+                    .select(Columns.COLUMN_TYPE)
+                    .from(COLUMNS)
+                    .where(falseCondition())
+                    .fetch();
+
+                is1_4_197 = true;
+            }
+            catch (DataAccessException e) {
+                is1_4_197 = false;
+            }
+        }
+
+        return is1_4_197;
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
new file mode 100644
index 0000000000..51cbaff3ea
--- /dev/null
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
@@ -0,0 +1,60 @@
+/*
+ * This file is generated by jOOQ.
+ */
+package org.jooq.util.h2.information_schema;
+
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.annotation.Generated;
+
+import org.jooq.Schema;
+import org.jooq.impl.CatalogImpl;
+
+
+/**
+ * This class is generated by jOOQ.
+ */
+@Generated(
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
+)
+@SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
+public class DefaultCatalog extends CatalogImpl {
+
+    private static final long serialVersionUID = -1741973376;
+
+    /**
+     * The reference instance of <code></code>
+     */
+    public static final DefaultCatalog DEFAULT_CATALOG = new DefaultCatalog();
+
+    /**
+     * The schema <code>INFORMATION_SCHEMA</code>.
+     */
+    public final InformationSchema INFORMATION_SCHEMA = org.jooq.util.h2.information_schema.InformationSchema.INFORMATION_SCHEMA;
+
+    /**
+     * No further instances allowed
+     */
+    private DefaultCatalog() {
+        super("""");
+    }
+
+    @Override
+    public final List<Schema> getSchemas() {
+        List result = new ArrayList();
+        result.addAll(getSchemas0());
+        return result;
+    }
+
+    private final List<Schema> getSchemas0() {
+        return Arrays.<Schema>asList(
+            InformationSchema.INFORMATION_SCHEMA);
+    }
+}
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
index becb41f09b..bf63a6cd68 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -10,6 +10,7 @@ import java.util.List;
 
 import javax.annotation.Generated;
 
+import org.jooq.Catalog;
 import org.jooq.Table;
 import org.jooq.impl.SchemaImpl;
 import org.jooq.util.h2.information_schema.tables.Columns;
@@ -28,47 +29,106 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class InformationSchema extends SchemaImpl {
 
-	private static final long serialVersionUID = 1479405880;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA</code>
-	 */
-	public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
-
-	/**
-	 * No further instances allowed
-	 */
-	private InformationSchema() {
-		super(""INFORMATION_SCHEMA"");
-	}
-
-	@Override
-	public final List<Table<?>> getTables() {
-		List result = new ArrayList();
-		result.addAll(getTables0());
-		return result;
-	}
-
-	private final List<Table<?>> getTables0() {
-		return Arrays.<Table<?>>asList(
-			FunctionColumns.FUNCTION_COLUMNS,
-			Constraints.CONSTRAINTS,
-			CrossReferences.CROSS_REFERENCES,
-			Schemata.SCHEMATA,
-			FunctionAliases.FUNCTION_ALIASES,
-			Sequences.SEQUENCES,
-			TypeInfo.TYPE_INFO,
-			Indexes.INDEXES,
-			Columns.COLUMNS,
-			Tables.TABLES);
-	}
+    private static final long serialVersionUID = -426534875;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA</code>
+     */
+    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public final Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+
+    /**
+     * No further instances allowed
+     */
+    private InformationSchema() {
+        super(""INFORMATION_SCHEMA"", null);
+    }
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Catalog getCatalog() {
+        return DefaultCatalog.DEFAULT_CATALOG;
+    }
+
+    @Override
+    public final List<Table<?>> getTables() {
+        List result = new ArrayList();
+        result.addAll(getTables0());
+        return result;
+    }
+
+    private final List<Table<?>> getTables0() {
+        return Arrays.<Table<?>>asList(
+            Columns.COLUMNS,
+            Constraints.CONSTRAINTS,
+            CrossReferences.CROSS_REFERENCES,
+            FunctionAliases.FUNCTION_ALIASES,
+            FunctionColumns.FUNCTION_COLUMNS,
+            Indexes.INDEXES,
+            Schemata.SCHEMATA,
+            Sequences.SEQUENCES,
+            Tables.TABLES,
+            TypeInfo.TYPE_INFO);
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
index 484c4639c0..a2f4a8ca44 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -21,62 +21,62 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * Convenience access to all tables in INFORMATION_SCHEMA
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Tables {
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_COLUMNS
-	 */
-	public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CONSTRAINTS
-	 */
-	public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CROSS_REFERENCES
-	 */
-	public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SCHEMATA
-	 */
-	public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_ALIASES
-	 */
-	public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SEQUENCES
-	 */
-	public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TYPE_INFO
-	 */
-	public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
 
-	/**
-	 * The table INFORMATION_SCHEMA.INDEXES
-	 */
-	public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.COLUMNS
-	 */
-	public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TABLES
-	 */
-	public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
index 0aa0b00f98..bed402f803 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema.tables;
 
@@ -7,9 +7,12 @@ package org.jooq.util.h2.information_schema.tables;
 import javax.annotation.Generated;
 
 import org.jooq.Field;
+import org.jooq.Name;
 import org.jooq.Record;
+import org.jooq.Schema;
 import org.jooq.Table;
 import org.jooq.TableField;
+import org.jooq.impl.DSL;
 import org.jooq.impl.TableImpl;
 import org.jooq.util.h2.information_schema.InformationSchema;
 
@@ -18,157 +21,175 @@ import org.jooq.util.h2.information_schema.InformationSchema;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Columns extends TableImpl<Record> {
 
-	private static final long serialVersionUID = -1092445246;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
-	 */
-	public static final Columns COLUMNS = new Columns();
-
-	/**
-	 * The class holding records for this type
-	 */
-	@Override
-	public Class<Record> getRecordType() {
-		return Record.class;
-	}
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
-	 */
-	public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
-	 */
-	public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
-	 */
-	public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
-	 */
-	public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
-	 */
-	public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
-	 */
-	public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
-	 */
-	public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
-	 */
-	public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
-	 */
-	public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
-	 */
-	public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
-	 */
-	public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
-
-	/**
-	 * No further instances allowed
-	 */
-	private Columns() {
-		this(""COLUMNS"", null);
-	}
-
-	private Columns(String alias, Table<Record> aliased) {
-		this(alias, aliased, null);
-	}
-
-	private Columns(String alias, Table<Record> aliased, Field<?>[] parameters) {
-		super(alias, InformationSchema.INFORMATION_SCHEMA, aliased, parameters, """");
-	}
+    private static final long serialVersionUID = -443290501;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
+     */
+    public static final Columns COLUMNS = new Columns();
+
+    /**
+     * The class holding records for this type
+     */
+    @Override
+    public Class<Record> getRecordType() {
+        return Record.class;
+    }
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
+     */
+    public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
+     */
+    public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
+     */
+    public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
+     */
+    public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
+     */
+    public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
+     */
+    public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
+     */
+    public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
+     */
+    public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
+     */
+    public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
+     */
+    public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
+     */
+    public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
+     */
+    public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
+     */
+    public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
+     */
+    public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
+     */
+    public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
+     */
+    public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE</code>.
+     */
+    public static final TableField<Record, String> COLUMN_TYPE = createField(""COLUMN_TYPE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+",Add support for H2 \' s new enum types,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
index d8a8b3bac7..d7de792531 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2Database.java
@@ -48,6 +48,7 @@ import static org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 import static org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 import static org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 
+import java.io.StringReader;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -62,6 +63,7 @@ import org.jooq.Result;
 import org.jooq.SQLDialect;
 import org.jooq.SortOrder;
 import org.jooq.impl.DSL;
+import org.jooq.tools.csv.CSVReader;
 import org.jooq.util.AbstractDatabase;
 import org.jooq.util.AbstractIndexDefinition;
 import org.jooq.util.ArrayDefinition;
@@ -69,6 +71,7 @@ import org.jooq.util.CatalogDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DefaultCheckConstraintDefinition;
 import org.jooq.util.DefaultDataTypeDefinition;
+import org.jooq.util.DefaultEnumDefinition;
 import org.jooq.util.DefaultIndexColumnDefinition;
 import org.jooq.util.DefaultRelations;
 import org.jooq.util.DefaultSequenceDefinition;
@@ -463,6 +466,61 @@ public class H2Database extends AbstractDatabase {
     @Override
     protected List<EnumDefinition> getEnums0() throws SQLException {
         List<EnumDefinition> result = new ArrayList<EnumDefinition>();
+
+        Result<Record4<String, String, String, String>> records = create()
+            .select(
+                Columns.TABLE_SCHEMA,
+                Columns.TABLE_NAME,
+                Columns.COLUMN_NAME,
+                Columns.COLUMN_TYPE)
+            .from(COLUMNS)
+            .where(
+                Columns.COLUMN_TYPE.like(""ENUM(%)%"").and(
+                Columns.TABLE_SCHEMA.in(getInputSchemata())))
+            .orderBy(
+                Columns.TABLE_SCHEMA.asc(),
+                Columns.TABLE_NAME.asc(),
+                Columns.COLUMN_NAME.asc())
+            .fetch();
+
+        for (Record record : records) {
+            SchemaDefinition schema = getSchema(record.get(Columns.TABLE_SCHEMA));
+
+            String table = record.get(Columns.TABLE_NAME);
+            String column = record.get(Columns.COLUMN_NAME);
+            String name = table + ""_"" + column;
+            String columnType = record.get(Columns.COLUMN_TYPE);
+
+            // [#1237] Don't generate enum classes for columns in MySQL tables
+            // that are excluded from code generation
+            TableDefinition tableDefinition = getTable(schema, table);
+            if (tableDefinition != null) {
+                ColumnDefinition columnDefinition = tableDefinition.getColumn(column);
+
+                if (columnDefinition != null) {
+
+                    // [#1137] Avoid generating enum classes for enum types that
+                    // are explicitly forced to another type
+                    if (getConfiguredForcedType(columnDefinition, columnDefinition.getType()) == null) {
+                        DefaultEnumDefinition definition = new DefaultEnumDefinition(schema, name, """");
+
+                        CSVReader reader = new CSVReader(
+                            new StringReader(columnType.replaceAll(""(^enum\\()|(\\).*$)"", """"))
+                           ,','  // Separator
+                           ,'\'' // Quote character
+                           ,true // Strict quotes
+                        );
+
+                        for (String string : reader.next()) {
+                            definition.addLiteral(string);
+                        }
+
+                        result.add(definition);
+                    }
+                }
+            }
+        }
+
         return result;
     }
 
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
index a52b2e6e0f..5f1110a3d8 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/H2TableDefinition.java
@@ -38,7 +38,9 @@
 package org.jooq.util.h2;
 
 import static org.jooq.impl.DSL.choose;
+import static org.jooq.impl.DSL.falseCondition;
 import static org.jooq.impl.DSL.inline;
+import static org.jooq.impl.DSL.name;
 import static org.jooq.impl.DSL.zero;
 import static org.jooq.tools.StringUtils.defaultString;
 import static org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
@@ -49,6 +51,7 @@ import java.util.List;
 
 import org.jooq.Param;
 import org.jooq.Record;
+import org.jooq.exception.DataAccessException;
 import org.jooq.util.AbstractTableDefinition;
 import org.jooq.util.ColumnDefinition;
 import org.jooq.util.DataTypeDefinition;
@@ -65,6 +68,8 @@ import org.jooq.util.h2.information_schema.tables.Columns;
  */
 public class H2TableDefinition extends AbstractTableDefinition {
 
+    private static Boolean is1_4_197;
+
     public H2TableDefinition(SchemaDefinition schema, String name, String comment) {
         super(schema, name, comment);
     }
@@ -84,6 +89,7 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 Columns.COLUMN_NAME,
                 Columns.ORDINAL_POSITION,
                 Columns.TYPE_NAME,
+                is1_4_197() ? Columns.COLUMN_TYPE : inline("""").as(Columns.COLUMN_TYPE),
                 choose().when(Columns.NUMERIC_PRECISION.eq(maxP).and(Columns.NUMERIC_SCALE.eq(maxS)), zero())
                         .otherwise(Columns.CHARACTER_MAXIMUM_LENGTH).as(Columns.CHARACTER_MAXIMUM_LENGTH),
                 Columns.NUMERIC_PRECISION.decode(maxP, zero(), Columns.NUMERIC_PRECISION).as(Columns.NUMERIC_PRECISION),
@@ -113,7 +119,8 @@ public class H2TableDefinition extends AbstractTableDefinition {
                 record.get(Columns.NUMERIC_PRECISION),
                 record.get(Columns.NUMERIC_SCALE),
                 record.get(Columns.IS_NULLABLE, boolean.class),
-                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT));
+                isIdentity ? null : record.get(Columns.COLUMN_DEFAULT),
+                name(getSchema().getName(), getName() + ""_"" + record.get(Columns.COLUMN_NAME)));
 
             ColumnDefinition column = new DefaultColumnDefinition(
             	getDatabase().getTable(getSchema(), getName()),
@@ -128,4 +135,26 @@ public class H2TableDefinition extends AbstractTableDefinition {
 
         return result;
     }
+
+
+    boolean is1_4_197() {
+        if (is1_4_197 == null) {
+
+            // [#5874] The COLUMNS.COLUMN_TYPE column was introduced in H2 1.4.197
+            try {
+                create(true)
+                    .select(Columns.COLUMN_TYPE)
+                    .from(COLUMNS)
+                    .where(falseCondition())
+                    .fetch();
+
+                is1_4_197 = true;
+            }
+            catch (DataAccessException e) {
+                is1_4_197 = false;
+            }
+        }
+
+        return is1_4_197;
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
new file mode 100644
index 0000000000..51cbaff3ea
--- /dev/null
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/DefaultCatalog.java
@@ -0,0 +1,60 @@
+/*
+ * This file is generated by jOOQ.
+ */
+package org.jooq.util.h2.information_schema;
+
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.annotation.Generated;
+
+import org.jooq.Schema;
+import org.jooq.impl.CatalogImpl;
+
+
+/**
+ * This class is generated by jOOQ.
+ */
+@Generated(
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
+)
+@SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
+public class DefaultCatalog extends CatalogImpl {
+
+    private static final long serialVersionUID = -1741973376;
+
+    /**
+     * The reference instance of <code></code>
+     */
+    public static final DefaultCatalog DEFAULT_CATALOG = new DefaultCatalog();
+
+    /**
+     * The schema <code>INFORMATION_SCHEMA</code>.
+     */
+    public final InformationSchema INFORMATION_SCHEMA = org.jooq.util.h2.information_schema.InformationSchema.INFORMATION_SCHEMA;
+
+    /**
+     * No further instances allowed
+     */
+    private DefaultCatalog() {
+        super("""");
+    }
+
+    @Override
+    public final List<Schema> getSchemas() {
+        List result = new ArrayList();
+        result.addAll(getSchemas0());
+        return result;
+    }
+
+    private final List<Schema> getSchemas0() {
+        return Arrays.<Schema>asList(
+            InformationSchema.INFORMATION_SCHEMA);
+    }
+}
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
index becb41f09b..bf63a6cd68 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/InformationSchema.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -10,6 +10,7 @@ import java.util.List;
 
 import javax.annotation.Generated;
 
+import org.jooq.Catalog;
 import org.jooq.Table;
 import org.jooq.impl.SchemaImpl;
 import org.jooq.util.h2.information_schema.tables.Columns;
@@ -28,47 +29,106 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class InformationSchema extends SchemaImpl {
 
-	private static final long serialVersionUID = 1479405880;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA</code>
-	 */
-	public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
-
-	/**
-	 * No further instances allowed
-	 */
-	private InformationSchema() {
-		super(""INFORMATION_SCHEMA"");
-	}
-
-	@Override
-	public final List<Table<?>> getTables() {
-		List result = new ArrayList();
-		result.addAll(getTables0());
-		return result;
-	}
-
-	private final List<Table<?>> getTables0() {
-		return Arrays.<Table<?>>asList(
-			FunctionColumns.FUNCTION_COLUMNS,
-			Constraints.CONSTRAINTS,
-			CrossReferences.CROSS_REFERENCES,
-			Schemata.SCHEMATA,
-			FunctionAliases.FUNCTION_ALIASES,
-			Sequences.SEQUENCES,
-			TypeInfo.TYPE_INFO,
-			Indexes.INDEXES,
-			Columns.COLUMNS,
-			Tables.TABLES);
-	}
+    private static final long serialVersionUID = -426534875;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA</code>
+     */
+    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public final Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+
+    /**
+     * No further instances allowed
+     */
+    private InformationSchema() {
+        super(""INFORMATION_SCHEMA"", null);
+    }
+
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Catalog getCatalog() {
+        return DefaultCatalog.DEFAULT_CATALOG;
+    }
+
+    @Override
+    public final List<Table<?>> getTables() {
+        List result = new ArrayList();
+        result.addAll(getTables0());
+        return result;
+    }
+
+    private final List<Table<?>> getTables0() {
+        return Arrays.<Table<?>>asList(
+            Columns.COLUMNS,
+            Constraints.CONSTRAINTS,
+            CrossReferences.CROSS_REFERENCES,
+            FunctionAliases.FUNCTION_ALIASES,
+            FunctionColumns.FUNCTION_COLUMNS,
+            Indexes.INDEXES,
+            Schemata.SCHEMATA,
+            Sequences.SEQUENCES,
+            Tables.TABLES,
+            TypeInfo.TYPE_INFO);
+    }
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
index 484c4639c0..a2f4a8ca44 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/Tables.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema;
 
@@ -21,62 +21,62 @@ import org.jooq.util.h2.information_schema.tables.TypeInfo;
  * Convenience access to all tables in INFORMATION_SCHEMA
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Tables {
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_COLUMNS
-	 */
-	public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.COLUMNS</code>.
+     */
+    public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CONSTRAINTS
-	 */
-	public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CONSTRAINTS</code>.
+     */
+    public static final Constraints CONSTRAINTS = org.jooq.util.h2.information_schema.tables.Constraints.CONSTRAINTS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.CROSS_REFERENCES
-	 */
-	public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.CROSS_REFERENCES</code>.
+     */
+    public static final CrossReferences CROSS_REFERENCES = org.jooq.util.h2.information_schema.tables.CrossReferences.CROSS_REFERENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SCHEMATA
-	 */
-	public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>.
+     */
+    public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.FUNCTION_ALIASES
-	 */
-	public static final FunctionAliases FUNCTION_ALIASES = org.jooq.util.h2.information_schema.tables.FunctionAliases.FUNCTION_ALIASES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>.
+     */
+    public static final FunctionColumns FUNCTION_COLUMNS = org.jooq.util.h2.information_schema.tables.FunctionColumns.FUNCTION_COLUMNS;
 
-	/**
-	 * The table INFORMATION_SCHEMA.SEQUENCES
-	 */
-	public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.INDEXES</code>.
+     */
+    public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TYPE_INFO
-	 */
-	public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SCHEMATA</code>.
+     */
+    public static final Schemata SCHEMATA = org.jooq.util.h2.information_schema.tables.Schemata.SCHEMATA;
 
-	/**
-	 * The table INFORMATION_SCHEMA.INDEXES
-	 */
-	public static final Indexes INDEXES = org.jooq.util.h2.information_schema.tables.Indexes.INDEXES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.SEQUENCES</code>.
+     */
+    public static final Sequences SEQUENCES = org.jooq.util.h2.information_schema.tables.Sequences.SEQUENCES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.COLUMNS
-	 */
-	public static final Columns COLUMNS = org.jooq.util.h2.information_schema.tables.Columns.COLUMNS;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TABLES</code>.
+     */
+    public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
 
-	/**
-	 * The table INFORMATION_SCHEMA.TABLES
-	 */
-	public static final org.jooq.util.h2.information_schema.tables.Tables TABLES = org.jooq.util.h2.information_schema.tables.Tables.TABLES;
+    /**
+     * The table <code>INFORMATION_SCHEMA.TYPE_INFO</code>.
+     */
+    public static final TypeInfo TYPE_INFO = org.jooq.util.h2.information_schema.tables.TypeInfo.TYPE_INFO;
 }
diff --git a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
index 0aa0b00f98..bed402f803 100644
--- a/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
+++ b/jOOQ-meta/src/main/java/org/jooq/util/h2/information_schema/tables/Columns.java
@@ -1,5 +1,5 @@
-/**
- * This class is generated by jOOQ
+/*
+ * This file is generated by jOOQ.
  */
 package org.jooq.util.h2.information_schema.tables;
 
@@ -7,9 +7,12 @@ package org.jooq.util.h2.information_schema.tables;
 import javax.annotation.Generated;
 
 import org.jooq.Field;
+import org.jooq.Name;
 import org.jooq.Record;
+import org.jooq.Schema;
 import org.jooq.Table;
 import org.jooq.TableField;
+import org.jooq.impl.DSL;
 import org.jooq.impl.TableImpl;
 import org.jooq.util.h2.information_schema.InformationSchema;
 
@@ -18,157 +21,175 @@ import org.jooq.util.h2.information_schema.InformationSchema;
  * This class is generated by jOOQ.
  */
 @Generated(
-	value = {
-		""http://www.jooq.org"",
-		""jOOQ version:3.6.0""
-	},
-	comments = ""This class is generated by jOOQ""
+    value = {
+        ""http://www.jooq.org"",
+        ""jOOQ version:3.11.0""
+    },
+    comments = ""This class is generated by jOOQ""
 )
 @SuppressWarnings({ ""all"", ""unchecked"", ""rawtypes"" })
 public class Columns extends TableImpl<Record> {
 
-	private static final long serialVersionUID = -1092445246;
-
-	/**
-	 * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
-	 */
-	public static final Columns COLUMNS = new Columns();
-
-	/**
-	 * The class holding records for this type
-	 */
-	@Override
-	public Class<Record> getRecordType() {
-		return Record.class;
-	}
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
-	 */
-	public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
-	 */
-	public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
-	 */
-	public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
-	 */
-	public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
-	 */
-	public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
-	 */
-	public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
-	 */
-	public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
-	 */
-	public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
-	 */
-	public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
-	 */
-	public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
-	 */
-	public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
-	 */
-	public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
-	 */
-	public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
-	 */
-	public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
-	 */
-	public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
-	 */
-	public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647), COLUMNS, """");
-
-	/**
-	 * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
-	 */
-	public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
-
-	/**
-	 * No further instances allowed
-	 */
-	private Columns() {
-		this(""COLUMNS"", null);
-	}
-
-	private Columns(String alias, Table<Record> aliased) {
-		this(alias, aliased, null);
-	}
-
-	private Columns(String alias, Table<Record> aliased, Field<?>[] parameters) {
-		super(alias, InformationSchema.INFORMATION_SCHEMA, aliased, parameters, """");
-	}
+    private static final long serialVersionUID = -443290501;
+
+    /**
+     * The reference instance of <code>INFORMATION_SCHEMA.COLUMNS</code>
+     */
+    public static final Columns COLUMNS = new Columns();
+
+    /**
+     * The class holding records for this type
+     */
+    @Override
+    public Class<Record> getRecordType() {
+        return Record.class;
+    }
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG</code>.
+     */
+    public static final TableField<Record, String> TABLE_CATALOG = createField(""TABLE_CATALOG"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA</code>.
+     */
+    public static final TableField<Record, String> TABLE_SCHEMA = createField(""TABLE_SCHEMA"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TABLE_NAME</code>.
+     */
+    public static final TableField<Record, String> TABLE_NAME = createField(""TABLE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME</code>.
+     */
+    public static final TableField<Record, String> COLUMN_NAME = createField(""COLUMN_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.ORDINAL_POSITION</code>.
+     */
+    public static final TableField<Record, Integer> ORDINAL_POSITION = createField(""ORDINAL_POSITION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_DEFAULT</code>.
+     */
+    public static final TableField<Record, String> COLUMN_DEFAULT = createField(""COLUMN_DEFAULT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_NULLABLE</code>.
+     */
+    public static final TableField<Record, String> IS_NULLABLE = createField(""IS_NULLABLE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Integer> DATA_TYPE = createField(""DATA_TYPE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_MAXIMUM_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_MAXIMUM_LENGTH = createField(""CHARACTER_MAXIMUM_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_OCTET_LENGTH</code>.
+     */
+    public static final TableField<Record, Integer> CHARACTER_OCTET_LENGTH = createField(""CHARACTER_OCTET_LENGTH"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION = createField(""NUMERIC_PRECISION"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_PRECISION_RADIX</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_PRECISION_RADIX = createField(""NUMERIC_PRECISION_RADIX"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NUMERIC_SCALE</code>.
+     */
+    public static final TableField<Record, Integer> NUMERIC_SCALE = createField(""NUMERIC_SCALE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHARACTER_SET_NAME</code>.
+     */
+    public static final TableField<Record, String> CHARACTER_SET_NAME = createField(""CHARACTER_SET_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLLATION_NAME</code>.
+     */
+    public static final TableField<Record, String> COLLATION_NAME = createField(""COLLATION_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.TYPE_NAME</code>.
+     */
+    public static final TableField<Record, String> TYPE_NAME = createField(""TYPE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.NULLABLE</code>.
+     */
+    public static final TableField<Record, Integer> NULLABLE = createField(""NULLABLE"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.IS_COMPUTED</code>.
+     */
+    public static final TableField<Record, Boolean> IS_COMPUTED = createField(""IS_COMPUTED"", org.jooq.impl.SQLDataType.BOOLEAN, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SELECTIVITY</code>.
+     */
+    public static final TableField<Record, Integer> SELECTIVITY = createField(""SELECTIVITY"", org.jooq.impl.SQLDataType.INTEGER, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.CHECK_CONSTRAINT</code>.
+     */
+    public static final TableField<Record, String> CHECK_CONSTRAINT = createField(""CHECK_CONSTRAINT"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SEQUENCE_NAME</code>.
+     */
+    public static final TableField<Record, String> SEQUENCE_NAME = createField(""SEQUENCE_NAME"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.REMARKS</code>.
+     */
+    public static final TableField<Record, String> REMARKS = createField(""REMARKS"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.SOURCE_DATA_TYPE</code>.
+     */
+    public static final TableField<Record, Short> SOURCE_DATA_TYPE = createField(""SOURCE_DATA_TYPE"", org.jooq.impl.SQLDataType.SMALLINT, COLUMNS, """");
+
+    /**
+     * The column <code>INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE</code>.
+     */
+    public static final TableField<Record, String> COLUMN_TYPE = createField(""COLUMN_TYPE"", org.jooq.impl.SQLDataType.VARCHAR(2147483647), COLUMNS, """");
+
+    /**
+    [/INST]
Ё B a, B BЉ.Aand C-ө. dhө R zde
 Wհ"
"diff --git a/res/xml/widget_ankidroid.xml b/res/xml/widget_ankidroid.xml
index 4c2da961f2..8005893586 100644
--- a/res/xml/widget_ankidroid.xml
+++ b/res/xml/widget_ankidroid.xml
@@ -1,4 +1,6 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
-<appwidget-provider
-    xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:initialLayout=""@layout/widget_ankidroidinitial"" android:minHeight=""146dp"" android:minWidth=""146dp"" android:updatePeriodMillis=""2500""/>
\ No newline at end of file
+<appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
+	android:initialLayout=""@layout/widget_ankidroidinitial""
+	android:minHeight=""146dp""
+	android:minWidth=""146dp""
+	android:updatePeriodMillis=""3600000""/>
\ No newline at end of file",Reduce battery drain caused by insainly high value of widget update period .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/res/xml/widget_ankidroid.xml b/res/xml/widget_ankidroid.xml
index 4c2da961f2..8005893586 100644
--- a/res/xml/widget_ankidroid.xml
+++ b/res/xml/widget_ankidroid.xml
@@ -1,4 +1,6 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
-<appwidget-provider
-    xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:initialLayout=""@layout/widget_ankidroidinitial"" android:minHeight=""146dp"" android:minWidth=""146dp"" android:updatePeriodMillis=""2500""/>
\ No newline at end of file
+<appwidget-provider xmlns:android=""http://schemas.android.com/apk/res/android""
+	android:initialLayout=""@layout/widget_ankidroidinitial""
+	android:minHeight=""146dp""
+	android:minWidth=""146dp""
+	android:updatePeriodMillis=""3600000""/>
\ No newline at end of file [/INST]  Here is a possible meaningful commit message for the above diff:

`Fixed widget_ankidroid.xml to update updatePeriodMillis to 3600000`

This commit message provides a brief description"
"diff --git a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
index 54efcb9b7b..a1b5650e4f 100644
--- a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
+++ b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
@@ -47,17 +47,14 @@ public class ComputeClosureExample {
             System.out.println("">>> Compute closure example started."");
 
             // Execute closure on all cluster nodes.
-            Collection<Integer> res = ignite.compute().apply(
-                new IgniteClosure<String, Integer>() {
-                    @Override public Integer apply(String word) {
+            Collection<Integer> res = ignite.compute().<String, Integer>apply((word) -> {
                         System.out.println();
                         System.out.println("">>> Printing '"" + word + ""' on this node from ignite job."");
 
                         // Return number of letters in the word.
                         return word.length();",ignite - 454 jdk8 compatibility fixes,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
index 54efcb9b7b..a1b5650e4f 100644
--- a/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
+++ b/examples/src/main/java8/org/apache/ignite/examples8/computegrid/ComputeClosureExample.java
@@ -47,17 +47,14 @@ public class ComputeClosureExample {
             System.out.println("">>> Compute closure example started."");
 
             // Execute closure on all cluster nodes.
-            Collection<Integer> res = ignite.compute().apply(
-                new IgniteClosure<String, Integer>() {
-                    @Override public Integer apply(String word) {
+            Collection<Integer> res = ignite.compute().<String, Integer>apply((word) -> {
                         System.out.println();
                         System.out.println("">>> Printing '"" + word + ""' on this node from ignite job."");
 
                         // Return number of letters in the word.
                         return word.length();
         [/INST]  Here is a possible commit message based on the diff you provided:

`Improved closure execution in ComputeClosureExample`

This commit message highlights the changes made in the `ComputeClosureExample`"
"diff --git a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
index e305303fcf..8b801e328c 100644
--- a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
@@ -2,7 +2,7 @@
  * ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -57,14 +57,16 @@ package org.apache.jmeter.visualizers;
 
 import java.awt.BorderLayout;
 import java.awt.Color;
+import java.awt.Dimension;
 import java.awt.FlowLayout;
 import java.awt.Font;
-import java.awt.GridLayout;
 import java.awt.Image;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 
 import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
@@ -247,7 +249,7 @@ public class GraphVisualizer extends AbstractVisualizer
     }
 
     /****************************************
-     * Description of the Method
+     * Initialize the GUI
      ***************************************/
     private void init()
     {
@@ -273,151 +275,291 @@ public class GraphVisualizer extends AbstractVisualizer
         mainPanel.add(getNamePanel());
         mainPanel.add(this.getFilePanel());
 
-        // Set up panel where user can choose which graphs to display
-        JPanel chooseGraphsPanel = new JPanel();
 
+        // Set up the graph with header, footer, Y axis and graph display
+        JPanel graphPanel = new JPanel(new BorderLayout());
+        graphPanel.add(createYAxis(), BorderLayout.WEST);
+        graphPanel.add(createChoosePanel(), BorderLayout.NORTH);
+        graphPanel.add(createGraphPanel(), BorderLayout.CENTER);
+        graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);
+
+        // Add the main panel and the graph
+        this.add(mainPanel, BorderLayout.NORTH);
+        this.add(graphPanel, BorderLayout.CENTER);
+    }
+
+    // Methods used in creating the GUI
+
+    /**
+     * Creates the panel containing the graph's Y axis labels.
+     * 
+     * @return the Y axis panel
+     */
+    private JPanel createYAxis() {
+        JPanel graphYAxisPanel = new JPanel();
+        
+        graphYAxisPanel.setLayout(new BorderLayout());
+        
+        maxYField = createYAxisField(5);
+        minYField = createYAxisField(3);
+
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", maxYField),
+                        BorderLayout.NORTH);
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", minYField),
+                        BorderLayout.SOUTH);
+
+        return graphYAxisPanel;
+    }
+
+    /**
+     * Creates a text field to be used for the value of a Y axis
+     * label.  These fields hold the minimum and maximum values
+     * for the graph.  The units are kept in a separate label
+     * outside of this field.
+     * 
+     * @param length the number of characters which the field
+     *                will use to calculate its preferred width.
+     *                This should be set to the maximum number
+     *                of digits that are expected to be necessary
+     *                to hold the label value.
+     * 
+     * @see #createYAxisPanel(String, JTextField)
+     * 
+     * @return a text field configured to be used in the Y axis
+     */
+    private JTextField createYAxisField(int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
+        field.setEditable(false);
+        field.setForeground(Color.black);
+        field.setBackground(getBackground());
+        field.setHorizontalAlignment(JTextField.RIGHT);
+        return field;
+    }
+
+    /**
+     * Creates a panel for an entire Y axis label. This includes
+     * the dynamic value as well as the unit label.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *          This is used to look up the label text using
+     *          {@link JMeterUtils#getResString(String)}.
+     * 
+     * @return a panel containing both the dynamic and static parts
+     *          of a Y axis label
+     */
+    private JPanel createYAxisPanel(String labelResourceName, JTextField field) {
+        JPanel panel = new JPanel(new FlowLayout());
+        JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));
+        
+        panel.add(field);
+        panel.add(label);
+        return panel;
+    }
+
+
+    /**
+     * Creates a panel which allows the user to choose which graphs
+     * to display. This panel consists of a check box for each type
+     * of graph (current sample, average, deviation, and throughput).
+     * 
+     * @return a panel allowing the user to choose which graphs
+     *          to display
+     */
+    private JPanel createChoosePanel() {
+        JPanel chooseGraphsPanel = new JPanel();
+        
         chooseGraphsPanel.setLayout(new FlowLayout());
-        JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString(""graph_choose_graphs""));
-
-        data = new JCheckBox(JMeterUtils.getResString(""graph_results_data""));
-        data.setSelected(true);
-        data.addItemListener(this);
-        data.setForeground(Color.black);
-        average = new JCheckBox(JMeterUtils.getResString(""graph_results_average""));
-        average.setSelected(true);
-        average.addItemListener(this);
-        average.setForeground(Color.blue);
-        deviation = new JCheckBox(JMeterUtils.getResString(""graph_results_deviation""));
-        deviation.setSelected(true);
-        deviation.addItemListener(this);
-        deviation.setForeground(Color.red);
-        throughput = new JCheckBox(JMeterUtils.getResString(""graph_results_throughput""));
-        throughput.setSelected(true);
-        throughput.addItemListener(this);
-        throughput.setForeground(JMeterColor.dark_green);
+        JLabel selectGraphsLabel = new JLabel(
+                        JMeterUtils.getResString(""graph_choose_graphs""));
+        data = createChooseCheckBox(""graph_results_data"", Color.black);
+        average = createChooseCheckBox(""graph_results_average"", Color.blue);
+        deviation = createChooseCheckBox(""graph_results_deviation"", Color.red);
+        throughput = createChooseCheckBox(""graph_results_throughput"",
+                        JMeterColor.dark_green);
 
         chooseGraphsPanel.add(selectGraphsLabel);
         chooseGraphsPanel.add(data);
         chooseGraphsPanel.add(average);
         chooseGraphsPanel.add(deviation);
         chooseGraphsPanel.add(throughput);
+        return chooseGraphsPanel;
+    }
 
-        // Set up the graph itself
-        JScrollPane graphScrollPanel = new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
-                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
+    /**
+     * Creates a check box configured to be used to in the choose panel
+     * allowing the user to select whether or not a particular kind of
+     * graph data will be displayed.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param color  the color used for the checkbox text. By
+     *                convention this is the same color that is used
+     *                to draw the graph and for the corresponding
+     *                info field.
+     *
+     * @return       a checkbox allowing the user to select whether or
+     *                not a kind of graph data will be displayed
+     */
+    private JCheckBox createChooseCheckBox(String labelResourceName, Color color) {
+        JCheckBox checkBox = new JCheckBox(
+                        JMeterUtils.getResString(labelResourceName));
+        checkBox.setSelected(true);
+        checkBox.addItemListener(this);
+        checkBox.setForeground(color);
+        return checkBox;
+    }
 
-        graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
-        // graphScrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
-        // graphScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
 
+    /**
+     * Creates a scroll pane containing the actual graph of
+     * the results.
+     * 
+     * @return a scroll pane containing the graph
+     */
+    private JScrollPane createGraphPanel() {
+        JScrollPane graphScrollPanel =
+            new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
+                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-        // Set up Y axis panel
-        JPanel graphYAxisPanel = new JPanel();
+        graphScrollPanel.setViewportBorder(
+                BorderFactory.createEmptyBorder(2, 2, 2, 2));
 
-        graphYAxisPanel.setLayout(new BorderLayout());
-        JPanel maxYPanel = new JPanel(new FlowLayout());
-        JLabel maxYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        maxYField = new JTextField(5);
-        maxYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        maxYField.setEditable(false);
-        maxYField.setForeground(Color.black);
-        maxYField.setBackground(getBackground());
-        maxYField.setHorizontalAlignment(JTextField.RIGHT);
-        maxYPanel.add(maxYField);
-        maxYPanel.add(maxYLabel);
-        JPanel minYPanel = new JPanel(new FlowLayout());
-        JLabel minYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        minYField = new JTextField(3);
-        minYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        minYField.setEditable(false);
-        minYField.setForeground(Color.black);
-        minYField.setBackground(getBackground());
-        minYField.setHorizontalAlignment(JTextField.RIGHT);
-        minYPanel.add(minYField);
-        minYPanel.add(minYLabel);
-        graphYAxisPanel.add(maxYPanel, BorderLayout.NORTH);
-        graphYAxisPanel.add(minYPanel, BorderLayout.SOUTH);
-
-        // Set up footer of graph which displays numerics of the graphs
-        JPanel dataPanel = new JPanel();
-        JLabel dataLabel = new JLabel(JMeterUtils.getResString(""graph_results_latest_sample""));
-
-        dataLabel.setForeground(Color.black);
-        dataField = new JTextField(5);
-        dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        dataField.setEditable(false);
-        dataField.setForeground(Color.black);
-        dataField.setBackground(getBackground());
-        dataPanel.add(dataLabel);
-        dataPanel.add(dataField);
-        JPanel averagePanel = new JPanel();
-        JLabel averageLabel = new JLabel(JMeterUtils.getResString(""graph_results_average""));
-
-        averageLabel.setForeground(Color.blue);
-        averageField = new JTextField(5);
-        averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        averageField.setEditable(false);
-        averageField.setForeground(Color.blue);
-        averageField.setBackground(getBackground());
-        averagePanel.add(averageLabel);
-        averagePanel.add(averageField);
-        JPanel deviationPanel = new JPanel();
-        JLabel deviationLabel = new JLabel(JMeterUtils.getResString(""graph_results_deviation""));
-
-        deviationLabel.setForeground(Color.red);
-        deviationField = new JTextField(5);
-        deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        deviationField.setEditable(false);
-        deviationField.setForeground(Color.red);
-        deviationField.setBackground(getBackground());
-        deviationPanel.add(deviationLabel);
-        deviationPanel.add(deviationField);
-        JPanel throughputPanel = new JPanel();
-        JLabel throughputLabel = new JLabel(JMeterUtils.getResString(""graph_results_throughput""));
-
-        throughputLabel.setForeground(JMeterColor.dark_green);
-        throughputField = new JTextField(15);
-        throughputField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        throughputField.setEditable(false);
-        throughputField.setForeground(JMeterColor.dark_green);
-        throughputField.setBackground(getBackground());
-        throughputPanel.add(throughputLabel);
-        throughputPanel.add(throughputField);
-        JPanel noSamplesPanel = new JPanel();
-        JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString(""graph_results_no_samples""));
-
-        noSamplesField = new JTextField(6);
-        noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        noSamplesField.setEditable(false);
-        noSamplesField.setForeground(Color.black);
-        noSamplesField.setBackground(getBackground());
-        noSamplesPanel.add(noSamplesLabel);
-        noSamplesPanel.add(noSamplesField);
-
-        JPanel graphInfoPanel = new JPanel();
-
-        graphInfoPanel.setLayout(new GridLayout(2, 3));
-        graphInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-
-        graphInfoPanel.add(noSamplesPanel);
-        graphInfoPanel.add(dataPanel);
-        graphInfoPanel.add(averagePanel);
-        graphInfoPanel.add(deviationPanel);
-        graphInfoPanel.add(throughputPanel);
+        return graphScrollPanel;
+    }
 
-        // Set up the graph with header, footer, Y axis and graph display
-        JPanel graphPanel = new JPanel();
 
-        graphPanel.setLayout(new BorderLayout());
-        graphPanel.add(graphYAxisPanel, BorderLayout.WEST);
-        graphPanel.add(chooseGraphsPanel, BorderLayout.NORTH);
-        graphPanel.add(graphScrollPanel, BorderLayout.CENTER);
-        graphPanel.add(graphInfoPanel, BorderLayout.SOUTH);
+    /**
+     * Creates a panel which numerically displays the current graph
+     * values.
+     * 
+     * @return a panel showing the current graph values
+     */
+    private Box createGraphInfoPanel() {
+        Box graphInfoPanel = Box.createHorizontalBox();
+
+        noSamplesField = createInfoField(Color.black, 6);
+        dataField = createInfoField(Color.black, 5);
+        averageField = createInfoField(Color.blue, 5);
+        deviationField = createInfoField(Color.red, 5);
+        throughputField = createInfoField(JMeterColor.dark_green, 15);
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_no_samples"", noSamplesField),
+                    noSamplesField,
+                    createInfoLabel(""graph_results_deviation"", deviationField),
+                    deviationField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_latest_sample"", dataField),
+                    dataField,
+                    createInfoLabel(""graph_results_throughput"", throughputField),
+                    throughputField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_average"", averageField),
+                    averageField,
+                    null,
+                    null));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        return graphInfoPanel;
+    }
 
-        // Add the main panel and the graph
-        this.add(mainPanel, BorderLayout.NORTH);
-        this.add(graphPanel, BorderLayout.CENTER);
+    /**
+     * Creates one of the fields used to display the graph's current
+     * values.
+     * 
+     * @param color   the color used to draw the value. By convention
+     *                 this is the same color that is used to draw the
+     *                 graph for this value and in the choose panel.
+     * @param length  the number of digits which the field should be
+     *                 able to display
+     * 
+     * @return        a text field configured to display one of the
+     *                 current graph values
+     */
+    private JTextField createInfoField(Color color, int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        field.setEditable(false);
+        field.setForeground(color);
+        field.setBackground(getBackground());
+
+        // The text field should expand horizontally, but have
+        // a fixed height
+        field.setMaximumSize(new Dimension(
+                    field.getMaximumSize().width,
+                    field.getPreferredSize().height));
+        return field;
+    }
+
+
+    /**
+     * Creates a label for one of the fields used to display the graph's
+     * current values. Neither the label created by this method or the
+     * <code>field</code> passed as a parameter is added to the GUI here.
+     * 
+     * @param labelResourceName  the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param field  the field this label is being created for.
+     */
+    private JLabel createInfoLabel(String labelResourceName, JTextField field) {
+        JLabel label = new JLabel(
+                JMeterUtils.getResString(labelResourceName));
+        label.setForeground(field.getForeground());
+        label.setLabelFor(field);
+        return label;
+    }
+
+    /**
+     * Creates a panel containing two pairs of labels and fields for
+     * displaying the current graph values. This method exists to help with
+     * laying out the fields in columns. If one or more components are null
+     * then these components will be represented by blank space.
+     * 
+     * @param label1  the label for the first field. This label will
+     *                 be placed in the upper left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field1  the field corresponding to the first label. This
+     *                 field will be placed in the upper right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     * @param label2  the label for the second field. This label will
+     *                 be placed in the lower left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field2  the field corresponding to the second label. This
+     *                 field will be placed in the lower right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     */
+    private Box createInfoColumn(JLabel label1, JTextField",Updating Graph Results GUI ( Jeremy Arnold ) .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
index e305303fcf..8b801e328c 100644
--- a/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
@@ -2,7 +2,7 @@
  * ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -57,14 +57,16 @@ package org.apache.jmeter.visualizers;
 
 import java.awt.BorderLayout;
 import java.awt.Color;
+import java.awt.Dimension;
 import java.awt.FlowLayout;
 import java.awt.Font;
-import java.awt.GridLayout;
 import java.awt.Image;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 
 import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
@@ -247,7 +249,7 @@ public class GraphVisualizer extends AbstractVisualizer
     }
 
     /****************************************
-     * Description of the Method
+     * Initialize the GUI
      ***************************************/
     private void init()
     {
@@ -273,151 +275,291 @@ public class GraphVisualizer extends AbstractVisualizer
         mainPanel.add(getNamePanel());
         mainPanel.add(this.getFilePanel());
 
-        // Set up panel where user can choose which graphs to display
-        JPanel chooseGraphsPanel = new JPanel();
 
+        // Set up the graph with header, footer, Y axis and graph display
+        JPanel graphPanel = new JPanel(new BorderLayout());
+        graphPanel.add(createYAxis(), BorderLayout.WEST);
+        graphPanel.add(createChoosePanel(), BorderLayout.NORTH);
+        graphPanel.add(createGraphPanel(), BorderLayout.CENTER);
+        graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);
+
+        // Add the main panel and the graph
+        this.add(mainPanel, BorderLayout.NORTH);
+        this.add(graphPanel, BorderLayout.CENTER);
+    }
+
+    // Methods used in creating the GUI
+
+    /**
+     * Creates the panel containing the graph's Y axis labels.
+     * 
+     * @return the Y axis panel
+     */
+    private JPanel createYAxis() {
+        JPanel graphYAxisPanel = new JPanel();
+        
+        graphYAxisPanel.setLayout(new BorderLayout());
+        
+        maxYField = createYAxisField(5);
+        minYField = createYAxisField(3);
+
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", maxYField),
+                        BorderLayout.NORTH);
+        graphYAxisPanel.add(createYAxisPanel(""graph_results_ms"", minYField),
+                        BorderLayout.SOUTH);
+
+        return graphYAxisPanel;
+    }
+
+    /**
+     * Creates a text field to be used for the value of a Y axis
+     * label.  These fields hold the minimum and maximum values
+     * for the graph.  The units are kept in a separate label
+     * outside of this field.
+     * 
+     * @param length the number of characters which the field
+     *                will use to calculate its preferred width.
+     *                This should be set to the maximum number
+     *                of digits that are expected to be necessary
+     *                to hold the label value.
+     * 
+     * @see #createYAxisPanel(String, JTextField)
+     * 
+     * @return a text field configured to be used in the Y axis
+     */
+    private JTextField createYAxisField(int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
+        field.setEditable(false);
+        field.setForeground(Color.black);
+        field.setBackground(getBackground());
+        field.setHorizontalAlignment(JTextField.RIGHT);
+        return field;
+    }
+
+    /**
+     * Creates a panel for an entire Y axis label. This includes
+     * the dynamic value as well as the unit label.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *          This is used to look up the label text using
+     *          {@link JMeterUtils#getResString(String)}.
+     * 
+     * @return a panel containing both the dynamic and static parts
+     *          of a Y axis label
+     */
+    private JPanel createYAxisPanel(String labelResourceName, JTextField field) {
+        JPanel panel = new JPanel(new FlowLayout());
+        JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));
+        
+        panel.add(field);
+        panel.add(label);
+        return panel;
+    }
+
+
+    /**
+     * Creates a panel which allows the user to choose which graphs
+     * to display. This panel consists of a check box for each type
+     * of graph (current sample, average, deviation, and throughput).
+     * 
+     * @return a panel allowing the user to choose which graphs
+     *          to display
+     */
+    private JPanel createChoosePanel() {
+        JPanel chooseGraphsPanel = new JPanel();
+        
         chooseGraphsPanel.setLayout(new FlowLayout());
-        JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString(""graph_choose_graphs""));
-
-        data = new JCheckBox(JMeterUtils.getResString(""graph_results_data""));
-        data.setSelected(true);
-        data.addItemListener(this);
-        data.setForeground(Color.black);
-        average = new JCheckBox(JMeterUtils.getResString(""graph_results_average""));
-        average.setSelected(true);
-        average.addItemListener(this);
-        average.setForeground(Color.blue);
-        deviation = new JCheckBox(JMeterUtils.getResString(""graph_results_deviation""));
-        deviation.setSelected(true);
-        deviation.addItemListener(this);
-        deviation.setForeground(Color.red);
-        throughput = new JCheckBox(JMeterUtils.getResString(""graph_results_throughput""));
-        throughput.setSelected(true);
-        throughput.addItemListener(this);
-        throughput.setForeground(JMeterColor.dark_green);
+        JLabel selectGraphsLabel = new JLabel(
+                        JMeterUtils.getResString(""graph_choose_graphs""));
+        data = createChooseCheckBox(""graph_results_data"", Color.black);
+        average = createChooseCheckBox(""graph_results_average"", Color.blue);
+        deviation = createChooseCheckBox(""graph_results_deviation"", Color.red);
+        throughput = createChooseCheckBox(""graph_results_throughput"",
+                        JMeterColor.dark_green);
 
         chooseGraphsPanel.add(selectGraphsLabel);
         chooseGraphsPanel.add(data);
         chooseGraphsPanel.add(average);
         chooseGraphsPanel.add(deviation);
         chooseGraphsPanel.add(throughput);
+        return chooseGraphsPanel;
+    }
 
-        // Set up the graph itself
-        JScrollPane graphScrollPanel = new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
-                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
+    /**
+     * Creates a check box configured to be used to in the choose panel
+     * allowing the user to select whether or not a particular kind of
+     * graph data will be displayed.
+     * 
+     * @param labelResourceName the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param color  the color used for the checkbox text. By
+     *                convention this is the same color that is used
+     *                to draw the graph and for the corresponding
+     *                info field.
+     *
+     * @return       a checkbox allowing the user to select whether or
+     *                not a kind of graph data will be displayed
+     */
+    private JCheckBox createChooseCheckBox(String labelResourceName, Color color) {
+        JCheckBox checkBox = new JCheckBox(
+                        JMeterUtils.getResString(labelResourceName));
+        checkBox.setSelected(true);
+        checkBox.addItemListener(this);
+        checkBox.setForeground(color);
+        return checkBox;
+    }
 
-        graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
-        // graphScrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
-        // graphScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
 
+    /**
+     * Creates a scroll pane containing the actual graph of
+     * the results.
+     * 
+     * @return a scroll pane containing the graph
+     */
+    private JScrollPane createGraphPanel() {
+        JScrollPane graphScrollPanel =
+            new JScrollPane(graph, JScrollPane.VERTICAL_SCROLLBAR_NEVER,
+                    JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
 
-        // Set up Y axis panel
-        JPanel graphYAxisPanel = new JPanel();
+        graphScrollPanel.setViewportBorder(
+                BorderFactory.createEmptyBorder(2, 2, 2, 2));
 
-        graphYAxisPanel.setLayout(new BorderLayout());
-        JPanel maxYPanel = new JPanel(new FlowLayout());
-        JLabel maxYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        maxYField = new JTextField(5);
-        maxYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        maxYField.setEditable(false);
-        maxYField.setForeground(Color.black);
-        maxYField.setBackground(getBackground());
-        maxYField.setHorizontalAlignment(JTextField.RIGHT);
-        maxYPanel.add(maxYField);
-        maxYPanel.add(maxYLabel);
-        JPanel minYPanel = new JPanel(new FlowLayout());
-        JLabel minYLabel = new JLabel(JMeterUtils.getResString(""graph_results_ms""));
-
-        minYField = new JTextField(3);
-        minYField.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
-        minYField.setEditable(false);
-        minYField.setForeground(Color.black);
-        minYField.setBackground(getBackground());
-        minYField.setHorizontalAlignment(JTextField.RIGHT);
-        minYPanel.add(minYField);
-        minYPanel.add(minYLabel);
-        graphYAxisPanel.add(maxYPanel, BorderLayout.NORTH);
-        graphYAxisPanel.add(minYPanel, BorderLayout.SOUTH);
-
-        // Set up footer of graph which displays numerics of the graphs
-        JPanel dataPanel = new JPanel();
-        JLabel dataLabel = new JLabel(JMeterUtils.getResString(""graph_results_latest_sample""));
-
-        dataLabel.setForeground(Color.black);
-        dataField = new JTextField(5);
-        dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        dataField.setEditable(false);
-        dataField.setForeground(Color.black);
-        dataField.setBackground(getBackground());
-        dataPanel.add(dataLabel);
-        dataPanel.add(dataField);
-        JPanel averagePanel = new JPanel();
-        JLabel averageLabel = new JLabel(JMeterUtils.getResString(""graph_results_average""));
-
-        averageLabel.setForeground(Color.blue);
-        averageField = new JTextField(5);
-        averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        averageField.setEditable(false);
-        averageField.setForeground(Color.blue);
-        averageField.setBackground(getBackground());
-        averagePanel.add(averageLabel);
-        averagePanel.add(averageField);
-        JPanel deviationPanel = new JPanel();
-        JLabel deviationLabel = new JLabel(JMeterUtils.getResString(""graph_results_deviation""));
-
-        deviationLabel.setForeground(Color.red);
-        deviationField = new JTextField(5);
-        deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        deviationField.setEditable(false);
-        deviationField.setForeground(Color.red);
-        deviationField.setBackground(getBackground());
-        deviationPanel.add(deviationLabel);
-        deviationPanel.add(deviationField);
-        JPanel throughputPanel = new JPanel();
-        JLabel throughputLabel = new JLabel(JMeterUtils.getResString(""graph_results_throughput""));
-
-        throughputLabel.setForeground(JMeterColor.dark_green);
-        throughputField = new JTextField(15);
-        throughputField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        throughputField.setEditable(false);
-        throughputField.setForeground(JMeterColor.dark_green);
-        throughputField.setBackground(getBackground());
-        throughputPanel.add(throughputLabel);
-        throughputPanel.add(throughputField);
-        JPanel noSamplesPanel = new JPanel();
-        JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString(""graph_results_no_samples""));
-
-        noSamplesField = new JTextField(6);
-        noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-        noSamplesField.setEditable(false);
-        noSamplesField.setForeground(Color.black);
-        noSamplesField.setBackground(getBackground());
-        noSamplesPanel.add(noSamplesLabel);
-        noSamplesPanel.add(noSamplesField);
-
-        JPanel graphInfoPanel = new JPanel();
-
-        graphInfoPanel.setLayout(new GridLayout(2, 3));
-        graphInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
-
-        graphInfoPanel.add(noSamplesPanel);
-        graphInfoPanel.add(dataPanel);
-        graphInfoPanel.add(averagePanel);
-        graphInfoPanel.add(deviationPanel);
-        graphInfoPanel.add(throughputPanel);
+        return graphScrollPanel;
+    }
 
-        // Set up the graph with header, footer, Y axis and graph display
-        JPanel graphPanel = new JPanel();
 
-        graphPanel.setLayout(new BorderLayout());
-        graphPanel.add(graphYAxisPanel, BorderLayout.WEST);
-        graphPanel.add(chooseGraphsPanel, BorderLayout.NORTH);
-        graphPanel.add(graphScrollPanel, BorderLayout.CENTER);
-        graphPanel.add(graphInfoPanel, BorderLayout.SOUTH);
+    /**
+     * Creates a panel which numerically displays the current graph
+     * values.
+     * 
+     * @return a panel showing the current graph values
+     */
+    private Box createGraphInfoPanel() {
+        Box graphInfoPanel = Box.createHorizontalBox();
+
+        noSamplesField = createInfoField(Color.black, 6);
+        dataField = createInfoField(Color.black, 5);
+        averageField = createInfoField(Color.blue, 5);
+        deviationField = createInfoField(Color.red, 5);
+        throughputField = createInfoField(JMeterColor.dark_green, 15);
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_no_samples"", noSamplesField),
+                    noSamplesField,
+                    createInfoLabel(""graph_results_deviation"", deviationField),
+                    deviationField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_latest_sample"", dataField),
+                    dataField,
+                    createInfoLabel(""graph_results_throughput"", throughputField),
+                    throughputField));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        graphInfoPanel.add(createInfoColumn(
+                    createInfoLabel(""graph_results_average"", averageField),
+                    averageField,
+                    null,
+                    null));
+        graphInfoPanel.add(Box.createHorizontalGlue());
+
+        return graphInfoPanel;
+    }
 
-        // Add the main panel and the graph
-        this.add(mainPanel, BorderLayout.NORTH);
-        this.add(graphPanel, BorderLayout.CENTER);
+    /**
+     * Creates one of the fields used to display the graph's current
+     * values.
+     * 
+     * @param color   the color used to draw the value. By convention
+     *                 this is the same color that is used to draw the
+     *                 graph for this value and in the choose panel.
+     * @param length  the number of digits which the field should be
+     *                 able to display
+     * 
+     * @return        a text field configured to display one of the
+     *                 current graph values
+     */
+    private JTextField createInfoField(Color color, int length) {
+        JTextField field = new JTextField(length);
+        field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        field.setEditable(false);
+        field.setForeground(color);
+        field.setBackground(getBackground());
+
+        // The text field should expand horizontally, but have
+        // a fixed height
+        field.setMaximumSize(new Dimension(
+                    field.getMaximumSize().width,
+                    field.getPreferredSize().height));
+        return field;
+    }
+
+
+    /**
+     * Creates a label for one of the fields used to display the graph's
+     * current values. Neither the label created by this method or the
+     * <code>field</code> passed as a parameter is added to the GUI here.
+     * 
+     * @param labelResourceName  the name of the label resource.
+     *                This is used to look up the label text using
+     *                {@link JMeterUtils#getResString(String)}.
+     * @param field  the field this label is being created for.
+     */
+    private JLabel createInfoLabel(String labelResourceName, JTextField field) {
+        JLabel label = new JLabel(
+                JMeterUtils.getResString(labelResourceName));
+        label.setForeground(field.getForeground());
+        label.setLabelFor(field);
+        return label;
+    }
+
+    /**
+     * Creates a panel containing two pairs of labels and fields for
+     * displaying the current graph values. This method exists to help with
+     * laying out the fields in columns. If one or more components are null
+     * then these components will be represented by blank space.
+     * 
+     * @param label1  the label for the first field. This label will
+     *                 be placed in the upper left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field1  the field corresponding to the first label. This
+     *                 field will be placed in the upper right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     * @param label2  the label for the second field. This label will
+     *                 be placed in the lower left section of the panel.
+     *                 If this parameter is null, this section of the
+     *                 panel will be left blank.
+     * @param field2  the field corresponding to the second label. This
+     *                 field will be placed in the lower right section
+     *                 of the panel. If this parameter is null, this
+     *                 section of the panel will be left blank.
+     */
+    private Box createInfoColumn(JLabel label1, JTextField [/INST]
+
+
+

++
+
++
+
+
+
+

+

+
++
+
+
+++++++
+++++"
"diff --git a/CHANGELOG.md b/CHANGELOG.md
index f0762d2a7..b7a7f412a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,5 @@
 ## 0.9.3-rc2
+ * STORM-558: change ""swap!"" to ""reset!"" to fix assignment-versions in supervisor
  * STORM-555: Storm json response should set charset to UTF-8
  * STORM-513: check heartbeat from multilang subprocess
  * STORM-549: ""topology.enable.message.timeouts"" does nothing",add STORM - 558 to changelog,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/CHANGELOG.md b/CHANGELOG.md
index f0762d2a7..b7a7f412a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,4 +1,5 @@
 ## 0.9.3-rc2
+ * STORM-558: change ""swap!"" to ""reset!"" to fix assignment-versions in supervisor
  * STORM-555: Storm json response should set charset to UTF-8
  * STORM-513: check heartbeat from multilang subprocess
  * STORM-549: ""topology.enable.message.timeouts"" does nothing [/INST]  Here is a possible meaningful commit message based on the diff you provided:
```
 fixes and improvements for Storm 0.9.3-rc2

 * updated CHANGELOG.md to fix ""swap!"" to ""reset"
"diff --git a/src/main/java/net/dv8tion/jda/core/entities/Guild.java b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
index ea4dce7d..aed17f3e 100644
--- a/src/main/java/net/dv8tion/jda/core/entities/Guild.java
+++ b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
@@ -117,21 +117,9 @@ public interface Guild extends ISnowflake
      */
     List<TextChannel> getTextChannels();
     List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the TextChannel to create
-//     * @return
-//     *      the ChannelManager for the created TextChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createTextChannel(String name);
-//
+
     VoiceChannel getVoiceChannelById(String id);
+
     /**
      * The {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels} available on the {@link net.dv8tion.jda.core.entities.Guild Guild}.
      * The channels returned will be sorted according to their position.
@@ -140,20 +128,8 @@ public interface Guild extends ISnowflake
      *      An Immutable List of {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels}.
      */
     List<VoiceChannel> getVoiceChannels();
+
     List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the VoiceChannel to create
-//     * @return
-//     *      the ChannelManager for the created VoiceChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createVoiceChannel(String name);
 
     /**
      * This returns the {@link net.dv8tion.jda.core.entities.Role Role} which has the same id as the one provided.<br>
@@ -175,42 +151,6 @@ public interface Guild extends ISnowflake
      */
     List<Role> getRoles();
     List<Role> getRolesByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     *
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    RoleManager createRole();
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this {@link net.dv8tion.jda.core.entities.Guild Guild} with the same settings as the given {@link net.dv8tion.jda.core.entities.Role Role}.
-//     * It will be placed at the bottom (just over the @everyone role) to avoid permission hierarchy conflicts.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     * and all {@link net.dv8tion.jda.Permission Permissions} the given {@link net.dv8tion.jda.core.entities.Role Role} has.
-//     *
-//     * @param role
-//     *      The {@link net.dv8tion.jda.core.entities.Role Role} that should be copied
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     * @throws net.dv8tion.jda.exceptions.PermissionException
-//     *      if the bot doesn't has {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission} and every Permission the given Role has
-//     */
-//    RoleManager createCopyOfRole(Role role);
-
-//
-//    /**
-//     * Provides the {@link net.dv8tion.jda.core.entities.Role Role} that determines the color for the provided {@link net.dv8tion.jda.core.entities.User User}
-//     *
-//     * If the {@link net.dv8tion.jda.core.entities.User User} has the default color, this returns the same as getPublicRole();
-//     */
-//    Role getColorDeterminantRoleForUser(User user);
 
     /**
      * The @everyone {@link net.dv8tion.jda.core.entities.Role Role} of this {@link net.dv8tion.jda.core.entities.Guild Guild}
diff --git a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
index ccc405fd..cf56fabe 100644
--- a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
+++ b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
@@ -872,6 +872,100 @@ public class GuildController
         };
     }
 
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
+     *
+     * @param name
+     *      the name of the TextChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<TextChannel> createTextChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 - 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""text"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<TextChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                TextChannel tc = EntityBuilder.get(api).createTextChannel(chanJson, guild.getId());
+
+                request.onSuccess(tc);
+            }
+        };
+    }
+
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission.
+     *
+     * @param name
+     *      the name of the VoiceChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<VoiceChannel> createVoiceChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 to 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""voice"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<VoiceChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                VoiceChannel vc = EntityBuilder.get(api).createVoiceChannel(chanJson, guild.getId());
+
+                request.onSuccess(vc);
+            }
+        };
+    }
+
     protected void checkAvailable()
     {
         if (!guild.isAvailable())
diff --git a/src/main/java/net/dv8tion/jda/core/requests/Route.java b/src/main/java/net/dv8tion/jda/core/requests/Route.java
index 9524a9f2..b94cd7eb 100644
--- a/src/main/java/net/dv8tion/jda/core/requests/Route.java
+++ b/src/main/java/net/dv8tion/jda/core/requests/Route.java
@@ -52,6 +52,7 @@ public class Route
     {
         public static final Route GET_GUILD =        new Route(GET,    ""guilds/{guild_id}"",                   ""guild_id"");
         public static final Route MODIFY_GUILD =     new Route(PATCH,  ""guilds/{guild_id}"",                   ""guild_id"");
+        public static final Route CREATE_CHANNEL =   new Route(POST,   ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_CHANNELS =     new Route(GET,    ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_BANS =         new Route(GET,    ""guilds/{guild_id}/bans"",              ""guild_id"");
@@ -60,7 +61,7 @@ public class Route
         public static final Route UNBAN =            new Route(DELETE, ""guilds/{guild_id}/bans/{user_id}"",    ""guild_id"");
         public static final Route KICK_MEMBER =      new Route(DELETE, ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
         public static final Route MODIFY_MEMBER =    new Route(PATCH,  ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
-        public static final Route MODIFY_SELF_NICK = new Route(PATCH, ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
+        public static final Route MODIFY_SELF_NICK = new Route(PATCH,  ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
         public static final Route PRUNABLE_COUNT =   new Route(GET,    ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
         public static final Route PRUNE_MEMBERS =    new Route(POST,   ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
 
@@ -80,9 +81,9 @@ public class Route
 
     public static class Channels
     {
-        public static final Route DELETE_CHANNEL = new Route(DELETE, ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route MODIFY_CHANNEL = new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route SEND_TYPING =    new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
+        public static final Route DELETE_CHANNEL =       new Route(DELETE, ""channels/{channel_id}"");
+        public static final Route MODIFY_CHANNEL =       new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
+        public static final Route SEND_TYPING =          new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
         public static final Route GET_PERMISSIONS =      new Route(GET,    ""channels/{channel_id}/permissions"",                   ""channel_id"");
         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");
         public static final Route CREATE_PERM_OVERRIDE = new Route(PUT,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");",Added GuildController <issue_id> reateTextChannel ( String ) and <issue_id> reateVoiceChannel ( String ) .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/main/java/net/dv8tion/jda/core/entities/Guild.java b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
index ea4dce7d..aed17f3e 100644
--- a/src/main/java/net/dv8tion/jda/core/entities/Guild.java
+++ b/src/main/java/net/dv8tion/jda/core/entities/Guild.java
@@ -117,21 +117,9 @@ public interface Guild extends ISnowflake
      */
     List<TextChannel> getTextChannels();
     List<TextChannel> getTextChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the TextChannel to create
-//     * @return
-//     *      the ChannelManager for the created TextChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createTextChannel(String name);
-//
+
     VoiceChannel getVoiceChannelById(String id);
+
     /**
      * The {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels} available on the {@link net.dv8tion.jda.core.entities.Guild Guild}.
      * The channels returned will be sorted according to their position.
@@ -140,20 +128,8 @@ public interface Guild extends ISnowflake
      *      An Immutable List of {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannels}.
      */
     List<VoiceChannel> getVoiceChannels();
+
     List<VoiceChannel> getVoiceChannelsByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_CHANNEL MANAGE_CHANNEL Permission}
-//     *
-//     * @param name
-//     *      the name of the VoiceChannel to create
-//     * @return
-//     *      the ChannelManager for the created VoiceChannel
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    ChannelManager createVoiceChannel(String name);
 
     /**
      * This returns the {@link net.dv8tion.jda.core.entities.Role Role} which has the same id as the one provided.<br>
@@ -175,42 +151,6 @@ public interface Guild extends ISnowflake
      */
     List<Role> getRoles();
     List<Role> getRolesByName(String name, boolean ignoreCase);
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this Guild.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     *
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     */
-//    RoleManager createRole();
-//
-//    /**
-//     * Creates a new {@link net.dv8tion.jda.core.entities.Role Role} in this {@link net.dv8tion.jda.core.entities.Guild Guild} with the same settings as the given {@link net.dv8tion.jda.core.entities.Role Role}.
-//     * It will be placed at the bottom (just over the @everyone role) to avoid permission hierarchy conflicts.
-//     * For this to be successful, the logged in account has to have the {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission}
-//     * and all {@link net.dv8tion.jda.Permission Permissions} the given {@link net.dv8tion.jda.core.entities.Role Role} has.
-//     *
-//     * @param role
-//     *      The {@link net.dv8tion.jda.core.entities.Role Role} that should be copied
-//     * @return
-//     *      the RoleManager for the created Role
-//     * @throws net.dv8tion.jda.exceptions.GuildUnavailableException
-//     *      if the guild is temporarily unavailable
-//     * @throws net.dv8tion.jda.exceptions.PermissionException
-//     *      if the bot doesn't has {@link net.dv8tion.jda.Permission#MANAGE_ROLES MANAGE_ROLES Permission} and every Permission the given Role has
-//     */
-//    RoleManager createCopyOfRole(Role role);
-
-//
-//    /**
-//     * Provides the {@link net.dv8tion.jda.core.entities.Role Role} that determines the color for the provided {@link net.dv8tion.jda.core.entities.User User}
-//     *
-//     * If the {@link net.dv8tion.jda.core.entities.User User} has the default color, this returns the same as getPublicRole();
-//     */
-//    Role getColorDeterminantRoleForUser(User user);
 
     /**
      * The @everyone {@link net.dv8tion.jda.core.entities.Role Role} of this {@link net.dv8tion.jda.core.entities.Guild Guild}
diff --git a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
index ccc405fd..cf56fabe 100644
--- a/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
+++ b/src/main/java/net/dv8tion/jda/core/managers/GuildController.java
@@ -872,6 +872,100 @@ public class GuildController
         };
     }
 
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.TextChannel TextChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission
+     *
+     * @param name
+     *      the name of the TextChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.TextChannel TextChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<TextChannel> createTextChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 - 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""text"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<TextChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                TextChannel tc = EntityBuilder.get(api).createTextChannel(chanJson, guild.getId());
+
+                request.onSuccess(tc);
+            }
+        };
+    }
+
+    /**
+     * Creates a new {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel} in this Guild.
+     * For this to be successful, the logged in account has to have the
+     * {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL MANAGE_CHANNEL} Permission.
+     *
+     * @param name
+     *      the name of the VoiceChannel to create
+     * @return
+     *      {@link net.dv8tion.jda.core.requests.RestAction RestAction} - <br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Type</b>: {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}<br>
+     *      &nbsp;&nbsp;&nbsp;&nbsp;<b>Value</b>: The newly created {@link net.dv8tion.jda.core.entities.VoiceChannel VoiceChannel}
+     * @throws net.dv8tion.jda.core.exceptions.PermissionException
+     *      If the logged in account does not have the {@link net.dv8tion.jda.core.Permission#MANAGE_CHANNEL} permission.
+     * @throws java.lang.IllegalArgumentException
+     *      If the provided name is less than 2 characters or greater than 100 characters in length
+     * @throws net.dv8tion.jda.core.exceptions.GuildUnavailableException
+     *      if the guild is temporarily unavailable
+     */
+    public RestAction<VoiceChannel> createVoiceChannel(String name)
+    {
+        checkAvailable();
+        checkPermission(Permission.MANAGE_CHANNEL);
+        checkNull(name, ""name"");
+
+        if (name.length() < 2 || name.length() > 100)
+            throw new IllegalArgumentException(""Provided name must be 2 to 100 characters in length"");
+
+        JSONObject body = new JSONObject()
+                .put(""type"", ""voice"")
+                .put(""name"", name);
+        Route.CompiledRoute route = Route.Guilds.CREATE_CHANNEL.compile(guild.getId());
+        return new RestAction<VoiceChannel>(getJDA(), route, body)
+        {
+            @Override
+            protected void handleResponse(Response response, Request request)
+            {
+                if (!response.isOk())
+                    request.onFailure(response);
+
+                JSONObject chanJson = response.getObject();
+                VoiceChannel vc = EntityBuilder.get(api).createVoiceChannel(chanJson, guild.getId());
+
+                request.onSuccess(vc);
+            }
+        };
+    }
+
     protected void checkAvailable()
     {
         if (!guild.isAvailable())
diff --git a/src/main/java/net/dv8tion/jda/core/requests/Route.java b/src/main/java/net/dv8tion/jda/core/requests/Route.java
index 9524a9f2..b94cd7eb 100644
--- a/src/main/java/net/dv8tion/jda/core/requests/Route.java
+++ b/src/main/java/net/dv8tion/jda/core/requests/Route.java
@@ -52,6 +52,7 @@ public class Route
     {
         public static final Route GET_GUILD =        new Route(GET,    ""guilds/{guild_id}"",                   ""guild_id"");
         public static final Route MODIFY_GUILD =     new Route(PATCH,  ""guilds/{guild_id}"",                   ""guild_id"");
+        public static final Route CREATE_CHANNEL =   new Route(POST,   ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_CHANNELS =     new Route(GET,    ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route MODIFY_CHANNELS =  new Route(PATCH,  ""guilds/{guild_id}/channels"",          ""guild_id"");
         public static final Route GET_BANS =         new Route(GET,    ""guilds/{guild_id}/bans"",              ""guild_id"");
@@ -60,7 +61,7 @@ public class Route
         public static final Route UNBAN =            new Route(DELETE, ""guilds/{guild_id}/bans/{user_id}"",    ""guild_id"");
         public static final Route KICK_MEMBER =      new Route(DELETE, ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
         public static final Route MODIFY_MEMBER =    new Route(PATCH,  ""guilds/{guild_id}/members/{user_id}"", ""guild_id"");
-        public static final Route MODIFY_SELF_NICK = new Route(PATCH, ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
+        public static final Route MODIFY_SELF_NICK = new Route(PATCH,  ""guilds/{guild_id}/members/@me/nick"",  ""guild_id"");
         public static final Route PRUNABLE_COUNT =   new Route(GET,    ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
         public static final Route PRUNE_MEMBERS =    new Route(POST,   ""guilds/{guild_id}/prune?days={}"",     ""guild_id"");
 
@@ -80,9 +81,9 @@ public class Route
 
     public static class Channels
     {
-        public static final Route DELETE_CHANNEL = new Route(DELETE, ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route MODIFY_CHANNEL = new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
-        public static final Route SEND_TYPING =    new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
+        public static final Route DELETE_CHANNEL =       new Route(DELETE, ""channels/{channel_id}"");
+        public static final Route MODIFY_CHANNEL =       new Route(PATCH,  ""channels/{channel_id}"",        ""channel_id"");
+        public static final Route SEND_TYPING =          new Route(POST,   ""channels/{channel_id}/typing"", ""channel_id"");
         public static final Route GET_PERMISSIONS =      new Route(GET,    ""channels/{channel_id}/permissions"",                   ""channel_id"");
         public static final Route GET_PERM_OVERRIDE =    new Route(GET,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id"");
         public static final Route CREATE_PERM_OVERRIDE = new Route(PUT,    ""channels/{channel_id}/permissions/{permoverride_id}"", ""channel_id""); [/INST]
 
     public static Route(POST,   ""channels/{channel_id""
         public static Route(POST, ""channels/{channel_id""
         Route(guild_id"");
         public static Route("
"diff --git a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
index 582681d79..8709cb0f0 100644
--- a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
+++ b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
@@ -308,7 +308,12 @@ public interface MeterRegistry {
     /**
      * Execute an algorithm to bind one or more metrics to the registry.
      */
-    MeterRegistry bind(MeterBinder... binders);
+    default MeterRegistry bind(MeterBinder... binders) {
+        for (MeterBinder binder : binders) {
+            binder.bindTo(this);
+        }
+        return this;
+    }
 
     /**
      * Record metrics on Guava caches.",Provide default implementation of MeterRegistry . bind,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
index 582681d79..8709cb0f0 100644
--- a/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
+++ b/src/main/java/org/springframework/metrics/instrument/MeterRegistry.java
@@ -308,7 +308,12 @@ public interface MeterRegistry {
     /**
      * Execute an algorithm to bind one or more metrics to the registry.
      */
-    MeterRegistry bind(MeterBinder... binders);
+    default MeterRegistry bind(MeterBinder... binders) {
+        for (MeterBinder binder : binders) {
+            binder.bindTo(this);
+        }
+        return this;
+    }
 
     /**
      * Record metrics on Guava caches. [/INST]  Here is a possible meaningful commit message based on the diff you provided:

""Added default implementation for `bind` method in `MeterRegistry` to allow chaining of multiple metric binders. This allows for more flexible and"
"diff --git a/.github/workflows/sonatype.yaml b/.github/workflows/sonatype.yaml
index 55619adb17..b306aa1b71 100644
--- a/.github/workflows/sonatype.yaml
+++ b/.github/workflows/sonatype.yaml
@@ -23,7 +23,7 @@ on:
 
 jobs:
   build:
-    if: github.repository_owner == 'mybatis'
+    if: github.repository_owner == 'mybatis' && ! contains(toJSON(github.event.head_commit.message), '[maven-release-plugin]')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
diff --git a/travis/after_success.sh b/travis/after_success.sh
index ea1fad6c0a..3a47192e81 100755
--- a/travis/after_success.sh
+++ b/travis/after_success.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-#    Copyright 2009-2019 the original author or authors.
+#    Copyright 2009-2020 the original author or authors.
 #
 #    Licensed under the Apache License, Version 2.0 (the ""License"");
 #    you may not use this file except in compliance with the License.",Skip push to sonatype during release process,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/.github/workflows/sonatype.yaml b/.github/workflows/sonatype.yaml
index 55619adb17..b306aa1b71 100644
--- a/.github/workflows/sonatype.yaml
+++ b/.github/workflows/sonatype.yaml
@@ -23,7 +23,7 @@ on:
 
 jobs:
   build:
-    if: github.repository_owner == 'mybatis'
+    if: github.repository_owner == 'mybatis' && ! contains(toJSON(github.event.head_commit.message), '[maven-release-plugin]')
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
diff --git a/travis/after_success.sh b/travis/after_success.sh
index ea1fad6c0a..3a47192e81 100755
--- a/travis/after_success.sh
+++ b/travis/after_success.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-#    Copyright 2009-2019 the original author or authors.
+#    Copyright 2009-2020 the original author or authors.
 #
 #    Licensed under the Apache License, Version 2.0 (the ""License"");
 #    you may not use this file except in compliance with the License. [/INST]  Here is a meaningful commit message that summarizes the changes in the two files:

`Improved Sonatype workflow to exclude Maven release plugin deployments`

The commit message explains the purpose of the changes in the `son"
"diff --git a/docs/blob.txt b/docs/blob.txt
index af523c8f3e..ec740411a9 100644
--- a/docs/blob.txt
+++ b/docs/blob.txt
@@ -1,3 +1,5 @@
+.. _blob_support:
+
 ============
 Blob Support
 ============
diff --git a/docs/sql/ddl.txt b/docs/sql/ddl.txt
index 21f2ffe969..e918384c20 100644
--- a/docs/sql/ddl.txt
+++ b/docs/sql/ddl.txt
@@ -343,12 +343,19 @@ Example for combining custom routing and shard definition::
     CREATE OK (... sec)
 
 
+.. _replication:
+
 Replication
 ===========
 
-By default Crate uses an replication factor of 1. If e.g. a cluster with 2 nodes is set up and
-an index is created using 5 shards, each node will have 5 shards.
-Defining the number of replicas is done using the ``number_of_replicas`` property.
+Replication of a table in Crate means that each primary shard of a
+table is stored additionally on so called secondary shards. This might
+be useful for better read performance and high availability. If not
+specified, crate creates one replica, which means that a tables
+content is stored twice accross the nodes of a cluster.
+
+Defining the number of replicas is done using the
+``number_of_replicas`` property.
 
 Example::
 
@@ -362,30 +369,22 @@ Example::
 The `number_of_replicas` property also accepts an string as parameter that
 contains a `range`.
 
-A range is a definition of `minimum number of replicas` to `maximum number of
-replicas`.
-
-For example:
-
-    =====  ======================================================================
-    Range  Explanation
-    =====  ======================================================================
-    0-1    Will create 0 or 1 replicas depending on the number of available nodes
-    -----  ----------------------------------------------------------------------
-    2-4    Table requires at least 2 replicas to be fully replicated. Will
-           create up to 4 if nodes are added.
-    -----  ----------------------------------------------------------------------
-    0-all  Will expand the number of replicas to the available number of nodes.
-    =====  ======================================================================
+A range is a definition of `minimum number of replicas` to `maximum
+number of replicas` depending on the number of nodes in the
+cluster. The table below shows some examples.
 
-While defining replication together with :ref:`sharding <sql_ddl_sharding>`, it needs to be
-defined after::
+===== ======================================================================
+Range Explanation
+===== ======================================================================
+0-1   Will create 0 or 1 replicas depending on the number of available nodes
+----- ----------------------------------------------------------------------
+2-4   Table requires at least 2 replicas to be fully replicated. Will
+      create up to 4 if nodes are added.
+----- ----------------------------------------------------------------------
+0-all Will expand the number of replicas to the available number of nodes.
+===== ======================================================================
 
-    cr> create table my_table10a (
-    ...   first_column int,
-    ...   second_column string
-    ... ) clustered by (first_column) into 10 shards with (number_of_replicas=1)
-    CREATE OK (... sec)
+For details of the range syntax refer to :ref:`number_of_replicas`.
 
 .. note::
 
@@ -393,22 +392,26 @@ defined after::
 
 .. _fulltext-indices:
 
+
+.. _indices_and_fulltext:
+
 Indices and fulltext search
 ============================
 
-Fulltext indices take the contents of one or more fields and split it up into tokens that are
-used for fulltext-search. The transformation from a text to separate tokens is done by an
-analyzer. In order to create fulltext search queries a
-:ref:`fulltext index with an analyzer <sql_ddl_index_fulltext>` must be defined for the related
-columns.
+Fulltext indices take the contents of one or more fields and split it
+up into tokens that are used for fulltext-search. The transformation
+from a text to separate tokens is done by an analyzer. In order to
+create fulltext search queries a :ref:`fulltext index with an analyzer
+<sql_ddl_index_fulltext>` must be defined for the related columns.
 
 .. _sql_ddl_index_definition:
 
 Index Definition
 ----------------
 
-At Crate, every column's data is indexed using the ``plain`` index method by default.
-Currently 3 choices related to index definition exists:
+In Crate, every column's data is indexed using the ``plain`` index
+method by default.  Currently there are 3 choices related to index
+definition:
 
   - `Disable indexing`_
 
@@ -427,9 +430,9 @@ Currently 3 choices related to index definition exists:
 Disable indexing
 ................
 
-Indexing can be turned off by using the ``INDEX OFF`` column definition.
-Without an index the column can never be hit by a query, and is only available as a result
-column::
+Indexing can be turned off by using the ``INDEX OFF`` column
+definition. Without an index the column can never be hit by a query,
+and is only available as a result column::
 
     cr> create table my_table1b (
     ...   first_column string INDEX OFF
@@ -442,8 +445,9 @@ column::
 Plain index (Default)
 .....................
 
-An index of type ``plain`` is indexing the input data as-is without analyzing.
-Using the ``plain`` index method is the default behaviour but can also be declared explicitly::
+An index of type ``plain`` is indexing the input data as-is without
+analyzing.  Using the ``plain`` index method is the default behaviour
+but can also be declared explicitly::
 
     cr> create table my_table1b1 (
     ...   first_column string INDEX using plain
@@ -463,21 +467,22 @@ This results in the same behaviour than without any index declaration::
 Fulltext index with analyzer
 ............................
 
-By defining an index on a column, it's analyzed data is indexed instead of the raw data.
-Thus, depending on the used analyzer, querying for the exact data may not work anymore.
-See :ref:`builtin-analyzer` for details about available builtin analyzer or
-:ref:`sql-ddl-custom-analyzer`.
+By defining an index on a column, it's analyzed data is indexed
+instead of the raw data.  Thus, depending on the used analyzer,
+querying for the exact data may not work anymore.  See
+:ref:`builtin-analyzer` for details about available builtin analyzer
+or :ref:`sql-ddl-custom-analyzer`.
 
-If no analyzer is specified using a fulltext index, the :ref:`standard <standard-analyzer>`
-analyzer is used::
+If no analyzer is specified when using a fulltext index, the
+:ref:`standard <standard-analyzer>` analyzer is used::
 
     cr> create table my_table1c (
     ...   first_column string INDEX using fulltext
     ... )
     CREATE OK (... sec)
 
-Defining the usage of a concrete analyzer is straight forward by defining the analyzer as a
-parameter using the ``WITH`` statement::
+Defining the usage of a concrete analyzer is straight forward by
+defining the analyzer as a parameter using the ``WITH`` statement::
 
     cr> create table my_table1d (
     ...   first_column string INDEX using fulltext with(analyzer='english')
@@ -488,8 +493,9 @@ parameter using the ``WITH`` statement::
 Defining a named index column definition
 ........................................
 
-It's also possible to define an index column which treat the data of a given column as input.
-This is especially useful if you want to search for both, the exact and analyzed data::
+It's also possible to define an index column which treat the data of a
+given column as input.  This is especially useful if you want to
+search for both, the exact and analyzed data::
 
     cr> create table my_table1e (
     ...   first_column string,
@@ -509,8 +515,9 @@ Of course defining a custom analyzer is possible here too::
 Defining a composite index
 ..........................
 
-Defining a composite (or combined) index is done using the same syntax as above despite multiple
-columns are given to the ``fulltext`` index method::
+Defining a composite (or combined) index is done using the same syntax
+as above despite multiple columns are given to the ``fulltext`` index
+method::
 
     cr> create table documents (
     ...   title string,
@@ -533,62 +540,29 @@ Composite indices can include nested columns within object columns as well::
 
 .. _sql-ddl-custom-analyzer:
 
+.. _create_custom_analyzer:
+
 Create custom analyzer
 ----------------------
 
-An analyzer consists of one tokenizer, zero or more token-filters, and zero or more char-filters.
+An analyzer consists of one tokenizer, zero or more token-filters, and
+zero or more char-filters.
 
-When a field-content is analyzed to become a stream of tokens, the char-filter is applied at first.
-It is used to filter some special chars from the stream of characters that make up the content.
+When a field-content is analyzed to become a stream of tokens, the
+char-filter is applied at first.  It is used to filter some special
+chars from the stream of characters that make up the content.
 
 Tokenizers split the possibly filtered stream of characters into tokens.
 
-Token-filters can add tokens, delete tokens or transform them to finally produce the desired
-stream of tokens.
-
-With these elements in place, analyzer provide finegrained control over building a token stream
-used for fulltext search.
-For example you can use language specific analyzers, tokenizers and token-filters to get proper
-search results for data provided in a certain language.
-
-
-
-Create Analyzer Syntax::
-
-    CREATE ANALYZER <analyzer_name> [EXTENDS <analyzer_name>] (
-        [
-          TOKENIZER <tokenizer_name> [WITH] (
-            <tokenizer_property>=<value>,
-            ...
-          ),
-        ]
-        [
-          TOKEN_FILTERS [WITH] (
-            <token_filter_name>
-            [ [WITH] (
-                <token_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          ),
-        ]
-        [
-          CHAR_FILTERS [WITH] (
-            <char_filter_name>
-            [ [WITH] (
-                <char_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          )
-        ]
-    )
-
-Multiple char filters and token filters are allowed but at maximum one tokenizer.
-Order does not matter.
-A simple Example::
+Token-filters can add tokens, delete tokens or transform them to
+finally produce the desired stream of tokens.
+
+With these elements in place, analyzers provide finegrained control
+over building a token stream used for fulltext search.  For example
+you can use language specific analyzers, tokenizers and token-filters
+to get proper search results for data provided in a certain language.
+
+Here is a simple Example::
 
     cr> create ANALYZER myanalyzer (
     ...   TOKENIZER whitespace,
@@ -606,22 +580,17 @@ A simple Example::
     ... )
     CREATE OK (... sec)
 
-This example creates an analyzer called ``myanalyzer`` to be used in index-definitions and
-index-constraints.
-It will use a :ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter` token-filter
-and a :ref:`kstem-tokenfilter` token-filter, a :ref:`htmlstrip-charfilter` char-filter
-and a custom char-filter that extends the :ref:`mapping-charfilter` char-filter.
-
-You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and :ref:`builtin-char-filter`
-by just writing their names and you can extend and parameterize them,
-see for example the ``mymapping`` char-filter above. You have to give these extended ones a
-unique name.
+This example creates an analyzer called ``myanalyzer`` to be used in
+index-definitions and index-constraints.  It will use a
+:ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter`
+token-filter and a :ref:`kstem-tokenfilter` token-filter, a
+:ref:`htmlstrip-charfilter` char-filter and a custom char-filter that
+extends the :ref:`mapping-charfilter` char-filter.
 
-.. note:: Starting with release 0.18.0 one could extend custom tokenizers,
-          token-filters and char-filters. This is not possible anymore.
-          Nonetheless you can still extend custom analyzers to reuse their elements.
-          We might reintroduce this feature when we support creating tokenizers etc. standalone
-          e.g. by a ``CREATE TOKENIZER`` statement.
+You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and
+:ref:`builtin-char-filter` by just writing their names and you can
+extend and parameterize them, see for example the ``mymapping``
+char-filter above. You have to give these extended ones a unique name.
 
 Extending Bultin Analyzer
 -------------------------
@@ -635,12 +604,12 @@ You can extend and parameterize :ref:`builtin-analyzer` like this::
     ... )
     CREATE OK (... sec)
 
-If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or token-filter cannot be defined.
-In this case use the parameters available for the extended :ref:`builtin-analyzer`.
+If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or
+token-filter cannot be defined.  In this case use the parameters
+available for the extended :ref:`builtin-analyzer`.
 
-If you extend custom-analyzers, every part of the analyzer that is ommitted will be taken from
-the extended one.
-Example::
+If you extend custom-analyzers, every part of the analyzer that is
+ommitted will be taken from the extended one.  Example::
 
     cr> create ANALYZER e2 EXTENDS myanalyzer (
     ...     TOKENIZER mypattern WITH (
@@ -650,8 +619,8 @@ Example::
     ... )
     CREATE OK (... sec)
 
-This analyzer will use the char-filters and token-filters from ``myanalyzer``
-and will override the tokenizer with ``mypattern``.
+This analyzer will use the char-filters and token-filters from
+``myanalyzer`` and will override the tokenizer with ``mypattern``.
 
 Analyzer Reference
 ------------------
diff --git a/docs/sql/dml.txt b/docs/sql/dml.txt
index 6928a51ab2..c2f636fb9d 100644
--- a/docs/sql/dml.txt
+++ b/docs/sql/dml.txt
@@ -548,6 +548,8 @@ Deleting rows in Crate is done using the SQL ``DELETE`` statement::
     DELETE OK, ... rows affected (... sec)
 
 
+.. _importing_data:
+
 Importing data
 ==============
 
diff --git a/docs/sql/index.txt b/docs/sql/index.txt
index c6ea8397ac..c5c9dccf3c 100644
--- a/docs/sql/index.txt
+++ b/docs/sql/index.txt
@@ -2,8 +2,9 @@
 Crate SQL
 =========
 
-Crate uses SQL to query documents.
-For general information about SQL please refer to `Wikipedia SQL`_.
+Crate uses SQL to query documents. For consice reference documentation
+see :doc:`sql`. For general information about SQL please refer to
+`Wikipedia SQL`_.
 
 .. _`Wikipedia SQL`: http://en.wikipedia.org/wiki/Sql
 
diff --git a/docs/sql/reference/copy.txt b/docs/sql/reference/copy.txt
new file mode 100644
index 0000000000..f0e19c946d
--- /dev/null
+++ b/docs/sql/reference/copy.txt
@@ -0,0 +1,39 @@
+====
+COPY
+====
+
+Copy data between a file and a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    COPY table_ident FROM 'path'
+
+Description
+===========
+
+COPY FROM copies data from the filesystem of any cluster node to a
+specified table.
+
+The files to be copied from need to be accessible from the crate
+server process and the name must be specified from the viewpoint of
+the server.
+
+The input files need to have one line per record. Records are
+formatted in JSON.
+
+For examples see: :ref:`importing_data`.
+
+Parameters
+==========
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table where the data should be put.
+
+:path: A file or directory path with an optional `PCRE`_ file pattern
+    suffix. If the path is relative, it is based on the absolute path
+    of the node's data location.
+
+.. _PCRE: http://www.pcre.org/
diff --git a/docs/sql/reference/create_analyzer.txt b/docs/sql/reference/create_analyzer.txt
new file mode 100644
index 0000000000..051ccc6514
--- /dev/null
+++ b/docs/sql/reference/create_analyzer.txt
@@ -0,0 +1,64 @@
+===============
+CREATE ANALYZER
+===============
+
+Define a new fulltext analyzer.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name EXTENDS parent_analyzer_name
+        WITH ( override_parameter [= value] [, ... ] )
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name (
+        [ TOKENIZER tokenizer_name
+           [ WITH ( tokenizer_parameter [= value] [, ... ] ) ]
+        ]
+        [ TOKEN_FILTERS (
+            { token_filter_name
+              [ WITH ( token_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+        [ CHAR_FILTERS (
+            { char_filter_name
+              [ WITH ( char_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+    )
+
+Description
+===========
+
+CREATE ANALYZER speifies a whole analyzer chain for use in fulltext
+searches. It is possible to extend an existing analyzer or define a
+new analyzer chain from scratch. For examples and detailed explanation
+see :ref:`create_custom_analyzer`.
+
+Parameters
+==========
+
+:analyzer_name: the globally unique name of the analzyer being created.
+
+:parent_analyzer_name: the name of the analyzer to inherit defaults from.
+
+:override_parameter: the name of a parameter of the parent analyzer
+    which should be assigned a new value to.
+
+:tokenizer_name: the name of a builtin tokenizer to be used.
+
+:tokenizer_parameter: a name of a parameter for a given tokenizer.
+
+:token_filter_name: the name of a builtin token filter to be used.
+
+:token_filter_parameter: a name of a parameter for a given token filter.
+
+:char_filter_name: the name of a builtin char filter to be used.
+
+:char_filter_parameter: a name of a parameter for a given char filter.
+
diff --git a/docs/sql/reference/create_blob_table.txt b/docs/sql/reference/create_blob_table.txt
new file mode 100644
index 0000000000..d895ff6c4e
--- /dev/null
+++ b/docs/sql/reference/create_blob_table.txt
@@ -0,0 +1,24 @@
+=================
+CREATE BLOB TABLE
+=================
+
+Define a new table for storing binary large objects.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE BLOB TABLE table_name
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+Description
+===========
+
+CREATE BLOB TABLE will create a new table for holding BLOBS. For
+details and examples see :ref:`blob_support`.
+
+The CLUSTERED and WITH clauses follow the same semantics described
+under :ref:`clustered_clause` and :ref:`with_clause`.
diff --git a/docs/sql/reference/create_table.txt b/docs/sql/reference/create_table.txt
new file mode 100644
index 0000000000..ff2edafabc
--- /dev/null
+++ b/docs/sql/reference/create_table.txt
@@ -0,0 +1,148 @@
+============
+CREATE TABLE
+============
+
+Define a new table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE TABLE table_name ( [
+    { column_name data_type [ column_constraint [ ... ] ] | table_constraint }
+    [, ... ] ] )
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+where ``column_constraint`` is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY |
+    INDEX { OFF | USING { PLAIN |
+                          FULLTEXT [ WITH ( analyzer = analyzer_name ) ]  }
+  }
+
+
+and table_constraint is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY ( column_name [, ... ] ) |
+    INDEX index_name USING FULLTEXT ( column_name [, ... ] )
+         [ WITH ( analyzer = analyzer_name ) ]
+  }
+
+Description
+===========
+
+CREATE TABLE will create a new, initially empty table.
+
+Setting a schema (for example, CREATE TABLE myschema.mytable ...) is
+currently not supprted. All userspace defined data tables are defined
+under the default schema named ``doc``.
+
+The optional constraint clauses specify constraints (tests) that new
+or updated rows must satisfy for an insert or update operation to
+succeed. A constraint is an SQL object that helps define the set of
+valid values in the table in various ways.
+
+There are two ways to define constraints: table constraints and column
+constraints. A column constraint is defined as part of a column
+definition. A table constraint definition is not tied to a particular
+column, and it can encompass more than one column. Every column
+constraint can also be written as a table constraint; a column
+constraint is only a notational convenience for use when the
+constraint only affects one column.
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to
+    be created.
+
+:column_name: The name of a column to be created in the new table.
+
+:data_type: The data type of the column. This can include array and
+    object specifiers. For more information on the data types
+    supported by Crate see .
+
+PRIMARY KEY Constraint
+======================
+
+The PRIMARY KEY constraint specifies that a column or columns of a
+table can contain only unique (non-duplicate), nonnull values.
+
+Only one primary key can be specified for a table, whether as a column
+constraint or a table constraint.
+
+INDEX Constraint
+================
+
+The INDEX constraint specifies a specific index method on one or more
+columnns.
+
+It is possible to define more than one index per table, whether as a
+column constraint or a table constraint.
+
+For further details about the meaning of the options see
+:ref:`indices_and_fulltext`.
+
+.. _clustered_clause:
+
+CLUSTERED Clause
+================
+
+The optional CLUSTERED clause specifies how a table should be
+distributed accross a cluster.
+
+:num_shards: specifies the number of shards a table is stored in, the default is 5.
+
+:routing_column: allows to explicitly specify a column or field on
+    which basis rows are sharded. all rows having the same value in
+    ``routing_column`` are stored in the same shard. The default is
+    the primary key if specified, otherwise the internal ``_id``
+    column.
+
+.. _with_clause:
+
+WITH Clause
+-----------
+
+The optional WITH clause can specify storage parameters for tables.
+
+.. code-block:: sql
+
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+:storage_parameter: specifies an optional storage parameter for the table.
+
+Available storage paramters are:
+
+
+.. _number_of_replicas:
+
+number_of_replicas
+~~~~~~~~~~~~~~~~~~
+
+Specifies the number or range of replicas each shard of a table should
+have for normal operation, the default is to have 1 replica.
+
+The number of replicas is defined like this:
+
+.. code-block:: sql
+
+    min_replicas [ - [ max_replicas ] ]
+
+:min_replicas: The minimum number of replicas required.
+
+:max_replicas: The maximum number of replicas. The actual maximum
+    number of replicas is max(num_replicas, N-1), where N is the
+    number of data nodes in the cluster. If ``max_replicas`` is the
+    string ``all`` then it will always be N.
+
+For further details and examples see :ref:`replication`.
+
diff --git a/docs/sql/reference/delete.txt b/docs/sql/reference/delete.txt
new file mode 100644
index 0000000000..c9fe959745
--- /dev/null
+++ b/docs/sql/reference/delete.txt
@@ -0,0 +1,30 @@
+======
+DELETE
+======
+
+Delete rows of a table
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DELETE FROM table_ident [ WHERE condition ]
+
+Description
+===========
+
+DELETE deletes rows that satisfy the WHERE clause from the specified
+table. If the WHERE clause is absent, the effect is to delete all rows
+in the table. The result is a valid, but empty table.
+
+Parameters
+==========
+
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table to delete rows from.
+
+:condition: An expression that returns a value of type boolean. Only
+    rows for which this expression returns true will be deleted.
+
diff --git a/docs/sql/reference/drop_table.txt b/docs/sql/reference/drop_table.txt
new file mode 100644
index 0000000000..7cc7822b04
--- /dev/null
+++ b/docs/sql/reference/drop_table.txt
@@ -0,0 +1,25 @@
+==========
+DROP TABLE
+==========
+
+Remove a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DROP [BLOB] TABLE table_name
+
+Description
+===========
+
+DROP TABLE removes tables from the cluster.
+
+Use the ``BLOB`` keyword in order to remove a blob table (see
+:ref:`blob_support`).
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to be removed.
diff --git a/docs/sql/reference/insert.txt b/docs/sql/reference/insert.txt
new file mode 100644
index 0000000000..ef13f0504e
--- /dev/null
+++ b/docs/sql/reference/insert.txt
@@ -0,0 +1,45 @@
+======
+INSERT
+======
+
+Create new rows in a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   INSERT INTO table_ident
+    [ ( column_ident [, ...] ) ]
+    VALUES ( expression [, ...] ) [, ...]
+
+Description
+===========
+
+INSERT creates one or more rows specified by value expressions.
+
+The target column names can be listed in any order. If no list of
+column names is given at all, the default is all the columns of the
+table in lexical order; or the first N column names, if there are only
+N columns supplied by the VALUES clause. The values supplied by the
+VALUES clause are associated with the explicit or implicit column list
+left-to-right.
+
+Each column not present in the explicit or implicit column list will
+not be filled.
+
+If the expression for any column is not of the correct data type,
+automatic type conversion will be attempted.
+
+
+Parameters
+==========
+
+:table_ident: The identifier (optionally schema-qualified) of an
+    existing table.
+
+:column_ident: The name of a column or field in the table pointed to
+   by table_ident.
+
+:expression: An expression or value to assign to the corresponding column.
+
diff --git a/docs/sql/reference/select.txt b/docs/sql/reference/select.txt
new file mode 100644
index 0000000000..84f32352ab
--- /dev/null
+++ b/docs/sql/reference/select.txt
@@ -0,0 +1,193 @@
+======
+SELECT
+======
+
+Retrieve rows from a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   SELECT * | expression [ [ AS ] output_name ] [, ...] FROM table_ident
+     [ WHERE condition ]
+     [ GROUP BY expression [, ...] ]
+     [ ORDER BY expression [ ASC | DESC ] [, ...] ]
+     [ LIMIT num_results ]
+     [ OFFSET start ]
+
+
+Description
+===========
+
+SELECT retrieves rows from a table. The general processing of SELECT
+is as follows:
+
+- The FROM item points to the table where the data should be retrieved
+  from.
+
+- If the WHERE clause is specified, all rows that do not satisfy the
+  condition are eliminated from the output. (See WHERE Clause below.)
+
+- If the GROUP BY clause is specified, the output is combined into
+  groups of rows that match on one or more values.
+
+- The actual output rows are computed using the SELECT output
+  expressions for each selected row or row group.
+
+- If the ORDER BY clause is specified, the returned rows are sorted in
+  the specified order. If ORDER BY is not given, the rows are returned
+  in whatever order the system finds fastest to produce.
+
+- If the LIMIT or OFFSET clause is specified, the SELECT statement
+  only returns a subset of the result rows.
+
+Parameters
+==========
+
+SELECT List
+-----------
+
+The SELECT list specifies expressions that form the output rows of the
+SELECT statement. The expressions can (and usually do) refer to
+columns computed in the FROM clause.
+
+.. code-block:: sql
+
+    SELECT * | expression [ [ AS ] output_name ] [, ...]
+
+Just as in a table, every output column of a SELECT has a name. In a
+simple SELECT this name is just used to label the column for
+display. To specify the name to use for an output column, write AS
+``output_name`` after the column's ``expression``. (You can omit AS,
+but only if the desired output name does not match any reserved
+keyword. For protection against possible future keyword additions, it
+is recommended that you always either write AS or double-quote the
+output name.) If you do not specify a column name, a name is chosen
+automatically by Crate. If the column's expression is a simple column
+reference then the chosen name is the same as that column's name. In
+more complex cases a function or type name may be used, or the system
+may fall back on a generated name.
+
+An output column's name can be used to refer to the column's value in
+ORDER BY and GROUP BY clauses, but not in the WHERE clause; there you
+must write out the expression instead.
+
+Instead of an expression, ``*`` can be written in the output list as a
+shorthand for all the columns of the selected rows. Also, you can
+write table_name.* as a shorthand for the columns coming from just
+that table. In these cases it is not possible to specify new names
+with AS; the output column names will be the same as the table
+columns' names.
+
+FROM Clause
+-----------
+
+The FROM clause specifies the source table for the SELECT:
+
+.. code-block:: sql
+
+    FROM table_ident
+
+:table_ident: The name (optionally schema-qualified) of an existing table.
+
+
+WHERE Clause
+------------
+
+The optional WHERE clause defines the condition to be met for a row to
+be returned:
+
+.. code-block:: sql
+
+    WHERE condition
+
+:condition: a where condition is any expression that evaluates to a
+  result of type boolean. Any row that does not satisfy this condition
+  will be eliminated",added reference docs,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/docs/blob.txt b/docs/blob.txt
index af523c8f3e..ec740411a9 100644
--- a/docs/blob.txt
+++ b/docs/blob.txt
@@ -1,3 +1,5 @@
+.. _blob_support:
+
 ============
 Blob Support
 ============
diff --git a/docs/sql/ddl.txt b/docs/sql/ddl.txt
index 21f2ffe969..e918384c20 100644
--- a/docs/sql/ddl.txt
+++ b/docs/sql/ddl.txt
@@ -343,12 +343,19 @@ Example for combining custom routing and shard definition::
     CREATE OK (... sec)
 
 
+.. _replication:
+
 Replication
 ===========
 
-By default Crate uses an replication factor of 1. If e.g. a cluster with 2 nodes is set up and
-an index is created using 5 shards, each node will have 5 shards.
-Defining the number of replicas is done using the ``number_of_replicas`` property.
+Replication of a table in Crate means that each primary shard of a
+table is stored additionally on so called secondary shards. This might
+be useful for better read performance and high availability. If not
+specified, crate creates one replica, which means that a tables
+content is stored twice accross the nodes of a cluster.
+
+Defining the number of replicas is done using the
+``number_of_replicas`` property.
 
 Example::
 
@@ -362,30 +369,22 @@ Example::
 The `number_of_replicas` property also accepts an string as parameter that
 contains a `range`.
 
-A range is a definition of `minimum number of replicas` to `maximum number of
-replicas`.
-
-For example:
-
-    =====  ======================================================================
-    Range  Explanation
-    =====  ======================================================================
-    0-1    Will create 0 or 1 replicas depending on the number of available nodes
-    -----  ----------------------------------------------------------------------
-    2-4    Table requires at least 2 replicas to be fully replicated. Will
-           create up to 4 if nodes are added.
-    -----  ----------------------------------------------------------------------
-    0-all  Will expand the number of replicas to the available number of nodes.
-    =====  ======================================================================
+A range is a definition of `minimum number of replicas` to `maximum
+number of replicas` depending on the number of nodes in the
+cluster. The table below shows some examples.
 
-While defining replication together with :ref:`sharding <sql_ddl_sharding>`, it needs to be
-defined after::
+===== ======================================================================
+Range Explanation
+===== ======================================================================
+0-1   Will create 0 or 1 replicas depending on the number of available nodes
+----- ----------------------------------------------------------------------
+2-4   Table requires at least 2 replicas to be fully replicated. Will
+      create up to 4 if nodes are added.
+----- ----------------------------------------------------------------------
+0-all Will expand the number of replicas to the available number of nodes.
+===== ======================================================================
 
-    cr> create table my_table10a (
-    ...   first_column int,
-    ...   second_column string
-    ... ) clustered by (first_column) into 10 shards with (number_of_replicas=1)
-    CREATE OK (... sec)
+For details of the range syntax refer to :ref:`number_of_replicas`.
 
 .. note::
 
@@ -393,22 +392,26 @@ defined after::
 
 .. _fulltext-indices:
 
+
+.. _indices_and_fulltext:
+
 Indices and fulltext search
 ============================
 
-Fulltext indices take the contents of one or more fields and split it up into tokens that are
-used for fulltext-search. The transformation from a text to separate tokens is done by an
-analyzer. In order to create fulltext search queries a
-:ref:`fulltext index with an analyzer <sql_ddl_index_fulltext>` must be defined for the related
-columns.
+Fulltext indices take the contents of one or more fields and split it
+up into tokens that are used for fulltext-search. The transformation
+from a text to separate tokens is done by an analyzer. In order to
+create fulltext search queries a :ref:`fulltext index with an analyzer
+<sql_ddl_index_fulltext>` must be defined for the related columns.
 
 .. _sql_ddl_index_definition:
 
 Index Definition
 ----------------
 
-At Crate, every column's data is indexed using the ``plain`` index method by default.
-Currently 3 choices related to index definition exists:
+In Crate, every column's data is indexed using the ``plain`` index
+method by default.  Currently there are 3 choices related to index
+definition:
 
   - `Disable indexing`_
 
@@ -427,9 +430,9 @@ Currently 3 choices related to index definition exists:
 Disable indexing
 ................
 
-Indexing can be turned off by using the ``INDEX OFF`` column definition.
-Without an index the column can never be hit by a query, and is only available as a result
-column::
+Indexing can be turned off by using the ``INDEX OFF`` column
+definition. Without an index the column can never be hit by a query,
+and is only available as a result column::
 
     cr> create table my_table1b (
     ...   first_column string INDEX OFF
@@ -442,8 +445,9 @@ column::
 Plain index (Default)
 .....................
 
-An index of type ``plain`` is indexing the input data as-is without analyzing.
-Using the ``plain`` index method is the default behaviour but can also be declared explicitly::
+An index of type ``plain`` is indexing the input data as-is without
+analyzing.  Using the ``plain`` index method is the default behaviour
+but can also be declared explicitly::
 
     cr> create table my_table1b1 (
     ...   first_column string INDEX using plain
@@ -463,21 +467,22 @@ This results in the same behaviour than without any index declaration::
 Fulltext index with analyzer
 ............................
 
-By defining an index on a column, it's analyzed data is indexed instead of the raw data.
-Thus, depending on the used analyzer, querying for the exact data may not work anymore.
-See :ref:`builtin-analyzer` for details about available builtin analyzer or
-:ref:`sql-ddl-custom-analyzer`.
+By defining an index on a column, it's analyzed data is indexed
+instead of the raw data.  Thus, depending on the used analyzer,
+querying for the exact data may not work anymore.  See
+:ref:`builtin-analyzer` for details about available builtin analyzer
+or :ref:`sql-ddl-custom-analyzer`.
 
-If no analyzer is specified using a fulltext index, the :ref:`standard <standard-analyzer>`
-analyzer is used::
+If no analyzer is specified when using a fulltext index, the
+:ref:`standard <standard-analyzer>` analyzer is used::
 
     cr> create table my_table1c (
     ...   first_column string INDEX using fulltext
     ... )
     CREATE OK (... sec)
 
-Defining the usage of a concrete analyzer is straight forward by defining the analyzer as a
-parameter using the ``WITH`` statement::
+Defining the usage of a concrete analyzer is straight forward by
+defining the analyzer as a parameter using the ``WITH`` statement::
 
     cr> create table my_table1d (
     ...   first_column string INDEX using fulltext with(analyzer='english')
@@ -488,8 +493,9 @@ parameter using the ``WITH`` statement::
 Defining a named index column definition
 ........................................
 
-It's also possible to define an index column which treat the data of a given column as input.
-This is especially useful if you want to search for both, the exact and analyzed data::
+It's also possible to define an index column which treat the data of a
+given column as input.  This is especially useful if you want to
+search for both, the exact and analyzed data::
 
     cr> create table my_table1e (
     ...   first_column string,
@@ -509,8 +515,9 @@ Of course defining a custom analyzer is possible here too::
 Defining a composite index
 ..........................
 
-Defining a composite (or combined) index is done using the same syntax as above despite multiple
-columns are given to the ``fulltext`` index method::
+Defining a composite (or combined) index is done using the same syntax
+as above despite multiple columns are given to the ``fulltext`` index
+method::
 
     cr> create table documents (
     ...   title string,
@@ -533,62 +540,29 @@ Composite indices can include nested columns within object columns as well::
 
 .. _sql-ddl-custom-analyzer:
 
+.. _create_custom_analyzer:
+
 Create custom analyzer
 ----------------------
 
-An analyzer consists of one tokenizer, zero or more token-filters, and zero or more char-filters.
+An analyzer consists of one tokenizer, zero or more token-filters, and
+zero or more char-filters.
 
-When a field-content is analyzed to become a stream of tokens, the char-filter is applied at first.
-It is used to filter some special chars from the stream of characters that make up the content.
+When a field-content is analyzed to become a stream of tokens, the
+char-filter is applied at first.  It is used to filter some special
+chars from the stream of characters that make up the content.
 
 Tokenizers split the possibly filtered stream of characters into tokens.
 
-Token-filters can add tokens, delete tokens or transform them to finally produce the desired
-stream of tokens.
-
-With these elements in place, analyzer provide finegrained control over building a token stream
-used for fulltext search.
-For example you can use language specific analyzers, tokenizers and token-filters to get proper
-search results for data provided in a certain language.
-
-
-
-Create Analyzer Syntax::
-
-    CREATE ANALYZER <analyzer_name> [EXTENDS <analyzer_name>] (
-        [
-          TOKENIZER <tokenizer_name> [WITH] (
-            <tokenizer_property>=<value>,
-            ...
-          ),
-        ]
-        [
-          TOKEN_FILTERS [WITH] (
-            <token_filter_name>
-            [ [WITH] (
-                <token_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          ),
-        ]
-        [
-          CHAR_FILTERS [WITH] (
-            <char_filter_name>
-            [ [WITH] (
-                <char_filter_property>=<value>,
-                ...
-              )
-            ],
-            ...
-          )
-        ]
-    )
-
-Multiple char filters and token filters are allowed but at maximum one tokenizer.
-Order does not matter.
-A simple Example::
+Token-filters can add tokens, delete tokens or transform them to
+finally produce the desired stream of tokens.
+
+With these elements in place, analyzers provide finegrained control
+over building a token stream used for fulltext search.  For example
+you can use language specific analyzers, tokenizers and token-filters
+to get proper search results for data provided in a certain language.
+
+Here is a simple Example::
 
     cr> create ANALYZER myanalyzer (
     ...   TOKENIZER whitespace,
@@ -606,22 +580,17 @@ A simple Example::
     ... )
     CREATE OK (... sec)
 
-This example creates an analyzer called ``myanalyzer`` to be used in index-definitions and
-index-constraints.
-It will use a :ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter` token-filter
-and a :ref:`kstem-tokenfilter` token-filter, a :ref:`htmlstrip-charfilter` char-filter
-and a custom char-filter that extends the :ref:`mapping-charfilter` char-filter.
-
-You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and :ref:`builtin-char-filter`
-by just writing their names and you can extend and parameterize them,
-see for example the ``mymapping`` char-filter above. You have to give these extended ones a
-unique name.
+This example creates an analyzer called ``myanalyzer`` to be used in
+index-definitions and index-constraints.  It will use a
+:ref:`whitespace-tokenizer` tokenizer, a :ref:`lowercase-tokenfilter`
+token-filter and a :ref:`kstem-tokenfilter` token-filter, a
+:ref:`htmlstrip-charfilter` char-filter and a custom char-filter that
+extends the :ref:`mapping-charfilter` char-filter.
 
-.. note:: Starting with release 0.18.0 one could extend custom tokenizers,
-          token-filters and char-filters. This is not possible anymore.
-          Nonetheless you can still extend custom analyzers to reuse their elements.
-          We might reintroduce this feature when we support creating tokenizers etc. standalone
-          e.g. by a ``CREATE TOKENIZER`` statement.
+You can use :ref:`builtin-tokenizer`, :ref:`builtin-token-filter` and
+:ref:`builtin-char-filter` by just writing their names and you can
+extend and parameterize them, see for example the ``mymapping``
+char-filter above. You have to give these extended ones a unique name.
 
 Extending Bultin Analyzer
 -------------------------
@@ -635,12 +604,12 @@ You can extend and parameterize :ref:`builtin-analyzer` like this::
     ... )
     CREATE OK (... sec)
 
-If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or token-filter cannot be defined.
-In this case use the parameters available for the extended :ref:`builtin-analyzer`.
+If you extend :ref:`builtin-analyzer`, tokenizer, char-filter or
+token-filter cannot be defined.  In this case use the parameters
+available for the extended :ref:`builtin-analyzer`.
 
-If you extend custom-analyzers, every part of the analyzer that is ommitted will be taken from
-the extended one.
-Example::
+If you extend custom-analyzers, every part of the analyzer that is
+ommitted will be taken from the extended one.  Example::
 
     cr> create ANALYZER e2 EXTENDS myanalyzer (
     ...     TOKENIZER mypattern WITH (
@@ -650,8 +619,8 @@ Example::
     ... )
     CREATE OK (... sec)
 
-This analyzer will use the char-filters and token-filters from ``myanalyzer``
-and will override the tokenizer with ``mypattern``.
+This analyzer will use the char-filters and token-filters from
+``myanalyzer`` and will override the tokenizer with ``mypattern``.
 
 Analyzer Reference
 ------------------
diff --git a/docs/sql/dml.txt b/docs/sql/dml.txt
index 6928a51ab2..c2f636fb9d 100644
--- a/docs/sql/dml.txt
+++ b/docs/sql/dml.txt
@@ -548,6 +548,8 @@ Deleting rows in Crate is done using the SQL ``DELETE`` statement::
     DELETE OK, ... rows affected (... sec)
 
 
+.. _importing_data:
+
 Importing data
 ==============
 
diff --git a/docs/sql/index.txt b/docs/sql/index.txt
index c6ea8397ac..c5c9dccf3c 100644
--- a/docs/sql/index.txt
+++ b/docs/sql/index.txt
@@ -2,8 +2,9 @@
 Crate SQL
 =========
 
-Crate uses SQL to query documents.
-For general information about SQL please refer to `Wikipedia SQL`_.
+Crate uses SQL to query documents. For consice reference documentation
+see :doc:`sql`. For general information about SQL please refer to
+`Wikipedia SQL`_.
 
 .. _`Wikipedia SQL`: http://en.wikipedia.org/wiki/Sql
 
diff --git a/docs/sql/reference/copy.txt b/docs/sql/reference/copy.txt
new file mode 100644
index 0000000000..f0e19c946d
--- /dev/null
+++ b/docs/sql/reference/copy.txt
@@ -0,0 +1,39 @@
+====
+COPY
+====
+
+Copy data between a file and a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    COPY table_ident FROM 'path'
+
+Description
+===========
+
+COPY FROM copies data from the filesystem of any cluster node to a
+specified table.
+
+The files to be copied from need to be accessible from the crate
+server process and the name must be specified from the viewpoint of
+the server.
+
+The input files need to have one line per record. Records are
+formatted in JSON.
+
+For examples see: :ref:`importing_data`.
+
+Parameters
+==========
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table where the data should be put.
+
+:path: A file or directory path with an optional `PCRE`_ file pattern
+    suffix. If the path is relative, it is based on the absolute path
+    of the node's data location.
+
+.. _PCRE: http://www.pcre.org/
diff --git a/docs/sql/reference/create_analyzer.txt b/docs/sql/reference/create_analyzer.txt
new file mode 100644
index 0000000000..051ccc6514
--- /dev/null
+++ b/docs/sql/reference/create_analyzer.txt
@@ -0,0 +1,64 @@
+===============
+CREATE ANALYZER
+===============
+
+Define a new fulltext analyzer.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name EXTENDS parent_analyzer_name
+        WITH ( override_parameter [= value] [, ... ] )
+
+.. code-block:: sql
+
+    CREATE ANALYZER analyzer_name (
+        [ TOKENIZER tokenizer_name
+           [ WITH ( tokenizer_parameter [= value] [, ... ] ) ]
+        ]
+        [ TOKEN_FILTERS (
+            { token_filter_name
+              [ WITH ( token_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+        [ CHAR_FILTERS (
+            { char_filter_name
+              [ WITH ( char_filter_parameter [= value] [, ... ] ) ] }
+            [, ... ]
+          )
+        ]
+    )
+
+Description
+===========
+
+CREATE ANALYZER speifies a whole analyzer chain for use in fulltext
+searches. It is possible to extend an existing analyzer or define a
+new analyzer chain from scratch. For examples and detailed explanation
+see :ref:`create_custom_analyzer`.
+
+Parameters
+==========
+
+:analyzer_name: the globally unique name of the analzyer being created.
+
+:parent_analyzer_name: the name of the analyzer to inherit defaults from.
+
+:override_parameter: the name of a parameter of the parent analyzer
+    which should be assigned a new value to.
+
+:tokenizer_name: the name of a builtin tokenizer to be used.
+
+:tokenizer_parameter: a name of a parameter for a given tokenizer.
+
+:token_filter_name: the name of a builtin token filter to be used.
+
+:token_filter_parameter: a name of a parameter for a given token filter.
+
+:char_filter_name: the name of a builtin char filter to be used.
+
+:char_filter_parameter: a name of a parameter for a given char filter.
+
diff --git a/docs/sql/reference/create_blob_table.txt b/docs/sql/reference/create_blob_table.txt
new file mode 100644
index 0000000000..d895ff6c4e
--- /dev/null
+++ b/docs/sql/reference/create_blob_table.txt
@@ -0,0 +1,24 @@
+=================
+CREATE BLOB TABLE
+=================
+
+Define a new table for storing binary large objects.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE BLOB TABLE table_name
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+Description
+===========
+
+CREATE BLOB TABLE will create a new table for holding BLOBS. For
+details and examples see :ref:`blob_support`.
+
+The CLUSTERED and WITH clauses follow the same semantics described
+under :ref:`clustered_clause` and :ref:`with_clause`.
diff --git a/docs/sql/reference/create_table.txt b/docs/sql/reference/create_table.txt
new file mode 100644
index 0000000000..ff2edafabc
--- /dev/null
+++ b/docs/sql/reference/create_table.txt
@@ -0,0 +1,148 @@
+============
+CREATE TABLE
+============
+
+Define a new table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    CREATE TABLE table_name ( [
+    { column_name data_type [ column_constraint [ ... ] ] | table_constraint }
+    [, ... ] ] )
+    [CUSTERED [ BY (routing_column) ] INTO num_shards SHARDS ]
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+where ``column_constraint`` is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY |
+    INDEX { OFF | USING { PLAIN |
+                          FULLTEXT [ WITH ( analyzer = analyzer_name ) ]  }
+  }
+
+
+and table_constraint is:
+
+.. code-block:: sql
+
+  { PRIMARY KEY ( column_name [, ... ] ) |
+    INDEX index_name USING FULLTEXT ( column_name [, ... ] )
+         [ WITH ( analyzer = analyzer_name ) ]
+  }
+
+Description
+===========
+
+CREATE TABLE will create a new, initially empty table.
+
+Setting a schema (for example, CREATE TABLE myschema.mytable ...) is
+currently not supprted. All userspace defined data tables are defined
+under the default schema named ``doc``.
+
+The optional constraint clauses specify constraints (tests) that new
+or updated rows must satisfy for an insert or update operation to
+succeed. A constraint is an SQL object that helps define the set of
+valid values in the table in various ways.
+
+There are two ways to define constraints: table constraints and column
+constraints. A column constraint is defined as part of a column
+definition. A table constraint definition is not tied to a particular
+column, and it can encompass more than one column. Every column
+constraint can also be written as a table constraint; a column
+constraint is only a notational convenience for use when the
+constraint only affects one column.
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to
+    be created.
+
+:column_name: The name of a column to be created in the new table.
+
+:data_type: The data type of the column. This can include array and
+    object specifiers. For more information on the data types
+    supported by Crate see .
+
+PRIMARY KEY Constraint
+======================
+
+The PRIMARY KEY constraint specifies that a column or columns of a
+table can contain only unique (non-duplicate), nonnull values.
+
+Only one primary key can be specified for a table, whether as a column
+constraint or a table constraint.
+
+INDEX Constraint
+================
+
+The INDEX constraint specifies a specific index method on one or more
+columnns.
+
+It is possible to define more than one index per table, whether as a
+column constraint or a table constraint.
+
+For further details about the meaning of the options see
+:ref:`indices_and_fulltext`.
+
+.. _clustered_clause:
+
+CLUSTERED Clause
+================
+
+The optional CLUSTERED clause specifies how a table should be
+distributed accross a cluster.
+
+:num_shards: specifies the number of shards a table is stored in, the default is 5.
+
+:routing_column: allows to explicitly specify a column or field on
+    which basis rows are sharded. all rows having the same value in
+    ``routing_column`` are stored in the same shard. The default is
+    the primary key if specified, otherwise the internal ``_id``
+    column.
+
+.. _with_clause:
+
+WITH Clause
+-----------
+
+The optional WITH clause can specify storage parameters for tables.
+
+.. code-block:: sql
+
+    [ WITH ( storage_parameter [= value] [, ... ] ) ]
+
+
+:storage_parameter: specifies an optional storage parameter for the table.
+
+Available storage paramters are:
+
+
+.. _number_of_replicas:
+
+number_of_replicas
+~~~~~~~~~~~~~~~~~~
+
+Specifies the number or range of replicas each shard of a table should
+have for normal operation, the default is to have 1 replica.
+
+The number of replicas is defined like this:
+
+.. code-block:: sql
+
+    min_replicas [ - [ max_replicas ] ]
+
+:min_replicas: The minimum number of replicas required.
+
+:max_replicas: The maximum number of replicas. The actual maximum
+    number of replicas is max(num_replicas, N-1), where N is the
+    number of data nodes in the cluster. If ``max_replicas`` is the
+    string ``all`` then it will always be N.
+
+For further details and examples see :ref:`replication`.
+
diff --git a/docs/sql/reference/delete.txt b/docs/sql/reference/delete.txt
new file mode 100644
index 0000000000..c9fe959745
--- /dev/null
+++ b/docs/sql/reference/delete.txt
@@ -0,0 +1,30 @@
+======
+DELETE
+======
+
+Delete rows of a table
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DELETE FROM table_ident [ WHERE condition ]
+
+Description
+===========
+
+DELETE deletes rows that satisfy the WHERE clause from the specified
+table. If the WHERE clause is absent, the effect is to delete all rows
+in the table. The result is a valid, but empty table.
+
+Parameters
+==========
+
+
+:table_ident: The name (optionally schema-qualified) of an existing
+    table to delete rows from.
+
+:condition: An expression that returns a value of type boolean. Only
+    rows for which this expression returns true will be deleted.
+
diff --git a/docs/sql/reference/drop_table.txt b/docs/sql/reference/drop_table.txt
new file mode 100644
index 0000000000..7cc7822b04
--- /dev/null
+++ b/docs/sql/reference/drop_table.txt
@@ -0,0 +1,25 @@
+==========
+DROP TABLE
+==========
+
+Remove a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+    DROP [BLOB] TABLE table_name
+
+Description
+===========
+
+DROP TABLE removes tables from the cluster.
+
+Use the ``BLOB`` keyword in order to remove a blob table (see
+:ref:`blob_support`).
+
+Parameters
+==========
+
+:table_name: The name (optionally schema-qualified) of the table to be removed.
diff --git a/docs/sql/reference/insert.txt b/docs/sql/reference/insert.txt
new file mode 100644
index 0000000000..ef13f0504e
--- /dev/null
+++ b/docs/sql/reference/insert.txt
@@ -0,0 +1,45 @@
+======
+INSERT
+======
+
+Create new rows in a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   INSERT INTO table_ident
+    [ ( column_ident [, ...] ) ]
+    VALUES ( expression [, ...] ) [, ...]
+
+Description
+===========
+
+INSERT creates one or more rows specified by value expressions.
+
+The target column names can be listed in any order. If no list of
+column names is given at all, the default is all the columns of the
+table in lexical order; or the first N column names, if there are only
+N columns supplied by the VALUES clause. The values supplied by the
+VALUES clause are associated with the explicit or implicit column list
+left-to-right.
+
+Each column not present in the explicit or implicit column list will
+not be filled.
+
+If the expression for any column is not of the correct data type,
+automatic type conversion will be attempted.
+
+
+Parameters
+==========
+
+:table_ident: The identifier (optionally schema-qualified) of an
+    existing table.
+
+:column_ident: The name of a column or field in the table pointed to
+   by table_ident.
+
+:expression: An expression or value to assign to the corresponding column.
+
diff --git a/docs/sql/reference/select.txt b/docs/sql/reference/select.txt
new file mode 100644
index 0000000000..84f32352ab
--- /dev/null
+++ b/docs/sql/reference/select.txt
@@ -0,0 +1,193 @@
+======
+SELECT
+======
+
+Retrieve rows from a table.
+
+Synopsis
+========
+
+.. code-block:: sql
+
+   SELECT * | expression [ [ AS ] output_name ] [, ...] FROM table_ident
+     [ WHERE condition ]
+     [ GROUP BY expression [, ...] ]
+     [ ORDER BY expression [ ASC | DESC ] [, ...] ]
+     [ LIMIT num_results ]
+     [ OFFSET start ]
+
+
+Description
+===========
+
+SELECT retrieves rows from a table. The general processing of SELECT
+is as follows:
+
+- The FROM item points to the table where the data should be retrieved
+  from.
+
+- If the WHERE clause is specified, all rows that do not satisfy the
+  condition are eliminated from the output. (See WHERE Clause below.)
+
+- If the GROUP BY clause is specified, the output is combined into
+  groups of rows that match on one or more values.
+
+- The actual output rows are computed using the SELECT output
+  expressions for each selected row or row group.
+
+- If the ORDER BY clause is specified, the returned rows are sorted in
+  the specified order. If ORDER BY is not given, the rows are returned
+  in whatever order the system finds fastest to produce.
+
+- If the LIMIT or OFFSET clause is specified, the SELECT statement
+  only returns a subset of the result rows.
+
+Parameters
+==========
+
+SELECT List
+-----------
+
+The SELECT list specifies expressions that form the output rows of the
+SELECT statement. The expressions can (and usually do) refer to
+columns computed in the FROM clause.
+
+.. code-block:: sql
+
+    SELECT * | expression [ [ AS ] output_name ] [, ...]
+
+Just as in a table, every output column of a SELECT has a name. In a
+simple SELECT this name is just used to label the column for
+display. To specify the name to use for an output column, write AS
+``output_name`` after the column's ``expression``. (You can omit AS,
+but only if the desired output name does not match any reserved
+keyword. For protection against possible future keyword additions, it
+is recommended that you always either write AS or double-quote the
+output name.) If you do not specify a column name, a name is chosen
+automatically by Crate. If the column's expression is a simple column
+reference then the chosen name is the same as that column's name. In
+more complex cases a function or type name may be used, or the system
+may fall back on a generated name.
+
+An output column's name can be used to refer to the column's value in
+ORDER BY and GROUP BY clauses, but not in the WHERE clause; there you
+must write out the expression instead.
+
+Instead of an expression, ``*`` can be written in the output list as a
+shorthand for all the columns of the selected rows. Also, you can
+write table_name.* as a shorthand for the columns coming from just
+that table. In these cases it is not possible to specify new names
+with AS; the output column names will be the same as the table
+columns' names.
+
+FROM Clause
+-----------
+
+The FROM clause specifies the source table for the SELECT:
+
+.. code-block:: sql
+
+    FROM table_ident
+
+:table_ident: The name (optionally schema-qualified) of an existing table.
+
+
+WHERE Clause
+------------
+
+The optional WHERE clause defines the condition to be met for a row to
+be returned:
+
+.. code-block:: sql
+
+    WHERE condition
+
+:condition: a where condition is any expression that evaluates to a
+  result of type boolean. Any row that does not satisfy this condition
+  will be eliminated [/INST]"
"diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
index e33cb784..545f9af3 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
@@ -17,6 +17,7 @@ package com.netflix.curator.framework.recipes.cache;
 
 import org.apache.zookeeper.data.Stat;
 
+@SuppressWarnings({""LoopStatementThatDoesntLoop""})
 public class ChildData implements Comparable<ChildData>
 {
     private final String    path;
@@ -31,9 +32,34 @@ public class ChildData implements Comparable<ChildData>
         this.data = data;
     }
 
-    boolean     isComplete()
+    boolean     isComplete(PathChildrenCacheMode mode)
     {
-        return (path != null) && (stat != null) && (data != null);
+        boolean     isComplete = false;
+        if ( path != null )
+        {
+            switch ( mode )
+            {
+                case CACHE_DATA_AND_STAT:
+                {
+                    isComplete = (stat != null) && (data != null);
+                    break;
+                }
+                
+                case CACHE_DATA:
+                {
+                    isComplete = (data != null);
+                    break;
+                }
+
+                case CACHE_PATHS_ONLY:
+                {
+                    isComplete = true;
+                    break;
+                }
+            }
+        }
+
+        return isComplete;
     }
 
     long        getThisObjectCreationTimeMs()
@@ -79,33 +105,47 @@ public class ChildData implements Comparable<ChildData>
         return path.hashCode();
     }
 
-    public ChildData setPath(String path)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setStat(Stat stat)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setData(byte[] data)
-    {
-        return new ChildData(path, stat, data);
-    }
-
+    /**
+     * Returns the full path of the this child
+     *
+     * @return full path
+     */
     public String getPath()
     {
         return path;
     }
 
+    /**
+     * Returns the stat data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     *
+     * @return stat or null
+     */
     public Stat getStat()
     {
         return stat;
     }
 
+    /**
+     * <p>Returns the node data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     * or {@link PathChildrenCacheMode#CACHE_DATA}.</p>
+     *
+     * <p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change
+     * the values in the array any other callers to this method will see the change.</p>
+     *
+     * @return node data or null
+     */
     public byte[] getData()
     {
         return data;
     }
+
+    ChildData setStat(Stat stat)
+    {
+        return new ChildData(path, stat, data);
+    }
+
+    ChildData setData(byte[] data)
+    {
+        return new ChildData(path, stat, data);
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
index 54835545..80e0d754 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
@@ -17,13 +17,12 @@ package com.netflix.curator.framework.recipes.cache;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.google.common.util.concurrent.MoreExecutors;
-import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.CuratorFramework;
+import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.api.CuratorListener;
 import com.netflix.curator.utils.ZKPaths;
 import org.apache.zookeeper.WatchedEvent;
@@ -31,7 +30,6 @@ import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.data.Stat;
 import java.io.Closeable;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
@@ -53,10 +51,13 @@ import java.util.concurrent.ThreadFactory;
  */
 public class PathChildrenCache implements Closeable
 {
-    private final CuratorFramework client;
+    private final CuratorFramework          client;
     private final String                    path;
+    private final PathChildrenCacheMode     mode;
     private final ExecutorService           executorService;
 
+    private static final ChildData          existingDataMarker = new ChildData(null, null, null);
+
     private final BlockingQueue<EventEntry>                         listenerEvents = new LinkedBlockingQueue<EventEntry>();
     private final Map<PathChildrenCacheListener, ListenerEntry>     listeners = Maps.newConcurrentMap();
     private final Map<String, ChildData>                            currentData = Maps.newConcurrentMap();
@@ -127,26 +128,27 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private static final int                EXPIRE_INCOMING_TIME_MS = 5 * 60 * 60 * 1000;   // 5 minutes
-
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      */
-    public PathChildrenCache(CuratorFramework client, String path)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode)
     {
-        this(client, path, Executors.defaultThreadFactory());
+        this(client, path, mode, Executors.defaultThreadFactory());
     }
 
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      * @param threadFactory factory to use when creating internal threads
      */
-    public PathChildrenCache(CuratorFramework client, String path, ThreadFactory threadFactory)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode, ThreadFactory threadFactory)
     {
         this.client = client;
         this.path = path;
+        this.mode = mode;
         executorService = Executors.newFixedThreadPool(1, threadFactory);
     }
 
@@ -222,7 +224,7 @@ public class PathChildrenCache implements Closeable
     }
 
     /**
-     * Return a copy of the current data. There are no guarantees of accuracy. This is
+     * Return the current data. There are no guarantees of accuracy. This is
      * merely the most recent view of the data. The data is returned in sorted order.
      *
      * @return list of children and data
@@ -232,6 +234,19 @@ public class PathChildrenCache implements Closeable
         return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()));
     }
 
+    /**
+     * Return the current data for the given path. There are no guarantees of accuracy. This is
+     * merely the most recent view of the data. If there is no child with that path, <code>null</code>
+     * is returned.
+     *
+     * @param fullPath full path to the node to check
+     * @return data or null
+     */
+    public ChildData            getCurrentData(String fullPath)
+    {
+        return currentData.get(fullPath);
+    }
+
     /**
      * Clear out current data and begin a new query on the path
      *
@@ -240,12 +255,12 @@ public class PathChildrenCache implements Closeable
     public void clearAndRefresh() throws Exception
     {
         currentData.clear();
-        incomingData.clear();
         refresh();
     }
 
     private void refresh() throws Exception
     {
+        incomingData.clear();
         client.getChildren().usingWatcher(watcher).inBackground().forPath(path);
     }
 
@@ -331,7 +346,7 @@ public class PathChildrenCache implements Closeable
         {
             case CHILDREN:
             {
-                processChildren(event.getChildren(), true);
+                processChildren(event.getChildren());
                 break;
             }
 
@@ -371,20 +386,13 @@ public class PathChildrenCache implements Closeable
     {
         switch ( watchedEvent.getType() )
         {
-            case NodeCreated:
             case NodeDataChanged:
             {
-                processNodeCreated(ZKPaths.getNodeFromPath(watchedEvent.getPath()));
-                break;
-            }
-
-            case NodeDeleted:
-            {
-                processNodeDeleted(watchedEvent.getPath());
+                processDataChanged(watchedEvent.getPath());
                 break;
             }
 
-            case NodeChildrenChanged:
+            default:
             {
                 refresh();
                 break;
@@ -392,43 +400,31 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private void processNodeCreated(String path) throws Exception
+    private void processDataChanged(String path) throws Exception
     {
-        List<String>        l = Lists.newArrayList(path);
-        processChildren(l, false);
-    }
-
-    private void processNodeDeleted(String path)
-    {
-        ChildData       oldData = currentData.remove(path);
-        incomingData.remove(path);
-
-        if ( oldData != null )
-        {
-            listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, oldData)));
-        }
+        addIncomingPath(path);
     }
 
     private void        checkSetCurrent()
     {
-        Iterator<ChildData>     iterator = incomingData.values().iterator();
-        while ( iterator.hasNext() )
+        for ( Map.Entry<String, ChildData> entry : incomingData.entrySet() )
         {
-            ChildData       data = iterator.next();
-            if ( data.isComplete() )
+            String          path = entry.getKey();
+            ChildData       data = entry.getValue();
+
+            if ( data.isComplete(mode) )
             {
                 boolean     isNew = (currentData.put(data.getPath(), data) == null);
-                iterator.remove();
+                incomingData.remove(path);
 
                 listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(isNew ? PathChildrenCacheEvent.Type.CHILD_ADDED : PathChildrenCacheEvent.Type.CHILD_UPDATED, data)));
             }
-            else
+            else if ( isTheExistingDataMarker(data) )
             {
-                long        age = System.currentTimeMillis() - data.getThisObjectCreationTimeMs();
-                if ( age >= EXPIRE_INCOMING_TIME_MS )
-                {
-                    iterator.remove();
-                }
+                ChildData       removedData = currentData.remove(path);
+                incomingData.remove(path);
+
+                listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, removedData)));
             }
         }
     }
@@ -457,23 +453,51 @@ public class PathChildrenCache implements Closeable
         checkSetCurrent();
     }
 
-    private void processChildren(List<String> children, boolean doRetain) throws Exception
+    private void processChildren(List<String> children) throws Exception
     {
-        for ( String child : children )
+        for ( String path : currentData.keySet() )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            incomingData.put(actualPath, new ChildData(actualPath, null, null));
+            incomingData.put(path, existingDataMarker);
         }
-        if ( doRetain )
+
+        for ( String child : children )
         {
-            currentData.keySet().retainAll(incomingData.keySet());
+            String      actualPath = ZKPaths.makePath(path, child);
+            addIncomingPath(actualPath);
         }
 
-        for ( String child : children )
+        checkSetCurrent();
+    }
+
+    private void addIncomingPath(String actualPath) throws Exception
+    {
+        incomingData.put(actualPath, new ChildData(actualPath, null, null));
+
+        switch ( mode )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);
-            client.checkExists().usingWatcher(watcher).inBackground().forPath(actualPath);
+            case CACHE_DATA_AND_STAT:
+            {
+                client.checkExists().inBackground().forPath(actualPath);    // to get the stat
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_DATA:
+            {
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_PATHS_ONLY:
+            {
+                // do nothing
+                break;
+            }
         }
     }
+
+    private static boolean isTheExistingDataMarker(ChildData data)
+    {
+        return data == existingDataMarker;
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
new file mode 100644
index 00000000..2f1264ef
--- /dev/null
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
@@ -0,0 +1,25 @@
+package com.netflix.curator.framework.recipes.cache;
+
+/**
+ * Controls which data is cached
+ */
+public enum PathChildrenCacheMode
+{
+    /**
+     * The cache will hold all the children, the data for each child node
+     * and the stat for each child node
+     */
+    CACHE_DATA_AND_STAT,
+
+    /**
+     * The cache will hold all the children and the data for each child node.
+     * {@link ChildData#getStat()} will return <code>null</code>.
+     */
+    CACHE_DATA,
+
+    /**
+     * The cache will hold only the children path names.
+     * {@link ChildData#getStat()} and {@link ChildData#getData()} will both return <code>null</code>.
+     */
+    CACHE_PATHS_ONLY
+}
diff --git a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
index 35c78a8a..f5718ae7 100644
--- a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
+++ b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
@@ -29,18 +29,104 @@ import java.util.concurrent.TimeUnit;
 public class TestPathChildrenCache extends BaseClassForTests
 {
     @Test
-    public void     testException() throws Exception
+    public void     testModes() throws Exception
     {
         CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));
         client.start();
         try
         {
-            Assert.assertTrue(client.getZookeeperClient().blockUntilConnectedOrTimedOut());
+            client.create().forPath(""/test"", new byte[0]);
+
+            for ( PathChildrenCacheMode mode : PathChildrenCacheMode.values() )
+            {
+                internalTestMode(client, mode);
+
+                client.delete().forPath(""/test/one"");
+                client.delete().forPath(""/test/two"");
+            }
+        }
+        finally
+        {
+            client.close();
+        }
+    }
+
+    private void     internalTestMode(CuratorFramework client, PathChildrenCacheMode testMode) throws Exception
+    {
+        PathChildrenCache       cache = new PathChildrenCache(client, ""/test"", testMode);
+
+        final CountDownLatch    latch = new CountDownLatch(2);
+        cache.addListener
+        (
+            new PathChildrenCacheListener()
+            {
+                @Override
+                public void handleException(CuratorFramework client, Exception exception)
+                {
+                }
+
+                @Override
+                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception
+                {
+                    if ( event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED )
+",Enhanced the path cache to be more efficient and allow for different caching modes .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
index e33cb784..545f9af3 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/ChildData.java
@@ -17,6 +17,7 @@ package com.netflix.curator.framework.recipes.cache;
 
 import org.apache.zookeeper.data.Stat;
 
+@SuppressWarnings({""LoopStatementThatDoesntLoop""})
 public class ChildData implements Comparable<ChildData>
 {
     private final String    path;
@@ -31,9 +32,34 @@ public class ChildData implements Comparable<ChildData>
         this.data = data;
     }
 
-    boolean     isComplete()
+    boolean     isComplete(PathChildrenCacheMode mode)
     {
-        return (path != null) && (stat != null) && (data != null);
+        boolean     isComplete = false;
+        if ( path != null )
+        {
+            switch ( mode )
+            {
+                case CACHE_DATA_AND_STAT:
+                {
+                    isComplete = (stat != null) && (data != null);
+                    break;
+                }
+                
+                case CACHE_DATA:
+                {
+                    isComplete = (data != null);
+                    break;
+                }
+
+                case CACHE_PATHS_ONLY:
+                {
+                    isComplete = true;
+                    break;
+                }
+            }
+        }
+
+        return isComplete;
     }
 
     long        getThisObjectCreationTimeMs()
@@ -79,33 +105,47 @@ public class ChildData implements Comparable<ChildData>
         return path.hashCode();
     }
 
-    public ChildData setPath(String path)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setStat(Stat stat)
-    {
-        return new ChildData(path, stat, data);
-    }
-
-    public ChildData setData(byte[] data)
-    {
-        return new ChildData(path, stat, data);
-    }
-
+    /**
+     * Returns the full path of the this child
+     *
+     * @return full path
+     */
     public String getPath()
     {
         return path;
     }
 
+    /**
+     * Returns the stat data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     *
+     * @return stat or null
+     */
     public Stat getStat()
     {
         return stat;
     }
 
+    /**
+     * <p>Returns the node data for this child when the cache mode is {@link PathChildrenCacheMode#CACHE_DATA_AND_STAT}
+     * or {@link PathChildrenCacheMode#CACHE_DATA}.</p>
+     *
+     * <p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change
+     * the values in the array any other callers to this method will see the change.</p>
+     *
+     * @return node data or null
+     */
     public byte[] getData()
     {
         return data;
     }
+
+    ChildData setStat(Stat stat)
+    {
+        return new ChildData(path, stat, data);
+    }
+
+    ChildData setData(byte[] data)
+    {
+        return new ChildData(path, stat, data);
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
index 54835545..80e0d754 100644
--- a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCache.java
@@ -17,13 +17,12 @@ package com.netflix.curator.framework.recipes.cache;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Closeables;
 import com.google.common.util.concurrent.MoreExecutors;
-import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.CuratorFramework;
+import com.netflix.curator.framework.api.CuratorEvent;
 import com.netflix.curator.framework.api.CuratorListener;
 import com.netflix.curator.utils.ZKPaths;
 import org.apache.zookeeper.WatchedEvent;
@@ -31,7 +30,6 @@ import org.apache.zookeeper.Watcher;
 import org.apache.zookeeper.data.Stat;
 import java.io.Closeable;
 import java.io.IOException;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
@@ -53,10 +51,13 @@ import java.util.concurrent.ThreadFactory;
  */
 public class PathChildrenCache implements Closeable
 {
-    private final CuratorFramework client;
+    private final CuratorFramework          client;
     private final String                    path;
+    private final PathChildrenCacheMode     mode;
     private final ExecutorService           executorService;
 
+    private static final ChildData          existingDataMarker = new ChildData(null, null, null);
+
     private final BlockingQueue<EventEntry>                         listenerEvents = new LinkedBlockingQueue<EventEntry>();
     private final Map<PathChildrenCacheListener, ListenerEntry>     listeners = Maps.newConcurrentMap();
     private final Map<String, ChildData>                            currentData = Maps.newConcurrentMap();
@@ -127,26 +128,27 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private static final int                EXPIRE_INCOMING_TIME_MS = 5 * 60 * 60 * 1000;   // 5 minutes
-
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      */
-    public PathChildrenCache(CuratorFramework client, String path)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode)
     {
-        this(client, path, Executors.defaultThreadFactory());
+        this(client, path, mode, Executors.defaultThreadFactory());
     }
 
     /**
      * @param client the client
      * @param path path to watch
+     * @param mode caching mode
      * @param threadFactory factory to use when creating internal threads
      */
-    public PathChildrenCache(CuratorFramework client, String path, ThreadFactory threadFactory)
+    public PathChildrenCache(CuratorFramework client, String path, PathChildrenCacheMode mode, ThreadFactory threadFactory)
     {
         this.client = client;
         this.path = path;
+        this.mode = mode;
         executorService = Executors.newFixedThreadPool(1, threadFactory);
     }
 
@@ -222,7 +224,7 @@ public class PathChildrenCache implements Closeable
     }
 
     /**
-     * Return a copy of the current data. There are no guarantees of accuracy. This is
+     * Return the current data. There are no guarantees of accuracy. This is
      * merely the most recent view of the data. The data is returned in sorted order.
      *
      * @return list of children and data
@@ -232,6 +234,19 @@ public class PathChildrenCache implements Closeable
         return ImmutableList.copyOf(Sets.<ChildData>newTreeSet(currentData.values()));
     }
 
+    /**
+     * Return the current data for the given path. There are no guarantees of accuracy. This is
+     * merely the most recent view of the data. If there is no child with that path, <code>null</code>
+     * is returned.
+     *
+     * @param fullPath full path to the node to check
+     * @return data or null
+     */
+    public ChildData            getCurrentData(String fullPath)
+    {
+        return currentData.get(fullPath);
+    }
+
     /**
      * Clear out current data and begin a new query on the path
      *
@@ -240,12 +255,12 @@ public class PathChildrenCache implements Closeable
     public void clearAndRefresh() throws Exception
     {
         currentData.clear();
-        incomingData.clear();
         refresh();
     }
 
     private void refresh() throws Exception
     {
+        incomingData.clear();
         client.getChildren().usingWatcher(watcher).inBackground().forPath(path);
     }
 
@@ -331,7 +346,7 @@ public class PathChildrenCache implements Closeable
         {
             case CHILDREN:
             {
-                processChildren(event.getChildren(), true);
+                processChildren(event.getChildren());
                 break;
             }
 
@@ -371,20 +386,13 @@ public class PathChildrenCache implements Closeable
     {
         switch ( watchedEvent.getType() )
         {
-            case NodeCreated:
             case NodeDataChanged:
             {
-                processNodeCreated(ZKPaths.getNodeFromPath(watchedEvent.getPath()));
-                break;
-            }
-
-            case NodeDeleted:
-            {
-                processNodeDeleted(watchedEvent.getPath());
+                processDataChanged(watchedEvent.getPath());
                 break;
             }
 
-            case NodeChildrenChanged:
+            default:
             {
                 refresh();
                 break;
@@ -392,43 +400,31 @@ public class PathChildrenCache implements Closeable
         }
     }
 
-    private void processNodeCreated(String path) throws Exception
+    private void processDataChanged(String path) throws Exception
     {
-        List<String>        l = Lists.newArrayList(path);
-        processChildren(l, false);
-    }
-
-    private void processNodeDeleted(String path)
-    {
-        ChildData       oldData = currentData.remove(path);
-        incomingData.remove(path);
-
-        if ( oldData != null )
-        {
-            listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, oldData)));
-        }
+        addIncomingPath(path);
     }
 
     private void        checkSetCurrent()
     {
-        Iterator<ChildData>     iterator = incomingData.values().iterator();
-        while ( iterator.hasNext() )
+        for ( Map.Entry<String, ChildData> entry : incomingData.entrySet() )
         {
-            ChildData       data = iterator.next();
-            if ( data.isComplete() )
+            String          path = entry.getKey();
+            ChildData       data = entry.getValue();
+
+            if ( data.isComplete(mode) )
             {
                 boolean     isNew = (currentData.put(data.getPath(), data) == null);
-                iterator.remove();
+                incomingData.remove(path);
 
                 listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(isNew ? PathChildrenCacheEvent.Type.CHILD_ADDED : PathChildrenCacheEvent.Type.CHILD_UPDATED, data)));
             }
-            else
+            else if ( isTheExistingDataMarker(data) )
             {
-                long        age = System.currentTimeMillis() - data.getThisObjectCreationTimeMs();
-                if ( age >= EXPIRE_INCOMING_TIME_MS )
-                {
-                    iterator.remove();
-                }
+                ChildData       removedData = currentData.remove(path);
+                incomingData.remove(path);
+
+                listenerEvents.offer(new EventEntry(new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED, removedData)));
             }
         }
     }
@@ -457,23 +453,51 @@ public class PathChildrenCache implements Closeable
         checkSetCurrent();
     }
 
-    private void processChildren(List<String> children, boolean doRetain) throws Exception
+    private void processChildren(List<String> children) throws Exception
     {
-        for ( String child : children )
+        for ( String path : currentData.keySet() )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            incomingData.put(actualPath, new ChildData(actualPath, null, null));
+            incomingData.put(path, existingDataMarker);
         }
-        if ( doRetain )
+
+        for ( String child : children )
         {
-            currentData.keySet().retainAll(incomingData.keySet());
+            String      actualPath = ZKPaths.makePath(path, child);
+            addIncomingPath(actualPath);
         }
 
-        for ( String child : children )
+        checkSetCurrent();
+    }
+
+    private void addIncomingPath(String actualPath) throws Exception
+    {
+        incomingData.put(actualPath, new ChildData(actualPath, null, null));
+
+        switch ( mode )
         {
-            String actualPath = ZKPaths.makePath(path, child);
-            client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);
-            client.checkExists().usingWatcher(watcher).inBackground().forPath(actualPath);
+            case CACHE_DATA_AND_STAT:
+            {
+                client.checkExists().inBackground().forPath(actualPath);    // to get the stat
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_DATA:
+            {
+                client.getData().usingWatcher(watcher).inBackground().forPath(actualPath);  // watcher checks for data change
+                break;
+            }
+
+            case CACHE_PATHS_ONLY:
+            {
+                // do nothing
+                break;
+            }
         }
     }
+
+    private static boolean isTheExistingDataMarker(ChildData data)
+    {
+        return data == existingDataMarker;
+    }
 }
diff --git a/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
new file mode 100644
index 00000000..2f1264ef
--- /dev/null
+++ b/curator-recipes/src/main/java/com/netflix/curator/framework/recipes/cache/PathChildrenCacheMode.java
@@ -0,0 +1,25 @@
+package com.netflix.curator.framework.recipes.cache;
+
+/**
+ * Controls which data is cached
+ */
+public enum PathChildrenCacheMode
+{
+    /**
+     * The cache will hold all the children, the data for each child node
+     * and the stat for each child node
+     */
+    CACHE_DATA_AND_STAT,
+
+    /**
+     * The cache will hold all the children and the data for each child node.
+     * {@link ChildData#getStat()} will return <code>null</code>.
+     */
+    CACHE_DATA,
+
+    /**
+     * The cache will hold only the children path names.
+     * {@link ChildData#getStat()} and {@link ChildData#getData()} will both return <code>null</code>.
+     */
+    CACHE_PATHS_ONLY
+}
diff --git a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
index 35c78a8a..f5718ae7 100644
--- a/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
+++ b/curator-recipes/src/test/java/com/netflix/curator/framework/recipes/cache/TestPathChildrenCache.java
@@ -29,18 +29,104 @@ import java.util.concurrent.TimeUnit;
 public class TestPathChildrenCache extends BaseClassForTests
 {
     @Test
-    public void     testException() throws Exception
+    public void     testModes() throws Exception
     {
         CuratorFramework client = CuratorFrameworkFactory.newClient(server.getConnectString(), new RetryOneTime(1));
         client.start();
         try
         {
-            Assert.assertTrue(client.getZookeeperClient().blockUntilConnectedOrTimedOut());
+            client.create().forPath(""/test"", new byte[0]);
+
+            for ( PathChildrenCacheMode mode : PathChildrenCacheMode.values() )
+            {
+                internalTestMode(client, mode);
+
+                client.delete().forPath(""/test/one"");
+                client.delete().forPath(""/test/two"");
+            }
+        }
+        finally
+        {
+            client.close();
+        }
+    }
+
+    private void     internalTestMode(CuratorFramework client, PathChildrenCacheMode testMode) throws Exception
+    {
+        PathChildrenCache       cache = new PathChildrenCache(client, ""/test"", testMode);
+
+        final CountDownLatch    latch = new CountDownLatch(2);
+        cache.addListener
+        (
+            new PathChildrenCacheListener()
+            {
+                @Override
+                public void handleException(CuratorFramework client, Exception exception)
+                {
+                }
+
+                @Override
+                public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception
+                {
+                    if ( event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED )
+               [/INST]
cience@default_code+  name
item_data
code_new_java
item_3 3par
par@land_null
phere@b4 345  parb151515"
"diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
index fb5d8b205..fdd9f46b3 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
@@ -42,8 +42,6 @@ import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.util.ResultSetAdapter;
 
-import static com.mysema.query.sql.SQLListenerContextBuilder.newContext;
-
 /**
  * AbstractSQLQuery is the base type for SQL query implementations
  *
@@ -130,9 +128,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param metadata the meta data for that context
      * @return  the newly started context
      */
-    protected SQLListenerContext startContext(Connection connection, QueryMetadata metadata)
+    protected SQLListenerContextImpl startContext(Connection connection, QueryMetadata metadata)
     {
-        SQLListenerContext context = newContext(metadata).with(connection).build();
+        SQLListenerContextImpl context = new SQLListenerContextImpl(metadata,connection);
         listeners.start(context);
         return context;
     }
@@ -144,9 +142,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param e the exception
      * @return the new context
      */
-    protected SQLListenerContext onException(SQLListenerContext context, Exception e)
+    protected SQLListenerContextImpl onException(SQLListenerContextImpl context, Exception e)
     {
-        context = newContext(context).with(e).build();
+        context.setException(e);
         listeners.exception(context);
         return context;
     }
@@ -171,7 +169,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     public ResultSet getResults(Expression<?>... exprs) {
         queryMixin.addProjection(exprs);
 
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -179,7 +177,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -189,7 +187,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -227,7 +225,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
 
     @SuppressWarnings(""unchecked"")
     private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullable final Expression<RT> expr) {
-        SQLListenerContext context = startContext(conn,queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn,queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -235,7 +233,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
 
@@ -245,7 +243,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), metadata.getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -300,7 +298,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     @Override
     public <RT> List<RT> list(Expression<RT> expr) {
         expr = queryMixin.addProjection(expr);
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -308,7 +306,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -318,7 +316,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             try {
                 setParameters(stmt, constants, serializer.getConstantPaths(), queryMixin.getMetadata().getParams());
-                context = newContext(context).with(stmt).build();
+                context.addPreparedStatement(stmt);
                 listeners.prepared(context);
 
                 listeners.preExecute(context);
@@ -359,23 +357,16 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
                     }
                     return rv;
                 } catch (IllegalAccessException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context, e);
                     throw new QueryException(e);
                 } catch (InvocationTargetException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (InstantiationException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (SQLException e) {
-                    context = onException(context, e);
-
+                    onException(context,e);
                     throw configuration.translate(queryString, constants, e);
                 } finally {
                     rs.close();
@@ -481,7 +472,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     }
 
     private long unsafeCount() throws SQLException {
-        SQLListenerContext context = startContext(conn,getMetadata());
+        SQLListenerContextImpl context = startContext(conn,getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(true);
@@ -489,7 +480,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         List<Object> constants = serializer.getConstants();
@@ -501,7 +492,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
 
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
index d64107c66..e542adcb7 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
@@ -18,11 +18,11 @@ class SQLListenerAdapter implements SQLDetailedListener
 {
 
     private final SQLListener sqlListener;
-    private final SQLDetailedListener SQLDetailedListener;
+    private final SQLDetailedListener detailedListener;
 
     SQLListenerAdapter(final SQLListener sqlListener)
     {
-        this.SQLDetailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
+        this.detailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
         this.sqlListener = sqlListener;
     }
 
@@ -34,81 +34,81 @@ class SQLListenerAdapter implements SQLDetailedListener
     @Override
     public void start(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.start(context);
+            detailedListener.start(context);
         }
     }
 
     @Override
     public void preRender(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preRender(context);
+            detailedListener.preRender(context);
         }
     }
 
     @Override
     public void rendered(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.rendered(context);
+            detailedListener.rendered(context);
         }
     }
 
     @Override
     public void prePrepare(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prePrepare(context);
+            detailedListener.prePrepare(context);
         }
     }
 
     @Override
     public void prepared(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prepared(context);
+            detailedListener.prepared(context);
         }
     }
 
     @Override
     public void preExecute(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preExecute(context);
+            detailedListener.preExecute(context);
         }
     }
 
     @Override
     public void executed(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.executed(context);
+            detailedListener.executed(context);
         }
     }
 
     @Override
     public void end(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.end(context);
+            detailedListener.end(context);
         }
     }
 
     @Override
     public void exception(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.exception(context);
+            detailedListener.exception(context);
         }
     }
 
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
index 5c8563edd..c5c14681b 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
@@ -5,23 +5,34 @@ import com.mysema.query.QueryMetadata;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.util.Collection;
-import java.util.Map;
 
 /**
- * A context object that is progressively filled out during query execution and is
- * passed to each {@link SQLDetailedListener} callback method
+ * A context object that is progressively filled out during query execution and is passed to each {@link
+ * SQLDetailedListener} callback method
  */
 public interface SQLListenerContext
 {
     /**
-     * The context getMap is a general purpose place that listeners can place objects.  It allows listeners to pass context
-     * between themselves during callbacks.
+     * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
      * <p/>
-     * This is never null but can be empty
      *
-     * @return the context getMap
+     * @param dataKey the key to look up
+     * @return the context object under that key
      */
-    Map<String, Object> getMap();
+    Object getData(String dataKey);
+
+    /**
+     * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
+     * <p/>
+     * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
+     * and then access if after that.
+     *
+     * @param dataKey the key to use
+     * @param value the value to place under that key
+     */
+    void setData(String dataKey, Object value);
 
     /**
      * @return the underlying query metadata
@@ -31,10 +42,17 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
-     * @return the underlying sql
+     * @return the underlying sql or first in a batch query
      */
     String getSQL();
 
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
+     * @return the underlying sql collection if the query is a batch query
+     */
+    Collection<String> getSQLStatements();
+
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
@@ -59,6 +77,13 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
+     * @return the underlying prepared statement or the first if its batch query
+     */
+    PreparedStatement getPreparedStatement();
+
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
      * @return the underlying set of prepared statements
      */
     Collection<PreparedStatement> getPreparedStatements();
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
deleted file mode 100644
index a1e663805..000000000
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.mysema.query.sql;
-
-import com.google.common.collect.Lists;
-import com.mysema.query.QueryMetadata;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * A builder of {@link com.mysema.query.sql.SQLListenerContext} objects
- */
-public class SQLListenerContextBuilder
-{
-    private Map<String, Object> contextMap = new HashMap<String, Object>();
-
-    private QueryMetadata md;
-
-    private String sql;
-
-    private RelationalPath<?> entity;
-
-    private Connection connection;
-
-    private Exception exception;
-
-    private Collection<PreparedStatement> preparedStatements;
-
-    SQLListenerContextBuilder(final QueryMetadata md)
-    {
-        this.md = md;
-    }
-
-    public static SQLListenerContextBuilder newContext(QueryMetadata md)
-    {
-        return new SQLListenerContextBuilder(md);
-    }
-
-    public static SQLListenerContextBuilder newContext(SQLListenerContext context)
-    {
-        return new SQLListenerContextBuilder(context.getMetadata())
-                .with(context.getMap())
-                .with(context.getConnection())
-                .with(context.getEntity())
-                .with(context.getException())
-                .with(context.getPreparedStatements())
-                .with(context.getSQL())
-                ;
-    }
-
-    SQLListenerContextBuilder with(Map<String, Object> contextMap)
-    {
-        this.contextMap = contextMap;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(RelationalPath<?> entity)
-    {
-        this.entity = entity;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(String sql)
-    {
-        this.sql = sql;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Exception exception)
-    {
-        this.exception = exception;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Connection connection)
-    {
-        this.connection = connection;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(PreparedStatement preparedStatement)
-    {
-        if (preparedStatement != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatement);
-        }
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Collection<PreparedStatement> preparedStatements)
-    {
-        if (preparedStatements != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatements);
-        }
-        return this;
-    }
-
-    public SQLListenerContext build()
-    {
-        return new SQLListenerContextImpl();
-    }
-
-    /**
-     * A simple implementation that looks at the builder for values
-     */
-    class SQLListenerContextImpl implements SQLListenerContext
-    {
-        @Override
-        public QueryMetadata getMetadata()
-        {
-            return md;
-        }
-
-        @Override
-        public RelationalPath<?> getEntity()
-        {
-            return entity;
-        }
-
-        @Override
-        public String getSQL()
-        {
-            return sql;
-        }
-
-        @Override
-        public Exception getException()
-        {
-            return exception;
-        }
-
-        @Override
-        public Connection getConnection()
-        {
-            return connection;
-        }
-
-        @Override
-        public Collection<PreparedStatement> getPreparedStatements()
-        {
-            return preparedStatements;
-        }
-
-        @Override
-        public Map<String, Object> getMap()
-        {
-            return contextMap;
-        }
-
-        @Override
-        public String toString()
-        {
-            StringBuilder sb = new StringBuilder()
-                    .append("" sql:"").append(nicerSql(sql))
-                    .append("" connection:"").append(connection == null ? ""not connected"" : ""connected"")
-                    .append("" entity:"").append(entity)
-                    .append("" exception:"").append(exception);
-
-            for (Map.Entry<String, Object> entry : contextMap.entrySet())
-            {
-",Removed the builder and made the internal context object mutable . . Also various fix ups from PR review,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
index fb5d8b205..fdd9f46b3 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
@@ -42,8 +42,6 @@ import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.util.ResultSetAdapter;
 
-import static com.mysema.query.sql.SQLListenerContextBuilder.newContext;
-
 /**
  * AbstractSQLQuery is the base type for SQL query implementations
  *
@@ -130,9 +128,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param metadata the meta data for that context
      * @return  the newly started context
      */
-    protected SQLListenerContext startContext(Connection connection, QueryMetadata metadata)
+    protected SQLListenerContextImpl startContext(Connection connection, QueryMetadata metadata)
     {
-        SQLListenerContext context = newContext(metadata).with(connection).build();
+        SQLListenerContextImpl context = new SQLListenerContextImpl(metadata,connection);
         listeners.start(context);
         return context;
     }
@@ -144,9 +142,9 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
      * @param e the exception
      * @return the new context
      */
-    protected SQLListenerContext onException(SQLListenerContext context, Exception e)
+    protected SQLListenerContextImpl onException(SQLListenerContextImpl context, Exception e)
     {
-        context = newContext(context).with(e).build();
+        context.setException(e);
         listeners.exception(context);
         return context;
     }
@@ -171,7 +169,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     public ResultSet getResults(Expression<?>... exprs) {
         queryMixin.addProjection(exprs);
 
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -179,7 +177,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -189,7 +187,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -227,7 +225,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
 
     @SuppressWarnings(""unchecked"")
     private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullable final Expression<RT> expr) {
-        SQLListenerContext context = startContext(conn,queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn,queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -235,7 +233,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
 
@@ -245,7 +243,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             listeners.prePrepare(context);
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), metadata.getParams());
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
@@ -300,7 +298,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     @Override
     public <RT> List<RT> list(Expression<RT> expr) {
         expr = queryMixin.addProjection(expr);
-        SQLListenerContext context = startContext(conn, queryMixin.getMetadata());
+        SQLListenerContextImpl context = startContext(conn, queryMixin.getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(false);
@@ -308,7 +306,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         listeners.notifyQuery(queryMixin.getMetadata());
@@ -318,7 +316,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             final PreparedStatement stmt = conn.prepareStatement(queryString);
             try {
                 setParameters(stmt, constants, serializer.getConstantPaths(), queryMixin.getMetadata().getParams());
-                context = newContext(context).with(stmt).build();
+                context.addPreparedStatement(stmt);
                 listeners.prepared(context);
 
                 listeners.preExecute(context);
@@ -359,23 +357,16 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
                     }
                     return rv;
                 } catch (IllegalAccessException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context, e);
                     throw new QueryException(e);
                 } catch (InvocationTargetException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (InstantiationException e) {
-                    context = newContext(context).with(e).build();
-                    listeners.exception(context);
-
+                    onException(context,e);
                     throw new QueryException(e);
                 } catch (SQLException e) {
-                    context = onException(context, e);
-
+                    onException(context,e);
                     throw configuration.translate(queryString, constants, e);
                 } finally {
                     rs.close();
@@ -481,7 +472,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
     }
 
     private long unsafeCount() throws SQLException {
-        SQLListenerContext context = startContext(conn,getMetadata());
+        SQLListenerContextImpl context = startContext(conn,getMetadata());
 
         listeners.preRender(context);
         SQLSerializer serializer = serialize(true);
@@ -489,7 +480,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
         if (logger.isDebugEnabled()) {
             logger.debug(""query : {}"", queryString);
         }
-        context = newContext(context).with(queryString).build();
+        context.addSQL(queryString);
         listeners.rendered(context);
 
         List<Object> constants = serializer.getConstants();
@@ -501,7 +492,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends Pr
             stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, serializer.getConstantPaths(), getMetadata().getParams());
 
-            context = newContext(context).with(stmt).build();
+            context.addPreparedStatement(stmt);
             listeners.prepared(context);
 
             listeners.preExecute(context);
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
index d64107c66..e542adcb7 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerAdapter.java
@@ -18,11 +18,11 @@ class SQLListenerAdapter implements SQLDetailedListener
 {
 
     private final SQLListener sqlListener;
-    private final SQLDetailedListener SQLDetailedListener;
+    private final SQLDetailedListener detailedListener;
 
     SQLListenerAdapter(final SQLListener sqlListener)
     {
-        this.SQLDetailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
+        this.detailedListener = sqlListener instanceof SQLDetailedListener ? (SQLDetailedListener) sqlListener : null;
         this.sqlListener = sqlListener;
     }
 
@@ -34,81 +34,81 @@ class SQLListenerAdapter implements SQLDetailedListener
     @Override
     public void start(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.start(context);
+            detailedListener.start(context);
         }
     }
 
     @Override
     public void preRender(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preRender(context);
+            detailedListener.preRender(context);
         }
     }
 
     @Override
     public void rendered(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.rendered(context);
+            detailedListener.rendered(context);
         }
     }
 
     @Override
     public void prePrepare(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prePrepare(context);
+            detailedListener.prePrepare(context);
         }
     }
 
     @Override
     public void prepared(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.prepared(context);
+            detailedListener.prepared(context);
         }
     }
 
     @Override
     public void preExecute(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.preExecute(context);
+            detailedListener.preExecute(context);
         }
     }
 
     @Override
     public void executed(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.executed(context);
+            detailedListener.executed(context);
         }
     }
 
     @Override
     public void end(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.end(context);
+            detailedListener.end(context);
         }
     }
 
     @Override
     public void exception(final SQLListenerContext context)
     {
-        if (SQLDetailedListener != null)
+        if (detailedListener != null)
         {
-            SQLDetailedListener.exception(context);
+            detailedListener.exception(context);
         }
     }
 
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
index 5c8563edd..c5c14681b 100644
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
+++ b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
@@ -5,23 +5,34 @@ import com.mysema.query.QueryMetadata;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.util.Collection;
-import java.util.Map;
 
 /**
- * A context object that is progressively filled out during query execution and is
- * passed to each {@link SQLDetailedListener} callback method
+ * A context object that is progressively filled out during query execution and is passed to each {@link
+ * SQLDetailedListener} callback method
  */
 public interface SQLListenerContext
 {
     /**
-     * The context getMap is a general purpose place that listeners can place objects.  It allows listeners to pass context
-     * between themselves during callbacks.
+     * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
      * <p/>
-     * This is never null but can be empty
      *
-     * @return the context getMap
+     * @param dataKey the key to look up
+     * @return the context object under that key
      */
-    Map<String, Object> getMap();
+    Object getData(String dataKey);
+
+    /**
+     * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
+     * context between themselves during callbacks.
+     * <p/>
+     * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
+     * and then access if after that.
+     *
+     * @param dataKey the key to use
+     * @param value the value to place under that key
+     */
+    void setData(String dataKey, Object value);
 
     /**
      * @return the underlying query metadata
@@ -31,10 +42,17 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
-     * @return the underlying sql
+     * @return the underlying sql or first in a batch query
      */
     String getSQL();
 
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
+     * @return the underlying sql collection if the query is a batch query
+     */
+    Collection<String> getSQLStatements();
+
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
@@ -59,6 +77,13 @@ public interface SQLListenerContext
     /**
      * NOTE : This can be null depending on the stage of the query execution
      *
+     * @return the underlying prepared statement or the first if its batch query
+     */
+    PreparedStatement getPreparedStatement();
+
+    /**
+     * NOTE : This can be empty depending on the stage of the query execution
+     *
      * @return the underlying set of prepared statements
      */
     Collection<PreparedStatement> getPreparedStatements();
diff --git a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java b/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
deleted file mode 100644
index a1e663805..000000000
--- a/querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextBuilder.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.mysema.query.sql;
-
-import com.google.common.collect.Lists;
-import com.mysema.query.QueryMetadata;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * A builder of {@link com.mysema.query.sql.SQLListenerContext} objects
- */
-public class SQLListenerContextBuilder
-{
-    private Map<String, Object> contextMap = new HashMap<String, Object>();
-
-    private QueryMetadata md;
-
-    private String sql;
-
-    private RelationalPath<?> entity;
-
-    private Connection connection;
-
-    private Exception exception;
-
-    private Collection<PreparedStatement> preparedStatements;
-
-    SQLListenerContextBuilder(final QueryMetadata md)
-    {
-        this.md = md;
-    }
-
-    public static SQLListenerContextBuilder newContext(QueryMetadata md)
-    {
-        return new SQLListenerContextBuilder(md);
-    }
-
-    public static SQLListenerContextBuilder newContext(SQLListenerContext context)
-    {
-        return new SQLListenerContextBuilder(context.getMetadata())
-                .with(context.getMap())
-                .with(context.getConnection())
-                .with(context.getEntity())
-                .with(context.getException())
-                .with(context.getPreparedStatements())
-                .with(context.getSQL())
-                ;
-    }
-
-    SQLListenerContextBuilder with(Map<String, Object> contextMap)
-    {
-        this.contextMap = contextMap;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(RelationalPath<?> entity)
-    {
-        this.entity = entity;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(String sql)
-    {
-        this.sql = sql;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Exception exception)
-    {
-        this.exception = exception;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Connection connection)
-    {
-        this.connection = connection;
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(PreparedStatement preparedStatement)
-    {
-        if (preparedStatement != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatement);
-        }
-        return this;
-    }
-
-    public SQLListenerContextBuilder with(Collection<PreparedStatement> preparedStatements)
-    {
-        if (preparedStatements != null)
-        {
-            this.preparedStatements = Lists.newArrayList(preparedStatements);
-        }
-        return this;
-    }
-
-    public SQLListenerContext build()
-    {
-        return new SQLListenerContextImpl();
-    }
-
-    /**
-     * A simple implementation that looks at the builder for values
-     */
-    class SQLListenerContextImpl implements SQLListenerContext
-    {
-        @Override
-        public QueryMetadata getMetadata()
-        {
-            return md;
-        }
-
-        @Override
-        public RelationalPath<?> getEntity()
-        {
-            return entity;
-        }
-
-        @Override
-        public String getSQL()
-        {
-            return sql;
-        }
-
-        @Override
-        public Exception getException()
-        {
-            return exception;
-        }
-
-        @Override
-        public Connection getConnection()
-        {
-            return connection;
-        }
-
-        @Override
-        public Collection<PreparedStatement> getPreparedStatements()
-        {
-            return preparedStatements;
-        }
-
-        @Override
-        public Map<String, Object> getMap()
-        {
-            return contextMap;
-        }
-
-        @Override
-        public String toString()
-        {
-            StringBuilder sb = new StringBuilder()
-                    .append("" sql:"").append(nicerSql(sql))
-                    .append("" connection:"").append(connection == null ? ""not connected"" : ""connected"")
-                    .append("" entity:"").append(entity)
-                    .append("" exception:"").append(exception);
-
-            for (Map.Entry<String, Object> entry : contextMap.entrySet())
-            {
-           [/INST]+++++++++++++++++++++++++++++++++++++++
+++
++
+++"
"diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
index 56dcae5..cfc6a10 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
@@ -278,6 +278,7 @@ public class AsyncHttpClient {
                             newReq.LOGTAG = request.LOGTAG;
                             newReq.proxyHost = request.proxyHost;
                             newReq.proxyPort = request.proxyPort;
+                            newReq.useAndroidProxy = request.useAndroidProxy;
                             copyHeader(request, newReq, ""User-Agent"");
                             copyHeader(request, newReq, ""Range"");
                             request.logi(""Redirecting"");
diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
index 35d9902..dc1ef13 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
@@ -1,6 +1,8 @@
 package com.koushikdutta.async.http;
 
+import android.annotation.SuppressLint;
 import android.net.Uri;
+import android.os.Build;
 import android.util.Log;
 
 import com.koushikdutta.async.AsyncSSLException;
@@ -16,6 +18,10 @@ import org.apache.http.RequestLine;
 import org.apache.http.message.BasicHeader;
 import org.apache.http.params.HttpParams;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
+import java.net.ProxySelector;
 import java.net.URI;
 import java.util.List;
 import java.util.Map;
@@ -318,21 +324,61 @@ public class AsyncHttpRequest {
 
     String proxyHost;
     int proxyPort = -1;
+    boolean useAndroidProxy = true;
     public void enableProxy(String host, int port) {
         proxyHost = host;
         proxyPort = port;
+        useAndroidProxy = proxyPort == 0;
+    }
+
+    public void enableSystemProxy(boolean enable) {
+        useAndroidProxy = enable;
     }
 
     public void disableProxy() {
         proxyHost = null;
         proxyPort = -1;
+        useAndroidProxy = false;
+    }
+
+    @SuppressLint(""NewApi"")
+    private void setupAndroidProxy() {
+        List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(getUri().toString()));
+        if (proxies.isEmpty()) {
+            disableProxy();
+        } else {
+            Proxy proxy = proxies.get(0);
+            if (proxy.type() == Proxy.Type.DIRECT) {
+                disableProxy();
+            } else if (proxy.type() == Proxy.Type.HTTP && proxy.address() instanceof InetSocketAddress) {
+                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+                    proxyHost = proxyAddress.getHostString();
+                else {
+                    InetAddress address = proxyAddress.getAddress();
+                    if (address!=null)
+                        proxyHost = address.getHostAddress();
+                    else
+",Use the system proxy when it \' s defined . .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
index 56dcae5..cfc6a10 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
@@ -278,6 +278,7 @@ public class AsyncHttpClient {
                             newReq.LOGTAG = request.LOGTAG;
                             newReq.proxyHost = request.proxyHost;
                             newReq.proxyPort = request.proxyPort;
+                            newReq.useAndroidProxy = request.useAndroidProxy;
                             copyHeader(request, newReq, ""User-Agent"");
                             copyHeader(request, newReq, ""Range"");
                             request.logi(""Redirecting"");
diff --git a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
index 35d9902..dc1ef13 100644
--- a/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
+++ b/AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
@@ -1,6 +1,8 @@
 package com.koushikdutta.async.http;
 
+import android.annotation.SuppressLint;
 import android.net.Uri;
+import android.os.Build;
 import android.util.Log;
 
 import com.koushikdutta.async.AsyncSSLException;
@@ -16,6 +18,10 @@ import org.apache.http.RequestLine;
 import org.apache.http.message.BasicHeader;
 import org.apache.http.params.HttpParams;
 
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
+import java.net.ProxySelector;
 import java.net.URI;
 import java.util.List;
 import java.util.Map;
@@ -318,21 +324,61 @@ public class AsyncHttpRequest {
 
     String proxyHost;
     int proxyPort = -1;
+    boolean useAndroidProxy = true;
     public void enableProxy(String host, int port) {
         proxyHost = host;
         proxyPort = port;
+        useAndroidProxy = proxyPort == 0;
+    }
+
+    public void enableSystemProxy(boolean enable) {
+        useAndroidProxy = enable;
     }
 
     public void disableProxy() {
         proxyHost = null;
         proxyPort = -1;
+        useAndroidProxy = false;
+    }
+
+    @SuppressLint(""NewApi"")
+    private void setupAndroidProxy() {
+        List<Proxy> proxies = ProxySelector.getDefault().select(URI.create(getUri().toString()));
+        if (proxies.isEmpty()) {
+            disableProxy();
+        } else {
+            Proxy proxy = proxies.get(0);
+            if (proxy.type() == Proxy.Type.DIRECT) {
+                disableProxy();
+            } else if (proxy.type() == Proxy.Type.HTTP && proxy.address() instanceof InetSocketAddress) {
+                InetSocketAddress proxyAddress = (InetSocketAddress) proxy.address();
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+                    proxyHost = proxyAddress.getHostString();
+                else {
+                    InetAddress address = proxyAddress.getAddress();
+                    if (address!=null)
+                        proxyHost = address.getHostAddress();
+                    else
+                     [/INST]  Here is a possible meaningful commit message based on the diff:

""Added support for Android proxy in AsyncHttpClient and AsyncHttpRequest classes. The `useAndroidProxy` field was added to AsyncHttpRequest to track whether the proxy settings"
"diff --git a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
index 7f890411a..a4cddf8b3 100644
--- a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
+++ b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
@@ -27,6 +27,7 @@ import com.jpexs.decompiler.flash.helpers.GraphTextWriter;
 import com.jpexs.decompiler.flash.tags.Tag;
 import com.jpexs.decompiler.flash.tags.base.ASMSource;
 import com.jpexs.decompiler.flash.types.annotations.Conditional;
+import com.jpexs.decompiler.flash.types.annotations.HideInRawEdit;
 import com.jpexs.decompiler.flash.types.annotations.Internal;
 import com.jpexs.decompiler.flash.types.annotations.SWFType;
 import com.jpexs.helpers.ByteArrayRange;
@@ -154,7 +155,7 @@ public class BUTTONCONDACTION implements ASMSource, Serializable {
     /**
      * Actions to perform in byte array
      */
-    @Internal
+    @HideInRawEdit
     public ByteArrayRange actionBytes;
 
     /**
diff --git a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
index 60171d41b..642b1c874 100644
--- a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
+++ b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
@@ -1211,7 +1211,7 @@ public class PreviewPanel extends JPersistentSplitPane implements TagEditorPanel
         tag.getTimelined().resetTimeline();
         swf.assignClassesToSymbols();
         swf.assignExportNamesToSymbols();
-        mainPanel.repaintTree();
+        mainPanel.refreshTree(swf);
         mainPanel.setTagTreeSelectedNode(tag);
         genericEditButton.setVisible(true);
         genericSaveButton.setVisible(false);",refresh tree after raw edit ( for example to show the new script tags when a buttonconditionaction is added to a DefineButton tag ),"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
index 7f890411a..a4cddf8b3 100644
--- a/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
+++ b/libsrc/ffdec_lib/src/com/jpexs/decompiler/flash/types/BUTTONCONDACTION.java
@@ -27,6 +27,7 @@ import com.jpexs.decompiler.flash.helpers.GraphTextWriter;
 import com.jpexs.decompiler.flash.tags.Tag;
 import com.jpexs.decompiler.flash.tags.base.ASMSource;
 import com.jpexs.decompiler.flash.types.annotations.Conditional;
+import com.jpexs.decompiler.flash.types.annotations.HideInRawEdit;
 import com.jpexs.decompiler.flash.types.annotations.Internal;
 import com.jpexs.decompiler.flash.types.annotations.SWFType;
 import com.jpexs.helpers.ByteArrayRange;
@@ -154,7 +155,7 @@ public class BUTTONCONDACTION implements ASMSource, Serializable {
     /**
      * Actions to perform in byte array
      */
-    @Internal
+    @HideInRawEdit
     public ByteArrayRange actionBytes;
 
     /**
diff --git a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
index 60171d41b..642b1c874 100644
--- a/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
+++ b/src/com/jpexs/decompiler/flash/gui/PreviewPanel.java
@@ -1211,7 +1211,7 @@ public class PreviewPanel extends JPersistentSplitPane implements TagEditorPanel
         tag.getTimelined().resetTimeline();
         swf.assignClassesToSymbols();
         swf.assignExportNamesToSymbols();
-        mainPanel.repaintTree();
+        mainPanel.refreshTree(swf);
         mainPanel.setTagTreeSelectedNode(tag);
         genericEditButton.setVisible(true);
         genericSaveButton.setVisible(false); [/INST]  Here are two meaningful commit messages based on the diff output you provided:

**commit 1:**

""Update BUTTONCONDACTION to add hide-in-raw-edit annotation""

This commit"
"diff --git a/activity/activity-ktx/api/1.0.0-alpha01.txt b/activity/activity-ktx/api/1.0.0-alpha01.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha01.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha01.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha02.txt b/activity/activity-ktx/api/1.0.0-alpha02.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha02.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha02.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha03.txt b/activity/activity-ktx/api/1.0.0-alpha03.txt
index 335efc368a6..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha03.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha03.txt
@@ -3,6 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha04.txt b/activity/activity-ktx/api/1.0.0-alpha04.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha04.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha04.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha05.txt b/activity/activity-ktx/api/1.0.0-alpha05.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha05.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha06.txt b/activity/activity-ktx/api/1.0.0-alpha06.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha06.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_current.txt b/activity/activity-ktx/api/restricted_current.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_current.txt
+++ b/activity/activity-ktx/api/restricted_current.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity/api/1.0.0-alpha03.txt b/activity/activity/api/1.0.0-alpha03.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha03.txt
+++ b/activity/activity/api/1.0.0-alpha03.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/1.0.0-alpha04.txt b/activity/activity/api/1.0.0-alpha04.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha04.txt
+++ b/activity/activity/api/1.0.0-alpha04.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/restricted_1.0.0-alpha05.txt b/activity/activity/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..1d5064eea00 100644
--- a/activity/activity/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,22 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha06.txt b/activity/activity/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..16e509e06b1 100644
--- a/activity/activity/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,30 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+  public final class OnBackPressedDispatcher {
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.activity.OnBackPressedCallback);
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method public boolean onBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha07.txt b/activity/activity/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..ba5e73341ae 100644
--- a/activity/activity/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,39 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public boolean isEnabled();
+    method @MainThread public void remove();
+    method @MainThread public void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha08.txt b/activity/activity/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-beta01.txt b/activity/activity/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity/api/restricted_1.0.0-beta01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-rc01.txt b/activity/activity/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity/api/restricted_1.0.0-rc01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha01.txt b/activity/activity/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha02.txt b/activity/activity/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_current.txt b/activity/activity/api/restricted_current.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_current.txt
+++ b/activity/activity/api/restricted_current.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/annotations/api/1.0.0.txt b/annotations/api/1.0.0.txt
index dc1c3ce20c6..3cf46a67d1f 100644
--- a/annotations/api/1.0.0.txt
+++ b/annotations/api/1.0.0.txt
@@ -124,7 +124,7 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
   }
 
-  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) @Dimension(unit=androidx.annotation.Dimension.PX) public @interface Px {
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
   }
 
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
@@ -159,7 +159,7 @@ package androidx.annotation {
     method public abstract androidx.annotation.RestrictTo.Scope[] value();
   }
 
-  public static enum RestrictTo.Scope {
+  public enum RestrictTo.Scope {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
diff --git a/annotations/api/1.1.0-alpha01.txt b/annotations/api/1.1.0-alpha01.txt
index d66f9f581bf..2adc9756be6 100644
--- a/annotations/api/1.1.0-alpha01.txt
+++ b/annotations/api/1.1.0-alpha01.txt
@@ -167,7 +167,6 @@ package androidx.annotation {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
-    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP_PREFIX;
     enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
     enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
   }
diff --git a/annotations/api/1.1.0-alpha02.txt b/annotations/api/1.1.0-alpha02.txt
index 7226b137ff4..d66f9f581bf 100644
--- a/annotations/api/1.1.0-alpha02.txt
+++ b/annotations/api/1.1.0-alpha02.txt
@@ -81,35 +81,6 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
   }
 
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public @interface InspectableProperty {
-    method public abstract int attributeId() default 0;
-    method public abstract androidx.annotation.InspectableProperty.EnumMap[] enumMapping() default {};
-    method public abstract androidx.annotation.InspectableProperty.FlagMap[] flagMapping() default {};
-    method public abstract boolean hasAttributeId() default true;
-    method public abstract String name() default """";
-    method public abstract androidx.annotation.InspectableProperty.ValueType valueType() default androidx.annotation.InspectableProperty.ValueType.INFERRED;
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.EnumMap {
-    method public abstract String name();
-    method public abstract int value();
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.FlagMap {
-    method public abstract int mask() default 0;
-    method public abstract String name();
-    method public abstract int target();
-  }
-
-  public enum InspectableProperty.ValueType {
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType COLOR;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType GRAVITY;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INFERRED;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_ENUM;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_FLAG;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType NONE;
-  }
-
   @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
     method public abstract boolean flag() default false;
     method public abstract boolean open() default false;
diff --git a/annotations/api/restricted_1.0.0.txt b/annotations/api/restricted_1.0.0.txt
index da4f6cc18fe..3cf46a67d1f 100644
--- a/annotations/api/restricted_1.0.0.txt
+++ b/annotations/api/restricted_1.0.0.txt
@@ -1 +1,212 @@
 // Signature format: 3.0
+package androidx.annotation {
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimatorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnyRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface AnyThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ArrayRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AttrRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface BinderThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface BoolRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CallSuper {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CheckResult {
+    method public abstract String suggest() default """";
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorInt {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorLong {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ColorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DimenRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Dimension {
+    method @DimensionUnit public abstract int unit() default androidx.annotation.Dimension.PX;
+    field public static final int DP = 0; // 0x0
+    field public static final int PX = 1; // 0x1
+    field public static final int SP = 2; // 0x2
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DrawableRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface FloatRange {
+    method public abstract double from() default java.lang.Double.NEGATIVE_INFINITY;
+    method public abstract boolean fromInclusive() default true;
+    method public abstract double to() default java.lang.Double.POSITIVE_INFINITY;
+    method public abstract boolean toInclusive() default true;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FontRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FractionRes {
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface GuardedBy {
+    method public abstract String value();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface HalfFloat {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract int[] value() default {};
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntRange {
+    method public abstract long from() default java.lang.Long.MIN_VALUE;
+    method public abstract long to() default java.lang.Long.MAX_VALUE;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IntegerRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface InterpolatorRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PACKAGE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Keep {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface LayoutRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface LongDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract long[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface MainThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface MenuRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface NavigationRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface NonNull {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface Nullable {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
+  }
+
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RequiresApi {
+    method @IntRange(from=1) public abstract int api() default 1;
+    method @IntRange(from=1) public abstract int value() default 1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR}) public @interface RequiresFeature {
+    method public abstract String enforcement();
+    method public abstract String name();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PARAMETER}) public @interface RequiresPermission {
+    method public abstract String[] allOf() default {};
+    method public abstract String[] anyOf() default {};
+    method public abstract boolean conditional() default false;
+    method public abstract String value() default """";
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Read {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Write {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RestrictTo {
+    method public abstract androidx.annotation.RestrictTo.Scope[] value();
+  }
+
+  public enum RestrictTo.Scope {
+    enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Size {
+    method public abstract long max() default java.lang.Long.MAX_VALUE;
+    method public abstract long min() default java.lang.Long.MIN_VALUE;
+    method public abstract long multiple() default 1;
+    method public abstract long value() default -1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface StringDef {
+    method public abstract boolean open() default false;
+    method public abstract String[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface StringRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public",Making restricted api txt files also include public apis .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/activity/activity-ktx/api/1.0.0-alpha01.txt b/activity/activity-ktx/api/1.0.0-alpha01.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha01.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha01.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha02.txt b/activity/activity-ktx/api/1.0.0-alpha02.txt
index e100a2f7f07..3708d456d73 100644
--- a/activity/activity-ktx/api/1.0.0-alpha02.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha02.txt
@@ -10,6 +10,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, androidx.lifecycle.ViewModelProvider.Factory? factory = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha03.txt b/activity/activity-ktx/api/1.0.0-alpha03.txt
index 335efc368a6..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha03.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha03.txt
@@ -3,6 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha04.txt b/activity/activity-ktx/api/1.0.0-alpha04.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha04.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha04.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha05.txt b/activity/activity-ktx/api/1.0.0-alpha05.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha05.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/1.0.0-alpha06.txt b/activity/activity-ktx/api/1.0.0-alpha06.txt
index be35c633fb7..93ee07e2213 100644
--- a/activity/activity-ktx/api/1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/1.0.0-alpha06.txt
@@ -3,7 +3,7 @@ package androidx.activity {
 
   public final class ActivityViewModelLazyKt {
     ctor public ActivityViewModelLazyKt();
-    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM>! viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>! factoryProducer = null);
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
   }
 
 }
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..93ee07e2213 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,10 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-beta01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity-ktx/api/restricted_1.0.0-rc01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity-ktx/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity-ktx/api/restricted_current.txt b/activity/activity-ktx/api/restricted_current.txt
index da4f6cc18fe..c6e9a9abbcd 100644
--- a/activity/activity-ktx/api/restricted_current.txt
+++ b/activity/activity-ktx/api/restricted_current.txt
@@ -1 +1,15 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public final class ActivityViewModelLazyKt {
+    ctor public ActivityViewModelLazyKt();
+    method @MainThread public static inline <reified VM extends androidx.lifecycle.ViewModel> kotlin.Lazy<VM> viewModels(androidx.activity.ComponentActivity, kotlin.jvm.functions.Function0<? extends androidx.lifecycle.ViewModelProvider.Factory>? factoryProducer = null);
+  }
+
+  public final class OnBackPressedDispatcherKt {
+    ctor public OnBackPressedDispatcherKt();
+    method public static androidx.activity.OnBackPressedCallback addCallback(androidx.activity.OnBackPressedDispatcher, androidx.lifecycle.LifecycleOwner? owner = null, boolean enabled = true, kotlin.jvm.functions.Function1<? super androidx.activity.OnBackPressedCallback,kotlin.Unit> onBackPressed);
+  }
+
+}
+
diff --git a/activity/activity/api/1.0.0-alpha03.txt b/activity/activity/api/1.0.0-alpha03.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha03.txt
+++ b/activity/activity/api/1.0.0-alpha03.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/1.0.0-alpha04.txt b/activity/activity/api/1.0.0-alpha04.txt
index 6907f239359..0eb2006bf5a 100644
--- a/activity/activity/api/1.0.0-alpha04.txt
+++ b/activity/activity/api/1.0.0-alpha04.txt
@@ -5,7 +5,7 @@ package androidx.activity {
     ctor public ComponentActivity();
     method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
     method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
-    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle> getBundleSavedStateRegistry();
+    method public final androidx.savedstate.SavedStateRegistry<android.os.Bundle!> getBundleSavedStateRegistry();
     method @Deprecated public Object? getLastCustomNonConfigurationInstance();
     method public androidx.lifecycle.ViewModelStore getViewModelStore();
     method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
diff --git a/activity/activity/api/restricted_1.0.0-alpha05.txt b/activity/activity/api/restricted_1.0.0-alpha05.txt
index da4f6cc18fe..1d5064eea00 100644
--- a/activity/activity/api/restricted_1.0.0-alpha05.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha05.txt
@@ -1 +1,22 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    method public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha06.txt b/activity/activity/api/restricted_1.0.0-alpha06.txt
index da4f6cc18fe..16e509e06b1 100644
--- a/activity/activity/api/restricted_1.0.0-alpha06.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha06.txt
@@ -1 +1,30 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public interface OnBackPressedCallback {
+    method public boolean handleOnBackPressed();
+  }
+
+  public final class OnBackPressedDispatcher {
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.activity.OnBackPressedCallback);
+    method public androidx.arch.core.util.Cancellable addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method public boolean onBackPressed();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha07.txt b/activity/activity/api/restricted_1.0.0-alpha07.txt
index da4f6cc18fe..ba5e73341ae 100644
--- a/activity/activity/api/restricted_1.0.0-alpha07.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha07.txt
@@ -1 +1,39 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public void addOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+    method @Deprecated public void addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+    method @Deprecated public void removeOnBackPressedCallback(androidx.activity.OnBackPressedCallback);
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public boolean isEnabled();
+    method @MainThread public void remove();
+    method @MainThread public void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-alpha08.txt b/activity/activity/api/restricted_1.0.0-alpha08.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-alpha08.txt
+++ b/activity/activity/api/restricted_1.0.0-alpha08.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-beta01.txt b/activity/activity/api/restricted_1.0.0-beta01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-beta01.txt
+++ b/activity/activity/api/restricted_1.0.0-beta01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.0.0-rc01.txt b/activity/activity/api/restricted_1.0.0-rc01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.0.0-rc01.txt
+++ b/activity/activity/api/restricted_1.0.0-rc01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha01.txt b/activity/activity/api/restricted_1.1.0-alpha01.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha01.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha01.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_1.1.0-alpha02.txt b/activity/activity/api/restricted_1.1.0-alpha02.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_1.1.0-alpha02.txt
+++ b/activity/activity/api/restricted_1.1.0-alpha02.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/activity/activity/api/restricted_current.txt b/activity/activity/api/restricted_current.txt
index da4f6cc18fe..cd98da605a8 100644
--- a/activity/activity/api/restricted_current.txt
+++ b/activity/activity/api/restricted_current.txt
@@ -1 +1,38 @@
 // Signature format: 3.0
+package androidx.activity {
+
+  public class ComponentActivity extends androidx.core.app.ComponentActivity implements androidx.lifecycle.LifecycleOwner androidx.activity.OnBackPressedDispatcherOwner androidx.savedstate.SavedStateRegistryOwner androidx.lifecycle.ViewModelStoreOwner {
+    ctor public ComponentActivity();
+    ctor @ContentView public ComponentActivity(@LayoutRes int);
+    method @Deprecated public Object? getLastCustomNonConfigurationInstance();
+    method public androidx.lifecycle.Lifecycle getLifecycle();
+    method public final androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+    method public final androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
+    method public androidx.lifecycle.ViewModelStore getViewModelStore();
+    method @Deprecated public Object? onRetainCustomNonConfigurationInstance();
+    method public final Object? onRetainNonConfigurationInstance();
+  }
+
+  public abstract class OnBackPressedCallback {
+    ctor public OnBackPressedCallback(boolean);
+    method @MainThread public abstract void handleOnBackPressed();
+    method @MainThread public final boolean isEnabled();
+    method @MainThread public final void remove();
+    method @MainThread public final void setEnabled(boolean);
+  }
+
+  public final class OnBackPressedDispatcher {
+    ctor public OnBackPressedDispatcher();
+    ctor public OnBackPressedDispatcher(Runnable?);
+    method @MainThread public void addCallback(androidx.activity.OnBackPressedCallback);
+    method @MainThread public void addCallback(androidx.lifecycle.LifecycleOwner, androidx.activity.OnBackPressedCallback);
+    method @MainThread public boolean hasEnabledCallbacks();
+    method @MainThread public void onBackPressed();
+  }
+
+  public interface OnBackPressedDispatcherOwner extends androidx.lifecycle.LifecycleOwner {
+    method public androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
+  }
+
+}
+
diff --git a/annotations/api/1.0.0.txt b/annotations/api/1.0.0.txt
index dc1c3ce20c6..3cf46a67d1f 100644
--- a/annotations/api/1.0.0.txt
+++ b/annotations/api/1.0.0.txt
@@ -124,7 +124,7 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
   }
 
-  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) @Dimension(unit=androidx.annotation.Dimension.PX) public @interface Px {
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
   }
 
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
@@ -159,7 +159,7 @@ package androidx.annotation {
     method public abstract androidx.annotation.RestrictTo.Scope[] value();
   }
 
-  public static enum RestrictTo.Scope {
+  public enum RestrictTo.Scope {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
diff --git a/annotations/api/1.1.0-alpha01.txt b/annotations/api/1.1.0-alpha01.txt
index d66f9f581bf..2adc9756be6 100644
--- a/annotations/api/1.1.0-alpha01.txt
+++ b/annotations/api/1.1.0-alpha01.txt
@@ -167,7 +167,6 @@ package androidx.annotation {
     enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
     enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
-    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP_PREFIX;
     enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
     enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
   }
diff --git a/annotations/api/1.1.0-alpha02.txt b/annotations/api/1.1.0-alpha02.txt
index 7226b137ff4..d66f9f581bf 100644
--- a/annotations/api/1.1.0-alpha02.txt
+++ b/annotations/api/1.1.0-alpha02.txt
@@ -81,35 +81,6 @@ package androidx.annotation {
   @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
   }
 
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public @interface InspectableProperty {
-    method public abstract int attributeId() default 0;
-    method public abstract androidx.annotation.InspectableProperty.EnumMap[] enumMapping() default {};
-    method public abstract androidx.annotation.InspectableProperty.FlagMap[] flagMapping() default {};
-    method public abstract boolean hasAttributeId() default true;
-    method public abstract String name() default """";
-    method public abstract androidx.annotation.InspectableProperty.ValueType valueType() default androidx.annotation.InspectableProperty.ValueType.INFERRED;
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.EnumMap {
-    method public abstract String name();
-    method public abstract int value();
-  }
-
-  @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface InspectableProperty.FlagMap {
-    method public abstract int mask() default 0;
-    method public abstract String name();
-    method public abstract int target();
-  }
-
-  public enum InspectableProperty.ValueType {
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType COLOR;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType GRAVITY;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INFERRED;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_ENUM;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType INT_FLAG;
-    enum_constant public static final androidx.annotation.InspectableProperty.ValueType NONE;
-  }
-
   @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
     method public abstract boolean flag() default false;
     method public abstract boolean open() default false;
diff --git a/annotations/api/restricted_1.0.0.txt b/annotations/api/restricted_1.0.0.txt
index da4f6cc18fe..3cf46a67d1f 100644
--- a/annotations/api/restricted_1.0.0.txt
+++ b/annotations/api/restricted_1.0.0.txt
@@ -1 +1,212 @@
 // Signature format: 3.0
+package androidx.annotation {
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnimatorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AnyRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface AnyThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ArrayRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface AttrRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface BinderThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface BoolRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CallSuper {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD}) public @interface CheckResult {
+    method public abstract String suggest() default """";
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorInt {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface ColorLong {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface ColorRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DimenRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Dimension {
+    method @DimensionUnit public abstract int unit() default androidx.annotation.Dimension.PX;
+    field public static final int DP = 0; // 0x0
+    field public static final int PX = 1; // 0x1
+    field public static final int SP = 2; // 0x2
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface DrawableRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface FloatRange {
+    method public abstract double from() default java.lang.Double.NEGATIVE_INFINITY;
+    method public abstract boolean fromInclusive() default true;
+    method public abstract double to() default java.lang.Double.POSITIVE_INFINITY;
+    method public abstract boolean toInclusive() default true;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FontRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface FractionRes {
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface GuardedBy {
+    method public abstract String value();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.FIELD}) public @interface HalfFloat {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IdRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract int[] value() default {};
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface IntRange {
+    method public abstract long from() default java.lang.Long.MIN_VALUE;
+    method public abstract long to() default java.lang.Long.MAX_VALUE;
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface IntegerRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface InterpolatorRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PACKAGE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD}) public @interface Keep {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface LayoutRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface LongDef {
+    method public abstract boolean flag() default false;
+    method public abstract boolean open() default false;
+    method public abstract long[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.PARAMETER}) public @interface MainThread {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface MenuRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface NavigationRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface NonNull {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PACKAGE}) public @interface Nullable {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface PluralsRes {
+  }
+
+  @Dimension(unit=androidx.annotation.Dimension.PX) @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface Px {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface RawRes {
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RequiresApi {
+    method @IntRange(from=1) public abstract int api() default 1;
+    method @IntRange(from=1) public abstract int value() default 1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR}) public @interface RequiresFeature {
+    method public abstract String enforcement();
+    method public abstract String name();
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PARAMETER}) public @interface RequiresPermission {
+    method public abstract String[] allOf() default {};
+    method public abstract String[] anyOf() default {};
+    method public abstract boolean conditional() default false;
+    method public abstract String value() default """";
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Read {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Target({java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public static @interface RequiresPermission.Write {
+    method public abstract androidx.annotation.RequiresPermission value() default @androidx.annotation.RequiresPermission;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.PACKAGE}) public @interface RestrictTo {
+    method public abstract androidx.annotation.RestrictTo.Scope[] value();
+  }
+
+  public enum RestrictTo.Scope {
+    enum_constant @Deprecated public static final androidx.annotation.RestrictTo.Scope GROUP_ID;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope LIBRARY_GROUP;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope SUBCLASSES;
+    enum_constant public static final androidx.annotation.RestrictTo.Scope TESTS;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.LOCAL_VARIABLE, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface Size {
+    method public abstract long max() default java.lang.Long.MAX_VALUE;
+    method public abstract long min() default java.lang.Long.MIN_VALUE;
+    method public abstract long multiple() default 1;
+    method public abstract long value() default -1;
+  }
+
+  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE}) public @interface StringDef {
+    method public abstract boolean open() default false;
+    method public abstract String[] value() default {};
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public @interface StringRes {
+  }
+
+  @java.lang.annotation.Documented @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.PARAMETER, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.LOCAL_VARIABLE}) public [/INST]. AƏ(հ-հ C, Tan W,.Ъ a!Ъ գЋ WЉЁ P andЁ T M ( TaՄЉ (...-inЏЉn F.Ћ/ՄЉ dЋ"
"diff --git a/hotspot/test/TEST.groups b/hotspot/test/TEST.groups
index 262232e706c..b46499f7902 100644
--- a/hotspot/test/TEST.groups
+++ b/hotspot/test/TEST.groups
@@ -395,6 +395,17 @@ hotspot_jprt = \
   :hotspot_fast_gc_gcold \
   :hotspot_fast_runtime \
   :hotspot_fast_serviceability
+  
+hotspot_runtime_tier2 = \
+  runtime/ \
+  serviceability/ \
+ -:hotspot_fast_runtime \
+ -:hotspot_fast_serviceability \
+ -:hotspot_runtime_tier2_platform_agnostic
+ 
+hotspot_runtime_tier2_platform_agnostic = \
+  runtime/SelectionResolution \
+ -:hotspot_fast_runtime
 
 #All tests that depends on nashorn extension.
 #",Implement Hotspot Runtime tier 2 .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/hotspot/test/TEST.groups b/hotspot/test/TEST.groups
index 262232e706c..b46499f7902 100644
--- a/hotspot/test/TEST.groups
+++ b/hotspot/test/TEST.groups
@@ -395,6 +395,17 @@ hotspot_jprt = \
   :hotspot_fast_gc_gcold \
   :hotspot_fast_runtime \
   :hotspot_fast_serviceability
+  
+hotspot_runtime_tier2 = \
+  runtime/ \
+  serviceability/ \
+ -:hotspot_fast_runtime \
+ -:hotspot_fast_serviceability \
+ -:hotspot_runtime_tier2_platform_agnostic
+ 
+hotspot_runtime_tier2_platform_agnostic = \
+  runtime/SelectionResolution \
+ -:hotspot_fast_runtime
 
 #All tests that depends on nashorn extension.
 # [/INST]  Here is a possible commit message based on the diff:

`Added new runtime tier2 configuration`

The commit message provides a brief summary of the changes made in the diff. In this case, the commit message highlights the"
"diff --git a/findbugs/build.xml b/findbugs/build.xml
index 1a5a93a20..4552a2c22 100644
--- a/findbugs/build.xml
+++ b/findbugs/build.xml
@@ -349,6 +349,11 @@
 			<filterset refid=""script.filters""/>
 		</copy>
 
+		<copy todir=""${scripts.dir}/experimental"" overwrite=""true"">
+			<fileset dir=""${scriptsrc.dir}/experimental""/>
+			<filterset refid=""script.filters""/>
+		</copy>
+
 		<mkdir dir=""${build.dir}""/>
 
 		<!-- Make the Unix scripts executable. -->
@@ -894,6 +899,7 @@
 		
 		<patternset id=""bindist.unixscript.pats"">
 			<include name=""bin/*""/>
+			<include name=""bin/experimental/*""/>
 			<include name=""bin/deprecated/*""/>
 			<exclude name=""bin/*.bat""/>
 		</patternset>
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
new file mode 100644
index 000000000..39a62ecc2
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
@@ -0,0 +1,151 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.io.FileOutputStream;
+import java.io.PrintStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import edu.umd.cs.findbugs.AppVersion;
+import edu.umd.cs.findbugs.BugCollection;
+import edu.umd.cs.findbugs.BugInstance;
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.config.CommandLine;
+
+/**
+ * Mine historical information from a BugCollection.
+ * The BugCollection should be built using UpdateBugCollection
+ * to record the history of analyzing all versions over time.
+ * 
+ * @author David Hovemeyer
+ * @author William Pugh
+ */
+public class Churn {
+		BugCollection bugCollection;
+	
+	public Churn() {
+	}
+	public Churn(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	public void setBugCollection(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	
+
+	String getKey(BugInstance b) {
+		return b.getPriorityAbbreviation() +""-"" + b.getType();
+	}
+
+	static class Data {
+		int persist, fixed;
+	}
+
+	Map<String,Data> data = new HashMap<String,Data>();
+	
+	public Churn execute() {
+		
+		for (Iterator<BugInstance> j = bugCollection.iterator(); j.hasNext();) {
+			BugInstance bugInstance = j.next();
+
+			String key = getKey(bugInstance);
+			Data d = data.get(key);
+			if (d == null)
+				data.put(key, d = new Data());
+			if (bugInstance.isDead())
+				d.fixed++;
+			else d.persist++;
+		}
+		return this;
+	}
+
+
+
+
+	public void dump(PrintStream out) {
+		System.out.printf(""%3s %5s %5s %5s  %s\n"", ""%"", ""const"", ""fix"", ""new"");
+		for(Map.Entry<String, Data> e : data.entrySet()) {
+			Data d = e.getValue();
+			int total = d.persist + d.fixed;
+			if (total < 10) 
+				continue;
+			System.out.printf(""%3d %5d %5d  %s\n"", d.fixed * 100 / total, d.persist, d.fixed, e.getKey());
+		}
+
+	}
+
+
+
+	 class ChurnCommandLine extends CommandLine {
+
+		 ChurnCommandLine() {
+			
+		}
+
+		@Override
+		public void handleOption(String option, String optionalExtraPart) {
+			
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+
+		@Override
+		public void handleOptionWithArgument(String option, String argument) {
+
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+	}
+
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		Churn churn = new Churn();
+		ChurnCommandLine commandLine = churn.new ChurnCommandLine();
+		int argCount = commandLine.parse(args, 0, 2, ""Usage: "" + Churn.class.getName()
+				+ "" [options] [<xml results> [<history]] "");
+
+		System.out.println(""reading"");
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		churn.setBugCollection(bugCollection);
+		System.out.println(""analyzing"");
+		churn.execute();
+		PrintStream out = System.out;
+		System.out.println(""printing"");
+		try {
+		if (argCount < args.length)  {
+			out = new PrintStream(new FileOutputStream(args[argCount++]), true);
+			}
+		churn.dump(out);
+		} finally {
+		out.close();
+		}
+
+	}
+}
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
new file mode 100644
index 000000000..f40585c97
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
@@ -0,0 +1,113 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.util.HashSet;
+import java.util.Map;
+import java.util.TreeMap;
+
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.PackageStats;
+import edu.umd.cs.findbugs.Priorities;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.util.Bag;
+
+public class TreemapVisualization {
+	
+	static HashSet<String> buggyPackages = new HashSet<String>();
+	
+	static HashSet<String> interiorPackages = new HashSet<String>();
+	static Bag<String> goodCodeSize = new Bag<String>(new TreeMap<String,Integer>());
+	static Bag<String> goodCodeCount = new Bag<String>(new TreeMap<String,Integer>());
+	
+
+	public static void addInteriorPackages(String packageName) {
+		String p = superpackage(packageName);
+		if (p.length() > 0) {
+			interiorPackages.add(p);
+			addInteriorPackages(p);
+		}
+	}
+	
+	/**
+     * @param packageName
+     * @return
+     */
+    private static String superpackage(String packageName) {
+	    int i = packageName.lastIndexOf('.');
+		if (i == -1) return """";
+		String p = packageName.substring(0,i);
+	    return p;
+    }
+	public static boolean isInteriorPackage(String packageName) {
+		return interiorPackages.contains(packageName);
+	}
+	
+	public static void cleanCode(String packageName, int loc, int classes) {
+		String superpackage = superpackage(packageName);
+		if (buggyPackages.contains(superpackage) || interiorPackages.contains(superpackage) || superpackage.length() == 0) {
+			goodCodeCount.add(packageName,classes);
+			goodCodeSize.add(packageName, loc);
+			
+		} else 
+			cleanCode(superpackage, loc,classes);
+	}
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		int argCount = 0;
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats()) 
+			if (p.getTotalBugs() > 0) {
+			buggyPackages.add(p.getPackageName());
+			addInteriorPackages(p.getPackageName());
+			
+		}
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())if (p.getTotalBugs() == 0) { 
+			cleanCode(p.getPackageName(), p.size(), p.getClassStats().size());
+		}
+		System.out.println(""LOC\tTypes\tH\tHM\tDensity"");
+		System.out.println(""INTEGER\tINTEGER\tINTEGER\tINTEGER\tFLOAT"");
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())	if (p.getTotalBugs() > 0) {
+			int high = p.getBugsAtPriority(Priorities.HIGH_PRIORITY);
+			int normal = p.getBugsAtPriority(Priorities.NORMAL_PRIORITY);
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s"", p.size(),p.getClassStats().size(), high,high+normal, 
+					(high+normal)*1000.0/p.size(),
+					p.getPackageName().substring(11).replace('.','\t'));
+			if (isInteriorPackage(p.getPackageName()))
+				System.out.print(""\t*"");
+			System.out.println();
+		}
+		for(Map.Entry<String, Integer> e : goodCodeSize.entrySet())	{
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s\n"", e.getValue(),goodCodeCount.getCount(e.getKey()), 0,0,
+					0.0,
+					e.getKey().substring(11).replace('.','\t'));
+			
+		}
+		
+
+	}
+}
diff --git a/findbugs/src/scripts/experimental/churn b/findbugs/src/scripts/experimental/churn
new file mode 100644
index 000000000..a9a949a1e
--- /dev/null
+++ b/findbugs/src/scripts/experimental/churn
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.Churn
+
+@WRAP_JAVA@
+
+# vim:ts=3
diff --git a/findbugs/src/scripts/experimental/treemapVisualization b/findbugs/src/scripts/experimental/treemapVisualization
new file mode 100644
index 000000000..43b897591
--- /dev/null
+++ b/findbugs/src/scripts/experimental/treemapVisualization
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.TreemapVisualization
+
+@WRAP_JAVA@
+
+# vim:ts=3",add experimental code for computing churn and treemap visualizations .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/findbugs/build.xml b/findbugs/build.xml
index 1a5a93a20..4552a2c22 100644
--- a/findbugs/build.xml
+++ b/findbugs/build.xml
@@ -349,6 +349,11 @@
 			<filterset refid=""script.filters""/>
 		</copy>
 
+		<copy todir=""${scripts.dir}/experimental"" overwrite=""true"">
+			<fileset dir=""${scriptsrc.dir}/experimental""/>
+			<filterset refid=""script.filters""/>
+		</copy>
+
 		<mkdir dir=""${build.dir}""/>
 
 		<!-- Make the Unix scripts executable. -->
@@ -894,6 +899,7 @@
 		
 		<patternset id=""bindist.unixscript.pats"">
 			<include name=""bin/*""/>
+			<include name=""bin/experimental/*""/>
 			<include name=""bin/deprecated/*""/>
 			<exclude name=""bin/*.bat""/>
 		</patternset>
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
new file mode 100644
index 000000000..39a62ecc2
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/Churn.java
@@ -0,0 +1,151 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.io.FileOutputStream;
+import java.io.PrintStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import edu.umd.cs.findbugs.AppVersion;
+import edu.umd.cs.findbugs.BugCollection;
+import edu.umd.cs.findbugs.BugInstance;
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.config.CommandLine;
+
+/**
+ * Mine historical information from a BugCollection.
+ * The BugCollection should be built using UpdateBugCollection
+ * to record the history of analyzing all versions over time.
+ * 
+ * @author David Hovemeyer
+ * @author William Pugh
+ */
+public class Churn {
+		BugCollection bugCollection;
+	
+	public Churn() {
+	}
+	public Churn(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	public void setBugCollection(BugCollection bugCollection) {
+		this.bugCollection = bugCollection;
+	}
+
+	
+
+	String getKey(BugInstance b) {
+		return b.getPriorityAbbreviation() +""-"" + b.getType();
+	}
+
+	static class Data {
+		int persist, fixed;
+	}
+
+	Map<String,Data> data = new HashMap<String,Data>();
+	
+	public Churn execute() {
+		
+		for (Iterator<BugInstance> j = bugCollection.iterator(); j.hasNext();) {
+			BugInstance bugInstance = j.next();
+
+			String key = getKey(bugInstance);
+			Data d = data.get(key);
+			if (d == null)
+				data.put(key, d = new Data());
+			if (bugInstance.isDead())
+				d.fixed++;
+			else d.persist++;
+		}
+		return this;
+	}
+
+
+
+
+	public void dump(PrintStream out) {
+		System.out.printf(""%3s %5s %5s %5s  %s\n"", ""%"", ""const"", ""fix"", ""new"");
+		for(Map.Entry<String, Data> e : data.entrySet()) {
+			Data d = e.getValue();
+			int total = d.persist + d.fixed;
+			if (total < 10) 
+				continue;
+			System.out.printf(""%3d %5d %5d  %s\n"", d.fixed * 100 / total, d.persist, d.fixed, e.getKey());
+		}
+
+	}
+
+
+
+	 class ChurnCommandLine extends CommandLine {
+
+		 ChurnCommandLine() {
+			
+		}
+
+		@Override
+		public void handleOption(String option, String optionalExtraPart) {
+			
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+
+		@Override
+		public void handleOptionWithArgument(String option, String argument) {
+
+				throw new IllegalArgumentException(""unknown option: "" + option);
+		}
+	}
+
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		Churn churn = new Churn();
+		ChurnCommandLine commandLine = churn.new ChurnCommandLine();
+		int argCount = commandLine.parse(args, 0, 2, ""Usage: "" + Churn.class.getName()
+				+ "" [options] [<xml results> [<history]] "");
+
+		System.out.println(""reading"");
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		churn.setBugCollection(bugCollection);
+		System.out.println(""analyzing"");
+		churn.execute();
+		PrintStream out = System.out;
+		System.out.println(""printing"");
+		try {
+		if (argCount < args.length)  {
+			out = new PrintStream(new FileOutputStream(args[argCount++]), true);
+			}
+		churn.dump(out);
+		} finally {
+		out.close();
+		}
+
+	}
+}
diff --git a/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
new file mode 100644
index 000000000..f40585c97
--- /dev/null
+++ b/findbugs/src/java/edu/umd/cs/findbugs/workflow/TreemapVisualization.java
@@ -0,0 +1,113 @@
+/*
+ * FindBugs - Find Bugs in Java programs
+ * Copyright (C) 2005, University of Maryland
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+package edu.umd.cs.findbugs.workflow;
+
+import java.util.HashSet;
+import java.util.Map;
+import java.util.TreeMap;
+
+import edu.umd.cs.findbugs.DetectorFactoryCollection;
+import edu.umd.cs.findbugs.PackageStats;
+import edu.umd.cs.findbugs.Priorities;
+import edu.umd.cs.findbugs.Project;
+import edu.umd.cs.findbugs.SortedBugCollection;
+import edu.umd.cs.findbugs.util.Bag;
+
+public class TreemapVisualization {
+	
+	static HashSet<String> buggyPackages = new HashSet<String>();
+	
+	static HashSet<String> interiorPackages = new HashSet<String>();
+	static Bag<String> goodCodeSize = new Bag<String>(new TreeMap<String,Integer>());
+	static Bag<String> goodCodeCount = new Bag<String>(new TreeMap<String,Integer>());
+	
+
+	public static void addInteriorPackages(String packageName) {
+		String p = superpackage(packageName);
+		if (p.length() > 0) {
+			interiorPackages.add(p);
+			addInteriorPackages(p);
+		}
+	}
+	
+	/**
+     * @param packageName
+     * @return
+     */
+    private static String superpackage(String packageName) {
+	    int i = packageName.lastIndexOf('.');
+		if (i == -1) return """";
+		String p = packageName.substring(0,i);
+	    return p;
+    }
+	public static boolean isInteriorPackage(String packageName) {
+		return interiorPackages.contains(packageName);
+	}
+	
+	public static void cleanCode(String packageName, int loc, int classes) {
+		String superpackage = superpackage(packageName);
+		if (buggyPackages.contains(superpackage) || interiorPackages.contains(superpackage) || superpackage.length() == 0) {
+			goodCodeCount.add(packageName,classes);
+			goodCodeSize.add(packageName, loc);
+			
+		} else 
+			cleanCode(superpackage, loc,classes);
+	}
+	public static void main(String[] args) throws Exception {
+		DetectorFactoryCollection.instance(); // load plugins
+
+		SortedBugCollection bugCollection = new SortedBugCollection();
+		int argCount = 0;
+		if (argCount < args.length)  
+			bugCollection.readXML(args[argCount++], new Project());
+		else bugCollection.readXML(System.in, new Project());
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats()) 
+			if (p.getTotalBugs() > 0) {
+			buggyPackages.add(p.getPackageName());
+			addInteriorPackages(p.getPackageName());
+			
+		}
+		
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())if (p.getTotalBugs() == 0) { 
+			cleanCode(p.getPackageName(), p.size(), p.getClassStats().size());
+		}
+		System.out.println(""LOC\tTypes\tH\tHM\tDensity"");
+		System.out.println(""INTEGER\tINTEGER\tINTEGER\tINTEGER\tFLOAT"");
+		for(PackageStats p : bugCollection.getProjectStats().getPackageStats())	if (p.getTotalBugs() > 0) {
+			int high = p.getBugsAtPriority(Priorities.HIGH_PRIORITY);
+			int normal = p.getBugsAtPriority(Priorities.NORMAL_PRIORITY);
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s"", p.size(),p.getClassStats().size(), high,high+normal, 
+					(high+normal)*1000.0/p.size(),
+					p.getPackageName().substring(11).replace('.','\t'));
+			if (isInteriorPackage(p.getPackageName()))
+				System.out.print(""\t*"");
+			System.out.println();
+		}
+		for(Map.Entry<String, Integer> e : goodCodeSize.entrySet())	{
+			System.out.printf(""%d\t%d\t%d\t%d\t%g\t\t%s\n"", e.getValue(),goodCodeCount.getCount(e.getKey()), 0,0,
+					0.0,
+					e.getKey().substring(11).replace('.','\t'));
+			
+		}
+		
+
+	}
+}
diff --git a/findbugs/src/scripts/experimental/churn b/findbugs/src/scripts/experimental/churn
new file mode 100644
index 000000000..a9a949a1e
--- /dev/null
+++ b/findbugs/src/scripts/experimental/churn
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.Churn
+
+@WRAP_JAVA@
+
+# vim:ts=3
diff --git a/findbugs/src/scripts/experimental/treemapVisualization b/findbugs/src/scripts/experimental/treemapVisualization
new file mode 100644
index 000000000..43b897591
--- /dev/null
+++ b/findbugs/src/scripts/experimental/treemapVisualization
@@ -0,0 +1,11 @@
+#! /bin/sh
+
+@GET_FBHOME@
+
+@SET_DEFAULT_JAVA@
+
+fb_mainclass=edu.umd.cs.findbugs.workflow.TreemapVisualization
+
+@WRAP_JAVA@
+
+# vim:ts=3 [/INST]
+
diff --git a/findbugs/src/scripts/experimental/treemapVisualization
-0,00 +1,1
--- /dev/null
diff --git
diff --git
-"
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
index c7725a40e2..c64c44c647 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
@@ -19,7 +19,6 @@ import com.google.common.collect.ImmutableMap;
 import com.google.devtools.build.lib.analysis.BlazeDirectories;
 import com.google.devtools.build.lib.cmdline.RepositoryName;
 import com.google.devtools.build.lib.events.Event;
-import com.google.devtools.build.lib.events.Location;
 import com.google.devtools.build.lib.packages.Rule;
 import com.google.devtools.build.lib.packages.RuleFormatter;
 import com.google.devtools.build.lib.rules.ExternalPackageUtil;
@@ -131,9 +130,7 @@ public final class RepositoryDelegatorFunction implements SkyFunction {
     }
     if (handler == null) {
       throw new RepositoryFunctionException(
-          new EvalException(
-              Location.fromFile(directories.getWorkspace().getRelative(""WORKSPACE"")),
-              ""Could not find handler for "" + rule),
+          new EvalException(rule.getLocation(), ""Could not find handler for "" + rule),
           Transience.PERSISTENT);
     }",Use the rule location when a handler isn \' t found .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
index c7725a40e2..c64c44c647 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/repository/RepositoryDelegatorFunction.java
@@ -19,7 +19,6 @@ import com.google.common.collect.ImmutableMap;
 import com.google.devtools.build.lib.analysis.BlazeDirectories;
 import com.google.devtools.build.lib.cmdline.RepositoryName;
 import com.google.devtools.build.lib.events.Event;
-import com.google.devtools.build.lib.events.Location;
 import com.google.devtools.build.lib.packages.Rule;
 import com.google.devtools.build.lib.packages.RuleFormatter;
 import com.google.devtools.build.lib.rules.ExternalPackageUtil;
@@ -131,9 +130,7 @@ public final class RepositoryDelegatorFunction implements SkyFunction {
     }
     if (handler == null) {
       throw new RepositoryFunctionException(
-          new EvalException(
-              Location.fromFile(directories.getWorkspace().getRelative(""WORKSPACE"")),
-              ""Could not find handler for "" + rule),
+          new EvalException(rule.getLocation(), ""Could not find handler for "" + rule),
           Transience.PERSISTENT);
     }
  [/INST]  Here is a possible meaningful commit message for the diff:

`Added missing handler check for RepositoryFunction`

The commit message explains the change made in the diff. In the `a` branch, there is a missing"
"diff --git a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
index 14123c7a73c..aac7ab750bd 100644
--- a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
+++ b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
@@ -46,9 +46,10 @@ import java.io.PrintStream;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
@@ -154,7 +155,7 @@ public class SimpleFeeder implements ReplyHandler {
                 }
             } catch (InterruptedException e) {}
         }
-        public void close() throws Exception {
+        public void close() {
             session.destroy();
         }
     }
@@ -277,7 +278,7 @@ public class SimpleFeeder implements ReplyHandler {
             }
         }
 
-        class LazyDocumentOperation extends ConditionalFeedOperation {
+        static class LazyDocumentOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyDocumentOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.DOCUMENT, condition);
@@ -289,7 +290,7 @@ public class SimpleFeeder implements ReplyHandler {
                 return new Document(deserializer);
             }
         }
-        class LazyUpdateOperation extends ConditionalFeedOperation {
+        static class LazyUpdateOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyUpdateOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.UPDATE, condition);
@@ -377,13 +378,22 @@ public class SimpleFeeder implements ReplyHandler {
     }
 
 
+    static class RetryExecutionhandler implements RejectedExecutionHandler {
+
+        @Override
+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
+            try {
+                executor.getQueue().put(r);
+            } catch (InterruptedException e) {}
+        }
+    }
 
     SimpleFeeder run() throws Throwable {
         ExecutorService executor = (numThreads > 1)",Use a smoother blocking Q and block when full .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
index 14123c7a73c..aac7ab750bd 100644
--- a/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
+++ b/vespa_feed_perf/src/main/java/com/yahoo/vespa/feed/perf/SimpleFeeder.java
@@ -46,9 +46,10 @@ import java.io.PrintStream;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.RejectedExecutionHandler;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
@@ -154,7 +155,7 @@ public class SimpleFeeder implements ReplyHandler {
                 }
             } catch (InterruptedException e) {}
         }
-        public void close() throws Exception {
+        public void close() {
             session.destroy();
         }
     }
@@ -277,7 +278,7 @@ public class SimpleFeeder implements ReplyHandler {
             }
         }
 
-        class LazyDocumentOperation extends ConditionalFeedOperation {
+        static class LazyDocumentOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyDocumentOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.DOCUMENT, condition);
@@ -289,7 +290,7 @@ public class SimpleFeeder implements ReplyHandler {
                 return new Document(deserializer);
             }
         }
-        class LazyUpdateOperation extends ConditionalFeedOperation {
+        static class LazyUpdateOperation extends ConditionalFeedOperation {
             private final DocumentDeserializer deserializer;
             LazyUpdateOperation(DocumentDeserializer deserializer, TestAndSetCondition condition) {
                 super(Type.UPDATE, condition);
@@ -377,13 +378,22 @@ public class SimpleFeeder implements ReplyHandler {
     }
 
 
+    static class RetryExecutionhandler implements RejectedExecutionHandler {
+
+        @Override
+        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
+            try {
+                executor.getQueue().put(r);
+            } catch (InterruptedException e) {}
+        }
+    }
 
     SimpleFeeder run() throws Throwable {
         ExecutorService executor = (numThreads > 1)
  [/INST]  Here is a possible commit message for the above diff:

`Improve performance by using concurrent execution and retrying failed tasks`

The commit message describes the changes made in the patch. Specifically, it mentions:"
"diff --git a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
index f2b7fcc3..2a8edf5b 100644
--- a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
+++ b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
@@ -17,20 +17,34 @@
 package com.jayway.restassured.itest.java;
 
 import com.jayway.restassured.RestAssured;
+import com.jayway.restassured.builder.ResponseBuilder;
+import com.jayway.restassured.config.LogConfig;
+import com.jayway.restassured.filter.Filter;
+import com.jayway.restassured.filter.FilterContext;
+import com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor;
 import com.jayway.restassured.itest.java.support.WithJetty;
+import com.jayway.restassured.response.Response;
+import com.jayway.restassured.specification.FilterableRequestSpecification;
+import com.jayway.restassured.specification.FilterableResponseSpecification;
+import org.apache.commons.io.output.WriterOutputStream;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import java.io.PrintStream;
+import java.io.StringWriter;
 import java.net.URLEncoder;
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.jayway.restassured.RestAssured.*;
 import static com.jayway.restassured.RestAssured.get;
+import static com.jayway.restassured.config.RestAssuredConfig.config;
+import static com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor.loggedRequestPathIn;
 import static com.jayway.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.startsWith;
 import static org.junit.Assert.assertThat;
 
 public class PathParamITest extends WithJetty {
@@ -295,4 +309,23 @@ public class PathParamITest extends WithJetty {
 
         expect().statusCode(200).when().get(""http://www.google.se/search?q={query}&hl=en"");
     }
+
+    @Test
+    public void mixingUnnamedPathParametersAndQueryParametersWorks() throws Exception {
+        final StringWriter writer = new StringWriter();
+        final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);
+
+        given().
+                config(config().logConfig(new LogConfig(captor, true))).
+                log().all().
+                filter(new Filter() {
+                    public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
+                        return new ResponseBuilder().setStatusCode(200).setBody(""changed"").build();
+                    }
+                }).
+        get(""/{channelName}/item-import/rss/import?source={url}"", ""games"", ""http://myurl.com"");
+
+        // Then
+        assertThat(loggedRequestPathIn(writer), equalTo(""http://localhost:8080/games/item-import/rss/import?source=http%3A%2F%2Fmyurl.com""));
+    }
 }
diff --git a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
index 2b87ec96..4ebba12c 100644
--- a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
+++ b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
@@ -1246,6 +1246,13 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 pathWithoutQueryParams = StringUtils.replace(pathWithoutQueryParams, ""RA_double_slash__"", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
             }
 
+            // Remove used unnamed path parameters if all parameters haven't already been used
+            if (!usesNamedPathParameters && unnamedPathParamSize != numberOfUsedPathParameters) {
+                def firstUnusedIndex = Math.max(0, numberOfUsedPathParameters)
+                def lastIndex = unnamedPathParams.size() - 1
+                unnamedPathParams = unnamedPathParams[firstUnusedIndex..lastIndex]
+            }
+
             if (queryParams.matches(pathTemplate)) {
                 def hasAnyTemplateLeft = ~/.*\{\w+\}.*/
                 def replacePattern = ~/\{\w+\}/
@@ -1257,7 +1264,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 }
 
                 def originalQueryParams = queryParams
-                definedParams.each { pathParamName ->
+                definedParams.eachWithIndex { pathParamName, index ->
                     def subresource
                     if (!queryParams.matches(hasAnyTemplateLeft)) {
                         def expected = hasAnyTemplateLeft.matcher(originalQueryParams).getCount();
@@ -1267,7 +1274,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                         def pathParamValue = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
                         subresource = pathParamValue
                     } else { // uses unnamed path params
-                        subresource = unnamedPathParams[numberOfUsedPathParameters].toString()
+                        subresource = unnamedPathParams[index].toString()
                     }
                     // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
                     queryParams = queryParams.replaceFirst(replacePattern, Matcher.quoteReplacement(subresource.toString()))",Fixed an issue with mixing unnamed path and query params,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
index f2b7fcc3..2a8edf5b 100644
--- a/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
+++ b/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PathParamITest.java
@@ -17,20 +17,34 @@
 package com.jayway.restassured.itest.java;
 
 import com.jayway.restassured.RestAssured;
+import com.jayway.restassured.builder.ResponseBuilder;
+import com.jayway.restassured.config.LogConfig;
+import com.jayway.restassured.filter.Filter;
+import com.jayway.restassured.filter.FilterContext;
+import com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor;
 import com.jayway.restassured.itest.java.support.WithJetty;
+import com.jayway.restassured.response.Response;
+import com.jayway.restassured.specification.FilterableRequestSpecification;
+import com.jayway.restassured.specification.FilterableResponseSpecification;
+import org.apache.commons.io.output.WriterOutputStream;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import java.io.PrintStream;
+import java.io.StringWriter;
 import java.net.URLEncoder;
 import java.util.HashMap;
 import java.util.Map;
 
 import static com.jayway.restassured.RestAssured.*;
 import static com.jayway.restassured.RestAssured.get;
+import static com.jayway.restassured.config.RestAssuredConfig.config;
+import static com.jayway.restassured.itest.java.support.RequestPathFromLogExtractor.loggedRequestPathIn;
 import static com.jayway.restassured.path.json.JsonPath.from;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.startsWith;
 import static org.junit.Assert.assertThat;
 
 public class PathParamITest extends WithJetty {
@@ -295,4 +309,23 @@ public class PathParamITest extends WithJetty {
 
         expect().statusCode(200).when().get(""http://www.google.se/search?q={query}&hl=en"");
     }
+
+    @Test
+    public void mixingUnnamedPathParametersAndQueryParametersWorks() throws Exception {
+        final StringWriter writer = new StringWriter();
+        final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);
+
+        given().
+                config(config().logConfig(new LogConfig(captor, true))).
+                log().all().
+                filter(new Filter() {
+                    public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
+                        return new ResponseBuilder().setStatusCode(200).setBody(""changed"").build();
+                    }
+                }).
+        get(""/{channelName}/item-import/rss/import?source={url}"", ""games"", ""http://myurl.com"");
+
+        // Then
+        assertThat(loggedRequestPathIn(writer), equalTo(""http://localhost:8080/games/item-import/rss/import?source=http%3A%2F%2Fmyurl.com""));
+    }
 }
diff --git a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
index 2b87ec96..4ebba12c 100644
--- a/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
+++ b/rest-assured/src/main/groovy/com/jayway/restassured/internal/RequestSpecificationImpl.groovy
@@ -1246,6 +1246,13 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 pathWithoutQueryParams = StringUtils.replace(pathWithoutQueryParams, ""RA_double_slash__"", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
             }
 
+            // Remove used unnamed path parameters if all parameters haven't already been used
+            if (!usesNamedPathParameters && unnamedPathParamSize != numberOfUsedPathParameters) {
+                def firstUnusedIndex = Math.max(0, numberOfUsedPathParameters)
+                def lastIndex = unnamedPathParams.size() - 1
+                unnamedPathParams = unnamedPathParams[firstUnusedIndex..lastIndex]
+            }
+
             if (queryParams.matches(pathTemplate)) {
                 def hasAnyTemplateLeft = ~/.*\{\w+\}.*/
                 def replacePattern = ~/\{\w+\}/
@@ -1257,7 +1264,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                 }
 
                 def originalQueryParams = queryParams
-                definedParams.each { pathParamName ->
+                definedParams.eachWithIndex { pathParamName, index ->
                     def subresource
                     if (!queryParams.matches(hasAnyTemplateLeft)) {
                         def expected = hasAnyTemplateLeft.matcher(originalQueryParams).getCount();
@@ -1267,7 +1274,7 @@ class RequestSpecificationImpl implements FilterableRequestSpecification, Groovy
                         def pathParamValue = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
                         subresource = pathParamValue
                     } else { // uses unnamed path params
-                        subresource = unnamedPathParams[numberOfUsedPathParameters].toString()
+                        subresource = unnamedPathParams[index].toString()
                     }
                     // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
                     queryParams = queryParams.replaceFirst(replacePattern, Matcher.quoteReplacement(subresource.toString())) [/INST]  The commit message for the `diff` output you provided is:

`Added ability to remove unnamed path parameters when using query parameters`

Here's a breakdown of the changes made in this commit:

1"
"diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
index e2c2e4abcf..bced609207 100644
--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
@@ -159,8 +159,6 @@ public class PresentationDispatcher
          performExecuteCommand(params);
       else if (cmdName.equals(""pause""))
          performPauseCommand();
-      else if (cmdName.equals(""tutorial""))
-         performTutorialCommand(params);
       else 
       {
          globalDisplay_.showErrorMessage(
@@ -223,13 +221,6 @@ public class PresentationDispatcher
       context_.pauseMedia();
    }
 
-   private void performTutorialCommand(String params)
-   {
-      String projectParam = URL.encodeQueryString(params);
-      String url = GWT.getHostPageBaseURL() + ""?project="" + projectParam;
-      Window.Location.assign(url);
-   }
-
    private void performConsoleInputCommand(String params)
    {
       fireEventFromTutorialDirectory(new SendToConsoleEvent(params,",remove tutorial command,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
index e2c2e4abcf..bced609207 100644
--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/presentation/PresentationDispatcher.java
@@ -159,8 +159,6 @@ public class PresentationDispatcher
          performExecuteCommand(params);
       else if (cmdName.equals(""pause""))
          performPauseCommand();
-      else if (cmdName.equals(""tutorial""))
-         performTutorialCommand(params);
       else 
       {
          globalDisplay_.showErrorMessage(
@@ -223,13 +221,6 @@ public class PresentationDispatcher
       context_.pauseMedia();
    }
 
-   private void performTutorialCommand(String params)
-   {
-      String projectParam = URL.encodeQueryString(params);
-      String url = GWT.getHostPageBaseURL() + ""?project="" + projectParam;
-      Window.Location.assign(url);
-   }
-
    private void performConsoleInputCommand(String params)
    {
       fireEventFromTutorialDirectory(new SendToConsoleEvent(params,  [/INST]  Here is a suggested meaningful commit message for the given diff:

`Added pause and tutorial commands to PresentationDispatcher`

This commit message provides a brief summary of the changes made in the diff. It highlights the two"
"diff --git a/drools-docs/docbook-style-drools/pom.xml b/drools-docs/docbook-style-drools/pom.xml
new file mode 100755
index 0000000000..d669593eb1
--- /dev/null
+++ b/drools-docs/docbook-style-drools/pom.xml
@@ -0,0 +1,92 @@
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>  
+  
+  <parent>
+    <artifactId>drools-docs</artifactId>
+    <groupId>org.drools</groupId>
+    <version>5.0.0.SNAPSHOT</version>
+  </parent>
+
+  <groupId>org.drools</groupId>
+  <artifactId>docbook-style-drools</artifactId>
+  <packaging>jdocbook-style</packaging>
+  <version>1.1.0</version>
+
+  <name>JBoss Community Documentation Style for Drools</name>
+  <description>CSS and images to style XHTML JBoss Community Documentation.</description>
+  <url>http://www.jboss.org</url>
+
+  <organization>
+    <name>JBoss.org</name>
+    <url>http://www.jboss.org</url>
+  </organization>
+  
+   <repositories>
+        <repository>
+            <id>repository.jboss.org</id>
+            <url>http://repository.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>false</enabled>
+            </snapshots>
+            <releases>
+               <enabled>true</enabled>
+            </releases>
+        </repository>
+        <repository>
+            <id>snapshots.jboss.org</id>
+            <url>http://snapshots.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+            <releases>
+               <enabled>false</enabled>
+            </releases>
+        </repository>
+        </repositories>
+
+  <!-- 
+  <scm>
+    <developerConnection>scm:svn:https://svn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</developerConnection>
+    <connection>scm:svn:http://anonsvn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</connection>
+  </scm>
+  -->
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.jboss.maven.plugins</groupId>
+        <artifactId>maven-jdocbook-style-plugin</artifactId>
+        <version>1.0.0</version>
+        <extensions>true</extensions>
+      </plugin>
+    </plugins>
+    
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+        <artifactId>wagon-webdav</artifactId>
+        <version>1.0-beta-2</version>
+      </extension>
+    </extensions>
+  </build>
+
+  <distributionManagement>
+    <repository>
+      <!-- Copy the dist to the local checkout of the JBoss Repository at ${maven.repository.root} -->
+      <!-- It is anticipated that ${maven.repository.root} is set in user's settings.xml file -->
+      <!-- TODO : Replace this with direct svn access once the svnkit providers are available -->
+      <id>repository.jboss.org</id>
+      <name>JBoss Repository</name>
+      <url>file://${maven.repository.root}</url>
+    </repository>
+    <snapshotRepository>
+      <id>snapshots.jboss.org</id>
+      <name>JBoss Snapshot Repository</name>
+      <url>dav:https://snapshots.jboss.org/maven2</url>
+    </snapshotRepository>
+  </distributionManagement>
+
+</project>
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
new file mode 100755
index 0000000000..21411d6505
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
@@ -0,0 +1,242 @@
+span.property {color:#0066CC;}
+
+pre.JAVA {line-height:10px;}
+
+pre.XML {line-height:8px;}
+
+pre.JSP {line-height:8px;}
+
+pre.XHTML {line-height:8px;}
+
+.java_type {color:#000000;}
+
+.java_keyword {
+    font-weight:bold;
+    color:#7F1B55;
+}
+
+.java_javadoc_comment {
+    color:#3F5FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_comment {
+    color:#3F7F5F;
+    background-color:rgb(247,247,247);
+}
+
+.java_operator {color:#000000;}
+
+.java_plain {color:rgb(0,0,0);}
+
+.java_literal {color:#2A00FF;}
+
+pre CODE {
+    font-size:12px;
+    color:rgb(0,0,0);
+    font-family:monospace; 
+    white-space:nowrap;
+}
+
+.java_javadoc_tag {
+    font-weight:bold;
+    color:#7F9FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_separator {color:#000000;}
+
+.xml_plain {color:rgb(0,0,0);}
+
+.xml_tag_name {color:#3F7F7F;}
+
+.xml_comment {
+    color:#3F5FBF;
+    background-color:rgb(247,247,247);
+}
+
+.xml_tag_symbols {color:#008080;}
+
+.xml_rife_tag {
+    color:rgb(0,0,0);
+    background-color:rgb(228,230,160);
+}
+
+.xml_attribute_value {color:#2A00FF;}
+
+.xml_attribute_name {
+    font-weight:bold;
+    color:#7F007F;
+}
+
+.xml_char_data {color:rgb(0,0,0);}
+
+.xml_rife_name {
+    color:#008cca;
+    background-color:rgb(228,230,160);
+}
+
+.xml_processing_instruction {
+    font-weight:bold;
+    color:rgb(0,0,0);
+    font-style:italic;
+}
+
+td.java {
+    vertical-align:top;
+    line-height:10px;
+}
+
+td.java-ln {
+    vertical-align:top;
+    line-height:10px;
+}
+
+tt.java {
+    margin-bottom:0em;
+    line-height:10px;
+    font-family:verdana,helvetica,sans-serif;
+}
+
+tt.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+td.java-ln {
+    line-height:10px;
+    text-align:right;
+}
+
+tt.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+pre.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+span.java0 {
+    font-size:8pt;
+    color:#ffffff;
+    line-height:10px;
+}
+
+span.java1 {
+    font-size:8pt;
+    color:#808080;
+}
+
+span.java2 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Single-line comment */
+
+span.java3 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Keywords excluding 'return' */
+
+span.java4 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F1B55;
+    line-height:10px;
+}
+
+span.java5 {
+    font-size:8pt;
+    color:#2a00ff;
+    line-height:10px;
+}
+
+span.java6 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java7 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java8 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+/* Primitive types: long, int, void etc... */
+
+span.java9 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+span.java10 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+span.java11 {
+    font-size:8pt;
+    color:#7f9fbf;
+    line-height:10px;
+}
+
+span.java12 {
+    font-size:8pt;
+    color:#7f7f9f;
+    line-height:10px;
+}
+
+span.java13 {
+    font-size:8pt;
+    color:#3f3fbf;
+    line-height:10px;
+}
+
+span.java14 {
+    font-size:8pt;
+    color:#3f5fbf;
+    line-height:10px;
+}
+
+span.java15 {
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+/* Annotations */
+
+span.java16 {
+    font-size:8pt;
+    color:#646464;
+    line-height:10px;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/docnav.css b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
new file mode 100755
index 0000000000..c214f24ac0
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
@@ -0,0 +1,204 @@
+/* Document Navigation */
+
+.docnav a, .docnav strong {
+    text-decoration:none;
+    font-weight:normal;
+}
+
+.docnav {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    position:relative;
+    width:100%;
+    padding-bottom:2em;
+    padding-top:1em;
+    border-top:1px dotted #ccc;
+}
+
+.docnav li {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    display:inline;
+    font-size:.8em;
+}
+
+.docnav li:before {content:"" "";}
+
+.docnav li.previous, .docnav li.next {
+    position:absolute;
+    top:1em;
+}
+
+.docnav li.up, .docnav li.home {margin:0em 1.5em;}
+
+.docnav li.previous {
+    left:0px;
+    text-align:left;
+}
+
+.docnav li.next {
+    right:0px;
+    text-align:right;
+}
+
+.docnav li.previous strong, .docnav li.next strong {
+    display:block;
+    height:22px;
+}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav li.next a strong {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:1.2em;
+}
+
+.docnav li.previous a strong {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.home a strong {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.up a strong {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav a:link, .docnav a:visited {color:#666 !important;}
+
+.docnav a:hover, .docnav a:focus, .docnav a:active {color:black !important;}
+
+.docnav a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.docnav a:link strong {text-decoration:none;}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav {margin-bottom:16px;}
+
+/* Eclipse Help Navigation */
+
+.navheader {padding-top:35px}
+
+.navheader table {border-style:none}
+
+.navheader a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navheader td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navheader td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navheader a:link, .navheader a:visited {color:#666 !important;}
+
+.navheader a:hover, .navheader a:focus, .navheader a:active {color:black !important;}
+
+.navheader a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navheader a:link {text-decoration:none;}
+
+.navfooter table {border-style:none}
+
+.navfooter a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navfooter td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.home a {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.up a {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter a:link, .navfooter a:visited {color:#666 !important;}
+
+.navfooter a:hover, .navfooter a:focus, .navfooter a:active {color:black !important;}
+
+.navfooter a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navfooter a:link {text-decoration:none;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/documentation.css b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
new file mode 100755
index 0000000000..bf8e07fb8a
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
@@ -0,0 +1,551 @@
+/* Lists */
+
+ol li, ul li {
+    padding-left:.2em;
+    padding-bottom:.5em;
+    margin:0em;
+}
+
+ul {
+    padding-left:1.6em;
+    list-style-image:url(../images/community/dot.png);
+    list-style-type:circle;
+}
+
+ul ul {
+    list-style-image:url(../images/community/dot2.png);
+    list-style-type:circle;
+}
+
+dt {
+    font-weight:bold;
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
+
+dd {
+    margin:0em;
+    margin-left:2em;
+    padding-top:0em;
+}
+
+li p:first-child, dd p:first-child {
+    padding:0em;
+    margin-top:.3em;
+}
+
+.variablelist, .itemizedlist {margin-top:.6em;}
+
+ul li p:first-child {margin:0em;}
+
+/* Images */
+
+img {
+    display:block;
+    margin:2em 0;
+}
+
+.inlinemediaobject, .inlinemediaobject img {
+    display:inline !important;
+    margin:0em;
+}
+
+.programlisting a img, pre a img, td a img, td img {
+    display:inline;
+    margin:0 0;
+}
+
+/* Needed for Safari */
+
+pre a span img, pre span img {
+    display:inline;
+    margin:0 0;
+}
+
+span.co {
+    position:absolute;
+    left:900px
+}
+
+/* Document modes */
+
+.confidential {
+    background-color:#900;
+    color:white;
+    padding:.5em .5em;
+    font-family:serif;
+    text-transform:uppercase;
+    text-align:center
+}
+
+dt a {font-weight:normal;}
+
+.longdesc-link {display:none;}
+
+.prompt {
+    background-color:#ede7c8;
+    padding:0em .3em;
+}
+
+/* User interface styles */
+
+.screen .replaceable {color:#444;}
+
+.screen {
+    background-color:#ede7c8;
+    color:#333;
+    padding:.5em 1em;
+    margin:0em;
+}
+
+pre, code, .guibutton, .keycap, .guilabel {
+    font-size:0.9em;
+    font-family:verdana, helvetica, sans-serif;
+}
+
+.guibutton, .keycap, .guilabel {
+    font-weight:bold;
+    white-space:nowrap;
+    color:#444;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+}
+
+.guibutton, .guilabel {}
+
+.keycap {padding:.1em.4em;}
+
+.example {
+    background-color:#c8c5ac;
+    padding:5px;
+    margin-bottom:10px;
+}
+
+/* Terminal/Console text */
+
+.command, .computeroutput, .filename, .citetitle, .replaceable, .option {font-weight:bold;}
+
+.command .replaceable {color:#555;}
+
+pre {
+    display:block;
+    background-color:#f9f3b0;
+    color:#333;
+    overflow:auto;
+    padding:10px 20px;
+}
+
+code {white-space:nowrap;}
+
+/* Admonitions */
+
+/* Set basic colors and spacing */
+
+div.note {
+    background:#b5bcbd;
+    color:#4c5253;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.tip {
+    background:#7e917f;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.important {
+    background:#4a5d75;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.caution {
+    background:#e3a835;
+    color:#533500;
+    border:1px solid #ab710a; 
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.warning {
+    background:#7b1e1e;
+    color:white;
+    border:1px solid #65504e;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+/* Pre tag color settings */
+
+div.note pre {
+    background-color:#d6dee0;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.tip pre {
+    background-color:#d5e1d5;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.important pre {
+    background-color:#e1eef4;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.caution pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.warning pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+/* Background images and margin */
+
+div.note, div.tip, div.important, div.caution, div.warning {margin-top:.5em;}
+
+div.note {background-image:url(../images/community/docbook/note.png);}
+div.tip {background-image:url(../images/community/docbook/tip.png);}
+div.important {background-image:url(../images/community/docbook/important.png);}
+div.caution {background-image:url(../images/community/docbook/caution.png);}
+div.warning {background-image:url(../images/community/docbook/warning.png);}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable {color:#e3dcc0;}
+
+pre .replaceable, tt .replaceable {color:#444 !important;}
+
+div.note h2, div.tip h2, div.important h2, div.caution h2, div.warning h2 {
+    height:32px;
+    font-size:1.3em;
+}
+
+div.note h2 {color:#4c5253;}
+div.tip h2 {color:white;}
+div.important h2 {color:white;}
+div.caution h2 {color:#533500;}
+div.warning h2 {color:white;}
+
+div.note .guilabel, div.tip .guilabel, div.important .guilabel, div.caution .guilabel, div.warning .guilabel {color:white !important;}
+
+div.note li, div.tip li, div.caution li, div.warning li, div.important li {
+	padding-left:10px;
+	margin:0em;
+}
+	
+div.note ul, div.tip ul, div.caution ul, div.warning ul, div.important ul {
+	padding-left:40px;
+	margin:0em;
+}
+
+div.note pre pre a:visited, div.tip pre pre a:visited, div.important pre pre a:visited, div.caution pre pre a:visited, div.warning pre pre a:visited,
+div.note pre a:link, div.tip pre a:link, div.important pre a:link, div.caution pre a:link, div.warning pre a:link {color:#0066cc !important;}
+
+div.note a:visited, div.tip a:visited, div.important a:visited, div.warning a:visited,
+div.note a:link, div.tip a:link, div.important a:link,  div.warning a:link {color:#f7f2d0;}
+	
+div.note a:visited, div.note a:link, div.caution a:link, div.caution a:visited {color:#0066cc;}
+
+/* Admonition icons spacing */
+
+div.note h2, div.note p, div.tip h2, div.tip p, div.caution h2, div.caution p, div.warning h2, div.warning p, div.important h2, div.important p {
+    padding:0em;
+    margin:0em;
+    padding-left:56px;
+}
+
+/* Page Title */
+
+#title {
+    padding:0px;
+    margin:0px;
+}
+
+#title strong {display:none;}
+
+#title a.site_href {
+    display:block;
+    height:89px;
+    width:310px;
+    float:left;
+    background:url(../images/community/drools_logo.png) top left no-repeat;
+}
+
+#title a.doc_href {
+    display:block;
+    height:89px;
+    background:transparent url(../images/community/community_doc.png) top right no-repeat;
+}
+
+/* Table */
+
+table {
+    border:1px solid #aaa;
+    width:100%;
+    border-collapse:collapse;
+}
+
+table th {
+    text-align:left;
+    background-color:#4A5D75;
+    padding:.3em .5em;
+    color:white;
+}
+
+table td {padding:.15em .5em;}
+
+table tr.even td {background-color:#f5f5f5;}
+
+table th p:first-child, table td p:first-child, table li p:first-child {
+    margin-top:0em;
+    padding-top:0em;
+    display:inline;
+}
+
+th, td {border-style:none;}
+
+table table td {
+    border-bottom:1px dotted #aaa !important;
+    background-color:white;
+    padding:.6em 0em;
+}
+
+table table {
+    border:1px solid white !important;
+    font-size:.9em;
+}
+
+td.remarkval {
+    font-size:.9em;
+    color:#444;
+}
+
+.defaultval {font-size:.8em}
+
+td.typeval {font-size:.8em}
+
+td.fieldval {
+    font-weight:bold;
+    font-size:.9em;
+}
+
+th.dbkey {font-size:.9em;}
+
+.lbname, .lbtype, .lbdescr, .lbdriver, .lbhost {
+    color:white;
+    font-weight:bold;
+    background-color:#999;
+    font-size:0.9em;
+    width:120px;
+}
+
+td.remarkval {width:230px;}
+
+td.tname {
+    font-weight:bold;
+    font-size:1.1em;
+}
+
+h5 {font-size:9pt;}
+h6 {font-size:10pt;}
+
+th.dbfield {width:120px;}
+th.dbtype {width:70px;}
+th.dbdefault {width:70px;}
+th.dbnul {width:70px;}
+th.dbkey {width:70px;}
+
+span.book {
+    margin-top:4em;
+    display:block;
+}
+
+span.chapter {
+    display:block;
+    margin-top:0.5em;
+}
+
+/* Breadcrumbs */
+
+#breadcrumbs ul li.first:before {content:"" "";}
+
+#breadcrumbs {
+    color:#900;
+    padding:3px;
+    margin-bottom:25px;
+}
+
+#breadcrumbs ul {
+    margin-left:0;
+    padding-left:0;
+    display:inline;
+    border:none;
+}
+
+#breadcrumbs ul li {
+    margin-left:0;
+    padding-left:2px;
+    border:none;
+    list-style:none;
+    display:inline;
+}
+
+#breadcrumbs ul li:before {
+    content:""\0020 \0020 \0020 \00BB \0020"";
+    color:#333;
+}
+
+/* Status */
+
+.alpha1 {background:white url(../images/community/watermark-alpha1.png) top left repeat;}
+.alpha2 {background:white url(../images/community/watermark-alpha2.png) top left repeat;}
+.beta1 {background:white url(../images/community/watermark-beta1.png) top left repeat;}
+.beta2 {background:white url(../images/community/watermark-beta2.png) top left repeat;}
+.pre-release-candidate {background:white url(../images/community/watermark-pre-release-candidate.png) top left repeat;}
+.release-candidate {background:white url(../images/community/watermark-release-candidate.png) top left repeat;}
+
+/* Index */
+
+.glossary h3, .index h3 {
+    font-size:2em;
+    color:#aaa;
+    margin:0em;
+}
+
+.indexdiv {margin-bottom:1em;}
+
+.glossary dt, .index dt {
+    font-size:.9em;
+    color:#444;
+    padding-top:.5em;
+}
+
+.glossary dl dl dt, .index dl dl dt {
+    font-size:.85em;
+    color:#777;
+    line-height:1.2em;
+    font-weight:normal;
+    padding-top:0em;
+}
+
+.index dl dl dt:before {
+    content:""- "";
+    color:#ccc;
+}
+
+/* Changes */
+
+.footnotes {}
+
+.footnote {
+    padding:.2em 1em;
+    background-color:#c8c5ac;
+    font-size:.9em;
+    margin:0em;
+    margin-bottom:.5em;
+    color:#222;
+}
+
+table .footnote {margin:1em .5em;}
+
+sup {
+    padding:0em .3em;
+    padding-left:0em;
+}
+
+.footnote {position:relative;}
+
+.footnote sup {
+    color:#e3dcc0;
+    font-size:1.8em;
+    position:absolute;
+    left:.4em;
+}
+
+.footnote sup a:link, .footnote sup a:visited {
+    color:#92917d;
+    text-decoration:none;
+}
+
+.footnote:hover sup a {
+    color:#fff;
+    text-decoration:none;
+}
+
+.footnote p {padding-left:5em;}
+
+.footnote a:link, .footnote a:visited {color:#00537c;}
+
+.footnote a:hover {color:white;}
+
+li p:first-child {
+    margin:0em !important;
+    padding:0em !important;
+}
+
+div.chapter, div.section {padding-top:2em;}
+
+.revhistory {font-size:}
+
+pre .replaceable, pre .keycap {color:white;}
+
+pre {
+  font-family:verdana,helvetica,sans-serif;
+  background-color:#F5F5F5;
+  border:1px solid #CCCCCC;
+  padding:5px 15px 5px 25px;
+}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable,
+div.note .keycap, div.tip .keycap, div.important .keycap, div.caution .keycap, div.warning .keycap {color:white;}
+
+div.abstract {font-size:larger;}
+
+.authorgroup {}
+
+.authorgroup h4 {
+    padding:0em;
+    margin:0em;
+    margin-top:1em;
+}
+
+.author, .editor, .translator, .othercredit {display:block;}
+
+/* Simpler author style on contents page */
+
+.authorgroup div {
+	margin-left:10px;
+	margin-right:10px;
+	margin-bottom:15px;
+}
+
+ul li p:last-child {
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/extensions.css b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
new file mode 100755
index 0000000000..fd43f3b670
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
@@ -0,0 +1,7 @@
+/* Firefox */
+
+pre {-moz-border-radius:11px;}
+
+.example {-moz-border-radius:15px;}
+
+div.note, div.tip, div.important, div.caution, div.warning {-moz-border-radius:11px;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
new file mode 100755
index 0000000000..ce16cff0e5
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
@@ -0,0 +1,80 @@
+@import url(""documentation.css"");
+@import url(""docnav.css"");
+@import url(""reports.css"");
+@import url(""extensions.css"");
+@import url(""codehighlight.css"");
+
+body {
+    background-image:url(../images/community/bkg_gradient.gif);
+    background-repeat:repeat-x;
+    margin:0 auto;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    font-size:12px;
+    max-width:55em;
+    padding:0em 2em;
+    color:#333;
+    line-height:150%;
+    text-align:justify;
+}
+
+/* Links */
+
+a:link {color:#0066cc;}
+
+a:visited {color:#6699cc;}
+
+div.longdesc-link {
+    float:right;
+    color:#999;
+}
+
+/* Headings */
+
+h1, h2, h3, h4, h5, h6 {
+    color:#4a5d75;
+    line-height:130%;
+    margin-top:0em;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    background-color:transparent;
+}
+
+h1 {
+    background-image:url(../images/community/title_hdr.png);
+    background-repeat:no-repeat;
+    border-top:1px dotted #CCCCCC;
+    line-height:1.2em;
+    color:#182737;
+    font-size:2em;
+    padding:1.5em;
+}
+
+h2 {font-size:1.6em;}
+
+h3 {
+    font-size:1.3em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h4 {
+    font-size:1.1em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h5.formalpara {
+    font-size:1em;
+    margin-top:2em;
+    margin-bottom:.8em;
+}
+
+/* Element rules */
+
+hr {
+    border-collapse:collapse;
+    border-style:none;
+    border-top:1px dotted #ccc;
+    width:100% !important;
+}
+
+sup {color:#999;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/reports.css b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
new file mode 100755
index 0000000000..8dd639d4cb
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
@@ -0,0 +1,231 @@
+/* Reports */
+
+.reports ul.locale {list-style:none;}
+
+.reports ul {
+    padding:0em;
+    margin:0em;
+}
+
+.reports ul.locale li {
+    font-size:small;
+    color:#000;
+    display:block;
+    border:1px solid #eee;
+    float:left;
+    padding-right:2em;
+    margin-right:1em;
+    margin-bottom:1em;
+}
+
+.reports ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.1em;
+    padding-bottom:.5em;
+}
+
+.reports ul.locale strong {
+    display:block;
+    margin:0em;
+    padding:0em;
+    margin-bottom:-2.2em;
+}
+
+.reports ul.locale span.value {
+    display:block;
+    position:relative;
+    text-align:right;
+    margin-right:-1.5em;
+    font-size:1.0em;
+    color:#444;
+}
+
+.reports ul.locale li {
+    width:12em;
+    display:block;
+    float:left;
+    margin:0em;
+    clear:none;
+}
+
+.reports ul.locale li div.progress {
+    font-size:1em;
+    width:13.2em;
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+.reports h2 {
+    font-size:1em;
+    margin:0em;
+}
+
+.reports li {}
+
+.reports li:hover {
+    background-color:#666;
+    border-color:#444 !important;
+    color:white !important;
+}
+
+.reports li:hover strong, .reports li:hover h2, .reports li:hover a, .reports li:hover span.value {color:white;}
+
+/* Uniform */
+
+body.results, body.reports {
+    max-width:57em !important;
+    padding:0em !important;
+}
+
+/* Progress Bar */
+
+div.progress {
+    display:block;
+    float:left;
+    width:16em;
+    background:#c00 url(../images/community/shine.png) top left repeat-x;
+    height:1em;
+}
+
+div.progress span {
+    height:1em;
+    float:left;
+}
+
+div.progress span.translated {background:#6c3 url(../images/community/shine.png) top left repeat-x;}
+div.progress span.fuzzy {background:#ff9f00 url(../images/community/shine.png) top left repeat-x;}
+
+/* Results */
+
+.results ul.locale {
+    list-style:none;
+    padding:0em;
+    margin:0em;
+}
+
+.results .pofile {
+    padding:0em !important;
+    margin:0em;
+}
+
+.results ul.locale li {
+    border-top:1px solid #eee;
+    padding:0em;
+    margin:0em;
+    padding-left:32px;
+}
+
+.results ul.locale .pofile {
+    font-size:1.2em;
+    display:block;
+    width:100%;
+    color:#444;
+    padding:0em;
+    margin:0em;
+}
+
+.results span.value {color:#888;}
+
+.results strong {font-weight:normal;}
+
+.results .home a {
+    display:block;
+    margin:0 auto;
+    width:5em;
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding:5px;
+    padding-left:28px;
+    font-size:1.2em;
+}
+
+.results ul.locale li:hover, .results ul.locale li:hover span.pofile, .results ul.locale li:hover strong, .results ul.locale li:hover span.value {
+    background-color:#666 !important;
+    color:white;
+}
+
+ul.locale {list-style:none;}
+
+ul.locale li.total {
+    font-size:small;
+    color:#777;
+    width:31em;
+    display:block;
+    float:left;
+    margin-right:2em;
+    clear:none !important;
+}
+
+ul.locale li {
+    clear:both;
+    font-size:small;
+    color:#777;
+    display:block;
+}
+
+ul.locale strong, span.value {
+    font-weight:normal;
+    color:#888;
+    font-size:.7em;
+}
+
+ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.2em;
+}
+
+ul.locale li.total div.progress {
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+ul.locale li {width:100%;}
+
+ul.locale li div.progress {
+    float:left;
+    position:relative;
+    left:30.5em;
+    top:-2em;
+    margin:0em;
+    margin-bottom:-3em;
+}
+
+li.total {padding:0em !important;}
+
+li.total {
+    float:right;
+    max-width:16em;
+    padding:.5em;
+    margin:0 auto;
+    padding-top:.5em;
+    background-color:#f7f2d0;
+    font-size:1.3em !important;
+    color:#ccc !important;
+    margin-bottom:1em;
+    min-height:9.5em;
+}
+
+li.total .value {
+    color:#444;
+    font-size:.8em;
+}
+
+li.total strong {
+    display:block;
+    color:black;
+    font-weight:bold;
+}
+
+li.total span.value {
+    position:relative;
+    display:block;
+    top:-1.25em;
+    text-align:right;
+}
+
+.pofile {position:relative;}
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif
new file mode 100755
index 0000000000..e67f720dc6
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png
new file mode 100755
index 0000000000..5e2d744587
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png
new file mode 100755
index 0000000000..0c28717781
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
new file mode 100755
index 0000000000..e020ca977e
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
@@ -0,0 +1,189 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Generator: Adobe Illustrator 12.0.1, SVG Export Plug-In  -->
+<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" [
+	<!ENTITY ns_flows ""http://ns.adobe.com/Flows/1.0/"">
+	<!ENTITY ns_svg ""http://www.w3.org/2000/svg"">
+	<!ENTITY ns_xlink ""http://www.w3.org/1999/xlink"">
+]>
+<svg  version=""1.1"" xmlns=""&ns_svg;"" xmlns:xlink=""&ns_xlink;"" xmlns:a=""http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/""
+	 width=""17"" height=""17"" viewBox=""-0.75 -0.625 17 17"" enable-background=""new -0.75 -0.625 17 17"" xml:space=""preserve"">
+<defs>
+</defs>
+<g>
+	<defs>
+		<circle id=""XMLID_6_"" cx=""7.859"" cy=""7.859"" r=""7.484""/>
+	</defs>
+	<clipPath id=""XMLID_9_"">
+		<use xlink:href=""#XMLID_6_"" />
+	</clipPath>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.68 5.102,15.344 0.375,15.344 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.547 5.273,15.344 5.105,15.344 0.375,11.68 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C9D0D5"" points=""0.375,11.414 5.445,15.344 5.273,15.344 0.375,11.547 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C6CDD3"" points=""0.375,11.281 5.617,15.344 5.445,15.344 0.375,11.414 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C5CCD2"" points=""0.375,11.148 5.789,15.344 5.617,15.344 0.375,11.281 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C3C9D0"" points=""0.375,11.016 5.961,15.344 5.789,15.344 0.375,11.148 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C1C8CE"" points=""0.375,10.883 6.129,15.344 5.961,15.344 0.375,11.016 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BFC5CC"" points=""0.375,10.75 6.301,15.344 6.129,15.344 0.375,10.883 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BEC4CB"" points=""0.375,10.617 6.473,15.344 6.301,15.344 0.375,10.75 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BBC2C9"" points=""0.375,10.484 6.645,15.344 6.473,15.344 0.375,10.617 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BAC0C8"" points=""0.375,10.352 6.812,15.344 6.645,15.344 0.375,10.484 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B7BEC6"" points=""0.375,10.219 6.984,15.344 6.812,15.344 0.375,10.352 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B6BDC5"" points=""0.375,10.086 7.156,15.344 6.984,15.344 0.375,10.219 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B5BBC3"" points=""0.375,9.957 7.328,15.344 7.156,15.344 0.375,10.086 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B3BAC2"" points=""0.375,9.824 7.5,15.344 7.328,15.344 0.375,9.957 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B1B7C0"" points=""0.375,9.691 7.672,15.344 7.5,15.344 0.375,9.824 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B0B6BF"" points=""0.375,9.559 7.84,15.344 7.672,15.344 0.375,9.691 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AEB5BE"" points=""0.375,9.426 8.012,15.344 7.84,15.344 0.375,9.559 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ADB3BC"" points=""0.375,9.293 8.184,15.344 8.012,15.344 0.375,9.426 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ABB2BC"" points=""0.375,9.16 8.352,15.344 8.184,15.344 0.375,9.293 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AAB0BA"" points=""0.375,9.027 8.523,15.344 8.352,15.344 0.375,9.16 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A8AEB8"" points=""0.375,8.895 8.695,15.344 8.523,15.344 0.375,9.027 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ADB7"" points=""0.375,8.762 8.867,15.344 8.695,15.344 0.375,8.895 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ACB6"" points=""0.375,8.629 9.039,15.344 8.867,15.344 0.375,8.762 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A3AAB4"" points=""0.375,8.496 9.211,15.344 9.039,15.344 0.375,8.629 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A2A8B3"" points=""0.375,8.363 9.383,15.344 9.211,15.344 0.375,8.496 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A0A7B1"" points=""0.375,8.23 9.551,15.344 9.383,15.344 0.375,8.363 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9FA6B0"" points=""0.375,8.102 9.723,15.344 9.551,15.344 0.375,8.23 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9EA4AF"" points=""0.375,7.969 9.895,15.344 9.723,15.344 0.375,8.102 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9CA3AE"" points=""0.375,7.836 10.062,15.344 9.895,15.344 0.375,7.969 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9BA1AD"" points=""0.375,7.703 10.234,15.344 10.062,15.344 0.375,7.836 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9AA0AB"" points=""0.375,7.57 10.406,15.344 10.234,15.344 0.375,7.703 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#989FAA"" points=""0.375,7.438 10.578,15.344 10.406,15.344 0.375,7.57 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#979EAA"" points=""0.375,7.305 10.75,15.344 10.578,15.344 0.375,7.438 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#969CA8"" points=""0.375,7.172 10.918,15.344 10.75,15.344 0.375,7.305 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#949BA7"" points=""0.375,7.039 11.09,15.344 10.918,15.344 0.375,7.172 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9399A5"" points=""0.375,6.906 11.262,15.344 11.09,15.344 0.375,7.039 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9298A4"" points=""0.375,6.773 11.434,15.344 11.262,15.344 0.375,6.906 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9097A3"" points=""0.375,6.641 11.602,15.344 11.434,15.344 0.375,6.773 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8F95A2"" points=""0.375,6.508 11.773,15.344 11.602,15.344 0.375,6.641 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8E95A1"" points=""0.375,6.375 11.945,15.344 11.773,15.344 0.375,6.508 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8D93A0"" points=""0.375,6.242 12.117,15.344 11.945,15.344 0.375,6.375 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8B929F"" points=""0.375,6.113 12.289,15.344 12.117,15.344 0.375,6.242 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8A919E"" points=""0.375,5.98 12.461,15.344 12.289,15.344 0.375,6.113 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#898F9D"" points=""0.375,5.848 12.629,15.344 12.461,15.344 0.375,5.98 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878E9B"" points=""0.375,5.715 12.801,15.344 12.629,15.344 0.375,5.848 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878D9B"" points=""0.375,5.582 12.973,15.344 12.801,15.344 0.375,5.715 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#858C9A"" points=""0.375,5.449 13.141,15.344 12.973,15.344 0.375,5.582 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#848B98"" points=""0.375,5.316 13.312,15.344 13.141,15.344 0.375,5.449 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#838A97"" points=""0.375,5.184 13.484,15.344 13.312,15.344 0.375,5.316 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#828997"" points=""0.375,5.051 13.656,15.344 13.484,15.344 0.375,5.184 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#818895"" points=""0.375,4.918 13.828,15.344 13.656,15.344 0.375,5.051 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#808794"" points=""0.375,4.785 14,15.344 13.828,15.344 0.375,4.918 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7E8594"" points=""0.375,4.652 14.172,15.344 14,15.344 0.375,4.785 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7D8593"" points=""0.375,4.52 14.34,15.344 14.172,15.344 0.375,4.652 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7C8392"" points=""0.375,4.387 14.512,15.344 14.34,15.344 0.375,4.52 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7B8290"" points=""0.375,4.258 14.68,15.344 14.512,15.344 0.375,4.387 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7A8190"" points=""0.375,4.125 14.852,15.344 14.68,15.344 0.375,4.258 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#79808F"" points=""0.375,3.992 15.023,15.344 14.852,15.344 0.375,4.125 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#787F8D"" points=""0.375,3.859 15.195,15.344 15.023,15.344 0.375,3.992 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#777E8D"" points=""0.375,3.727 15.312,15.301 15.277,15.344 15.195,15.344 0.375,3.859 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767D8C"" points=""0.375,3.594 15.344,15.195 15.344,15.258 15.312,15.301 0.375,3.727 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767C8B"" points=""0.375,3.461 15.344,15.062 15.344,15.195 0.375,3.594 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#747B8A"" points=""0.375,3.328 15.344,14.93 15.344,15.062 0.375,3.461 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#737A89"" points=""0.375,3.195 15.344,14.797 15.344,14.93 0.375,3.328 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#727989"" points=""0.375,3.062 15.344,14.664 15.344,14.797 0.375,3.195 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#717888"" points=""0.375,2.93 15.344,14.531 15.344,14.664 0.375,3.062 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#707786"" points=""0.375,2.797 15.344,14.398 15.344,14.531 0.375,2.93 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6F7686"" points=""0.375,2.664 15.344,14.266 15.344,14.398 0.375,2.797 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7585"" points=""0.375,2.531 15.344,14.133 15.344,14.266 0.375,2.664 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7584"" points=""0.375,2.398 15.344,14 15.344,14.133 0.375,2.531 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6C7383"" points=""0.375,2.266 15.344,13.867 15.344,14 0.375,2.398 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6B7383"" points=""0.375,2.137 15.344,13.734 15.344,13.867 0.375,2.266 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6A7281"" points=""0.375,2 15.344,13.602 15.344,13.734 0.375,2.137 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#697181"" points=""0.375,1.871 15.344,13.469 15.344,13.602 0.375,2 	""/>
+	<polygon",added the css style module and swapped out the jboss . org logo with drools logo in html and eclipse output . . git - svn - id : https : / / svn . jboss . org / repos / labs / labs / jbossrules / trunk @ 23780 c60d74c8 - e8f6 - 0310 - 9e8f - d4a2fc68ab70,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/drools-docs/docbook-style-drools/pom.xml b/drools-docs/docbook-style-drools/pom.xml
new file mode 100755
index 0000000000..d669593eb1
--- /dev/null
+++ b/drools-docs/docbook-style-drools/pom.xml
@@ -0,0 +1,92 @@
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>  
+  
+  <parent>
+    <artifactId>drools-docs</artifactId>
+    <groupId>org.drools</groupId>
+    <version>5.0.0.SNAPSHOT</version>
+  </parent>
+
+  <groupId>org.drools</groupId>
+  <artifactId>docbook-style-drools</artifactId>
+  <packaging>jdocbook-style</packaging>
+  <version>1.1.0</version>
+
+  <name>JBoss Community Documentation Style for Drools</name>
+  <description>CSS and images to style XHTML JBoss Community Documentation.</description>
+  <url>http://www.jboss.org</url>
+
+  <organization>
+    <name>JBoss.org</name>
+    <url>http://www.jboss.org</url>
+  </organization>
+  
+   <repositories>
+        <repository>
+            <id>repository.jboss.org</id>
+            <url>http://repository.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>false</enabled>
+            </snapshots>
+            <releases>
+               <enabled>true</enabled>
+            </releases>
+        </repository>
+        <repository>
+            <id>snapshots.jboss.org</id>
+            <url>http://snapshots.jboss.org/maven2</url>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+            <releases>
+               <enabled>false</enabled>
+            </releases>
+        </repository>
+        </repositories>
+
+  <!-- 
+  <scm>
+    <developerConnection>scm:svn:https://svn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</developerConnection>
+    <connection>scm:svn:http://anonsvn.jboss.org/repos/jbossas/trunk/docbook-support/jbossorg-jdocbook-style/</connection>
+  </scm>
+  -->
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.jboss.maven.plugins</groupId>
+        <artifactId>maven-jdocbook-style-plugin</artifactId>
+        <version>1.0.0</version>
+        <extensions>true</extensions>
+      </plugin>
+    </plugins>
+    
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+        <artifactId>wagon-webdav</artifactId>
+        <version>1.0-beta-2</version>
+      </extension>
+    </extensions>
+  </build>
+
+  <distributionManagement>
+    <repository>
+      <!-- Copy the dist to the local checkout of the JBoss Repository at ${maven.repository.root} -->
+      <!-- It is anticipated that ${maven.repository.root} is set in user's settings.xml file -->
+      <!-- TODO : Replace this with direct svn access once the svnkit providers are available -->
+      <id>repository.jboss.org</id>
+      <name>JBoss Repository</name>
+      <url>file://${maven.repository.root}</url>
+    </repository>
+    <snapshotRepository>
+      <id>snapshots.jboss.org</id>
+      <name>JBoss Snapshot Repository</name>
+      <url>dav:https://snapshots.jboss.org/maven2</url>
+    </snapshotRepository>
+  </distributionManagement>
+
+</project>
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
new file mode 100755
index 0000000000..21411d6505
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/codehighlight.css
@@ -0,0 +1,242 @@
+span.property {color:#0066CC;}
+
+pre.JAVA {line-height:10px;}
+
+pre.XML {line-height:8px;}
+
+pre.JSP {line-height:8px;}
+
+pre.XHTML {line-height:8px;}
+
+.java_type {color:#000000;}
+
+.java_keyword {
+    font-weight:bold;
+    color:#7F1B55;
+}
+
+.java_javadoc_comment {
+    color:#3F5FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_comment {
+    color:#3F7F5F;
+    background-color:rgb(247,247,247);
+}
+
+.java_operator {color:#000000;}
+
+.java_plain {color:rgb(0,0,0);}
+
+.java_literal {color:#2A00FF;}
+
+pre CODE {
+    font-size:12px;
+    color:rgb(0,0,0);
+    font-family:monospace; 
+    white-space:nowrap;
+}
+
+.java_javadoc_tag {
+    font-weight:bold;
+    color:#7F9FBF;
+    font-style:italic;
+    background-color:rgb(247,247,247);
+}
+
+.java_separator {color:#000000;}
+
+.xml_plain {color:rgb(0,0,0);}
+
+.xml_tag_name {color:#3F7F7F;}
+
+.xml_comment {
+    color:#3F5FBF;
+    background-color:rgb(247,247,247);
+}
+
+.xml_tag_symbols {color:#008080;}
+
+.xml_rife_tag {
+    color:rgb(0,0,0);
+    background-color:rgb(228,230,160);
+}
+
+.xml_attribute_value {color:#2A00FF;}
+
+.xml_attribute_name {
+    font-weight:bold;
+    color:#7F007F;
+}
+
+.xml_char_data {color:rgb(0,0,0);}
+
+.xml_rife_name {
+    color:#008cca;
+    background-color:rgb(228,230,160);
+}
+
+.xml_processing_instruction {
+    font-weight:bold;
+    color:rgb(0,0,0);
+    font-style:italic;
+}
+
+td.java {
+    vertical-align:top;
+    line-height:10px;
+}
+
+td.java-ln {
+    vertical-align:top;
+    line-height:10px;
+}
+
+tt.java {
+    margin-bottom:0em;
+    line-height:10px;
+    font-family:verdana,helvetica,sans-serif;
+}
+
+tt.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+pre.java-ln {
+    margin-bottom:0em;
+    line-height:10px;
+}
+
+td.java-ln {
+    line-height:10px;
+    text-align:right;
+}
+
+tt.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+pre.java-ln {
+    color:#888888;
+    line-height:10px;
+}
+
+span.java0 {
+    font-size:8pt;
+    color:#ffffff;
+    line-height:10px;
+}
+
+span.java1 {
+    font-size:8pt;
+    color:#808080;
+}
+
+span.java2 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Single-line comment */
+
+span.java3 {
+    font-size:8pt;
+    color:#3f7f5f;
+    line-height:10px;
+}
+
+/* Keywords excluding 'return' */
+
+span.java4 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F1B55;
+    line-height:10px;
+}
+
+span.java5 {
+    font-size:8pt;
+    color:#2a00ff;
+    line-height:10px;
+}
+
+span.java6 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java7 {
+    font-size:8pt;
+    color:#990000;
+    line-height:10px;
+}
+
+span.java8 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+/* Primitive types: long, int, void etc... */
+
+span.java9 {
+    font-weight:bold;
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+span.java10 {
+    font-size:8pt;
+    color:#000000;
+    line-height:10px;
+}
+
+span.java11 {
+    font-size:8pt;
+    color:#7f9fbf;
+    line-height:10px;
+}
+
+span.java12 {
+    font-size:8pt;
+    color:#7f7f9f;
+    line-height:10px;
+}
+
+span.java13 {
+    font-size:8pt;
+    color:#3f3fbf;
+    line-height:10px;
+}
+
+span.java14 {
+    font-size:8pt;
+    color:#3f5fbf;
+    line-height:10px;
+}
+
+span.java15 {
+    font-size:8pt;
+    color:#7F0055;
+    line-height:10px;
+}
+
+/* Annotations */
+
+span.java16 {
+    font-size:8pt;
+    color:#646464;
+    line-height:10px;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/docnav.css b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
new file mode 100755
index 0000000000..c214f24ac0
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/docnav.css
@@ -0,0 +1,204 @@
+/* Document Navigation */
+
+.docnav a, .docnav strong {
+    text-decoration:none;
+    font-weight:normal;
+}
+
+.docnav {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    position:relative;
+    width:100%;
+    padding-bottom:2em;
+    padding-top:1em;
+    border-top:1px dotted #ccc;
+}
+
+.docnav li {
+    list-style:none;
+    margin:0em;
+    padding:0em;
+    display:inline;
+    font-size:.8em;
+}
+
+.docnav li:before {content:"" "";}
+
+.docnav li.previous, .docnav li.next {
+    position:absolute;
+    top:1em;
+}
+
+.docnav li.up, .docnav li.home {margin:0em 1.5em;}
+
+.docnav li.previous {
+    left:0px;
+    text-align:left;
+}
+
+.docnav li.next {
+    right:0px;
+    text-align:right;
+}
+
+.docnav li.previous strong, .docnav li.next strong {
+    display:block;
+    height:22px;
+}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav li.next a strong {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:1.2em;
+}
+
+.docnav li.previous a strong {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.home a strong {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav li.up a strong {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:1.2em;
+}
+
+.docnav a:link, .docnav a:visited {color:#666 !important;}
+
+.docnav a:hover, .docnav a:focus, .docnav a:active {color:black !important;}
+
+.docnav a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.docnav a:link strong {text-decoration:none;}
+
+.docnav {
+    margin:0 auto;
+    text-align:center;
+}
+
+.docnav {margin-bottom:16px;}
+
+/* Eclipse Help Navigation */
+
+.navheader {padding-top:35px}
+
+.navheader table {border-style:none}
+
+.navheader a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navheader td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navheader td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navheader a:link, .navheader a:visited {color:#666 !important;}
+
+.navheader a:hover, .navheader a:focus, .navheader a:active {color:black !important;}
+
+.navheader a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navheader a:link {text-decoration:none;}
+
+.navfooter table {border-style:none}
+
+.navfooter a {
+    text-decoration:none;
+    font-weight:normal;
+    font-size:.8em;
+}
+
+.navfooter td.next a {
+    background:url(../images/community/docbook/next.png) top right no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-right:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.previous a {
+    background:url(../images/community/docbook/prev.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.home a {
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter td.up a {
+    background:url(../images/community/docbook/up.png) top left no-repeat;
+    padding-top:10px;
+    padding-bottom:15px;
+    height:40px;
+    padding-left:60px;
+    font-size:0.9em;
+}
+
+.navfooter a:link, .navfooter a:visited {color:#666 !important;}
+
+.navfooter a:hover, .navfooter a:focus, .navfooter a:active {color:black !important;}
+
+.navfooter a {
+    max-width:10em;
+    overflow:hidden;
+}
+
+.navfooter a:link {text-decoration:none;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/documentation.css b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
new file mode 100755
index 0000000000..bf8e07fb8a
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/documentation.css
@@ -0,0 +1,551 @@
+/* Lists */
+
+ol li, ul li {
+    padding-left:.2em;
+    padding-bottom:.5em;
+    margin:0em;
+}
+
+ul {
+    padding-left:1.6em;
+    list-style-image:url(../images/community/dot.png);
+    list-style-type:circle;
+}
+
+ul ul {
+    list-style-image:url(../images/community/dot2.png);
+    list-style-type:circle;
+}
+
+dt {
+    font-weight:bold;
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
+
+dd {
+    margin:0em;
+    margin-left:2em;
+    padding-top:0em;
+}
+
+li p:first-child, dd p:first-child {
+    padding:0em;
+    margin-top:.3em;
+}
+
+.variablelist, .itemizedlist {margin-top:.6em;}
+
+ul li p:first-child {margin:0em;}
+
+/* Images */
+
+img {
+    display:block;
+    margin:2em 0;
+}
+
+.inlinemediaobject, .inlinemediaobject img {
+    display:inline !important;
+    margin:0em;
+}
+
+.programlisting a img, pre a img, td a img, td img {
+    display:inline;
+    margin:0 0;
+}
+
+/* Needed for Safari */
+
+pre a span img, pre span img {
+    display:inline;
+    margin:0 0;
+}
+
+span.co {
+    position:absolute;
+    left:900px
+}
+
+/* Document modes */
+
+.confidential {
+    background-color:#900;
+    color:white;
+    padding:.5em .5em;
+    font-family:serif;
+    text-transform:uppercase;
+    text-align:center
+}
+
+dt a {font-weight:normal;}
+
+.longdesc-link {display:none;}
+
+.prompt {
+    background-color:#ede7c8;
+    padding:0em .3em;
+}
+
+/* User interface styles */
+
+.screen .replaceable {color:#444;}
+
+.screen {
+    background-color:#ede7c8;
+    color:#333;
+    padding:.5em 1em;
+    margin:0em;
+}
+
+pre, code, .guibutton, .keycap, .guilabel {
+    font-size:0.9em;
+    font-family:verdana, helvetica, sans-serif;
+}
+
+.guibutton, .keycap, .guilabel {
+    font-weight:bold;
+    white-space:nowrap;
+    color:#444;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+}
+
+.guibutton, .guilabel {}
+
+.keycap {padding:.1em.4em;}
+
+.example {
+    background-color:#c8c5ac;
+    padding:5px;
+    margin-bottom:10px;
+}
+
+/* Terminal/Console text */
+
+.command, .computeroutput, .filename, .citetitle, .replaceable, .option {font-weight:bold;}
+
+.command .replaceable {color:#555;}
+
+pre {
+    display:block;
+    background-color:#f9f3b0;
+    color:#333;
+    overflow:auto;
+    padding:10px 20px;
+}
+
+code {white-space:nowrap;}
+
+/* Admonitions */
+
+/* Set basic colors and spacing */
+
+div.note {
+    background:#b5bcbd;
+    color:#4c5253;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.tip {
+    background:#7e917f;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.important {
+    background:#4a5d75;
+    color:white;
+    border:1px solid #8a9195;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.caution {
+    background:#e3a835;
+    color:#533500;
+    border:1px solid #ab710a; 
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+div.warning {
+    background:#7b1e1e;
+    color:white;
+    border:1px solid #65504e;
+    margin-bottom:1.5em;
+    background-repeat:no-repeat;
+    background-position:10px 10px;
+    padding:1em;
+    padding-bottom:20px;
+}
+
+/* Pre tag color settings */
+
+div.note pre {
+    background-color:#d6dee0;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.tip pre {
+    background-color:#d5e1d5;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.important pre {
+    background-color:#e1eef4;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.caution pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+div.warning pre {
+    background-color:#faf8ed;
+    color:#334558;
+    border:1px solid #e1e9eb;
+}
+
+/* Background images and margin */
+
+div.note, div.tip, div.important, div.caution, div.warning {margin-top:.5em;}
+
+div.note {background-image:url(../images/community/docbook/note.png);}
+div.tip {background-image:url(../images/community/docbook/tip.png);}
+div.important {background-image:url(../images/community/docbook/important.png);}
+div.caution {background-image:url(../images/community/docbook/caution.png);}
+div.warning {background-image:url(../images/community/docbook/warning.png);}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable {color:#e3dcc0;}
+
+pre .replaceable, tt .replaceable {color:#444 !important;}
+
+div.note h2, div.tip h2, div.important h2, div.caution h2, div.warning h2 {
+    height:32px;
+    font-size:1.3em;
+}
+
+div.note h2 {color:#4c5253;}
+div.tip h2 {color:white;}
+div.important h2 {color:white;}
+div.caution h2 {color:#533500;}
+div.warning h2 {color:white;}
+
+div.note .guilabel, div.tip .guilabel, div.important .guilabel, div.caution .guilabel, div.warning .guilabel {color:white !important;}
+
+div.note li, div.tip li, div.caution li, div.warning li, div.important li {
+	padding-left:10px;
+	margin:0em;
+}
+	
+div.note ul, div.tip ul, div.caution ul, div.warning ul, div.important ul {
+	padding-left:40px;
+	margin:0em;
+}
+
+div.note pre pre a:visited, div.tip pre pre a:visited, div.important pre pre a:visited, div.caution pre pre a:visited, div.warning pre pre a:visited,
+div.note pre a:link, div.tip pre a:link, div.important pre a:link, div.caution pre a:link, div.warning pre a:link {color:#0066cc !important;}
+
+div.note a:visited, div.tip a:visited, div.important a:visited, div.warning a:visited,
+div.note a:link, div.tip a:link, div.important a:link,  div.warning a:link {color:#f7f2d0;}
+	
+div.note a:visited, div.note a:link, div.caution a:link, div.caution a:visited {color:#0066cc;}
+
+/* Admonition icons spacing */
+
+div.note h2, div.note p, div.tip h2, div.tip p, div.caution h2, div.caution p, div.warning h2, div.warning p, div.important h2, div.important p {
+    padding:0em;
+    margin:0em;
+    padding-left:56px;
+}
+
+/* Page Title */
+
+#title {
+    padding:0px;
+    margin:0px;
+}
+
+#title strong {display:none;}
+
+#title a.site_href {
+    display:block;
+    height:89px;
+    width:310px;
+    float:left;
+    background:url(../images/community/drools_logo.png) top left no-repeat;
+}
+
+#title a.doc_href {
+    display:block;
+    height:89px;
+    background:transparent url(../images/community/community_doc.png) top right no-repeat;
+}
+
+/* Table */
+
+table {
+    border:1px solid #aaa;
+    width:100%;
+    border-collapse:collapse;
+}
+
+table th {
+    text-align:left;
+    background-color:#4A5D75;
+    padding:.3em .5em;
+    color:white;
+}
+
+table td {padding:.15em .5em;}
+
+table tr.even td {background-color:#f5f5f5;}
+
+table th p:first-child, table td p:first-child, table li p:first-child {
+    margin-top:0em;
+    padding-top:0em;
+    display:inline;
+}
+
+th, td {border-style:none;}
+
+table table td {
+    border-bottom:1px dotted #aaa !important;
+    background-color:white;
+    padding:.6em 0em;
+}
+
+table table {
+    border:1px solid white !important;
+    font-size:.9em;
+}
+
+td.remarkval {
+    font-size:.9em;
+    color:#444;
+}
+
+.defaultval {font-size:.8em}
+
+td.typeval {font-size:.8em}
+
+td.fieldval {
+    font-weight:bold;
+    font-size:.9em;
+}
+
+th.dbkey {font-size:.9em;}
+
+.lbname, .lbtype, .lbdescr, .lbdriver, .lbhost {
+    color:white;
+    font-weight:bold;
+    background-color:#999;
+    font-size:0.9em;
+    width:120px;
+}
+
+td.remarkval {width:230px;}
+
+td.tname {
+    font-weight:bold;
+    font-size:1.1em;
+}
+
+h5 {font-size:9pt;}
+h6 {font-size:10pt;}
+
+th.dbfield {width:120px;}
+th.dbtype {width:70px;}
+th.dbdefault {width:70px;}
+th.dbnul {width:70px;}
+th.dbkey {width:70px;}
+
+span.book {
+    margin-top:4em;
+    display:block;
+}
+
+span.chapter {
+    display:block;
+    margin-top:0.5em;
+}
+
+/* Breadcrumbs */
+
+#breadcrumbs ul li.first:before {content:"" "";}
+
+#breadcrumbs {
+    color:#900;
+    padding:3px;
+    margin-bottom:25px;
+}
+
+#breadcrumbs ul {
+    margin-left:0;
+    padding-left:0;
+    display:inline;
+    border:none;
+}
+
+#breadcrumbs ul li {
+    margin-left:0;
+    padding-left:2px;
+    border:none;
+    list-style:none;
+    display:inline;
+}
+
+#breadcrumbs ul li:before {
+    content:""\0020 \0020 \0020 \00BB \0020"";
+    color:#333;
+}
+
+/* Status */
+
+.alpha1 {background:white url(../images/community/watermark-alpha1.png) top left repeat;}
+.alpha2 {background:white url(../images/community/watermark-alpha2.png) top left repeat;}
+.beta1 {background:white url(../images/community/watermark-beta1.png) top left repeat;}
+.beta2 {background:white url(../images/community/watermark-beta2.png) top left repeat;}
+.pre-release-candidate {background:white url(../images/community/watermark-pre-release-candidate.png) top left repeat;}
+.release-candidate {background:white url(../images/community/watermark-release-candidate.png) top left repeat;}
+
+/* Index */
+
+.glossary h3, .index h3 {
+    font-size:2em;
+    color:#aaa;
+    margin:0em;
+}
+
+.indexdiv {margin-bottom:1em;}
+
+.glossary dt, .index dt {
+    font-size:.9em;
+    color:#444;
+    padding-top:.5em;
+}
+
+.glossary dl dl dt, .index dl dl dt {
+    font-size:.85em;
+    color:#777;
+    line-height:1.2em;
+    font-weight:normal;
+    padding-top:0em;
+}
+
+.index dl dl dt:before {
+    content:""- "";
+    color:#ccc;
+}
+
+/* Changes */
+
+.footnotes {}
+
+.footnote {
+    padding:.2em 1em;
+    background-color:#c8c5ac;
+    font-size:.9em;
+    margin:0em;
+    margin-bottom:.5em;
+    color:#222;
+}
+
+table .footnote {margin:1em .5em;}
+
+sup {
+    padding:0em .3em;
+    padding-left:0em;
+}
+
+.footnote {position:relative;}
+
+.footnote sup {
+    color:#e3dcc0;
+    font-size:1.8em;
+    position:absolute;
+    left:.4em;
+}
+
+.footnote sup a:link, .footnote sup a:visited {
+    color:#92917d;
+    text-decoration:none;
+}
+
+.footnote:hover sup a {
+    color:#fff;
+    text-decoration:none;
+}
+
+.footnote p {padding-left:5em;}
+
+.footnote a:link, .footnote a:visited {color:#00537c;}
+
+.footnote a:hover {color:white;}
+
+li p:first-child {
+    margin:0em !important;
+    padding:0em !important;
+}
+
+div.chapter, div.section {padding-top:2em;}
+
+.revhistory {font-size:}
+
+pre .replaceable, pre .keycap {color:white;}
+
+pre {
+  font-family:verdana,helvetica,sans-serif;
+  background-color:#F5F5F5;
+  border:1px solid #CCCCCC;
+  padding:5px 15px 5px 25px;
+}
+
+div.note .replaceable, div.tip .replaceable, div.important .replaceable, div.caution .replaceable, div.warning .replaceable,
+div.note .keycap, div.tip .keycap, div.important .keycap, div.caution .keycap, div.warning .keycap {color:white;}
+
+div.abstract {font-size:larger;}
+
+.authorgroup {}
+
+.authorgroup h4 {
+    padding:0em;
+    margin:0em;
+    margin-top:1em;
+}
+
+.author, .editor, .translator, .othercredit {display:block;}
+
+/* Simpler author style on contents page */
+
+.authorgroup div {
+	margin-left:10px;
+	margin-right:10px;
+	margin-bottom:15px;
+}
+
+ul li p:last-child {
+    margin-bottom:0em;
+    padding-bottom:0em;
+}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/extensions.css b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
new file mode 100755
index 0000000000..fd43f3b670
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/extensions.css
@@ -0,0 +1,7 @@
+/* Firefox */
+
+pre {-moz-border-radius:11px;}
+
+.example {-moz-border-radius:15px;}
+
+div.note, div.tip, div.important, div.caution, div.warning {-moz-border-radius:11px;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
new file mode 100755
index 0000000000..ce16cff0e5
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/jbossorg.css
@@ -0,0 +1,80 @@
+@import url(""documentation.css"");
+@import url(""docnav.css"");
+@import url(""reports.css"");
+@import url(""extensions.css"");
+@import url(""codehighlight.css"");
+
+body {
+    background-image:url(../images/community/bkg_gradient.gif);
+    background-repeat:repeat-x;
+    margin:0 auto;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    font-size:12px;
+    max-width:55em;
+    padding:0em 2em;
+    color:#333;
+    line-height:150%;
+    text-align:justify;
+}
+
+/* Links */
+
+a:link {color:#0066cc;}
+
+a:visited {color:#6699cc;}
+
+div.longdesc-link {
+    float:right;
+    color:#999;
+}
+
+/* Headings */
+
+h1, h2, h3, h4, h5, h6 {
+    color:#4a5d75;
+    line-height:130%;
+    margin-top:0em;
+    font-family:'Lucida Grande', Geneva, Verdana, Arial, sans-serif;
+    background-color:transparent;
+}
+
+h1 {
+    background-image:url(../images/community/title_hdr.png);
+    background-repeat:no-repeat;
+    border-top:1px dotted #CCCCCC;
+    line-height:1.2em;
+    color:#182737;
+    font-size:2em;
+    padding:1.5em;
+}
+
+h2 {font-size:1.6em;}
+
+h3 {
+    font-size:1.3em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h4 {
+    font-size:1.1em;
+    padding-top:0em;
+    padding-bottom:0em;
+}
+
+h5.formalpara {
+    font-size:1em;
+    margin-top:2em;
+    margin-bottom:.8em;
+}
+
+/* Element rules */
+
+hr {
+    border-collapse:collapse;
+    border-style:none;
+    border-top:1px dotted #ccc;
+    width:100% !important;
+}
+
+sup {color:#999;}
diff --git a/drools-docs/docbook-style-drools/src/main/css/css/reports.css b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
new file mode 100755
index 0000000000..8dd639d4cb
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/css/css/reports.css
@@ -0,0 +1,231 @@
+/* Reports */
+
+.reports ul.locale {list-style:none;}
+
+.reports ul {
+    padding:0em;
+    margin:0em;
+}
+
+.reports ul.locale li {
+    font-size:small;
+    color:#000;
+    display:block;
+    border:1px solid #eee;
+    float:left;
+    padding-right:2em;
+    margin-right:1em;
+    margin-bottom:1em;
+}
+
+.reports ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.1em;
+    padding-bottom:.5em;
+}
+
+.reports ul.locale strong {
+    display:block;
+    margin:0em;
+    padding:0em;
+    margin-bottom:-2.2em;
+}
+
+.reports ul.locale span.value {
+    display:block;
+    position:relative;
+    text-align:right;
+    margin-right:-1.5em;
+    font-size:1.0em;
+    color:#444;
+}
+
+.reports ul.locale li {
+    width:12em;
+    display:block;
+    float:left;
+    margin:0em;
+    clear:none;
+}
+
+.reports ul.locale li div.progress {
+    font-size:1em;
+    width:13.2em;
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+.reports h2 {
+    font-size:1em;
+    margin:0em;
+}
+
+.reports li {}
+
+.reports li:hover {
+    background-color:#666;
+    border-color:#444 !important;
+    color:white !important;
+}
+
+.reports li:hover strong, .reports li:hover h2, .reports li:hover a, .reports li:hover span.value {color:white;}
+
+/* Uniform */
+
+body.results, body.reports {
+    max-width:57em !important;
+    padding:0em !important;
+}
+
+/* Progress Bar */
+
+div.progress {
+    display:block;
+    float:left;
+    width:16em;
+    background:#c00 url(../images/community/shine.png) top left repeat-x;
+    height:1em;
+}
+
+div.progress span {
+    height:1em;
+    float:left;
+}
+
+div.progress span.translated {background:#6c3 url(../images/community/shine.png) top left repeat-x;}
+div.progress span.fuzzy {background:#ff9f00 url(../images/community/shine.png) top left repeat-x;}
+
+/* Results */
+
+.results ul.locale {
+    list-style:none;
+    padding:0em;
+    margin:0em;
+}
+
+.results .pofile {
+    padding:0em !important;
+    margin:0em;
+}
+
+.results ul.locale li {
+    border-top:1px solid #eee;
+    padding:0em;
+    margin:0em;
+    padding-left:32px;
+}
+
+.results ul.locale .pofile {
+    font-size:1.2em;
+    display:block;
+    width:100%;
+    color:#444;
+    padding:0em;
+    margin:0em;
+}
+
+.results span.value {color:#888;}
+
+.results strong {font-weight:normal;}
+
+.results .home a {
+    display:block;
+    margin:0 auto;
+    width:5em;
+    background:url(../images/community/docbook/home.png) top left no-repeat;
+    padding:5px;
+    padding-left:28px;
+    font-size:1.2em;
+}
+
+.results ul.locale li:hover, .results ul.locale li:hover span.pofile, .results ul.locale li:hover strong, .results ul.locale li:hover span.value {
+    background-color:#666 !important;
+    color:white;
+}
+
+ul.locale {list-style:none;}
+
+ul.locale li.total {
+    font-size:small;
+    color:#777;
+    width:31em;
+    display:block;
+    float:left;
+    margin-right:2em;
+    clear:none !important;
+}
+
+ul.locale li {
+    clear:both;
+    font-size:small;
+    color:#777;
+    display:block;
+}
+
+ul.locale strong, span.value {
+    font-weight:normal;
+    color:#888;
+    font-size:.7em;
+}
+
+ul.locale li a {
+    font-size:1.2em;
+    display:block;
+    padding-top:.2em;
+}
+
+ul.locale li.total div.progress {
+    position:relative;
+    left:0em;
+    top:0em;
+    margin-bottom:0em;
+}
+
+ul.locale li {width:100%;}
+
+ul.locale li div.progress {
+    float:left;
+    position:relative;
+    left:30.5em;
+    top:-2em;
+    margin:0em;
+    margin-bottom:-3em;
+}
+
+li.total {padding:0em !important;}
+
+li.total {
+    float:right;
+    max-width:16em;
+    padding:.5em;
+    margin:0 auto;
+    padding-top:.5em;
+    background-color:#f7f2d0;
+    font-size:1.3em !important;
+    color:#ccc !important;
+    margin-bottom:1em;
+    min-height:9.5em;
+}
+
+li.total .value {
+    color:#444;
+    font-size:.8em;
+}
+
+li.total strong {
+    display:block;
+    color:black;
+    font-weight:bold;
+}
+
+li.total span.value {
+    position:relative;
+    display:block;
+    top:-1.25em;
+    text-align:right;
+}
+
+.pofile {position:relative;}
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif
new file mode 100755
index 0000000000..e67f720dc6
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/bkg_gradient.gif differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png
new file mode 100755
index 0000000000..5e2d744587
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/community_doc.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png
new file mode 100755
index 0000000000..0c28717781
Binary files /dev/null and b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.png differ
diff --git a/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
new file mode 100755
index 0000000000..e020ca977e
--- /dev/null
+++ b/drools-docs/docbook-style-drools/src/main/images/images/community/docbook/callouts/1.svg
@@ -0,0 +1,189 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Generator: Adobe Illustrator 12.0.1, SVG Export Plug-In  -->
+<!DOCTYPE svg PUBLIC ""-//W3C//DTD SVG 1.1//EN"" ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" [
+	<!ENTITY ns_flows ""http://ns.adobe.com/Flows/1.0/"">
+	<!ENTITY ns_svg ""http://www.w3.org/2000/svg"">
+	<!ENTITY ns_xlink ""http://www.w3.org/1999/xlink"">
+]>
+<svg  version=""1.1"" xmlns=""&ns_svg;"" xmlns:xlink=""&ns_xlink;"" xmlns:a=""http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/""
+	 width=""17"" height=""17"" viewBox=""-0.75 -0.625 17 17"" enable-background=""new -0.75 -0.625 17 17"" xml:space=""preserve"">
+<defs>
+</defs>
+<g>
+	<defs>
+		<circle id=""XMLID_6_"" cx=""7.859"" cy=""7.859"" r=""7.484""/>
+	</defs>
+	<clipPath id=""XMLID_9_"">
+		<use xlink:href=""#XMLID_6_"" />
+	</clipPath>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.68 5.102,15.344 0.375,15.344 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#CBD2D8"" points=""0.375,11.547 5.273,15.344 5.105,15.344 0.375,11.68 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C9D0D5"" points=""0.375,11.414 5.445,15.344 5.273,15.344 0.375,11.547 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C6CDD3"" points=""0.375,11.281 5.617,15.344 5.445,15.344 0.375,11.414 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C5CCD2"" points=""0.375,11.148 5.789,15.344 5.617,15.344 0.375,11.281 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C3C9D0"" points=""0.375,11.016 5.961,15.344 5.789,15.344 0.375,11.148 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#C1C8CE"" points=""0.375,10.883 6.129,15.344 5.961,15.344 0.375,11.016 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BFC5CC"" points=""0.375,10.75 6.301,15.344 6.129,15.344 0.375,10.883 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BEC4CB"" points=""0.375,10.617 6.473,15.344 6.301,15.344 0.375,10.75 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BBC2C9"" points=""0.375,10.484 6.645,15.344 6.473,15.344 0.375,10.617 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#BAC0C8"" points=""0.375,10.352 6.812,15.344 6.645,15.344 0.375,10.484 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B7BEC6"" points=""0.375,10.219 6.984,15.344 6.812,15.344 0.375,10.352 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B6BDC5"" points=""0.375,10.086 7.156,15.344 6.984,15.344 0.375,10.219 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B5BBC3"" points=""0.375,9.957 7.328,15.344 7.156,15.344 0.375,10.086 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B3BAC2"" points=""0.375,9.824 7.5,15.344 7.328,15.344 0.375,9.957 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B1B7C0"" points=""0.375,9.691 7.672,15.344 7.5,15.344 0.375,9.824 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#B0B6BF"" points=""0.375,9.559 7.84,15.344 7.672,15.344 0.375,9.691 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AEB5BE"" points=""0.375,9.426 8.012,15.344 7.84,15.344 0.375,9.559 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ADB3BC"" points=""0.375,9.293 8.184,15.344 8.012,15.344 0.375,9.426 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#ABB2BC"" points=""0.375,9.16 8.352,15.344 8.184,15.344 0.375,9.293 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#AAB0BA"" points=""0.375,9.027 8.523,15.344 8.352,15.344 0.375,9.16 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A8AEB8"" points=""0.375,8.895 8.695,15.344 8.523,15.344 0.375,9.027 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ADB7"" points=""0.375,8.762 8.867,15.344 8.695,15.344 0.375,8.895 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A6ACB6"" points=""0.375,8.629 9.039,15.344 8.867,15.344 0.375,8.762 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A3AAB4"" points=""0.375,8.496 9.211,15.344 9.039,15.344 0.375,8.629 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A2A8B3"" points=""0.375,8.363 9.383,15.344 9.211,15.344 0.375,8.496 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#A0A7B1"" points=""0.375,8.23 9.551,15.344 9.383,15.344 0.375,8.363 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9FA6B0"" points=""0.375,8.102 9.723,15.344 9.551,15.344 0.375,8.23 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9EA4AF"" points=""0.375,7.969 9.895,15.344 9.723,15.344 0.375,8.102 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9CA3AE"" points=""0.375,7.836 10.062,15.344 9.895,15.344 0.375,7.969 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9BA1AD"" points=""0.375,7.703 10.234,15.344 10.062,15.344 0.375,7.836 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9AA0AB"" points=""0.375,7.57 10.406,15.344 10.234,15.344 0.375,7.703 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#989FAA"" points=""0.375,7.438 10.578,15.344 10.406,15.344 0.375,7.57 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#979EAA"" points=""0.375,7.305 10.75,15.344 10.578,15.344 0.375,7.438 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#969CA8"" points=""0.375,7.172 10.918,15.344 10.75,15.344 0.375,7.305 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#949BA7"" points=""0.375,7.039 11.09,15.344 10.918,15.344 0.375,7.172 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9399A5"" points=""0.375,6.906 11.262,15.344 11.09,15.344 0.375,7.039 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9298A4"" points=""0.375,6.773 11.434,15.344 11.262,15.344 0.375,6.906 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#9097A3"" points=""0.375,6.641 11.602,15.344 11.434,15.344 0.375,6.773 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8F95A2"" points=""0.375,6.508 11.773,15.344 11.602,15.344 0.375,6.641 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8E95A1"" points=""0.375,6.375 11.945,15.344 11.773,15.344 0.375,6.508 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8D93A0"" points=""0.375,6.242 12.117,15.344 11.945,15.344 0.375,6.375 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8B929F"" points=""0.375,6.113 12.289,15.344 12.117,15.344 0.375,6.242 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#8A919E"" points=""0.375,5.98 12.461,15.344 12.289,15.344 0.375,6.113 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#898F9D"" points=""0.375,5.848 12.629,15.344 12.461,15.344 0.375,5.98 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878E9B"" points=""0.375,5.715 12.801,15.344 12.629,15.344 0.375,5.848 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#878D9B"" points=""0.375,5.582 12.973,15.344 12.801,15.344 0.375,5.715 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#858C9A"" points=""0.375,5.449 13.141,15.344 12.973,15.344 0.375,5.582 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#848B98"" points=""0.375,5.316 13.312,15.344 13.141,15.344 0.375,5.449 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#838A97"" points=""0.375,5.184 13.484,15.344 13.312,15.344 0.375,5.316 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#828997"" points=""0.375,5.051 13.656,15.344 13.484,15.344 0.375,5.184 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#818895"" points=""0.375,4.918 13.828,15.344 13.656,15.344 0.375,5.051 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#808794"" points=""0.375,4.785 14,15.344 13.828,15.344 0.375,4.918 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7E8594"" points=""0.375,4.652 14.172,15.344 14,15.344 0.375,4.785 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7D8593"" points=""0.375,4.52 14.34,15.344 14.172,15.344 0.375,4.652 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7C8392"" points=""0.375,4.387 14.512,15.344 14.34,15.344 0.375,4.52 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7B8290"" points=""0.375,4.258 14.68,15.344 14.512,15.344 0.375,4.387 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#7A8190"" points=""0.375,4.125 14.852,15.344 14.68,15.344 0.375,4.258 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#79808F"" points=""0.375,3.992 15.023,15.344 14.852,15.344 0.375,4.125 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#787F8D"" points=""0.375,3.859 15.195,15.344 15.023,15.344 0.375,3.992 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#777E8D"" points=""0.375,3.727 15.312,15.301 15.277,15.344 15.195,15.344 0.375,3.859 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767D8C"" points=""0.375,3.594 15.344,15.195 15.344,15.258 15.312,15.301 0.375,3.727 	
+		""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#767C8B"" points=""0.375,3.461 15.344,15.062 15.344,15.195 0.375,3.594 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#747B8A"" points=""0.375,3.328 15.344,14.93 15.344,15.062 0.375,3.461 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#737A89"" points=""0.375,3.195 15.344,14.797 15.344,14.93 0.375,3.328 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#727989"" points=""0.375,3.062 15.344,14.664 15.344,14.797 0.375,3.195 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#717888"" points=""0.375,2.93 15.344,14.531 15.344,14.664 0.375,3.062 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#707786"" points=""0.375,2.797 15.344,14.398 15.344,14.531 0.375,2.93 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6F7686"" points=""0.375,2.664 15.344,14.266 15.344,14.398 0.375,2.797 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7585"" points=""0.375,2.531 15.344,14.133 15.344,14.266 0.375,2.664 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6D7584"" points=""0.375,2.398 15.344,14 15.344,14.133 0.375,2.531 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6C7383"" points=""0.375,2.266 15.344,13.867 15.344,14 0.375,2.398 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6B7383"" points=""0.375,2.137 15.344,13.734 15.344,13.867 0.375,2.266 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#6A7281"" points=""0.375,2 15.344,13.602 15.344,13.734 0.375,2.137 	""/>
+	<polygon clip-path=""url(#XMLID_9_)"" fill=""#697181"" points=""0.375,1.871 15.344,13.469 15.344,13.602 0.375,2 	""/>
+	<polygon [/INST] T.\\ Љn and inЁ ( W.(
Љn

Հ:,n tЉЉ p Mis F C
Љ1Љ/ R p .a to ton- M/ ( p in"
"diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml
index 5c858e64e..eec8cabf4 100644
--- a/profiler/nbproject/project.xml
+++ b/profiler/nbproject/project.xml
@@ -270,8 +270,8 @@ made subject to such option by the copyright holder.
                         <compile-dependency/>
                     </test-dependency>
                     <test-dependency>
-                        <code-name-base>org.netbeans.core.ui</code-name-base>
-                        <recursive/>
+                        <code-name-base>org.netbeans.modules.sampler</code-name-base>
+                        <compile-dependency/>
                     </test-dependency>
                 </test-type>
             </test-dependencies>
diff --git a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
index 67ae85c64..0b7f11249 100644
--- a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
+++ b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
@@ -42,12 +42,9 @@
 
 package org.netbeans.modules.profiler.actions;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.io.DataOutputStream;
 import java.io.OutputStream;
 import java.util.logging.Level;
-import javax.swing.Action;
 import org.junit.Test;
 import org.netbeans.junit.Log;
 import org.netbeans.modules.profiler.ui.NpsDataObject;
@@ -56,10 +53,12 @@ import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 import org.openide.loaders.DataObject;
 import static org.junit.Assert.*;
+import org.netbeans.modules.sampler.Sampler;
 
 /** Shows how o.n.core uses the SelfSamplerAction to start and stop self profiling.
  *
  * @author Jaroslav Tulach <jtulach@netbeans.org>
+ * @author Tomas Hurka
  */
 public class SelfSamplerActionTest {
 
@@ -68,24 +67,17 @@ public class SelfSamplerActionTest {
 
     @Test
     public void testSelfProfileToStream() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
-
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
         FileObject fo = FileUtil.createMemoryFileSystem().getRoot().createData(""slow.nps"");
         OutputStream os = fo.getOutputStream();
         DataOutputStream dos = new DataOutputStream(os);
-        al.actionPerformed(new ActionEvent(dos, 0, ""write"")); // NOI18N
+        sampler.stopAndWriteTo(dos);
         dos.close();
 
         if (fo.getSize() < 100) {
@@ -104,39 +96,32 @@ public class SelfSamplerActionTest {
             fail(""There shall be no warnings:\n"" + log);
         }
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
     @Test
     public void testSelfProfileCancel() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
-
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
-        al.actionPerformed(new ActionEvent(this, 0, ""cancel"")); // NOI18N
+        sampler.cancel();
         Thread.sleep(1000);
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
-    private void assertLoggerThread(String msg, boolean exist) {
+    private void assertSamplerThread(String msg, boolean exist) {
         for (Thread t : Thread.getAllStackTraces().keySet()) {
-            if (t.getName().startsWith(""logger-"")) {
+            if (t.getName().startsWith(""sampler-"")) {
                 assertTrue(msg + "" There is "" + t.getName() + "" thread"", exist);
                 return;
             }
         }
-        assertFalse(msg + "" There is no logger- thread"", exist);
+        assertFalse(msg + "" There is no sampler- thread"", exist);
     }",Automated merge with http : / / hg . netbeans . org / web - main,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml
index 5c858e64e..eec8cabf4 100644
--- a/profiler/nbproject/project.xml
+++ b/profiler/nbproject/project.xml
@@ -270,8 +270,8 @@ made subject to such option by the copyright holder.
                         <compile-dependency/>
                     </test-dependency>
                     <test-dependency>
-                        <code-name-base>org.netbeans.core.ui</code-name-base>
-                        <recursive/>
+                        <code-name-base>org.netbeans.modules.sampler</code-name-base>
+                        <compile-dependency/>
                     </test-dependency>
                 </test-type>
             </test-dependencies>
diff --git a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
index 67ae85c64..0b7f11249 100644
--- a/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
+++ b/profiler/test/unit/src/org/netbeans/modules/profiler/actions/SelfSamplerActionTest.java
@@ -42,12 +42,9 @@
 
 package org.netbeans.modules.profiler.actions;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.io.DataOutputStream;
 import java.io.OutputStream;
 import java.util.logging.Level;
-import javax.swing.Action;
 import org.junit.Test;
 import org.netbeans.junit.Log;
 import org.netbeans.modules.profiler.ui.NpsDataObject;
@@ -56,10 +53,12 @@ import org.openide.filesystems.FileObject;
 import org.openide.filesystems.FileUtil;
 import org.openide.loaders.DataObject;
 import static org.junit.Assert.*;
+import org.netbeans.modules.sampler.Sampler;
 
 /** Shows how o.n.core uses the SelfSamplerAction to start and stop self profiling.
  *
  * @author Jaroslav Tulach <jtulach@netbeans.org>
+ * @author Tomas Hurka
  */
 public class SelfSamplerActionTest {
 
@@ -68,24 +67,17 @@ public class SelfSamplerActionTest {
 
     @Test
     public void testSelfProfileToStream() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
-
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
         FileObject fo = FileUtil.createMemoryFileSystem().getRoot().createData(""slow.nps"");
         OutputStream os = fo.getOutputStream();
         DataOutputStream dos = new DataOutputStream(os);
-        al.actionPerformed(new ActionEvent(dos, 0, ""write"")); // NOI18N
+        sampler.stopAndWriteTo(dos);
         dos.close();
 
         if (fo.getSize() < 100) {
@@ -104,39 +96,32 @@ public class SelfSamplerActionTest {
             fail(""There shall be no warnings:\n"" + log);
         }
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
     @Test
     public void testSelfProfileCancel() throws Exception {
-        FileObject afo = FileUtil.getConfigFile(""Actions/Profile/org-netbeans-modules-profiler-actions-SelfSamplerAction.instance"");
-        assertNotNull(""SelfSamplerAction is in the right fileobject"", afo);
-        Action a = (Action)afo.getAttribute(""delegate""); // NOI18N
-        Object obj = a.getValue(""logger-testprofile"");
-        assertTrue(""It is runnable"", obj instanceof Runnable);
-        assertTrue(""It is action listener"", obj instanceof ActionListener);
-
-        Runnable r = (Runnable)obj;
-        ActionListener al = (ActionListener)obj;
+        Sampler sampler = Sampler.createManualSampler(""testprofile"");
+        assertTrue(""sampler instance"", sampler != null);
 
-        r.run();
+        sampler.start();
         Thread.sleep(1000);
-        assertLoggerThread(""logger-testprofile shall be there"", true);
+        assertSamplerThread(""sampler-testprofile shall be there"", true);
 
-        al.actionPerformed(new ActionEvent(this, 0, ""cancel"")); // NOI18N
+        sampler.cancel();
         Thread.sleep(1000);
 
-        assertLoggerThread(""no logger- thread shall be there"", false);
+        assertSamplerThread(""no sampler- thread shall be there"", false);
     }
 
-    private void assertLoggerThread(String msg, boolean exist) {
+    private void assertSamplerThread(String msg, boolean exist) {
         for (Thread t : Thread.getAllStackTraces().keySet()) {
-            if (t.getName().startsWith(""logger-"")) {
+            if (t.getName().startsWith(""sampler-"")) {
                 assertTrue(msg + "" There is "" + t.getName() + "" thread"", exist);
                 return;
             }
         }
-        assertFalse(msg + "" There is no logger- thread"", exist);
+        assertFalse(msg + "" There is no sampler- thread"", exist);
     }
 
  [/INST]  Here is a meaningful commit message for the given diff:

`Add SelfSamplerAction test`

This commit adds a new test case to the `SelfSamplerActionTest` class, which demonstrates how to use the"
"diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml
index 2234048ac1..e80e37688d 100644
--- a/demos/main/src/main/AndroidManifest.xml
+++ b/demos/main/src/main/AndroidManifest.xml
@@ -21,6 +21,7 @@
   <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>
   <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE""/>
   <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+  <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
 
   <uses-feature android:name=""android.software.leanback"" android:required=""false""/>
   <uses-feature android:name=""android.hardware.touchscreen"" android:required=""false""/>
diff --git a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
index f75607f268..5227411266 100644
--- a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
+++ b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
@@ -38,6 +38,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service
  *     android:name=""com.google.android.exoplayer2.ext.jobdispatcher.JobDispatcherScheduler$JobDispatcherSchedulerService""
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
index b3737eb8bc..20254c87ae 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
@@ -34,6 +34,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service android:name=""com.google.android.exoplayer2.util.scheduler.PlatformScheduler$PlatformSchedulerService""
  *     android:permission=""android.permission.BIND_JOB_SERVICE""",Add android . permission . FOREGROUND_SERVICE .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml
index 2234048ac1..e80e37688d 100644
--- a/demos/main/src/main/AndroidManifest.xml
+++ b/demos/main/src/main/AndroidManifest.xml
@@ -21,6 +21,7 @@
   <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>
   <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE""/>
   <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+  <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
 
   <uses-feature android:name=""android.software.leanback"" android:required=""false""/>
   <uses-feature android:name=""android.hardware.touchscreen"" android:required=""false""/>
diff --git a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
index f75607f268..5227411266 100644
--- a/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
+++ b/extensions/jobdispatcher/src/main/java/com/google/android/exoplayer2/ext/jobdispatcher/JobDispatcherScheduler.java
@@ -38,6 +38,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service
  *     android:name=""com.google.android.exoplayer2.ext.jobdispatcher.JobDispatcherScheduler$JobDispatcherSchedulerService""
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
index b3737eb8bc..20254c87ae 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/scheduler/PlatformScheduler.java
@@ -34,6 +34,7 @@ import com.google.android.exoplayer2.util.Util;
  *
  * <pre>{@literal
  * <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/>
+ * <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
  *
  * <service android:name=""com.google.android.exoplayer2.util.scheduler.PlatformScheduler$PlatformSchedulerService""
  *     android:permission=""android.permission.BIND_JOB_SERVICE"" [/INST]  Based on the diff output you provided, here is a possible commit message that summarizes the changes:

`Added FOREGROUND_SERVICE permission to JobDispatcherScheduler and PlatformScheduler`

The diff output shows"
"diff --git a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
index 76d918d68c2..d6246e73417 100644
--- a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
+++ b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
@@ -237,25 +237,16 @@ this value indicates the latest size.
 (string) For internal use. The type of result.
 
 `model_size_stats`.`total_by_field_count`:::
-(long) The number of `by` field values that were analyzed by the models.
-+
---
-NOTE: The `by` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `by` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_over_field_count`:::
-(long) The number of `over` field values that were analyzed by the models.
-+
---
-NOTE: The `over` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `over` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_partition_field_count`:::
-(long) The number of `partition` field values that were analyzed by the models.
+(long) The number of `partition` field values that were analyzed by the models. 
+This value is cumulative for all detectors.
 
 `model_size_stats`.`timestamp`:::
 (date) The timestamp of the `model_size_stats` according to the timestamp of the",Clarifies model_size_stats . total_xxx_field_count objects and removes notes in GET job stats API docs .,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
index 76d918d68c2..d6246e73417 100644
--- a/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
+++ b/docs/reference/ml/anomaly-detection/apis/get-job-stats.asciidoc
@@ -237,25 +237,16 @@ this value indicates the latest size.
 (string) For internal use. The type of result.
 
 `model_size_stats`.`total_by_field_count`:::
-(long) The number of `by` field values that were analyzed by the models.
-+
---
-NOTE: The `by` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `by` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_over_field_count`:::
-(long) The number of `over` field values that were analyzed by the models.
-+
---
-NOTE: The `over` field values are counted separately for each detector and
-partition.
-
---
+(long) The number of `over` field values that were analyzed by the models. This 
+value is cumulative for all detectors.
 
 `model_size_stats`.`total_partition_field_count`:::
-(long) The number of `partition` field values that were analyzed by the models.
+(long) The number of `partition` field values that were analyzed by the models. 
+This value is cumulative for all detectors.
 
 `model_size_stats`.`timestamp`:::
 (date) The timestamp of the `model_size_stats` according to the timestamp of the [/INST]  Here is a meaningful commit message for the above diff:

`Improved accuracy of job size statistics`:

This commit adds several improvements to the job size statistics in the `get-job-stats` API."
"diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
index cbd6b088670..f3daed0adb9 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
@@ -18,7 +18,9 @@ function getConnectorConfigs() (http:Options) {
                keyStoreFile:""${ballerina.home}/bre/security/wso2carbon.jks"",
                keyStorePassword:""wso2carbon"",
                trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-               trustStorePassword:""wso2carbon""
+               trustStorePassword:""wso2carbon"",
+               ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+               sslEnabledProtocols:""TLSv1.2,TLSv1.1""
                    },
               followRedirects: {}
     };
diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
index 3929f00c9e6..10dc2098671 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
@@ -9,7 +9,9 @@ import ballerina.lang.system;
     certPassword:""wso2carbon"",
     sslVerifyClient:""require"",
     trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-    trustStorePassword:""wso2carbon""
+    trustStorePassword:""wso2carbon"",
+    ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+    sslEnabledProtocols:""TLSv1.2,TLSv1.1""
 }
 service<http> echo {",Add ciphers and sslEnabledProtocols to the test,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
index cbd6b088670..f3daed0adb9 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLClient.bal
@@ -18,7 +18,9 @@ function getConnectorConfigs() (http:Options) {
                keyStoreFile:""${ballerina.home}/bre/security/wso2carbon.jks"",
                keyStorePassword:""wso2carbon"",
                trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-               trustStorePassword:""wso2carbon""
+               trustStorePassword:""wso2carbon"",
+               ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+               sslEnabledProtocols:""TLSv1.2,TLSv1.1""
                    },
               followRedirects: {}
     };
diff --git a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
index 3929f00c9e6..10dc2098671 100644
--- a/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
+++ b/modules/tests/test-integration/src/test/resources/MutualSSL/mutualSSLServer.bal
@@ -9,7 +9,9 @@ import ballerina.lang.system;
     certPassword:""wso2carbon"",
     sslVerifyClient:""require"",
     trustStoreFile:""${ballerina.home}/bre/security/client-truststore.jks"",
-    trustStorePassword:""wso2carbon""
+    trustStorePassword:""wso2carbon"",
+    ciphers:""TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"",
+    sslEnabledProtocols:""TLSv1.2,TLSv1.1""
 }
 service<http> echo {
  [/INST]  Here is a meaningful git commit message based on the diff output:

`Added TLSv1.2, TLSv1.1 support to MutualSSL server and client`

The commit message highlights the key changes"
"diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
index 31ff557d5f..412c82f9fc 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
@@ -32,6 +32,10 @@ enum Attribute {
     UNKNOWN(null),
 
     ID(Constants.ID),
+    NAME(Constants.NAME),
+    VALUE(Constants.VALUE),
+    CLASS(Constants.CLASS),
+    PROTOCOL_BINDINGS(Constants.PROTOCOL_BINDINGS),
     ;
 
     private final String name;
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
index 6839300ad3..d90516f296 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
@@ -44,6 +44,8 @@ enum Element {
     PROPERTY(Constants.PROPERTY),
     PROPERTY_NAME(Constants.PROPERTY_NAME),
     PROPERTY_VALUE(Constants.PROPERTY_VALUE),
+    PRE_HANDLER_CHAIN(Constants.PRE_HANDLER_CHAIN),
+    POST_HANDLER_CHAIN(Constants.POST_HANDLER_CHAIN),
     PRE_HANDLER_CHAINS(Constants.PRE_HANDLER_CHAINS),
     POST_HANDLER_CHAINS(Constants.POST_HANDLER_CHAINS),
     HANDLER_CHAIN(Constants.HANDLER_CHAIN),
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
index fad5bbf685..b53b89559d 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
@@ -164,6 +164,41 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
             switch (Namespace.forUri(reader.getNamespaceURI())) {
                 case WEBSERVICES_1_0: {
+                    final Element element = Element.forName(reader.getLocalName());
+                    if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
+                        throw unexpectedElement(reader);
+                    }
+                    switch (element) {
+                        case MODIFY_WSDL_ADDRESS: {
+                            boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));
+                            subsystem.get(MODIFY_WSDL_ADDRESS).set(b);
+                            break;
+                        }
+                        case WSDL_HOST: {
+                            subsystem.get(WSDL_HOST).set(parseElementNoAttributes(reader));
+                            break;
+                        }
+                        case WSDL_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_PORT).set(port);
+                            break;
+                        }
+                        case WSDL_SECURE_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_SECURE_PORT).set(port);
+                            break;
+                        }
+                        case ENDPOINT_CONFIG: {
+                            readEndpointConfigOld(reader, subsystem.get(OP_ADDR), endpointConfigs);
+                            break;
+                        }
+                        default: {
+                            throw unexpectedElement(reader);
+                        }
+                    }
+                    break;
+                }
+                case WEBSERVICES_1_1: {
                     final Element element = Element.forName(reader.getLocalName());
                     if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
                         throw unexpectedElement(reader);
@@ -215,7 +250,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return reader.getElementText().trim();
     }
 
-    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+    private void readEndpointConfigOld(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
         String configName = null;
 
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -235,11 +270,59 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
                     break;
                 }
                 case PRE_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, true);
+                    parseHandlerChainsOld(reader, configName, operationList, true);
                     break;
                 }
                 case POST_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, false);
+                    parseHandlerChainsOld(reader, configName, operationList, false);
+                    break;
+                }
+                case PROPERTY : {
+                    final ModelNode operation = parsePropertyOld(reader, configName);
+                    operationList.add(operation);
+                    break;
+                }
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+    }
+
+    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+        String configName = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                configName = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final ModelNode node = new ModelNode();
+        node.get(OP).set(ADD);
+        node.get(OP_ADDR).set(address).add(ENDPOINT_CONFIG, configName);
+        operationList.add(node);
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (element != Element.PRE_HANDLER_CHAIN && element != Element.POST_HANDLER_CHAIN && element != Element.PROPERTY
+                    && !encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                case PRE_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, true);
+                    break;
+                }
+                case POST_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, false);
                     break;
                 }
                 case PROPERTY : {
@@ -254,7 +337,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         }
     }
 
-    private ModelNode parseProperty(XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+    private ModelNode parsePropertyOld(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
         String propertyName = null;
         String propertyValue = null;
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -286,7 +369,48 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return operation;
     }
 
-    private ModelNode parseHandlerChains(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
+    private ModelNode parseProperty(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+        String propertyName = null;
+        String propertyValue = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                propertyName = value;
+                break;
+            case VALUE:
+                propertyValue = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (!encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+        final ModelNode operation = new ModelNode();
+        operation.get(OP).set(ADD);
+        operation.get(OP_ADDR).add(SUBSYSTEM, WSExtension.SUBSYSTEM_NAME).add(ENDPOINT_CONFIG, configName).add(PROPERTY, propertyName);
+        if (propertyValue != null) {
+            operation.get(VALUE).set(propertyValue);
+        }
+        return operation;
+    }
+
+    private ModelNode parseHandlerChainsOld(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
         ModelNode chainsNode = new ModelNode();
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
         while (reader.nextTag() != END_ELEMENT) {
@@ -297,7 +421,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
 
             switch (element) {
                 case HANDLER_CHAIN: {
-                    parseHandlerChain(reader, configName, operationList, isPreHandlerChain);
+",implemented new WS subsystem version unmarshalling process,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
index 31ff557d5f..412c82f9fc 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Attribute.java
@@ -32,6 +32,10 @@ enum Attribute {
     UNKNOWN(null),
 
     ID(Constants.ID),
+    NAME(Constants.NAME),
+    VALUE(Constants.VALUE),
+    CLASS(Constants.CLASS),
+    PROTOCOL_BINDINGS(Constants.PROTOCOL_BINDINGS),
     ;
 
     private final String name;
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
index 6839300ad3..d90516f296 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/Element.java
@@ -44,6 +44,8 @@ enum Element {
     PROPERTY(Constants.PROPERTY),
     PROPERTY_NAME(Constants.PROPERTY_NAME),
     PROPERTY_VALUE(Constants.PROPERTY_VALUE),
+    PRE_HANDLER_CHAIN(Constants.PRE_HANDLER_CHAIN),
+    POST_HANDLER_CHAIN(Constants.POST_HANDLER_CHAIN),
     PRE_HANDLER_CHAINS(Constants.PRE_HANDLER_CHAINS),
     POST_HANDLER_CHAINS(Constants.POST_HANDLER_CHAINS),
     HANDLER_CHAIN(Constants.HANDLER_CHAIN),
diff --git a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
index fad5bbf685..b53b89559d 100644
--- a/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
+++ b/webservices/server-integration/src/main/java/org/jboss/as/webservices/dmr/WebservicesSubsystemParser.java
@@ -164,6 +164,41 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {
             switch (Namespace.forUri(reader.getNamespaceURI())) {
                 case WEBSERVICES_1_0: {
+                    final Element element = Element.forName(reader.getLocalName());
+                    if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
+                        throw unexpectedElement(reader);
+                    }
+                    switch (element) {
+                        case MODIFY_WSDL_ADDRESS: {
+                            boolean b = Boolean.parseBoolean(parseElementNoAttributes(reader));
+                            subsystem.get(MODIFY_WSDL_ADDRESS).set(b);
+                            break;
+                        }
+                        case WSDL_HOST: {
+                            subsystem.get(WSDL_HOST).set(parseElementNoAttributes(reader));
+                            break;
+                        }
+                        case WSDL_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_PORT).set(port);
+                            break;
+                        }
+                        case WSDL_SECURE_PORT: {
+                            int port = Integer.valueOf(parseElementNoAttributes(reader));
+                            subsystem.get(WSDL_SECURE_PORT).set(port);
+                            break;
+                        }
+                        case ENDPOINT_CONFIG: {
+                            readEndpointConfigOld(reader, subsystem.get(OP_ADDR), endpointConfigs);
+                            break;
+                        }
+                        default: {
+                            throw unexpectedElement(reader);
+                        }
+                    }
+                    break;
+                }
+                case WEBSERVICES_1_1: {
                     final Element element = Element.forName(reader.getLocalName());
                     if (element != Element.ENDPOINT_CONFIG && !encountered.add(element)) {
                         throw unexpectedElement(reader);
@@ -215,7 +250,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return reader.getElementText().trim();
     }
 
-    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+    private void readEndpointConfigOld(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
         String configName = null;
 
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -235,11 +270,59 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
                     break;
                 }
                 case PRE_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, true);
+                    parseHandlerChainsOld(reader, configName, operationList, true);
                     break;
                 }
                 case POST_HANDLER_CHAINS: {
-                    parseHandlerChains(reader, configName, operationList, false);
+                    parseHandlerChainsOld(reader, configName, operationList, false);
+                    break;
+                }
+                case PROPERTY : {
+                    final ModelNode operation = parsePropertyOld(reader, configName);
+                    operationList.add(operation);
+                    break;
+                }
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+    }
+
+    private void readEndpointConfig(XMLExtendedStreamReader reader, ModelNode address, List<ModelNode> operationList) throws XMLStreamException {
+        String configName = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                configName = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final ModelNode node = new ModelNode();
+        node.get(OP).set(ADD);
+        node.get(OP_ADDR).set(address).add(ENDPOINT_CONFIG, configName);
+        operationList.add(node);
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (element != Element.PRE_HANDLER_CHAIN && element != Element.POST_HANDLER_CHAIN && element != Element.PROPERTY
+                    && !encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                case PRE_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, true);
+                    break;
+                }
+                case POST_HANDLER_CHAIN: {
+                    parseHandlerChain(reader, configName, operationList, false);
                     break;
                 }
                 case PROPERTY : {
@@ -254,7 +337,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         }
     }
 
-    private ModelNode parseProperty(XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+    private ModelNode parsePropertyOld(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
         String propertyName = null;
         String propertyValue = null;
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
@@ -286,7 +369,48 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
         return operation;
     }
 
-    private ModelNode parseHandlerChains(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
+    private ModelNode parseProperty(final XMLExtendedStreamReader reader, final String configName) throws XMLStreamException {
+        String propertyName = null;
+        String propertyValue = null;
+        final int count = reader.getAttributeCount();
+        for (int i = 0; i < count; i++) {
+            requireNoNamespaceAttribute(reader, i);
+            final String value = reader.getAttributeValue(i);
+            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
+            switch (attribute) {
+            case NAME:
+                propertyName = value;
+                break;
+            case VALUE:
+                propertyValue = value;
+                break;
+            default:
+                throw unexpectedAttribute(reader, i);
+            }
+        }
+
+        final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
+        while (reader.nextTag() != END_ELEMENT) {
+            final Element element = Element.forName(reader.getLocalName());
+            if (!encountered.add(element)) {
+                throw unexpectedElement(reader);
+            }
+            switch (element) {
+                default: {
+                    throw unexpectedElement(reader);
+                }
+            }
+        }
+        final ModelNode operation = new ModelNode();
+        operation.get(OP).set(ADD);
+        operation.get(OP_ADDR).add(SUBSYSTEM, WSExtension.SUBSYSTEM_NAME).add(ENDPOINT_CONFIG, configName).add(PROPERTY, propertyName);
+        if (propertyValue != null) {
+            operation.get(VALUE).set(propertyValue);
+        }
+        return operation;
+    }
+
+    private ModelNode parseHandlerChainsOld(final XMLExtendedStreamReader reader, final String configName, final List<ModelNode> operationList, final boolean isPreHandlerChain) throws XMLStreamException {
         ModelNode chainsNode = new ModelNode();
         final EnumSet<Element> encountered = EnumSet.noneOf(Element.class);
         while (reader.nextTag() != END_ELEMENT) {
@@ -297,7 +421,7 @@ final class WebservicesSubsystemParser implements XMLStreamConstants, XMLElement
 
             switch (element) {
                 case HANDLER_CHAIN: {
-                    parseHandlerChain(reader, configName, operationList, isPreHandlerChain);
+      [/INST]  Based on the diff output you provided, here are some meaningful commit messages that you could use to describe the changes made in each commit:

1. First commit:
`git commit -m ""Added support for WS-"
"diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
index a0ac7f5..624eab8 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
@@ -15,15 +15,21 @@
  */
 package edu.sfsu.cs.orange.ocr;
 
-import com.googlecode.leptonica.android.ReadFile;
-import com.googlecode.tesseract.android.TessBaseAPI;
+import java.io.File;
+import java.util.ArrayList;
 
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.os.AsyncTask;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.Message;
 import android.util.Log;
 
+import com.googlecode.leptonica.android.ReadFile;
+import com.googlecode.tesseract.android.ResultIterator;
+import com.googlecode.tesseract.android.TessBaseAPI;
+import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;
 /**
  * Class to send OCR requests to the OCR engine in a separate thread, send a success/failure message,
  * and dismiss the indeterminate progress dialog box. Used for non-continuous mode OCR only.
@@ -88,7 +94,21 @@ final class OcrRecognizeAsyncTask extends AsyncTask<Void, Void, Boolean> {
       ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());
       ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());
-      //ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
+
+      // Iterate through the results.
+      final ResultIterator iterator = baseApi.getResultIterator();
+      int[] lastBoundingBox;
+      ArrayList<Rect> charBoxes = new ArrayList<Rect>();
+      iterator.begin();
+      do {
+          lastBoundingBox = iterator.getBoundingBox(PageIteratorLevel.RIL_SYMBOL);
+          Rect lastRectBox = new Rect(lastBoundingBox[0], lastBoundingBox[1],
+                  lastBoundingBox[2], lastBoundingBox[3]);
+          charBoxes.add(lastRectBox);
+      } while (iterator.next(PageIteratorLevel.RIL_SYMBOL));
+      iterator.delete();
+      ocrResult.setCharacterBoundingBoxes(charBoxes);
+
     } catch (RuntimeException e) {
       Log.e(""OcrRecognizeAsyncTask"", ""Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED."");
       e.printStackTrace();",Add example character iterator code,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
index a0ac7f5..624eab8 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
@@ -15,15 +15,21 @@
  */
 package edu.sfsu.cs.orange.ocr;
 
-import com.googlecode.leptonica.android.ReadFile;
-import com.googlecode.tesseract.android.TessBaseAPI;
+import java.io.File;
+import java.util.ArrayList;
 
 import android.graphics.Bitmap;
+import android.graphics.Rect;
 import android.os.AsyncTask;
+import android.os.Environment;
 import android.os.Handler;
 import android.os.Message;
 import android.util.Log;
 
+import com.googlecode.leptonica.android.ReadFile;
+import com.googlecode.tesseract.android.ResultIterator;
+import com.googlecode.tesseract.android.TessBaseAPI;
+import com.googlecode.tesseract.android.TessBaseAPI.PageIteratorLevel;
 /**
  * Class to send OCR requests to the OCR engine in a separate thread, send a success/failure message,
  * and dismiss the indeterminate progress dialog box. Used for non-continuous mode OCR only.
@@ -88,7 +94,21 @@ final class OcrRecognizeAsyncTask extends AsyncTask<Void, Void, Boolean> {
       ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());
       ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());
-      //ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
+
+      // Iterate through the results.
+      final ResultIterator iterator = baseApi.getResultIterator();
+      int[] lastBoundingBox;
+      ArrayList<Rect> charBoxes = new ArrayList<Rect>();
+      iterator.begin();
+      do {
+          lastBoundingBox = iterator.getBoundingBox(PageIteratorLevel.RIL_SYMBOL);
+          Rect lastRectBox = new Rect(lastBoundingBox[0], lastBoundingBox[1],
+                  lastBoundingBox[2], lastBoundingBox[3]);
+          charBoxes.add(lastRectBox);
+      } while (iterator.next(PageIteratorLevel.RIL_SYMBOL));
+      iterator.delete();
+      ocrResult.setCharacterBoundingBoxes(charBoxes);
+
     } catch (RuntimeException e) {
       Log.e(""OcrRecognizeAsyncTask"", ""Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED."");
       e.printStackTrace(); [/INST]  Here is a possible meaningful commit message for the above diff:

`Added support for iterating through Tesseract's result and extracting character bounding boxes`

The commit message explains the changes made in the code"
"diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
index f50478ff1b..55d737403d 100644
--- a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
@@ -1,30 +1,64 @@
 package io.micronaut.configuration.metrics.binder.datasource
 
-import io.micrometer.core.instrument.MeterRegistry
-import spock.lang.Ignore
+
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
 import spock.lang.Specification
 
 import javax.sql.DataSource
 
 class DataSourcePoolMetricsBinderFactorySpec extends Specification {
 
-    @Ignore
     def ""test getting the beans manually""() {
         given:
-        def meterRegistry = Mock(MeterRegistry)
-        def dataSource1 = Mock(DataSource)
-        def dataSource2 = Mock(DataSource)
+        DataSourcePoolMetricsBinderFactory dataSourcePoolMetricsBinderFactory = new DataSourcePoolMetricsBinderFactory()
 
         when:
-        def binder = new DataSourcePoolMetricsBinderFactory([], meterRegistry)
-        binder.dataSourceMeterBinder(""default"", dataSource1)
-        binder.dataSourceMeterBinder(""first"", dataSource2)
+        def meterBinder = dataSourcePoolMetricsBinderFactory.dataSourceMeterBinder(""foo"", new Foo())
 
         then:
-        1 * dataSource2.hashCode() >> 1
-        1 * dataSource1.hashCode() >> 2
-        0 * _._
+        meterBinder
+    }
+
+    class Foo implements DataSourcePoolMetadata {
+
+        @Override
+        DataSource getDataSource() {
+            return null
+        }
+
+        @Override
+        Integer getIdle() {
+            return null
+        }
+
+        @Override
+        Float getUsage() {
+            return null
+        }
+
+        @Override
+        Integer getActive() {
+            return null
+        }
+
+        @Override
+        Integer getMax() {
+            return null
+        }
+
+        @Override
+        Integer getMin() {
+            return null
+        }
 
+        @Override
+        String getValidationQuery() {
+            return null
+        }
 
+        @Override
+        Boolean getDefaultAutoCommit() {
+            return null
+        }
     }
 }
diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
new file mode 100644
index 0000000000..8e7f09943a
--- /dev/null
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
@@ -0,0 +1,85 @@
+package io.micronaut.configuration.metrics.binder.datasource
+
+import io.micrometer.core.instrument.MeterRegistry
+import io.micrometer.core.instrument.Tags
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
+import spock.lang.Specification
+
+import javax.sql.DataSource
+
+
+class DataSourcePoolMetricsBinderSpec extends Specification {
+
+    MeterRegistry meterRegistry = Mock(MeterRegistry)
+
+    def ""DataSourcePoolMetricsBinder""() {
+        given:
+        DataSource dataSource = Mock(DataSource)
+        DataSourcePoolMetricsBinder dataSourcePoolMetricsBinder = new DataSourcePoolMetricsBinder(
+                dataSource,
+                new FooDataSourcePoolMetadata(dataSource),
+                ""foo"",
+                []
+        )
+
+        when:
+        dataSourcePoolMetricsBinder.bindTo(meterRegistry)
+
+        then:
+        1 * meterRegistry.gauge('jdbc.connections.active', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.min', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.max', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.usage', Tags.of(""name"",""foo""), dataSource, _)
+        0 * _._
+
+    }
+
+    class FooDataSourcePoolMetadata implements  DataSourcePoolMetadata {
+
+        final DataSource dataSource
+
+        FooDataSourcePoolMetadata(DataSource dataSource){
+            this.dataSource = dataSource
+        }
+
+        @Override
+        DataSource getDataSource() {
+            return dataSource
+        }
+
+        @Override
+        Integer getIdle() {
+            return 0
+        }
+
+        @Override
+        Float getUsage() {
+            return 0
+        }
+
+        @Override
+        Integer getActive() {
+            return 0
+        }
+
+        @Override
+        Integer getMax() {
+            return 0
+        }
+
+",adding more datasource metrics binder tests,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
index f50478ff1b..55d737403d 100644
--- a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderFactorySpec.groovy
@@ -1,30 +1,64 @@
 package io.micronaut.configuration.metrics.binder.datasource
 
-import io.micrometer.core.instrument.MeterRegistry
-import spock.lang.Ignore
+
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
 import spock.lang.Specification
 
 import javax.sql.DataSource
 
 class DataSourcePoolMetricsBinderFactorySpec extends Specification {
 
-    @Ignore
     def ""test getting the beans manually""() {
         given:
-        def meterRegistry = Mock(MeterRegistry)
-        def dataSource1 = Mock(DataSource)
-        def dataSource2 = Mock(DataSource)
+        DataSourcePoolMetricsBinderFactory dataSourcePoolMetricsBinderFactory = new DataSourcePoolMetricsBinderFactory()
 
         when:
-        def binder = new DataSourcePoolMetricsBinderFactory([], meterRegistry)
-        binder.dataSourceMeterBinder(""default"", dataSource1)
-        binder.dataSourceMeterBinder(""first"", dataSource2)
+        def meterBinder = dataSourcePoolMetricsBinderFactory.dataSourceMeterBinder(""foo"", new Foo())
 
         then:
-        1 * dataSource2.hashCode() >> 1
-        1 * dataSource1.hashCode() >> 2
-        0 * _._
+        meterBinder
+    }
+
+    class Foo implements DataSourcePoolMetadata {
+
+        @Override
+        DataSource getDataSource() {
+            return null
+        }
+
+        @Override
+        Integer getIdle() {
+            return null
+        }
+
+        @Override
+        Float getUsage() {
+            return null
+        }
+
+        @Override
+        Integer getActive() {
+            return null
+        }
+
+        @Override
+        Integer getMax() {
+            return null
+        }
+
+        @Override
+        Integer getMin() {
+            return null
+        }
 
+        @Override
+        String getValidationQuery() {
+            return null
+        }
 
+        @Override
+        Boolean getDefaultAutoCommit() {
+            return null
+        }
     }
 }
diff --git a/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
new file mode 100644
index 0000000000..8e7f09943a
--- /dev/null
+++ b/configurations/micrometer-core/src/test/groovy/io/micronaut/configuration/metrics/binder/datasource/DataSourcePoolMetricsBinderSpec.groovy
@@ -0,0 +1,85 @@
+package io.micronaut.configuration.metrics.binder.datasource
+
+import io.micrometer.core.instrument.MeterRegistry
+import io.micrometer.core.instrument.Tags
+import io.micronaut.jdbc.metadata.DataSourcePoolMetadata
+import spock.lang.Specification
+
+import javax.sql.DataSource
+
+
+class DataSourcePoolMetricsBinderSpec extends Specification {
+
+    MeterRegistry meterRegistry = Mock(MeterRegistry)
+
+    def ""DataSourcePoolMetricsBinder""() {
+        given:
+        DataSource dataSource = Mock(DataSource)
+        DataSourcePoolMetricsBinder dataSourcePoolMetricsBinder = new DataSourcePoolMetricsBinder(
+                dataSource,
+                new FooDataSourcePoolMetadata(dataSource),
+                ""foo"",
+                []
+        )
+
+        when:
+        dataSourcePoolMetricsBinder.bindTo(meterRegistry)
+
+        then:
+        1 * meterRegistry.gauge('jdbc.connections.active', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.min', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.max', Tags.of(""name"",""foo""), dataSource, _)
+        1 * meterRegistry.gauge('jdbc.connections.usage', Tags.of(""name"",""foo""), dataSource, _)
+        0 * _._
+
+    }
+
+    class FooDataSourcePoolMetadata implements  DataSourcePoolMetadata {
+
+        final DataSource dataSource
+
+        FooDataSourcePoolMetadata(DataSource dataSource){
+            this.dataSource = dataSource
+        }
+
+        @Override
+        DataSource getDataSource() {
+            return dataSource
+        }
+
+        @Override
+        Integer getIdle() {
+            return 0
+        }
+
+        @Override
+        Float getUsage() {
+            return 0
+        }
+
+        @Override
+        Integer getActive() {
+            return 0
+        }
+
+        @Override
+        Integer getMax() {
+            return 0
+        }
+
+      [/INST]  The commit message for the `DataSourcePoolMetricsBinderSpec` file is:
```
Generating commit message for changes in 'DataSourcePoolMetricsBinderSpec.groovy'...

Added new test for DataSource"
"diff --git a/zipkin-server/README.md b/zipkin-server/README.md
index 3e1c05251..f75821c93 100644
--- a/zipkin-server/README.md
+++ b/zipkin-server/README.md
@@ -579,6 +579,16 @@ of known open source libraries on 128-bit trace identifiers.
 
 See `zipkin2.storage.StorageComponent.Builder` for even more details!
 
+## TLS/SSL
+Zipkin-server can be made to run with TLS if needed:
+
+```bash
+# assuming you generate the key like this
+keytool -genkeypair -alias mysite -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore zipkin.p12 -validity 3650
+
+java -jar zipkin.jar --armeria.ssl.key-store=zipkin.p12 --armeria.ssl.key-store-type=PKCS12 --armeria.ssl.key-store-password=123123 --armeria.ssl.key-alias=mysite  --armeria.ssl.enabled=true --armeria.ports[0].port=9411 --armeria.ports[0].protocols[0]=https
+```
+
 ## Running with Docker
 Released versions of zipkin-server are published to Docker Hub as `openzipkin/zipkin`.
 See [docker-zipkin](https://github.com/openzipkin/docker-zipkin) for details.",add TLS note ( <issue_id> ),"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/zipkin-server/README.md b/zipkin-server/README.md
index 3e1c05251..f75821c93 100644
--- a/zipkin-server/README.md
+++ b/zipkin-server/README.md
@@ -579,6 +579,16 @@ of known open source libraries on 128-bit trace identifiers.
 
 See `zipkin2.storage.StorageComponent.Builder` for even more details!
 
+## TLS/SSL
+Zipkin-server can be made to run with TLS if needed:
+
+```bash
+# assuming you generate the key like this
+keytool -genkeypair -alias mysite -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore zipkin.p12 -validity 3650
+
+java -jar zipkin.jar --armeria.ssl.key-store=zipkin.p12 --armeria.ssl.key-store-type=PKCS12 --armeria.ssl.key-store-password=123123 --armeria.ssl.key-alias=mysite  --armeria.ssl.enabled=true --armeria.ports[0].port=9411 --armeria.ports[0].protocols[0]=https
+```
+
 ## Running with Docker
 Released versions of zipkin-server are published to Docker Hub as `openzipkin/zipkin`.
 See [docker-zipkin](https://github.com/openzipkin/docker-zipkin) for details. [/INST]  Here's a possible meaningful commit message based on the diff:

`Fixed README documentation for TLS/SSL configuration`

The commit message highlights the changes made in the README file, specifically the addition of"
"diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
index 9b86762d54..c637306c9f 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
@@ -18,9 +18,12 @@ import { EditorView, DecorationSet, NodeView } from 'prosemirror-view';
 import { findParentNodeOfType, NodeWithPos, findChildrenByType, findChildren } from 'prosemirror-utils';
 import { EditorState, TextSelection, Plugin, PluginKey, Transaction } from 'prosemirror-state';
 
+import zenscroll from 'zenscroll';
+
 import { nodeDecoration } from '../../api/decoration';
-import { firstNode, lastNode } from '../../api/node';
+import { firstNode, lastNode, editingRootScrollContainerElement } from '../../api/node';
 import { selectionIsWithin } from '../../api/selection';
+import { bodyElement } from '../../api/dom';
 
 import { findFootnoteNode, selectedFootnote, selectedNote } from './footnote';
 
@@ -53,6 +56,24 @@ export function footnoteEditorActivationPlugin() {
         return key.getState(state);
       },
     },
+
+    view: () => ({
+      // scroll footnote into view (if necessary) when note editor is active
+      update: (view: EditorView) => {
+        const note = selectedNote(view.state.selection);
+        if (note) {
+          const footnote = findFootnoteNode(view.state.doc, note.node.attrs.ref);
+          if (footnote) {
+            const footnoteEl = view.nodeDOM(footnote.pos);
+            if (footnoteEl) {
+              const body = bodyElement(view);
+              const scroller = zenscroll.createScroller(body, 0, 30);
+              scroller.intoView(footnoteEl as HTMLElement);
+            }
+          }
+        }
+      }
+    })
   });
 }
 
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
index e8f8b8cea3..4e0854b57d 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
@@ -37,12 +37,12 @@
 }
 
 .ProseMirror .body.editing-footnote {
-  bottom: 100px;
+  bottom: 160px;
   border-bottom: 1px solid;
 }
 
 .ProseMirror .notes.editing-footnote {
-  height: 90px;
+  height: 150px;
   padding-top: 10px;
   z-index: 5;
 }
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
index 7455927f70..8d98e35ff0 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
@@ -86,7 +86,11 @@ const extension: Extension = {
           },
         ],
         writer: (output: PandocOutput, node: ProsemirrorNode) => {
-          output.writeNote(node);
+          // don't write empty footnotes (otherwise in block or section mode they gobble up
+          // the section below them)
+          if (node.childCount > 0) {
+            output.writeNote(node);
+          }
         },
       },
     },","allocate more height ( 150px ) , scroll inline note into view ; don \' t write empty footnote","[INST] Generate a meaningful git commit message from the following diff:
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
index 9b86762d54..c637306c9f 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-editor.ts
@@ -18,9 +18,12 @@ import { EditorView, DecorationSet, NodeView } from 'prosemirror-view';
 import { findParentNodeOfType, NodeWithPos, findChildrenByType, findChildren } from 'prosemirror-utils';
 import { EditorState, TextSelection, Plugin, PluginKey, Transaction } from 'prosemirror-state';
 
+import zenscroll from 'zenscroll';
+
 import { nodeDecoration } from '../../api/decoration';
-import { firstNode, lastNode } from '../../api/node';
+import { firstNode, lastNode, editingRootScrollContainerElement } from '../../api/node';
 import { selectionIsWithin } from '../../api/selection';
+import { bodyElement } from '../../api/dom';
 
 import { findFootnoteNode, selectedFootnote, selectedNote } from './footnote';
 
@@ -53,6 +56,24 @@ export function footnoteEditorActivationPlugin() {
         return key.getState(state);
       },
     },
+
+    view: () => ({
+      // scroll footnote into view (if necessary) when note editor is active
+      update: (view: EditorView) => {
+        const note = selectedNote(view.state.selection);
+        if (note) {
+          const footnote = findFootnoteNode(view.state.doc, note.node.attrs.ref);
+          if (footnote) {
+            const footnoteEl = view.nodeDOM(footnote.pos);
+            if (footnoteEl) {
+              const body = bodyElement(view);
+              const scroller = zenscroll.createScroller(body, 0, 30);
+              scroller.intoView(footnoteEl as HTMLElement);
+            }
+          }
+        }
+      }
+    })
   });
 }
 
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
index e8f8b8cea3..4e0854b57d 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote-styles.css
@@ -37,12 +37,12 @@
 }
 
 .ProseMirror .body.editing-footnote {
-  bottom: 100px;
+  bottom: 160px;
   border-bottom: 1px solid;
 }
 
 .ProseMirror .notes.editing-footnote {
-  height: 90px;
+  height: 150px;
   padding-top: 10px;
   z-index: 5;
 }
diff --git a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
index 7455927f70..8d98e35ff0 100644
--- a/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
+++ b/src/gwt/panmirror/src/editor/src/nodes/footnote/footnote.ts
@@ -86,7 +86,11 @@ const extension: Extension = {
           },
         ],
         writer: (output: PandocOutput, node: ProsemirrorNode) => {
-          output.writeNote(node);
+          // don't write empty footnotes (otherwise in block or section mode they gobble up
+          // the section below them)
+          if (node.childCount > 0) {
+            output.writeNote(node);
+          }
         },
       },
     }, [/INST]  The commit message for this diff could be something like:

` footnote editor improvements and styling updates`

Here's a breakdown of the changes made in each file:

* `footnote-editor.ts`:"
"diff --git a/README.md b/README.md
index 828680c..a20d480 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"",
diff --git a/README.zh-cn.md b/README.zh-cn.md
index 71f8365..30155c4 100644
--- a/README.zh-cn.md
+++ b/README.zh-cn.md
@@ -53,7 +53,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"",",add missing comma in whiteList,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/README.md b/README.md
index 828680c..a20d480 100644
--- a/README.md
+++ b/README.md
@@ -60,7 +60,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"",
diff --git a/README.zh-cn.md b/README.zh-cn.md
index 71f8365..30155c4 100644
--- a/README.zh-cn.md
+++ b/README.zh-cn.md
@@ -53,7 +53,7 @@ andResGuard {
         ""R.style.umeng*"",
         ""R.id.umeng*"",
         // umeng share for sina
-        ""R.drawable.sina*""
+        ""R.drawable.sina*"",
         // for google-services.json
         ""R.string.google_app_id"",
         ""R.string.gcm_defaultSenderId"", [/INST]  Here are a few examples of meaningful commit messages that you could use based on the diff output you provided:

1. `Add support for Sina share in README.md` - This commit message is informative and conc"
"diff --git a/Java/Java.sublime-syntax b/Java/Java.sublime-syntax
index 17a5ed49..468cdfe2 100644
--- a/Java/Java.sublime-syntax
+++ b/Java/Java.sublime-syntax
@@ -341,9 +341,10 @@ contexts:
 
   keywords:
     - match: '::'
-      scope: keyword.control.method-reference.java
+      scope: keyword.operator.method-reference.java
       push:
         - match: '{{id}}'
+          scope: variable.function.reference.java
           pop: true
         - match: (?=\S)
           pop: true
diff --git a/Java/syntax_test_java.java b/Java/syntax_test_java.java
index 371ae1d6..dd1d17c5 100644
--- a/Java/syntax_test_java.java
+++ b/Java/syntax_test_java.java
@@ -59,13 +59,15 @@ public class SyntaxTest {
         printList(Arrays.stream(args)
             .collect(Collectors.toCollection(ArrayList::new)));
 //                                                      ^^^ meta.method.body.java - keyword.control.new.java
-//                                                    ^^ keyword.control.method-reference.java
+//                                                      ^^^ variable.function.reference.java
+//                                                    ^^ keyword.operator.method-reference.java
         anotherMethod();
         try (Stream<String> lines = Files.lines(path)) {
 //      ^^^ keyword.control.catch-exception.java
 //                                 ^^^^^^^^^^^^^^^^^^ meta.assignment.rhs.java
 //",Adjusted scoping on method reference stuff,"[INST] Generate a meaningful git commit message from the following diff:
diff --git a/Java/Java.sublime-syntax b/Java/Java.sublime-syntax
index 17a5ed49..468cdfe2 100644
--- a/Java/Java.sublime-syntax
+++ b/Java/Java.sublime-syntax
@@ -341,9 +341,10 @@ contexts:
 
   keywords:
     - match: '::'
-      scope: keyword.control.method-reference.java
+      scope: keyword.operator.method-reference.java
       push:
         - match: '{{id}}'
+          scope: variable.function.reference.java
           pop: true
         - match: (?=\S)
           pop: true
diff --git a/Java/syntax_test_java.java b/Java/syntax_test_java.java
index 371ae1d6..dd1d17c5 100644
--- a/Java/syntax_test_java.java
+++ b/Java/syntax_test_java.java
@@ -59,13 +59,15 @@ public class SyntaxTest {
         printList(Arrays.stream(args)
             .collect(Collectors.toCollection(ArrayList::new)));
 //                                                      ^^^ meta.method.body.java - keyword.control.new.java
-//                                                    ^^ keyword.control.method-reference.java
+//                                                      ^^^ variable.function.reference.java
+//                                                    ^^ keyword.operator.method-reference.java
         anotherMethod();
         try (Stream<String> lines = Files.lines(path)) {
 //      ^^^ keyword.control.catch-exception.java
 //                                 ^^^^^^^^^^^^^^^^^^ meta.assignment.rhs.java
 //                               [/INST]  Here is a meaningful commit message for the given diff:

`Fixed Java syntax in Java/Java.sublime-syntax to match Java 14 syntax`

The commit message explains the changes made in the `Java/"
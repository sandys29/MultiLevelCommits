diff,label,llama-70b-output,llama3.1-8b-output,mistral-large-output,gpt-4o-output
"diff --git a/.gitignore b/.gitignore
index 4f1483bcee..94e42a33fa 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,6 +17,7 @@ src/com/facebook/buck/intellij/ideabuck/third-party/*.iml
 /.buckd
 /.buckjavaargs.local
 /.bucklogging.local.properties
+.buckversion
 .fakebuckversion
 /.nobuckcheck
 ","Revert \"" [ buck ] Buck to have . buckversion \"" .","""Add .buckversion to .gitignore""",Added .buckversion to .gitignore.,"""Added .buckversion to .gitignore""",Add .buckversion to .gitignore to ignore Buck version configuration files.
"diff --git a/searchlib/src/vespa/searchlib/datastore/buffer_type.h b/searchlib/src/vespa/searchlib/datastore/buffer_type.h
index d937a60209b..b89aaa1bf84 100644
--- a/searchlib/src/vespa/searchlib/datastore/buffer_type.h
+++ b/searchlib/src/vespa/searchlib/datastore/buffer_type.h
@@ -2,7 +2,7 @@
 
 #pragma once
 
-#include <assert.h>
+#include <cassert>
 #include <cstdint>
 #include <sys/types.h>
 
diff --git a/searchlib/src/vespa/searchlib/datastore/bufferstate.h b/searchlib/src/vespa/searchlib/datastore/bufferstate.h
index cd765b22a40..173d74b9e63 100644
--- a/searchlib/src/vespa/searchlib/datastore/bufferstate.h
+++ b/searchlib/src/vespa/searchlib/datastore/bufferstate.h
@@ -2,14 +2,11 @@
 
 #pragma once
 
-#include <vector>
-#include <deque>
-#include <vespa/vespalib/util/alloc.h>
-#include <vespa/vespalib/util/array.h>
-
 #include ""buffer_type.h""
 #include ""entryref.h""
 #include <vespa/vespalib/util/generationhandler.h>
+#include <vespa/vespalib/util/alloc.h>
+#include <vespa/vespalib/util/array.h>
 
 namespace search {
 namespace datastore {
@@ -40,24 +37,24 @@ public:
     };
 
 private:
-    size_t _usedElems;
-    size_t _allocElems;
-    uint64_t _deadElems;
-    State _state;
-    bool  _disableElemHoldList;
-    uint64_t _holdElems;
+    size_t        _usedElems;
+    size_t        _allocElems;
+    uint64_t      _deadElems;
+    State         _state;
+    bool          _disableElemHoldList;
+    uint64_t      _holdElems;
     // Number of bytes that are heap allocated by elements that are stored in this buffer.
     // For simple types this is 0.
-    size_t _extraUsedBytes;
+    size_t        _extraUsedBytes;
     // Number of bytes that are heap allocated by elements that are stored in this buffer and is now on hold.
     // For simple types this is 0.
-    size_t _extraHoldBytes;
-    FreeList _freeList;
+    size_t        _extraHoldBytes;
+    FreeList      _freeList;
     FreeListList *_freeListList;	// non-NULL if free lists are enabled
 
     // NULL pointers if not on circular list of buffer states with free elems
-    BufferState *_nextHasFree;
-    BufferState *_prevHasFree;
+    BufferState    *_nextHasFree;
+    BufferState    *_prevHasFree;
 
     BufferTypeBase *_typeHandler;
     uint32_t        _typeId;
@@ -83,9 +80,8 @@ public:
      * @param sizeNeeded	Number of elements needed to be free
      * @param buffer		start of buffer.
      */
-    void
-    onActive(uint32_t bufferId, uint32_t typeId, BufferTypeBase *typeHandler,
-             size_t sizeNeeded, void *&buffer);
+    void onActive(uint32_t bufferId, uint32_t typeId, BufferTypeBase *typeHandler,
+                  size_t sizeNeeded, void *&buffer);
 
     /**
      * Transition from ACTIVE to HOLD state.
diff --git a/searchlib/src/vespa/searchlib/datastore/datastore.hpp b/searchlib/src/vespa/searchlib/datastore/datastore.hpp
index 56db025c28c..f4d80795c87 100644
--- a/searchlib/src/vespa/searchlib/datastore/datastore.hpp
+++ b/searchlib/src/vespa/searchlib/datastore/datastore.hpp
@@ -30,7 +30,7 @@ void
 DataStoreT<RefT>::freeElem(EntryRef ref, uint64_t len)
 {
     RefType intRef(ref);
-    BufferState &state = _states[intRef.bufferId()];
+    BufferState &state = getBufferState(intRef.bufferId());
     if (state.isActive()) {
         if (state.freeListList() != NULL && len == state.getClusterSize()) {
             if (state.freeList().empty()) {
@@ -54,7 +54,7 @@ DataStoreT<RefT>::holdElem(EntryRef ref, uint64_t len, size_t extraBytes)
 {
     RefType intRef(ref);
     uint64_t alignedLen = RefType::align(len);
-    BufferState &state = _states[intRef.bufferId()];
+    BufferState &state = getBufferState(intRef.bufferId());
     assert(state.isActive());
     if (state.hasDisabledElemHoldList()) {
         state.incDeadElems(alignedLen);
@@ -79,7 +79,7 @@ DataStoreT<RefT>::trimElemHoldList(generation_t usedGen)
         if (static_cast<sgeneration_t>(it->_generation - usedGen) >= 0)
             break;
         RefType intRef(it->_ref);
-        BufferState &state = _states[intRef.bufferId()];
+        BufferState &state = getBufferState(intRef.bufferId());
         freeElem(it->_ref, it->_len);
         state.decHoldElems(it->_len);
         ++freed;
@@ -100,7 +100,7 @@ DataStoreT<RefT>::clearElemHoldList(void)
     ElemHold2List::iterator ite(elemHold2List.end());
     for (; it != ite; ++it) {
         RefType intRef(it->_ref);
-        BufferState &state = _states[intRef.bufferId()];
+        BufferState &state = getBufferState(intRef.bufferId());
         freeElem(it->_ref, it->_len);
         state.decHoldElems(it->_len);
     }
diff --git a/searchlib/src/vespa/searchlib/datastore/datastorebase.cpp b/searchlib/src/vespa/searchlib/datastore/datastorebase.cpp
index 5a99db4c305..e73dcb2d43a 100644
--- a/searchlib/src/vespa/searchlib/datastore/datastorebase.cpp
+++ b/searchlib/src/vespa/searchlib/datastore/datastorebase.cpp
@@ -75,9 +75,9 @@ public:
 };
 
 
-DataStoreBase::DataStoreBase(uint32_t numBuffers,
-                             size_t maxClusters)
+DataStoreBase::DataStoreBase(uint32_t numBuffers, size_t maxClusters)
     : _buffers(numBuffers),
+      _typeIds(numBuffers),
       _activeBufferIds(),
       _states(numBuffers),
       _typeHandlers(),
@@ -160,18 +160,6 @@ DataStoreBase::addType(BufferTypeBase *typeHandler)
     return typeId;
 }
 
-uint32_t
-DataStoreBase::getNumActiveBuffers() const
-{
-    uint32_t result = 0;
-    for (const auto &state : _states) {
-        if (state.isActive()) {
-            ++result;
-        }
-    }
-    return result;
-}
-
 void
 DataStoreBase::transferElemHoldList(generation_t generation)
 {
@@ -373,8 +361,7 @@ DataStoreBase::getAddressSpaceUsage() const
 }
 
 void
-DataStoreBase::onActive(uint32_t bufferId, uint32_t typeId,
-                        size_t sizeNeeded)
+DataStoreBase::onActive(uint32_t bufferId, uint32_t typeId, size_t sizeNeeded)
 {
     assert(typeId < _typeHandlers.size());
     assert(bufferId < _numBuffers);
diff --git a/searchlib/src/vespa/searchlib/datastore/datastorebase.h b/searchlib/src/vespa/searchlib/datastore/datastorebase.h
index ed28cf0fa8c..c6aa098cb9f 100644
--- a/searchlib/src/vespa/searchlib/datastore/datastorebase.h
+++ b/searchlib/src/vespa/searchlib/datastore/datastorebase.h
@@ -7,6 +7,7 @@
 #include <vespa/searchlib/util/memoryusage.h>
 #include <vespa/searchlib/common/address_space.h>
 #include <vector>
+#include <deque>
 
 namespace search {
 namespace datastore {
@@ -36,6 +37,9 @@ protected:
     typedef vespalib::GenerationHandler::sgeneration_t sgeneration_t;
 
     std::vector<void *>   _buffers; // For fast mapping with known types
+private:
+    std::vector<uint32_t> _typeIds; // Cached,compact access to frequently used typeId
+protected:
     std::vector<uint32_t> _activeBufferIds; // typeId -> active buffer
 
     // Hold list at freeze, when knowing how long elements must be held
@@ -121,8 +125,9 @@ public:
         }
     };
 
-protected:
+private:
     std::vector<BufferState> _states;
+protected:
     std::vector<BufferTypeBase *> _typeHandlers; // TypeId -> handler
 
     std::vector<BufferState::FreeListList> _freeListLists;
@@ -132,8 +137,8 @@ protected:
     ElemHold1List _elemHold1List;
     ElemHold2List _elemHold2List;
 
-    uint32_t _numBuffers;
-    size_t _maxClusters;
+    const uint32_t _numBuffers;
+    const size_t   _maxClusters;
 
     vespalib::GenerationHolder _genHolder;
 
@@ -220,15 +225,9 @@ public:
      * Get active buffer id for the given type id.
      */
     uint32_t getActiveBufferId(uint32_t typeId) const { return _activeBufferIds[typeId]; }
-
     const BufferState &getBufferState(uint32_t bufferId) const { return _states[bufferId]; }
-
     BufferState &getBufferState(uint32_t bufferId) { return _states[bufferId]; }
-
     uint32_t getNumBuffers() const { return _numBuffers; }
-
-    uint32_t getNumActiveBuffers() const;
-
     bool hasElemHold1() const { return !_elemHold1List.empty(); }
 
     /**",Align code and GC some unused code .,"""Refactor DataStoreBase and BufferState classes for improved code organization and readability""","The commit message should be:

""Replace assert.h with cassert, and add includes for deque and generationhandler""

However, this commit message seems to be too specific and doesn't capture the full scope of the changes. A more general commit message could be:

""Refactor BufferState and DataStoreBase to improve code organization and readability""

Or, if you want to focus on the changes that were made:

""Improve BufferState and DataStoreBase to use more modern C++ features and improve performance""

Or, if you want to focus on the bug fixes:

""Fix issues with BufferState and DataStoreBase, including incorrect usage of assert and missing includes""

But the most suitable commit message would be:

""Refactor BufferState and DataStoreBase to improve code organization and readability""

This commit message is clear, concise, and accurately reflects the changes made in the commit.","It seems like you're sharing changes between two versions of a C++ codebase. The changes include:

1. Including `<cassert>` instead of `<assert.h>` in `buffer_type.h`.
2. Reordering and reformatting some includes in `bufferstate.h`.
3. Changing the style of member variable declarations in `BufferState` class in `bufferstate.h`.
4. Removing the `DataStoreBase::getNumActiveBuffers()` function and some other changes in `datastorebase.cpp` and `datastorebase.h`.

However, your message got cut off at the end, so I'm not sure what exactly you need help with. If you have any questions about these changes or need help with something else, please provide more details.",Refactor includes and improve code consistency and readability in the DataStore implementation.
"diff --git a/core/ktx/src/androidTest/java/androidx/content/ContentValuesTest.kt b/core/ktx/src/androidTest/java/androidx/content/ContentValuesTest.kt
new file mode 100644
index 00000000000..ee5eea36385
--- /dev/null
+++ b/core/ktx/src/androidTest/java/androidx/content/ContentValuesTest.kt
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package androidx.content
+
+import androidx.assertThrows
+import org.junit.Assert.assertArrayEquals
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertNull
+import org.junit.Test
+import java.util.concurrent.atomic.AtomicInteger
+
+class ContentValuesTest {
+    @Test fun valuesOfValid() {
+        val values = contentValuesOf(
+                ""null"" to null,
+                ""string"" to ""string"",
+                ""byte"" to 1.toByte(),
+                ""short"" to 1.toShort(),
+                ""int"" to 1,
+                ""long"" to 1L,
+                ""float"" to 1f,
+                ""double"" to 1.0,
+                ""boolean"" to true,
+                ""byteArray"" to byteArrayOf()
+        )
+        assertEquals(10, values.size())
+        assertNull(values.get(""null""))
+        assertEquals(""string"", values.get(""string""))
+        assertEquals(1.toByte(), values.get(""byte""))
+        assertEquals(1.toShort(), values.get(""short""))
+        assertEquals(1, values.get(""int""))
+        assertEquals(1L, values.get(""long""))
+        assertEquals(1f, values.get(""float""))
+        assertEquals(1.0, values.get(""double""))
+        assertEquals(true, values.get(""boolean""))
+        assertArrayEquals(byteArrayOf(), values.get(""byteArray"") as ByteArray)
+    }
+
+    @Test fun valuesOfInvalid() {
+        assertThrows<IllegalArgumentException> {
+            contentValuesOf(""nope"" to AtomicInteger(1))
+        }.hasMessageThat().isEqualTo(""Illegal value type java.util.concurrent.atomic.AtomicInteger for key \""nope\"""")
+    }
+}
diff --git a/core/ktx/src/main/java/androidx/content/ContentValues.kt b/core/ktx/src/main/java/androidx/content/ContentValues.kt
new file mode 100644
index 00000000000..41b6f203c64
--- /dev/null
+++ b/core/ktx/src/main/java/androidx/content/ContentValues.kt
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package androidx.content
+
+import android.content.ContentValues
+
+/** Returns a new [ContentValues] with the given key/value pairs as elements. */
+fun contentValuesOf(vararg pairs: Pair<String, Any?>) = ContentValues(pairs.size).apply {
+    for ((key, value) in pairs) {
+        when (value) {
+            null -> putNull(key)
+            is String -> put(key, value)
+            is Int -> put(key, value)
+            is Long -> put(key, value)
+            is Boolean -> put(key, value)
+            is Float -> put(key, value)
+            is Double -> put(key, value)
+            is ByteArray -> put(key, value)
+            is Byte -> put(key, value)
+            is Short -> put(key, value)
+            else -> {
+                val valueType = value.javaClass.canonicalName
+                throw IllegalArgumentException(""Illegal value type $valueType for key \""$key\"""")
+            }
+        }
+    }
+}",Add ContentValues factory method from pairs .,"""Added ContentValues extension function and test""","""Add ContentValues and ContentValuesTest classes for testing and creating ContentValues instances""","""Add ContentValuesTest.kt and ContentValues.kt to core/ktx""

This commit adds two new files to the `core/ktx` directory: `ContentValuesTest.kt` and `ContentValues.kt`.

`ContentValuesTest.kt` contains two tests for the `contentValuesOf` function:

* `valuesOfValid` tests that the function correctly creates a `ContentValues` object with the expected key-value pairs.
* `valuesOfInvalid` tests that the function throws an `IllegalArgumentException` when given an invalid value type.

`ContentValues.kt` contains the implementation of the `contentValuesOf` function, which returns a new `ContentValues` object with the given key-value pairs as elements. The function takes a vararg of `Pair<String, Any?>` and uses a `when` statement to determine how to add each pair to the `ContentValues` object. If the value is not a supported type, an `IllegalArgumentException` is thrown.","""Add ContentValues extension function and tests to handle various key/value pairs with improved type safety."""
"diff --git a/core/src/main/java/com/orientechnologies/orient/core/sql/executor/GetValueFromIndexEntryStep.java b/core/src/main/java/com/orientechnologies/orient/core/sql/executor/GetValueFromIndexEntryStep.java
index edde63476a..e087e8d3ad 100644
--- a/core/src/main/java/com/orientechnologies/orient/core/sql/executor/GetValueFromIndexEntryStep.java
+++ b/core/src/main/java/com/orientechnologies/orient/core/sql/executor/GetValueFromIndexEntryStep.java
@@ -5,8 +5,10 @@ import com.orientechnologies.orient.core.command.OCommandContext;
 import com.orientechnologies.orient.core.db.record.OIdentifiable;
 import com.orientechnologies.orient.core.id.ORID;
 
+import java.util.Arrays;
 import java.util.Map;
 import java.util.Optional;
+import java.util.stream.Collectors;
 
 /**
  * Created by luigidellaquila on 16/03/17.
@@ -161,6 +163,13 @@ public class GetValueFromIndexEntryStep extends AbstractExecutionStep {
     if (profilingEnabled) {
       result += "" ("" + getCostFormatted() + "")"";
     }
+    if (filterClusterIds != null) {
+      result += ""\n"";
+      result += spaces;
+      result += ""  filter clusters ["";
+      result += Arrays.asList(filterClusterIds).stream().map(x -> """" + x).collect(Collectors.joining("",""));
+      result += ""]"";
+    }
     return result;
   }
 ",Add information to execution plan toString ( ) ( filter clusters on index search ),"""Added filter cluster IDs to GetValueFromIndexEntryStep debug output""","""Added filtering of cluster IDs to GetValueFromIndexEntryStep output""","""Added cluster filter information to GetValueFromIndexEntryStep's toString method""

This commit appears to add a new section to the toString method of the GetValueFromIndexEntryStep class, which displays the filterClusterIds array as a comma-separated list enclosed in square brackets. This change would be useful for debugging or logging purposes, as it provides more information about the state of the object.",Add logging of filterClusterIds to step description in GetValueFromIndexEntryStep.
"diff --git a/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReader.java b/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReader.java
index cf51cc7344..92c3492e21 100644
--- a/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReader.java
+++ b/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReader.java
@@ -28,6 +28,7 @@ import org.apache.avro.file.DataFileReader;
 import org.apache.avro.file.SeekableInput;
 import org.apache.avro.io.DatumReader;
 
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.ReadableByteChannel;
@@ -70,16 +71,20 @@ public class AvroReader<T> extends Reader<WindowedValue<T>> {
   public ReaderIterator<WindowedValue<T>> iterator(DatumReader<T> datumReader) throws IOException {
     IOChannelFactory factory = IOChannelUtils.getFactory(filename);
     Collection<String> inputs = factory.match(filename);
+    if (inputs.isEmpty()) {
+      throw new FileNotFoundException(""No match for file pattern '"" + filename + ""'"");
+    }
 
     if (inputs.size() == 1) {
       String input = inputs.iterator().next();
       ReadableByteChannel reader = factory.open(input);
       return new AvroFileIterator(datumReader, input, reader, startPosition, endPosition);
-
     } else {
       if (startPosition != null || endPosition != null) {
-        throw new UnsupportedOperationException(
-            ""Unable to apply range limits to multiple-input stream: "" + filename);
+        throw new IllegalArgumentException(
+            ""Offset range specified: ["" + startPosition + "", "" + endPosition + ""), so ""
+            + ""an exact filename was expected, but more than 1 file matched \"""" + filename
+            + ""\"" (total "" + inputs.size() + ""): apparently a filepattern was given."");
       }
       return new AvroFileMultiIterator(datumReader, factory, inputs.iterator());
     }
diff --git a/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/FileBasedReader.java b/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/FileBasedReader.java
index d9e8bd2ab0..f55165c4e5 100644
--- a/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/FileBasedReader.java
+++ b/sdk/src/main/java/com/google/cloud/dataflow/sdk/runners/worker/FileBasedReader.java
@@ -35,6 +35,7 @@ import org.slf4j.LoggerFactory;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PushbackInputStream;
@@ -98,13 +99,15 @@ public abstract class FileBasedReader<T> extends Reader<T> {
     IOChannelFactory factory = IOChannelUtils.getFactory(filename);
     Collection<String> inputs = factory.match(filename);
     if (inputs.isEmpty()) {
-      throw new IOException(""No match for file pattern '"" + filename + ""'"");
+      throw new FileNotFoundException(""No match for file pattern '"" + filename + ""'"");
     }
 
     if (startPosition != null || endPosition != null) {
       if (inputs.size() != 1) {
-        throw new UnsupportedOperationException(
-            ""Unable to apply range limits to multiple-input stream: "" + filename);
+        throw new IllegalArgumentException(
+            ""Offset range specified: ["" + startPosition + "", "" + endPosition + ""), so ""
+            + ""an exact filename was expected, but more than 1 file matched \"""" + filename
+            + ""\"" (total "" + inputs.size() + ""): apparently a filepattern was given."");
       }
 
       return newReaderIteratorForRangeInFile(factory, inputs.iterator().next(),
diff --git a/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReaderTest.java b/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReaderTest.java
index d5ea3b8266..957da90ab5 100644
--- a/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReaderTest.java
+++ b/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/AvroReaderTest.java
@@ -31,11 +31,13 @@ import org.apache.avro.io.DatumWriter;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.OutputStream;
 import java.nio.channels.Channels;
 import java.util.ArrayList;
@@ -52,6 +54,8 @@ import javax.annotation.Nullable;
 public class AvroReaderTest {
   @Rule
   public TemporaryFolder tmpFolder = new TemporaryFolder();
+  @Rule
+  public ExpectedException expectedException = ExpectedException.none();
 
   private <T> void runTestRead(
       List<List<T>> elemsList, AvroCoder<T> coder, boolean requireExactMatch) throws Exception {
@@ -179,6 +183,25 @@ public class AvroReaderTest {
         false/* don't require exact match */);
   }
 
+  @Test
+  public void testErrorOnFileNotFound() throws Exception {
+    expectedException.expect(FileNotFoundException.class);
+    readElems(""file-not-found"", 0L, 100L, AvroCoder.of(String.class), new ArrayList<Integer>());
+  }
+
+  @Test
+  public void testErrorOnMultipleFiles() throws Exception {
+    File file1 = tmpFolder.newFile(""foo1.avro"");
+    File file2 = tmpFolder.newFile(""foo2.avro"");
+    Channels.newOutputStream(IOChannelUtils.create(file1.getPath(), MimeTypes.BINARY)).close();
+    Channels.newOutputStream(IOChannelUtils.create(file2.getPath(), MimeTypes.BINARY)).close();
+
+    expectedException.expect(IllegalArgumentException.class);
+    expectedException.expectMessage(""more than 1 file matched"");
+    readElems(new File(tmpFolder.getRoot(), ""*"").getPath(), 0L, 100L,
+        AvroCoder.of(String.class), new ArrayList<Integer>());
+  }
+
   // TODO: sharded filenames
   // TODO: reading from GCS
 }
diff --git a/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/TextReaderTest.java b/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/TextReaderTest.java
index ea7a3e5c37..857f0b66bd 100644
--- a/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/TextReaderTest.java
+++ b/sdk/src/test/java/com/google/cloud/dataflow/sdk/runners/worker/TextReaderTest.java
@@ -38,6 +38,8 @@ import com.google.cloud.dataflow.sdk.coders.TextualIntegerCoder;
 import com.google.cloud.dataflow.sdk.io.TextIO;
 import com.google.cloud.dataflow.sdk.io.TextIO.CompressionType;
 import com.google.cloud.dataflow.sdk.util.CoderUtils;
+import com.google.cloud.dataflow.sdk.util.IOChannelUtils;
+import com.google.cloud.dataflow.sdk.util.MimeTypes;
 import com.google.cloud.dataflow.sdk.util.common.worker.ExecutorTestUtils;
 import com.google.cloud.dataflow.sdk.util.common.worker.Reader;
 
@@ -45,15 +47,18 @@ import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
 import org.hamcrest.Matchers;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintStream;
+import java.nio.channels.Channels;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedList;
@@ -79,6 +84,8 @@ public class TextReaderTest {
 
   @Rule
   public TemporaryFolder tmpFolder = new TemporaryFolder();
+  @Rule
+  public ExpectedException expectedException = ExpectedException.none();
 
   private File initTestFile() throws IOException {
     File tmpFile = tmpFolder.newFile();
@@ -651,6 +658,29 @@ public class TextReaderTest {
     }
   }
 
+  @Test
+  public void testErrorOnFileNotFound() throws Exception {
+    expectedException.expect(FileNotFoundException.class);
+    TextReader<String> textReader = new TextReader<>(
+        ""file-not-found"", true, 0L, 100L,
+        StringUtf8Coder.of(), TextIO.CompressionType.UNCOMPRESSED);
+    textReader.iterator();
+  }
+
+  @Test
+  public void testErrorOnMultipleFiles() throws Exception {
+    File file1 = tmpFolder.newFile(""foo1.avro"");
+    File file2 = tmpFolder.newFile(""foo2.avro"");
+    Channels.newOutputStream(IOChannelUtils.create(file1.getPath(), MimeTypes.BINARY)).close();
+    Channels.newOutputStream(IOChannelUtils.create(file2.getPath(), MimeTypes.BINARY)).close();
+    TextReader<String> textReader = new TextReader<>(
+        new File(tmpFolder.getRoot(), ""*"").getPath(), true, 0L, 100L,
+        StringUtf8Coder.of(), TextIO.CompressionType.UNCOMPRESSED);
+    expectedException.expect(IllegalArgumentException.class);
+    expectedException.expectMessage(""more than 1 file matched"");
+    textReader.iterator();
+  }
+
   // TODO: sharded filenames
   // TODO: reading from GCS
 }",Improves error messages in AvroReader and FileBasedReader when filepattern matches .,"""Improve error handling for file-based readers: throw FileNotFoundException when file not found and IllegalArgumentException when multiple files match a pattern.""","""Improved error handling for file not found and multiple file matches in Avro and Text readers""

Or, if you want to follow the conventional commit message format:

""fix: improved error handling for file not found and multiple file matches in Avro and Text readers""

This commit message accurately reflects the changes made in the code, which include:

* Adding `FileNotFoundException` to handle cases where a file is not found
* Improving error messages for cases where multiple files match a pattern
* Adding test cases to cover these scenarios

The commit message is concise and clear, making it easy for others to understand the purpose of the commit.","""Update AvroReader and FileBasedReader to throw FileNotFoundException and add tests for file not found and multiple files""

Explanation:

* In AvroReader.java and FileBasedReader.java, the code has been updated to throw FileNotFoundException instead of IOException when no match for the file pattern is found.
* In AvroReaderTest.java and TextReaderTest.java, new tests have been added to check for the FileNotFoundException when the file is not found and for IllegalArgumentException when multiple files match the file pattern but an exact filename was expected.
* Additionally, in FileBasedReader.java, the code has been updated to throw IllegalArgumentException when an offset range is specified but more than one file matches the file pattern. This is checked for in the new test added to TextReaderTest.java.",Add detailed exception handling for file not found and multiple file matches in AvroReader and FileBasedReader.
"diff --git a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
index 7007f5522e9..27f92067323 100644
--- a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
+++ b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
@@ -323,15 +323,27 @@ public class Main {
          * @return  the index of the colon to split at
          */
         private int getSourceFunctionSplitIndex(Path sourceRootPath, String programArg) {
-            int indexOfColon = programArg.indexOf(COLON);
-            while (indexOfColon != -1) {
-                String potentialPath = programArg.substring(0, indexOfColon);
+            String[] programArgConstituents = programArg.split(COLON);
+            int index = programArgConstituents.length - 1;
+
+            String potentialFunction = programArgConstituents[index];
+            String potentialPath = programArg.replace(COLON.concat(potentialFunction), """");
+            if (Files.exists(sourceRootPath.resolve(potentialPath))) {
+                return potentialPath.length();
+            }
+            index--;
+
+            while (index != -1) {
+                potentialFunction = programArgConstituents[index].concat(COLON).concat(potentialFunction);
+                potentialPath = programArg.replace(COLON.concat(potentialFunction), """");
+
                 if (Files.exists(sourceRootPath.resolve(potentialPath))) {
-                    return indexOfColon;
+                    return potentialPath.length();
                 }
-                indexOfColon = programArg.indexOf(COLON, indexOfColon + 1);
+
+                index--;
             }
-            return indexOfColon;
+            return index;
         }
     }
 
diff --git a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalRunFunctionNegativeTestCase.java b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalRunFunctionNegativeTestCase.java
index dddf1fae665..9678c8a6d12 100644
--- a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalRunFunctionNegativeTestCase.java
+++ b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalRunFunctionNegativeTestCase.java
@@ -40,9 +40,9 @@ public class BalRunFunctionNegativeTestCase extends BaseTest {
     private String sourceRootPath = ""src/test/resources/run/file/"";
 
     @Test
-    public void testEmptyEntryFunctionName() throws BallerinaTestException {
+    public void testInvalidSourceArg() throws BallerinaTestException {
         String sourceArg = (new File(sourceRootPath + ""test_entry_function.bal"")).getAbsolutePath() + "":"";
-        LogLeecher errLogLeecher = new LogLeecher(""ballerina: expected function name after final ':'"",
+        LogLeecher errLogLeecher = new LogLeecher(""error: no ballerina source files found in module "" + sourceArg,
                 LeecherType.ERROR);
         balClient.runMain(sourceArg, new LogLeecher[]{errLogLeecher});
         errLogLeecher.waitForText(2000);
diff --git a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalxRunFunctionNegativeTestCase.java b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalxRunFunctionNegativeTestCase.java
index ae477da102b..7b2b5b84aa7 100644
--- a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalxRunFunctionNegativeTestCase.java
+++ b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/BalxRunFunctionNegativeTestCase.java
@@ -65,10 +65,10 @@ public class BalxRunFunctionNegativeTestCase extends BaseTest {
     }
 
     @Test
-    public void testEmptyEntryFunctionName() throws BallerinaTestException {
+    public void testInvalidSourceArg() throws BallerinaTestException {
         String sourceArg = balxPath + "":"";
-        LogLeecher errLogLeecher = new LogLeecher(""ballerina: expected function name after final ':'"",
-                LeecherType.ERROR);
+        LogLeecher errLogLeecher = new LogLeecher(""error: no ballerina source files found in module "" + balxPath +
+                                                          "":"", LeecherType.ERROR);
         balClient.runMain(sourceArg, new LogLeecher[]{errLogLeecher});
         errLogLeecher.waitForText(2000);
     }
diff --git a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/PkgRunFunctionNegativeTestCase.java b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/PkgRunFunctionNegativeTestCase.java
index bc0f716f050..3db4fbed311 100644
--- a/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/PkgRunFunctionNegativeTestCase.java
+++ b/tests/ballerina-tools-integration-test/src/test/java/org/ballerinalang/test/run/PkgRunFunctionNegativeTestCase.java
@@ -40,10 +40,10 @@ public class PkgRunFunctionNegativeTestCase extends BaseTest {
     private String sourceRoot = (new File(""src/test/resources/run/package/"")).getAbsolutePath();
 
     @Test
-    public void testEmptyEntryFunctionName() throws BallerinaTestException {
+    public void testInvalidSourceArg() throws BallerinaTestException {
         String sourceArg = ""entry:"";
-        LogLeecher errLogLeecher = new LogLeecher(""ballerina: expected function name after final ':'"",
-                LeecherType.ERROR);
+        LogLeecher errLogLeecher = new LogLeecher(""error: no ballerina source files found in module "" +
+                   ",Improve split index identification,"""Fix source function split index logic and update test cases for invalid source args""","""Improve handling of invalid source arguments in Ballerina launcher and tests""","""Update Main.java and negative test cases for Ballerina launcher""

Explanation:
The changes in Main.java modify the logic for finding the split index in the program argument that contains the source path and function name. The changes in the negative test cases update the expected error messages for invalid source arguments.",Fix getSourceFunctionSplitIndex method and update test cases for handling invalid source arguments.
"diff --git a/jdk/src/java.desktop/share/classes/javax/swing/text/html/HTMLDocument.java b/jdk/src/java.desktop/share/classes/javax/swing/text/html/HTMLDocument.java
index 1166f569728..a981e87f304 100644
--- a/jdk/src/java.desktop/share/classes/javax/swing/text/html/HTMLDocument.java
+++ b/jdk/src/java.desktop/share/classes/javax/swing/text/html/HTMLDocument.java
@@ -1400,8 +1400,13 @@ public void insertAfterEnd(Element elem, String htmlText) throws
             Element parent = elem.getParentElement();
 
             if (parent != null) {
+                // If we are going to insert the string into the body
+                // section, it is necessary to set the corrsponding flag.
+                if (HTML.Tag.BODY.name.equals(parent.getName())) {
+                    insertInBody = true;
+                }
                 int offset = elem.getEndOffset();
-                if (offset > getLength()) {
+                if (offset > (getLength() + 1)) {
                     offset--;
                 }
                 else if (elem.isLeaf() && getText(offset - 1, 1).
@@ -1409,6 +1414,10 @@ else if (elem.isLeaf() && getText(offset - 1, 1).
                     offset--;
                 }
                 insertHTML(parent, offset, htmlText, false);
+                // Cleanup the flag, if any.
+                if (insertInBody) {
+                    insertInBody = false;
+                }
             }
         }
     }
@@ -1846,6 +1855,11 @@ String getBaseTarget() {
 
     private static char[] NEWLINE;
 
+    /**
+     * Indicates that direct insertion to body section takes place.
+     */
+    private boolean insertInBody = false;
+
     /**
      * I18N property key.
      *
@@ -2610,7 +2624,9 @@ public void handleText(char[] data, int pos) {
                     // Assume content should be added.
                     foundInsertTag(false);
                     foundInsertTag = true;
-                    inParagraph = impliedP = true;
+                    // If content is added directly to the body, it should
+                    // be wrapped by p-implied.
+                    inParagraph = impliedP = !insertInBody;
                 }
                 if (data.length >= 1) {
                     addContent(data, 0, data.length);
diff --git a/jdk/test/javax/swing/text/html/HTMLDocument/8058120/bug8058120.java b/jdk/test/javax/swing/text/html/HTMLDocument/8058120/bug8058120.java
new file mode 100644
index 00000000000..2378fd2e334
--- /dev/null
+++ b/jdk/test/javax/swing/text/html/HTMLDocument/8058120/bug8058120.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/* @test
+ * @bug 8058120
+ * @summary Rendering / caret errors with HTMLDocument
+ * @author Dmitry Markov
+ * @run main bug8058120
+ */
+
+import sun.awt.SunToolkit;
+
+import javax.swing.*;
+import javax.swing.text.Element;
+import javax.swing.text.html.HTML;
+import javax.swing.text.html.HTMLDocument;
+import javax.swing.text.html.HTMLEditorKit;
+import java.awt.*;
+
+public class bug8058120 {
+    private static SunToolkit toolkit = (SunToolkit) Toolkit.getDefaultToolkit();
+    private static HTMLDocument document = null;
+    private static final String text = ""<p id = 'ab'>ab</p>"";
+    private static final String textToInsert = ""c"";
+
+    public static void main(String[] args) {
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                createAndShowGUI();
+            }
+        });
+
+        toolkit.realSync();
+
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    document.insertAfterEnd(document.getElement(""ab""), textToInsert);
+                } catch (Exception ex) {
+                    throw new RuntimeException(ex);
+                }
+            }
+        });
+
+        toolkit.realSync();
+
+        SwingUtilities.invokeLater(new Runnable() {
+            @Override
+            public void run() {
+                Element parent = document.getElement(""ab"").getParentElement();
+                int count = parent.getElementCount();
+                if (count != 2) {
+                    throw new RuntimeException(""Test Failed! Unexpected Element count = ""+count);
+                }
+         ",Rendering / caret errors with HTMLDocument .,"""Fix for Bug 8058120: Rendering / caret errors with HTMLDocument""","""Fix rendering and caret errors with HTMLDocument by introducing a flag to track direct insertion into the body section.""","""Fixed rendering/caret errors with HTMLDocument in Swing (#8058120)""

This commit appears to address an issue with the `HTMLDocument` class in the Swing library, specifically related to inserting text into the body of an HTML document. The changes include adding a new flag `insertInBody` to track whether an insertion is happening directly in the body section, and updating the `handleText()` method to properly handle this case.

Additionally, a new test file has been added to verify the correct behavior of the `insertAfterEnd()` method when inserting content directly into the body of an HTML document. This test checks that the number of elements in the parent of the target element is correct after the insertion.

Based on these changes, a suitable commit message might be ""Fixed rendering/caret errors with HTMLDocument in Swing (#8058120)"". This message indicates that the commit is addressing a specific issue (#8058120) and provides a brief summary of the changes.",Fix rendering and caret errors by setting flag for direct body insertion and appropriately handling implied paragraph wrapping in HTMLDocument.
"diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
index 9a8107208..6f1871557 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
@@ -533,7 +533,7 @@ public abstract class BeanPropertyMap
             // and allocate enough to contain primary/secondary, expand for spillovers as need be
             int alloc = size + (size>>1);
             String[] keys = new String[alloc];
-            SettableBeanProperty[] fieldHash = new SettableBeanProperty[alloc];
+            SettableBeanProperty[] propHash = new SettableBeanProperty[alloc];
             int spills = 0;
 
             for (SettableBeanProperty prop : props) {
@@ -555,15 +555,21 @@ public abstract class BeanPropertyMap
                         ++spills;
                         if (slot >= keys.length) {
                             keys = Arrays.copyOf(keys, keys.length + 4);
-                            fieldHash = Arrays.copyOf(fieldHash, fieldHash.length + 4);
+                            propHash = Arrays.copyOf(propHash, propHash.length + 4);
                         }
                     }
                 }
+//System.err.println("" add '""+key+"" at #""+slot+"" (hashed at ""+(key.hashCode() & _hashMask)+"")"");             
                 keys[slot] = key;
-                fieldHash[slot] = prop;
+                propHash[slot] = prop;
             }
+/*
+for (int i = 0; i < keys.length; ++i) {
+    System.err.printf(""#%02d: %s\n"", i, (keys[i] == null) ? ""-"" : keys[i]);
+}
+*/
             _keys = keys;
-            _propsHash = fieldHash;
+            _propsHash = propHash;
             _spillCount = spills;
         }
 
@@ -620,14 +626,15 @@ public abstract class BeanPropertyMap
             // If not, append
 
             int slot = key.hashCode() & _hashMask;
+            int hashSize = _hashMask+1;
 
             // primary slot not free?
             if (_keys[slot] != null) {
                 // secondary?
-                slot = _size + (slot >> 1);
+                slot = hashSize + (slot >> 1);
                 if (_keys[slot] != null) {
                     // ok, spill over.
-                    slot = _size + (_size >> 1) + _spillCount;
+            ",Fix the remaining problems with new BeanPropertyMap impl,"""Refactor BeanPropertyMap to use consistent variable naming""","""Renamed fieldHash to propHash in BeanPropertyMap to better reflect its purpose.""","""Fixed array index calculation for spillovers in BeanPropertyMap""

Explanation:
The change in the code is related to how the index for the spillover properties is calculated. In the original code, the index was calculated as `_size + (_size >> 1) + _spillCount`, but this could lead to incorrect index values if `_size` and `_spillCount` are not properly synchronized.

The updated code calculates the index as `hashSize + (slot >> 1)`, where `hashSize` is `_hashMask + 1`. This ensures that the index is always within the bounds of the `_propsHash` array, and avoids potential `ArrayIndexOutOfBoundsException`.

The comment at the end of the code seems to be a debugging print statement that was left in by mistake, and should be removed in the final commit.",Refactor variable names in `assign` method and fix hash slot calculations in `BeanPropertyMap.java`.
"diff --git a/src/main/java/com/owncloud/android/db/ProviderMeta.java b/src/main/java/com/owncloud/android/db/ProviderMeta.java
index ce29ce0619..e7e6d11c64 100644
--- a/src/main/java/com/owncloud/android/db/ProviderMeta.java
+++ b/src/main/java/com/owncloud/android/db/ProviderMeta.java
@@ -35,7 +35,7 @@ import java.util.List;
  */
 public class ProviderMeta {
     public static final String DB_NAME = ""filelist"";
-    public static final int DB_VERSION = 60;
+    public static final int DB_VERSION = 61;
 
     private ProviderMeta() {
         // No instance
diff --git a/src/main/java/com/owncloud/android/providers/FileContentProvider.java b/src/main/java/com/owncloud/android/providers/FileContentProvider.java
index 2a54561626..c11c73c555 100644
--- a/src/main/java/com/owncloud/android/providers/FileContentProvider.java
+++ b/src/main/java/com/owncloud/android/providers/FileContentProvider.java
@@ -2288,6 +2288,23 @@ public class FileContentProvider extends ContentProvider {
             if (!upgraded) {
                 Log_OC.i(SQL, String.format(Locale.ENGLISH, UPGRADE_VERSION_MSG, oldVersion, newVersion));
             }
+
+            if (oldVersion < 61 && newVersion >= 61) {
+                Log_OC.i(SQL, ""Entering in the #61 reset eTag to force capability refresh"");
+                db.beginTransaction();
+                try {
+                    db.execSQL(""UPDATE capabilities SET etag = '' WHERE 1=1"");
+
+                    upgraded = true;
+                    db.setTransactionSuccessful();
+                } finally {
+                    db.endTransaction();
+            ","Reset eTag so that capability get parsed again , so status is set .","""Bump database version to 61 and reset eTag to force capability refresh""","""Update database version to 61 and reset etag for capabilities on upgrade""","""Bump database version to 61 and reset eTag to force capability refresh""

Explanation:
The first change is in the file `ProviderMeta.java`, where the database version is increased from 60 to 61. The second change is in the file `FileContentProvider.java`, where a new block of code is added to reset the eTag for all capabilities when upgrading from a database version lower than 61 to 61 or higher. The purpose of this change is to force a refresh of the capabilities. Therefore, a suitable commit message would be ""Bump database version to 61 and reset eTag to force capability refresh"".",Increase database version to 61 and reset eTag in capabilities to force capability refresh.
"diff --git a/sdks/python/container/base_image_requirements.txt b/sdks/python/container/base_image_requirements.txt
index 49375dc31e..f3d9b86221 100644
--- a/sdks/python/container/base_image_requirements.txt
+++ b/sdks/python/container/base_image_requirements.txt
@@ -73,3 +73,4 @@ pymongo==3.9.0
 # Packages needed for testing.
 tenacity>=5.0.2
 pyhamcrest<2.0,>=1.9
+nose==1.3.7
diff --git a/sdks/python/container/license_scripts/dep_urls_py.yaml b/sdks/python/container/license_scripts/dep_urls_py.yaml
index 473674e7a9..4a2b6f3557 100644
--- a/sdks/python/container/license_scripts/dep_urls_py.yaml
+++ b/sdks/python/container/license_scripts/dep_urls_py.yaml
@@ -79,6 +79,8 @@ pip_dependencies:
     license: ""https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt""
   monotonic:
     license: ""https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE""
+  nose:
+      license: ""https://raw.githubusercontent.com/nose-devs/nose/master/lgpl.txt""
   numpy:
     license: ""https://raw.githubusercontent.com/numpy/numpy/master/LICENSE.txt""
   oauth2client:",Adds nose back under packages needed for testing .,"""Added nose 1.3.7 as a testing dependency""",Added nose to base image requirements and updated license information in dep_urls_py.yaml.,"The diff you provided suggests that the following changes have been made:

1. In the file `base_image_requirements.txt`, the package `nose==1.3.7` has been added to the list of dependencies.

2. In the file `dep_urls_py.yaml`, a new entry for `nose` has been added under `pip_dependencies`, with a link to its license.

Based on these changes, a suitable commit message could be:

""Added nose package and its license to base image requirements and dependency URLs respectively.""",Add 'nose' package to base_image_requirements.txt and its license URL to dep_urls_py.yaml for testing purposes.
"diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java
index e1a8041818..e5df2ec2d7 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/tez/TezSessionState.java
@@ -315,7 +315,12 @@ private void openInternal(
       FutureTask<TezClient> sessionFuture = new FutureTask<>(new Callable<TezClient>() {
         @Override
         public TezClient call() throws Exception {
-          return startSessionAndContainers(session, conf, commonLocalResources, tezConfig, true);
+          try {
+            return startSessionAndContainers(session, conf, commonLocalResources, tezConfig, true);
+          } catch (Throwable t) {
+            LOG.error(""Failed to start Tez session"", t);
+            throw (t instanceof Exception) ? (Exception)t : new Exception(t);
+          }
         }
       });
       new Thread(sessionFuture, ""Tez session start thread"").start();
@@ -341,9 +346,7 @@ private TezClient startSessionAndContainers(TezClient session, HiveConf conf,
           session.preWarm(prewarmVertex);
         } catch (IOException ie) {
           if (!isOnThread && ie.getMessage().contains(""Interrupted while waiting"")) {
-            if (LOG.isDebugEnabled()) {
-              LOG.debug(""Hive Prewarm threw an exception "", ie);
-            }
+            LOG.warn(""Hive Prewarm threw an exception "", ie);
           } else {
             throw ie;
           }
@@ -483,11 +486,14 @@ public TezClient getSession() {
       try {
         session = sessionFuture.get();
       } catch (InterruptedException e) {
+        console.printInfo(""Interrupted while waiting for the session"");
         Thread.currentThread().interrupt();
         return null;
       } catch (ExecutionException e) {
+        console.printInfo(""Failed to get session"");
  ","add better logging for Tez session creation thread failures ( Sergey Shelukhin , reviewed by Siddharth Seth )","""Improve Tez session start error handling and logging""","""Improved error handling and logging in TezSessionState""","""Add error handling and logging to TezSessionState""

Explanation:

* The first change adds error handling and logging to the `call()` method of the `FutureTask` used to start a Tez session. If an exception is thrown while starting the session, it is logged and re-thrown as an `Exception`.
* The second change updates the log level for a specific exception thrown while pre-warming a Tez session from `DEBUG` to `WARN`.
* The third change adds console logging to the `getSession()` method to indicate when an interruption or execution exception occurs while waiting for the session to start.

These changes improve the robustness and diagnostic capabilities of the TezSessionState class.",Improve exception handling and logging in TezSessionState to provide clearer error messages and session startup feedback.
"diff --git a/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/MetaUtil.java b/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/MetaUtil.java
index 7c3cc504fb3..bd82d5a26b2 100644
--- a/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/MetaUtil.java
+++ b/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/MetaUtil.java
@@ -36,15 +36,6 @@ import com.oracle.graal.api.meta.ProfilingInfo.ExceptionSeen;
  */
 public class MetaUtil {
 
-    /**
-     * Returns true if the specified typed is exactly the type {@link java.lang.Object}.
-     */
-    public static boolean isJavaLangObject(ResolvedJavaType type) {
-        boolean result = type.getSuperclass() == null && !type.isInterface() && type.getKind() == Kind.Object;
-        assert result == type.getName().equals(""Ljava/lang/Object;"") : type.getName();
-        return result;
-    }
-
     /**
      * Gets the {@link Class} mirror for a given resolved type.
      *
diff --git a/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotRuntime.java b/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotRuntime.java
index 433505c2214..cd2723b89a2 100644
--- a/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotRuntime.java
+++ b/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotRuntime.java
@@ -491,7 +491,7 @@ public abstract class HotSpotRuntime implements GraalCodeCacheProvider {
                 ResolvedJavaType arrayType = array.objectStamp().type();
                 if (arrayType != null && array.objectStamp().isExactType()) {
                     ResolvedJavaType elementType = arrayType.getComponentType();
-                    if (!MetaUtil.isJavaLangObject(elementType)) {
+                    if (!elementType.isClass(Object.class)) {
                         CheckCastNode checkcast = graph.add(new CheckCastNode(elementType, value, null));
                         graph.addBeforeFixed(storeIndexed, checkcast);
                         value = checkcast;
diff --git a/graal/com.oracle.graal.java/src/com/oracle/graal/java/BciBlockMapping.java b/graal/com.oracle.graal.java/src/com/oracle/graal/java/BciBlockMapping.java
index 953c8b957b7..eaa49d87a96 100644
--- a/graal/com.oracle.graal.java/src/com/oracle/graal/java/BciBlockMapping.java
+++ b/graal/com.oracle.graal.java/src/com/oracle/graal/java/BciBlockMapping.java
@@ -762,7 +762,7 @@ public final class BciBlockMapping {
         while (stream.currentBCI() <= block.endBci) {
             switch (stream.currentBC()) {
                 case RETURN:
-                    if (method.isConstructor() && MetaUtil.isJavaLangObject(method.getDeclaringClass())) {
+                    if (method.isConstructor() && method.getDeclaringClass().isClass(Object.class)) {
                         // return from Object.init implicitly registers a finalizer
                         // for the receiver if needed, so keep it alive.
                         loadOne(block, 0);
diff --git a/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java b/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
index 080ad261bc6..e039d4a84a6 100644
--- a/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
+++ b/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
@@ -1363,7 +1363,7 @@ public final class GraphBuilderPhase extends Phase {
     }
 
     private void createReturn() {
-        if (method.isConstructor() && MetaUtil.isJavaLangObject(method.getDeclaringClass())) {
+        if (method.isConstructor() && method.getDeclaringClass().isClass(Object.class)) {
             callRegisterFinalizer();
         }
         Kind returnKind = method.getSignature().getReturnKind().getStackKind();",replaced MetaUtil . isJavaLangObject ( ) with type . isClass ( Object . class ),"""Remove MetaUtil.isJavaLangObject and replace with ResolvedJavaType.isClass(Object.class)""","""Replace `isJavaLangObject` with `isClass(Object.class)` for consistency and clarity""","""Refactor MetaUtil.isJavaLangObject usage and update HotSpotRuntime, BciBlockMapping, and GraphBuilderPhase""

This commit removes the `MetaUtil.isJavaLangObject` method and replaces its usage in `HotSpotRuntime`, `BciBlockMapping`, and `GraphBuilderPhase` with direct checks for the `Object` class using `isClass(Object.class)` or `getDeclaringClass().isClass(Object.class)`.

In `HotSpotRuntime`, the change is made in the `injectStoreCheckCast` method. In `BciBlockMapping`, the change is made in the `findLiveLocals` method. In `GraphBuilderPhase`, the change is made in the `createReturn` method.

The changes simplify the code by removing the need for a separate utility method and make the intent clearer by directly checking for the `Object` class.",Refactored to remove MetaUtil.isJavaLangObject and replace with method.getDeclaringClass().isClass(Object.class).
"diff --git a/fastlane/Screengrabfile b/fastlane/Screengrabfile
index 90eed4ba79..c2e6ab1869 100644
--- a/fastlane/Screengrabfile
+++ b/fastlane/Screengrabfile
@@ -1,8 +1,8 @@
 app_package_name 'com.nextcloud.client'
 use_tests_in_packages ['com.owncloud.android.screenshots']
 
-app_apk_path 'build/outputs/apk/generic/debug/android-generic-debug.apk'
-tests_apk_path 'build/outputs/apk/androidTest/generic/debug/android-generic-debug-androidTest.apk'
+app_apk_path 'build/outputs/apk/generic/debug/android2-generic-debug.apk'
+tests_apk_path 'build/outputs/apk/androidTest/generic/debug/android2-generic-debug-androidTest.apk'
 
 # locales ['en-US']
 locales ['en-US', 'de-DE', 'en-GB', 'fr-FR', 'it-IT', 'pt-BR', 'pt-PT', 'sv-SE', 'sq-AL', 'sq-MK', 'iw-IL', 'ar-AR', 'bg-BG', 'da-DK', 'fi-FI', 'gl-ES', 'hu-HU', 'tr-TR', 'uk-UK', 'vi-VI', 'ro-RO', 'ru-RU', 'sr-SR', 'pl-PL', 'el-GR', 'ko-KR', 'nl-NL', 'ja-JP', 'no-NO', 'eu-ES', 'lt-LT', 'es-ES', 'es-419', 'zh-HK', 'zk-CN', 'is-IS', 'sr-SR', 'id-ID', 'cs-CZ', 'sl-SL', 'fa-FA' ]
diff --git a/scripts/screenshots/addMockDevice.sh b/scripts/screenshots/addMockDevice.sh
index d4bb0e0ab5..892ee7f14e 100755
--- a/scripts/screenshots/addMockDevice.sh
+++ b/scripts/screenshots/addMockDevice.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 cd scripts/screenshots/
 for i in $(find ../../fastlane | grep png) ; do 
@@ -12,13 +12,17 @@ for i in $(find ../../fastlane | grep png) ; do
             locale=""""
             ;;
         *)
-            locale=""-""+$locale
+            locale=""-""$locale
     esac
     
-    text=$(grep $textID ../../src/main/res/values$locale/strings.xml | cut -d"">"" -f2 | cut -d""<"" -f1 | sed s'#\&amp;#\\&#')
+    if [ -e ../../src/main/res/values$locale/strings.xml ] ; then
+        text=$(grep $textID ../../src/main/res/values$locale/strings.xml | cut -d"">"" -f2 | cut -d""<"" -f1 | sed s'#\&amp;#\\&#')
+    else
+        text=""""
+    fi
     
     # fallback to english if there is not translation
-    if [ $text == """" ]; then
+    if [ -n $text ]; then
         text=$(grep $textID ../../src/main/res/values/strings.xml | cut -d"">"" -f2 | cut -d""<"" -f1 | sed s'#\&amp;#\\&#')
     fi
     ",handling support if language does not exists,"""Update Screengrabfile and addMockDevice.sh for Android 2 screenshots""","""Update Screengrabfile and addMockDevice.sh for Android 2 support""","Updated Screengrabfile and addMockDevice.sh

 In Screengrabfile, the app and tests apk paths have been updated to reference 'android2' instead of 'android'.

 In addMockDevice.sh, the script has been changed to use bash instead of sh, and a check has been added to verify if the locale file exists before attempting to extract the translated text. If the file does not exist, the script will now set the text to an empty string instead of trying to extract it. Additionally, the script now checks if the text is not empty before attempting to fall back to English.","Update APK paths, change script to use bash, and improve locale handling for screenshots."
"diff --git a/spring-cloud/spring-cloud-zuul-throttling/src/main/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingController.java b/spring-cloud/spring-cloud-zuul-throttling/src/main/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingController.java
index ed380d17ea..4a27324b4d 100644
--- a/spring-cloud/spring-cloud-zuul-throttling/src/main/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingController.java
+++ b/spring-cloud/spring-cloud-zuul-throttling/src/main/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingController.java
@@ -11,13 +11,16 @@ import org.springframework.web.bind.annotation.RequestMapping;
 @RequestMapping(""/greeting"")
 public class GreetingController {
 
+  public static final String SIMPLE_RESPONSE = ""Hi!"";
+  public static final String ADVANCED_RESPONSE = ""Hello, how you doing?"";
+
   @GetMapping(""/simple"")
   public ResponseEntity<String> serviceA() {
-    return ResponseEntity.ok(""Hi!"");
+    return ResponseEntity.ok(SIMPLE_RESPONSE);
   }
 
   @GetMapping(""/advanced"")
   public ResponseEntity<String> serviceB() {
-    return ResponseEntity.ok(""Hello, how you doing?"");
+    return ResponseEntity.ok(ADVANCED_RESPONSE);
   }
 }
diff --git a/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/ZuulRatelimitDemoApplicationTests.java b/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/ZuulRatelimitDemoApplicationTests.java
deleted file mode 100644
index 134d400b21..0000000000
--- a/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/ZuulRatelimitDemoApplicationTests.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.baeldung.spring.cloud.zuulratelimitdemo;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.context.junit4.SpringRunner;
-
-@RunWith(SpringRunner.class)
-@SpringBootTest
-public class ZuulRatelimitDemoApplicationTests {
-
-	@Test
-	public void contextLoads() {
-	}
-
-}
diff --git a/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingControllerTest.java b/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingControllerTest.java
new file mode 100644
index 0000000000..6b6dba1704
--- /dev/null
+++ b/spring-cloud/spring-cloud-zuul-throttling/src/test/java/com/baeldung/spring/cloud/zuulratelimitdemo/controller/GreetingControllerTest.java
@@ -0,0 +1,98 @@
+package com.baeldung.spring.cloud.zuulratelimitdemo.controller;
+
+import static com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitConstants.HEADER_LIMIT;
+import static com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitConstants.HEADER_QUOTA;
+import static com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitConstants.HEADER_REMAINING;
+import static com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitConstants.HEADER_REMAINING_QUOTA;
+import static com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitConstants.HEADER_RESET;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.springframework.http.HttpStatus.OK;
+import static org.springframework.http.HttpStatus.TOO_MANY_REQUESTS;
+
+import java.util.concurrent.TimeUnit;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.client.TestRestTemplate;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.ResponseEntity;
+import org.springframework.test.context.junit4.SpringRunner;
+
+@AutoConfigureTestDatabase
+@RunWith(SpringRunner.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+public class GreetingControllerTest {
+
+  private static final String SIMPLE_GREETING = ""/greeting/simple"";
+  private static final String ADVANCED_GREETING = ""/greeting/advanced"";
+
+  @Autowired
+  private TestRestTemplate restTemplate;
+
+  @Test
+  public void testNotExceedingCapacityRequest() {
+    ResponseEntity<String> response = this.restTemplate.getForEntity(SIMPLE_GREETING, String.class);
+    HttpHeaders headers = response.getHeaders();
+    String key = ""rate-limit-application_serviceSimple_127.0.0.1"";
+    assertHeaders(headers, key, false, false);
+    assertEquals(OK, response.getStatusCode());
+  }
+
+  @Test
+  public void testExceedingCapacity() throws InterruptedException {
+    ResponseEntity<String> response = this.restTemplate
+        .getForEntity(ADVANCED_GREETING, String.class);
+    HttpHeaders headers = response.getHeaders();
+    String key = ""rate-limit-application_serviceAdvanced_127.0.0.1"";
+    assertHeaders(headers, key, false, false);
+    assertEquals(OK, response.getStatusCode());
+
+    for (int i = 0; i < 2; i++) {
+      response = this.restTemplate.getForEntity(ADVANCED_GREETING, String.class);
+    }
+
+    assertEquals(TOO_MANY_REQUESTS, response.getStatusCode());
+    assertNotEquals(GreetingController.ADVANCED_RESPONSE, response.getBody());
+
+    TimeUnit.SECONDS.sleep(2);
+
+    response = this.restTemplate.getForEntity(ADVANCED_GREETING, String.class);
+    headers = response.getHeaders();
+    assertHeaders(headers, key, false, false);
+    assertEquals(OK, response.getStatusCode());
+  }
+
+  private void assertHeaders(HttpHeaders headers, String key, boolean nullable,
+      boolean quotaHeaders) {
+    String quota = headers.getFirst(HEADER_QUOTA + key);
+    String remainingQuota = headers.getFirst(HEADER_REMAINING_QUOTA + key);
+    String limit = headers.getFirst(HEADER_LIMIT + key);
+    String remaining = headers.getFirst(HEADER_REMAINING + key);
+    String reset = headers.getFirst(HEADER_RESET + key);
+
+    if (nullable) {
+      if (quotaHeaders) {
+        assertNull(quota);
+        assertNull(remainingQuota);
+      } else {
+        assertNull(limit);
+        assertNull(remaining);
+      }
+      assertNull(reset);
+    } else {
+      if (quotaHeaders) {
+        assertNotNull(quota);
+        assertNotNull(remainingQuota);
+      } else {
+        assertNotNull(limit);
+        assertNotNull(remaining);
+      }
+      assertNotNull(reset);
+    }
+  }
+}",added test,"""Extracted greeting responses into constants and added test for GreetingController with rate limiting""",Added unit tests for GreetingController and refactored its responses to constants.,"""Refactor GreetingController to use constants and add GreetingControllerTest""

Explanation:

* The GreetingController has been refactored to use constants for the response strings. This makes the code more maintainable and easier to understand.
* A new test class GreetingControllerTest has been added. This test class contains two tests: testNotExceedingCapacityRequest and testExceedingCapacity. These tests ensure that the rate limiting functionality is working as expected.
* The ZuulRatelimitDemoApplicationTests class has been removed, as it was an empty test class that did not contain any actual tests. This simplifies the codebase and removes unnecessary code.",Refactor GreetingController responses and add thorough GreetingControllerTest while removing unused ZuulRatelimitDemoApplicationTests.
"diff --git a/core/src/main/java/org/springframework/security/config/ConfigUtils.java b/core/src/main/java/org/springframework/security/config/ConfigUtils.java
new file mode 100644
index 0000000000..67d8ee1fe1
--- /dev/null
+++ b/core/src/main/java/org/springframework/security/config/ConfigUtils.java
@@ -0,0 +1,78 @@
+package org.springframework.security.config;
+
+import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionBuilder;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
+import org.springframework.security.AccessDecisionManager;
+import org.springframework.security.AuthenticationManager;
+import org.springframework.security.vote.AffirmativeBased;
+import org.springframework.security.vote.AuthenticatedVoter;
+import org.springframework.security.vote.RoleVoter;
+import org.springframework.util.Assert;
+
+import java.util.Arrays;
+import java.util.Map;
+
+/**
+ * @author Luke Taylor
+ * @version $Id$
+ */
+public abstract class ConfigUtils {
+    public static final String DEFAULT_ACCESS_MANAGER_ID = ""_accessManager"";
+
+    static void registerAccessManagerIfNecessary(ConfigurableListableBeanFactory bf) {
+        if (bf.getBeanNamesForType(AccessDecisionManager.class).length > 0) {
+            return;
+        }
+
+        Assert.isInstanceOf(BeanDefinitionRegistry.class, bf, "" Auto-registration of default AccessManager will only work "" +
+                ""with a BeanFactory which implements BeanDefinitionRegistry"");
+
+        BeanDefinitionRegistry registry = (BeanDefinitionRegistry)bf;
+
+        if (!registry.containsBeanDefinition(DEFAULT_ACCESS_MANAGER_ID)) {
+            BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder.rootBeanDefinition(AffirmativeBased.class);
+            accessMgrBuilder.addPropertyValue(""decisionVoters"",
+                            Arrays.asList(new Object[] {new RoleVoter(), new AuthenticatedVoter()}));    
+            BeanDefinition accessMgr = accessMgrBuilder.getBeanDefinition();
+
+            registry.registerBeanDefinition(DEFAULT_ACCESS_MANAGER_ID, accessMgr);
+        }
+    }
+
+    static AuthenticationManager getAuthenticationManager(ConfigurableListableBeanFactory bf) {
+        Map authManagers = bf.getBeansOfType(AuthenticationManager.class);
+
+        if (authManagers.size() == 0) {
+            throw new IllegalArgumentException(""No AuthenticationManager registered. "" +
+                    ""Make sure you have configured at least one AuthenticationProvider?"");
+
+        } else if (authManagers.size() > 1) {
+            throw new IllegalArgumentException(""More than one AuthenticationManager registered."");
+        }
+
+        AuthenticationManager accessMgr = (AuthenticationManager) authManagers.values().toArray()[0];
+
+        return accessMgr;
+    }
+
+    static void configureSecurityInterceptor(ConfigurableListableBeanFactory beanFactory,
+            BeanDefinition securityInterceptor) {
+        
+        ConfigUtils.registerAccessManagerIfNecessary(beanFactory);
+
+        Map accessManagers = beanFactory.getBeansOfType(AccessDecisionManager.class);
+
+        if (accessManagers.size() > 1) {
+            throw new IllegalArgumentException(""More than one AccessDecisionManager registered. Please specify one "" +
+                    ""  using the TODO attribute."");
+        }
+
+        AccessDecisionManager accessMgr = (AccessDecisionManager) accessManagers.values().toArray()[0];
+
+        securityInterceptor.getPropertyValues().addPropertyValue(""accessDecisionManager"", accessMgr);
+        securityInterceptor.getPropertyValues().addPropertyValue(""authenticationManager"",
+                getAuthenticationManager(beanFactory));
+    }
+}
diff --git a/core/src/main/java/org/springframework/security/config/HttpSecurityBeanDefinitionParser.java b/core/src/main/java/org/springframework/security/config/HttpSecurityBeanDefinitionParser.java
index e323af7a14..464314dd55 100644
--- a/core/src/main/java/org/springframework/security/config/HttpSecurityBeanDefinitionParser.java
+++ b/core/src/main/java/org/springframework/security/config/HttpSecurityBeanDefinitionParser.java
@@ -88,7 +88,7 @@ public class HttpSecurityBeanDefinitionParser implements BeanDefinitionParser {
         filterSecurityInterceptorBuilder.addPropertyValue(""objectDefinitionSource"", interceptorFilterInvDefSource);
 
         // Again pick up auth manager
-        filterSecurityInterceptorBuilder.setAutowireMode(RootBeanDefinition.AUTOWIRE_BY_TYPE);
+        //filterSecurityInterceptorBuilder.setAutowireMode(RootBeanDefinition.AUTOWIRE_BY_TYPE);
 
         parseInterceptUrls(DomUtils.getChildElementsByTagName(element, ""intercept-url""),
                 filterChainMap, interceptorFilterInvDefSource);
diff --git a/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java b/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java
index 01176e11ea..f1eab2e57b 100644
--- a/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java
+++ b/core/src/main/java/org/springframework/security/config/HttpSecurityConfigPostProcessor.java
@@ -8,6 +8,7 @@ import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
 import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.core.OrderComparator;
 import org.springframework.core.Ordered;
+import org.springframework.security.AccessDecisionManager;
 import org.springframework.security.AuthenticationManager;
 import org.springframework.security.context.HttpSessionContextIntegrationFilter;
 import org.springframework.security.ui.AuthenticationEntryPoint;
@@ -15,7 +16,11 @@ import org.springframework.security.util.FilterChainProxy;
 import org.springframework.util.Assert;
 
 import javax.servlet.Filter;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
 /**
  * Responsible for tying up the HTTP security configuration - building ordered filter stack and linking up
@@ -26,18 +31,29 @@ import java.util.*;
  */
 public class HttpSecurityConfigPostProcessor implements BeanFactoryPostProcessor, Ordered {
     private Log logger = LogFactory.getLog(getClass());
+    private AuthenticationManager authManager;
 
     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
         HttpSessionContextIntegrationFilter httpSCIF = (HttpSessionContextIntegrationFilter)
                 beanFactory.getBean(HttpSecurityBeanDefinitionParser.DEFAULT_HTTP_SESSION_FILTER_ID);
-        AuthenticationManager authManager =
-                (AuthenticationManager) getBeanOfType(AuthenticationManager.class, beanFactory);
+        authManager = ConfigUtils.getAuthenticationManager(beanFactory);
 
         configureAuthenticationEntryPoint(beanFactory);
 
+        configureFilterSecurityInterceptor(beanFactory);
+
         configureFilterChain(beanFactory);
     }
 
+    private void configureFilterSecurityInterceptor(ConfigurableListableBeanFactory beanFactory) {
+        ConfigUtils.registerAccessManagerIfNecessary(beanFactory);
+
+        BeanDefinition securityInterceptor =
+                beanFactory.getBeanDefinition(HttpSecurityBeanDefinitionParser.DEFAULT_FILTER_SECURITY_INTERCEPTOR_ID);
+
+        ConfigUtils.configureSecurityInterceptor(beanFactory, securityInterceptor);
+    }
+
     /**
      * Selects the entry point that should be used in ExceptionTranslationFilter. Strategy is
      *
@@ -127,6 +143,6 @@ public class HttpSecurityConfigPostProcessor implements BeanFactoryPostProcessor
     }
 
     public int getOrder() {
-        return 0;
+        return HIGHEST_PRECEDENCE;
     }
 }
diff --git a/core/src/main/java/org/springframework/security/config/InterceptMethodsBeanDefinitionDecorator.java b/core/src/main/java/org/springframework/security/config/InterceptMethodsBeanDefinitionDecorator.java
index 56ad3a98d8..a6b7d26bf7 100644
--- a/core/src/main/java/org/springframework/security/config/InterceptMethodsBeanDefinitionDecorator.java
+++ b/core/src/main/java/org/springframework/security/config/InterceptMethodsBeanDefinitionDecorator.java
@@ -1,24 +1,78 @@
 package org.springframework.security.config;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.springframework.aop.config.AbstractInterceptorDrivenBeanDefinitionDecorator;
+import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanDefinition;
+import org.springframework.beans.factory.config.BeanDefinitionHolder;
+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
+import org.springframework.beans.factory.support.BeanDefinitionRegistry;
 import org.springframework.beans.factory.support.RootBeanDefinition;
-import org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor;
-import org.springframework.security.intercept.method.MethodDefinitionMap;
-import org.springframework.security.ConfigAttributeEditor;
+import org.springframework.beans.factory.xml.BeanDefinitionDecorator;
+import org.springframework.beans.factory.xml.ParserContext;
+import org.springframework.core.Ordered;
 import org.springframework.security.ConfigAttributeDefinition;
+import org.springframework.security.ConfigAttributeEditor;
+import org.springframework.security.intercept.method.MethodDefinitionMap;
+import org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor;
 import org.springframework.util.xml.DomUtils;
-import org.w3c.dom.Node;
 import org.w3c.dom.Element;
+import org.w3c.dom.Node;
 
-import java.util.List;
 import java.util.Iterator;
+import java.util.List;
 
 /**
  * @author Luke Taylor
  * @version $Id$
  */
-public class InterceptMethodsBeanDefinitionDecorator extends AbstractInterceptorDrivenBeanDefinitionDecorator {
+public class InterceptMethodsBeanDefinitionDecorator implements BeanDefinitionDecorator {
+    private static final String POST_PROCESSOR_ID = ""_interceptMethodsBeanfactoryPP"";
+
+    private BeanDefinitionDecorator delegate = new InternalInterceptMethodsBeanDefinitionDecorator();
+
+    public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {
+        registerPostProcessorIfNecessary(parserContext.getRegistry());
+
+        return delegate.decorate(node, definition, parserContext);
+    }
+
+    private void registerPostProcessorIfNecessary(BeanDefinitionRegistry registry) {
+        if (registry.containsBeanDefinition(POST_PROCESSOR_ID)) {
+            return;
+        }
+
+        registry.registerBeanDefinition(POST_PROCESSOR_ID,
+                new RootBeanDefinition(MethodSecurityConfigPostProcessor.class));
+    }
+
+    public static class MethodSecurityConfigPostProcessor implements BeanFactoryPostProcessor, Ordered {
+
+        public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
+            String[] interceptors = beanFactory.getBeanNamesForType(MethodSecurityInterceptor.class);
+
+            for (int i=0; i < interceptors.length; i++) {
+                BeanDefinition interceptor = beanFactory.getBeanDefinition(interceptors[i]);
+                ConfigUtils.configureSecurityInterceptor(beanFactory, interceptor);
+            }
+        }
+
+        public int getOrder() {
+            return HIGHEST_PRECEDENCE;
+        }
+
+    }
+}
+
+/**
+ * This is the real class which does the work. We need acccess to the ParserContext in order to register the
+ * post processor,
+ */
+class InternalInterceptMethodsBeanDefinitionDecorator extends AbstractInterceptorDrivenBeanDefinitionDecorator {
+    private Log logger = LogFactory.getLog(getClass());
+
     protected BeanDefinition createInterceptorDefinition(Node node) {
         Element interceptMethodsElt = (Element)node;
         RootBeanDefinition interceptor = new RootBeanDefinition(MethodSecurityInterceptor.class);
@@ -53,8 +107,6 @@ public class InterceptMethodsBeanDefinitionDecorator extends AbstractInterceptor
 
         interceptor.getPropertyValues().addPropertyValue(""objectDefinitionSource"", methodMap);
 
-        interceptor.setAutowireMode(RootBeanDefinition.AUTOWIRE_BY_TYPE);
-
         return interceptor;
     }
 }
diff --git a/core/src/main/java/org/springframework/security/config/SecurityNamespaceHandler.java b/core/src/main/java/org/springframework/security/config/SecurityNamespaceHandler.java
index c1f13bee21..7f477fcf90 100644
--- a/core/src/main/java/org/springframework/security/config/SecurityNamespaceHandler.java
+++ b/core/src/main/java/org/springframework/security/config/SecurityNamespaceHandler.java
@@ -15,7 +15,6 @@ public class SecurityNamespaceHandler extends NamespaceHandlerSupport {
         registerBeanDefinitionParser(""http"", new HttpSecurityBeanDefinitionParser());
         registerBeanDefinitionParser(""user-service"", new UserServiceBeanDefinitionParser());
         registerBeanDefinitionParser(""authentication-provider"", new AuthenticationProviderBeanDefinitionParser());
-        registerBeanDefinitionParser(""autoconfig"", new AutoConfigBeanDefinitionParser());
         registerBeanDefinitionDecorator(""intercept-methods"", new InterceptMethodsBeanDefinitionDecorator());
         registerBeanDefinitionDecorator(""filter-chain-map"", new FilterChainMapBeanDefinitionDecorator());        
     }
diff --git a/core/src/test/resources/org/springframework/security/config/http-security.xml b/core/src/test/resources/org/springframework/security/config/http-security.xml
index 616f87f682..15b921937f 100644
--- a/core/src/test/resources/org/springframework/security/config/http-security.xml
+++ b/core/src/test/resources/org/springframework/security/config/http-security.xml
@@ -6,8 +6,6 @@
     xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd"">
 
-    <security:autoconfig />
-
     <security:http createSession=""ifRequired"" pathType=""ant"" lowerCaseComparisons=""true"">
         <security:intercept-url pattern=""/unprotected"" filters=""none""/>
         <security:intercept-url pattern=""/somepath"" access=""ROLE_SPECIAL,ROLE_USER"" />
@@ -23,12 +21,10 @@ http://www.springframework.org/schema/security http://www.springframework.org/sc
         <security:http-basic realm=""NamespaceTestRealm""  />
     </security:http>
 
-
     <security:authentication-provider>
         <security:user-service>
             <security:user name=""bob"" password=""bobspassword"" authorities=""ROLE_A,ROLE_B"" />
             <security:user name=""bill"" password=""billspassword"" authorities=""ROLE_A,ROLE_B,AUTH_OTHER"" />
         </security:user-service>
     </security:authentication-provider>
-
 </beans>
\ No newline at end of file
diff --git a/core/src/test/resources/org/springframework/security/config/method-security.xml b/core/src/test/resources/org/springframework/security/config/method-security.xml
index a25c205b71..3ba61d90fd 100644
--- a/core/src/test/resources/org/springframework/security/config/method-security.xml
+++ b/core/src/test/resources/org/springframework/security/config/method-security.xml
@@ -6,8 +6,6 @@
     xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd"">
 
-    <security:autoconfig />
-
     <bean id=""target"" class=""org.springframework.security.config.TestBusinessBeanImpl"">
         <!-- This will add a security interceptor to the bean -->
         <security:intercept-methods>","Remove use of autoconfig , as it was really just a conveniece for creating default access and authentication managers .","""SEC-1234: Refactor security configuration to use new ConfigUtils class and remove autoconfig tag""","""Refactor auto-configured AccessDecisionManager and AuthenticationManager registration""","This commit appears to introduce a new class `ConfigUtils` in the package `org.springframework.security.config`. This class provides utility methods for registering a default `AccessDecisionManager` if none is found, and for retrieving the `AuthenticationManager` from the bean factory.

The `HttpSecurityBeanDefinitionParser` class has been modified to comment out the line setting the autowire mode for the `filterSecurityInterceptorBuilder`.

The `HttpSecurityConfigPostProcessor` class has been modified to use the `ConfigUtils.getAuthenticationManager(beanFactory)` method to retrieve the `AuthenticationManager`.

These changes seem to be related to the configuration and management of Spring Security's access control and authentication components.",Remove `autoconfig` and streamline security configuration by introducing `ConfigUtils` and refactoring intercept methods handling.
"diff --git a/languagetool-language-modules/en/src/main/resources/org/languagetool/rules/en/grammar.xml b/languagetool-language-modules/en/src/main/resources/org/languagetool/rules/en/grammar.xml
index 9ddbc96c68..c10a58512a 100644
--- a/languagetool-language-modules/en/src/main/resources/org/languagetool/rules/en/grammar.xml
+++ b/languagetool-language-modules/en/src/main/resources/org/languagetool/rules/en/grammar.xml
@@ -14207,13 +14207,33 @@ USA
           <token>about</token>
         </marker>
           <token regexp='yes'>an?|the</token>
-          <token min='1' max='2'></token>
+          <token/>
           <token>and</token>
           <token regexp='yes'>an?|the</token>
           <token/>
       </pattern>
       <message>The usual preposition for ""difference"" is ""between"" not ""about"".  Revise: <suggestion>difference between</suggestion>.</message>
-      <example correction='difference between'>There is not big <marker>differenceaabout</marker> the week and the weekend to me.</example>
+      <example correction='difference between'>There is not big <marker>difference about</marker> the week and the weekend to me.</example>
+    </rule>
+    <rule id='IMPORTANT_WITH_TO' name='Collocation: Important with/to'>
+    <!-- Created by Nicholas Walker (Bokomaru), 2017-11-14 -->
+      <pattern>
+          <token>important</token>
+          <token>with</token>
+          <token postag_regexp=""yes"" postag=""NNP|PRP"">
+            <exception regexp=""yes"">an?|all|many|some|multiple|most</exception></token>
+      </pattern>
+      <message>The usual preposition for ""\1"" is ""to"" not ""with"".  Revise: <suggestion>\1 to \3</suggestion>.</message>
+      <example correction='important to you'>Family who is closest and <marker>important with you</marker>.</example>
+    </rule>
+    <rule id='CONSIST_TO_OF' name='Collocation: Consist to/of'>
+    <!-- Created by Nicholas Walker (Bokomaru), 2017-11-14 -->
+      <pattern>
+          <token inflected=""yes"">consist</token>
+          <token>to</token>
+      </pattern>
+      <message>The usual preposition for ""\1"" is ""of"" not ""to"".  Revise: <suggestion>\1 of</suggestion>.</message>
+      <example correction='consists of'>There is a program in medicine and this program <marker>consists to</marker> diagnostic people to know if  their body works well.</example>
     </rule>
   </rulegroup>
 ",add 2 Bokomaru \' s rules from : .,"""Added grammar rules for 'difference about/between', 'important with/to', and 'consist to/of' in English language module""","""Added new grammar rules for English: 'IMPORTANT_WITH_TO', 'CONSIST_TO_OF' and updated 'difference about' rule""","""Updated grammar.xml: Added new rules for 'difference about', 'important with', and 'consist to' collocations.""","Added grammar detection rules for ""important with/to"" and ""consist to/of"" in English, correcting common prepositional errors."
"diff --git a/configserver/src/main/resources/configserver-app/services.xml b/configserver/src/main/resources/configserver-app/services.xml
index 8521ca8b31f..5f60be8c202 100644
--- a/configserver/src/main/resources/configserver-app/services.xml
+++ b/configserver/src/main/resources/configserver-app/services.xml
@@ -55,7 +55,11 @@
     <preprocess:include file='config-models.xml' required='false' />
     <preprocess:include file='node-repository.xml' required='false' />
     <preprocess:include file='hosted-vespa/routing-status.xml' required='false' />
+
+    <!-- TODO Vespa 7: Remove scoreboard.xml, replaced by metrics-packets.xml -->
     <preprocess:include file='hosted-vespa/scoreboard.xml' required='false' />
+
+    <preprocess:include file='hosted-vespa/metrics-packets.xml' required='false' />
     <preprocess:include file='controller/container.xml' required='false' />
     <component id=""com.yahoo.vespa.service.monitor.internal.slobrok.SlobrokMonitorManagerImpl"" bundle=""service-monitor"" />
     <component id=""com.yahoo.vespa.service.monitor.internal.health.HealthMonitorManager"" bundle=""service-monitor"" />",Add optional metrics - packets . xml file to configserver app .,"""Added metrics-packets.xml and deprecated scoreboard.xml in services.xml""","""Added metrics-packets.xml and removed scoreboard.xml (TODO: Remove scoreboard.xml in Vespa 7)""","""Updated services.xml: Added inclusion of 'metrics-packets.xml' and marked 'scoreboard.xml' for removal in Vespa 7.""",Add metrics-packets.xml and mark scoreboard.xml for future removal in services.xml.
"diff --git a/CHANGELOG.md b/CHANGELOG.md
index 07bf5a0b9..1af390154 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,9 +1,14 @@
 ## 5.5.1 (YYYY-MM-DD)
 
+### Bug Fixes
+
+* Building with Android App Bundle enabled should now work correctly (#5977).
+
 ### Internal
 
 * Updated ReLinker to 1.3.0.
 
+
 ## 5.5.0 (2018-08-31)
 
 ### Enhancements",Add mention of Android App Bundle bug fix,"""Update changelog for 5.5.1 release""","""Update CHANGELOG.md to reflect bug fix for Android App Bundle and ReLinker update""","## 5.5.1 (YYYY-MM-DD)

 ### Bug Fixes

 * Building with Android App Bundle enabled should now work correctly (#5977).

 ### Internal

 * Updated ReLinker to 1.3.0.

 ## 5.5.0 (2018-08-31)

### Enhancements

This section is missing in the provided diff. If there are any enhancements in version 5.5.0, they should be listed here.","Added fix for Android App Bundle build issue, updated ReLinker to 1.3.0."
"diff --git a/javascript/src/components/search/SearchBar.jsx b/javascript/src/components/search/SearchBar.jsx
index c6bd1dcc16..def100bbff 100644
--- a/javascript/src/components/search/SearchBar.jsx
+++ b/javascript/src/components/search/SearchBar.jsx
@@ -1,6 +1,6 @@
 /* global $ */
 
-import React from 'react';
+import React, {PropTypes} from 'react';
 import ReactDOM from 'react-dom';
 import Immutable from 'immutable';
 import { Input, Button, ButtonToolbar, DropdownButton, MenuItem, Alert } from 'react-bootstrap';
@@ -22,6 +22,9 @@ require('!script!../../../public/javascripts/jquery-2.1.1.min.js');
 require('!script!../../../public/javascripts/bootstrap-datepicker.js');
 
 const SearchBar = React.createClass({
+  propTypes: {
+    userPreferences: PropTypes.object,
+  },
   getInitialState() {
     this.initialSearchParams = SearchStore.getParams();
     this.datepickerInitialized = false;
@@ -51,82 +54,6 @@ const SearchBar = React.createClass({
   componentWillUnmount() {
     this._removeSearchQueryInput();
   },
-  render() {
-    return (
-      <div className=""row no-bm"">
-        <div className=""col-md-12"" id=""universalsearch-container"">
-          <div className=""row no-bm"">
-            <div ref=""universalSearch"" className=""col-md-12"" id=""universalsearch"">
-              <form ref=""searchForm""
-                    className=""universalsearch-form""
-                    action={SearchStore.searchBaseLocation('index')}
-                    method=""GET""
-                    onSubmit={this._prepareSearch}>
-                <Input type=""hidden"" name=""rangetype"" value={this.state.rangeType}/>
-                <Input type=""hidden"" ref=""fields"" name=""fields"" value=""""/>
-                <Input type=""hidden"" ref=""width"" name=""width"" value=""""/>
-
-                <div className=""timerange-selector-container"">
-                  <div className=""row no-bm"">
-                    <div className=""col-md-9"">
-                      <ButtonToolbar className=""timerange-chooser pull-left"">
-                        <DropdownButton bsStyle=""info""
-                                        title={<i className=""fa fa-clock-o""></i>}
-                                        onSelect={this._rangeTypeChanged}
-                                        id=""dropdown-timerange-selector"">
-                          <MenuItem eventKey=""relative""
-                                    className={this.state.rangeType === 'relative' ? 'selected' : null}>
-                            Relative
-                          </MenuItem>
-                          <MenuItem eventKey=""absolute""
-                                    className={this.state.rangeType === 'absolute' ? 'selected' : null}>
-                            Absolute
-                          </MenuItem>
-                          <MenuItem eventKey=""keyword""
-                                    className={this.state.rangeType === 'keyword' ? 'selected' : null}>
-                            Keyword
-                          </MenuItem>
-                        </DropdownButton>
-                      </ButtonToolbar>
-
-                      {this._getRangeTypeSelector()}
-                    </div>
-                    <div className=""col-md-3"">
-                      <div className=""saved-searches-selector-container""
-                           style={{float: 'right', marginRight: 5, width: 270}}>
-                        {this._getSavedSearchesSelector()}
-                      </div>
-                    </div>
-                  </div>
-                </div>
-
-                <div id=""search-container"">
-                  <div className=""pull-right search-help"">
-                    <DocumentationLink page={DocsHelper.PAGES.SEARCH_QUERY_LANGUAGE}
-                                       title=""Search query syntax documentation""
-                                       text={<i className=""fa fa-lightbulb-o""></i>}/>
-                  </div>
-
-                  <Button type=""submit"" bsStyle=""success"" className=""pull-left"">
-                    <i className=""fa fa-search""></i>
-                  </Button>
-
-                  <div className=""query"">
-                    <Input type=""text""
-                           ref=""query""
-                           name=""q""
-                           value={this.state.query}
-                           onChange={this._queryChanged}
-                           placeholder=""Type your search query here and press enter. (&quot;not found&quot; AND http) OR http_response_code:[400 TO 404]""/>
-                  </div>
-                </div>
-              </form>
-            </div>
-          </div>
-        </div>
-      </div>
-    );
-  },
   _initializeSearchQueryInput() {
     if (this.props.userPreferences.enableSmartSearch) {
       const queryInput = new QueryInput(this.refs.query.getInputDOMNode());
@@ -263,105 +190,105 @@ const SearchBar = React.createClass({
     let selector;
 
     switch (this.state.rangeType) {
-      case 'relative':
-        selector = (
-          <div className=""timerange-selector relative""
-               style={{width: 270, marginLeft: 50}}>
-            <Input id=""relative-timerange-selector""
-                   ref=""relative""
-                   type=""select""
-                   value={this.state.rangeParams.get('relative')}
-                   name=""relative""
-                   onChange={this._rangeParamsChanged('relative')}
-                   className=""input-sm"">
-              <option value=""300"">Search in the last 5 minutes</option>
-              <option value=""900"">Search in the last 15 minutes</option>
-              <option value=""1800"">Search in the last 30 minutes</option>
-              <option value=""3600"">Search in the last 1 hour</option>
-              <option value=""7200"">Search in the last 2 hours</option>
-              <option value=""28800"">Search in the last 8 hours</option>
-              <option value=""86400"">Search in the last 1 day</option>
-              <option value=""172800"">Search in the last 2 days</option>
-              <option value=""432000"">Search in the last 5 days</option>
-              <option value=""604800"">Search in the last 7 days</option>
-              <option value=""1209600"">Search in the last 14 days</option>
-              <option value=""2592000"">Search in the last 30 days</option>
-              <option value=""0"">Search in all messages</option>
-            </Input>
-          </div>
-        );
-        break;
-      case 'absolute':
-        selector = (
-          <div className=""timerange-selector absolute"" style={{width: 600}}>
-            <div className=""row no-bm"" style={{marginLeft: 50}}>
-              <div className=""col-md-5"" style={{padding: 0}}>
-                <Input type=""hidden"" name=""from"" ref=""from""/>
-                <Input type=""text""
-                       ref=""fromFormatted""
-                       value={this._formattedDateStringInUserTZ('from')}
-                       onChange={this._rangeParamsChanged('from')}
-                       placeholder={momentHelper.DATE_FORMAT}
-                       buttonAfter={<Button bsSize=""small"" onClick={this._setDateTimeToNow('from')}><i className=""fa fa-magic""></i></Button>}
-                       bsStyle={this._isValidDateField('from') ? null : 'error'}
-                       bsSize=""small""
-                       required/>
-              </div>
-              <div className=""col-md-1"">
-                <p className=""text-center"" style={{margin: 0, lineHeight: '30px'}}>to</p>
-              </div>
-              <div className=""col-md-5"" style={{padding: 0}}>
-                <Input type=""hidden"" name=""to"" ref=""to""/>
-                <Input type=""text""
-                       ref=""toFormatted""
-                       value={this._formattedDateStringInUserTZ('to')}
-                       onChange={this._rangeParamsChanged('to')}
-                       placeholder={momentHelper.DATE_FORMAT}
-                       buttonAfter={<Button bsSize=""small"" onClick={this._setDateTimeToNow('to')}><i className=""fa fa-magic""></i></Button>}
-                       bsStyle={this._isValidDateField('to') ? null : 'error'}
-                       bsSize=""small""
-                       required/>
-              </div>
+    case 'relative':
+      selector = (
+        <div className=""timerange-selector relative""
+             style={{width: 270, marginLeft: 50}}>
+          <Input id=""relative-timerange-selector""
+                 ref=""relative""
+                 type=""select""
+                 value={this.state.rangeParams.get('relative')}
+                 name=""relative""
+                 onChange={this._rangeParamsChanged('relative')}
+                 className=""input-sm"">
+            <option value=""300"">Search in the last 5 minutes</option>
+            <option value=""900"">Search in the last 15 minutes</option>
+            <option value=""1800"">Search in the last 30 minutes</option>
+            <option value=""3600"">Search in the last 1 hour</option>
+            <option value=""7200"">Search in the last 2 hours</option>
+            <option value=""28800"">Search in the last 8 hours</option>
+            <option value=""86400"">Search in the last 1 day</option>
+            <option value=""172800"">Search in the last 2 days</option>
+            <option value=""432000"">Search in the last 5 days</option>
+            <option value=""604800"">Search in the last 7 days</option>
+            <option value=""1209600"">Search in the last 14 days</option>
+            <option value=""2592000"">Search in the last 30 days</option>
+            <option value=""0"">Search in all messages</option>
+          </Input>
+        </div>
+      );
+      break;
+    case 'absolute':
+      selector = (
+        <div className=""timerange-selector absolute"" style={{width: 600}}>
+          <div className=""row no-bm"" style={{marginLeft: 50}}>
+            <div className=""col-md-5"" style={{padding: 0}}>
+              <Input type=""hidden"" name=""from"" ref=""from""/>
+              <Input type=""text""
+                     ref=""fromFormatted""
+                     value={this._formattedDateStringInUserTZ('from')}
+                     onChange={this._rangeParamsChanged('from')}
+                     placeholder={momentHelper.DATE_FORMAT}
+                     buttonAfter={<Button bsSize=""small"" onClick={this._setDateTimeToNow('from')}><i className=""fa fa-magic""></i></Button>}
+                     bsStyle={this._isValidDateField('from') ? null : 'error'}
+                     bsSize=""small""
+                     required/>
+            </div>
+            <div className=""col-md-1"">
+              <p className=""text-center"" style={{margin: 0, lineHeight: '30px'}}>to</p>
+            </div>
+            <div className=""col-md-5"" style={{padding: 0}}>
+              <Input type=""hidden"" name=""to"" ref=""to""/>
+              <Input type=""text""
+                     ref=""toFormatted""
+                     value={this._formattedDateStringInUserTZ('to')}
+                     onChange={this._rangeParamsChanged('to')}
+                     placeholder={momentHelper.DATE_FORMAT}
+                     buttonAfter={<Button bsSize=""small"" onClick={this._setDateTimeToNow('to')}><i className=""fa fa-magic""></i></Button>}
+                     bsStyle={this._isValidDateField('to') ? null : 'error'}
+                     bsSize=""small""
+                     required/>
             </div>
           </div>
-        );
-        break;
-      case 'keyword':
-        selector = (
-          <div className=""timerange-selector keyword"" style={{width: 650}}>
-            <div className=""row no-bm"" style={{marginLeft: 50}}>
-              <div className=""col-md-5"" style={{padding: 0}}>
-                <Input type=""text""
-                       ref=""keyword""
-                       name=""keyword""
-                       defaultValue={this.state.rangeParams.get('keyword')}
-                       onChange={this._keywordSearchChanged}
-                       placeholder=""Last week""
-                       className=""input-sm""
-                       required/>
-              </div>
-              <div className=""col-md-7"" style={{paddingRight: 0}}>
-                {this.state.keywordPreview.size > 0 &&
-                <Alert bsStyle=""info"" style={{height: 30, paddingTop: 5, paddingBottom: 5, marginTop: 0}}>
-                  <strong style={{marginRight: 8}}>Preview:</strong>
-                  {this.state.keywordPreview.get('from')} to {this.state.keywordPreview.get('to')}
-                </Alert>
+        </div>
+      );
+      break;
+    case 'keyword':
+      selector = (
+        <div className=""timerange-selector keyword"" style={{width: 650}}>
+          <div className=""row no-bm"" style={{marginLeft: 50}}>
+            <div className=""col-md-5"" style={{padding: 0}}>
+              <Input type=""text""
+                     ref=""keyword""
+                     name=""keyword""
+                     defaultValue={this.state.rangeParams.get('keyword')}
+                     onChange={this._keywordSearchChanged}
+                     placeholder=""Last week""
+                     className=""input-sm""
+                     required/>
+            </div>
+            <div className=""col-md-7"" style={{paddingRight: 0}}>
+              {this.state.keywordPreview.size > 0 &&
+              <Alert bsStyle=""info"" style={{height: 30, paddingTop: 5, paddingBottom: 5, marginTop: 0}}>
+                <strong style={{marginRight: 8}}>Preview:</strong>
+    ",Reformat SearchBar component,"""Added PropTypes to SearchBar component and removed render method""",Added propTypes validation for SearchBar component and updated range type selectors.,"The commit message could be:

""Add propTypes to SearchBar component in SearchBar.jsx""

This commit adds props validation to the SearchBar component by importing PropTypes from 'react' and adding a propTypes object to the component. This helps to ensure that the component receives the correct props data type.","""Added PropTypes to SearchBar and refactored render method and switch cases for range selectors."""
"diff --git a/aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java b/aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
index 8b288d9a8..594d474de 100644
--- a/aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
+++ b/aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
@@ -458,14 +458,15 @@ public class EventCodec
 
     private static String dissect(final SetupFlyweight header)
     {
-        return String.format(""SETUP %x len %d %x:%x:%x @%x %d"",
+        return String.format(""SETUP %x len %d %x:%x:%x @%x %d MTU %d"",
             header.flags(),
             header.frameLength(),
             header.sessionId(),
             header.streamId(),
             header.termId(),
             header.termOffset(),
-            header.termSize());
+            header.termSize(),
+            header.mtuLength());
     }
 
     private static String dissect(final PublicationMessageFlyweight command)
diff --git a/aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/SetupFlyweight.java b/aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/SetupFlyweight.java
index e99b1c483..35a689e4c 100644
--- a/aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/SetupFlyweight.java
+++ b/aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/SetupFlyweight.java
@@ -26,13 +26,14 @@ import static java.nio.ByteOrder.LITTLE_ENDIAN;
 public class SetupFlyweight extends HeaderFlyweight
 {
     /** Size of the Setup Header */
-    public static final int HEADER_LENGTH = 28;
+    public static final int HEADER_LENGTH = 32;
 
     private static final int TERM_OFFSET_FIELD_OFFSET = 8;
     private static final int SESSION_ID_FIELD_OFFSET = 12;
     private static final int STREAM_ID_FIELD_OFFSET = 16;
     private static final int TERM_ID_FIELD_OFFSET = 20;
     private static final int TERM_SIZE_FIELD_OFFSET = 24;
+    private static final int MTU_LENGTH_FIELD_OFFSET = 28;
 
     /**
      * return term offset field
@@ -146,4 +147,27 @@ public class SetupFlyweight extends HeaderFlyweight
 
         return this;
     }
+
+    /**
+     * Return MTU length field
+     *
+     * @return MTU length field value
+     */
+    public int mtuLength()
+    {
+        return atomicBuffer().getInt(offset() + MTU_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
+    }
+
+    /**
+     * Set MTU length field
+     *
+     * @param mtuLength field value
+     * @return flyweight
+     */
+    public SetupFlyweight mtuLength(final int mtuLength)
+    {
+        atomicBuffer().putInt(offset() + MTU_LENGTH_FIELD_OFFSET, mtuLength, LITTLE_ENDIAN);
+
+        return this;
+    }
 }
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
index 3285bd433..dbf3072d6 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
@@ -146,7 +146,8 @@ public class DataFrameDispatcher implements DataFrameHandler, SetupFrameHandler
 
             if (null == connection && !INIT_IN_PROGRESS.equals(initialisationInProgressMap.get(sessionId, streamId)))
             {
-                createConnection(srcAddress, streamId, sessionId, termId, header.termOffset(), header.termSize());
+                createConnection(
+                    srcAddress, streamId, sessionId, termId, header.termOffset(), header.termSize(), header.mtuLength());
             }
         }
     }
@@ -167,7 +168,8 @@ public class DataFrameDispatcher implements DataFrameHandler, SetupFrameHandler
         final int sessionId,
         final int termId,
         final int termOffset,
-        final int termSize)
+        final int termSize,
+        final int mtuLength)
     {
         final UdpChannelTransport transport = channelEndpoint.transport();
         final InetSocketAddress controlAddress =
@@ -175,6 +177,6 @@ public class DataFrameDispatcher implements DataFrameHandler, SetupFrameHandler
 
         initialisationInProgressMap.put(sessionId, streamId, INIT_IN_PROGRESS);
         conductorProxy.createConnection(
-                sessionId, streamId, termId, termOffset, termSize, controlAddress, srcAddress, channelEndpoint);
+            sessionId, streamId, termId, termOffset, termSize, mtuLength, controlAddress, srcAddress, channelEndpoint);
     }
 }
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
index 042e32a0f..bf8a81574 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
@@ -193,6 +193,7 @@ public class DriverConductor extends Agent
                 cmd.termId(),
                 cmd.termOffset(),
                 cmd.termSize(),
+                cmd.senderMtuLength(),
                 cmd.controlAddress(),
                 cmd.srcAddress(),
                 cmd.channelEndpoint());
@@ -544,10 +545,12 @@ public class DriverConductor extends Agent
         final int initialTermId,
         final int initialTermOffset,
         final int termBufferSize,
+        final int senderMtuLength,
         final InetSocketAddress controlAddress,
         final InetSocketAddress sourceAddress,
         final ReceiveChannelEndpoint channelEndpoint)
     {
+        channelEndpoint.validateSenderMtuLength(senderMtuLength);
         // window size is static at the moment. This needs to change to max once it is adjustable.
         channelEndpoint.validateWindowSizeMax(initialWindowSize);
 
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductorProxy.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductorProxy.java
index b020d46fb..34848750e 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductorProxy.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductorProxy.java
@@ -42,13 +42,15 @@ public class DriverConductorProxy
         final int termId,
         final int termOffset,
         final int termSize,
+        final int senderMtuLength,
         final InetSocketAddress controlAddress,
         final InetSocketAddress srcAddress,
         final ReceiveChannelEndpoint channelEndpoint)
     {
         offerCommand(
             new CreateConnectionCmd(
-                sessionId, streamId, termId, termOffset, termSize, controlAddress, srcAddress, channelEndpoint));
+                sessionId, streamId, termId, termOffset, termSize, senderMtuLength,
+                controlAddress, srcAddress, channelEndpoint));
     }
 
     public void elicitSetupFromSource(
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
index 846247fd0..4d7bd069c 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
@@ -437,6 +437,7 @@ public class DriverPublication implements AutoCloseable
                    .termId(activeTermId)
                    .termOffset(0)
                    .termSize(termCapacity)
+                   .mtuLength(mtuLength)
                    .frameLength(SetupFlyweight.HEADER_LENGTH)
                    .headerType(HeaderFlyweight.HDR_TYPE_SETUP)
                    .flags((byte)0)
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiveChannelEndpoint.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiveChannelEndpoint.java
index ac76fad69..c9e90e309 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiveChannelEndpoint.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiveChannelEndpoint.java
@@ -173,6 +173,27 @@ public class ReceiveChannelEndpoint implements AutoCloseable
         }
     }
 
+    public void validateSenderMtuLength(final int senderMtuLength)
+    {
+        final int soRcvbuf = transport.getOption(StandardSocketOptions.SO_RCVBUF);
+
+        if (senderMtuLength > soRcvbuf)
+        {
+            throw new ConfigurationException(
+                String.format(""Sender MTU greater than socket SO_RCVBUF: senderMtuLength=%d, SO_RCVBUF=%d"",
+                    senderMtuLength, soRcvbuf));
+        }
+
+        final int capacity = transport.receiveBufferCapacity();
+
+        if (senderMtuLength > capacity)
+        {
+            throw new ConfigurationException(
+                String.format(""Sender MTU greater than receive buffer capacity: senderMtuLength=%d, capacity=%d"",
+                    senderMtuLength, capacity));
+        }
+    }
+
     private void sendStatusMessage(
         final InetSocketAddress controlAddress,
         final int sessionId,
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java
index 8a3c47478..80536d29f 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java
@@ -180,6 +180,16 @@ public abstract class UdpChannelTransport implements AutoCloseable
         }
     }
 
+    /**
+     * Return the capacity of the {@link ByteBuffer} used for reception
+     *
+     * @return capacity of receiving byte buffer
+     */
+    public int receiveBufferCapacity()
+    {
+        return readByteBuffer.capacity();
+    }
+
     protected boolean isFrameValid(final int length)
     {
         boolean isFrameValid = true;
diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CreateConnectionCmd.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CreateConnectionCmd.java
index 520924e07..ecdce23a1 100644
--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CreateConnectionCmd.java
+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CreateConnectionCmd.java
@@ -26,6 +26,7 @@ public class CreateConnectionCmd
     private final int termId;
     private final int termOffset;
     private final int termSize;
+    private final int senderMtuLength;
     private final InetSocketAddress controlAddress;
     private final InetSocketAddress srcAddress;
     private final ReceiveChannelEndpoint channelEndpoint;
@@ -36,6 +37,7 @@ public class CreateConnectionCmd
         final int termId,
         final int termOffet,
         final",added checks for sender MTU vs . receiver socket SO_RCVBUF and vs . receiver buffer capacity .,"""Added support for sender MTU length in SetupFlyweight and connection creation""",Added support for MTU length in SetupFlyweight and related classes.,"This commit appears to add a new field `mtuLength` to the `SetupFlyweight` class and related classes in the Aeron project. The `mtuLength` field is used to store the maximum transmission unit (MTU) length for a network connection. The commit also includes updates to the `EventCodec` class to include the `mtuLength` field in the string representation of a `SETUP` event. Additionally, the commit modifies the `DataFrameDispatcher` and `DriverConductor` classes to pass the `mtuLength` field when creating a new connection. The `ReceiveChannelEndpoint` class is also updated to validate the `mtuLength` against the socket receive buffer size and the receive buffer capacity. Finally, the `UdpChannelTransport` class is updated to include a new method `receiveBufferCapacity()` to return the capacity of the receive byte buffer.",Enhanced SetupFlyweight to include MTU length and validated MTU against socket buffer sizes for connections.
"diff --git a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java b/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java
index b4d7371d9be..ca45df991da 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java
+++ b/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java
@@ -18,14 +18,12 @@
 package io.shardingsphere.jdbc.orchestration;
 
 import io.shardingsphere.jdbc.orchestration.internal.AllInternalTests;
-import io.shardingsphere.jdbc.orchestration.yaml.AllYamlTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
 @RunWith(Suite.class)
 @SuiteClasses({
-        AllYamlTests.class,
         AllInternalTests.class
     })
 public final class AllTests {
diff --git a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java b/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java
index 72e037b736a..5213a3d0bb3 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java
+++ b/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java
@@ -18,14 +18,12 @@
 package io.shardingsphere.jdbc.orchestration.internal;
 
 import io.shardingsphere.jdbc.orchestration.internal.config.ConfigurationNodeTest;
-import io.shardingsphere.jdbc.orchestration.internal.jdbc.AllOrcheTests;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
-        ConfigurationNodeTest.class,
-        AllOrcheTests.class
+        ConfigurationNodeTest.class
 })
 public final class AllInternalTests {
 }
diff --git a/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java
new file mode 100644
index 00000000000..0c7a478eda5
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/AllTests.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.jdbc.orchestration;
+
+import io.shardingsphere.jdbc.orchestration.api.AllApiTests;
+import io.shardingsphere.jdbc.orchestration.internal.AllInternalTests;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        AllInternalTests.class,
+        AllApiTests.class
+    })
+public final class AllTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/AllApiTests.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/AllApiTests.java
new file mode 100644
index 00000000000..4a7bf96f26f
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/AllApiTests.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.jdbc.orchestration.api;
+
+import io.shardingsphere.jdbc.orchestration.api.yaml.AllYamlTests;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+
+@RunWith(Suite.class)
+@Suite.SuiteClasses({
+        AllYamlTests.class
+    })
+public final class AllApiTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AbstractYamlDataSourceTest.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AbstractYamlDataSourceTest.java
similarity index 94%
rename from sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AbstractYamlDataSourceTest.java
rename to sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AbstractYamlDataSourceTest.java
index ea899b02223..208ed14536f 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AbstractYamlDataSourceTest.java
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AbstractYamlDataSourceTest.java
@@ -15,9 +15,9 @@
  * </p>
  */
 
-package io.shardingsphere.jdbc.orchestration.yaml;
+package io.shardingsphere.jdbc.orchestration.api.yaml;
 
-import io.shardingsphere.jdbc.orchestration.util.EmbedTestingServer;
+import io.shardingsphere.jdbc.orchestration.api.yaml.util.EmbedTestingServer;
 import org.apache.commons.dbcp2.BasicDataSource;
 import org.h2.tools.RunScript;
 import org.junit.BeforeClass;
diff --git a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AllYamlTests.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AllYamlTests.java
similarity index 71%
rename from sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AllYamlTests.java
rename to sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AllYamlTests.java
index 23e97464896..053a299c6ab 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/yaml/AllYamlTests.java
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/api/yaml/AllYamlTests.java
@@ -15,11 +15,11 @@
  * </p>
  */
 
-package io.shardingsphere.jdbc.orchestration.yaml;
+package io.shardingsphere.jdbc.orchestration.api.yaml;
 
-import io.shardingsphere.jdbc.orchestration.yaml.masterslave.YamlOrchestrationMasterSlaveIntegrateTest;
-import io.shardingsphere.jdbc.orchestration.yaml.sharding.YamlOrchestrationShardingIntegrateTest;
-import io.shardingsphere.jdbc.orchestration.yaml.sharding.YamlOrchestrationShardingWithMasterSlaveIntegrateTest;
+import io.shardingsphere.jdbc.orchestration.api.yaml.masterslave.YamlOrchestrationMasterSlaveIntegrateTest;
+import io.shardingsphere.jdbc.orchestration.api.yaml.sharding.YamlOrchestrationShardingIntegrateTest;
+import io.shardingsphere.jdbc.orchestration.api.yaml.sharding.YamlOrchestrationShardingWithMasterSlaveIntegrateTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 
diff --git a/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java
new file mode 100644
index 00000000000..c94c0a09704
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/AllInternalTests.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.jdbc.orchestration.internal;
+
+import io.shardingsphere.jdbc.orchestration.internal.circuit.AllCircuitTests;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        AllCircuitTests.class
+    })
+public final class AllInternalTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/jdbc/AllOrcheTests.java b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/circuit/AllCircuitTests.java
similarity index 92%
rename from sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/jdbc/AllOrcheTests.java
rename to sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/circuit/AllCircuitTests.java
index 5e036fa23c6..f66f0d5fb67 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/test/java/io/shardingsphere/jdbc/orchestration/internal/jdbc/AllOrcheTests.java
+++ b/sharding-orchestration/sharding-orchestration-jdbc/src/test/java/io/shardingsphere/jdbc/orchestration/internal/circuit/AllCircuitTests.java
@@ -15,7 +15,7 @@
  * </p>
  */
 
-package io.shardingsphere.jdbc.orchestration.internal.jdbc;
+package io.shardingsphere.jdbc.orchestration.internal.circuit;
 
 import io.shardingsphere.jdbc.orchestration.internal.circuit.connection.CircuitBreakerConnectionTest;
 import io.shardingsphere.jdbc.orchestration.internal.circuit.datasource.CircuitBreakerDataSourceTest;
@@ -29,5 +29,5 @@ import org.junit.runners.Suite;
         CircuitBreakerDataSourceTest.class,
         CircuitBreakerDatabaseMetaDataTest.class
     })
-public final class AllOrcheTests {
+public final class AllCircuitTests {
 }
diff --git a/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/AllTests.java b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/AllTests.java
new file mode 100644
index 00000000000..4a56a4beaa4
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/AllTests.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.orchestration;
+
+import io.shardingsphere.orchestration.reg.AllRegTests;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        AllRegTests.class
+    })
+public final class AllTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/AllRegTests.java b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/AllRegTests.java
new file mode 100644
index 00000000000..88086e13b50
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/AllRegTests.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.orchestration.reg;
+
+import io.shardingsphere.orchestration.reg.newzk.AllNewzkTests;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        AllNewzkTests.class
+    })
+public final class AllRegTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/AllNewzkTests.java b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/AllNewzkTests.java
new file mode 100644
index 00000000000..6f07f80b80c
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/AllNewzkTests.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.orchestration.reg.newzk;
+
+import io.shardingsphere.orchestration.reg.newzk.client.cache.PathResolveTest;
+import io.shardingsphere.orchestration.reg.newzk.client.cache.PathTreeTest;
+import io.shardingsphere.orchestration.reg.newzk.client.retry.TestCallable;
+import io.shardingsphere.orchestration.reg.newzk.client.retry.TestResultCallable;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.AllBaseTests;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.SyncRetryStrategyTest;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.UsualClientTest;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        PathResolveTest.class,
+        PathTreeTest.class,
+        TestCallable.class,
+        TestResultCallable.class,
+        SyncRetryStrategyTest.class,
+        AllBaseTests.class,
+        UsualClientTest.class
+    })
+public final class AllNewzkTests {
+}
diff --git a/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/client/zookeeper/AllBaseTests.java b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/client/zookeeper/AllBaseTests.java
new file mode 100644
index 00000000000..f39f19fd916
--- /dev/null
+++ b/sharding-orchestration/sharding-orchestration-reg/src/test/java/io/shardingsphere/orchestration/reg/newzk/client/zookeeper/AllBaseTests.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2016-2018 shardingsphere.io.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * </p>
+ */
+
+package io.shardingsphere.orchestration.reg.newzk.client.zookeeper;
+
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.BaseClientTest;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.BaseTest;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.StartWaitTest;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.TestClient;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.TestHolder;
+import io.shardingsphere.orchestration.reg.newzk.client.zookeeper.base.TestSupport;
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+        BaseClientTest.class,
+        BaseTest.class,
+        StartWaitTest.class,
+        TestClient.class,
+        TestHolder.class,
+        TestSupport.class
+    })
+public final class AllBaseTests {
+}",add new test,Refactor test suites for orchestration module.,"""Move orchestration tests to orchestration-jdbc and orchestration-reg modules""","""Refactor tests and move classes to different packages""

This commit involves moving and renaming several test classes across different packages. For example, classes from the 'sharding-orchestration-core' package are moved to the 'sharding-orchestration-jdbc' package, and some classes are moved to new packages like 'io.shardingsphere.jdbc.orchestration.api.yaml'. Additionally, a few test suite classes are created to run all the tests in their respective packages. This refactoring might be done to better organize the tests, align them with the application's package structure, or to prepare for future updates.","""Refactor test suites and structure: Move and rename test classes, reorganize into appropriate packages for better modularity."""
"diff --git a/metrics-proxy/src/main/resources/configdefinitions/telegraf.def b/metrics-proxy/src/main/resources/configdefinitions/telegraf.def
index 9f62252e0bf..f3b5db35d52 100644
--- a/metrics-proxy/src/main/resources/configdefinitions/telegraf.def
+++ b/metrics-proxy/src/main/resources/configdefinitions/telegraf.def
@@ -9,12 +9,12 @@ intervalSeconds int default=60
 vespa.consumer string default=""default""
 
 
-cloudWatch.region string default=""us-east-1""
-cloudWatch.namespace string
+cloudWatch[].region string default=""us-east-1""
+cloudWatch[].namespace string
 
 # Only valid and required for hosted Vespa
-cloudWatch.accessKeyName string default=""""
-cloudWatch.secretKeyName string default=""""
+cloudWatch[].accessKeyName string default=""""
+cloudWatch[].secretKeyName string default=""""
 
 # Only valid and optional for self-hosted Vespa
-cloudWatch.profile string default=""""
+cloudWatch[].profile string default=""""",Declare 3rd party system an array to allow none and multiple .,"""Support multiple CloudWatch configurations in Telegraf""","""Allow multiple cloudWatch configurations""

This commit message accurately reflects the changes made in the diff, which allows for multiple cloudWatch configurations by changing the field names from singular to plural and adding square brackets to indicate an array.","""Update Telegraf configuration definitions to support multiple CloudWatch configurations""

Explanation: The changes in the configuration file allow for multiple CloudWatch configurations by changing the single ""cloudWatch"" configuration block to an array of ""cloudWatch"" configurations. This is indicated by the addition of square brackets ([]) to the ""cloudWatch"" configuration block name, and the addition of the same square brackets to each of the nested configuration options. This allows for multiple CloudWatch configurations to be specified, each with their own region, namespace, access key name, secret key name, and profile.","""Convert cloudWatch configs to an array format for multi-region support"""
"diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNISupport.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNISupport.java
new file mode 100644
index 00000000000..ddbc7b71973
--- /dev/null
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNISupport.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package com.oracle.svm.jni;
+
+public class JNISupport {
+    public boolean isArrayLayout(Class<?> clazz) {
+        return clazz.isArray();
+    }
+}
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNIThreadLocalPinnedObjects.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNIThreadLocalPinnedObjects.java
index 76d6eada12b..d93e7ab170f 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNIThreadLocalPinnedObjects.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNIThreadLocalPinnedObjects.java
@@ -26,6 +26,7 @@ package com.oracle.svm.jni;
 
 import java.util.function.Predicate;
 
+import org.graalvm.nativeimage.ImageSingletons;
 import org.graalvm.nativeimage.PinnedObject;
 import org.graalvm.word.PointerBase;
 
@@ -54,6 +55,13 @@ public class JNIThreadLocalPinnedObjects {
         return pin.addressOfArrayElement(0);
     }
 
+    /**
+     * Unpins the first object in the pinned objects list matching a predicate.
+     * 
+     * @param p Predicate determining whether to unpin an object.
+     * @return {@code true} if an object was unpinned, {@code false} if no object in the pinned
+     *         objects list matched the predicate.
+     */
     private static boolean unpinFirst(Predicate<PinnedObjectListNode> p) {
         PinnedObjectListNode previous = null;
         PinnedObjectListNode current = pinnedObjectsListHead.get();
@@ -78,7 +86,8 @@ public class JNIThreadLocalPinnedObjects {
     }
 
     public static boolean unpinArrayByAddress(PointerBase address) {
-        return unpinFirst(n -> n.object.getObject().getClass().isArray() && n.object.addressOfArrayElement(0) == address);
+        JNISupport support = ImageSingletons.lookup(JNISupport.class);
+        return unpinFirst(n -> support.isArrayLayout(n.object.getObject().getClass()) && n.object.addressOfArrayElement(0) == address);
     }
 
     static int pinnedObjectCount() {
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/access/JNIAccessFeature.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/access/JNIAccessFeature.java
index d2028cb8945..39614d3de16 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/access/JNIAccessFeature.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/access/JNIAccessFeature.java
@@ -65,6 +65,7 @@ import com.oracle.svm.hosted.config.ConfigurationParserUtils;
 import com.oracle.svm.hosted.meta.MaterializedConstantFields;
 import com.oracle.svm.hosted.substitute.SubstitutionReflectivityFilter;
 import com.oracle.svm.jni.JNIJavaCallWrappers;
+import com.oracle.svm.jni.JNISupport;
 import com.oracle.svm.jni.hosted.JNICallTrampolineMethod;
 import com.oracle.svm.jni.hosted.JNIFieldAccessorMethodFactory;
 import com.oracle.svm.jni.hosted.JNIJavaCallWrapperMethod;
@@ -161,6 +162,9 @@ public class JNIAccessFeature implements Feature {
         if (!ImageSingletons.contains(JNIFieldAccessorMethodFactory.class)) {
             ImageSingletons.add(JNIFieldAccessorMethodFactory.class, new JNIFieldAccessorMethodFactory());
         }
+        if (!ImageSingletons.contains(JNISupport.class)) {
+            ImageSingletons.add(JNISupport.class, new JNISupport());
+        }
 
         BeforeAnalysisAccessImpl access = (BeforeAnalysisAccessImpl) arg;
         this.nativeLibraries = access.getNativeLibraries();
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctionTablesFeature.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctionTablesFeature.java
index 95b4a4ec0aa..ca6a3381ecb 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctionTablesFeature.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctionTablesFeature.java
@@ -112,7 +112,7 @@ public class JNIFunctionTablesFeature implements Feature {
         AnalysisType invokes = metaAccess.lookupJavaType(JNIInvocationInterface.class);
         AnalysisType exports = metaAccess.lookupJavaType(JNIInvocationInterface.Exports.class);
         AnalysisType functions = metaAccess.lookupJavaType(JNIFunctions.class);
-        Stream<AnalysisMethod> analysisMethods = Stream.of(invokes, functions, exports).flatMap(t -> Stream.of(t.getDeclaredMethods()));
+        Stream<AnalysisMethod> analysisMethods = Stream.of(invokes, functions, exports).flatMap(type -> Stream.of(type.getDeclaredMethods()));
         Stream<AnalysisMethod> unimplementedMethods = Stream.of((AnalysisMethod) getSingleMethod(metaAccess, UnimplementedWithJNIEnvArgument.class),
                         (AnalysisMethod) getSingleMethod(metaAccess, UnimplementedWithJavaVMArgument.class));
         Stream.concat(analysisMethods, unimplementedMethods).forEach(method -> {
@@ -207,8 +207,7 @@ public class JNIFunctionTablesFeature implements Feature {
     private void fillJNIFunctionsTable(CompilationAccessImpl access, CFunctionPointer[] table, CFunctionPointer defaultValue) {
         initializeFunctionPointerTable(access, table, defaultValue);
 
-        Class<JNIFunctions> clazz = JNIFunctions.class;
-        HostedType functions = access.getMetaAccess().lookupJavaType(clazz);
+        HostedType functions = access.getMetaAccess().lookupJavaType(JNIFunctions.class);
         HostedMethod[] methods = functions.getDeclaredMethods();
         for (HostedMethod method : methods) {
             StructFieldInfo field = findFieldFor(functionTableMetadata, method.getName());
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctions.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctions.java
index fae5885afa5..7d63dd8e709 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctions.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/functions/JNIFunctions.java
@@ -134,7 +134,7 @@ import sun.misc.Unsafe;
  *      Native Interface Specification: JNI Functions</a>
  */
 @SuppressWarnings(""unused"")
-final class JNIFunctions {
+public final class JNIFunctions {
 
     // Checkstyle: stop
 
@@ -976,7 +976,7 @@ final class JNIFunctions {
      * Helper code for JNI functions. This is an inner class because the outer methods must match
      * JNI functions.
      */
-    static class Support {
+    public static class Support {
         static class JNIEnvEnterReturnEDetachedOnFailurePrologue {
             public static void enter(JNIEnvironment env) {
                 int error = CEntryPointActions.enter((IsolateThread) env);
@@ -1016,7 +1016,7 @@ final class JNIFunctions {
         static final CGlobalData<CCharPointer> JNIENV_ENTER_FAIL_FATALLY_MESSAGE = CGlobalDataFactory.createCString(
                         ""A JNI call failed to enter the isolate via its JNI environment argument. The environment might be invalid or no longer exists."");
 
-        static class JNIEnvEnterFatalOnFailurePrologue {
+        public static class JNIEnvEnterFatalOnFailurePrologue {
             public static void enter(JNIEnvironment env) {
                 int error = CEntryPointActions.enter((IsolateThread) env);
                 if (error != 0) {
@@ -1041,7 +1041,7 @@ final class JNIFunctions {
             }
         }
 
-        static class JNIExceptionHandlerVoid {
+        public static class JNIExceptionHandlerVoid {
             static void handle(Throwable t) {
                 Support.handleException(t);
             }",Move JNI unpinning layout decision to support object,"""Extract JNISupport class and refactor JNI-related code""","The commit message should be:

""Add JNISupport class and use it to determine array layout in JNI code""

This commit message accurately summarizes the changes made in the diff, which include adding a new class `JNISupport` and using it to replace the direct use of `clazz.isArray()` in several places.","The commit message could be:

```
Add JNISupport class and update JNIAccessFeature and JNIFunctionTablesFeature

- Add a new class JNISupport with a method isArrayLayout to check if a class is an array.
- Update JNIAccessFeature to add JNISupport to the ImageSingletons during the before analysis phase.
- Update JNIFunctionTablesFeature to use the HostedType for JNIFunctions instead of the Class object.
- Update JNIFunctions to make the Support inner class public and the JNIEnvEnterFatalOnFailurePrologue inner class of Support public as well.
```",Added JNISupport class and integrated it with JNIThreadLocalPinnedObjects for improved array handling and exception handling visibility
"diff --git a/make/lib/Lib-jdk.net.gmk b/make/lib/Lib-jdk.net.gmk
index b0859339f95..d1e35e82d4d 100644
--- a/make/lib/Lib-jdk.net.gmk
+++ b/make/lib/Lib-jdk.net.gmk
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it
@@ -35,7 +35,7 @@ ifeq ($(OPENJDK_TARGET_OS), solaris)
       SRC := $(TOPDIR)/src/jdk.net/solaris/native/libextnet, \
       OPTIMIZATION := LOW, \
       CFLAGS := $(CFLAGS_JDKLIB) -I$(SUPPORT_OUTPUTDIR)/headers/jdk.net, \
-      MAPFILE := $(TOPDIR)/make/mapfiles/libextnet/mapfile-vers, \
+      MAPFILE := $(TOPDIR)/make/mapfiles/libextnet/mapfile-solaris, \
       LDFLAGS := $(LDFLAGS_JDKLIB) \
           $(call SET_SHARED_LIBRARY_ORIGIN), \
       LIBS := -lsocket -lc -ljava, \
@@ -48,4 +48,25 @@ ifeq ($(OPENJDK_TARGET_OS), solaris)
 endif
 
 
+ifeq ($(OPENJDK_TARGET_OS), linux)
+
+  $(eval $(call SetupNativeCompilation, BUILD_LIBEXTNET, \
+      LIBRARY := extnet, \
+      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
+      SRC := $(TOPDIR)/src/jdk.net/linux/native/libextnet, \
+      OPTIMIZATION := LOW, \
+      CFLAGS := $(CFLAGS_JDKLIB) -I$(SUPPORT_OUTPUTDIR)/headers/jdk.net, \
+      MAPFILE := $(TOPDIR)/make/mapfiles/libextnet/mapfile-linux, \
+      LDFLAGS := $(LDFLAGS_JDKLIB) \
+          $(call SET_SHARED_LIBRARY_ORIGIN), \
+      LIBS := -ljvm -ljava -lc, \
+      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libextnet, \
+  ))
+
+  $(BUILD_LIBEXTNET): $(call FindLib, java.base, java)
+
+  TARGETS += $(BUILD_LIBEXTNET)
+endif
+
+
 ################################################################################
diff --git a/make/mapfiles/libextnet/mapfile-linux b/make/mapfiles/libextnet/mapfile-linux
new file mode 100644
index 00000000000..7e47c863824
--- /dev/null
+++ b/make/mapfiles/libextnet/mapfile-linux
@@ -0,0 +1,33 @@
+#
+# Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# This code is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License version 2 only, as
+# published by the Free Software Foundation.  Oracle designates this
+# particular file as subject to the ""Classpath"" exception as provided
+# by Oracle in the LICENSE file that accompanied this code.
+#
+# This code is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# version 2 for more details (a copy is included in the LICENSE file that
+# accompanied this code).
+#
+# You should have received a copy of the GNU General Public License version
+# 2 along with this work; if not, write to the Free Software Foundation,
+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+#
+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+# or visit www.oracle.com if you need additional information or have any
+# questions.
+#
+
+SUNWprivate_1.1 {
+	global:
+    	Java_jdk_net_LinuxSocketOptions_setQuickAck0;
+    	Java_jdk_net_LinuxSocketOptions_getQuickAck0;
+    	Java_jdk_net_LinuxSocketOptions_quickAckSupported0;
+	local:
+	    *;
+};
diff --git a/make/mapfiles/libextnet/mapfile-vers b/make/mapfiles/libextnet/mapfile-solaris
similarity index 95%
rename from make/mapfiles/libextnet/mapfile-vers
rename to make/mapfiles/libextnet/mapfile-solaris
index 5dbc5b960aa..d43f9280c26 100644
--- a/make/mapfiles/libextnet/mapfile-vers
+++ b/make/mapfiles/libextnet/mapfile-solaris
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it
diff --git a/src/java.base/unix/classes/java/net/PlainDatagramSocketImpl.java b/src/java.base/unix/classes/java/net/PlainDatagramSocketImpl.java
index 32640dff272..22e96848050 100644
--- a/src/java.base/unix/classes/java/net/PlainDatagramSocketImpl.java
+++ b/src/java.base/unix/classes/java/net/PlainDatagramSocketImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -85,10 +85,18 @@ protected <T> T getOption(SocketOption<T> name) throws IOException {
 
     protected Set<SocketOption<?>> supportedOptions() {
         HashSet<SocketOption<?>> options = new HashSet<>(super.supportedOptions());
-        options.addAll(extendedOptions.options());
+        addExtSocketOptions(extendedOptions.options(), options);
         return options;
     }
 
+    private void addExtSocketOptions(Set<SocketOption<?>> extOptions,
+                                     Set<SocketOption<?>> options) {
+        // TCP_QUICKACK is applicable for TCP Sockets only.
+        extOptions.stream()
+                .filter((option) -> !option.name().equals(""TCP_QUICKACK""))
+                .forEach((option) -> options.add(option));
+    }
+
     protected void socketSetOption(int opt, Object val) throws SocketException {
         if (opt == SocketOptions.SO_REUSEPORT &&
             !supportedOptions().contains(StandardSocketOptions.SO_REUSEPORT)) {
diff --git a/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java b/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
new file mode 100644
index 00000000000..353dd5e6b8c
--- /dev/null
+++ b/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package jdk.net;
+
+import java.net.SocketException;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import jdk.net.ExtendedSocketOptions.PlatformSocketOptions;
+
+class LinuxSocketOptions extends PlatformSocketOptions {
+
+    public LinuxSocketOptions() {
+    }
+
+    @Override
+    void setQuickAck(int fd, boolean on) throws SocketException {
+        setQuickAck0(fd, on);
+    }
+
+    @Override
+    boolean getQuickAck(int fd) throws SocketException {
+        return getQuickAck0(fd);
+    }
+
+    @Override
+    public boolean quickAckSupported() {
+        return quickAckSupported0();
+    }
+
+    native static private void setQuickAck0(int fd, boolean on) throws SocketException;
+
+    native static private boolean getQuickAck0(int fd) throws SocketException;
+
+    native static private boolean quickAckSupported0();
+
+    static {
+        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
+            System.loadLibrary(""extnet"");
+            return null;
+        });
+    }
+}
diff --git a/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c b/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
new file mode 100644
index 00000000000..2beee6a5290
--- /dev/null
+++ b/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+#include <sys/socket.h>
+#include <string.h>
+#include <errno.h>
+#include <unistd.h>
+
+#include <jni.h>
+#include <netinet/tcp.h>
+#include ""jni_util.h""
+
+/*
+ * Class:     jdk_net_LinuxSocketOptions
+ * Method:    setQuickAck
+ * Signature: (II)V
+ */
+JNIEXPORT void JNICALL Java_jdk_net_LinuxSocketOptions_setQuickAck0
+(JNIEnv *env, jobject unused, jint fd, jboolean on) {
+    int optval;
+    int rv;
+    optval = (on ? 1 : 0);
+    rv = setsockopt(fd, SOL_SOCKET, TCP_QUICKACK, &optval, sizeof (optval));
+    if (rv < 0) {
+        if (errno == ENOPROTOOPT) {
+            JNU_ThrowByName(env, ""java/lang/UnsupportedOperationException"",
+                            ""unsupported socket option"");
+        } else {
+            JNU_ThrowByNameWithLastError(env, ""java/net/SocketException"",
+                                        ""set option TCP_QUICKACK failed"");
+        }
+    }
+}
+
+/*
+ * Class:     jdk_net_LinuxSocketOptions
+ * Method:    getQuickAck
+ * Signature: (I)Z;
+ */
+JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_getQuickAck0
+(JNIEnv *env, jobject unused, jint fd) {
+    int on;
+    socklen_t sz = sizeof (on);
+    int rv = getsockopt(fd, SOL_SOCKET, TCP_QUICKACK, &on, &sz);
+    if (rv < 0) {
+        if (errno == ENOPROTOOPT) {
+            JNU_ThrowByName(env, ""java/lang/UnsupportedOperationException"",
+                            ""unsupported socket option"");
+        } else {
+            JNU_ThrowByNameWithLastError(env, ""java/net/SocketException"",
+                                        ""get option TCP_QUICKACK failed"");
+        }
+    }
+    return on != 0;
+}
+
+/*
+ * Class:     jdk_net_LinuxSocketOptions
+ * Method:    quickAckSupported
+ * Signature: ()Z
+ */
+JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_quickAckSupported0
+(JNIEnv *env, jobject unused) {
+    int one = 1;
+    int rv, s;
+    s = socket(PF_INET, SOCK_STREAM, 0);
+    if (s < 0) {
+        return JNI_FALSE;
+    }
+    rv = setsockopt(s, SOL_SOCKET, TCP_QUICKACK, (void *) &one, sizeof (one));
+    if (rv != 0 && errno == ENOPROTOOPT) {
+        rv = JNI_FALSE;
+    } else {
+        rv = JNI_TRUE;
+    }
+    close(s);
+    return rv;
+}
diff --git a/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java b/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
index bcae6ce2251..784d018e3a3 100644
--- a/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
+++ b/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -67,20 +67,53 @@ private ExtendedSocketOptions() { }
     public static final SocketOption<SocketFlow> SO_FLOW_SLA = new
         ExtSocketOption<SocketFlow>(""SO_FLOW_SLA"", SocketFlow.class);
 
+    /**
+     * Disable Delayed Acknowledgements.
+     *
+     * <p>
+     * This socket option can be used to reduce or disable delayed
+     * acknowledgments (ACKs). When {@code TCP_QUICKACK} is enabled, ACKs are
+     * sent immediately, rather than delayed if needed in accordance to normal
+     * TCP operation. This option is not permanent, it only enables a switch to
+     * or from {@code TCP_QUICKACK} mode. Subsequent operations of the TCP
+     * protocol will once again disable/enable {@code TCP_QUICKACK} mode
+     * depending on internal protocol processing and factors such as delayed ACK
+     * timeouts occurring and data transfer, therefore this option needs to be
+     * set with {@code setOption} after each operation of TCP on a given socket.
+     *
+     * <p>
+     * The value of this socket option is a {@code Boolean} that represents
+     * whether the option is enabled or disabled. The socket option is specific
+     * to stream-oriented sockets using the TCP/IP protocol. The exact semantics
+     * of this socket option are socket type and system dependent.
+     *
+     * @since 10
+     */
+    public static final SocketOption<Boolean> TCP_QUICKACK =
+            new ExtSocketOption<Boolean>(""TCP_QUICKACK"", Boolean.class);
 
     private static final PlatformSocketOptions platformSocketOptions =
             PlatformSocketOptions.get();
 
     private static final boolean flowSupported =
             platformSocketOptions.flowSupported();
+    private static final boolean quickAckSupported =
+            platformSocketOptions.quickAckSupported();
 
     private static final Set<SocketOption<?>> extendedOptions = options();
 
     static Set<SocketOption<?>> options() {
-        if (flowSupported)
-            return Set.of(SO_FLOW_SLA);
-        else
+        if (flowSupported) {
+            if (quickAckSupported) {
+                return Set.of(SO_FLOW_SLA, TCP_QUICKACK);
+            } else {
+                return Set.of(SO_FLOW_SLA);
+            }
+        } else if (quickAckSupported) {
+            return Set.of(TCP_QUICKACK);
+        } else {
             return Collections.<SocketOption<?>>emptySet();
+        }
     }
 
     static {
@@ -105,6 +138,8 @@ public void setOption(FileDescriptor fd,
                     assert flowSupported;
                     SocketFlow flow = checkValueType(value, option.type());
                     setFlowOption(fd, flow);
+                } else if (option == TCP_QUICKACK) {
+                    setQuickAckOption(fd, (boolean) value);
                 } else {
                     throw new InternalError(""Unexpected option "" + option);
                 }
@@ -127,6 +162,8 @@ public Object getOption(FileDescriptor fd,
                     SocketFlow flow = SocketFlow.create();
                     getFlowOption(fd, flow);
                     return flow;
+                } else if (option == TCP_QUICKACK) {
+                    return getQuickAckOption(fd);
                 } else {
                     throw new InternalError(""Unexpected option "" + option);
                 }
@@ -156,12 +193,21 @@ private static void setFlowOption(FileDescriptor fd, SocketFlow f)
     }
 
     private static void getFlowOption(FileDescriptor fd, SocketFlow f)
-        throws SocketException
-    {
+            throws SocketException {
         int status = platformSocketOptions.getFlowOption(fdAccess.get(fd), f);
         f.status(status);  // augment the given flow with the status
     }
 
+    private static void setQuickAckOption(FileDescriptor fd, boolean enable)
+            throws SocketException {
+        platformSocketOptions.setQuickAck(fdAccess.get(fd), enable);
+    }
+
+    private static Object getQuickAckOption(FileDescriptor fd)
+            throws SocketException {
+        return platformSocketOptions.getQuickAck(fdAccess.get(fd));
+    }
+
     static class PlatformSocketOptions {
 
         protected PlatformSocketOptions() {}
@@ -184,9 +230,13 @@ public String run() {
                             return System.getProperty(""os.name"");
                         }
                     });
-            if (""SunOS"".equals(osname))
+            if (""SunOS"".equals(osname)) {
                 return newInstance(""jdk.net.SolarisSocketOptions"");
-            return new PlatformSocketOptions();
+            } else if (""Linux"".equals(osname)) {
+                return newInstance(""jdk.net.LinuxSocketOptions"");
+            } else {
+                return new PlatformSocketOptions();
+            }
         }
 
         private static final PlatformSocketOptions instance = create();
@@ -208,5 +258,17 @@ int getFlowOption(int fd, SocketFlow f) throws SocketException {
         boolean flowSupported() {
             return false;
         }
+
+        void setQuickAck(int fd, boolean on) throws SocketException {
+            throw new UnsupportedOperationException(""unsupported TCP_QUICKACK option"");
+        }
+
+        boolean getQuickAck(int fd) throws SocketException {
+            throw new UnsupportedOperationException(""unsupported TCP_QUICKACK option"");
+        }
+
+        boolean quickAckSupported() {
+            return false;
+        }
     }
 }
diff --git a/src/jdk.net/share/classes/jdk/net/Sockets.java b/src/jdk.net/share/classes/jdk/net/Sockets.java
index 983fe38956f..b1d003da4ac 100644
--- a/src/jdk.net/share/classes/jdk/net/Sockets.java
+++ b/src/jdk.net/share/classes/jdk/net/Sockets.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -279,6 +279,9 @@ private static Map<Class<?>,Set<SocketOption<?>>> optionSets() {
         if (flowsupported) {
             set.add(ExtendedSocketOptions.SO_FLOW_SLA);
         }
+        if (QuickAck.available) {
+            set.add(ExtendedSocketOptions.TCP_QUICKACK);
+        }
         set = Collections.unmodifiableSet(set);
         options.put(Socket.class, set);
 
@@ -290,6 +293,9 @@ private static Map<Class<?>,Set<SocketOption<?>>> optionSets() {
         if (reuseportsupported) {
             set.add(StandardSocketOptions.SO_REUSEPORT);
         }
+        if (QuickAck.available) {
+            set.add(ExtendedSocketOptions.TCP_QUICKACK);
+        }
         set.add(StandardSocketOptions.IP_TOS);
         set = Collections.unmodifiableSet(set);
         options.put(ServerSocket.class, set);
@@ -331,4 +337,17 @@ private static Map<Class<?>,Set<SocketOption<?>>> optionSets() {
 
         return Collections.unmodifiableMap(options);
     }
+
+    /**
+     * Tells whether TCP_QUICKACK is supported.
+     */
+    static class QuickAck {
+
+        static final boolean available;
+
+        static {
+            Set<SocketOption<?>> s = new Socket().supportedOptions();
+            available = s.contains(ExtendedSocketOptions.TCP_QUICKACK);
+        }
+    }
 }
diff --git a/test/jdk/jdk/net/Sockets/QuickAckTest.java b/test/jdk/jdk/net/Sockets/QuickAckTest.java
new file mode 100644
index 00000000000..b1d9f899c24
--- /dev/null
+++ b/test/jdk/jdk/net/Sockets/QuickAckTest.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+ /*
+ * @test
+ * @bug 8145635
+ * @summary Add TCP_QUICKACK socket option
+ * @modules jdk.net
+ * @run main QuickAckTest
+ */
+import java.io.IOException;
+import java.net.DatagramSocket;
+import java.net.MulticastSocket;
+import java.net.ServerSocket;
+import java.net.Socket;
+import jdk.net.ExtendedSocketOptions;
+import jdk.net.Sockets;
+
+public class QuickAckTest {
+
+    private static final String LOCAL_HOST = ""127.0.0.1"";
+
+    public static void main(String args[]) throws IOException {
+
+        try (ServerSocket ss = new ServerSocket(0);
+                Socket s = new Socket(LOCAL_HOST, ss.getLocalPort());
+                DatagramSocket ds = new DatagramSocket(0);
+                MulticastSocket mc = new MulticastSocket(0)) {
+
+            if (ss.supportedOptions().contains(ExtendedSocketOptions.TCP_QUICKACK)) {
+                Sockets.setOption(ss, ExtendedSocketOptions.TCP_QUICKACK, true);
+                if (!ss.getOption(ExtendedSocketOptions.TCP_QUICKACK)) {
+                    throw new RuntimeException(""Test failed, TCP_QUICKACK should""
+                            + "" have been set"");
+                }
+            }
+            if (s.supportedOptions().contains(ExtendedSocketOptions.TCP_QUICKACK)) {
+                Sockets.setOption(s, ExtendedSocketOptions.TCP_QUICKACK, true);
+                if (!s.getOption(ExtendedSocketOptions.TCP_QUICKACK)) {
+                    throw new RuntimeException(""Test failed, TCP_QUICKACK should""
+     ",Add TCP_QUICKACK socket option .,Add TCP_QUICKACK socket option,"Add TCP_QUICKACK socket option for Linux

This commit adds support for the TCP_QUICKACK socket option on Linux, which allows for immediate acknowledgments (ACKs) to be sent on a TCP socket. The option is supported on Linux and is added to the ExtendedSocketOptions class. The commit also includes a new test case, QuickAckTest, to verify the functionality of the TCP_QUICKACK option.","The commit message could be:

""Add TCP_QUICKACK socket option for Linux

This commit adds a new socket option called TCP_QUICKACK for Linux. This option can be used to reduce or disable delayed acknowledgments (ACKs) for stream-oriented sockets using the TCP/IP protocol. The new option is added to the ExtendedSocketOptions class and a native implementation is provided in the LinuxSocketOptions class. A new mapfile is also added for the native library.

JDK-8145635""

Changes include:

* Adding a new SocketOption called TCP_QUICKACK in the ExtendedSocketOptions class.
* Adding a native implementation for setting and getting the TCP_QUICKACK option in the LinuxSocketOptions class.
* Adding a new mapfile for the native library in the makefiles directory.
* Updating the PlainDatagramSocketImpl class to include the new option in the supportedOptions method.
* Adding a new test class called QuickAckTest to test the new option.

The changes affect the following files:

* src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
* src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
* src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
* src/java.base/unix/classes/java/net/PlainDatagramSocketImpl.java
* test/jdk/jdk/net/Sockets/QuickAckTest.java
* make/mapfiles/libextnet/mapfile-linux

The changes are related to JDK-8145635.","Add support for the TCP_QUICKACK socket option on Linux systems. Update build files, mapfiles, and add tests."
"diff --git a/app/src/main/java/eu/faircode/email/ServiceSynchronize.java b/app/src/main/java/eu/faircode/email/ServiceSynchronize.java
index 75036c7676..250e5e8dae 100644
--- a/app/src/main/java/eu/faircode/email/ServiceSynchronize.java
+++ b/app/src/main/java/eu/faircode/email/ServiceSynchronize.java
@@ -848,8 +848,7 @@ public class ServiceSynchronize extends LifecycleService {
 
                         List<String> keywords = new ArrayList<>();
                         for (String keyword : ifolder.getPermanentFlags().getUserFlags())
-                            if (!keyword.startsWith(""$""))
-                                keywords.add(keyword);
+                            keywords.add(keyword);
            ",Get all IMAP folder user flags,"""Remove filter for user flags starting with '$' in ServiceSynchronize""","""Remove unnecessary keyword filtering in ServiceSynchronize""

This commit message is concise and accurately describes the change made in the code. It mentions the specific class and method affected by the change, and explains the purpose of the change.","""Removed condition checking for keyword starting with '$' in ServiceSynchronize.java""

This commit removes the condition that checks if a keyword starts with ""$"" before adding it to the `keywords` list in the `ServiceSynchronize.java` file. Now, all user flags, regardless of whether they start with ""$"" or not, will be added to the `keywords` list.","Removed the condition to exclude certain keywords that start with ""$"" in ServiceSynchronize.java."
"diff --git a/debian/control b/debian/control
index 1d49d08e0..58f9a66b2 100644
--- a/debian/control
+++ b/debian/control
@@ -8,7 +8,7 @@ Standards-Version: 3.7.2
 Package: yacy
 Architecture: all
 Depends: java8-runtime-headless, sudo, debconf
-Suggests: curl | wget
+Suggests: curl | wget, wkhtmltopdf, imagemagick, xvfb, ghostscript
 Description: Peer-to-Peer Web Search Engine
  YaCy is a Java-based peer-to-peer search engine.
  It provides a personal web search engine, which is",Updated Debian optional dependencies with the ones used for snapshots,"""Add dependencies for improved rendering and PDF generation in YaCy""","""Added additional dependencies for YaCy search engine""","""Added wkhtmltopdf, imagemagick, xvfb, and ghostscript to Suggests in debian/control for the yacy package""

This commit message describes the change that was made to the file, which is the addition of four new suggested packages (wkhtmltopdf, imagemagick, xvfb, and ghostscript) to the ""Suggests"" field in the debian/control file for the yacy package. The ""Suggests"" field lists packages that are not strictly required for the main package to function, but which may enhance its functionality or provide additional features. In this case, the added packages may provide additional functionality for the YaCy peer-to-peer search engine.","Added additional suggested packages (wkhtmltopdf, imagemagick, xvfb, ghostscript) to the yacy package in debian/control"
"diff --git a/searchcore/CMakeLists.txt b/searchcore/CMakeLists.txt
index 273ae940770..5634cde969e 100644
--- a/searchcore/CMakeLists.txt
+++ b/searchcore/CMakeLists.txt
@@ -74,7 +74,6 @@ vespa_define_module(
     src/tests/proton/common/document_type_inspector
     src/tests/proton/common/hw_info_sampler
     src/tests/proton/common/state_reporter_utils
-    src/tests/proton/config
     src/tests/proton/docsummary
     src/tests/proton/document_iterator
     src/tests/proton/documentdb
@@ -120,6 +119,7 @@ vespa_define_module(
     src/tests/proton/persistenceconformance
     src/tests/proton/persistenceengine
     src/tests/proton/proton
+    src/tests/proton/proton_config_fetcher
     src/tests/proton/proton_configurer
     src/tests/proton/reference/gid_to_lid_change_handler
     src/tests/proton/reference/gid_to_lid_change_listener
diff --git a/searchcore/src/tests/proton/config/CMakeLists.txt b/searchcore/src/tests/proton/config/CMakeLists.txt
deleted file mode 100644
index fead8787d37..00000000000
--- a/searchcore/src/tests/proton/config/CMakeLists.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-# Copyright 2016 Yahoo Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-vespa_add_executable(searchcore_config_test_app TEST
-    SOURCES
-    config_test.cpp
-    DEPENDS
-    searchcore_server
-    searchcore_fconfig
-)
-vespa_add_test(NAME searchcore_config_test_app COMMAND searchcore_config_test_app)
diff --git a/searchcore/src/tests/proton/config/.cvsignore b/searchcore/src/tests/proton/proton_config_fetcher/.cvsignore
similarity index 100%
rename from searchcore/src/tests/proton/config/.cvsignore
rename to searchcore/src/tests/proton/proton_config_fetcher/.cvsignore
diff --git a/searchcore/src/tests/proton/config/.gitignore b/searchcore/src/tests/proton/proton_config_fetcher/.gitignore
similarity index 100%
rename from searchcore/src/tests/proton/config/.gitignore
rename to searchcore/src/tests/proton/proton_config_fetcher/.gitignore
diff --git a/searchcore/src/tests/proton/proton_config_fetcher/CMakeLists.txt b/searchcore/src/tests/proton/proton_config_fetcher/CMakeLists.txt
new file mode 100644
index 00000000000..bdec36ea2ca
--- /dev/null
+++ b/searchcore/src/tests/proton/proton_config_fetcher/CMakeLists.txt
@@ -0,0 +1,9 @@
+# Copyright 2016 Yahoo Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
+vespa_add_executable(searchcore_proton_config_fetcher_test_app TEST
+    SOURCES
+    proton_config_fetcher_test.cpp
+    DEPENDS
+    searchcore_server
+    searchcore_fconfig
+)
+vespa_add_test(NAME searchcore_proton_config_fetcher_test_app COMMAND searchcore_proton_config_fetcher_test_app)
diff --git a/searchcore/src/tests/proton/config/config_test.cpp b/searchcore/src/tests/proton/proton_config_fetcher/proton_config_fetcher_test.cpp
similarity index 100%
rename from searchcore/src/tests/proton/config/config_test.cpp
rename to searchcore/src/tests/proton/proton_config_fetcher/proton_config_fetcher_test.cpp",Rename unit test to track rename of tested class .,"""Rename and refactor proton config test to proton_config_fetcher""","""Remove searchcore_config_test_app and add proton_config_fetcher test""","""Move config_test.cpp from searchcore/src/tests/proton/config to searchcore/src/tests/proton/proton_config_fetcher and update CMakeLists.txt accordingly""",Rename config tests to proton_config_fetcher and update CMakeLists accordingly. Remove obsolete config path and dependencies.
"diff --git a/test/com/google/javascript/jscomp/InferConstsTest.java b/test/com/google/javascript/jscomp/InferConstsTest.java
index 72413469b..e2ed9e7bd 100644
--- a/test/com/google/javascript/jscomp/InferConstsTest.java
+++ b/test/com/google/javascript/jscomp/InferConstsTest.java
@@ -85,6 +85,16 @@ public final class InferConstsTest extends TestCase {
     testConsts(""for (const x of {a, b, c}) {}"", ""x"");
   }
 
+  public void testFunctionParam() {
+    testConsts(""var x = function(){};"", ""x"");
+    testConsts(""var x = ()=>{};"", ""x"");
+    testConsts(""function fn(a){var b = a + 1}; "", ""a"", ""b"");
+    testConsts(""function fn(a = 1){var b = a + 1}; "", ""a"", ""b"");
+    testConsts(""function fn(a, {b, c}){var d = a + 1}; "", ""a"", ""d"");
+    // TODO(user): Infer b and c to be const
+    testNotConsts(""function fn(a, {b, c}){var d = a + 1}; "", ""b"", ""c"");
+  }
+
   public void testClass() {
     testConsts(""var Foo = class {}"", ""Foo"");
     testConsts(""class Foo {}"", ""Foo"");","Added test on inferring constants on function parameters , including destructured param and default value . . - - - - - - - - - - - - - .","""Added tests for inferring const in function parameters""","""Added test cases for function parameters and class inference in InferConstsTest.""","""Added test cases for function parameters in InferConstsTest.java""

This commit message summarizes the changes made in the given diff. The added code includes several new test cases for the `InferConstsTest` class in the `test/com/google/javascript/jscomp/InferConstsTest.java` file. These new test cases check the behavior of the `InferConsts` function when applied to function parameters, including default parameters and destructured parameters. The `testFunctionParam` method was added to contain these new test cases, and a TODO comment was added to note that the `b` and `c` variables in one of the test cases are not currently inferred to be const.","Added tests for function parameters and default parameters to InferConstsTest.java, including cases for arrow functions and function declarations."
"diff --git a/qa/integration-tests-engine/pom.xml b/qa/integration-tests-engine/pom.xml
index b4d26f3902..7fa6f6af31 100644
--- a/qa/integration-tests-engine/pom.xml
+++ b/qa/integration-tests-engine/pom.xml
@@ -159,6 +159,24 @@
       <artifactId>camunda-connect-core</artifactId>
     </dependency>
 
+    <!-- explicit Spring dependencies for applications
+      that pack camunda-engine-spring -->
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-jdbc</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-tx</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-orm</artifactId>
+    </dependency>
     <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-web</artifactId>",add Spring dependencies .,"""Add explicit Spring dependencies for applications that pack camunda-engine-spring""",Added explicit Spring dependencies for applications that pack camunda-engine-spring.,"""Add explicit Spring dependencies for applications that pack camunda-engine-spring""",Added explicit Spring dependencies for applications using camunda-engine-spring in the integration-tests-engine's pom.xml.
"diff --git a/deploy/docker/README.md b/deploy/docker/README.md
index 4727a35f9c..7545df5394 100644
--- a/deploy/docker/README.md
+++ b/deploy/docker/README.md
@@ -149,7 +149,7 @@ you'll have output in your terminal like:
     ssh into master via:     ssh -i /tmp/id_rsa13436 -o UserKnownHostsFile=/dev/null -o     StrictHostKeyChecking=no root@172.17.0.10    
     you can also ssh into workers via the command above with the ip substituted    
     
-    after ssh into either master/worker, /root/tachyon_container is tachyon home
+    after ssh into either master/worker, /opt/tachyon_container is tachyon home
     
     to enable the host to resolve {'master', 'worker1', 'worker2'...} to corresponding ip, set 'nameserver     172.17.0.9' as first line in your host's /etc/resolv.conf    
     
diff --git a/deploy/docker/deploy/deploy.sh b/deploy/docker/deploy/deploy.sh
index 164627ca75..c8dafd8396 100755
--- a/deploy/docker/deploy/deploy.sh
+++ b/deploy/docker/deploy/deploy.sh
@@ -4,13 +4,13 @@ DEBUG=0
 NUM_WORKERS=2
 
 BASE_DIR=$(cd $(dirname $0); pwd)
-TACHYON_DIR=$(cd $BASE_DIR/../..; pwd)
+TACHYON_DIR=$(cd $BASE_DIR/../../..; pwd)
 
 
 # if deploy on a virtual machine, id_rsa's mode may be too open, 
 # ssh will then ignore this key, so we copy it to /tmp and change mode to 0600
 SSH_ID_RSA_DIR=/tmp/id_rsa${RANDOM}
-cp ${TACHYON_DIR}/docker/apache-hadoop-hdfs1.0.4-precise/files/id_rsa $SSH_ID_RSA_DIR
+cp ${TACHYON_DIR}/deploy/docker/apache-hadoop-hdfs1.0.4-precise/files/id_rsa $SSH_ID_RSA_DIR
 chmod 0600 $SSH_ID_RSA_DIR
 
 NAMESERVER_IMAGE=""dnsmasq-precise""
diff --git a/deploy/docker/deploy/start_tachyon_cluster.sh b/deploy/docker/deploy/start_tachyon_cluster.sh
index 04c5c7f8e0..be4e37e43a 100644
--- a/deploy/docker/deploy/start_tachyon_cluster.sh
+++ b/deploy/docker/deploy/start_tachyon_cluster.sh
@@ -47,7 +47,7 @@ function print_cluster_info() {
   echo ""ssh into master via:     ssh -i $SSH_ID_RSA_DIR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@${MASTER_IP}""
   echo ""you can also ssh into workers via the command above with the ip substituted""
   echo """"
-  echo ""after ssh into either master/worker, /root/tachyon_container is tachyon home""
+  echo ""after ssh into either master/worker, /opt/tachyon_container is tachyon home""
   echo """"
   echo ""to enable the host to resolve {'master', 'worker1', 'worker2'...} to corresponding ip, set 'nameserver $NAMESERVER_IP' as first line in your host's /etc/resolv.conf""
   echo """"",update docker due to directory hierarchy change,"""Update Tachyon home directory path in Docker deployment scripts""

This commit message accurately reflects the changes made in the diff, which involve updating the path to the Tachyon home directory in various Docker deployment scripts.","""Update Tachyon home directory in documentation and scripts to /opt/tachyon_container""","""Update Docker deployment: change Tachyon home directory to /opt/tachyon_container""

This commit updates the Docker deployment of Tachyon by changing the Tachyon home directory from ""/root/tachyon\_container"" to ""/opt/tachyon\_container"". This change affects both the README.md file and the deploy.sh script. Additionally, the path to the id\_rsa file has been updated in the deploy.sh script. The commit message suggests that these changes were made to improve the deployment process.",Updated Tachyon home path to /opt/tachyon_container and corrected directory references.
"diff --git a/eclipse.classpath b/eclipse.classpath
index 16bdd3692d..196136368e 100644
--- a/eclipse.classpath
+++ b/eclipse.classpath
@@ -7,7 +7,7 @@
    (the ""License""); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
-	   http://www.apache.org/licenses/LICENSE-2.0
+       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
@@ -15,12 +15,12 @@
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
-<!-- 
+<!--
    This is a sample Eclipse .classpath file, which can be used to help set up the proper .classpath.
    Note that the ""con"" entry may be different on individual systems, but the other entries
    should generally be the same, unless you attach sources or javadoc to the jars.
-   
-   Eclipse seems to use TABS for indenting the entries.	
+
+   Eclipse seems to use TABS for indenting the entries.
  -->
 <classpath>
 	<classpathentry kind=""con"" path=""org.eclipse.jdt.launching.JRE_CONTAINER""/>",Remove tab in the AL header ; trim trailing spaces / tabs .,"""Fixed formatting in eclipse.classpath file""

The diff shows that the changes made were to the comments in the file, specifically changing the opening of a multi-line comment from '-<!--' to '<!--' and adding a '+' to the end of a line. These changes are related to formatting and do not affect the functionality of the code.","The commit message should be: 

""Update Eclipse .classpath file to maintain consistency with existing formatting.""","Updated copyright notice URL in eclipse.classpath

The URL for the Apache License 2.0 has been updated from ""<http://www.apache.org/licenses/LICENSE-2.0>"" to ""<http://www.apache.org/licenses/LICENSE-2.0>"". Additionally, a space has been removed from the end of the line.",Corrected indentation and removed trailing spaces in the Eclipse .classpath file comments.
"diff --git a/src/main/java/picocli/CommandLine.java b/src/main/java/picocli/CommandLine.java
index 167c3c63..979ba37b 100644
--- a/src/main/java/picocli/CommandLine.java
+++ b/src/main/java/picocli/CommandLine.java
@@ -4710,11 +4710,39 @@ public class CommandLine {
     /**
      * Factory for instantiating classes that are registered declaratively with annotation attributes, like
      * {@link Command#subcommands()}, {@link Option#converter()}, {@link Parameters#converter()} and {@link Command#versionProvider()}.
-     * <p>The default factory implementation simply creates a new instance of the specified class when {@link #create(Class)} is invoked.
-     * </p><p>
-     * You may provide a custom implementation of this interface.
-     * For example, a custom factory implementation could delegate to a dependency injection container that provides the requested instance.
+     * The factory is also used to instantiate the {@code Collection} or {@code Map} implementation class for multi-value
+     * options and positional parameters with an abstract type, like {@code List<String>}.
+     * <p>You may provide a custom implementation of this interface.
+     * For example, a custom factory implementation could delegate to a dependency injection container that provides the requested instance.</p>
+     * <p><b><em>Custom factory implementations should always fall back to the {@linkplain #defaultFactory() default factory} if instantiation failed.</em></b> For example:
      * </p>
+     * <pre>
+     * class MyFactory implements IFactory {
+     *     private final ApplicationContext applicationContext = getAppContext();
+     *
+     *     public &lt;T&gt; T create(Class&lt;T&gt; cls) throws Exception {
+     *         try {
+     *             applicationContext.getBean(cls);
+     *         } catch (Exception ex) {
+     *             CommandLine.defaultFactory().create(cls);
+     *         }
+     *     }
+     * }
+     * </pre>
+     * <p>Tip: custom factory implementations that have resources that need to be closed when done should consider
+     * implementing {@code java.lang.AutoCloseable} or {@code java.io.Closeable}. This allows applications to use
+     * the following idiom for configuring picocli before running their application:</p>
+     * <pre>
+     * public static void main(String[] args) {
+     *     int exitCode = 0;
+     *     try (MyFactory factory = createMyFactory()) {
+     *         exitCode = new CommandLine(MyClass.class, factory)
+     *                 .setXxx(x) // configure the picocli parser...
+     *                 .execute(args);
+     *     }
+     *     System.exit(exitCode);
+     * }
+     * </pre>
      * @see picocli.CommandLine#CommandLine(Object, IFactory)
      * @see #call(Class, IFactory, PrintStream, PrintStream, Help.Ansi, String...)
      * @see #run(Class, IFactory, PrintStream, PrintStream, Help.Ansi, String...)
@@ -4731,6 +4759,21 @@ public class CommandLine {
         <K> K create(Class<K> cls) throws Exception;
     }
     /** Returns the default {@link IFactory} implementation used if no factory was specified in the {@link #CommandLine(Object) CommandLine constructor}.
+     * <p>This implementation has special logic for instantiating {@code Collections}
+     * and {@code Maps}, and otherwise tries to create an instance by invoking the default constructor of the specified class.
+     * </p><p>Special logic for instantiating Collections and Maps:</p>
+     * <pre>
+     * // if class is an interface that extends java.util.Collection, return a new instance of:
+     * 1. List       -> ArrayList
+     * 2. SortedSet  -> TreeSet
+     * 3. Set        -> LinkedHashSet
+     * 4. Queue      -> LinkedList
+     * 5. Collection -> ArrayList
+     *
+     * // if extending or implementing java.util.Map:
+     * 1. try invoking the default constructor; return this on success.
+     * 2. if this fails, return a LinkedHashMap
+     * </pre>
      * @since 4.0 */
     public static IFactory defaultFactory() { return new DefaultFactory(); }
     private static class DefaultFactory implements IFactory {",update and clarify javadoc for IFactory and CommandLine . defaultFactory ( ),"""Enhance IFactory interface and default factory implementation for instantiating classes and collections/maps""","""Enhanced IFactory implementation for custom instantiation and added special logic for instantiating Collections and Maps""","""Update CommandLine.java to add more detailed comments and examples for IFactory interface""

Explanation:
The diff shows changes made to the `CommandLine.java` file in the `picocli` package. The changes are related to the `IFactory` interface and include the addition of more detailed comments and examples. The changes also include an update to the `defaultFactory()` method's comment to better explain its behavior.

The added comments provide more information about the purpose and usage of the `IFactory` interface, including how it can be used to instantiate classes registered with annotation attributes and how custom factory implementations can be created. The comments also include an example of a custom factory implementation that uses a dependency injection container.

The changes to the `defaultFactory()` method's comment explain the special logic used for instantiating `Collections` and `Maps`, and how it tries to create an instance by invoking the default constructor of the specified class. The comment also provides a detailed breakdown of the logic used for instantiating different types of `Collections` and `Maps`.",Enhanced `IFactory` with custom fallback logic and special handling for `Collection` and `Map` instantiations. Added usage examples.
"diff --git a/res/layout/file_preview.xml b/res/layout/file_preview.xml
index 5e1d67aeaa..aa63c5234a 100644
--- a/res/layout/file_preview.xml
+++ b/res/layout/file_preview.xml
@@ -30,7 +30,8 @@
         android:id=""@+id/file_preview_container""
         android:layout_width=""match_parent""
         android:layout_height=""match_parent""
-        android:visibility=""invisible"">
+        android:visibility=""invisible""
+        android:background=""@color/black"">
 
         <FrameLayout
             android:id=""@+id/visual_area""
diff --git a/res/layout/media_control.xml b/res/layout/media_control.xml
index e58b7584cf..cb6b3404b6 100644
--- a/res/layout/media_control.xml
+++ b/res/layout/media_control.xml
@@ -65,6 +65,7 @@
             android:layout_height=""wrap_content""
             android:paddingEnd=""@dimen/standard_quarter_padding""
             android:text=""@string/placeholder_media_time""
+            android:textColor=""@color/white""
             />
 
         <SeekBar
@@ -74,7 +75,11 @@
             android:layout_weight=""1""
             android:layout_height=""@dimen/seek_bar_height""
             android:layout_alignParentStart=""true""
-            android:layout_alignParentEnd=""true"" />
+            android:layout_alignParentEnd=""true""
+            android:progressDrawable=""@color/white""
+            android:layout_alignParentLeft=""true""
+            android:layout_alignParentRight=""true""
+            android:splitTrack=""false""/>
 
         <TextView android:id=""@+id/totalTimeText""
             android:textSize=""@dimen/two_line_secondary_text_size""
@@ -86,6 +91,7 @@
             android:layout_height=""wrap_content""
             android:paddingStart=""@dimen/standard_quarter_padding""
             android:text=""@string/placeholder_media_time""
+            android:textColor=""@color/white""
             />
         
     </LinearLayout>
diff --git a/src/com/owncloud/android/media/MediaControlView.java b/src/com/owncloud/android/media/MediaControlView.java
index 0163f9e0ee..f36048aa9e 100644
--- a/src/com/owncloud/android/media/MediaControlView.java
+++ b/src/com/owncloud/android/media/MediaControlView.java
@@ -39,12 +39,12 @@ import android.widget.SeekBar;
 import android.widget.SeekBar.OnSeekBarChangeListener;
 import android.widget.TextView;
 
-import java.util.Formatter;
-import java.util.Locale;
-
 import com.owncloud.android.R;
 import com.owncloud.android.utils.DisplayUtils;
 
+import java.util.Formatter;
+import java.util.Locale;
+
 
 /**
  * View containing controls for a {@link MediaPlayer}. ",Make video screen nicer,"""Improve media control layout and styling""

This commit message is short and descriptive, indicating that the changes made in the commit are related to improving the layout and styling of the media control.","According to the diff, the commit message should be:

""Added background to file preview container and changed text colors to white in media control layout and views""","The commit message should describe the changes made in the code. Here's a suggestion based on the differences:

```
Updated file_preview.xml and media_control.xml layouts and MediaControlView.java imports

Changes in file_preview.xml:
- Added black background color to the file_preview_container

Changes in media_control.xml:
- Changed text color to white for currentTimeText and totalTimeText
- Modified SeekBar properties, including progressDrawable, splitTrack, and added alignment for left and right

Changes in MediaControlView.java:
- Added imports for Formatter and Locale
```","Improved UI for file preview and media control: added background color, adjusted text color, and refined SeekBar alignment."
"diff --git a/v7/appcompat/src/android/support/v7/app/AppCompatDelegateImplV7.java b/v7/appcompat/src/android/support/v7/app/AppCompatDelegateImplV7.java
index d2c7b91462e..e147b7dbe95 100644
--- a/v7/appcompat/src/android/support/v7/app/AppCompatDelegateImplV7.java
+++ b/v7/appcompat/src/android/support/v7/app/AppCompatDelegateImplV7.java
@@ -115,6 +115,8 @@ class AppCompatDelegateImplV7 extends AppCompatDelegateImplBase
     private PanelFeatureState[] mPanels;
     private PanelFeatureState mPreparedPanel;
 
+    private boolean mLongPressBackDown;
+
     private boolean mInvalidatePanelMenuPosted;
     private int mInvalidatePanelMenuFeatures;
     private final Runnable mInvalidatePanelMenuRunnable = new Runnable() {
@@ -874,9 +876,17 @@ class AppCompatDelegateImplV7 extends AppCompatDelegateImplBase
                 onKeyUpPanel(Window.FEATURE_OPTIONS_PANEL, event);
                 return true;
             case KeyEvent.KEYCODE_BACK:
+                final boolean wasLongPressBackDown = mLongPressBackDown;
+                mLongPressBackDown = false;
+
                 PanelFeatureState st = getPanelState(Window.FEATURE_OPTIONS_PANEL, false);
                 if (st != null && st.isOpen) {
-                    closePanel(st, true);
+                    if (!wasLongPressBackDown) {
+                        // Certain devices allow opening the options menu via a long press of the
+                        // back button. We should only close the open options menu if it wasn't
+                        // opened via a long press gesture.
+                        closePanel(st, true);
+      ",Allow AppCompat to work with long - press - back - menu gesture .,"""Fix closing options menu on back button press when opened via long press gesture""","""Prevent closing options panel on back press if opened via long press gesture""","""Added check for long press back button when closing options panel in AppCompatDelegateImplV7""",Added support to differentiate between long press and short press of the back button.
"diff --git a/enterprise/cypher/acceptance-spec-suite/src/test/scala/org/neo4j/internal/cypher/acceptance/ExpressionAcceptanceTest.scala b/enterprise/cypher/acceptance-spec-suite/src/test/scala/org/neo4j/internal/cypher/acceptance/ExpressionAcceptanceTest.scala
index d951af183e6..182f77ef52e 100644
--- a/enterprise/cypher/acceptance-spec-suite/src/test/scala/org/neo4j/internal/cypher/acceptance/ExpressionAcceptanceTest.scala
+++ b/enterprise/cypher/acceptance-spec-suite/src/test/scala/org/neo4j/internal/cypher/acceptance/ExpressionAcceptanceTest.scala
@@ -24,6 +24,63 @@ import org.neo4j.internal.cypher.acceptance.CypherComparisonSupport._
 
 class ExpressionAcceptanceTest extends ExecutionEngineFunSuite with CypherComparisonSupport {
 
+  test(""property existence checks, on node"") {
+    createNode(""exists"" -> 1)
+    val result = executeWith(
+      expectSucceed = Configs.Interpreted,
+      query =
+        ""MATCH (n) "" +
+          ""RETURN n.missing IS NULL,"" +
+          ""       n.missing IS NOT NULL,"" +
+          ""       exists(n.missing),"" +
+          ""       n.exists IS NULL,"" +
+          ""       n.exists IS NOT NULL,"" +
+          ""       exists(n.exists)"")
+    result.toList should equal(List(Map(
+      ""n.missing IS NULL"" -> true,
+      ""n.missing IS NOT NULL"" -> false,
+      ""exists(n.missing)"" -> false,
+      ""n.exists IS NULL"" -> false,
+      ""n.exists IS NOT NULL"" -> true,
+      ""exists(n.exists)"" -> true)))
+  }
+
+  test(""property existence checks, on optional non-null node"") {
+    createNode(""exists"" -> 1)
+    val result = executeWith(
+      expectSucceed = Configs.Interpreted,
+      query =
+        ""OPTIONAL MATCH (n) "" +
+          ""RETURN n.missing IS NULL,"" +
+          ""       n.missing IS NOT NULL,"" +
+          ""       exists(n.missing),"" +
+          ""       n.exists IS NULL,"" +
+          ""       n.exists IS NOT NULL,"" +
+          ""       exists(n.exists)"")
+    result.toList should equal(List(Map(
+      ""n.missing IS NULL"" -> true,
+      ""n.missing IS NOT NULL"" -> false,
+      ""exists(n.missing)"" -> false,
+      ""n.exists IS NULL"" -> false,
+      ""n.exists IS NOT NULL"" -> true,
+      ""exists(n.exists)"" -> true)))
+  }
+
+  test(""property existence checks, on optional null node"") {
+    val result = executeWith(
+      expectSucceed = Configs.Interpreted,
+      query =
+        ""OPTIONAL MATCH (n) "" +
+          ""RETURN n.missing IS NULL,"" +
+          // ""       n.missing IS NOT NULL,"" + // Do not test. In 3.3 IS NOT NULL is incorrectly rewritten to Exists. Will be fixed in 3.5.
+          ""       exists(n.missing)"",
+      expectedDifferentResults = Configs.Empty)
+    result.toList should equal(List(Map(
+      ""n.missing IS NULL"" -> true,
+      // ""n.missing IS NOT NULL"" -> false, // Do not test. In 3.3 IS NOT NULL is incorrectly rewritten to Exists. Will be fixed in 3.5.
+      ""exists(n.missing)"" -> null)))
+  }
+
   test(""should handle map projection with property selectors"") {
     createNode(""foo"" -> 1, ""bar"" -> ""apa"")
 
diff --git a/enterprise/cypher/physical-planning/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_3/runtime/SlottedRewriter.scala b/enterprise/cypher/physical-planning/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_3/runtime/SlottedRewriter.scala
index 3c8c3148dbb..61355b74c16 100644
--- a/enterprise/cypher/physical-planning/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_3/runtime/SlottedRewriter.scala
+++ b/enterprise/cypher/physical-planning/src/main/scala/org/neo4j/cypher/internal/compatibility/v3_3/runtime/SlottedRewriter.scala
@@ -190,12 +190,23 @@ class SlottedRewriter(tokenContext: TokenContext) {
       case idFunction: FunctionInvocation if idFunction.function == frontendAst.functions.Exists =>
         idFunction.args.head match {
           case Property(Variable(key), PropertyKeyName(propKey)) =>
-            checkIfPropertyExists(pipelineInformation, key, propKey)
+            val slot = pipelineInformation(key)
+            val propExpression = checkIfPropertyExists(pipelineInformation, key, propKey, slot)
+            if (slot.nullable)
+              NullCheck(slot.offset, propExpression)
+            else
+              propExpression
           case _ => idFunction // Don't know how to specialize this
         }
 
-      case e@IsNull(Property(Variable(key), PropertyKeyName(propKey))) =>
-        Not(checkIfPropertyExists(pipelineInformation, key, propKey))(e.position)
+      case e@IsNull(Property(variable@Variable(key), PropertyKeyName(propKey))) =>
+        val slot = pipelineInformation(key)
+        val propertyExists = checkIfPropertyExists(pipelineInformation, key, propKey, slot)
+        val notPropertyExists = Not(propertyExists)(e.position)
+        if (slot.nullable)
+          Or(IsNull(variable)(e.position), notPropertyExists)(e.position)
+        else
+          notPropertyExists
 
       case _: ShortestPathExpression =>
         throw new CantCompileQueryException(s""Expressions with shortestPath functions not yet supported in slot allocation"")
@@ -209,11 +220,10 @@ class SlottedRewriter(tokenContext: TokenContext) {
     topDown(rewriter = innerRewriter, stopper = stopAtOtherLogicalPlans(thisPlan))
   }
 
-  private def checkIfPropertyExists(pipelineInformation: PipelineInformation, key: String, propKey: String) = {
-    val slot = pipelineInformation(key)
+  private def checkIfPropertyExists(pipelineInformation: PipelineInformation, key: String, propKey: String, slot: Slot) = {
     val maybeToken = tokenContext.getOptPropertyKeyId(propKey)
 
-    val propExpression = (slot, maybeToken) match {
+    (slot, maybeToken) match {
       case (LongSlot(offset, _, typ, name), Some(token)) if typ == CTNode =>
         NodePropertyExists(offset, token, s""$name.$propKey"")
 
@@ -228,11 +238,6 @@ class SlottedRewriter(tokenContext: TokenContext) {
 
       case _ => throw new CantCompileQueryException(s""Expressions on object other then nodes and relationships are not yet supported"")
     }
-
-    if (slot.nullable)
-      NullCheck(slot.offset, propExpression)
-    else
-      propExpression
   }
 
   private def stopAtOtherLogicalPlans(thisPlan: LogicalPlan): (AnyRef) => Boolean = {",fixes bug in slotted when checking if property IS NULL on null node .,"""Improve property existence checks in Cypher queries""","""Fixed property existence checks in Slotted Rewriter and added tests for property existence checks in ExpressionAcceptanceTest""","This commit adds several tests for property existence checks in different scenarios using Cypher queries. It also modifies the SlottedRewriter class to handle IS NULL checks for property existence more accurately in the 3.3 version of Neo4j.

 In the ExpressionAcceptanceTest class, three new tests are added:

 1. Property existence checks on a node that exists and has properties.
 2. Property existence checks on an optional non-null node.
 3. Property existence checks on an optional null node.

 In the SlottedRewriter class, the checkIfPropertyExists method is modified to accept an additional argument 'slot', and a new NullCheck is added when the slot is nullable. Additionally, the handling of IS NULL checks for property existence is updated to properly handle nullable slots.

This commit improves the handling of property existence checks in Cypher queries, ensuring that IS NULL and exists() functions work as expected in various scenarios.",Added tests for property existence checks on nodes in ExpressionAcceptanceTest.scala and improved property existence handling in SlottedRewriter.scala.
"diff --git a/document/current/content/features/read-write-split/_index.en.md b/document/current/content/features/read-write-split/_index.en.md
index 0142f150638..87ae45c0617 100644
--- a/document/current/content/features/read-write-split/_index.en.md
+++ b/document/current/content/features/read-write-split/_index.en.md
@@ -7,9 +7,30 @@ chapter = true
 
 ## Background
 
-To face for more and more page views on website, databases became performance bottleneck. 
-For some systems which have huge concurrent query requests and less update requests, split single database to master database and slave database, master database deal with DML operation, slave database deal with DQL operation, can avoid lock and improve system performance.
-Use master database with multiple slave databases model, can share query requests on multiple data replica, improve throughput further.
-Use multiple master databases with multiple slave databases model, can improve system availability. Even one of database physical destroy, system also run lossless.
+With increasing system TPS, database capacity has faced great bottleneck effect. 
+For the application system with massive concurrence read operations but less write operations in the same time, we can divide the database into a master database and a slave database. 
+The master database is responsible for the addition, deletion and modification operations of transactions, while the slave database is responsible for query operations. 
+It can significantly improve the query performance of the whole system by effectively avoiding line locks caused by data renewal.
 
-Read-write splitting can improve throughput and availability for system, but data inconsistent will occur. This problem include data inconsistent between master databases each other, and between master master databases and slave databases. Same with data sharding, developers and operators also need to face complicated database environments. **The objective of read-write splitting middleware is let user to use complicated database like a single database.** 
+The configuration of one master database with multiple slave databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. 
+The configuration of multiple master databases with multiple slave databases can not only enhance system throughput but also the system availability. 
+As a result, under the circumstance that any database goes down, or even the disk is physically destroyed, the normal function of the system will still not be affected.
+
+Different from the horizontal sharding that separates the data to all data nodes according to sharding keys, read-write split routes read operations and write operations separately to the master database and slave database according to SQL meaning analysis.
+
+[![Read-write split](http://shardingsphere.jd.com/document/current/img/read-write-split/read-write-split.png)
+
+Data in read-write split nodes is consistent, whereas that in horizontal shards is not. 
+The combined use of horizontal sharding and read-write split will effectively enhance the system performance.
+
+## Challenges
+
+Though enhancing system throughput and availability, read-write split also brings the problem of inconsistent data, including that between multiple master databases and between master databases and slave databases. 
+What's more, it also brings the problem similar as data sharding, making application development and operation staff's maintenance work more complex. 
+The following picture has shown the complex topological relations between application and database group when sharding table and database are used together with read-write split.
+
+[![Sharding + Read-write split](http://shardingsphere.jd.com/document/current/img/read-write-split/sharding-read-write-split.png)
+
+## Goal
+
+**The main design goal of the read-write split modular of ShardingSphere is to try to reduce the influence of read-write split, in order to let users use master-slave database group like one database.**",update index of read - write - split . en,"""Update Read-Write Split Documentation to Improve Clarity and Accuracy""","""Update read-write-split documentation to improve clarity and accuracy""","Updated documentation to provide more detailed information about read-write splitting and its benefits for improving system performance and availability. The updated version also includes a discussion of the challenges associated with read-write splitting and the goal of ShardingSphere's read-write split module to reduce the impact of these challenges for users.

Here is the updated content for the documentation:

 ## Background

 With increasing system TPS, database capacity has faced great bottleneck effect. For application systems with massive concurrent read operations but less write operations at the same time, dividing the database into a master database and a slave database can significantly improve query performance. The master database is responsible for addition, deletion, and modification operations of transactions, while the slave database is responsible for query operations. This approach can effectively avoid line locks caused by data renewal and improve the throughput and availability of the system.

 Using one master database with multiple slave databases can further enhance system processing capacity by distributing queries evenly into multiple data replicas. Using multiple master databases with multiple slave databases can not only enhance system throughput but also system availability. As a result, even if one database goes down or is physically destroyed, the normal function of the system will still not be affected.

 Different from horizontal sharding that separates data to all data nodes according to sharding keys, read-write split routes read operations and write operations separately to the master database and slave database according to SQL meaning analysis. Data in read-write split nodes is consistent, whereas that in horizontal shards is not. The combined use of horizontal sharding and read-write split will effectively enhance system performance.

 ## Challenges

 Though enhancing system throughput and availability, read-write split also brings the problem of inconsistent data, including that between multiple master databases and between master databases and slave databases. What's more, it also brings the problem similar to data sharding, making application development and operation staff's maintenance work more complex. The following picture shows the complex topological relations between application and database group when sharding table and database are used together with read-write split:

 [![Sharding + Read-write split](http://shardingsphere.jd.com/document/current/img/read-write-split/sharding-read-write-split.png)

 ## Goal

 **The main design goal of the read-write split module of ShardingSphere is to try to reduce the impact of read-write split, in order to let users use master-slave database group like one database.** This goal is achieved by providing a middleware layer that handles the complexities of read-write splitting and presents a simplified interface to the application. The middleware layer is responsible for routing read and write operations to the appropriate database, ensuring data consistency, and handling failure scenarios to maintain high availability. By using ShardingSphere's read-write split module, developers and operation staff can focus on building and maintaining their applications, rather than dealing with the complexities of read-write splitting.","""Improve readability and expand explanations on read-write split, challenges, and goals in the README"""
"diff --git a/javascript/src/components/extractors/ExportExtractors.jsx b/javascript/src/components/extractors/ExportExtractors.jsx
new file mode 100644
index 0000000000..183dc320f3
--- /dev/null
+++ b/javascript/src/components/extractors/ExportExtractors.jsx
@@ -0,0 +1,55 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+import {Row, Col, Input} from 'react-bootstrap';
+
+import {ClipboardButton, Spinner} from 'components/common';
+import Version from 'util/Version';
+
+import ExtractorsActions from 'actions/extractors/ExtractorsActions';
+import ExtractorsStore from 'stores/extractors/ExtractorsStore';
+
+const ExportExtractors = React.createClass({
+  propTypes: {
+    input: PropTypes.object.isRequired,
+  },
+  mixins: [Reflux.connect(ExtractorsStore), Reflux.ListenerMethods],
+  componentDidMount() {
+    ExtractorsActions.list.triggerPromise(this.props.input.input_id);
+  },
+  _isLoading() {
+    return !this.state.extractors;
+  },
+  render() {
+    if (this._isLoading()) {
+      return <Spinner/>;
+    }
+
+    const extractorsExportObject = {
+      extractors: this.state.extractors,
+      version: Version.getFullVersion(),
+    };
+
+    const formattedJSON = JSON.stringify(extractorsExportObject, null, 2);
+    return (
+      <Row className=""content"">
+        <Col md={12}>
+          <Row>
+            <Col md={8}>
+              <h2>Extractors JSON</h2>
+            </Col>
+            <Col md={4}>
+              <ClipboardButton title=""Copy extractors"" className=""pull-right"" target=""#extractor-export-textarea""/>
+            </Col>
+          </Row>
+          <Row>
+            <Col md={12}>
+              <Input type=""textarea"" id=""extractor-export-textarea"" rows={30} defaultValue={formattedJSON}/>
+            </Col>
+          </Row>
+        </Col>
+      </Row>
+    );
+  },
+});
+
+export default ExportExtractors;
diff --git a/javascript/src/pages/ExportExtractorsPage.jsx b/javascript/src/pages/ExportExtractorsPage.jsx
new file mode 100644
index 0000000000..b6e8fb5288
--- /dev/null
+++ b/javascript/src/pages/ExportExtractorsPage.jsx
@@ -0,0 +1,43 @@
+import React, {PropTypes} from 'react';
+
+import PageHeader from 'components/common/PageHeader';
+import Spinner from 'components/common/Spinner';
+import ExportExtractors from 'components/extractors/ExportExtractors';
+
+import InputsStore from 'stores/inputs/InputsStore';
+
+const ExtractorsPage = React.createClass({
+  propTypes: {
+    params: PropTypes.object.isRequired,
+  },
+  getInitialState() {
+    return {
+      input: undefined,
+    };
+  },
+  componentDidMount() {
+    InputsStore.get(this.props.params.inputId).then(input => this.setState({input: input}));
+  },
+  _isLoading() {
+    return !this.state.input;
+  },
+  render() {
+    if (this._isLoading()) {
+      return <Spinner/>;
+    }
+
+    return (
+      <div>
+        <PageHeader title={<span>Export extractors of <em>{this.state.input.title}</em></span>}>
+          <span>
+            The extractors of an input can be exported to JSON for importing into other setups
+            or sharing in <a href=""https://marketplace.graylog.org/"" target=""_blank"">the Graylog Marketplace</a>.
+          </span>
+        </PageHeader>
+        <ExportExtractors input={this.state.input}/>
+      </div>
+    );
+  },
+});
+
+export default ExtractorsPage;
diff --git a/javascript/src/routing/AppRouter.jsx b/javascript/src/routing/AppRouter.jsx
index 0794031a1a..3648cd2b08 100644
--- a/javascript/src/routing/AppRouter.jsx
+++ b/javascript/src/routing/AppRouter.jsx
@@ -20,6 +20,7 @@ import InputsPage from 'pages/InputsPage';
 import ExtractorsPage from 'pages/ExtractorsPage';
 import CreateExtractorsPage from 'pages/CreateExtractorsPage';
 import EditExtractorsPage from 'pages/EditExtractorsPage';
+import ExportExtractorsPage from 'pages/ExportExtractorsPage';
 import CollectorsPage from 'pages/CollectorsPage';
 import SystemOutputsPage from 'pages/SystemOutputsPage';
 import RolesPage from 'pages/RolesPage';
@@ -56,6 +57,7 @@ const AppRouter = React.createClass({
             <Route path={Routes.local_input_extractors(':nodeId', ':inputId')} component={ExtractorsPage}/>
             <Route path={Routes.new_extractor(':nodeId', ':inputId')} component={CreateExtractorsPage}/>
             <Route path={Routes.edit_extractor(':nodeId', ':inputId', ':extractorId')} component={EditExtractorsPage}/>
+            <Route path={Routes.export_extractors(':nodeId', ':inputId')} component={ExportExtractorsPage}/>
             <Route path={Routes.SYSTEM.COLLECTORS} component={CollectorsPage}/>
             <Route path={Routes.SYSTEM.CONTENTPACKS.LIST} component={ContentPacksPage}/>
             <Route path={Routes.SYSTEM.CONTENTPACKS.EXPORT} component={ExportContentPackPage}/>",Add export extractors page,"""Added feature to export extractors to JSON""","Added Export Extractors feature, including ExportExtractors component and ExportExtractorsPage component, and updated AppRouter to include the new route.","""Add ExportExtractors component and ExportExtractorsPage for extracting extractors as JSON""

This commit appears to add the following functionality to a JavaScript/React application:

* A new component `ExportExtractors` (in `javascript/src/components/extractors/ExportExtractors.jsx`) that exports extractors as JSON data. The JSON data includes the extractors themselves and the version of the application.
* A new page `ExportExtractorsPage` (in `javascript/src/pages/ExportExtractorsPage.jsx`) that displays the `ExportExtractors` component and provides a page header with some explanatory text.
* An import statement for the `ExportExtractorsPage` component in `javascript/src/routing/AppRouter.jsx` to make it available for routing.

The commit does not appear to include any changes to tests, so it may be necessary to add tests for the new functionality in a separate commit.","""Add ExportExtractors component and route for exporting input extractors to JSON in the Graylog Marketplace"""
"diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
index 28e259bc65..5bf481a5e2 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
@@ -375,7 +375,12 @@ class AggregationAnalyzer
         @Override
         protected Boolean visitBindExpression(BindExpression node, Void context)
         {
-            return process(node.getValue(), context) && process(node.getFunction(), context);
+            for (Expression value : node.getValues()) {
+                if (!process(value, context)) {
+                    return false;
+                }
+            }
+            return process(node.getFunction(), context);
         }
 
         @Override
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
index fc9d22f868..b81ddc48b7 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
@@ -1087,18 +1087,24 @@ public class ExpressionAnalyzer
         {
             verify(context.getContext().isExpectingLambda(), ""bind expression found when lambda is not expected"");
 
-            List<Type> functionInputTypes = ImmutableList.<Type>builder()
-                    .add(process(node.getValue(), new StackableAstVisitorContext<>(context.getContext().notExpectingLambda())))
-                    .addAll(context.getContext().getFunctionInputTypes())
-                    .build();
+            StackableAstVisitorContext<Context> innerContext = new StackableAstVisitorContext<>(context.getContext().notExpectingLambda());
+            ImmutableList.Builder<Type> functionInputTypesBuilder = ImmutableList.builder();
+            for (Expression value : node.getValues()) {
+                functionInputTypesBuilder.add(process(value, innerContext));
+            }
+            functionInputTypesBuilder.addAll(context.getContext().getFunctionInputTypes());
+            List<Type> functionInputTypes = functionInputTypesBuilder.build();
 
             FunctionType functionType = (FunctionType) process(node.getFunction(), new StackableAstVisitorContext<>(context.getContext().expectingLambda(functionInputTypes)));
 
             List<Type> argumentTypes = functionType.getArgumentTypes();
+            int numCapturedValues = node.getValues().size();
             verify(argumentTypes.size() == functionInputTypes.size());
-            verify(functionInputTypes.get(0) == argumentTypes.get(0));
+            for (int i = 0; i < numCapturedValues; i++) {
+                verify(functionInputTypes.get(i) == argumentTypes.get(i));
+            }
 
-            FunctionType result = new FunctionType(argumentTypes.subList(1, argumentTypes.size()), functionType.getReturnType());
+            FunctionType result = new FunctionType(argumentTypes.subList(numCapturedValues, argumentTypes.size()), functionType.getReturnType());
             return setExpressionType(node, result);
         }
 
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/BindCodeGenerator.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/BindCodeGenerator.java
index 0f30cd1add..a19d938f8c 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/BindCodeGenerator.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/BindCodeGenerator.java
@@ -19,6 +19,7 @@ import com.facebook.presto.bytecode.BytecodeNode;
 import com.facebook.presto.bytecode.Scope;
 import com.facebook.presto.bytecode.Variable;
 import com.facebook.presto.bytecode.control.IfStatement;
+import com.facebook.presto.bytecode.expression.BytecodeExpression;
 import com.facebook.presto.metadata.Signature;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.sql.relational.RowExpression;
@@ -47,15 +48,20 @@ public class BindCodeGenerator
 
         Variable wasNull = scope.getVariable(""wasNull"");
 
-        Class<?> valueType = Primitives.wrap(arguments.get(0).getType().getJavaType());
-        Variable valueVariable = scope.createTempVariable(valueType);
-        block.append(context.generate(arguments.get(0)));
-        block.append(boxPrimitiveIfNecessary(scope, valueType));
-        block.putVariable(valueVariable);
-        block.append(wasNull.set(constantFalse()));
+        ImmutableList.Builder<BytecodeExpression> captureVariablesBuilder = ImmutableList.builder();
+        int numValues = arguments.size() - 1;
+        for (int i = 0; i < numValues; i++) {
+            Class<?> valueType = Primitives.wrap(arguments.get(i).getType().getJavaType());
+            Variable valueVariable = scope.createTempVariable(valueType);
+            block.append(context.generate(arguments.get(i)));
+            block.append(boxPrimitiveIfNecessary(scope, valueType));
+            block.putVariable(valueVariable);
+            block.append(wasNull.set(constantFalse()));
+            captureVariablesBuilder.add(valueVariable.cast(Object.class));
+        }
 
         Variable functionVariable = scope.createTempVariable(MethodHandle.class);
-        block.append(context.generate(arguments.get(1)));
+        block.append(context.generate(arguments.get(numValues)));
         block.append(
                 new IfStatement()
                         .condition(wasNull)
@@ -69,7 +75,7 @@ public class BindCodeGenerator
                                                 MethodHandle.class,
                                                 functionVariable,
                                                 constantInt(0),
-                                                newArray(type(Object[].class), ImmutableList.of(valueVariable.cast(Object.class)))))));
+                                                newArray(type(Object[].class), captureVariablesBuilder.build())))));
 
         return block;
     }
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
index bc39f97cf9..440223302c 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
@@ -1002,16 +1002,23 @@ public class ExpressionInterpreter
         @Override
         protected Object visitBindExpression(BindExpression node, Object context)
         {
-            Object value = process(node.getValue(), context);
+            List<Object> values = node.getValues().stream()
+                    .map(value -> process(value, context))
+                    .collect(toImmutableList());
             Object function = process(node.getFunction(), context);
 
-            if (hasUnresolvedValue(value, function)) {
+            if (hasUnresolvedValue(values) || hasUnresolvedValue(function)) {
+                ImmutableList.Builder<Expression> builder = ImmutableList.builder();
+                for (int i = 0; i < values.size(); i++) {
+                    builder.add(toExpression(values.get(i), type(node.getValues().get(i))));
+                }
+
                 return new BindExpression(
-                        toExpression(value, type(node.getValue())),
+                        builder.build(),
                         toExpression(function, type(node.getFunction())));
             }
 
-            return MethodHandles.insertArguments((MethodHandle) function, 0, value);
+            return MethodHandles.insertArguments((MethodHandle) function, 0, values.toArray());
         }
 
         @Override
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/LambdaCaptureDesugaringRewriter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/LambdaCaptureDesugaringRewriter.java
index 597293462e..830e46df58 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/LambdaCaptureDesugaringRewriter.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/LambdaCaptureDesugaringRewriter.java
@@ -98,8 +98,12 @@ public class LambdaCaptureDesugaringRewriter
             }
             newLambdaArguments.addAll(node.getArguments());
             Expression rewrittenExpression = new LambdaExpression(newLambdaArguments.build(), replaceSymbols(rewrittenBody, captureSymbolToExtraSymbol.build()));
-            for (Symbol captureSymbol : captureSymbols) {
-                rewrittenExpression = new BindExpression(new SymbolReference(captureSymbol.getName()), rewrittenExpression);
+
+            if (captureSymbols.size() != 0) {
+                List<Expression> capturedValues = captureSymbols.stream()
+                        .map(symbol -> new SymbolReference(symbol.getName()))
+                        .collect(toImmutableList());
+                rewrittenExpression = new BindExpression(capturedValues, rewrittenExpression);
             }
 
             context.getReferencedSymbols().addAll(captureSymbols);
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
index 527fe60329..02f4740e7d 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
@@ -155,9 +155,14 @@ public final class Signatures
         return new Signature(TRY, SCALAR, returnType.getTypeSignature());
     }
 
-    public static Signature bindSignature(Type returnType, Type valueType, Type functionType)
+    public static Signature bindSignature(Type returnType, List<Type> valueTypes, Type functionType)
     {
-        return new Signature(BIND, SCALAR, returnType.getTypeSignature(), valueType.getTypeSignature(), functionType.getTypeSignature());
+        ImmutableList.Builder<TypeSignature> typeSignatureBuilder = ImmutableList.builder();
+        for (Type valueType : valueTypes) {
+            typeSignatureBuilder.add(valueType.getTypeSignature());
+        }
+        typeSignatureBuilder.add(functionType.getTypeSignature());
+        return new Signature(BIND, SCALAR, returnType.getTypeSignature(), typeSignatureBuilder.build());
     }
 
     // **************** functions that require varargs and/or complex types (e.g., lists) ****************
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
index 51bc9c1bb5..2648c9e3e8 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
@@ -353,14 +353,20 @@ public final class SqlToRowExpressionTranslator
         @Override
         protected RowExpression visitBindExpression(BindExpression node, Void context)
         {
-            RowExpression value = process(node.getValue(), context);
+            ImmutableList.Builder<Type> valueTypesBuilder = ImmutableList.builder();
+            ImmutableList.Builder<RowExpression> argumentsBuilder = ImmutableList.builder();
+            for (Expression value : node.getValues()) {
+                RowExpression valueRowExpression = process(value, context);
+                valueTypesBuilder.add(valueRowExpression.getType());
+                argumentsBuilder.add(valueRowExpression);
+            }
             RowExpression function = process(node.getFunction(), context);
+            argumentsBuilder.add(function);
 
             return call(
-                    bindSignature(getType(node), value.getType(), function.getType()),
+                    bindSignature(getType(node), valueTypesBuilder.build(), function.getType()),
                     getType(node),
-                    value,
-                    function);
+                    argumentsBuilder.build());
         }
 
         @Override
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/optimizer/ExpressionOptimizer.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/optimizer/ExpressionOptimizer.java
index a2e4f4eb92..15e5470e2c 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/optimizer/ExpressionOptimizer.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/optimizer/ExpressionOptimizer.java
@@ -129,15 +129,23 @@ public class ExpressionOptimizer
                         return call(signature, call.getType(), arguments);
                     }
                     case BIND: {
-                        checkState(call.getArguments().size() == 2, BIND + "" function should have 2 arguments. Got "" + call.getArguments().size());
-                        RowExpression optimizedValue = call.getArguments().get(0).accept(this, context);
-                        RowExpression optimizedFunction = call.getArguments().get(1).accept(this, context);
-                        if (optimizedValue instanceof ConstantExpression && optimizedFunction instanceof ConstantExpression) {
-                            // Here, optimizedValue and optimizedFunction should be merged together into a new ConstantExpression.
+                        checkState(call.getArguments().size() >= 1, BIND + "" function should have at least 1 argument. Got "" + call.getArguments().size());
+
+                        boolean allConstantExpression = true;
+                        ImmutableList.Builder<RowExpression> optimizedArgumentsBuilder = ImmutableList.builder();
+                        for (RowExpression argument : call.getArguments()) {
+                            RowExpression optimizedArgument = argument.accept(this, context);
+                            if (!(optimizedArgument instanceof ConstantExpression)) {
+                                allConstantExpression = false;
+                            }
+                            optimizedArgumentsBuilder.add(optimizedArgument);
+                        }
+                        if (allConstantExpression) {
+                            // Here, optimizedArguments should be merged together into a new ConstantExpression.
                             // It's not implemented because it would be dead code anyways because visitLambda does not produce ConstantExpression.
                             throw new UnsupportedOperationException();
                         }
-                        return call(signature, call.getType(), ImmutableList.of(optimizedValue, optimizedFunction));
+                        return call(signature, call.getType(), optimizedArgumentsBuilder.build());
                     }
                     case NULL_IF:
                     case SWITCH:
diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestArrayTransformFunction.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestArrayTransformFunction.java
index 4b345fa2fb..cb3317a60b 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestArrayTransformFunction.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestArrayTransformFunction.java
@@ -45,6 +45,7 @@ public class TestArrayTransformFunction
     public void testBasic()
             throws Exception
     {
+        assertFunction(""transform(ARRAY [5, 6], x -> 9)"", new ArrayType(INTEGER), ImmutableList.of(9, 9));
         assertFunction(""transform(ARRAY [5, 6], x -> x + 1)"", new ArrayType(INTEGER), ImmutableList.of(6, 7));
         assertFunction(""transform(ARRAY [5 + RANDOM(1), 6], x -> x + 1)"", new ArrayType(INTEGER), ImmutableList.of(6, 7));
     }
diff --git a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestLambdaExpression.java b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestLambdaExpression.java
index aefa009fb6..845344e83d 100644
--- a/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestLambdaExpression.java
+++ b/presto-main/src/test/java/com/facebook/presto/operator/scalar/TestLambdaExpression.java
@@ -127,8 +127,8 @@ public class TestLambdaExpression
     {
         assertFunction(""apply(90, \""$internal$bind\""(9, (x, y) -> x + y))"", INTEGER, 99);
         assertFunction(""invoke(\""$internal$bind\""(8, x -> x + 1))"", INTEGER, 9);
-        assertFunction(""apply(900, \""$internal$bind\""(90, \""$internal$bind\""(9, (x, y, z) -> x + y + z)))"", INTEGER, 999);
-        assertFunction(""invoke(\""$internal$bind\""(90, \""$internal$bind\""(9, (x, y) -> x + y)))"", INTEGER, 99);
+        assertFunction(""apply(900, \""$internal$bind\""(90, 9, (x, y, z) -> x + y + z))"", INTEGER, 999);
+        assertFunction(""invoke(\""$internal$bind\""(90, 9, (x, y) -> x + y))"", INTEGER, 99);
     }
 
     @Test
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java b/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
index 7abba528a3..4eecb84f54 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
@@ -368,9 +368,14 @@ public final class ExpressionFormatter
         @Override
         protected String visitBindExpression(BindExpression node, Void context)
         {
-            return ""\""$INTERNAL$BIND\""("" +
-                    process(node.getValue(), context) + "", "" +
-                    process(node.getFunction(), context) + "")"";
+            StringBuilder builder = new StringBuilder();
+
+            builder.append(""\""$INTERNAL$BIND\""("");
+            for (Expression value : node.getValues()) {
+                builder.append(process(value, context) + "", "");
+            }
+            builder.append(process(node.getFunction(), context) + "")"");
+            return builder.toString();
         }
 
         @Override
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java b/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
index 421bdf91f6..f1b5d4bd5c 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
@@ -166,6 +166,7 @@ import java.util.Map;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static java.lang.String.format;
 import static java.util.Objects.requireNonNull;
@@ -1278,14 +1279,20 @@ class AstBuilder
             return new TryExpression(getLocation(context), (Expression) visit(getOnlyElement(context.expression())));
         }
         if (name.toString().equalsIgnoreCase(""$internal$bind"")) {
-            check(context.expression().size() == 2, ""The '$internal$bind' function must have exactly two arguments"", context);
+            check(context.expression().size() >= 1, ""The '$internal$bind' function must have at least one arguments"", context);
             check(!window.isPresent(), ""OVER clause not valid for '$internal$bind' function"", context);
             check(!distinct, ""DISTINCT not valid for '$internal$bind' function"", context);
 
+            int numValues = context.expression().size() - 1;
+            List<Expression> arguments = context.expression().stream()
+                    .map(this::visit)
+                    .map(Expression.class::cast)
+                    .collect(toImmutableList());
+
             return new BindExpression(
                     getLocation(context),
-                    (Expression) visit(context.expression(0)),
-                    (Expression) visit(context.expression(1)));
+                    arguments.subList(0, numValues),
+                    arguments.get(numValues));
         }
 
         return new FunctionCall(
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/BindExpression.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/BindExpression.java
index 49b5fd4e58..8ab8f4ed57 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/BindExpression.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/BindExpression.java
@@ -47,31 +47,31 @@ import static java.util.Objects.requireNonNull;
 public class BindExpression
         extends Expression
 {
-    private final Expression value;
+    private final List<Expression> values;
     // Function expression must be of function type.
     // It is not necessarily a lambda. For example, it can be another bind expression.
     private final Expression function;
 
-    public BindExpression(Expression value, Expression function)
+    public BindExpression(List<Expression> values, Expression function)
     {
-        this(Optional.empty(), value, function);
+        this(Optional.empty(), values, function);
     }
 
-    public BindExpression(NodeLocation location, Expression value, Expression function)
+    public BindExpression(NodeLocation location, List<Expression> values, Expression function)
     {
-        this(Optional.of(location), value, function);
+        this(Optional.of(location), values, function);
     }
 
-    private BindExpression(Optional<NodeLocation> location, Expression value, Expression function)
+    private BindExpression(Optional<NodeLocation> location, List<Expression> values, Expression function)
     {
         super(location);
-        this.value = requireNonNull(value, ""value is null"");
+        this.values = requireNonNull(values, ""value is null"");
         this.function = requireNonNull(function, ""function is null"");
     }
 
-    public Expression getValue()
+    public List<Expression> getValues()
     {
-        return value;
+        return values;
     }
 
     public Expression getFunction()
@@ -89,7 +89,7 @@ public class BindExpression
     public List<Node> getChildren()
     {
         ImmutableList.Builder<Node> nodes = ImmutableList.builder();
-        return nodes.add(value)
+        return nodes.addAll(values)
                 .add(function)
                 .build();
     }
@@ -104,13 +104,13 @@ public class BindExpression
             return false;
         }
         BindExpression that = (BindExpression) o;
-        return Objects.equals(value, that.value) &&
+   ",Extend BindExpression to bind multiple values at a time,"""Support multiple values in bind expressions""","""Improved Bind Expression Handling in Presto SQL Engine

This commit enhances the handling of bind expressions in the Presto SQL engine. It introduces changes to various classes and methods to support bind expressions with multiple values. The updates include:

*   AggregationAnalyzer: Modified the visitBindExpression method to process multiple values in a bind expression.
*   ExpressionAnalyzer: Updated the visitBindExpression method to correctly handle bind expressions with multiple values.
*   BindCodeGenerator: Modified the generateBindExpression method to generate bytecode for bind expressions with multiple values.
*   ExpressionInterpreter: Updated the visitBindExpression method to correctly handle bind expressions with multiple values.
*   LambdaCaptureDesugaringRewriter: Modified the rewriteBindExpression method to correctly handle bind expressions with multiple values.
*   Signatures: Updated the bindSignature method to correctly handle bind expressions with multiple values.
*   SqlToRowExpressionTranslator: Modified the visitBindExpression method to correctly handle bind expressions with multiple values.
*   ExpressionOptimizer: Updated the optimizeBindExpression method to correctly handle bind expressions with multiple values.
*   AstBuilder: Modified the parseBindExpression method to correctly handle bind expressions with multiple values.
*   BindExpression: Updated the constructor and getter methods to correctly handle bind expressions with multiple values.

These changes improve the accuracy and robustness of the Presto SQL engine when handling bind expressions with multiple values.""","This commit modifies the implementation of BindExpression in Presto to support multiple captured values. Previously, BindExpression only captured a single value, but now it can capture multiple values. The changes include modifications to the AggregationAnalyzer, ExpressionAnalyzer, BindCodeGenerator, ExpressionInterpreter, LambdaCaptureDesugaringRewriter, Signatures, SqlToRowExpressionTranslator, and ExpressionOptimizer classes. Additionally, test cases have been updated to reflect the new behavior. The commit message could be: ""Support multiple captured values in BindExpression"".","Refactor BindExpression to support multiple values instead of a single value, updating all related processor functions and tests."
"diff --git a/examples/restrict-by-media-type/restrict_by_media_type.client.out b/examples/restrict-by-media-type/restrict_by_media_type.client.out
index ac031ad49ed..836b7bd1b5d 100644
--- a/examples/restrict-by-media-type/restrict_by_media_type.client.out
+++ b/examples/restrict-by-media-type/restrict_by_media_type.client.out
@@ -1,4 +1,29 @@
 # To invoke the service, use the following client.
 $ curl -v http://localhost:9092/infoService -H ""Accept:application/xml"" -H ""Content-Type:application/json"" -d '{""name"":""Ballerina""}'
-# The server response. 
+# The server response.
+< HTTP/1.1 200 OK
+< content-type: application/xml
+< content-length: 22
+<
+* Connection #0 to host localhost left intact
 <name>Ballerina</name>
+
+# Use the following client to invoke the service using unsupported media type. The Content type of the
+# request is not listed under consumes resource configuration.
+$ curl -v http://localhost:9092/infoService -H ""Accept:application/xml"" -H ""Content-Type:text/plain"" -d ""Hello ballerina""
+# The server response.
+< HTTP/1.1 415 Unsupported Media Type
+< content-type: text/plain
+< content-length: 0
+<
+* Connection #0 to host localhost left intact
+
+# Use the following client to invoke the service with a media type that is not acceptable. The media type mentioned
+# in the Accept header is not listed under produces resource configuration.
+$ curl -v http://localhost:9092/infoService -H ""Accept:text/html"" -H ""Content-Type:application/json"" -d '{""name"":""Ballerina""}'
+# The server response.
+< HTTP/1.1 406 Not Acceptable
+< content-type: text/plain
+< content-length: 0
+<
+* Connection #0 to host localhost left intact",Add negative scenarios to restrict - by - media - type BBE,"""Update restrict-by-media-type example to include unsupported media type and not acceptable media type scenarios""","""Added examples for media type restrictions in Ballerina service""","""Added more examples and their responses to restrict_by_media_type.client.out""",Update restrict_by_media_type test to include server responses for various media type accept/consume errors and successful response.
"diff --git a/build.gradle b/build.gradle
index ad7fa7ee7a..4cc2a21e7b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -180,7 +180,7 @@ buildscript {
     classpath ""gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.3.1""                              // Enable Apache license enforcement
     classpath ""com.commercehub.gradle.plugin:gradle-avro-plugin:0.11.0""                                 // Enable Avro code generation
     classpath ""com.diffplug.spotless:spotless-plugin-gradle:3.6.0""                                      // Enable a code formatting plugin
-    classpath ""gradle.plugin.com.github.blindpirate:gogradle:0.7.0""                                     // Enable Go code compilation
+    classpath ""gradle.plugin.com.github.blindpirate:gogradle:0.8.1""                                     // Enable Go code compilation
     classpath ""gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0""                           // Enable building Docker containers
     classpath ""cz.malohlava:visteg:1.0.3""                                                               // Enable generating Gradle task dependencies as "".dot"" files
     classpath ""com.github.jengelman.gradle.plugins:shadow:2.0.1""                                        // Enable shading Java dependencies
diff --git a/build_rules.gradle b/build_rules.gradle
index c8197762eb..fb4c17f4c5 100644
--- a/build_rules.gradle
+++ b/build_rules.gradle
@@ -389,6 +389,14 @@ ext.applyGoNature = {
     goVersion = '1.9'
   }
 
+  repositories {
+    golang {
+      // Gogradle doesn't like thrift: https://github.com/gogradle/gogradle/issues/183
+      root 'git.apache.org/thrift.git'
+      emptyDir()
+    }
+  }
+
   // GoGradle fails in a parallel build during dependency resolution/installation.
   // Force a dependency between all GoGradle projects during dependency resolution/installation.
   // TODO: Figure out how to do this by automatically figuring out the task dependency DAG
diff --git a/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/ParDoTranslator.java b/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/ParDoTranslator.java
index 7210692b6f..f02633d459 100644
--- a/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/ParDoTranslator.java
+++ b/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/ParDoTranslator.java
@@ -117,7 +117,7 @@ class ParDoTranslator<InputT, OutputT>
   }
 
   static class SplittableProcessElementsTranslator<
-          InputT, OutputT, RestrictionT, TrackerT extends RestrictionTracker<RestrictionT>>
+          InputT, OutputT, RestrictionT, TrackerT extends RestrictionTracker<RestrictionT, ?>>
       implements TransformTranslator<ProcessElements<InputT, OutputT, RestrictionT, TrackerT>> {
 
     @Override
diff --git a/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/operators/ApexParDoOperator.java b/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/operators/ApexParDoOperator.java
index c410ca0832..8db73df43b 100644
--- a/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/operators/ApexParDoOperator.java
+++ b/runners/apex/src/main/java/org/apache/beam/runners/apex/translation/operators/ApexParDoOperator.java
@@ -474,7 +474,7 @@ public class ApexParDoOperator<InputT, OutputT> extends BaseOperator implements
           (StateInternalsFactory<String>) this.currentKeyStateInternals.getFactory();
 
       @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
-      ProcessFn<InputT, OutputT, Object, RestrictionTracker<Object>>
+      ProcessFn<InputT, OutputT, Object, RestrictionTracker<Object, Object>>
         splittableDoFn = (ProcessFn) doFn;
       splittableDoFn.setStateInternalsFactory(stateInternalsFactory);
       TimerInternalsFactory<String> timerInternalsFactory = key -> currentKeyTimerInternals;
diff --git a/runners/apex/src/test/java/org/apache/beam/runners/apex/translation/ParDoTranslatorTest.java b/runners/apex/src/test/java/org/apache/beam/runners/apex/translation/ParDoTranslatorTest.java
index 5107ab0339..db314785ea 100644
--- a/runners/apex/src/test/java/org/apache/beam/runners/apex/translation/ParDoTranslatorTest.java
+++ b/runners/apex/src/test/java/org/apache/beam/runners/apex/translation/ParDoTranslatorTest.java
@@ -61,6 +61,7 @@ import org.apache.beam.sdk.values.TupleTag;
 import org.apache.beam.sdk.values.TupleTagList;
 import org.apache.beam.sdk.values.WindowingStrategy;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -162,6 +163,7 @@ public class ParDoTranslatorTest {
   }
 
   @Test
+  @Ignore(""https://issues.apache.org/jira/browse/BEAM-3272"")
   public void testAssertionFailure() throws Exception {
     ApexPipelineOptions options = PipelineOptionsFactory.create()
         .as(ApexPipelineOptions.class);
diff --git a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/PTransformMatchersTest.java b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/PTransformMatchersTest.java
index ca57e92cc3..9ca6d9408d 100644
--- a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/PTransformMatchersTest.java
+++ b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/PTransformMatchersTest.java
@@ -160,7 +160,7 @@ public class PTransformMatchersTest implements Serializable {
           ctxt.output(ctxt.element().getValue() + 1);
         }
       };
-  private abstract static class SomeTracker implements RestrictionTracker<Void> {}
+  private abstract static class SomeTracker extends RestrictionTracker<Void, Void> {}
   private DoFn<KV<String, Integer>, Integer> splittableDoFn =
       new DoFn<KV<String, Integer>, Integer>() {
         @ProcessElement
diff --git a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ParDoTranslationTest.java b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ParDoTranslationTest.java
index a945574b6f..9bd7fe493b 100644
--- a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ParDoTranslationTest.java
+++ b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/ParDoTranslationTest.java
@@ -231,7 +231,7 @@ public class ParDoTranslationTest {
 
   private static class SplittableDropElementsFn extends DoFn<KV<Long, String>, Void> {
     @ProcessElement
-    public void proc(ProcessContext context, RestrictionTracker<Integer> restriction) {
+    public void proc(ProcessContext context, RestrictionTracker<Integer, ?> restriction) {
       context.output(null);
     }
 
@@ -241,7 +241,7 @@ public class ParDoTranslationTest {
     }
 
     @NewTracker
-    public RestrictionTracker<Integer> newTracker(Integer restriction) {
+    public RestrictionTracker<Integer, ?> newTracker(Integer restriction) {
       throw new UnsupportedOperationException(""Should never be called; only to test translation"");
     }
 
diff --git a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java
index 05c471dd2d..68365c85bc 100644
--- a/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java
+++ b/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java
@@ -50,13 +50,18 @@ public class SplittableParDoTest {
     }
   }
 
-  private static class SomeRestrictionTracker implements RestrictionTracker<SomeRestriction> {
+  private static class SomeRestrictionTracker extends RestrictionTracker<SomeRestriction, Void> {
     private final SomeRestriction someRestriction;
 
     public SomeRestrictionTracker(SomeRestriction someRestriction) {
       this.someRestriction = someRestriction;
     }
 
+    @Override
+    protected boolean tryClaimImpl(Void position) {
+      return false;
+    }
+
     @Override
     public SomeRestriction currentRestriction() {
       return someRestriction;
diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
index 32c561e481..ebd2a8873e 100644
--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
@@ -34,6 +34,7 @@ import org.apache.beam.runners.core.StateTag.StateBinder;
 import org.apache.beam.sdk.annotations.Experimental;
 import org.apache.beam.sdk.annotations.Experimental.Kind;
 import org.apache.beam.sdk.coders.Coder;
+import org.apache.beam.sdk.coders.CoderException;
 import org.apache.beam.sdk.state.BagState;
 import org.apache.beam.sdk.state.CombiningState;
 import org.apache.beam.sdk.state.MapState;
@@ -49,6 +50,7 @@ import org.apache.beam.sdk.transforms.Combine.CombineFn;
 import org.apache.beam.sdk.transforms.CombineWithContext.CombineFnWithContext;
 import org.apache.beam.sdk.transforms.windowing.BoundedWindow;
 import org.apache.beam.sdk.transforms.windowing.TimestampCombiner;
+import org.apache.beam.sdk.util.CoderUtils;
 import org.apache.beam.sdk.util.CombineFnUtil;
 import org.joda.time.Instant;
 
@@ -126,25 +128,25 @@ public class InMemoryStateInternals<K> implements StateInternals {
     @Override
     public <T> ValueState<T> bindValue(
         StateTag<ValueState<T>> address, Coder<T> coder) {
-      return new InMemoryValue<>();
+      return new InMemoryValue<>(coder);
     }
 
     @Override
     public <T> BagState<T> bindBag(
         final StateTag<BagState<T>> address, Coder<T> elemCoder) {
-      return new InMemoryBag<>();
+      return new InMemoryBag<>(elemCoder);
     }
 
     @Override
     public <T> SetState<T> bindSet(StateTag<SetState<T>> spec, Coder<T> elemCoder) {
-      return new InMemorySet<>();
+      return new InMemorySet<>(elemCoder);
     }
 
     @Override
     public <KeyT, ValueT> MapState<KeyT, ValueT> bindMap(
         StateTag<MapState<KeyT, ValueT>> spec,
         Coder<KeyT> mapKeyCoder, Coder<ValueT> mapValueCoder) {
-      return new InMemoryMap<>();
+      return new InMemoryMap<>(mapKeyCoder, mapValueCoder);
     }
 
     @Override
@@ -153,7 +155,7 @@ public class InMemoryStateInternals<K> implements StateInternals {
             StateTag<CombiningState<InputT, AccumT, OutputT>> address,
             Coder<AccumT> accumCoder,
             final CombineFn<InputT, AccumT, OutputT> combineFn) {
-      return new InMemoryCombiningState<>(combineFn);
+      return new InMemoryCombiningState<>(combineFn, accumCoder);
     }
 
     @Override
@@ -178,9 +180,15 @@ public class InMemoryStateInternals<K> implements StateInternals {
    */
   public static final class InMemoryValue<T>
       implements ValueState<T>, InMemoryState<InMemoryValue<T>> {
+    private final Coder<T> coder;
+
     private boolean isCleared = true;
     private @Nullable T value = null;
 
+    public InMemoryValue(Coder<T> coder) {
+      this.coder = coder;
+    }
+
     @Override
     public void clear() {
       // Even though we're clearing we can't remove this from the in-memory state map, since
@@ -207,10 +215,10 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public InMemoryValue<T> copy() {
-      InMemoryValue<T> that = new InMemoryValue<>();
+      InMemoryValue<T> that = new InMemoryValue<>(coder);
       if (!this.isCleared) {
         that.isCleared = this.isCleared;
-        that.value = this.value;
+        that.value = uncheckedClone(coder, this.value);
       }
       return that;
     }
@@ -305,14 +313,16 @@ public class InMemoryStateInternals<K> implements StateInternals {
   public static final class InMemoryCombiningState<InputT, AccumT, OutputT>
       implements CombiningState<InputT, AccumT, OutputT>,
           InMemoryState<InMemoryCombiningState<InputT, AccumT, OutputT>> {
-    private boolean isCleared = true;
     private final CombineFn<InputT, AccumT, OutputT> combineFn;
+    private final Coder<AccumT> accumCoder;
+    private boolean isCleared = true;
     private AccumT accum;
 
     public InMemoryCombiningState(
-        CombineFn<InputT, AccumT, OutputT> combineFn) {
+        CombineFn<InputT, AccumT, OutputT> combineFn, Coder<AccumT> accumCoder) {
       this.combineFn = combineFn;
       accum = combineFn.createAccumulator();
+      this.accumCoder = accumCoder;
     }
 
     @Override
@@ -378,10 +388,10 @@ public class InMemoryStateInternals<K> implements StateInternals {
     @Override
     public InMemoryCombiningState<InputT, AccumT, OutputT> copy() {
       InMemoryCombiningState<InputT, AccumT, OutputT> that =
-          new InMemoryCombiningState<>(combineFn);
+          new InMemoryCombiningState<>(combineFn, accumCoder);
       if (!this.isCleared) {
         that.isCleared = this.isCleared;
-        that.addAccum(accum);
+        that.addAccum(uncheckedClone(accumCoder, accum));
       }
       return that;
     }
@@ -391,8 +401,13 @@ public class InMemoryStateInternals<K> implements StateInternals {
    * An {@link InMemoryState} implementation of {@link BagState}.
    */
   public static final class InMemoryBag<T> implements BagState<T>, InMemoryState<InMemoryBag<T>> {
+    private final Coder<T> elemCoder;
     private List<T> contents = new ArrayList<>();
 
+    public InMemoryBag(Coder<T> elemCoder) {
+      this.elemCoder = elemCoder;
+    }
+
     @Override
     public void clear() {
       // Even though we're clearing we can't remove this from the in-memory state map, since
@@ -442,8 +457,10 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public InMemoryBag<T> copy() {
-      InMemoryBag<T> that = new InMemoryBag<>();
-      that.contents.addAll(this.contents);
+      InMemoryBag<T> that = new InMemoryBag<>(elemCoder);
+      for (T elem : this.contents) {
+        that.contents.add(uncheckedClone(elemCoder, elem));
+      }
       return that;
     }
   }
@@ -452,8 +469,13 @@ public class InMemoryStateInternals<K> implements StateInternals {
    * An {@link InMemoryState} implementation of {@link SetState}.
    */
   public static final class InMemorySet<T> implements SetState<T>, InMemoryState<InMemorySet<T>> {
+    private final Coder<T> elemCoder;
     private Set<T> contents = new HashSet<>();
 
+    public InMemorySet(Coder<T> elemCoder) {
+      this.elemCoder = elemCoder;
+    }
+
     @Override
     public void clear() {
       contents = new HashSet<>();
@@ -513,8 +535,10 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public InMemorySet<T> copy() {
-      InMemorySet<T> that = new InMemorySet<>();
-      that.contents.addAll(this.contents);
+      InMemorySet<T> that = new InMemorySet<>(elemCoder);
+      for (T elem : this.contents) {
+        that.contents.add(uncheckedClone(elemCoder, elem));
+      }
       return that;
     }
   }
@@ -524,8 +548,16 @@ public class InMemoryStateInternals<K> implements StateInternals {
    */
   public static final class InMemoryMap<K, V> implements
       MapState<K, V>, InMemoryState<InMemoryMap<K, V>> {
+    private final Coder<K> keyCoder;
+    private final Coder<V> valueCoder;
+
     private Map<K, V> contents = new HashMap<>();
 
+    public InMemoryMap(Coder<K> keyCoder, Coder<V> valueCoder) {
+      this.keyCoder = keyCoder;
+      this.valueCoder = valueCoder;
+    }
+
     @Override
     public void clear() {
       contents = new HashMap<>();
@@ -600,9 +632,22 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public InMemoryMap<K, V> copy() {
-      InMemoryMap<K, V> that = new InMemoryMap<>();
+      InMemoryMap<K, V> that = new InMemoryMap<>(keyCoder, valueCoder);
+      for (Map.Entry<K, V> entry : this.contents.entrySet()) {
+        that.contents.put(
+            uncheckedClone(keyCoder, entry.getKey()), uncheckedClone(valueCoder, entry.getValue()));
+      }
       that.contents.putAll(this.contents);
       return that;
     }
   }
+
+  /** Like {@link CoderUtils#clone} but without a checked exception. */
+  private static <T> T uncheckedClone(Coder<T> coder, T value) {
+    try {
+      return CoderUtils.clone(coder, value);
+    } catch (CoderException e) {
+      throw new RuntimeException(e);
+    }
+  }
 }
diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java
index c53efcc23b..b1a3f3bdb6 100644
--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java
+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java
@@ -50,7 +50,11 @@ import org.joda.time.Instant;
  * outputs), or runs for the given duration.
  */
 public class OutputAndTimeBoundedSplittableProcessElementInvoker<
-        InputT, OutputT, RestrictionT, TrackerT extends RestrictionTracker<RestrictionT>>
+        InputT,
+        OutputT,
+        RestrictionT,
+        PositionT,
+        TrackerT extends RestrictionTracker<RestrictionT, PositionT>>
     extends SplittableProcessElementInvoker<InputT, OutputT, RestrictionT, TrackerT> {
   private final DoFn<InputT, OutputT> fn;
   private final PipelineOptions pipelineOptions;
@@ -71,9 +75,10 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
    * @param maxNumOutputs Maximum number of outputs, in total over all output tags, after which a
    *     checkpoint will be requested. This is a best-effort request - the {@link DoFn} may output
    *     more after receiving the request.
-   * @param maxDuration Maximum duration of the {@link DoFn.ProcessElement} call after which a
-   *     checkpoint will be requested. This is a best-effort request - the {@link DoFn} may run for
-   *     longer after receiving the request.
+   * @param maxDuration Maximum duration of the {@link DoFn.ProcessElement} call (counted from the
+   *     first successful {@link RestrictionTracker#tryClaim} call) after which a checkpoint will be
+   *     requested. This is a best-effort request - the {@link DoFn} may run for longer after
+   *     receiving the request.
    */
   public OutputAndTimeBoundedSplittableProcessElementInvoker(
       DoFn<InputT, OutputT> fn,
@@ -98,6 +103,7 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
       final WindowedValue<InputT> element,
       final TrackerT tracker) {
     final ProcessContext processContext = new ProcessContext(element, tracker);
+    tracker.setClaimObserver(processContext);
     DoFn.ProcessContinuation cont = invoker.invokeProcessElement(
         new DoFnInvoker.ArgumentProvider<InputT, OutputT>() {
           @Override
@@ -107,7 +113,7 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
           }
 
           @Override
-          public RestrictionTracker<?> restrictionTracker() {
+          public RestrictionTracker<?, ?> restrictionTracker() {
             return tracker;
           }
 
@@ -157,19 +163,39 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
                 ""Access to timers not supported in Splittable DoFn"");
           }
         });
-    // TODO: verify that if there was a failed tryClaim() call, then cont.shouldResume() is false.
-    // Currently we can't verify this because there are no hooks into tryClaim().
-    // See https://issues.apache.org/jira/browse/BEAM-2607
     processContext.cancelScheduledCheckpoint();
     @Nullable KV<RestrictionT, Instant> residual = processContext.getTakenCheckpoint();
     if (cont.shouldResume()) {
+      checkState(
+          !processContext.hasClaimFailed,
+          ""After tryClaim() returned false, @ProcessElement must return stop(), ""
+              + ""but returned resume()"");
       if (residual == null) {
         // No checkpoint had been taken by the runner while the ProcessElement call ran, however
         // the call says that not the whole restriction has been processed. So we need to take
         // a checkpoint now: checkpoint() guarantees that the primary restriction describes exactly
         // the work that was done in the current ProcessElement call, and returns a residual
         // restriction that describes exactly the work that wasn't done in the current call.
-        residual = checkNotNull(processContext.takeCheckpointNow());
+        if (processContext.numClaimedBlocks > 0) {
+          residual = checkNotNull(processContext.takeCheckpointNow());
+          tracker.checkDone();
+        } else {
+          // The call returned resume() without trying to claim any blocks, i.e. it is unaware
+          // of any work to be done at the moment, but more might emerge later. This is a valid
+          // use case: e.g. a DoFn reading from a streaming source might see that there are
+          // currently no new elements (hence not claim anything) and return resume() with a delay
+          // to check again later.
+          // In this case, we must simply reschedule the original restriction - checkpointing a
+          // tracker that hasn't claimed any work is not allowed.
+          //
+          // Note that the situation ""a DoFn repeatedly says that it doesn't have any work to claim
+          // and asks to try again later with the same restriction"" is different from the situation
+          // ""a runner repeatedly checkpoints the DoFn before it has a chance to even attempt
+          // claiming work"": the former is valid, and the latter would be a bug, and is addressed
+          // by not checkpointing the tracker until it attempts to claim some work.
+          residual = KV.of(tracker.currentRestriction(), processContext.getLastReportedWatermark());
+          // Don't call tracker.checkDone() - it's not done.
+        }
       } else {
         // A checkpoint was taken by the runner, and then the ProcessElement call returned resume()
         // without making more tryClaim() calls (since no tryClaim() calls can succeed after
@@ -180,14 +206,15 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
         // ProcessElement call.
         // In other words, if we took a checkpoint *after* ProcessElement completed (like in the
         // branch above), it would have been equivalent to this one.
+        tracker.checkDone();
       }
     } else {
       // The ProcessElement call returned stop() - that means the tracker's current restriction
       // has been fully processed by the call. A checkpoint may or may not have been taken in
       // ""residual""; if it was, then we'll need to process it; if no, then we don't - nothing
       // special needs to be done.
+      tracker.checkDone();
     }
-    tracker.checkDone();
     if (residual == null) {
       // Can only be true if cont.shouldResume() is false and no checkpoint was taken.
       // This means the restriction has been fully processed.
@@ -197,9 +224,12 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
     return new Result(residual.getKey(), cont, residual.getValue());
   }
 
-  private class ProcessContext extends DoFn<InputT, OutputT>.ProcessContext {
+  private class ProcessContext extends DoFn<InputT, OutputT>.ProcessContext
+      implements RestrictionTracker.ClaimObserver<PositionT> {
     private final WindowedValue<InputT> element;
     private final TrackerT tracker;
+    private int numClaimedBlocks;
+    private boolean hasClaimFailed;
 
     private int numOutputs;
     // Checkpoint may be initiated either when the given number of outputs is reached,
@@ -212,20 +242,44 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
     // on the output from ""checkpoint"".
     private @Nullable Instant residualWatermark;
     // A handle on the scheduled action to take a checkpoint.
-    private Future<?> scheduledCheckpoint;
+    private @Nullable Future<?> scheduledCheckpoint;
     private @Nullable Instant lastReportedWatermark;
 
     public ProcessContext(WindowedValue<InputT> element, TrackerT tracker) {
       fn.super();
       this.element = element;
       this.tracker = tracker;
+    }
 
-      this.scheduledCheckpoint =
-          executor.schedule(
-              (Runnable) this::takeCheckpointNow, maxDuration.getMillis(), TimeUnit.MILLISECONDS);
+    @Override
+    public void onClaimed(PositionT position) {
+      checkState(
+          !hasClaimFailed,
+          ""Must not call tryClaim() after it has previously returned false"");
+      if (numClaimedBlocks == 0) {
+        // Claiming first block: can schedule the checkpoint now.
+        // We don't schedule it right away to prevent checkpointing before any blocks are claimed,
+        // in a state where no work has been done yet - because such a checkpoint is equivalent to
+        // the original restriction, i.e. pointless.
+        this.scheduledCheckpoint =
+            executor.schedule(
+                (Runnable) this::takeCheckpointNow, maxDuration.getMillis(), TimeUnit.MILLISECONDS);
+      }
+      ++numClaimedBlocks;
+    }
+
+    @Override
+    public void onClaimFailed(PositionT position) {
+      checkState(
+          !hasClaimFailed,
+          ""Must not call tryClaim() after it has previously returned false"");
+      hasClaimFailed = true;
     }
 
     void cancelScheduledCheckpoint() {
+      if (scheduledCheckpoint == null) {
+        return;
+      }
       scheduledCheckpoint.cancel(true);
       try {
         Futures.getUnchecked(scheduledCheckpoint);
@@ -275,9 +329,19 @@ public class OutputAndTimeBoundedSplittableProcessElementInvoker<
 
     @Override
     public synchronized void updateWatermark(Instant watermark) {
+    ",Remove collapsible if statements,"""Update GoGradle to 0.8.1, fix various issues with RestrictionTracker and state handling""","Here is a possible commit message based on the provided diff:

`Update Apache Beam to use RestrictionTracker with PositionT`

This commit message is concise and accurately reflects the changes made in the diff. It mentions the specific change (updating the `RestrictionTracker` to use `PositionT`) and provides a brief description of the change.","The commit message for this change could be:

```
Update GoGradle to version 0.8.1 and fix Gogradle dependency resolution issue

This commit updates the version of GoGradle used in the project to 0.8.1 and adds a workaround for a Gogradle dependency resolution issue by configuring a custom Golang repository. Additionally, it makes some changes to the Java code to accommodate the new version of GoGradle.
```

The main changes in this commit are:

1. The version of GoGradle is updated from 0.7.0 to 0.8.1 in the `build.gradle` file.
2. A custom Golang repository is configured in the `build_rules.gradle` file to work around a Gogradle dependency resolution issue.
3. Some changes are made to the Java code in the `ParDoTranslator` class to accommodate the new version of GoGradle.
4. The `SplittableProcessElementsTranslator` class is modified to add a new type parameter for the `RestrictionTracker` position type.
5. The `ApexParDoOperator` class is modified to use the new type parameter for the `RestrictionTracker` position type.
6. A new `RestrictionTracker` class is added to the `runners/apex/src/main/java/org/apache/beam/runners/apex/translation` package.
7. The `InMemoryStateInternals` class is modified to add a new `Coder` parameter to some of its methods and constructors.
8. The `OutputAndTimeBoundedSplittableProcessElementInvoker` class is modified to add a new `RestrictionTracker.ClaimObserver` implementation to the `ProcessContext` inner class.
9. A test is ignored in the `ParDoTranslatorTest` class due to a known issue (BEAM-3272).","Sure, here is a concise commit message summarizing the changes in the diff:

```
Upgrade Gogradle plugin to 0.8.1 and add repository config; Adjust code to handle RestrictionTracker generics
```"
"diff --git a/src/cpp/core/markdown/sundown/buffer.c b/src/cpp/core/markdown/sundown/buffer.c
index 5f44e0e63c..3807fb9595 100644
--- a/src/cpp/core/markdown/sundown/buffer.c
+++ b/src/cpp/core/markdown/sundown/buffer.c
@@ -22,6 +22,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <assert.h>
 
 /* MSVC compat */
 #if defined(_MSC_VER)
@@ -34,6 +35,7 @@ int
 bufprefix(const struct buf *buf, const char *prefix)
 {
 	size_t i;
+	assert(buf && buf->unit);
 
 	for (i = 0; i < buf->size; ++i) {
 		if (prefix[i] == 0)
@@ -53,6 +55,8 @@ bufgrow(struct buf *buf, size_t neosz)
 	size_t neoasz;
 	void *neodata;
 
+	assert(buf && buf->unit);
+
 	if (neosz > BUFFER_MAX_ALLOC_SIZE)
 		return BUF_ENOMEM;
 
@@ -92,6 +96,8 @@ bufnew(size_t unit)
 const char *
 bufcstr(struct buf *buf)
 {
+	assert(buf && buf->unit);
+
 	if (buf->size < buf->asize && buf->data[buf->size] == 0)
 		return (char *)buf->data;
 
@@ -110,6 +116,8 @@ bufprintf(struct buf *buf, const char *fmt, ...)
 	va_list ap;
 	int n;
 
+	assert(buf && buf->unit);
+
 	if (buf->size >= buf->asize && bufgrow(buf, buf->size + 1) < 0)
 		return;
 	
@@ -144,6 +152,8 @@ bufprintf(struct buf *buf, const char *fmt, ...)
 void
 bufput(struct buf *buf, const void *data, size_t len)
 {
+	assert(buf && buf->unit);
+
 	if (buf->size + len > buf->asize && bufgrow(buf, buf->size + len) < 0)
 		return;
 
@@ -163,6 +173,8 @@ bufputs(struct buf *buf, const char *str)
 void
 bufputc(struct buf *buf, int c)
 {
+	assert(buf && buf->unit);
+
 	if (buf->size + 1 > buf->asize && bufgrow(buf, buf->size + 1) < 0)
 		return;
 
@@ -198,6 +210,8 @@ bufreset(struct buf *buf)
 void
 bufslurp(struct buf *buf, size_t len)
 {
+	assert(buf && buf->unit);
+
 	if (len >= buf->size) {
 		buf->size = 0;
 		return;
diff --git a/src/cpp/core/markdown/sundown/houdini_href_e.c b/src/cpp/core/markdown/sundown/houdini_href_e.c
index f63b7663ea..981b3b17e4 100644
--- a/src/cpp/core/markdown/sundown/houdini_href_e.c
+++ b/src/cpp/core/markdown/sundown/houdini_href_e.c
@@ -1,3 +1,4 @@
+#include <assert.h>
 #include <stdio.h>
 #include <string.h>
 
diff --git a/src/cpp/core/markdown/sundown/houdini_html_e.c b/src/cpp/core/markdown/sundown/houdini_html_e.c
index 5250212c61..d9bbf187d8 100644
--- a/src/cpp/core/markdown/sundown/houdini_html_e.c
+++ b/src/cpp/core/markdown/sundown/houdini_html_e.c
@@ -1,3 +1,4 @@
+#include <assert.h>
 #include <stdio.h>
 #include <string.h>
 
diff --git a/src/cpp/core/markdown/sundown/markdown.c b/src/cpp/core/markdown/sundown/markdown.c
index 57ffc63fd8..9f5ef44f9a 100644
--- a/src/cpp/core/markdown/sundown/markdown.c
+++ b/src/cpp/core/markdown/sundown/markdown.c
@@ -20,6 +20,7 @@
 #include ""markdown.h""
 #include ""stack.h""
 
+#include <assert.h>
 #include <string.h>
 #include <ctype.h>
 #include <stdio.h>
@@ -2350,6 +2351,8 @@ sd_markdown_new(
 {
 	struct sd_markdown *md = NULL;
 
+	assert(max_nesting > 0 && callbacks);
+
 	md = malloc(sizeof(struct sd_markdown));
 	if (!md)
 		return NULL;
@@ -2469,6 +2472,9 @@ sd_markdown_render(struct buf *ob, const uint8_t *document, size_t doc_size, str
 	/* clean-up */
 	bufrelease(text);
 	free_link_refs(md->refs);
+
+	assert(md->work_bufs[BUFFER_SPAN].size == 0);
+	assert(md->work_bufs[BUFFER_BLOCK].size == 0);
 }
 
 void
diff --git a/src/cpp/core/markdown/sundown/sundown_version.h b/src/cpp/core/markdown/sundown/sundown_version.h
index 5401997a02..2d728e2182 100644
--- a/src/cpp/core/markdown/sundown/sundown_version.h
+++ b/src/cpp/core/markdown/sundown/sundown_version.h
@@ -1 +1 @@
-#define RSTUDIO_SUNDOWN_VERSION f7557c5d3a177e9d2271c790a1e7446d57e047af
+#define RSTUDIO_SUNDOWN_VERSION 6a9a1be67e6d8d75179bcef85f291702e225898a
diff --git a/src/cpp/tools/.gitignore b/src/cpp/tools/.gitignore
new file mode 100644
index 0000000000..c4c9130be2
--- /dev/null
+++ b/src/cpp/tools/.gitignore
@@ -0,0 +1 @@
+sundown/
diff --git a/src/cpp/tools/sync-sundown b/src/cpp/tools/sync-sundown
new file mode 100755
index 0000000000..0e7e7c828f
--- /dev/null
+++ b/src/cpp/tools/sync-sundown
@@ -0,0 +1,32 @@
+#!/bin/sh
+
+set -e
+
+if [ ! -d ""./sundown"" ]; then
+    git clone git://github.com/rstudio/sundown.git sundown
+    cd sundown
+    git remote add upstream git://github.com/tanoku/sundown.git
+    cd ..
+fi
+
+cd sundown
+git clean -dfx
+
+# Use the branch with rstudio-specific changes 
+git checkout rstudio
+git pull
+VERSION=`git rev-parse HEAD`
+
+# copy files
+TARGET_DIR=../../core/markdown/sundown
+echo ""#define RSTUDIO_SUNDOWN_VERSION $VERSION"" > $TARGET_DIR/sundown_version.h
+cp src/autolink.h $TARGET_DIR
+cp src/buffer.h $TARGET_DIR
+cp src/markdown.h $TARGET_DIR
+cp src/*.h $TARGET_DIR
+cp src/*.c $TARGET_DIR
+cp html/*.h $TARGET_DIR
+cp html/*.c $TARGET_DIR
+
+# return to tools dir
+cd ..",add sync - sundown script,"""Added assertions to sundown buffer functions and updated sundown version""",Added assertions for buffer and unit validity throughout the codebase.,"""Add assert statements and update Sundown version in markdown rendering code""

Explanation:

* The diff shows that `assert.h` header file has been included in multiple source files.
* Additionally, the Sundown version has been updated from `f7557c5d3a177e9d2271c790a1e7446d57e047af` to `6a9a1be67e6d8d75179bcef85f291702e225898a`.
* The `.gitignore` file has been updated to ignore the `sundown/` directory.
* A new shell script `sync-sundown` has been added to sync the Sundown library with the upstream repository and update the version in the code.
* The commit message should reflect these changes.",Add assertion checks and sync sundown with RStudio-specific changes. Update version and include a new gitignore file.
"diff --git a/messaging/src/main/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGateway.java b/messaging/src/main/java/org/axonframework/commandhandling/gateway/ReactorCommandGateway.java
similarity index 89%
rename from messaging/src/main/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGateway.java
rename to messaging/src/main/java/org/axonframework/commandhandling/gateway/ReactorCommandGateway.java
index ccae733d9..74ef8ca22 100644
--- a/messaging/src/main/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGateway.java
+++ b/messaging/src/main/java/org/axonframework/commandhandling/gateway/ReactorCommandGateway.java
@@ -32,28 +32,28 @@
 import static org.axonframework.common.BuilderUtils.assertNonNull;
 
 /**
- * Default implementation of the {@link ReactiveCommandGateway}.
+ * Implementation of the {@link ReactiveCommandGateway} that uses Project Reactor to achieve reactiveness.
  *
  * @author Milan Savic
  * @since 4.4
  */
-public class DefaultReactiveCommandGateway implements ReactiveCommandGateway {
+public class ReactorCommandGateway implements ReactiveCommandGateway {
 
     private final CommandBus commandBus;
     private final RetryScheduler retryScheduler;
     private final List<ReactiveMessageDispatchInterceptor<CommandMessage<?>>> dispatchInterceptors;
 
     /**
-     * Creates an instance of {@link DefaultReactiveCommandGateway} based on the fields contained in the {@link
+     * Creates an instance of {@link ReactorCommandGateway} based on the fields contained in the {@link
      * Builder}.
      * <p>
      * Will assert that the {@link CommandBus} is not {@code null} and throws an {@link AxonConfigurationException} if
      * it is.
      * </p>
      *
-     * @param builder the {@link Builder} used to instantiated a {@link DefaultReactiveCommandGateway} instance
+     * @param builder the {@link Builder} used to instantiated a {@link ReactorCommandGateway} instance
      */
-    protected DefaultReactiveCommandGateway(Builder builder) {
+    protected ReactorCommandGateway(Builder builder) {
         builder.validate();
         this.commandBus = builder.commandBus;
         this.retryScheduler = builder.retryScheduler;
@@ -61,13 +61,13 @@ protected DefaultReactiveCommandGateway(Builder builder) {
     }
 
     /**
-     * Instantiate a Builder to be able to create a {@link DefaultReactiveCommandGateway}.
+     * Instantiate a Builder to be able to create a {@link ReactorCommandGateway}.
      * <p>
      * The {@code dispatchInterceptors} are defaulted to an empty list.
      * The {@link CommandBus} is a <b>hard requirements</b> and as such should be provided.
      * </p>
      *
-     * @return a Builder to be able to create a {@link DefaultReactiveCommandGateway}
+     * @return a Builder to be able to create a {@link ReactorCommandGateway}
      */
     public static Builder builder() {
         return new Builder();
@@ -115,7 +115,7 @@ private Mono<CommandMessage<?>> processInterceptors(Mono<CommandMessage<?>> comm
     }
 
     /**
-     * Builder class to instantiate {@link DefaultReactiveCommandGateway}.
+     * Builder class to instantiate {@link ReactorCommandGateway}.
      * <p>
      * The {@code dispatchInterceptors} are defaulted to an empty list.
      * The {@link CommandBus} is a <b>hard requirement</b> and as such should be provided.
@@ -190,12 +190,12 @@ protected void validate() {
         }
 
         /**
-         * Initializes a {@link DefaultReactiveCommandGateway} as specified through this Builder.
+         * Initializes a {@link ReactorCommandGateway} as specified through this Builder.
          *
-         * @return a {@link DefaultReactiveCommandGateway} as specified through this Builder
+         * @return a {@link ReactorCommandGateway} as specified through this Builder
          */
-        public DefaultReactiveCommandGateway build() {
-            return new DefaultReactiveCommandGateway(this);
+        public ReactorCommandGateway build() {
+            return new ReactorCommandGateway(this);
         }
     }
 }
diff --git a/messaging/src/main/java/org/axonframework/queryhandling/DefaultReactiveQueryGateway.java b/messaging/src/main/java/org/axonframework/queryhandling/ReactorQueryGateway.java
similarity index 91%
rename from messaging/src/main/java/org/axonframework/queryhandling/DefaultReactiveQueryGateway.java
rename to messaging/src/main/java/org/axonframework/queryhandling/ReactorQueryGateway.java
index f71f9ac62..5fea41f1a 100644
--- a/messaging/src/main/java/org/axonframework/queryhandling/DefaultReactiveQueryGateway.java
+++ b/messaging/src/main/java/org/axonframework/queryhandling/ReactorQueryGateway.java
@@ -34,41 +34,41 @@
 import static org.axonframework.common.BuilderUtils.assertNonNull;
 
 /**
- * Default implementation of the {@link ReactiveQueryGateway}.
+ * Implementation of the {@link ReactiveQueryGateway} that uses Project Reactor to achieve reactiveness.
  *
  * @author Milan Savic
  * @since 4.4
  */
-public class DefaultReactiveQueryGateway implements ReactiveQueryGateway {
+public class ReactorQueryGateway implements ReactiveQueryGateway {
 
     private final List<ReactiveMessageDispatchInterceptor<QueryMessage<?, ?>>> dispatchInterceptors;
 
     private final QueryBus queryBus;
 
     /**
-     * Creates an instance of {@link DefaultReactiveQueryGateway} based on the fields contained in the {@link
+     * Creates an instance of {@link ReactorQueryGateway} based on the fields contained in the {@link
      * Builder}.
      * <p>
      * Will assert that the {@link QueryBus} is not {@code null} and throws an {@link AxonConfigurationException} if
      * it is.
      * </p>
      *
-     * @param builder the {@link Builder} used to instantiated a {@link DefaultReactiveQueryGateway} instance
+     * @param builder the {@link Builder} used to instantiated a {@link ReactorQueryGateway} instance
      */
-    protected DefaultReactiveQueryGateway(Builder builder) {
+    protected ReactorQueryGateway(Builder builder) {
         builder.validate();
         this.queryBus = builder.queryBus;
         this.dispatchInterceptors = builder.dispatchInterceptors;
     }
 
     /**
-     * Instantiate a Builder to be able to create a {@link DefaultReactiveQueryGateway}.
+     * Instantiate a Builder to be able to create a {@link ReactorQueryGateway}.
      * <p>
      * The {@code dispatchInterceptors} are defaulted to an empty list.
      * The {@link QueryBus} is a <b>hard requirements</b> and as such should be provided.
      * </p>
      *
-     * @return a Builder to be able to create a {@link DefaultReactiveQueryGateway}
+     * @return a Builder to be able to create a {@link ReactorQueryGateway}
      */
     public static Builder builder() {
         return new Builder();
@@ -166,7 +166,7 @@ public <Q, I, U> Mono<SubscriptionQueryResult<I, U>> subscriptionQuery(String qu
     }
 
     /**
-     * Builder class to instantiate {@link DefaultReactiveQueryGateway}.
+     * Builder class to instantiate {@link ReactorQueryGateway}.
      * <p>
      * The {@code dispatchInterceptors} are defaulted to an empty list.
      * The {@link QueryBus} is a <b>hard requirement</b> and as such should be provided.
@@ -228,12 +228,12 @@ protected void validate() {
         }
 
         /**
-         * Initializes a {@link DefaultReactiveQueryGateway} as specified through this Builder.
+         * Initializes a {@link ReactorQueryGateway} as specified through this Builder.
          *
-         * @return a {@link DefaultReactiveQueryGateway} as specified through this Builder
+         * @return a {@link ReactorQueryGateway} as specified through this Builder
          */
-        public DefaultReactiveQueryGateway build() {
-            return new DefaultReactiveQueryGateway(this);
+        public ReactorQueryGateway build() {
+            return new ReactorQueryGateway(this);
         }
     }
 }
diff --git a/messaging/src/test/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGatewayTest.java b/messaging/src/test/java/org/axonframework/commandhandling/gateway/ReactorCommandGatewayTest.java
similarity index 93%
rename from messaging/src/test/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGatewayTest.java
rename to messaging/src/test/java/org/axonframework/commandhandling/gateway/ReactorCommandGatewayTest.java
index 148e6a134..59cd82671 100644
--- a/messaging/src/test/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGatewayTest.java
+++ b/messaging/src/test/java/org/axonframework/commandhandling/gateway/ReactorCommandGatewayTest.java
@@ -42,9 +42,9 @@
  *
  * @author Milan Savic
  */
-class DefaultReactiveCommandGatewayTest {
+class ReactorCommandGatewayTest {
 
-    private DefaultReactiveCommandGateway reactiveCommandGateway;
+    private ReactorCommandGateway reactiveCommandGateway;
     private MessageHandler<CommandMessage<?>> commandMessageHandler;
     private RetryScheduler mockRetryScheduler;
 
@@ -71,10 +71,10 @@ public Object handle(CommandMessage<?> message) {
         commandBus.subscribe(Boolean.class.getName(),
                              message -> """" + message.getMetaData().getOrDefault(""key1"", """")
                                      + message.getMetaData().getOrDefault(""key2"", """"));
-        reactiveCommandGateway = DefaultReactiveCommandGateway.builder()
-                                                              .commandBus(commandBus)
-                                                              .retryScheduler(mockRetryScheduler)
-                                                              .build();
+        reactiveCommandGateway = ReactorCommandGateway.builder()
+                                                      .commandBus(commandBus)
+                                                      .retryScheduler(mockRetryScheduler)
+                                                      .build();
     }
 
     @Test
diff --git a/messaging/src/test/java/org/axonframework/queryhandling/DefaultReactiveQueryGatewayTest.java b/messaging/src/test/java/org/axonframework/queryhandling/ReactorQueryGatewayTest.java
similarity index 98%
rename from messaging/src/test/java/org/axonframework/queryhandling/DefaultReactiveQueryGatewayTest.java
rename to messaging/src/test/java/org/axonframework/queryhandling/ReactorQueryGatewayTest.java
index 34da0be5a..41ee65891 100644
--- a/messaging/src/test/java/org/axonframework/queryhandling/DefaultReactiveQueryGatewayTest.java
+++ b/messaging/src/test/java/org/axonframework/queryhandling/ReactorQueryGatewayTest.java
@@ -37,13 +37,13 @@
 import static org.mockito.Mockito.*;
 
 /**
- * Tests for {@link DefaultReactiveQueryGateway}.
+ * Tests for {@link ReactorQueryGateway}.
  *
  * @author Milan Savic
  */
-public class DefaultReactiveQueryGatewayTest {
+public class ReactorQueryGatewayTest {
 
-    private DefaultReactiveQueryGateway reactiveQueryGateway;
+    private ReactorQueryGateway reactiveQueryGateway;
     private QueryUpdateEmitter queryUpdateEmitter;
     private MessageHandler<QueryMessage<?, Object>> queryMessageHandler1;
     private MessageHandler<QueryMessage<?, Object>> queryMessageHandler2;
@@ -82,9 +82,9 @@ public Object handle(QueryMessage<?, Object> message) {
                            message -> """" + message.getMetaData().getOrDefault(""key1"", """")
                                    + message.getMetaData().getOrDefault(""key2"", """"));
         queryBus.subscribe(Long.class.getName(), String.class, message -> null);
-        reactiveQueryGateway = DefaultReactiveQueryGateway.builder()
-                                                          .queryBus(queryBus)
-                                                          .build();
+        reactiveQueryGateway = ReactorQueryGateway.builder()
+                                ",Renamed DefaultReactiveGateways to ReactorGateways .,Rename DefaultReactiveCommandGateway and DefaultReactiveQueryGateway to ReactorCommandGateway and ReactorQueryGateway respectively.,"""Switch to Project Reactor for reactive command and query gateways""","""Rename DefaultReactiveCommandGateway to ReactorCommandGateway and DefaultReactiveQueryGateway to ReactorQueryGateway""

This commit renames the following files:
- messaging/src/main/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGateway.java
- messaging/src/main/java/org/axonframework/queryhandling/DefaultReactiveQueryGateway.java
- messaging/src/test/java/org/axonframework/commandhandling/gateway/DefaultReactiveCommandGatewayTest.java
- messaging/src/test/java/org/axonframework/queryhandling/DefaultReactiveQueryGatewayTest.java

to:
- messaging/src/main/java/org/axonframework/commandhandling/gateway/ReactorCommandGateway.java
- messaging/src/main/java/org/axonframework/queryhandling/ReactorQueryGateway.java
- messaging/src/test/java/org/axonframework/commandhandling/gateway/ReactorCommandGatewayTest.java
- messaging/src/test/java/org/axonframework/queryhandling/ReactorQueryGatewayTest.java

It also updates the class names and imports accordingly.",Renamed DefaultReactiveCommandGateway and DefaultReactiveQueryGateway classes to ReactorCommandGateway and ReactorQueryGateway.
"diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index ed1ce7106f..1fd6da579a 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -687,7 +687,7 @@
     </integer-array>
 
     <string-array name=""sendDelayedNames"">
-        <item>Never</item>
+        <item>No</item>
         <item>15 seconds</item>
         <item>30 seconds</item>
         <item>1 minute</item>",Updated text,"""Update 'sendDelayedNames' string array: replace 'Never' with 'No'""","""Update 'sendDelayedNames' string array to replace 'Never' with 'No'.""","""Changed 'Never' to 'No' in sendDelayedNames string-array in strings.xml""","Update ""Never"" to ""No"" in sendDelayedNames string array in strings.xml."
"diff --git a/build.gradle b/build.gradle
index 9ec0d38cf..113b3b656 100644
--- a/build.gradle
+++ b/build.gradle
@@ -21,7 +21,7 @@ allprojects  {
   apply plugin: 'idea'
   apply plugin: 'jacoco'
 
-  group = 'me.tomassetti'
+  group = 'com.github.javaparser'
   version = '0.4.0-SNAPSHOT'
 
   repositories {
diff --git a/java-symbol-solver-core/pom.xml b/java-symbol-solver-core/pom.xml
index 0ddc40792..697e8ef5f 100644
--- a/java-symbol-solver-core/pom.xml
+++ b/java-symbol-solver-core/pom.xml
@@ -1,7 +1,7 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 
   <parent>
-    <groupId>me.tomassetti</groupId>
+    <groupId>com.github.javaparser</groupId>
     <artifactId>java-symbol-solver-parent</artifactId>
     <version>0.4-SNAPSHOT</version>
   </parent>
@@ -57,12 +57,12 @@
           <version>18.0</version>
       </dependency>
       <dependency>
-          <groupId>me.tomassetti</groupId>
+          <groupId>com.github.javaparser</groupId>
           <artifactId>java-symbol-solver-model</artifactId>
           <version>0.4-SNAPSHOT</version>
       </dependency>
       <dependency>
-          <groupId>me.tomassetti</groupId>
+          <groupId>com.github.javaparser</groupId>
           <artifactId>java-symbol-solver-logic</artifactId>
           <version>0.4-SNAPSHOT</version>
       </dependency>
diff --git a/java-symbol-solver-examples/pom.xml b/java-symbol-solver-examples/pom.xml
index 2d7ba8a35..e097829e6 100644
--- a/java-symbol-solver-examples/pom.xml
+++ b/java-symbol-solver-examples/pom.xml
@@ -1,7 +1,7 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 
   <parent>
-    <groupId>me.tomassetti</groupId>
+    <groupId>com.github.javaparser</groupId>
     <artifactId>java-symbol-solver-parent</artifactId>
     <version>0.4-SNAPSHOT</version>
   </parent>
@@ -57,7 +57,7 @@
           <version>18.0</version>
      </dependency>
      <dependency>
-          <groupId>me.tomassetti</groupId>
+          <groupId>com.github.javaparser</groupId>
           <artifactId>java-symbol-solver-core</artifactId>
           <version>0.4-SNAPSHOT</version>
      </dependency>
diff --git a/java-symbol-solver-logic/pom.xml b/java-symbol-solver-logic/pom.xml
index 4a8b13fef..0743f1bdf 100644
--- a/java-symbol-solver-logic/pom.xml
+++ b/java-symbol-solver-logic/pom.xml
@@ -1,7 +1,7 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 
   <parent>
-    <groupId>me.tomassetti</groupId>
+    <groupId>com.github.javaparser</groupId>
     <artifactId>java-symbol-solver-parent</artifactId>
     <version>0.4-SNAPSHOT</version>
   </parent>
@@ -57,7 +57,7 @@
           <version>18.0</version>
       </dependency>
       <dependency>
-          <groupId>me.tomassetti</groupId>
+          <groupId>com.github.javaparser</groupId>
           <artifactId>java-symbol-solver-model</artifactId>
           <version>0.4-SNAPSHOT</version>
       </dependency>
diff --git a/java-symbol-solver-model/pom.xml b/java-symbol-solver-model/pom.xml
index c607a7e3b..c58401183 100644
--- a/java-symbol-solver-model/pom.xml
+++ b/java-symbol-solver-model/pom.xml
@@ -17,7 +17,7 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 
   <parent>
-    <groupId>me.tomassetti</groupId>
+    <groupId>com.github.javaparser</groupId>
     <artifactId>java-symbol-solver-parent</artifactId>
     <version>0.4-SNAPSHOT</version>
   </parent>
diff --git a/pom.xml b/pom.xml
index 8b423c9e3..fcc7e947c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
     <module>java-symbol-solver-examples</module>
   </modules>
   <modelVersion>4.0.0</modelVersion>
-  <groupId>me.tomassetti</groupId>
+  <groupId>com.github.javaparser</groupId>
   <artifactId>java-symbol-solver-parent</artifactId>
   <packaging>pom</packaging>
   <version>0.4-SNAPSHOT</version>",changing the group id to com . github . javaparser,"""Update group ID from 'me.tomassetti' to 'com.github.javaparser' in all Maven and Gradle configurations""","""Update group ID to com.github.javaparser""","""Changed group ID from 'me.tomassetti' to 'com.github.javaparser'""",Update groupId from 'me.tomassetti' to 'com.github.javaparser' in project files and pom.xml dependencies.
"diff --git a/res/layout/create_shortcut_list.xml b/res/layout/create_shortcut_list.xml
deleted file mode 100644
index aa1673375..000000000
--- a/res/layout/create_shortcut_list.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version=""1.0"" encoding=""utf-8""?>
-<!--
-/*
-**
-** Copyright 2008, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the ""License"");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an ""AS IS"" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<ListView xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:layout_width=""fill_parent""
-    android:layout_height=""fill_parent""
-    android:layout_marginTop=""5dip""
-    android:cacheColorHint=""@null""
-    android:divider=""@android:drawable/divider_horizontal_bright""
-    android:scrollbars=""vertical"" />
diff --git a/res/layout/create_shortcut_list_item.xml b/res/layout/create_shortcut_list_item.xml
deleted file mode 100644
index a6975f8fa..000000000
--- a/res/layout/create_shortcut_list_item.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version=""1.0"" encoding=""utf-8""?>
-<!--
-/*
-** Copyright 2008, The Android Open Source Project
-**
-** Licensed under the Apache License, Version 2.0 (the ""License"");
-** you may not use this file except in compliance with the License.
-** You may obtain a copy of the License at
-**
-**     http://www.apache.org/licenses/LICENSE-2.0
-**
-** Unless required by applicable law or agreed to in writing, software
-** distributed under the License is distributed on an ""AS IS"" BASIS,
-** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-** See the License for the specific language governing permissions and
-** limitations under the License.
-*/
--->
-<TextView xmlns:android=""http://schemas.android.com/apk/res/android""
-    android:id=""@+id/title""
-    android:layout_width=""fill_parent""
-    android:layout_height=""wrap_content""
-    android:minHeight=""?android:attr/listPreferredItemHeight""
-    android:textAppearance=""?android:attr/textAppearanceLargeInverse""
-    android:gravity=""center_vertical""
-    android:drawablePadding=""14dip""
-    android:paddingLeft=""?android:attr/expandableListPreferredChildPaddingLeft""
-    android:paddingRight=""15dip"" />
-
-
diff --git a/src/com/android/launcher/AddAdapter.java b/src/com/android/launcher/AddAdapter.java
index 245a7a0c5..a6c889e13 100644
--- a/src/com/android/launcher/AddAdapter.java
+++ b/src/com/android/launcher/AddAdapter.java
@@ -36,13 +36,10 @@ public class AddAdapter extends BaseAdapter {
     
     private final ArrayList<ListItem> mItems = new ArrayList<ListItem>();
     
-    public static final int ITEM_APPLICATION = 0;
-    public static final int ITEM_SHORTCUT = 1;
-    public static final int ITEM_SEARCH = 2;
-    public static final int ITEM_APPWIDGET = 3;
-    public static final int ITEM_LIVE_FOLDER = 4;
-    public static final int ITEM_FOLDER = 5;
-    public static final int ITEM_WALLPAPER = 6;
+    public static final int ITEM_SHORTCUT = 0;
+    public static final int ITEM_APPWIDGET = 1;
+    public static final int ITEM_LIVE_FOLDER = 2;
+    public static final int ITEM_WALLPAPER = 3;
     
     /**
      * Specific item in our list.
@@ -71,9 +68,6 @@ public class AddAdapter extends BaseAdapter {
         // Create default actions
         Resources res = launcher.getResources();
         
-        mItems.add(new ListItem(res, R.string.group_applications,
-                R.drawable.ic_launcher_application, ITEM_APPLICATION));
-        
         mItems.add(new ListItem(res, R.string.group_shortcuts,
                 R.drawable.ic_launcher_shortcut, ITEM_SHORTCUT));
 
@@ -83,9 +77,6 @@ public class AddAdapter extends BaseAdapter {
         mItems.add(new ListItem(res, R.string.group_live_folders,
                 R.drawable.ic_launcher_folder_live, ITEM_LIVE_FOLDER));
         
-        mItems.add(new ListItem(res, R.string.group_folder,
-                R.drawable.ic_launcher_folder, ITEM_FOLDER));
-        
         mItems.add(new ListItem(res, R.string.group_wallpapers,
                 R.drawable.ic_launcher_gallery, ITEM_WALLPAPER));
 
diff --git a/src/com/android/launcher/Launcher.java b/src/com/android/launcher/Launcher.java
index 205703236..d84e67da7 100644
--- a/src/com/android/launcher/Launcher.java
+++ b/src/com/android/launcher/Launcher.java
@@ -31,6 +31,7 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
+import android.content.Intent.ShortcutIconResource;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
@@ -38,6 +39,7 @@ import android.content.res.Resources;
 import android.content.res.Configuration;
 import android.database.ContentObserver;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.Rect;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
@@ -313,6 +315,8 @@ public final class Launcher extends Activity implements View.OnClickListener, On
         // For example, the user would PICK_SHORTCUT for ""Music playlist"", and we
         // launch over to the Music app to actually CREATE_SHORTCUT.
         
+        Resources res = getResources();
+        
         if (resultCode == RESULT_OK && mAddItemCellInfo != null) {
             switch (requestCode) {
                 case REQUEST_PICK_APPLICATION:
@@ -980,11 +984,32 @@ public final class Launcher extends Activity implements View.OnClickListener, On
     }
 
     void addShortcut(Intent intent) {
-        startActivityForResult(intent, REQUEST_CREATE_SHORTCUT);
+        // Handle case where user selected ""Applications""
+        String applicationName = getResources().getString(R.string.group_applications);
+        String shortcutName = intent.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);
+        
+        if (applicationName != null && applicationName.equals(shortcutName)) {
+            Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+            mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+            
+            Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);
+            pickIntent.putExtra(Intent.EXTRA_INTENT, mainIntent);
+            startActivityForResult(pickIntent, REQUEST_PICK_APPLICATION);
+        } else {
+            startActivityForResult(intent, REQUEST_CREATE_SHORTCUT);
+        }
     }
 
     void addLiveFolder(Intent intent) {
-        startActivityForResult(intent, REQUEST_CREATE_LIVE_FOLDER);
+        // Handle case where user selected ""Folder""
+        String folderName = getResources().getString(R.string.folder_name);
+        String shortcutName = intent.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);
+        
+        if (folderName != null && folderName.equals(shortcutName)) {
+            addFolder(!mDesktopLocked);
+        } else {
+            startActivityForResult(intent, REQUEST_CREATE_LIVE_FOLDER);
+        }
     }
 
     void addFolder(boolean insertAtFirst) {
@@ -1670,7 +1695,7 @@ public final class Launcher extends Activity implements View.OnClickListener, On
      * Displays the shortcut creation dialog and launches, if necessary, the
      * appropriate activity.
      */
-    private class CreateShortcut implements AdapterView.OnItemClickListener,
+    private class CreateShortcut implements DialogInterface.OnClickListener,
             DialogInterface.OnCancelListener {
         private AddAdapter mAdapter;
         private ListView mList;
@@ -1682,22 +1707,14 @@ public final class Launcher extends Activity implements View.OnClickListener, On
             
             final AlertDialog.Builder builder = new AlertDialog.Builder(Launcher.this);
             builder.setTitle(getString(R.string.menu_item_add_item));
-            builder.setIcon(0);
-
-            mList = (ListView)
-                    View.inflate(Launcher.this, R.layout.create_shortcut_list, null);
-            mList.setAdapter(mAdapter);
-            mList.setOnItemClickListener(this);
+            builder.setAdapter(mAdapter, this);
+            
             builder.setView(mList);
             builder.setInverseBackgroundForced(true);
 
             AlertDialog dialog = builder.create();
             dialog.setOnCancelListener(this);
 
-            WindowManager.LayoutParams attributes = dialog.getWindow().getAttributes();
-            attributes.gravity = Gravity.TOP;
-            dialog.onWindowAttributesChanged(attributes);
-
             return dialog;
         }
 
@@ -1711,91 +1728,94 @@ public final class Launcher extends Activity implements View.OnClickListener, On
             dismissDialog(DIALOG_CREATE_SHORTCUT);
         }
 
-        public void onItemClick(AdapterView parent, View view, int position, long id) {
-            // handle which item was clicked based on position
-            // this will launch off pick intent
+        /**
+         * Handle the action clicked in the ""Add to home"" dialog.
+         */
+        public void onClick(DialogInterface dialog, int which) {
+            Resources res = getResources();
+            cleanup();
             
-            Object tag = view.getTag();
-            if (tag instanceof AddAdapter.ListItem) {
-                AddAdapter.ListItem item = (AddAdapter.ListItem) tag;
-                cleanup();
-                switch (item.actionTag) {
-                    case AddAdapter.ITEM_APPLICATION: {
-                        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
-                        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
-
-                        Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);
-                        pickIntent.putExtra(Intent.EXTRA_INTENT, mainIntent);
-                        startActivityForResult(pickIntent, REQUEST_PICK_APPLICATION);
-                        break;
-                    }
-
-                    case AddAdapter.ITEM_SHORTCUT: {
-                        Intent shortcutIntent = new Intent(Intent.ACTION_CREATE_SHORTCUT);
-
-                        Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);
-                        pickIntent.putExtra(Intent.EXTRA_INTENT, shortcutIntent);
-                        pickIntent.putExtra(Intent.EXTRA_TITLE,
-                                getText(R.string.title_select_shortcut));
-                        startActivityForResult(pickIntent, REQUEST_PICK_SHORTCUT);
-                        break;
-                    }
+            switch (which) {
+                case AddAdapter.ITEM_SHORTCUT: {
+                    // Insert extra item to handle picking application
+                    Bundle bundle = new Bundle();
                     
-                    case AddAdapter.ITEM_SEARCH: {
-                        addSearch();
-                        break;
-                    }
+                    ArrayList<String> shortcutNames = new ArrayList<String>();
+                    shortcutNames.add(res.getString(R.string.group_applications));
+                    bundle.putStringArrayList(Intent.EXTRA_SHORTCUT_NAME, shortcutNames);
                     
-                    case AddAdapter.ITEM_APPWIDGET: {
-                        int appWidgetId = Launcher.this.mAppWidgetHost.allocateAppWidgetId();
-                        
-                        Intent pickIntent = new Intent(AppWidgetManager.ACTION_APPWIDGET_PICK);
-                        pickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
-                        // add the search widget
-                        ArrayList<AppWidgetProviderInfo> customInfo =
-                                new ArrayList<AppWidgetProviderInfo>();
-                        AppWidgetProviderInfo info = new AppWidgetProviderInfo();
-                        info.provider = new ComponentName(getPackageName(), ""XXX.YYY"");
-                        info.label = getString(R.string.group_search);
-                        info.icon = R.drawable.ic_search_widget;
-                        customInfo.add(info);
-                        pickIntent.putParcelableArrayListExtra(
-                                AppWidgetManager.EXTRA_CUSTOM_INFO, customInfo);
-                        ArrayList<Bundle> customExtras = new ArrayList<Bundle>();
-                        Bundle b = new Bundle();
-                        b.putString(EXTRA_CUSTOM_WIDGET, SEARCH_WIDGET);
-                        customExtras.add(b);
-                        pickIntent.putParcelableArrayListExtra(
-                                AppWidgetManager.EXTRA_CUSTOM_EXTRAS, customExtras);
-                        // start the pick activity
-                        startActivityForResult(pickIntent, REQUEST_PICK_APPWIDGET);
-                        break;
-                    }
+                    ArrayList<ShortcutIconResource> shortcutIcons =
+                            new ArrayList<ShortcutIconResource>();
+                    shortcutIcons.add(ShortcutIconResource.fromContext(Launcher.this,
+                            R.drawable.ic_launcher_application));
+                    bundle.putParcelableArrayList(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, shortcutIcons);
                    ","Automated import from / / branches / master / . . . @ 141652 , 141652","""Remove shortcut list and item layouts, and refactor shortcut creation dialog to use a list adapter""","""Refactor shortcut creation dialog to handle application and folder selection""","This commit removes the layout files for the create shortcut list and list item, and modifies the AddAdapter class to only include items for shortcuts, app widgets, live folders, and wallpapers. It also modifies the Launcher class to handle the case where the user selects the ""Applications"" shortcut by launching an activity to pick an application, and to handle the case where the user selects the ""Folder"" shortcut by adding a folder to the desktop. Additionally, it modifies the CreateShortcut inner class to use a DialogInterface.OnClickListener instead of an AdapterView.OnItemClickListener, and to set the adapter for the dialog using the builder's setAdapter method instead of inflating a ListView and setting the adapter manually. The commit message could be: ""Refactor shortcut creation dialog and remove unused layout files.""","""Remove deprecated shortcut and folder options from launcher add menu; refactor code to handle application and live folder case"""
"diff --git a/xds/src/main/java/io/grpc/xds/XdsClient.java b/xds/src/main/java/io/grpc/xds/XdsClient.java
index a19fd301c..85d15f5bc 100644
--- a/xds/src/main/java/io/grpc/xds/XdsClient.java
+++ b/xds/src/main/java/io/grpc/xds/XdsClient.java
@@ -40,6 +40,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 
 /**
@@ -491,19 +492,22 @@ abstract class XdsClient {
         ServerInfo serverInfo = servers.get(0);
         String serverUri = serverInfo.getServerUri();
         List<ChannelCreds> channelCredsList = serverInfo.getChannelCredentials();
-        ManagedChannel ch = null;
+        ManagedChannelBuilder<?> channelBuilder = null;
         // Use the first supported channel credentials configuration.
         // Currently, only ""google_default"" is supported.
         for (ChannelCreds creds : channelCredsList) {
           if (creds.getType().equals(""google_default"")) {
-            ch = GoogleDefaultChannelBuilder.forTarget(serverUri).build();
+            channelBuilder = GoogleDefaultChannelBuilder.forTarget(serverUri);
             break;
           }
         }
-        if (ch == null) {
-          ch = ManagedChannelBuilder.forTarget(serverUri).build();
+        if (channelBuilder == null) {
+          channelBuilder = ManagedChannelBuilder.forTarget(serverUri);
         }
-        return ch;
+
+        return channelBuilder
+            .keepAliveTime(5, TimeUnit.MINUTES)
+            .build();
       }
   ",enable keepalive for XDS channel .,"""Add keep-alive time configuration to XdsClient's managed channel""","""Add configurable keep-alive time to ManagedChannelBuilder""

However, a more descriptive and conventional commit message would be:

""Add configurable keep-alive time to XdsClient's ManagedChannelBuilder""

This commit message clearly states the change made in the code, which is adding a configurable keep-alive time to the ManagedChannelBuilder.","""Update XdsClient to use GoogleDefaultChannelBuilder and set keepAliveTime""

Explanation:
The code change introduces the use of `GoogleDefaultChannelBuilder` instead of `ManagedChannelBuilder` when creating a new `ManagedChannel`. It also sets the `keepAliveTime` to 5 minutes when building the channel. The commit message should reflect these changes.",Add keepAliveTime to ManagedChannel to improve connection reliability in XdsClient.
"diff --git a/src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/plugins/dependency/StrictJavaDepsPlugin.java b/src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/plugins/dependency/StrictJavaDepsPlugin.java
index 7c6999b5d9..da57a8f970 100644
--- a/src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/plugins/dependency/StrictJavaDepsPlugin.java
+++ b/src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/plugins/dependency/StrictJavaDepsPlugin.java
@@ -359,6 +359,12 @@ public final class StrictJavaDepsPlugin extends BlazeJavaCompilerPlugin {
     if (replacement != null) {
       return replacement;
     }
+    int atIndex = target.indexOf('@');
+    if (atIndex != -1) {
+      // target starts with @@repo ('@' is escaped for the params file parsing) so one @ needs to
+      // be stripped.
+      target = target.substring(1);
+    }
     int colonIndex = target.indexOf(':');
     if (colonIndex == -1) {
       // No ':' in target, nothing to do.
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompileAction.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompileAction.java
index 28bc1c98a8..572fcc112f 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompileAction.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompileAction.java
@@ -646,7 +646,8 @@ public class JavaCompileAction extends AbstractAction {
       Label label = getTargetName(jar);
       builder.add(label.getPackageIdentifier().getRepository().isDefault()
           ? label.toString()
-          : label.toPathFragment().toString());
+          // Escape '@' prefix for .params file.
+          : ""@"" + label.toString());
     }
     return builder.build();
   }
diff --git a/src/test/shell/bazel/local_repository_test.sh b/src/test/shell/bazel/local_repository_test.sh
index 6e5091c1b7..6c77b5b689 100755
--- a/src/test/shell/bazel/local_repository_test.sh
+++ b/src/test/shell/bazel/local_repository_test.sh
@@ -287,4 +287,83 @@ EOF
   expect_log ""Hello""
 }
 
+# Creates an indirect dependency on X from A and make sure the error message
+# refers to the correct label.
+function test_indirect_dep_message() {
+  local external_dir=$TEST_TMPDIR
+  mkdir -p a b $external_dir/x
+  cat > a/A.java <<EOF
+package a;
+
+import x.X;
+
+public class A {
+  public static void main(String args[]) {
+    X.print();
+  }
+}
+EOF
+  cat > a/BUILD <<EOF
+java_binary(
+    name = ""a"",
+    main_class = ""a.A"",
+    srcs = [""A.java""],
+    deps = [""//b""],
+)
+EOF
+
+
+  cat > b/B.java <<EOF
+package b;
+
+public class B {
+  public static void print() {
+     System.out.println(""B"");
+  }
+}
+EOF
+  cat > b/BUILD <<EOF
+java_library(
+    name = ""b"",
+    srcs = [""B.java""],
+    deps = [""//external:x""],
+    visibility = [""//visibility:public""],
+)
+EOF
+
+  touch $external_dir/WORKSPACE
+  cat > $external_dir/x/X.java <<EOF
+package x;
+
+public class X {
+  public static void print() {
+    System.out.println(""X"");
+  }
+}
+EOF
+  cat > $external_dir/x/BUILD <<EOF
+java_library(
+    name = ""x"",
+    srcs = [""X.java""],
+    visibility = [""//visibility:public""],
+)
+EOF
+
+  cat > WORKSPACE <<EOF
+local_repository(
+    name = ""x-repo"",
+    path = ""$external_dir"",
+)
+
+bind(
+    name = ""x"",
+    actual = ""@x-repo//x"",
+)
+EOF
+
+  bazel build //a:a >& $TEST_log && fail ""Building //a:a should error out""
+  expect_log ""** Please add the following dependencies:""
+  expect_log ""@x-repo//x  to //a:a""
+}
+
 run_suite ""local repository tests""",Make the indirect dependency message show the correct label for external deps .,"""Fix StrictJavaDepsPlugin to handle labels with '@' prefix""","""Escape '@' prefix for .params file and improve local repository test""","This commit appears to make the following changes:

1. In `StrictJavaDepsPlugin.java`, it modifies the target string by removing an extra '@' character if it exists at the beginning of the string. This is done to handle the case where the target starts with '@@repo', so one '@' needs to be stripped.

2. In `JavaCompileAction.java`, it changes the way labels are added to the classpath string. If the label's repository is not the default one, it adds an extra '@' character at the beginning of the label string. This is done to escape the '@' prefix for the .params file.

3. In `local_repository_test.sh`, it adds a new function `test_indirect_dep_message()` to test the error message for an indirect dependency in a Java project. The function creates a project with an indirect dependency on an external library and checks that the error message refers to the correct label.

The commit message could be something like:

""Update StrictJavaDepsPlugin and JavaCompileAction to handle '@' character in labels, and add test for indirect dependency error message in local repository tests.""",Handle indirect dependencies correctly and update error messages for targets with '@' to ensure proper label reference.
"diff --git a/src/functions/org/apache/jmeter/functions/Property.java b/src/functions/org/apache/jmeter/functions/Property.java
index 1e5d2071b5..0ba1c5fa55 100644
--- a/src/functions/org/apache/jmeter/functions/Property.java
+++ b/src/functions/org/apache/jmeter/functions/Property.java
@@ -84,10 +84,11 @@ public class Property extends AbstractFunction implements Serializable
 
     // Number of parameters expected - used to reject invalid calls
     private static final int MIN_PARAMETER_COUNT = 1;
-    private static final int MAX_PARAMETER_COUNT = 2;
+    private static final int MAX_PARAMETER_COUNT = 3;
     static {
         desc.add(JMeterUtils.getResString(""property_name_param""));
         desc.add(JMeterUtils.getResString(""function_name_param""));
+        desc.add(JMeterUtils.getResString(""property_default_param""));
     }
 
     private Object[] values;
@@ -106,14 +107,19 @@ public class Property extends AbstractFunction implements Serializable
         Sampler currentSampler)
         throws InvalidVariableException
     {
-
         String propertyName = ((CompoundVariable) values[0]).execute();
+		String propertyDefault = propertyName;
+        if (values.length > 2){ // We have a 3rd parameter
+        	propertyDefault= ((CompoundVariable) values[2]).execute();
+        }
         String propertyValue =
-            JMeterUtils.getPropDefault(propertyName, propertyName);
+            JMeterUtils.getPropDefault(propertyName, propertyDefault);
         if (values.length > 1)
         {
             String variableName = ((CompoundVariable) values[1]).execute();
-            getVariables().put(variableName, propertyValue);
+            if (variableName.length() > 0){// Allow for empty name
+            	getVariables().put(variableName, propertyValue);
+            }
         }
  ",See bug 23039 : add default value parameter to __property ( ) function .,"""Added optional third parameter to Property function for default value""","""Updated Property function to support default property value""

This commit message accurately reflects the changes made in the code, which include adding support for a default property value and updating the function to handle this new parameter.","""Added optional third parameter to Property function to allow specifying a default property value""

Explanation:

* The `MAX_PARAMETER_COUNT` constant has been increased from 2 to 3.
* The function description has been updated to include a new parameter, `property_default_param`.
* The code has been updated to check if a third parameter is present and, if so, to use its value as the default property value instead of the property name.
* The code has also been updated to only put the property value into the variables if the variable name is not empty.
* These changes allow the user to specify a default value for the property in case it is not defined, and to optionally store the property value in a variable.","Update Property function to accept a default value as third parameter, ensuring effective handling of properties."
"diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java
index f8880093fb..b2bee6d6d5 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/AnkiActivity.java
@@ -483,7 +483,9 @@ public class AnkiActivity extends AppCompatActivity implements LoaderManager.Loa
                     .setSmallIcon(R.drawable.ic_stat_notify)
                     .setContentTitle(title)
                     .setContentText(message)
+                    .setColor(getResources().getColor(R.color.theme_primary))
                     .setStyle(new NotificationCompat.BigTextStyle().bigText(message))
+                    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                     .setTicker(ticker);
             // Enable vibrate and blink if set in preferences
             if (prefs.getBoolean(""widgetVibrate"", false)) {
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/services/NotificationService.java b/AnkiDroid/src/main/java/com/ichi2/anki/services/NotificationService.java
index f5eb6e9d71..562d307097 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/services/NotificationService.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/services/NotificationService.java
@@ -62,6 +62,7 @@ public class NotificationService extends Service {
             String cardsDueText = getString(R.string.widget_minimum_cards_due_notification_ticker_text, dueCardsCount);
             NotificationCompat.Builder builder = new NotificationCompat.Builder(this)
                     .setSmallIcon(R.drawable.ic_stat_notify)
+          ",Add color to notifications,"""Enhance notification style and visibility in AnkiActivity and NotificationService""","""Added notification color and visibility settings""","""Added notification color and visibility settings in AnkiActivity and NotificationService""","""Enhance notifications with color, public visibility, and big text style for better clarity and design consistency."""
"diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index a4724bd780..6947690423 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -20,8 +20,8 @@
 -->
 <manifest xmlns:android=""http://schemas.android.com/apk/res/android""
     package=""com.owncloud.android""
-    android:versionCode=""10040104""
-    android:versionName=""1.4.1 RC4"">
+    android:versionCode=""10040199""
+    android:versionName=""1.4.1"">
 
     <uses-sdk
         android:minSdkVersion=""14""",updated version info for final release,"""Bump version to 1.4.1""","""Bump version to 1.4.1""","""Updated AndroidManifest.xml: Increased versionCode to 10040199 and versionName to 1.4.1""",Update version to 1.4.1; adjust versionCode to 10040199 in AndroidManifest.xml.
"diff --git a/graylog2-server/src/main/java/org/graylog/plugins/views/search/Search.java b/graylog2-server/src/main/java/org/graylog/plugins/views/search/Search.java
index e7b65ad592..9f30502d01 100644
--- a/graylog2-server/src/main/java/org/graylog/plugins/views/search/Search.java
+++ b/graylog2-server/src/main/java/org/graylog/plugins/views/search/Search.java
@@ -29,6 +29,7 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import org.graylog.plugins.views.search.errors.PermissionException;
 import org.graylog.plugins.views.search.views.PluginMetadataSummary;
 import org.graylog2.contentpacks.ContentPackable;
 import org.graylog2.contentpacks.EntityDescriptorIds;
@@ -129,6 +130,10 @@ public abstract class Search implements ContentPackable<SearchEntity> {
         final Set<Query> withoutStreams = Sets.difference(queries(), withStreams);
 
         final ImmutableSet<String> defaultStreams = defaultStreamsSupplier.get();
+
+        if (defaultStreams.isEmpty())
+            throw new PermissionException(""User doesn't have access to any streams"");
+
         final Set<Query> withDefaultStreams = withoutStreams.stream()
                 .map(q -> q.addStreamsToFilter(defaultStreams))
                 .collect(toSet());
diff --git a/graylog2-server/src/main/java/org/graylog/plugins/views/search/rest/PermittedStreams.java b/graylog2-server/src/main/java/org/graylog/plugins/views/search/rest/PermittedStreams.java
index a8c61af4e4..19b2d16d9b 100644
--- a/graylog2-server/src/main/java/org/graylog/plugins/views/search/rest/PermittedStreams.java
+++ b/graylog2-server/src/main/java/org/graylog/plugins/views/search/rest/PermittedStreams.java
@@ -20,7 +20,6 @@ import com.google.common.collect.ImmutableSet;
 import org.graylog2.streams.StreamService;
 
 import javax.inject.Inject;
-import javax.ws.rs.ForbiddenException;
 import java.util.Set;
 import java.util.function.Predicate;
 
@@ -46,9 +45,6 @@ public class PermittedStreams {
                 .filter(isStreamIdPermitted)
                 .collect(toSet());
 
-        if (result.isEmpty())
-            throw new ForbiddenException(""There are no streams you are permitted to use."");
-
         return ImmutableSet.copyOf(result);
     }
 }
diff --git a/graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchTest.java b/graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchTest.java
index f078f9a5ee..680c6de6ff 100644
--- a/graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchTest.java
+++ b/graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchTest.java
@@ -20,6 +20,7 @@ import com.google.common.collect.HashMultimap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Multimap;
 import org.graylog.plugins.views.search.engine.BackendQuery;
+import org.graylog.plugins.views.search.errors.PermissionException;
 import org.graylog.plugins.views.search.filter.StreamFilter;
 import org.graylog.plugins.views.search.searchtypes.MessageList;
 import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;
@@ -36,6 +37,7 @@ import java.util.UUID;
 import java.util.stream.Collectors;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -67,6 +69,14 @@ public class SearchTest {
         assertThat(before).isEqualTo(after);
     }
 
+    @Test
+    public void throwsExceptionIfQueryHasNoStreamsAndThereAreNoDefaultStreams() {
+        Search search = searchWithQueriesWithStreams(""a,b,c"", """");
+
+        assertThatExceptionOfType(PermissionException.class)
+                .isThrownBy(() -> search.addStreamsToQueriesWithoutStreams(ImmutableSet::of));
+    }
+
     @Test
     public void usedStreamIdsReturnsStreamIdsOfSearchTypes() {
         final Query query1 = queryWithStreams(""a,b,d"").toBuilder()
diff --git a/graylog2-server/src/test/java/org/graylog/plugins/views/search/rest/PermittedStreamsTest.java b/graylog2-server/src/test/java/org/graylog/plugins/views/search/rest/PermittedStreamsTest.java
index 9398195ac6..1f3bf532be 100644
--- a/graylog2-server/src/test/java/org/graylog/plugins/views/search/rest/PermittedStreamsTest.java
+++ b/graylog2-server/src/test/java/org/graylog/plugins/views/search/rest/PermittedStreamsTest.java
@@ -23,7 +23,6 @@ import org.graylog2.streams.StreamService;
 import org.junit.Before;
 import org.junit.Test;
 
-import javax.ws.rs.ForbiddenException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -31,7 +30,6 @@ import java.util.List;
 
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.graylog2.plugin.streams.Stream.DEFAULT_EVENT_STREAM_IDS;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -67,11 +65,12 @@ public class PermittedStreamsTest {
     }
 
     @Test
-    public void failsIfNoStreamsFound() {
+    public void returnsEmptyListIfNoStreamsFound() {
         stubStreams(""oans"", ""zwoa"", ""gsuffa"");
 
-        assertThatExceptionOfType(ForbiddenException.class)
-                .isThrownBy(() -> sut.load(id -> false));
+        ImmutableSet<String> result = sut.load(id -> false);
+
+        assertThat(result).isEmpty();
     }
 
     @Test",Allow PermittedStreams to load empty lists ( <issue_id> ) .,"""Throw PermissionException if user has no access to any streams""","""Add permission checks for streams in Search and PermittedStreams classes""","""Refactor exception handling for search queries without streams and no default streams""

This commit introduces a new exception class, `PermissionException`, which is used in the `Search` class to handle cases where a user doesn't have access to any streams. Previously, a `ForbiddenException` was used for this purpose in the `PermittedStreams` class, but this has been removed in favor of the new exception.

The `SearchTest` class has also been updated to include a new test case for the scenario where a search query has no streams and there are no default streams available. This test case verifies that a `PermissionException` is thrown in this situation.

Additionally, the `PermittedStreamsTest` class has been modified to expect an empty list instead of a `ForbiddenException` when no streams are found. This change is likely due to the refactoring of exception handling in the `PermittedStreams` class.","""Add PermissionException for empty default streams in Search and modify prohibited streams behavior to return empty list instead of exception."""
"diff --git a/source/de/anomic/yacy/yacyVersion.java b/source/de/anomic/yacy/yacyVersion.java
index f04070605..6e3e3c590 100644
--- a/source/de/anomic/yacy/yacyVersion.java
+++ b/source/de/anomic/yacy/yacyVersion.java
@@ -532,7 +532,6 @@ public final class yacyVersion implements Comparator<yacyVersion>, Comparable<ya
         
         // remove old files
         long now = System.currentTimeMillis();
-        System.out.println(""+-+ DEBUG now is ""+ new Date(now));
         final Iterator<yacyVersion> iter = downloadedreleases.descendingIterator();
         while (iter.hasNext()) {
             release = iter.next();
@@ -544,7 +543,6 @@ public final class yacyVersion implements Comparator<yacyVersion>, Comparable<ya
             }
             
             File downloadedFile = new File(filesPath + File.separator + release.name);
-            System.out.println(""+-+ DEBUG lastModified of ""+ downloadedFile.getName() +"" is ""+ new Date(downloadedFile.lastModified()) +"" delta=""+ (now-downloadedFile.lastModified()) +"" > ""+ deleteAfterMillis);
             if(now - downloadedFile.lastModified() > deleteAfterMillis) {
                 if(!downloadedFile.delete()) {
                     serverLog.logWarning(""STARTUP"", ""cannot delete old release ""+ downloadedFile.getAbsolutePath());",removed DEBUG output .,"""Remove debug print statements in yacyVersion.java""","""Remove debugging print statements from yacyVersion class""

This commit message accurately reflects the changes made in the diff, which is the removal of two print statements from the yacyVersion class.","""Remove debug print statements from yacyVersion.java""

Explanation: The diff shows that two lines of code have been removed from the file `yacyVersion.java`. Both lines contain `System.out.println` statements, which are commonly used for debugging purposes. Therefore, the commit message should indicate that debug print statements have been removed from the code.","""Remove debug print statements from yacyVersion.java code."""
"diff --git a/.idea/inspectionProfiles/Druid.xml b/.idea/inspectionProfiles/Druid.xml
index 830d8e7181..7864a1cea6 100644
--- a/.idea/inspectionProfiles/Druid.xml
+++ b/.idea/inspectionProfiles/Druid.xml
@@ -103,6 +103,13 @@
       <option name=""m_reportCollectionMethods"" value=""true"" />
       <option name=""m_ignorePrivateMethods"" value=""false"" />
     </inspection_tool>
+    <inspection_tool class=""SSBasedInspection"" enabled=""true"" level=""ERROR"" enabled_by_default=""true"">
+      <searchConfiguration name=""Suboptimal IndexedInts iteration"" text=""$x$ &lt; $y$.size()"" recursive=""false"" caseInsensitive=""true"" type=""JAVA"">
+        <constraint name=""__context__"" target=""true"" within="""" contains="""" />
+        <constraint name=""x"" within="""" contains="""" />
+        <constraint name=""y"" nameOfExprType=""IndexedInts"" exprTypeWithinHierarchy=""true"" within="""" contains="""" />
+      </searchConfiguration>
+    </inspection_tool>
     <inspection_tool class=""SpellCheckingInspection"" enabled=""false"" level=""TYPO"" enabled_by_default=""false"">
       <option name=""processCode"" value=""true"" />
       <option name=""processLiterals"" value=""true"" />
diff --git a/benchmarks/src/main/java/io/druid/benchmark/CompressedVSizeColumnarMultiIntsBenchmark.java b/benchmarks/src/main/java/io/druid/benchmark/CompressedVSizeColumnarMultiIntsBenchmark.java
index 958f3aa7d1..5662ab7bf2 100644
--- a/benchmarks/src/main/java/io/druid/benchmark/CompressedVSizeColumnarMultiIntsBenchmark.java
+++ b/benchmarks/src/main/java/io/druid/benchmark/CompressedVSizeColumnarMultiIntsBenchmark.java
@@ -152,7 +152,7 @@ public class CompressedVSizeColumnarMultiIntsBenchmark
   {
     for (int i = filter.nextSetBit(0); i >= 0; i = filter.nextSetBit(i + 1)) {
       IndexedInts row = uncompressed.get(i);
-      for (int j = 0; j < row.size(); j++) {
+      for (int j = 0, rowSize = row.size(); j < rowSize; j++) {
         blackhole.consume(row.get(j));
       }
     }
@@ -165,7 +165,7 @@ public class CompressedVSizeColumnarMultiIntsBenchmark
   {
     for (int i = filter.nextSetBit(0); i >= 0; i = filter.nextSetBit(i + 1)) {
       IndexedInts row = compressed.get(i);
-      for (int j = 0; j < row.size(); j++) {
+      for (int j = 0, rowSize = row.size(); j < rowSize; j++) {
         blackhole.consume(row.get(j));
       }
     }
diff --git a/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountAggregator.java b/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountAggregator.java
index 0903209b1f..5a51a03a6b 100644
--- a/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountAggregator.java
+++ b/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountAggregator.java
@@ -43,7 +43,7 @@ public class DistinctCountAggregator implements Aggregator
   public void aggregate()
   {
     IndexedInts row = selector.getRow();
-    for (int i = 0; i < row.size(); i++) {
+    for (int i = 0, rowSize = row.size(); i < rowSize; i++) {
       int index = row.get(i);
       mutableBitmap.add(index);
     }
diff --git a/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountBufferAggregator.java b/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountBufferAggregator.java
index 389e2c4187..377280d778 100644
--- a/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountBufferAggregator.java
+++ b/extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountBufferAggregator.java
@@ -53,7 +53,7 @@ public class DistinctCountBufferAggregator implements BufferAggregator
   {
     MutableBitmap mutableBitmap = getMutableBitmap(position);
     IndexedInts row = selector.getRow();
-    for (int i = 0; i < row.size(); i++) {
+    for (int i = 0, rowSize = row.size(); i < rowSize; i++) {
       int index = row.get(i);
       mutableBitmap.add(index);
     }
diff --git a/processing/src/main/java/io/druid/query/aggregation/cardinality/types/StringCardinalityAggregatorColumnSelectorStrategy.java b/processing/src/main/java/io/druid/query/aggregation/cardinality/types/StringCardinalityAggregatorColumnSelectorStrategy.java
index 71661abf91..390b44d7b2 100644
--- a/processing/src/main/java/io/druid/query/aggregation/cardinality/types/StringCardinalityAggregatorColumnSelectorStrategy.java
+++ b/processing/src/main/java/io/druid/query/aggregation/cardinality/types/StringCardinalityAggregatorColumnSelectorStrategy.java
@@ -62,7 +62,7 @@ public class StringCardinalityAggregatorColumnSelectorStrategy implements Cardin
   public void hashValues(DimensionSelector dimSelector, HyperLogLogCollector collector)
   {
     IndexedInts row = dimSelector.getRow();
-    for (int i = 0; i < row.size(); i++) {
+    for (int i = 0, rowSize = row.size(); i < rowSize; i++) {
       int index = row.get(i);
       final String value = dimSelector.lookupName(index);
       collector.add(CardinalityAggregator.hashFn.hashUnencodedChars(nullToSpecial(value)).asBytes());
diff --git a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java
index eb3a6cc626..5ddb45d102 100644
--- a/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java
+++ b/processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java
@@ -190,12 +190,13 @@ public class GroupByQueryEngine
 
         final DimensionSelector dimSelector = dims.get(0);
         final IndexedInts row = dimSelector.getRow();
-        if (row == null || row.size() == 0) {
+        final int rowSize = row.size();
+        if (rowSize == 0) {
           ByteBuffer newKey = key.duplicate();
           newKey.putInt(MISSING_VALUE);
           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));
         } else {
-          for (int i = 0; i < row.size(); i++) {
+          for (int i = 0; i < rowSize; i++) {
             ByteBuffer newKey = key.duplicate();
             int dimValue = row.get(i);
             newKey.putInt(dimValue);
diff --git a/processing/src/main/java/io/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java b/processing/src/main/java/io/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java
index 6db22e1efb..6720863bb5 100644
--- a/processing/src/main/java/io/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java
+++ b/processing/src/main/java/io/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java
@@ -639,12 +639,13 @@ public class GroupByQueryEngineV2
       }
 
       while (!cursor.isDone()) {
-        if (multiValues.size() == 0) {
+        int multiValuesSize = multiValues.size();
+        if (multiValuesSize == 0) {
           if (!grouper.aggregate(GroupByColumnSelectorStrategy.GROUP_BY_MISSING_VALUE).isOk()) {
             return;
           }
         } else {
-          for (; nextValIndex < multiValues.size(); nextValIndex++) {
+          for (; nextValIndex < multiValuesSize; nextValIndex++) {
             if (!grouper.aggregate(multiValues.get(nextValIndex)).isOk()) {
               return;
             }
diff --git a/processing/src/main/java/io/druid/query/groupby/epinephelinae/column/DictionaryBuildingStringGroupByColumnSelectorStrategy.java b/processing/src/main/java/io/druid/query/groupby/epinephelinae/column/DictionaryBuildingStringGroupByColumnSelectorStrategy.java
index db58c36e05..2fd6fb93b3 100644
--- a/processing/src/main/java/io/druid/query/groupby/epinephelinae/column/DictionaryBuildingStringGroupByColumnSelectorStrategy.java
+++ b/processing/src/main/java/io/druid/query/groupby/epinephelinae/column/DictionaryBuildingStringGroupByColumnSelectorStrategy.java
@@ -75,7 +75,7 @@ public class DictionaryBuildingStringGroupByColumnSelectorStrategy extends Strin
     }
     int rowSize = row.size();
     newRow.ensureSize(rowSize);
-    for (int i = 0; i < row.size(); i++) {
+    for (int i = 0; i < rowSize; i++) {
       final String value = dimSelector.lookupName(row.get(i));
       final int dictId = reverseDictionary.getInt(value);
       if (dictId < 0) {
diff --git a/processing/src/main/java/io/druid/query/metadata/SegmentAnalyzer.java b/processing/src/main/java/io/druid/query/metadata/SegmentAnalyzer.java
index 6f7b7f7a0c..196bb42cd3 100644
--- a/processing/src/main/java/io/druid/query/metadata/SegmentAnalyzer.java
+++ b/processing/src/main/java/io/druid/query/metadata/SegmentAnalyzer.java
@@ -276,9 +276,9 @@ public class SegmentAnalyzer
               }
               long current = accumulated;
               while (!cursor.isDone()) {
-                final IndexedInts vals = selector.getRow();
-                for (int i = 0; i < vals.size(); ++i) {
-                  final String dimVal = selector.lookupName(vals.get(i));
+                final IndexedInts row = selector.getRow();
+                for (int i = 0, rowSize = row.size(); i < rowSize; ++i) {
+                  final String dimVal = selector.lookupName(row.get(i));
                   if (dimVal != null && !dimVal.isEmpty()) {
                     current += StringUtils.estimatedBinaryLengthAsUTF8(dimVal);
                   }
diff --git a/processing/src/main/java/io/druid/query/search/SearchQueryRunner.java b/processing/src/main/java/io/druid/query/search/SearchQueryRunner.java
index 7921d717b9..81d4cb1ff3 100644
--- a/processing/src/main/java/io/druid/query/search/SearchQueryRunner.java
+++ b/processing/src/main/java/io/druid/query/search/SearchQueryRunner.java
@@ -127,9 +127,9 @@ public class SearchQueryRunner implements QueryRunner<Result<SearchResultValue>>
     )
     {
       if (selector != null && !isNilSelector(selector)) {
-        final IndexedInts vals = selector.getRow();
-        for (int i = 0; i < vals.size(); ++i) {
-          final String dimVal = selector.lookupName(vals.get(i));
+        final IndexedInts row = selector.getRow();
+        for (int i = 0, rowSize = row.size(); i < rowSize; ++i) {
+          final String dimVal = selector.lookupName(row.get(i));
           if (searchQuerySpec.accept(dimVal)) {
             set.addTo(new SearchHit(outputName, Strings.nullToEmpty(dimVal)), 1);
             if (set.size() >= limit) {
diff --git a/processing/src/main/java/io/druid/query/select/SelectQueryEngine.java b/processing/src/main/java/io/druid/query/select/SelectQueryEngine.java
index bd3268f003..029ea57493 100644
--- a/processing/src/main/java/io/druid/query/select/SelectQueryEngine.java
+++ b/processing/src/main/java/io/druid/query/select/SelectQueryEngine.java
@@ -111,21 +111,19 @@ public class SelectQueryEngine
     @Override
     public void addRowValuesToSelectResult(String outputName, DimensionSelector selector, Map<String, Object> resultMap)
     {
-      if (selector == null) {
+      final IndexedInts row = selector.getRow();
+      int rowSize = row.size();
+      if (rowSize == 0) {
         resultMap.put(outputName, null);
+      } else if (rowSize == 1) {
+        final String dimVal = selector.lookupName(row.get(0));
+        resultMap.put(outputName, dimVal);
       } else {
-        final IndexedInts vals = selector.getRow();
-
-        if (vals.size() == 1) {
-          final String dimVal = selector.lookupName(vals.get(0));
-          resultMap.put(outputName, dimVal);
-        } else {
-          List<String> dimVals = new ArrayList<>(vals.size());
-          for (int i = 0; i < vals.size(); ++i) {
-            dimVals.add(selector.lookupName(vals.get(i)));
-          }
-          resultMap.put(outputName, dimVals);
+        List<String> dimVals = new ArrayList<>(rowSize);
+        for (int i = 0; i < rowSize; ++i) {
+          dimVals.add(selector.lookupName(row.get(i)));
         }
+        resultMap.put(outputName, dimVals);
       }
     }
   }
@@ -300,7 +298,9 @@ public class SelectQueryEngine
     theEvent.put(timestampKey, DateTimes.utc(timestampColumnSelector.getLong()));
 
     for (ColumnSelectorPlus<SelectColumnSelectorStrategy> selectorPlus : selectorPlusList) {
-      selectorPlus.getColumnSelectorStrategy().addRowValuesToSelectResult(selectorPlus.getOutputName(), selectorPlus.getSelector(), theEvent);
+      selectorPlus
+          .getColumnSelectorStrategy()
+          .addRowValuesToSelectResult(selectorPlus.getOutputName(), selectorPlus.getSelector(), theEvent);
     }
 
     for (Map.Entry<String, BaseObjectColumnValueSelector<?>> metSelector : metSelectors.entrySet()) {
diff --git a/processing/src/main/java/io/druid/query/topn/types/StringTopNColumnSelectorStrategy.java b/processing/src/main/java/io/druid/query/topn/types/StringTopNColumnSelectorStrategy.java
index 26bcfc05df..5208ad7cde 100644
--- a/processing/src/main/java/io/druid/query/topn/types/StringTopNColumnSelectorStrategy.java
+++ b/processing/src/main/java/io/druid/query/topn/types/StringTopNColumnSelectorStrategy.java
@@ -132,7 +132,7 @@ public class StringTopNColumnSelectorStrategy
     long processedRows = 0;
     while (!cursor.isDone()) {
       final IndexedInts dimValues = selector.getRow();
-      for (int i = 0; i < dimValues.size(); ++i) {
+      for (int i = 0, size = dimValues.size(); i < size; ++i) {
         final int dimIndex = dimValues.get(i);
         Aggregator[] theAggregators = rowSelector[dimIndex];
         if (theAggregators == null) {
@@ -165,7 +165,7 @@ public class StringTopNColumnSelectorStrategy
     long processedRows = 0;
     while (!cursor.isDone()) {
       final IndexedInts dimValues = selector.getRow();
-      for (int i = 0; i < dimValues.size(); ++i) {
+      for (int i = 0, size = dimValues.size(); i < size; ++i) {
         final int dimIndex = dimValues.get(i);
         final String key = selector.lookupName(dimIndex);
 
diff --git a/processing/src/main/java/io/druid/segment/DimensionSelector.java b/processing/src/main/java/io/druid/segment/DimensionSelector.java
index 3180ddb388..7d6cded0ab 100644
--- a/processing/src/main/java/io/druid/segment/DimensionSelector.java
+++ b/processing/src/main/java/io/druid/segment/DimensionSelector.java
@@ -167,16 +167,17 @@ public interface DimensionSelector extends ColumnValueSelector, HotLoopCallee
   default Object defaultGetObject()
   {
     IndexedInts row = getRow();
-    if (row.size() == 0) {
+    int rowSize = row.size();
+    if (rowSize == 0) {
       return null;
-    }
-    if (row.size() == 1) {
+    } else if (rowSize == 1) {
       return lookupName(row.get(0));
+    } else {
+      final String[] strings = new String[rowSize];
+      for (int i = 0; i < rowSize; i++) {
+        strings[i] = lookupName(row.get(i));
+      }
+      return strings;
     }
-    final String[] strings = new String[row.size()];
-    for (int i = 0; i < row.size(); i++) {
-      strings[i] = lookupName(row.get(i));
-    }
-    return strings;
   }
 }
diff --git a/processing/src/main/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplier.java b/processing/src/main/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplier.java
index 4d90ccaeac..7f0bebf1d7 100644
--- a/processing/src/main/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplier.java
+++ b/processing/src/main/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplier.java
@@ -109,7 +109,7 @@ public class CompressedVSizeColumnarMultiIntsSupplier implements WritableSupplie
     while (objects.hasNext()) {
       IndexedInts next = objects.next();
       offsetList.add(offset);
-      for (int i = 0; i < next.size(); i++) {
+      for (int i = 0, size = next.size(); i < size; i++) {
         values.add(next.get(i));
       }
       offset += next.size();
diff --git a/processing/src/main/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSupplier.java b/processing/src/main/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSupplier.java
index bdc609f643..4b3cf3b7cb 100644
--- a/processing/src/main/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSupplier.java
+++ b/processing/src/main/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSupplier.java
@@ -91,7 +91,7 @@ public class V3CompressedVSizeColumnarMultiIntsSupplier implements WritableSuppl
     while (objects.hasNext()) {
       IndexedInts next = objects.next();
       offsetList.add(offset);
-      for (int i = 0; i < next.size(); i++) {
+      for (int i = 0, size = next.size(); i < size; i++) {
         values.add(next.get(i));
       }
       offset += next.size();
diff --git a/processing/src/test/java/io/druid/segment/data/CompressedColumnarIntsSupplierTest.java b/processing/src/test/java/io/druid/segment/data/CompressedColumnarIntsSupplierTest.java
index 8b27949abf..efec50b9d7 100644
--- a/processing/src/test/java/io/druid/segment/data/CompressedColumnarIntsSupplierTest.java
+++ b/processing/src/test/java/io/druid/segment/data/CompressedColumnarIntsSupplierTest.java
@@ -205,7 +205,7 @@ public class CompressedColumnarIntsSupplierTest extends CompressionStrategyTest
 
         try {
           for (int i = 0; i < numRuns; ++i) {
-            for (int j = 0; j < columnarInts.size(); ++j) {
+            for (int j = 0, size = columnarInts.size(); j < size; ++j) {
               final long val = vals[j];
               final long indexedVal = columnarInts.get(j);
               if (Longs.compare(val, indexedVal) != 0) {
@@ -285,7 +285,7 @@ public class CompressedColumnarIntsSupplierTest extends CompressionStrategyTest
 
     // sequential access
     int[] indices = new int[vals.length];
-    for (int i = 0; i < columnarInts.size(); ++i) {
+    for (int i = 0, size = columnarInts.size(); i < size; ++i) {
       Assert.assertEquals(vals[i], columnarInts.get(i), 0.0);
       indices[i] = i;
     }
diff --git a/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java b/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java
index db2bdfd987..50d253df5c 100644
--- a/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java
+++ b/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java
@@ -282,7 +282,7 @@ public class CompressedVSizeColumnarIntsSupplierTest extends CompressionStrategy
 
         try {
           for (int i = 0; i < numRuns; ++i) {
-            for (int j = 0; j < columnarInts.size(); ++j) {
+            for (int j = 0, size = columnarInts.size(); j < size; ++j) {
               final long val = vals[j];
               final long indexedVal = columnarInts.get(j);
               if (Longs.compare(val, indexedVal) != 0) {
@@ -362,7 +362,7 @@ public class CompressedVSizeColumnarIntsSupplierTest extends CompressionStrategy
 
     // sequential access of every element
     int[] indices = new int[vals.length];
-    for (int i = 0; i < columnarInts.size(); ++i) {
+    for (int i = 0, size = columnarInts.size(); i < size; ++i) {
       final int expected = vals[i];
       final int actual = columnarInts.get(i);
       Assert.assertEquals(expected, actual);
diff --git a/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplierTest.java b/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplierTest.java
index addc2352d7..c6bebc76f9 100644
--- a/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplierTest.java
+++ b/processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplierTest.java
@@ -107,7 +107,7 @@ public class CompressedVSizeColumnarMultiIntsSupplierTest
       final IndexedInts vSizeIndexedInts = iterator.next();
 
       Assert.assertEquals(ints.length, vSizeIndexedInts.size());
-      for (int i = 0; i < vSizeIndexedInts.size(); i++) {
+      for (int i = 0, size = vSizeIndexedInts.size(); i < size; i++) {
         Assert.assertEquals(ints[i], vSizeIndexedInts.get(i));
       }
       row++;
diff --git a/processing/src/test/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java b/processing/src/test/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java
index 805c837112..b2c1dc4054 100644
--- a/processing/src/test/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java
+++ b/processing/src/test/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java
@@ -155,7 +155,7 @@ public class V3CompressedVSizeColumnarMultiIntsSerializerTest
         for (int i = 0; i < vals.size(); ++i) {
           IndexedInts subVals = columnarMultiInts.get(i);
           assertEquals(subVals.size(), vals.get(i).length);
-          for (int j = 0; j < subVals.size(); ++j) {
+          for (int j = 0, size = subVals.size(); j < size; ++j) {
             assertEquals(subVals.get(j), vals.get(i)[j]);
           }
         }
@@ -278,7 +278,7 @@ public class V3CompressedVSizeColumnarMultiIntsSerializerTest
       for (int i = 0; i < vals.size(); ++i) {
         IndexedInts subVals = columnarMultiInts.get(i);
         assertEquals(subVals.size(), vals.get(i).length);
-        for (int j = 0; j < subVals.size(); ++j) {
+        for (int j = 0, size = subVals.size(); j < size; ++j) {
           assertEquals(subVals.get(j), vals.get(i)[j]);
         }
       }
diff --git a/server/src/main/java/io/druid/segment/realtime/firehose/IngestSegmentFirehose.java b/server/src/main/java/io/druid/segment/realtime/firehose/IngestSegmentFirehose.java
index de23fdd40c..4931961097 100644
--- a/server/src/main/java/io/druid/segment/realtime/firehose/IngestSegmentFirehose.java
+++ b/server/src/main/java/io/druid/segment/realtime/firehose/IngestSegmentFirehose.java
@@ -21,7 +21,6 @@ package io.druid.segment.realtime.firehose;
 
 import com.google.common.base.Function;
 import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import io.druid.data.input.Firehose;
 import io.druid.data.input.InputRow;
@@ -49,6 +48,7 @@ import io.druid.utils.Runnables;
 
 import javax.annotation.Nullable;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -139,12 +139,13 @@ public class IngestSegmentFirehose implements Firehose
                                           final DimensionSelector selector = dimSelector.getValue();
                                           final IndexedInts vals = selector.getRow();
 
-                                          if (vals.size() == 1) {
+                                          int valsSize = vals.size();
+                                          if (valsSize == 1) {
                                             final String dimVal = selector.lookupName(vals.get(0));
                                             theEvent.put(dim, dimVal);
-                                          } else {
-                                            List<String> dimVals = Lists.newArrayList();
-                                            for (int i = 0; i < vals.size(); ++i) {
+                                          } else if (valsSize > 1) {
+                                            List<String> dimVals = new ArrayList<>(valsSize);
+                                            for (int i = 0; i < valsSize; ++i) {
                                               dimVals.add(selector.lookupName(vals.get(i)));
                                             }
                                             theEvent.put(dim, dimVals);",Enforce optimal IndexedInts iteration ( <issue_id> ) .,"""Optimize IndexedInts iteration by caching size in a local variable""","""Optimize IndexedInts iteration in various places to avoid potential NullPointerExceptions and improve performance.""","This commit appears to be making a performance optimization in several places where code is iterating over an `IndexedInts` object. The change is to store the size of the `IndexedInts` object in a local variable before the loop, and then use that variable as the loop condition, rather than calling `size()` on each iteration. This can improve performance because it avoids the overhead of calling the `size()` method repeatedly.

Here is a suggested commit message:

Optimize iteration over IndexedInts by caching size

In several places, the code is iterating over an `IndexedInts` object and calling `size()` on each iteration. This commit stores the size in a local variable before the loop, and uses that variable as the loop condition, which can improve performance by avoiding the overhead of calling `size()` repeatedly.

The following files have been modified:

* benchmarks/src/main/java/io/druid/benchmark/CompressedVSizeColumnarMultiIntsBenchmark.java
* extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountAggregator.java
* extensions-contrib/distinctcount/src/main/java/io/druid/query/aggregation/distinctcount/DistinctCountBufferAggregator.java
* processing/src/main/java/io/druid/query/aggregation/cardinality/types/StringCardinalityAggregatorColumnSelectorStrategy.java
* processing/src/main/java/io/druid/query/groupby/GroupByQueryEngine.java
* processing/src/main/java/io/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java
* processing/src/main/java/io/druid/query/groupby/epinephelinae/column/DictionaryBuildingStringGroupByColumnSelectorStrategy.java
* processing/src/main/java/io/druid/query/metadata/SegmentAnalyzer.java
* processing/src/main/java/io/druid/query/search/SearchQueryRunner.java
* processing/src/main/java/io/druid/query/select/SelectQueryEngine.java
* processing/src/main/java/io/druid/query/topn/types/StringTopNColumnSelectorStrategy.java
* processing/src/main/java/io/druid/segment/DimensionSelector.java
* processing/src/main/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplier.java
* processing/src/main/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSupplier.java
* processing/src/test/java/io/druid/segment/data/CompressedColumnarIntsSupplierTest.java
* processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java
* processing/src/test/java/io/druid/segment/data/CompressedVSizeColumnarMultiIntsSupplierTest.java
* processing/src/test/java/io/druid/segment/data/V3CompressedVSizeColumnarMultiIntsSerializerTest.java
* server/src/main/java/io/druid/segment/realtime/firehose/IngestSegmentFirehose.java",Optimize IndexedInts iteration by caching size in a local variable for better performance.
"diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemClick.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemClick.java
index 274cfbd4..f46e9546 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemClick.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemClick.java
@@ -27,6 +27,8 @@ import java.lang.annotation.Target;
  * adapter, at the selected position. It may be of any type, so be careful about
  * potential ClassCastException.
  * 
+ * If the parameter is an int, it will be the position instead of the object from the adapter.
+ * 
  * The annotation value should be one of R.id.* fields. If not set, the method
  * name will be used as the R.id.* field name.
  * 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemLongClick.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemLongClick.java
index 35e5a958..05e6ea33 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemLongClick.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemLongClick.java
@@ -27,6 +27,8 @@ import java.lang.annotation.Target;
  * adapter, at the selected position. It may be of any type, so be careful about
  * potential ClassCastException.
  * 
+ * If the parameter is an int, it will be the position instead of the object from the adapter.
+ * 
  * The annotation value should be one of R.id.* fields. If not set, the method
  * name will be used as the R.id.* field name..
  * 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemSelect.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemSelect.java
index 8c1df751..5c8ca62a 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemSelect.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/annotations/ItemSelect.java
@@ -23,10 +23,12 @@ import java.lang.annotation.Target;
 /**
  * Should be used on item selected listener methods for AdapterView classes
  * 
- * The method may have 1 or 2 parameter. The first parameter must be a boolean,
+ * The method may have 1 or 2 parameters. The first parameter must be a boolean,
  * and the second is the object from the adapter, at the selected position. It
  * may be of any type, so be careful about potential ClassCastException.
  * 
+ * If the second parameter is an int, it will be the position instead of the object from the adapter.
+ * 
  * The first boolean parameter indicates if something has been selected or not.
  * If nothing was selected, the second parameter will be null.
  * 
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemClickProcessor.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemClickProcessor.java
index d208adda..b86d8cd3 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemClickProcessor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemClickProcessor.java
@@ -21,6 +21,8 @@ import java.util.List;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
 
 import com.googlecode.androidannotations.annotations.ItemClick;
 import com.googlecode.androidannotations.rclass.IRClass;
@@ -80,8 +82,14 @@ public class ItemClickProcessor extends MultipleResIdsBasedProcessor implements
 
 		if (hasItemParameter) {
 			VariableElement parameter = parameters.get(0);
-			String parameterQualifiedName = parameter.asType().toString();
-			itemClickCall.arg(JExpr.cast(holder.refClass(parameterQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+			
+			TypeMirror parameterType = parameter.asType();
+			if (parameterType.getKind() == TypeKind.INT) {
+				itemClickCall.arg(onItemClickPositionParam);
+			} else {
+				String parameterTypeQualifiedName = parameterType.toString();
+				itemClickCall.arg(JExpr.cast(holder.refClass(parameterTypeQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+			}
 		}
 
 		for (JFieldRef idRef : idsRefs) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemLongClickProcessor.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemLongClickProcessor.java
index 5e0f9c60..7789416d 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemLongClickProcessor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemLongClickProcessor.java
@@ -93,8 +93,14 @@ public class ItemLongClickProcessor extends MultipleResIdsBasedProcessor impleme
 
 		if (hasItemParameter) {
 			VariableElement parameter = parameters.get(0);
-			String parameterQualifiedName = parameter.asType().toString();
-			itemClickCall.arg(JExpr.cast(holder.refClass(parameterQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+			
+			TypeMirror parameterType = parameter.asType();
+			if (parameterType.getKind() == TypeKind.INT) {
+				itemClickCall.arg(onItemClickPositionParam);
+			} else {
+				String parameterTypeQualifiedName = parameterType.toString();
+				itemClickCall.arg(JExpr.cast(holder.refClass(parameterTypeQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+			}
 		}
 
 		for (JFieldRef idRef : idsRefs) {
diff --git a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemSelectedProcessor.java b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemSelectedProcessor.java
index c9df17c2..89354639 100644
--- a/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemSelectedProcessor.java
+++ b/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/ItemSelectedProcessor.java
@@ -15,12 +15,17 @@
  */
 package com.googlecode.androidannotations.processing;
 
+import static com.sun.codemodel.JExpr._null;
+import static com.sun.codemodel.JExpr.lit;
+
 import java.lang.annotation.Annotation;
 import java.util.List;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
 
 import com.googlecode.androidannotations.annotations.ItemSelect;
 import com.googlecode.androidannotations.rclass.IRClass;
@@ -79,10 +84,17 @@ public class ItemSelectedProcessor extends MultipleResIdsBasedProcessor implemen
 
 		itemSelectedCall.arg(JExpr.TRUE);
 
+		VariableElement secondParameter = parameters.get(1);
+		TypeMirror parameterType = secondParameter.asType();
+
 		if (hasItemParameter) {
-			VariableElement parameter = parameters.get(1);
-			String parameterQualifiedName = parameter.asType().toString();
-			itemSelectedCall.arg(JExpr.cast(holder.refClass(parameterQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+
+			if (parameterType.getKind() == TypeKind.INT) {
+				itemSelectedCall.arg(onItemClickPositionParam);
+			} else {
+				String parameterTypeQualifiedName = parameterType.toString();
+				itemSelectedCall.arg(JExpr.cast(holder.refClass(parameterTypeQualifiedName), JExpr.invoke(onItemClickParentParam, ""getAdapter"").invoke(""getItem"").arg(onItemClickPositionParam)));
+			}
 		}
 
 		JMethod onNothingSelectedMethod = onItemSelectedListenerClass.method(JMod.PUBLIC, codeModel.VOID, ""onNothingSelected"");
@@ -93,7 +105,11 @@ public class ItemSelectedProcessor extends MultipleResIdsBasedProcessor implemen
 
 		nothingSelectedCall.arg(JExpr.FALSE);
 		if (hasItemParameter) {
-			nothingSelectedCall.arg(JExpr._null());
+			if (parameterType.getKind() == TypeKind.INT) {
+				nothingSelectedCall.arg(lit(-1));
+			} else {
+				nothingSelectedCall.arg(_null());
+			}
 		}
 
 		for (JFieldRef idRef : idsRefs) {
diff --git a/AndroidAnnotations/functional-test-1-5/res/layout/item_clicks_handled.xml b/AndroidAnnotations/functional-test-1-5/res/layout/item_clicks_handled.xml
index 721ab21c..bcd7ce70 100644
--- a/AndroidAnnotations/functional-test-1-5/res/layout/item_clicks_handled.xml
+++ b/AndroidAnnotations/functional-test-1-5/res/layout/item_clicks_handled.xml
@@ -44,5 +44,11 @@
 	    android:layout_width=""fill_parent""
 	    android:layout_height=""wrap_content""
 	/>
+	
+	<ListView 
+	    android:id=""@+id/listViewWithPosition""
+	    android:layout_width=""fill_parent""
+	    android:layout_height=""wrap_content""
+	/>	
 
 </LinearLayout>
diff --git a/AndroidAnnotations/functional-test-1-5/src/main/java/com/googlecode/androidannotations/test15/ItemClicksHandledActivity.java b/AndroidAnnotations/functional-test-1-5/src/main/java/com/googlecode/androidannotations/test15/ItemClicksHandledActivity.java
index 5cb4dea7..4b3fe579 100644
--- a/AndroidAnnotations/functional-test-1-5/src/main/java/com/googlecode/androidannotations/test15/ItemClicksHandledActivity.java
+++ b/AndroidAnnotations/functional-test-1-5/src/main/java/com/googlecode/androidannotations/test15/ItemClicksHandledActivity.java
@@ -23,6 +23,8 @@ import android.widget.Spinner;
 import com.googlecode.androidannotations.annotations.AfterViews;
 import com.googlecode.androidannotations.annotations.EActivity;
 import com.googlecode.androidannotations.annotations.ItemClick;
+import com.googlecode.androidannotations.annotations.ItemLongClick;
+import com.googlecode.androidannotations.annotations.ItemSelect;
 import com.googlecode.androidannotations.annotations.ViewById;
 
 @EActivity(R.layout.item_clicks_handled)
@@ -78,5 +80,20 @@ public class ItemClicksHandledActivity extends Activity {
 	public void spinnerWithArgument(String selectedItem) {
 		spinnerWithArgumentSelectedItem = selectedItem;
 	}
+	
+	@ItemClick
+	void listViewWithPosition(int position) {
+		
+	}
+	
+	@ItemSelect
+	void listViewWithPositionItemSelected(boolean selected, int position) {
+		
+	}
+	
+	@ItemLongClick
+	void listViewWithPositionItemLongClicked(int position) {
+		
+	}
 
 }","Adding special handling of Item events , position being given when the parameter is an int .","""Allow @ItemClick, @ItemLongClick and @ItemSelect annotations to accept an int parameter for the position instead of the object from the adapter.""","""Added support for passing position as int instead of object from adapter in ItemClick, ItemLongClick and ItemSelect annotations""","The commit message should be:

""Added support for int parameter as position in ItemClick, ItemLongClick, and ItemSelect annotations and updated corresponding processors and tests.""

Explanation:

* The `ItemClick`, `ItemLongClick`, and `ItemSelect` annotations have been updated to support an int parameter, which will be interpreted as the position instead of the object from the adapter.
* The corresponding processors (`ItemClickProcessor`, `ItemLongClickProcessor`, and `ItemSelectedProcessor`) have been updated to handle the int parameter as position when generating the code.
* The `item_clicks_handled.xml` layout file has been updated to include a new ListView with the id `listViewWithPosition`.
* The `ItemClicksHandledActivity` class has been updated to include new methods with int parameters for the `listViewWithPosition` ListView. These methods will be called when the corresponding events (item click, item long click, and item select) are triggered.","Add support for integer parameter representing position in ItemClick, ItemLongClick, and ItemSelect annotations."
"diff --git a/camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java b/camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java
index db91f214565..bab24bc8bce 100644
--- a/camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java
+++ b/camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java
@@ -765,7 +765,7 @@ public final class ExpressionBuilder {
         return new ExpressionAdapter() {
             public Object evaluate(Exchange exchange) {
                 String text = simpleExpression(propertyName).evaluate(exchange, String.class);
-                String answer = System.getenv(text);
+                String answer = System.getenv(text.toUpperCase());
                 if (answer == null) {
                     String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class);
                     answer = text2;
diff --git a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java b/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java
index 57132652c8f..0f1e357777e 100644
--- a/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java
+++ b/camel-core/src/test/java/org/apache/camel/language/simple/SimpleTest.java
@@ -238,6 +238,13 @@ public class SimpleTest extends LanguageTestSupport {
             assertExpression(""sysenv.PATH"", path);
         }
     }
+    
+    public void testSimpleSystemEnvironmentExpressionsIfLowercase() throws Exception {
+        String path = System.getenv(""PATH"");
+        if (path != null) {
+            assertExpression(""sysenv.path"", path);
+        }
+    }
 
     public void testSimpleCamelId() throws Exception {
         assertExpression(""camelId"", context.getName());",make system property uppercase if given lowercase in simple expression,"""Fixed system environment variable lookup to be case-insensitive""","""Convert system environment variable lookup to uppercase in ExpressionBuilder""","""Fix case sensitivity for sysenv expression in ExpressionBuilder and add test case for lowercase environment variable""

Explanation:
The commit changes the sysenv expression in ExpressionBuilder to use toUpperCase() when getting the environment variable value. This is to ensure that the expression works correctly even if the environment variable name is specified in lowercase. Additionally, a new test case 'testSimpleSystemEnvironmentExpressionsIfLowercase' has been added to SimpleTest to verify that the sysenv expression works correctly with lowercase environment variable names.","""Ensure system environment variables are evaluated case-insensitively and add test for lowercase variable names."""
"diff --git a/modules/flowable5-cxf-test/src/test/java/org/activiti/engine/impl/webservice/WebServiceImportTest.java b/modules/flowable5-cxf-test/src/test/java/org/activiti/engine/impl/webservice/WebServiceImportTest.java
deleted file mode 100644
index 4e4034f2c2..0000000000
--- a/modules/flowable5-cxf-test/src/test/java/org/activiti/engine/impl/webservice/WebServiceImportTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/* Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.activiti.engine.impl.webservice;
-
-import org.flowable.engine.test.Deployment;
-
-/**
- * An integration test for CXF based web services
- *
- * @author Christophe DENEUX
- */
-public class WebServiceImportTest extends AbstractWebServiceTaskTest {
-
-    @Deployment
-    public void testImport() throws Exception {
-        processEngine.getRuntimeService().startProcessInstanceByKey(""webServiceInvocationImport"");
-        waitForJobExecutorToProcessAllJobs(10000L, 250L);
-
-    }
-
-    @Deployment
-    public void testImport_DifferentDirectories() throws Exception {
-        processEngine.getRuntimeService().startProcessInstanceByKey(""webServiceInvocationImport_DifferentDirectories"");
-        waitForJobExecutorToProcessAllJobs(10000L, 250L);
-    }
-
-}",Remove WebServiceImportTest from flowable5 - cxf - test we have the same test in flowable - cxf .,"""Remove WebServiceImportTest class from flowable5-cxf-test module""","The commit message should be:

""Remove WebServiceImportTest class""

This message accurately reflects the change made in the commit, which is the deletion of the WebServiceImportTest class.","""Delete WebServiceImportTest.java""

This commit message indicates that the file WebServiceImportTest.java has been deleted. If you want to provide more context, you could add something like:

""Delete WebServiceImportTest.java as part of refactoring the web service tests""

This added context can help others understand why the file was deleted.","""Remove WebServiceImportTest integration test for CXF based web services from flowable5-cxf-test module."""
"diff --git a/websocket/binary/src/test/java/org/javaee7/websocket/binary/test/WebsocketByteBufferEndpointTest.java b/websocket/binary/src/test/java/org/javaee7/websocket/binary/test/WebsocketByteBufferEndpointTest.java
index fd35c99b..a9bc942a 100644
--- a/websocket/binary/src/test/java/org/javaee7/websocket/binary/test/WebsocketByteBufferEndpointTest.java
+++ b/websocket/binary/src/test/java/org/javaee7/websocket/binary/test/WebsocketByteBufferEndpointTest.java
@@ -1,5 +1,5 @@
 /**
- * 
+ *
  */
 package org.javaee7.websocket.binary.test;
 
@@ -30,32 +30,37 @@ import org.junit.runner.RunWith;
  */
 @RunWith(Arquillian.class)
 public class WebsocketByteBufferEndpointTest {
-	private static final String WEBAPP_SRC = ""src/main/webapp"";
-	
-	/**
-	 * Arquillian specific method for creating a file which can be deployed while executing the test.
-	 * @return a war file
-	 */
-	@Deployment(testable = false) @TargetsContainer(""wildfly-arquillian"")
-	public static WebArchive createDeployment(){
-		WebArchive war = ShrinkWrap.create(WebArchive.class).
-				addClass(MyEndpointByteBuffer.class).
-				addClass(MyEndpointByteArray.class).
-				addClass(MyEndpointInputStream.class).
-				addAsWebResource(new File(WEBAPP_SRC,""index.jsp"")).
-				addAsWebResource(new File(WEBAPP_SRC,""websocket.js""));
-		return war;
-	}
-	
-	/**
-	 * The basic test method for the class {@link MyEndpointByteBuffer}
-	 * @throws URISyntaxException
-	 * @throws DeploymentException
-	 * @throws IOException
-	 */
-	@Test 
-	public void testEndPointByteBuffer() throws URISyntaxException, DeploymentException,IOException{
-		WebSocketContainer wSocketContainer = ContainerProvider.getWebSocketContainer();
-		wSocketContainer.connectToServer(MyEndpointClient.class, new URI(""ws://localhost:8080/binary/websockeet""));
-	}
+
+    private static final String WEBAPP_SRC = ""src/main/webapp"";
+
+    /**
+     * Arquillian specific method for creating a file which can be deployed
+     * while executing the test.
+     *
+     * @return a war file
+     */
+    @Deployment(testable = false)
+    @TargetsContainer(""wildfly-arquillian"")
+    public static WebArchive createDeployment() {
+        WebArchive war = ShrinkWrap.create(WebArchive.class).
+                addClass(MyEndpointByteBuffer.class).
+                addClass(MyEndpointByteArray.class).
+                addClass(MyEndpointInputStream.class).
+                addAsWebResource(new File(WEBAPP_SRC, ""index.jsp"")).
+                addAsWebResource(new File(WEBAPP_SRC, ""websocket.js""));
+        return war;
+    }
+
+    /**
+     * The basic test method for the class {@link MyEndpointByteBuffer}
+     *
+     * @throws URISyntaxException
+     * @throws DeploymentException
+     * @throws IOException
+     */
+    @Test
+    public void testEndPointByteBuffer() throws URISyntaxException, DeploymentException, IOException {
+        WebSocketContainer wSocketContainer = ContainerProvider.getWebSocketContainer();
+        wSocketContainer.connectToServer(MyEndpointClient.class, new URI(""ws://localhost:8080/binary/websockeet""));
+    }
 }",Changing the indentation to 4 spaces,"""Reformat WebsocketByteBufferEndpointTest.java for consistency and readability""","The commit message should be:

""Remove unused imports and variables from WebsocketByteBufferEndpointTest""

However, a more concise and descriptive commit message would be:

""Clean up WebsocketByteBufferEndpointTest by removing unused imports and variables""

Or, if you want to follow the conventional commit message format:

""fix: Clean up WebsocketByteBufferEndpointTest by removing unused imports and variables""","""Formatted code and added Javadoc comments in WebsocketByteBufferEndpointTest.java""","""Refactor WebsocketByteBufferEndpointTest: Adjust formatting, improve readability, and fix comments."""
"diff --git a/modules/swagger-core/src/test/scala/CompositionTest.scala b/modules/swagger-core/src/test/scala/CompositionTest.scala
index 892eb1d2f..e10eeb9d1 100644
--- a/modules/swagger-core/src/test/scala/CompositionTest.scala
+++ b/modules/swagger-core/src/test/scala/CompositionTest.scala
@@ -37,7 +37,7 @@ class CompositionTest extends FlatSpec with Matchers {
   },
   ""Pet"" : {
     ""allOf"" : [ {
-      ""$ref"" : ""Human""
+      ""$ref"" : ""#/definitions/Human""
     }, {
       ""required"" : [ ""isDomestic"", ""name"", ""type"" ],
       ""properties"" : {
@@ -78,7 +78,7 @@ class CompositionTest extends FlatSpec with Matchers {
   },
   ""Human"" : {
     ""allOf"" : [ {
-      ""$ref"" : ""Animal""
+      ""$ref"" : ""#/definitions/Animal""
     }, {
       ""properties"" : {
         ""name"" : {
@@ -98,7 +98,7 @@ class CompositionTest extends FlatSpec with Matchers {
   },
   ""Pet"" : {
     ""allOf"" : [ {
-      ""$ref"" : ""Animal""
+      ""$ref"" : ""#/definitions/Animal""
     }, {
       ""required"" : [ ""isDomestic"", ""name"", ""type"" ],
       ""properties"" : {
diff --git a/modules/swagger-core/src/test/scala/ModelConverterTest.scala b/modules/swagger-core/src/test/scala/ModelConverterTest.scala
index 6515cdbcd..57d0d2d86 100644
--- a/modules/swagger-core/src/test/scala/ModelConverterTest.scala
+++ b/modules/swagger-core/src/test/scala/ModelConverterTest.scala
@@ -28,7 +28,7 @@ class ModelConverterTest extends FlatSpec with Matchers {
         ""type"" : ""string""
       },
       ""address"" : {
-        ""$ref"" : ""Address""
+        ""$ref"" : ""#/definitions/Address""
       },
       ""properties"" : {
         ""type"" : ""object"",
@@ -121,4 +121,9 @@ class ModelConverterTest extends FlatSpec with Matchers {
     val model = schemas.keySet().iterator().next()
     model should be (""MyModel"")
   }
+
+  it should ""maintain property names"" in {
+    val schemas = ModelConverters.getInstance().readAll(classOf[ModelPropertyName])
+    Json.prettyPrint(schemas)
+  }
 }
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/ModelSerializerTest.scala b/modules/swagger-core/src/test/scala/ModelSerializerTest.scala
index deb79a699..e94e7c7e0 100644
--- a/modules/swagger-core/src/test/scala/ModelSerializerTest.scala
+++ b/modules/swagger-core/src/test/scala/ModelSerializerTest.scala
@@ -40,11 +40,11 @@ class ModelSerializerTest extends FlatSpec with Matchers {
     val model = new ArrayModel()
     model.setItems(new RefProperty(""Pet""))
 
-    m.writeValueAsString(model) should be (""""""{""type"":""array"",""items"":{""$ref"":""Pet""}}"""""")
+    m.writeValueAsString(model) should be (""""""{""type"":""array"",""items"":{""$ref"":""#/definitions/Pet""}}"""""")
   }
 
   it should ""deserialize an array model"" in {
-    val json = """"""{""type"":""array"",""items"":{""$ref"":""Pet""}}""""""
+    val json = """"""{""type"":""array"",""items"":{""$ref"":""#/definitions/Pet""}}""""""
     val p = m.readValue(json, classOf[Model])
     p.isInstanceOf[ArrayModel] should be (true)
     m.writeValueAsString(p) should equal (json)
diff --git a/modules/swagger-core/src/test/scala/ScalaModelTest.scala b/modules/swagger-core/src/test/scala/ScalaModelTest.scala
index 1be9c9bfd..b5f036c6a 100644
--- a/modules/swagger-core/src/test/scala/ScalaModelTest.scala
+++ b/modules/swagger-core/src/test/scala/ScalaModelTest.scala
@@ -48,10 +48,10 @@ class ScalaModelTest extends FlatSpec with Matchers {
     keys(3) should be (""dateValue"")
     keys(4) should be (""booleanValue"")
 
-    m.writeValueAsString(schemas) should equal (""""""{""CaseClassWithOptionLong"":{""properties"":{""intValue"":{""type"":""integer"",""format"":""int32""},""longValue"":{""type"":""array"",""items"":{""$ref"":""Object""}},""setValue"":{""type"":""array"",""items"":{""type"":""string""}},""dateValue"":{""type"":""string"",""format"":""date-time""},""booleanValue"":{""type"":""boolean""}}}}"""""")
+    m.writeValueAsString(schemas) should equal (""""""{""CaseClassWithOptionLong"":{""properties"":{""intValue"":{""type"":""integer"",""format"":""int32""},""longValue"":{""type"":""array"",""items"":{""$ref"":""#/definitions/Object""}},""setValue"":{""type"":""array"",""items"":{""type"":""string""}},""dateValue"":{""type"":""string"",""format"":""date-time""},""booleanValue"":{""type"":""boolean""}}}}"""""")
   }
 
-  it should ""convert a scala case class with nexted models"" in {
+  it should ""convert a scala case class with nested models"" in {
     m.registerModule(DefaultScalaModule)
     val schemas = ModelConverters.getInstance().readAll(classOf[NestedModel])
 
@@ -71,7 +71,7 @@ class ScalaModelTest extends FlatSpec with Matchers {
   ""NestedModel"" : {
     ""properties"" : {
       ""complexModel"" : {
-        ""$ref"" : ""ComplexModel""
+        ""$ref"" : ""#/definitions/ComplexModel""
       },
       ""localtime"" : {
         ""type"" : ""string"",
diff --git a/modules/swagger-core/src/test/scala/models/ModelPropertyName.java b/modules/swagger-core/src/test/scala/models/ModelPropertyName.java
new file mode 100644
index 000000000..f3ba35688
--- /dev/null
+++ b/modules/swagger-core/src/test/scala/models/ModelPropertyName.java
@@ -0,0 +1,7 @@
+package models;
+
+public class ModelPropertyName {
+  public boolean is_persistent() { return true; }
+  public String isometric() { return null; }
+  public String gettersAndHaters() { return null; }
+}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/parameter/ParameterSerializationTest.scala b/modules/swagger-core/src/test/scala/parameter/ParameterSerializationTest.scala
index 1e1517607..340a08879 100644
--- a/modules/swagger-core/src/test/scala/parameter/ParameterSerializationTest.scala
+++ b/modules/swagger-core/src/test/scala/parameter/ParameterSerializationTest.scala
@@ -159,11 +159,11 @@ schema:
   it should ""serialize a ref BodyParameter"" in {
     val model = new RefModel(""Cat"")
     val p = new BodyParameter().schema(model)
-    m.writeValueAsString(p) should be (""""""{""in"":""body"",""required"":false,""schema"":{""$ref"":""Cat""}}"""""")
+    m.writeValueAsString(p) should be (""""""{""in"":""body"",""required"":false,""schema"":{""$ref"":""#/definitions/Cat""}}"""""")
   }
 
   it should ""deserialize a ref BodyParameter"" in {
-    val json = """"""{""in"":""body"",""required"":false,""schema"":{""$ref"":""Cat""}}""""""
+    val json = """"""{""in"":""body"",""required"":false,""schema"":{""$ref"":""#/definitions/Cat""}}""""""
     val p = m.readValue(json, classOf[Parameter])
     m.writeValueAsString(p) should equal (json)
   }
@@ -171,11 +171,11 @@ schema:
   it should ""serialize an array BodyParameter"" in {
     val model = new ArrayModel().items(new RefProperty(""Cat""))
     val p = new BodyParameter().schema(model)
-    m.writeValueAsString(p) should be (""""""{""in"":""body"",""required"":false,""schema"":{""type"":""array"",""items"":{""$ref"":""Cat""}}}"""""")
+    m.writeValueAsString(p) should be (""""""{""in"":""body"",""required"":false,""schema"":{""type"":""array"",""items"":{""$ref"":""#/definitions/Cat""}}}"""""")
   }
 
   it should ""deserialize an array BodyParameter"" in {
-    val json = """"""{""in"":""body"",""required"":false,""schema"":{""type"":""array"",""items"":{""$ref"":""Cat""}}}""""""
+    val json = """"""{""in"":""body"",""required"":false,""schema"":{""type"":""array"",""items"":{""$ref"":""#/definitions/Cat""}}}""""""
     val p = m.readValue(json, classOf[Parameter])
     m.writeValueAsString(p) should equal (json)
   }
diff --git a/modules/swagger-core/src/test/scala/properties/PropertySerializationTest.scala b/modules/swagger-core/src/test/scala/properties/PropertySerializationTest.scala
index aed42e664..4786e0b88 100644
--- a/modules/swagger-core/src/test/scala/properties/PropertySerializationTest.scala
+++ b/modules/swagger-core/src/test/scala/properties/PropertySerializationTest.scala
@@ -152,11 +152,11 @@ class PropertySerializationTest extends FlatSpec with Matchers {
 
   it should ""serialize a RefProperty"" in {
     val p = new RefProperty(""Dog"")
-    m.writeValueAsString(p) should be (""""""{""$ref"":""Dog""}"""""")
+    m.writeValueAsString(p) should be (""""""{""$ref"":""#/definitions/Dog""}"""""")
   }
 
   it should ""deserialize a RefProperty"" in {
-    val json = """"""{""$ref"":""Dog""}""""""
+    val json = """"""{""$ref"":""#/definitions/Dog""}""""""
     val p = m.readValue(json, classOf[Property])
     p.getClass should be (classOf[RefProperty])
     m.writeValueAsString(p) should equal (json)",updated tests per <issue_id>,"""Update references to use '#/definitions/' in Swagger models""","""Update Swagger Core to use absolute $ref paths in JSON schema definitions""","""Update references in Swagger models to use full path""

This commit changes the way references are made in Swagger models. Instead of using just the model name, it now uses the full path, including the ""#/definitions/"" prefix. This is important for correctly resolving references within the Swagger definition.

The changes made in this commit include:

1. Updating references in the CompositionTest.scala file for the ""Pet"" and ""Human"" models.
2. Adding a new test in ModelConverterTest.scala to maintain property names.
3. Updating references in ModelSerializerTest.scala for the ArrayModel.
4. Updating references in ScalaModelTest.scala for the ""CaseClassWithOptionLong"" and ""NestedModel"" models.
5. Adding a new ModelPropertyName.java file in the models package.
6. Updating references in ParameterSerializationTest.scala for the BodyParameter.
7. Updating references in PropertySerializationTest.scala for the RefProperty.

The changes made in this commit ensure that references are made correctly in Swagger models, which is important for correctly resolving them within the Swagger definition.",Updated JSON references in tests to use full path with #/definitions/ prefix for consistency and added a new test class.
"diff --git a/res/xml/preferences.xml b/res/xml/preferences.xml
index 825f4425c2..de36d340c6 100644
--- a/res/xml/preferences.xml
+++ b/res/xml/preferences.xml
@@ -71,12 +71,12 @@
 				android:title=""@string/select_theme""
 				android:key=""theme""
 				android:summary=""""
-				android:defaultValue=""0""
+				android:defaultValue=""2""
 				android:entries=""@array/theme_labels""
 				android:entryValues=""@array/theme_values"" />
 			<CheckBoxPreference
 				android:title=""@string/theme_animations""
-				android:defaultValue=""false""
+				android:defaultValue=""true""
 				android:summary=""@string/theme_animations_summ""
 				android:disableDependentsState=""false""
 				android:key=""themeAnimations"" />
diff --git a/src/com/ichi2/anki/Reviewer.java b/src/com/ichi2/anki/Reviewer.java
index db25d30097..696b5076c8 100644
--- a/src/com/ichi2/anki/Reviewer.java
+++ b/src/com/ichi2/anki/Reviewer.java
@@ -1637,7 +1637,7 @@ public class Reviewer extends Activity implements IButtonListener{
          	mGestureTapTop = Integer.parseInt(preferences.getString(""gestureTapTop"", ""0""));
          	mGestureTapBottom = Integer.parseInt(preferences.getString(""gestureTapBottom"", ""0""));
         }
-        mShowAnimations = preferences.getBoolean(""themeAnimations"", false);
+        mShowAnimations = preferences.getBoolean(""themeAnimations"", true);
         if (mShowAnimations) {
             int animationDuration = preferences.getInt(""animationDuration"", 500);
            	mAnimationDurationTurn = animationDuration;
diff --git a/src/com/ichi2/anki/Themes.java b/src/com/ichi2/anki/Themes.java
index 5ab047ec7f..7db4f6c80c 100644
--- a/src/com/ichi2/anki/Themes.java
+++ b/src/com/ichi2/anki/Themes.java
@@ -64,7 +64,7 @@ public class Themes {
 	public static void applyTheme(Context context) {
 		if (mCurrentTheme == -1) {
 			SharedPreferences preferences = PrefSettings.getSharedPrefs(context);
-			mCurrentTheme = Integer.parseInt(preferences.getString(""theme"", ""0""));
+			mCurrentTheme = Integer.parseInt(preferences.getString(""theme"", ""2""));
 			switch (mCurrentTheme) {
 			case THEME_DEFAULT:
 				mDeckpickerBackground = R.color.card_browser_background;",set blue theme as standard,"""Change default theme and animation settings""

This commit message accurately reflects the changes made in the commit, which include changing the default theme and animation settings in the application.","""Updated default theme to '2' and enabled theme animations by default""","""Change default theme to 2 and enable theme animations by default""

This commit makes the following changes to the Anki app:

1. The default theme is changed from 0 to 2 in the preferences.xml file.
2. The default value for theme animations is changed from false to true in the preferences.xml file.
3. In Reviewer.java, the default value for theme animations is changed from false to true.
4. The Themes.java file is also modified, but the changes are not visible in the provided diff. The comment suggests that the change is related to the deck picker background color, but the actual code change is not shown.

Overall, this commit seems to be focused on changing the default theme and enabling theme animations by default in the Anki app.",Update default theme and animation preferences in XML and Java files to new values.
"diff --git a/res/drawable-hdpi/ic_arrow_back_grey.png b/res/drawable-hdpi/ic_arrow_back_grey.png
index ccd3900dd..c7c00886f 100755
Binary files a/res/drawable-hdpi/ic_arrow_back_grey.png and b/res/drawable-hdpi/ic_arrow_back_grey.png differ
diff --git a/res/drawable-hdpi/ic_search_grey.png b/res/drawable-hdpi/ic_search_grey.png
index f4c5e27d2..bd20ba062 100755
Binary files a/res/drawable-hdpi/ic_search_grey.png and b/res/drawable-hdpi/ic_search_grey.png differ
diff --git a/res/drawable-mdpi/ic_arrow_back_grey.png b/res/drawable-mdpi/ic_arrow_back_grey.png
index 11996efe3..5892c77d5 100755
Binary files a/res/drawable-mdpi/ic_arrow_back_grey.png and b/res/drawable-mdpi/ic_arrow_back_grey.png differ
diff --git a/res/drawable-mdpi/ic_search_grey.png b/res/drawable-mdpi/ic_search_grey.png
index e83891c11..c386dbb38 100755
Binary files a/res/drawable-mdpi/ic_search_grey.png and b/res/drawable-mdpi/ic_search_grey.png differ
diff --git a/res/drawable-v21/all_apps_search_market_bg.xml b/res/drawable-v21/all_apps_search_market_bg.xml
new file mode 100644
index 000000000..7bd2f8816
--- /dev/null
+++ b/res/drawable-v21/all_apps_search_market_bg.xml
@@ -0,0 +1,19 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the ""License"");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an ""AS IS"" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<ripple xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:color=""@color/all_apps_search_market_button_focused_bg_color"">
+    <item android:drawable=""@color/quantum_panel_bg_color"" />
+</ripple>
diff --git a/res/drawable-xhdpi/ic_arrow_back_grey.png b/res/drawable-xhdpi/ic_arrow_back_grey.png
index 79b9b486c..11996efe3 100755
Binary files a/res/drawable-xhdpi/ic_arrow_back_grey.png and b/res/drawable-xhdpi/ic_arrow_back_grey.png differ
diff --git a/res/drawable-xhdpi/ic_search_grey.png b/res/drawable-xhdpi/ic_search_grey.png
index bd5fdf444..e83891c11 100755
Binary files a/res/drawable-xhdpi/ic_search_grey.png and b/res/drawable-xhdpi/ic_search_grey.png differ
diff --git a/res/drawable-xxhdpi/ic_arrow_back_grey.png b/res/drawable-xxhdpi/ic_arrow_back_grey.png
index 8e42e091d..ccd3900dd 100755
Binary files a/res/drawable-xxhdpi/ic_arrow_back_grey.png and b/res/drawable-xxhdpi/ic_arrow_back_grey.png differ
diff --git a/res/drawable-xxhdpi/ic_search_grey.png b/res/drawable-xxhdpi/ic_search_grey.png
index 1d5c91361..f4c5e27d2 100755
Binary files a/res/drawable-xxhdpi/ic_search_grey.png and b/res/drawable-xxhdpi/ic_search_grey.png differ
diff --git a/res/drawable-xxxhdpi/ic_arrow_back_grey.png b/res/drawable-xxxhdpi/ic_arrow_back_grey.png
index 854a9bd1a..79b9b486c 100755
Binary files a/res/drawable-xxxhdpi/ic_arrow_back_grey.png and b/res/drawable-xxxhdpi/ic_arrow_back_grey.png differ
diff --git a/res/drawable-xxxhdpi/ic_search_grey.png b/res/drawable-xxxhdpi/ic_search_grey.png
index 28519fda6..bd5fdf444 100755
Binary files a/res/drawable-xxxhdpi/ic_search_grey.png and b/res/drawable-xxxhdpi/ic_search_grey.png differ
diff --git a/res/drawable/all_apps_search_market_bg.xml b/res/drawable/all_apps_search_market_bg.xml
new file mode 100644
index 000000000..5278e00a6
--- /dev/null
+++ b/res/drawable/all_apps_search_market_bg.xml
@@ -0,0 +1,20 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the ""License"");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an ""AS IS"" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<selector xmlns:android=""http://schemas.android.com/apk/res/android"">
+    <item android:state_focused=""true"" android:drawable=""@color/all_apps_search_market_button_focused_bg_color"" />
+    <item android:state_pressed=""true"" android:drawable=""@color/all_apps_search_market_button_focused_bg_color"" />
+    <item android:drawable=""@android:color/transparent"" />
+</selector>
diff --git a/res/drawable/horizontal_line.xml b/res/drawable/horizontal_line.xml
new file mode 100644
index 000000000..3f3f17e35
--- /dev/null
+++ b/res/drawable/horizontal_line.xml
@@ -0,0 +1,21 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!--
+     Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the ""License"");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an ""AS IS"" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<shape xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:shape=""rectangle"">
+    <size android:height=""1dp"" />
+    <solid android:color=""#ddd"" />
+</shape>
diff --git a/res/layout/all_apps_empty_search.xml b/res/layout/all_apps_empty_search.xml
index f60c4a09a..b9b493eab 100644
--- a/res/layout/all_apps_empty_search.xml
+++ b/res/layout/all_apps_empty_search.xml
@@ -18,11 +18,14 @@
     android:id=""@+id/empty_text""
     android:layout_width=""wrap_content""
     android:layout_height=""wrap_content""
-    android:gravity=""center""
-    android:paddingTop=""24dp""
-    android:paddingBottom=""24dp""
-    android:paddingRight=""@dimen/all_apps_grid_view_start_margin""
-    android:textSize=""16sp""
-    android:textColor=""#4c4c4c""
+    android:gravity=""start""
+    android:paddingTop=""20dp""
+    android:paddingBottom=""8dp""
+    android:paddingLeft=""16dp""
+    android:paddingRight=""16dp""
+    android:fontFamily=""sans-serif-medium""
+    android:textSize=""14sp""
+    android:textColor=""#212121""
+    android:alpha=""0.56""
     android:focusable=""false"" />
 
diff --git a/res/layout/all_apps_search_bar.xml b/res/layout/all_apps_search_bar.xml
index cf30eac36..4947203df 100644
--- a/res/layout/all_apps_search_bar.xml
+++ b/res/layout/all_apps_search_bar.xml
@@ -32,11 +32,10 @@
             android:id=""@+id/dismiss_search_button""
             android:layout_width=""wrap_content""
             android:layout_height=""wrap_content""
-            android:layout_marginLeft=""4dp""
-            android:layout_marginStart=""4dp""
+            android:layout_gravity=""center_vertical""
+            android:layout_marginLeft=""16dp""
+            android:layout_marginStart=""16dp""
             android:contentDescription=""@string/all_apps_button_label""
-            android:paddingBottom=""13dp""
-            android:paddingTop=""13dp""
             android:src=""@drawable/ic_arrow_back_grey"" />
 
         <com.android.launcher3.allapps.AllAppsSearchEditView
@@ -63,10 +62,8 @@
         android:layout_width=""wrap_content""
         android:layout_height=""@dimen/all_apps_search_bar_height""
         android:layout_gravity=""end|center_vertical""
-        android:layout_marginEnd=""4dp""
-        android:layout_marginRight=""4dp""
+        android:layout_marginEnd=""16dp""
+        android:layout_marginRight=""16dp""
         android:contentDescription=""@string/all_apps_search_bar_hint""
-        android:paddingBottom=""13dp""
-        android:paddingTop=""13dp""
         android:src=""@drawable/ic_search_grey"" />
 </FrameLayout>
\ No newline at end of file
diff --git a/res/layout/all_apps_search_market.xml b/res/layout/all_apps_search_market.xml
new file mode 100644
index 000000000..1282069c8
--- /dev/null
+++ b/res/layout/all_apps_search_market.xml
@@ -0,0 +1,29 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the ""License"");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an ""AS IS"" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<TextView
+    xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:id=""@+id/search_market_text""
+    android:layout_width=""wrap_content""
+    android:layout_height=""48dp""
+    android:gravity=""start|center_vertical""
+    android:paddingLeft=""16dp""
+    android:paddingRight=""16dp""
+    android:fontFamily=""sans-serif-medium""
+    android:textSize=""14sp""
+    android:textColor=""#009688""
+    android:textAllCaps=""true""
+    android:focusable=""false""
+    android:background=""@drawable/all_apps_search_market_bg"" />
diff --git a/res/layout/all_apps_search_market_divider.xml b/res/layout/all_apps_search_market_divider.xml
new file mode 100644
index 000000000..39097818f
--- /dev/null
+++ b/res/layout/all_apps_search_market_divider.xml
@@ -0,0 +1,27 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<!-- Copyright (C) 2015 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the ""License"");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an ""AS IS"" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<ImageView
+    xmlns:android=""http://schemas.android.com/apk/res/android""
+    android:layout_width=""match_parent""
+    android:layout_height=""wrap_content""
+    android:gravity=""center""
+    android:paddingTop=""16dp""
+    android:paddingBottom=""8dp""
+    android:paddingLeft=""16dp""
+    android:paddingRight=""16dp""
+    android:focusable=""false""
+    android:scaleType=""matrix""
+    android:src=""@drawable/horizontal_line"" />
\ No newline at end of file
diff --git a/res/values/colors.xml b/res/values/colors.xml
index 51e4d40a5..0add48cd8 100644
--- a/res/values/colors.xml
+++ b/res/values/colors.xml
@@ -44,6 +44,7 @@
 
     <!-- All Apps -->
     <color name=""all_apps_grid_section_text_color"">#009688</color>
+    <color name=""all_apps_search_market_button_focused_bg_color"">#DDDDDD</color>
 
     <!-- Widgets view -->
     <color name=""widgets_view_fastscroll_thumb_inactive_color"">#42FFFFFF</color>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 88f149bd0..fefadef28 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -24,10 +24,10 @@
     <!-- URI used to import old favorites. [DO NOT TRANSLATE] -->
     <string name=""old_launcher_provider_uri"" translatable=""false"">content://com.android.launcher2.settings/favorites?notify=true</string>
 
-    <!-- Permission to receive the com.android.launcher3.action.LAUNCH intent -->
+    <!-- Permission to receive the com.android.launcher3.action.LAUNCH intent. [DO NOT TRANSLATE] -->
     <string name=""receive_launch_broadcasts_permission"" translatable=""false"">com.android.launcher3.permission.RECEIVE_LAUNCH_BROADCASTS</string>
 
-    <!-- Permission to receive the com.android.launcher3.action.FIRST_LOAD_COMPLETE intent -->
+    <!-- Permission to receive the com.android.launcher3.action.FIRST_LOAD_COMPLETE intent. [DO NOT TRANSLATE] -->
     <string name=""receive_first_load_broadcast_permission"" translatable=""false"">com.android.launcher3.permission.RECEIVE_FIRST_LOAD_BROADCAST</string>
 
     <!-- Application name -->
@@ -61,6 +61,9 @@
     <string name=""all_apps_loading_message"">Loading Apps&#8230;</string>
     <!-- No-search-results text. [CHAR_LIMIT=50] -->
     <string name=""all_apps_no_search_results"">No Apps found matching \""<xliff:g id=""query"" example=""Android"">%1$s</xliff:g>\""</string>
+    <!-- Search market text.  This is a format string where the first argument is the name of the activity
+         handling the search.  The format string does not need to handle both of these arguments. [CHAR_LIMIT=50] -->
+    <string name=""all_apps_search_market_message"">Go to <xliff:g id=""query"" example=""Play Store"">%1$s</xliff:g></string>
 
     <!-- Drag and drop -->
     <skip />
diff --git a/src/com/android/launcher3/Launcher.java b/src/com/android/launcher3/Launcher.java
index 9d04770af..2d338e3d4 100644
--- a/src/com/android/launcher3/Launcher.java
+++ b/src/com/android/launcher3/Launcher.java
@@ -2132,6 +2132,15 @@ public class Launcher extends Activity
         }
     }
 
+    public void startSearchFromAllApps(View v, Intent searchIntent, String searchQuery) {
+        if (mLauncherCallbacks != null && mLauncherCallbacks.startSearchFromAllApps(searchQuery)) {
+            return;
+        }
+
+        // If not handled, then just start the provided search intent
+        startActivitySafely(v, searchIntent, null);
+    }
+
     public boolean isOnCustomContent() {
         return mWorkspace.isOnOrMovingToCustomContent();
     }
@@ -2533,6 +2542,10 @@ public class Launcher extends Activity
         if (!isAppsViewVisible()) {
             showAppsView(true /* animated */, false /* resetListToTop */,
                     true /* updatePredictedApps */, false /* focusSearchBar */);
+
+            if (mLauncherCallbacks != null) {
+                mLauncherCallbacks.onClickAllAppsButton(v);
+            }
         }
     }
 
@@ -2924,7 +2937,7 @@ public class Launcher extends Activity
         return false;
     }
 
-    @Thunk boolean startActivitySafely(View v, Intent intent, Object tag) {
+    public boolean startActivitySafely(View v, Intent intent, Object tag) {
         boolean success = false;
         if (mIsSafeModeEnabled && !Utilities.isSystemApp(this, intent)) {
             Toast.makeText(this, R.string.safemode_shortcut_error, Toast.LENGTH_SHORT).show();
diff --git a/src/com/android/launcher3/LauncherCallbacks.java b/src/com/android/launcher3/LauncherCallbacks.java
index 6618cca78..e34bd57fd 100644
--- a/src/com/android/launcher3/LauncherCallbacks.java
+++ b/src/com/android/launcher3/LauncherCallbacks.java
@@ -77,6 +77,7 @@ public interface LauncherCallbacks {
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();
diff --git a/src/com/android/launcher3/allapps/AllAppsContainerView.java b/src/com/android/launcher3/allapps/AllAppsContainerView.java
index 010b2cb48..e129dc6d3 100644
--- a/src/com/android/launcher3/allapps/AllAppsContainerView.java
+++ b/src/com/android/launcher3/allapps/AllAppsContainerView.java
@@ -16,34 +16,26 @@
 package com.android.launcher3.allapps;
 
 import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.Resources;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.drawable.InsetDrawable;
-import android.os.Build;
-import android.os.Bundle;
 import android.support.v7.widget.RecyclerView;
 import android.text.Selection;
 import android.text.SpannableStringBuilder;
 import android.text.method.TextKeyListener;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
-import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
-import android.widget.FrameLayout;
 import android.widget.LinearLayout;
-
 import com.android.launcher3.AppInfo;
 import com.android.launcher3.BaseContainerView;
-import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.CellLayout;
-import com.android.launcher3.CheckLongPressHelper;
 import com.android.launcher3.DeleteDropTarget;
 import com.android.launcher3.DeviceProfile;
 import com.android.launcher3.DragSource;
@@ -53,7 +45,6 @@ import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherTransitionable;
 import com.android.launcher3.R;
-import com.android.launcher3.Stats;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
 import com.android.launcher3.util.ComponentKey;
@@ -155,6 +146,7 @@ public class AllAppsContainerView extends BaseContainerView implements DragSourc
     @Thunk AllAppsSearchBarController mSearchBarController;
     private ViewGroup mSearchBarContainerView;
     private View mSearchBarView;
+    private SpannableStringBuilder mSearchQueryBuilder = null;
 
     private int mSectionNamesMargin;
     private int mNumAppsPerRow;
@@ -165,7 +157,13 @@ public class AllAppsContainerView extends BaseContainerView implements DragSourc
     // This coordinate is relative to its parent
     private final Point mIconLastTouchPos = new Point();
 
-    private SpannableStringBuilder mSearchQueryBuilder = null;
+    private View.OnClickListener mSearchClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            Intent searchIntent = (Intent) v.getTag();
+            mLauncher.startActivitySafely(v, searchIntent, null);
+        }
+    };
 
     public AllAppsContainerView(Context context) {
         this(context, null);
@@ -182,8 +180,7 @@ public class AllAppsContainerView extends BaseContainerView implements DragSourc
         mLauncher = (Launcher) context;
         mSectionNamesMargin = res.getDimensionPixelSize(R.dimen.all_apps_grid_view_start_margin);
         mApps = new AlphabeticalAppsList(context);
-        mAdapter = new AllAppsGridAdapter(context, mApps, this, mLauncher, this);
-        mAdapter.setEmptySearchText(res.getString(R.string.all_apps_loading_message));
+        mAdapter = new AllAppsGridAdapter(mLauncher, mApps, this, mLauncher, this);
         mApps.setAdapter(mAdapter);
         mLayoutManager = mAdapter.getLayoutManager();
         mItemDecoration = mAdapter.getItemDecoration();
@@ -615,13 +612,9 @@ public class AllAppsContainerView extends BaseContainerView implements DragSourc
     @Override
     public void onSearchResult(String query, ArrayList<ComponentKey> apps) {
         if (apps != null) {
-            if (apps.isEmpty()) {
-                String formatStr = getResources().getString(R.string.all_apps_no_search_results);
-                mAdapter.setEmptySearchText(String.format(formatStr, query));
-            } else {
-                mAppsRecyclerView.scrollToTop();
-            }
             mApps.setOrderedFilter(apps);
+            mAdapter.setLastSearchQuery(query);
+            mAppsRecyclerView.scrollToTop();
         }
     }
 
diff --git a/src/com/android/launcher3/allapps/AllAppsGridAdapter.java b/src/com/android/launcher3/allapps/AllAppsGridAdapter.java
index e96567c41..4acfc5ca6 100644
--- a/src/com/android/launcher3/allapps/AllAppsGridAdapter.java
+++ b/src/com/android/launcher3/allapps/AllAppsGridAdapter.java
@@ -16,14 +16,17 @@
 package com.android.launcher3.allapps;
 
 import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import android.content.res.Resources;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.PointF;
 import android.graphics.Rect;
-import android.os.Handler;
 import android.support.v4.view.accessibility.AccessibilityRecordCompat;
 import android.support.v4.view.accessibility.AccessibilityEventCompat;
+import android.net.Uri;
 import android.support.v7.widget.GridLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
@@ -34,6 +37,7 @@ import android.view.accessibility.AccessibilityEvent;
 import android.widget.TextView;
 import com.android.launcher3.AppInfo;
 import com.android.launcher3.BubbleTextView;
+import com.android.launcher3.Launcher;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
@@ -58,6 +62,10 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
     public static final int PREDICTION_ICON_VIEW_TYPE = 2;
     // The message shown when there are no filtered results
     public static final int EMPTY_SEARCH_VIEW_TYPE = 3;
+    // A divider that separates the apps list and the search market button
+    public static final int SEARCH_MARKET_DIVIDER_VIEW_TYPE = 4;
+    // The message to continue to a market search when there are no filtered results
+    public static final int SEARCH_MARKET_VIEW_TYPE = 5;
 
     /**
      * ViewHolder for each icon.
@@ -83,12 +91,12 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
         @Override
         public void onInitializeAccessibilityEvent(AccessibilityEvent event) {
             super.onInitializeAccessibilityEvent(event);
-            if (mApps.hasNoFilteredResults()) {
-                // Disregard the no-search-results text as a list item for accessibility
-                final AccessibilityRecordCompat record = AccessibilityEventCompat
-                        .asRecord(event);
-                record.setItemCount(0);
-            }
+
+            // Ensure that we only report the number apps for accessibility not including other
+            // adapter views
+            final AccessibilityRecordCompat record = AccessibilityEventCompat
+                    .asRecord(event);
+            record.setItemCount(mApps.getNumFilteredApps());
         }
 
         @Override
@@ -115,11 +123,6 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
 
         @Override
         public int getSpanSize(int position) {
-            if (mApps.hasNoFilteredResults()) {
-                // Empty view spans full width
-                return mAppsPerRow;
-            }
-
             switch (mApps.getAdapterItems().get(position).viewType) {
                 case AllAppsGridAdapter.ICON_VIEW_TYPE:
                 case AllAppsGridAdapter.PREDICTION_ICON_VIEW_TYPE:
@@ -314,6 +317,7 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
         }
     }
 
+    private Launcher mLauncher;
     private LayoutInflater mLayoutInflater;
     @Thunk AlphabeticalAppsList mApps;
     private GridLayoutManager mGridLayoutMgr;
@@ -326,7 +330,19 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
     @Thunk int mPredictionBarDividerOffset;
     @Thunk int mAppsPerRow;
     @Thunk boolean mIsRtl;
-    private String mEmptySearchText;
+
+    // The text to show when there are no search results and no market search handler.
+    private String mEmptySearchMessage;
+    // The name of the market app which handles searches, to be used in the format str
+    // below when updating the search-market view.  Only needs to be loaded once.
+    private String mMarketAppName;
+    // The text to show when there is a market app which can handle a specific query, updated
+    // each time the search query changes.
+    private String mMarketSearchMessage;
+    // The intent to send off to the market app, updated each time the search query changes.
+    private Intent mMarketSearchIntent;
+    // The last query that the user entered into the search field
+    private String mLastSearchQuery;
 
     // Section drawing
     @Thunk int mSectionNamesMargin;
@@ -334,16 +350,18 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
     @Thunk Paint mSectionTextPaint;
     @Thunk Paint mPredictedAppsDividerPaint;
 
-    public AllAppsGridAdapter(Context context, AlphabeticalAppsList apps,
+    public AllAppsGridAdapter(Launcher launcher, AlphabeticalAppsList apps,
             View.OnTouchListener touchListener, View.OnClickListener iconClickListener,
             View.OnLongClickListener iconLongClickListener) {
-        Resources res = context.getResources();
+        Resources res = launcher.getResources();
+        mLauncher = launcher;
         mApps = apps;
+        mEmptySearchMessage = res.getString(R.string.all_apps_loading_message);
         mGridSizer = new GridSpanSizer();
-        mGridLayoutMgr = new AppsGridLayoutManager(context);
+        mGridLayoutMgr = new AppsGridLayoutManager(launcher);
         mGridLayoutMgr.setSpanSizeLookup(mGridSizer);
         mItemDecoration = new GridItemDecoration();
-        mLayoutInflater = LayoutInflater.from(context);
+        mLayoutInflater = LayoutInflater.from(launcher);
         mTouchListener = touchListener;
         mIconClickListener = iconClickListener;
         mIconLongClickListener = iconLongClickListener;
@@ -363,6 +381,14 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
         mPredictionBarDividerOffset =
                 (-res.getDimensionPixelSize(R.dimen.all_apps_prediction_icon_bottom_padding) +
                         res.getDimensionPixelSize(R.dimen.all_apps_icon_top_bottom_padding)) / 2;
+
+        // Resolve the market app handling additional searches
+        PackageManager pm = launcher.getPackageManager();
+        ResolveInfo marketInfo = pm.resolveActivity(createMarketSearchIntent(""""),
+                PackageManager.MATCH_DEFAULT_ONLY);
+        if (marketInfo != null) {
+            mMarketAppName = marketInfo.loadLabel(pm).toString();
+        }
     }
 
     /**
@@ -381,10 +407,19 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
     }
 
     /**
-     * Sets the text to show when there are no apps.
+     * Sets the last search query that was made, used to show when there are no results and to also
+     * seed the intent for searching the market.
      */
-    public void setEmptySearchText(String query) {
-        mEmptySearchText = query;
+    public void setLastSearchQuery(String query) {
+        Resources res = mLauncher.getResources();
+        String formatStr = res.getString(R.string.all_apps_no_search_results);
+        mLastSearchQuery = query;
+        mEmptySearchMessage = String.format(formatStr, query);
+        if (mMarketAppName != null) {
+            mMarketSearchMessage = String.format(res.getString(R.string.all_apps_search_market_message),
+                    mMarketAppName);
+            mMarketSearchIntent = createMarketSearchIntent(query);
+        }
     }
 
     /**
@@ -413,9 +448,6 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
     @Override
     public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
         switch (viewType) {
-            case EMPTY_SEARCH_VIEW_TYPE:
-                return new ViewHolder(mLayoutInflater.inflate(R.layout.all_apps_empty_search, parent,
-                        false));
             case SECTION_BREAK_VIEW_TYPE:
                 return new ViewHolder(new View(parent.getContext()));
             case ICON_VIEW_TYPE: {
@@ -440,6 +472,22 @@ class AllAppsGridAdapter extends RecyclerView.Adapter<AllAppsGridAdapter.ViewHol
                 icon.setFocusable(true);
                 return new ViewHolder(icon);
             }
+            case EMPTY_SEARCH_VIEW_TYPE:
+                return new ViewHolder(mLayoutInflater.inflate(R.layout.all_apps_empty_search,
+                        parent, false));
+            case SEARCH_MARKET_DIVIDER_VIEW_TYPE:
+                return new ViewHolder(mLayoutInflater.inflate(R.layout.all_apps_search_market_divider,
+                        parent, false));
+            case SEARCH_MARKET_VIEW_TYPE:
+                View searchMarketView = mLayoutInflater.inflate(R.layout.all_apps_search_market,
+                        parent, false);
+                searchMarketView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        mLauncher.startSearchFromAllApps(v, mMarketSearchIntent, mLastSearchQuery);
+                    }
+             ",Adding market search . . Change - Id : I <issue_id>,"""Implement search market feature in all apps view""","According to the diff, the commit message should be:

""Add search functionality to All Apps view""

This commit message accurately reflects the changes made in the code, which include adding search functionality to the All Apps view, including the creation of new layouts and drawables, and modifications to the existing code to support search functionality.","""Update search UI in All Apps view""

This commit updates the UI for the search functionality in the All Apps view of the launcher. It adds new drawable resources for the search and back icons, as well as a new layout file for the search market button. It also updates the colors and strings used in the search UI.

In addition to the UI changes, the commit also adds a new method to the Launcher class to handle starting a search from the All Apps view, and updates the LauncherCallbacks interface to include a method for handling search queries. The AllAppsContainerView class is also updated to use the new search market button layout and to handle clicks on the search market button. Finally, the commit updates the AllAppsGridAdapter class to include a new view type for the search market button and to set the correct text and click listener for the button.","""Added market search option in all apps and updated UI elements for search functionality"""
"diff --git a/changelog.txt b/changelog.txt
index 3042ddf7a..6634c2c07 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -1,3 +1,6 @@
+0.79.1
+ * copyToRealm() no longer crashes on cyclic data structures.
+
 0.79
  * Added support for ARM64.
  * Added RealmQuery.not() to negate a query condition.",Updated changelog .,"""Fixed copyToRealm() crash on cyclic data structures in 0.79.1""","Here's a short commit message based on the provided diff:

`Added support for ARM64 and fixed copyToRealm() on cyclic data structures`","It seems like you're trying to update a changelog file. Here's how the updated part should look:

```
0.79.1
 - copyToRealm() no longer crashes on cyclic data structures.

0.79
 - Added support for ARM64.
 - Added RealmQuery.not() to negate a query condition.
```","""Fixed crash in copyToRealm() for cyclic data structures, updated changelog for version 0.79.1."""
"diff --git a/core/build.gradle b/core/build.gradle
index f904b46fb5..c1a4a3d796 100644
--- a/core/build.gradle
+++ b/core/build.gradle
@@ -9,6 +9,7 @@ configurations {
 
 dependencies {
     compile project(':es')
+    compile 'commons-codec:commons-codec:1.9'
     testCompile project(':testing')
 }
 
diff --git a/core/src/main/java/io/crate/PartitionName.java b/core/src/main/java/io/crate/PartitionName.java
index 5b5376f0dc..2f1568780a 100644
--- a/core/src/main/java/io/crate/PartitionName.java
+++ b/core/src/main/java/io/crate/PartitionName.java
@@ -23,8 +23,8 @@ package io.crate;
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
+import org.apache.commons.codec.binary.Base32;
 import org.apache.lucene.util.BytesRef;
-import org.elasticsearch.common.Base64;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.io.stream.*;
@@ -32,11 +32,13 @@ import org.elasticsearch.common.io.stream.*;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 public class PartitionName implements Streamable {
 
     public static final String NULL_MARKER = ""N"";
     public static final String NOT_NULL_MARKER = ""_"";
+    private static final Base32 BASE32 = new Base32(true);
 
     private final List<String> values = new ArrayList<>();
     private final String tableName;
@@ -120,9 +122,12 @@ public class PartitionName implements Streamable {
         if (bytes() == null) {
             return null;
         }
-        return Joiner.on(""."").join(Constants.PARTITIONED_TABLE_PREFIX, tableName, Base64.encodeBytes(bytesReference.toBytes()));
+        return Joiner.on(""."").join(Constants.PARTITIONED_TABLE_PREFIX, tableName,
+                BASE32.encodeAsString(bytesReference.toBytes()).toLowerCase(Locale.ROOT));
     }
 
+
+
     @Nullable
     public String toString() {
         return stringValue();
@@ -142,7 +147,7 @@ public class PartitionName implements Streamable {
 
         PartitionName partitionName = new PartitionName(tableName);
         if (columnCount > 1) {
-            byte[] inputBytes = Base64.decode(valuesString);
+            byte[] inputBytes = BASE32.decode(valuesString.toUpperCase(Locale.ROOT));
             BytesStreamInput in = new BytesStreamInput(inputBytes, true);
             partitionName.readFrom(in);
         } else {
diff --git a/docs/sql/information_schema.txt b/docs/sql/information_schema.txt
index 81a3bcc27f..9c3d076d3e 100644
--- a/docs/sql/information_schema.txt
+++ b/docs/sql/information_schema.txt
@@ -25,6 +25,7 @@ settings like the number of shards or number of replicas::
     | blob               | myblobs           | 3                | 1                  | digest       |
     | doc                | documents         | 5                | 1                  | _id          |
     | doc                | locations         | 2                | 0                  | id           |
+    | doc                | partitioned_table | 5                | 1                  | _id          |
     | doc                | quotes            | 2                | 0                  | id           |
     | information_schema | columns           | 1                | 0                  | NULL         |
     | information_schema | routines          | 1                | 0                  | NULL         |
@@ -34,7 +35,7 @@ settings like the number of shards or number of replicas::
     | sys                | nodes             | 1                | 0                  | NULL         |
     | sys                | shards            | 1                | 0                  | NULL         |
     +--------------------+-------------------+------------------+--------------------+--------------+
-    SELECT 11 rows in set (... sec)
+    SELECT 12 rows in set (... sec)
 
 
 Columns
@@ -46,25 +47,28 @@ definition like data type and ordinal position inside the table::
     cr> select * from information_schema.columns
     ... where schema_name='doc' and table_name not like 'my_table%'
     ... order by table_name asc, column_name asc;
-    +-------------+------------+------------------+------------------+--------------+
-    | schema_name | table_name | column_name      | ordinal_position | data_type    |
-    +-------------+------------+------------------+------------------+--------------+
-    | doc         | documents  | body             | 1                | string       |
-    | doc         | documents  | title            | 2                | string       |
-    | doc         | locations  | date             | 1                | timestamp    |
-    | doc         | locations  | description      | 2                | string       |
-    | doc         | locations  | id               | 3                | string       |
-    | doc         | locations  | kind             | 4                | string       |
-    | doc         | locations  | name             | 5                | string       |
-    | doc         | locations  | position         | 6                | integer      |
-    | doc         | locations  | race             | 7                | object       |
-    | doc         | locations  | race.description | 8                | string       |
-    | doc         | locations  | race.interests   | 9                | string_array |
-    | doc         | locations  | race.name        | 10               | string       |
-    | doc         | quotes     | id               | 1                | integer      |
-    | doc         | quotes     | quote            | 2                | string       |
-    +-------------+------------+------------------+------------------+--------------+
-    SELECT 14 rows in set (... sec)
+    +-------------+-------------------+------------------+------------------+--------------+
+    | schema_name | table_name        | column_name      | ordinal_position | data_type    |
+    +-------------+-------------------+------------------+------------------+--------------+
+    | doc         | documents         | body             | 1                | string       |
+    | doc         | documents         | title            | 2                | string       |
+    | doc         | locations         | date             | 1                | timestamp    |
+    | doc         | locations         | description      | 2                | string       |
+    | doc         | locations         | id               | 3                | string       |
+    | doc         | locations         | kind             | 4                | string       |
+    | doc         | locations         | name             | 5                | string       |
+    | doc         | locations         | position         | 6                | integer      |
+    | doc         | locations         | race             | 7                | object       |
+    | doc         | locations         | race.description | 8                | string       |
+    | doc         | locations         | race.interests   | 9                | string_array |
+    | doc         | locations         | race.name        | 10               | string       |
+    | doc         | partitioned_table | date             | 1                | timestamp    |
+    | doc         | partitioned_table | id               | 2                | long         |
+    | doc         | partitioned_table | title            | 3                | string       |
+    | doc         | quotes            | id               | 1                | integer      |
+    | doc         | quotes            | quote            | 2                | string       |
+    +-------------+-------------------+------------------+------------------+--------------+
+    SELECT 17 rows in set (... sec)
 
 
 You can even query this tables' own columns (attention: this might lead to infinite recursion of your mind, beware!)::
@@ -104,19 +108,20 @@ their type, name and which table they are defined in.
     cr> select * from information_schema.table_constraints
     ... where table_name not like 'my_table%'
     ... order by schema_name desc, table_name desc limit 10;
-    +--------------------+------------+-------------------------------------------------+-----------------+
-    | schema_name        | table_name | constraint_name                                 | constraint_type |
-    +--------------------+------------+-------------------------------------------------+-----------------+
-    | sys                | shards     | [u'schema_name', u'table_name', u'id']          | PRIMARY_KEY     |
-    | sys                | nodes      | [u'id']                                         | PRIMARY_KEY     |
-    | information_schema | tables     | [u'schema_name', u'table_name']                 | PRIMARY_KEY     |
-    | information_schema | columns    | [u'schema_name', u'table_name', u'column_name'] | PRIMARY_KEY     |
-    | doc                | quotes     | [u'id']                                         | PRIMARY_KEY     |
-    | doc                | locations  | [u'id']                                         | PRIMARY_KEY     |
-    | doc                | documents  | [u'_id']                                        | PRIMARY_KEY     |
-    | blob               | myblobs    | [u'digest']                                     | PRIMARY_KEY     |
-    +--------------------+------------+-------------------------------------------------+-----------------+
-    SELECT 8 rows in set (... sec)
+    +--------------------+-------------------+-------------------------------------------------+-----------------+
+    | schema_name        | table_name        | constraint_name                                 | constraint_type |
+    +--------------------+-------------------+-------------------------------------------------+-----------------+
+    | sys                | shards            | [u'schema_name', u'table_name', u'id']          | PRIMARY_KEY     |
+    | sys                | nodes             | [u'id']                                         | PRIMARY_KEY     |
+    | information_schema | tables            | [u'schema_name', u'table_name']                 | PRIMARY_KEY     |
+    | information_schema | columns           | [u'schema_name', u'table_name', u'column_name'] | PRIMARY_KEY     |
+    | doc                | quotes            | [u'id']                                         | PRIMARY_KEY     |
+    | doc                | partitioned_table | [u'_id']                                        | PRIMARY_KEY     |
+    | doc                | locations         | [u'id']                                         | PRIMARY_KEY     |
+    | doc                | documents         | [u'_id']                                        | PRIMARY_KEY     |
+    | blob               | myblobs           | [u'digest']                                     | PRIMARY_KEY     |
+    +--------------------+-------------------+-------------------------------------------------+-----------------+
+    SELECT 9 rows in set (... sec)
 
 
 Indices
diff --git a/docs/sql/rest.txt b/docs/sql/rest.txt
index 572704dcdf..2f81d6e611 100644
--- a/docs/sql/rest.txt
+++ b/docs/sql/rest.txt
@@ -151,4 +151,6 @@ Currently the defined error codes are:
     4093  A table with the same name exists already.
     ----- ---------------------------------------------------------------------
     4094  The used table alias contains tables with different schema.
+    ----- ---------------------------------------------------------------------
+    5001  The execution of one or more tasks failed.
     ===== =====================================================================
diff --git a/sql/src/main/java/io/crate/analyze/AbstractDataAnalysis.java b/sql/src/main/java/io/crate/analyze/AbstractDataAnalysis.java
index ea5a1a0d5a..b6fe7b6063 100644
--- a/sql/src/main/java/io/crate/analyze/AbstractDataAnalysis.java
+++ b/sql/src/main/java/io/crate/analyze/AbstractDataAnalysis.java
@@ -106,7 +106,7 @@ public abstract class AbstractDataAnalysis extends Analysis {
         TableInfo tableInfo = schemaInfo.getTableInfo(tableIdent.name());
         if (tableInfo == null) {
             throw new TableUnknownException(tableIdent.name());
-        } else if (tableInfo.isAlias()) {
+        } else if (tableInfo.isAlias() && !tableInfo.isPartitioned()) {
             throw new UnsupportedOperationException(
                     String.format(""aliases are read only cannot modify \""%s\"""", tableIdent.name()));
         }
diff --git a/sql/src/main/java/io/crate/analyze/InsertAnalysis.java b/sql/src/main/java/io/crate/analyze/InsertAnalysis.java
index 09e927daa9..73ec9bb93d 100644
--- a/sql/src/main/java/io/crate/analyze/InsertAnalysis.java
+++ b/sql/src/main/java/io/crate/analyze/InsertAnalysis.java
@@ -23,27 +23,25 @@ package io.crate.analyze;
 
 import com.carrotsearch.hppc.IntOpenHashSet;
 import com.carrotsearch.hppc.IntSet;
-import io.crate.metadata.Functions;
-import io.crate.metadata.ReferenceInfos;
-import io.crate.metadata.ReferenceResolver;
+import io.crate.PartitionName;
+import io.crate.metadata.*;
 import io.crate.planner.symbol.Reference;
-import io.crate.planner.symbol.Symbol;
",implemented insert on partitioned tables,"""Added support for partitioned tables in CrateDB""","Added support for partitioned tables and updated documentation to reflect this change.

Or, if you want to be more concise:

Added partitioned table support and updated docs.","This commit includes the following changes:

1. In `core/build.gradle`, the `commons-codec:commons-codec:1.9` library has been added as a compile dependency.
2. In `PartitionName.java`, the `org.apache.commons.codec.binary.Base32` import has been added, and `org.elasticsearch.common.Base64` has been removed. The `BASE32` static field has been added to use the Base32 encoding/decoding. The `toString()` and `fromString()` methods have been updated to use the new `BASE32` field for encoding and decoding.
3. In `docs/sql/information_schema.txt`, the output of some queries has been updated to include an additional row for a new table called `partitioned_table`.
4. In `AbstractDataAnalysis.java`, a check has been added to throw an `UnsupportedOperationException` if the table being modified is an alias and not a partitioned table.
5. In `InsertAnalysis.java`, the imports have been updated to include `io.crate.PartitionName` and `io.crate.metadata.*`. The `io.crate.metadata.Functions` and `io.crate.metadata.ReferenceInfos` imports have been removed.

The commit message could be: ""Add Base32 encoding for partition name, update information schema docs, and add alias check for data analysis"".",Added Base32 encoding to PartitionName and updated information schema documentation for partitioned tables.
"diff --git a/actuator/src/main/java/org/tron/core/vm/PrecompiledContracts.java b/actuator/src/main/java/org/tron/core/vm/PrecompiledContracts.java
index 71b1219ed..c956c84f1 100644
--- a/actuator/src/main/java/org/tron/core/vm/PrecompiledContracts.java
+++ b/actuator/src/main/java/org/tron/core/vm/PrecompiledContracts.java
@@ -34,6 +34,7 @@ import static org.tron.core.vm.utils.MUtil.convertToTronAddress;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CountDownLatch;
@@ -1070,7 +1071,7 @@ public class PrecompiledContracts {
       }
       long leafCount = parseLong(data, 1472);
       if (leafCount >= TREE_WIDTH) {
-        return Pair.of(false, EMPTY_BYTE_ARRAY);
+        return Pair.of(false, DataWord.ZERO().getData());
       }
 
       boolean result;
@@ -1080,7 +1081,7 @@ public class PrecompiledContracts {
         result = JLibrustzcash.librustzcashSaplingCheckOutput(
             new LibrustzcashParam.CheckOutputParams(ctx, cv, cm, epk, proof));
         long valueBalance = -value;
-        result &= JLibrustzcash.librustzcashSaplingFinalCheck(
+        result = result && JLibrustzcash.librustzcashSaplingFinalCheck(
             new LibrustzcashParam.FinalCheckParams(ctx, valueBalance, bindingSig, signHash));
       } catch (Throwable any) {
         result = false;
@@ -1183,6 +1184,22 @@ public class PrecompiledContracts {
       for (int i = 0; i < receiveCount; i++) {
         System.arraycopy(receiveCv[i], 0, receiveCvs, 32 * i, 32);
       }
+      //check duplicate nullifiers
+      HashSet<String> nfSet = new HashSet<>();
+      for (byte[] nf : nullifier) {
+        if (nfSet.contains(ByteArray.toHexString(nf))) {
+          return Pair.of(true, DataWord.ZERO().getData());
+        }
+        nfSet.add(ByteArray.toHexString(nf));
+      }
+      //check duplicate output note
+      HashSet<String> cmSet = new HashSet<>();
+      for (byte[] cm : receiveCm) {
+        if (cmSet.contains(ByteArray.toHexString(cm))) {
+          return Pair.of(true, DataWord.ZERO().getData());
+        }
+        cmSet.add(ByteArray.toHexString(cm));
+      }
 
       int threadCount = spendCount + receiveCount + 1;
       CountDownLatch countDownLatch = new CountDownLatch(threadCount);
@@ -1219,7 +1236,7 @@ public class PrecompiledContracts {
         countDownLatch.await(getCPUTimeLeftInNanoSecond(), TimeUnit.NANOSECONDS);
         for (Future<Boolean> future : futures) {
           boolean eachTaskResult = future.get();
-          checkResult &= eachTaskResult;
+          checkResult = checkResult && eachTaskResult;
         }
       } catch (Throwable any) {
         checkResult = false;
@@ -1396,7 +1413,7 @@ public class PrecompiledContracts {
         result = JLibrustzcash.librustzcashSaplingCheckSpend(
             new LibrustzcashParam.CheckSpendParams(
                 ctx, cv, anchor, nullifier, rk, proof, spendAuthSig, signHash));
-        result &= JLibrustzcash.librustzcashSaplingFinalCheck(
+        result = result && JLibrustzcash.librustzcashSaplingFinalCheck(
             new LibrustzcashParam.FinalCheckParams(ctx, value, bindingSig, signHash));
       } catch (Throwable any) {
         result = false;
diff --git a/framework/src/test/java/org/tron/common/runtime/vm/PrecompiledContractsVerifyProofTest.java b/framework/src/test/java/org/tron/common/runtime/vm/PrecompiledContractsVerifyProofTest.java
index 11d9f2fb0..61f35bfa8 100644
--- a/framework/src/test/java/org/tron/common/runtime/vm/PrecompiledContractsVerifyProofTest.java
+++ b/framework/src/test/java/org/tron/common/runtime/vm/PrecompiledContractsVerifyProofTest.java
@@ -4,6 +4,7 @@ import com.google.protobuf.ByteString;
 import java.io.File;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Random;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.tuple.Pair;
 import org.junit.AfterClass;
@@ -18,6 +19,7 @@ import org.tron.common.utils.FileUtil;
 import org.tron.common.zksnark.IncrementalMerkleTreeContainer;
 import org.tron.common.zksnark.IncrementalMerkleVoucherContainer;
 import org.tron.common.zksnark.JLibrustzcash;
+import org.tron.common.zksnark.LibrustzcashParam;
 import org.tron.core.capsule.IncrementalMerkleTreeCapsule;
 import org.tron.core.capsule.PedersenHashCapsule;
 import org.tron.core.config.DefaultConfig;
@@ -29,6 +31,7 @@ import org.tron.core.vm.PrecompiledContracts;
 import org.tron.core.vm.PrecompiledContracts.VerifyBurnProof;
 import org.tron.core.vm.PrecompiledContracts.VerifyMintProof;
 import org.tron.core.vm.PrecompiledContracts.VerifyTransferProof;
+import org.tron.core.vm.PrecompiledContracts.MerkleHash;
 import org.tron.core.zen.ShieldedTRC20ParametersBuilder;
 import org.tron.core.zen.ShieldedTRC20ParametersBuilder.ShieldedTRC20ParametersType;
 import org.tron.core.zen.address.DiversifierT;
@@ -63,9 +66,10 @@ public class PrecompiledContractsVerifyProofTest {
     FullNodeHttpApiService.librustzcashInitZksnarkParams();
   }
 
-  PrecompiledContracts.VerifyMintProof mintContract = new VerifyMintProof();
-  PrecompiledContracts.VerifyTransferProof transferContract = new VerifyTransferProof();
-  PrecompiledContracts.VerifyBurnProof burnContract = new VerifyBurnProof();
+  VerifyMintProof mintContract = new VerifyMintProof();
+  VerifyTransferProof transferContract = new VerifyTransferProof();
+  VerifyBurnProof burnContract = new VerifyBurnProof();
+  MerkleHash merkleHash = new MerkleHash();
 
   /**
    * Init data.
@@ -111,8 +115,8 @@ public class PrecompiledContractsVerifyProofTest {
       ShieldedTRC20Parameters params = builder.build(false);
 
       byte[] inputData = abiEncodeForMint(params, value, frontier, leafCount);
-      Pair<Boolean, byte[]> contarctResult = mintContract.execute(inputData);
-      byte[] result = contarctResult.getRight();
+      Pair<Boolean, byte[]> contractResult = mintContract.execute(inputData);
+      byte[] result = contractResult.getRight();
 
       Assert.assertEquals(1, result[31]);
 
@@ -137,7 +141,6 @@ public class PrecompiledContractsVerifyProofTest {
 
     IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
         new IncrementalMerkleTreeCapsule());
-
     for (int countNum = 0; countNum < totalCountNum; countNum++) {
       SpendingKey senderSk = SpendingKey.random();
       ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
@@ -283,9 +286,9 @@ public class PrecompiledContractsVerifyProofTest {
     }
   }
 
-  Pair<Boolean, byte[]> verifyTransfer(byte[] input) {
+  private Pair<Boolean, byte[]> verifyTransfer(byte[] input) {
     transferContract.getEnergyForData(input);
-    transferContract.setVmShouldEndInUs(System.nanoTime() / 1000 + 500 * 1000);
+    transferContract.setVmShouldEndInUs(System.nanoTime() / 1000 + 500000 * 1000);
     Pair<Boolean, byte[]> ret = transferContract.execute(input);
     return ret;
   }
@@ -299,7 +302,6 @@ public class PrecompiledContractsVerifyProofTest {
 
     IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
         new IncrementalMerkleTreeCapsule());
-
     for (int countNum = 0; countNum < totalCountNum; countNum++) {
       SpendingKey senderSk = SpendingKey.random();
       ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
@@ -362,7 +364,474 @@ public class PrecompiledContractsVerifyProofTest {
     }
   }
 
-  public IncrementalMerkleVoucherContainer addSimpleMerkleVoucherContainer(
+  @Test
+  public void merkleHashCorrectTest() throws ZksnarkException {
+    int totalCountNum = 10;
+    byte[][] uncommitted = new byte[32][32];
+    //initialize uncommitted
+    uncommitted[0] = ByteArray.fromHexString(
+        ""0100000000000000000000000000000000000000000000000000000000000000"");
+    try {
+      for (int i = 0; i < 31; i++) {
+        JLibrustzcash.librustzcashMerkleHash(
+            new LibrustzcashParam.MerkleHashParams(
+                i, uncommitted[i], uncommitted[i], uncommitted[i + 1]));
+      }
+    } catch (Throwable any) {
+    }
+    for (int cnt = 0; cnt < totalCountNum; cnt++) {
+      SpendingKey sk = SpendingKey.random();
+      FullViewingKey fvk = sk.fullViewingKey();
+      IncomingViewingKey ivk = fvk.inViewingKey();
+      byte[] rcm = new byte[32];
+      JLibrustzcash.librustzcashSaplingGenerateR(rcm);
+      PaymentAddress paymentAddress = ivk.address(DiversifierT.random()).get();
+      Note note = new Note(paymentAddress.getD(), paymentAddress.getPkD(),
+          randomLong(), rcm, new byte[512]);
+      byte[] node = note.cm();
+
+
+      for (int i = 0; i < 32; i++) {
+        byte[] input = ByteUtil.merge(longTo32Bytes(i), node, uncommitted[i]);
+        node = merkleHash.execute(input).getRight();
+      }
+
+      IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+          new IncrementalMerkleTreeCapsule());
+      byte[][] noteCommitment = new byte[1][32];
+      System.arraycopy(note.cm(), 0, noteCommitment[0], 0, 32);
+      IncrementalMerkleVoucherContainer voucher =
+          addSimpleMerkleVoucherContainer(tree, noteCommitment);
+      byte[] anchor = voucher.root().getContent().toByteArray();
+
+      Assert.assertArrayEquals(anchor, node);
+    }
+  }
+
+  @Test
+  public void verifyMintWrongDataLength() throws ZksnarkException {
+    long leafCount = 0;
+    long value = 100L;
+    byte[] frontier = new byte[32 * 33];
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setTransparentToAmount(value);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.MINT);
+
+    //ReceiveNote
+    SpendingKey recvSk = SpendingKey.random();
+    FullViewingKey fullViewingKey = recvSk.fullViewingKey();
+    IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
+    PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
+    builder.addOutput(DEFAULT_OVK, paymentAddress, value, new byte[512]);
+    ShieldedTRC20Parameters params = builder.build(false);
+
+    byte[] inputData = abiEncodeForMint(params, value, frontier, leafCount);
+    byte[] mergedBytes = ByteUtil.merge(inputData, new byte[1]);
+    Pair<Boolean, byte[]> contractResult = mintContract.execute(mergedBytes);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  @Test
+  public void verifyTransferWrongDataLength() throws ZksnarkException {
+    long leafCount = 0;
+    byte[] frontier = new byte[32 * 33];
+
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    byte[] senderOvk = senderFvk.getOvk();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm1 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm1);
+    byte[] rcm2 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm2);
+    PaymentAddress senderPaymentAddress1 = senderIvk.address(DiversifierT.random()).get();
+    PaymentAddress senderPaymentAddress2 = senderIvk.address(DiversifierT.random()).get();
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.TRANSFER);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setTransparentFromAmount(0);
+    builder.setTransparentToAmount(0);
+
+    IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+        new IncrementalMerkleTreeCapsule());
+    //spendNote1
+    Note senderNote1 = new Note(senderPaymentAddress1.getD(), senderPaymentAddress1.getPkD(),
+        30, rcm1, new byte[512]);
+    byte[][] cm1 = new byte[1][32];
+    System.arraycopy(senderNote1.cm(), 0, cm1[0], 0, 32);
+    IncrementalMerkleVoucherContainer voucher1 = addSimpleMerkleVoucherContainer(tree, cm1);
+    byte[] path1 = decodePath(voucher1.path().encode());
+    byte[] anchor1 = voucher1.root().getContent().toByteArray();
+    long position1 = voucher1.position();
+    builder.addSpend(senderExpsk, senderNote1, anchor1, path1, position1);
+
+    //spendNote2
+    Note senderNote2 = new Note(senderPaymentAddress2.getD(), senderPaymentAddress2.getPkD(),
+        70, rcm2, new byte[512]);
+    byte[][] cm2 = new byte[1][32];
+    System.arraycopy(senderNote2.cm(), 0, cm2[0], 0, 32);
+    IncrementalMerkleVoucherContainer voucher2 = addSimpleMerkleVoucherContainer(tree, cm2);
+    byte[] path2 = decodePath(voucher2.path().encode());
+    byte[] anchor2 = voucher2.root().getContent().toByteArray();
+    long position2 = voucher2.position();
+    builder.addSpend(senderExpsk, senderNote2, anchor2, path2, position2);
+
+    //receiveNote1
+    SpendingKey receiveSk1 = SpendingKey.random();
+    FullViewingKey receiveFvk1 = receiveSk1.fullViewingKey();
+    IncomingViewingKey receiveIvk1 = receiveFvk1.inViewingKey();
+    PaymentAddress receivePaymentAddress1 = receiveIvk1.address(new DiversifierT()).get();
+    builder.addOutput(senderOvk, receivePaymentAddress1, 40, new byte[512]);
+
+    //receiveNote2
+    SpendingKey receiveSk2 = SpendingKey.random();
+    FullViewingKey receiveFvk2 = receiveSk2.fullViewingKey();
+    IncomingViewingKey receiveIvk2 = receiveFvk2.inViewingKey();
+    PaymentAddress receivePaymentAddress2 = receiveIvk2.address(new DiversifierT()).get();
+    builder.addOutput(senderOvk, receivePaymentAddress2, 60, new byte[512]);
+    ShieldedTRC20Parameters params = builder.build(true);
+
+    byte[] inputData = abiEncodeForTransfer(params, frontier, leafCount);
+    byte[] mergedBytes = ByteUtil.merge(inputData, new byte[1]);
+    Pair<Boolean, byte[]> contractResult = verifyTransfer(mergedBytes);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  @Test
+  public void verifyBurnWrongDataLength() throws ZksnarkException {
+    long value = 100L;
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm);
+    PaymentAddress senderPaymentAddress = senderIvk.address(DiversifierT.random()).get();
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.BURN);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setTransparentToAmount(value);
+    builder.setTransparentToAddress(PUBLIC_TO_ADDRESS);
+    //spendNote
+    Note senderNote = new Note(senderPaymentAddress.getD(), senderPaymentAddress.getPkD(),
+        value, rcm, new byte[512]);
+    byte[][] cm = new byte[1][32];
+    System.arraycopy(senderNote.cm(), 0, cm[0], 0, 32);
+    IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+        new IncrementalMerkleTreeCapsule());
+    IncrementalMerkleVoucherContainer voucher = addSimpleMerkleVoucherContainer(tree, cm);
+    byte[] path = decodePath(voucher.path().encode());
+    byte[] anchor = voucher.root().getContent().toByteArray();
+    long position = voucher.position();
+    builder.addSpend(senderExpsk, senderNote, anchor, path, position);
+    ShieldedTRC20Parameters params = builder.build(true);
+
+    byte[] inputData = abiEncodeForBurn(params, value);
+    byte[] data = ByteUtil.merge(inputData, new byte[1]);
+    Pair<Boolean, byte[]> contractResult = burnContract.execute(data);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  @Test
+  public void verifyMintWrongLeafcount() throws ZksnarkException {
+    long value = 100L;
+    byte[] frontier = new byte[32 * 33];
+    long[] leafCountList = {-1, 1L << 32};
+
+    for (long leafCount : leafCountList) {
+      ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+      builder.setTransparentToAmount(value);
+      builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+      builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.MINT);
+
+      //ReceiveNote
+      SpendingKey recvSk = SpendingKey.random();
+      FullViewingKey fullViewingKey = recvSk.fullViewingKey();
+      IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
+      PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
+      builder.addOutput(DEFAULT_OVK, paymentAddress, value, new byte[512]);
+      ShieldedTRC20Parameters params = builder.build(false);
+
+      byte[] inputData = abiEncodeForMint(params, value, frontier, leafCount);
+      Pair<Boolean, byte[]> contractResult = mintContract.execute(inputData);
+      byte[] result = contractResult.getRight();
+
+      Assert.assertEquals(0, result[31]);
+    }
+  }
+
+  @Test
+  public void verifyTransferWrongLeafcount() throws ZksnarkException {
+    byte[] frontier = new byte[32 * 33];
+    long[] leafCountList = {-1, (1L << 32) - 1};
+
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    byte[] senderOvk = senderFvk.getOvk();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm1 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm1);
+    byte[] rcm2 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm2);
+    PaymentAddress senderPaymentAddress1 = senderIvk.address(DiversifierT.random()).get();
+    PaymentAddress senderPaymentAddress2 = senderIvk.address(DiversifierT.random()).get();
+
+    for (long leafCount : leafCountList) {
+      ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+      builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.TRANSFER);
+      builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+      builder.setTransparentFromAmount(0);
+      builder.setTransparentToAmount(0);
+      IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+          new IncrementalMerkleTreeCapsule());
+      //spendNote1
+      Note senderNote1 = new Note(senderPaymentAddress1.getD(), senderPaymentAddress1.getPkD(),
+          30, rcm1, new byte[512]);
+      byte[][] cm1 = new byte[1][32];
+      System.arraycopy(senderNote1.cm(), 0, cm1[0], 0, 32);
+      IncrementalMerkleVoucherContainer voucher1 = addSimpleMerkleVoucherContainer(tree, cm1);
+      byte[] path1 = decodePath(voucher1.path().encode());
+      byte[] anchor1 = voucher1.root().getContent().toByteArray();
+      long position1 = voucher1.position();
+      builder.addSpend(senderExpsk, senderNote1, anchor1, path1, position1);
+
+      //spendNote2
+      Note senderNote2 = new Note(senderPaymentAddress2.getD(), senderPaymentAddress2.getPkD(),
+          70, rcm2, new byte[512]);
+      byte[][] cm2 = new byte[1][32];
+      System.arraycopy(senderNote2.cm(), 0, cm2[0], 0, 32);
+      IncrementalMerkleVoucherContainer voucher2 = addSimpleMerkleVoucherContainer(tree, cm2);
+      byte[] path2 = decodePath(voucher2.path().encode());
+      byte[] anchor2 = voucher2.root().getContent().toByteArray();
+      long position2 = voucher2.position();
+      builder.addSpend(senderExpsk, senderNote2, anchor2, path2, position2);
+
+      //receiveNote1
+      SpendingKey receiveSk1 = SpendingKey.random();
+      FullViewingKey receiveFvk1 = receiveSk1.fullViewingKey();
+      IncomingViewingKey receiveIvk1 = receiveFvk1.inViewingKey();
+      PaymentAddress receivePaymentAddress1 = receiveIvk1.address(new DiversifierT()).get();
+      builder.addOutput(senderOvk, receivePaymentAddress1, 40, new byte[512]);
+
+      //receiveNote2
+      SpendingKey receiveSk2 = SpendingKey.random();
+      FullViewingKey receiveFvk2 = receiveSk2.fullViewingKey();
+      IncomingViewingKey receiveIvk2 = receiveFvk2.inViewingKey();
+      PaymentAddress receivePaymentAddress2 = receiveIvk2.address(new DiversifierT()).get();
+      builder.addOutput(senderOvk, receivePaymentAddress2, 60, new byte[512]);
+      ShieldedTRC20Parameters params = builder.build(true);
+
+      byte[] inputData = abiEncodeForTransfer(params, frontier, leafCount);
+      Pair<Boolean, byte[]> contractResult = verifyTransfer(inputData);
+      byte[] result = contractResult.getRight();
+
+      Assert.assertEquals(0, result[31]);
+    }
+  }
+
+  @Test
+  public void verifyTransferDuplicateNf() throws ZksnarkException {
+    byte[] frontier = new byte[32 * 33];
+    long leafCount = 0;
+
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    byte[] senderOvk = senderFvk.getOvk();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm);
+    PaymentAddress senderPaymentAddress = senderIvk.address(DiversifierT.random()).get();
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.TRANSFER);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setTransparentFromAmount(0);
+    builder.setTransparentToAmount(0);
+
+    IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+        new IncrementalMerkleTreeCapsule());
+    //spendNote1
+    Note senderNote = new Note(senderPaymentAddress.getD(), senderPaymentAddress.getPkD(),
+        50, rcm, new byte[512]);
+    byte[][] cm = new byte[1][32];
+    System.arraycopy(senderNote.cm(), 0, cm[0], 0, 32);
+    IncrementalMerkleVoucherContainer voucher = addSimpleMerkleVoucherContainer(tree, cm);
+    byte[] path = decodePath(voucher.path().encode());
+    byte[] anchor = voucher.root().getContent().toByteArray();
+    long position = voucher.position();
+    builder.addSpend(senderExpsk, senderNote, anchor, path, position);
+    builder.addSpend(senderExpsk, senderNote, anchor, path, position);
+
+    //receiveNote1
+    SpendingKey receiveSk1 = SpendingKey.random();
+    FullViewingKey receiveFvk1 = receiveSk1.fullViewingKey();
+    IncomingViewingKey receiveIvk1 = receiveFvk1.inViewingKey();
+    PaymentAddress receivePaymentAddress1 = receiveIvk1.address(new DiversifierT()).get();
+    builder.addOutput(senderOvk, receivePaymentAddress1, 40, new byte[512]);
+
+    //receiveNote2
+    SpendingKey receiveSk2 = SpendingKey.random();
+    FullViewingKey receiveFvk2 = receiveSk2.fullViewingKey();
+    IncomingViewingKey receiveIvk2 = receiveFvk2.inViewingKey();
+    PaymentAddress receivePaymentAddress2 = receiveIvk2.address(new DiversifierT()).get();
+    builder.addOutput(senderOvk, receivePaymentAddress2, 60, new byte[512]);
+    ShieldedTRC20Parameters params = builder.build(true);
+
+    byte[] inputData = abiEncodeForTransfer(params, frontier, leafCount);
+    Pair<Boolean, byte[]> contractResult = verifyTransfer(inputData);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  @Test
+  public void verifyTransferDuplicateReceiveNotes() throws ZksnarkException {
+    byte[] frontier = new byte[32 * 33];
+    long leafCount = 0;
+
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    byte[] senderOvk = senderFvk.getOvk();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm1 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm1);
+    byte[] rcm2 = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm2);
+    PaymentAddress senderPaymentAddress1 = senderIvk.address(DiversifierT.random()).get();
+    PaymentAddress senderPaymentAddress2 = senderIvk.address(DiversifierT.random()).get();
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.TRANSFER);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setTransparentFromAmount(0);
+    builder.setTransparentToAmount(0);
+
+    IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+        new IncrementalMerkleTreeCapsule());
+    //spendNote1
+    Note senderNote1 = new Note(senderPaymentAddress1.getD(), senderPaymentAddress1.getPkD(),
+        30, rcm1, new byte[512]);
+    byte[][] cm1 = new byte[1][32];
+    System.arraycopy(senderNote1.cm(), 0, cm1[0], 0, 32);
+    IncrementalMerkleVoucherContainer voucher1 = addSimpleMerkleVoucherContainer(tree, cm1);
+    byte[] path1 = decodePath(voucher1.path().encode());
+    byte[] anchor1 = voucher1.root().getContent().toByteArray();
+    long position1 = voucher1.position();
+    builder.addSpend(senderExpsk, senderNote1, anchor1, path1, position1);
+
+    //spendNote2
+    Note senderNote2 = new Note(senderPaymentAddress2.getD(), senderPaymentAddress2.getPkD(),
+        70, rcm2, new byte[512]);
+    byte[][] cm2 = new byte[1][32];
+    System.arraycopy(senderNote2.cm(), 0, cm2[0], 0, 32);
+    IncrementalMerkleVoucherContainer voucher2 = addSimpleMerkleVoucherContainer(tree, cm2);
+    byte[] path2 = decodePath(voucher2.path().encode());
+    byte[] anchor2 = voucher2.root().getContent().toByteArray();
+    long position2 = voucher2.position();
+    builder.addSpend(senderExpsk, senderNote2, anchor2, path2, position2);
+
+    //receiveNote1
+    SpendingKey receiveSk = SpendingKey.random();
+    FullViewingKey receiveFvk = receiveSk.fullViewingKey();
+    IncomingViewingKey receiveIvk = receiveFvk.inViewingKey();
+    PaymentAddress receivePaymentAddress = receiveIvk.address(new DiversifierT()).get();
+    byte[] r = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(r);
+    builder.addOutput(senderOvk, receivePaymentAddress.getD(), receivePaymentAddress.getPkD(),
+        50, r, new byte[512]);
+    builder.addOutput(senderOvk, receivePaymentAddress.getD(), receivePaymentAddress.getPkD(),
+        50, r, new byte[512]);
+    ShieldedTRC20Parameters params = builder.build(true);
+
+    byte[] inputData = abiEncodeForTransfer(params, frontier, leafCount);
+    Pair<Boolean, byte[]> contractResult = verifyTransfer(inputData);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  @Test
+  public void verifyMintWrongValue() throws ZksnarkException {
+    long leafCount = 0;
+    byte[] frontier = new byte[32 * 33];
+    long[] valueList = {0, 1000, -1};
+
+    for (long value : valueList) {
+      ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+      builder.setTransparentToAmount(value);
+      builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+      builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.MINT);
+
+      //ReceiveNote
+      SpendingKey recvSk = SpendingKey.random();
+      FullViewingKey fullViewingKey = recvSk.fullViewingKey();
+      IncomingViewingKey incomingViewingKey = fullViewingKey.inViewingKey();
+      PaymentAddress paymentAddress = incomingViewingKey.address(DiversifierT.random()).get();
+      builder.addOutput(DEFAULT_OVK, paymentAddress, 50, new byte[512]);
+      ShieldedTRC20Parameters params = builder.build(false);
+
+      byte[] inputData = abiEncodeForMint(params, value, frontier, leafCount);
+      byte[] mergedBytes = ByteUtil.merge(inputData, new byte[1]);
+      Pair<Boolean, byte[]> contractResult = mintContract.execute(mergedBytes);
+      byte[] result = contractResult.getRight();
+
+      Assert.assertEquals(0, result[31]);
+    }
+  }
+
+  @Test
+  public void verifyBurnWrongValue() throws ZksnarkException {
+    long value = 100L;
+    SpendingKey senderSk = SpendingKey.random();
+    ExpandedSpendingKey senderExpsk = senderSk.expandedSpendingKey();
+    FullViewingKey senderFvk = senderSk.fullViewingKey();
+    byte[] senderOvk = senderFvk.getOvk();
+    IncomingViewingKey senderIvk = senderFvk.inViewingKey();
+    byte[] rcm = new byte[32];
+    JLibrustzcash.librustzcashSaplingGenerateR(rcm);
+    PaymentAddress senderPaymentAddress = senderIvk.address(DiversifierT.random()).get();
+
+    ShieldedTRC20ParametersBuilder builder = new ShieldedTRC20ParametersBuilder();
+    builder.setShieldedTRC20ParametersType(ShieldedTRC20ParametersType.BURN);
+    builder.setShieldedTRC20Address(SHIELDED_CONTRACT_ADDRESS);
+    builder.setTransparentToAmount(value);
+    builder.setTransparentToAddress(PUBLIC_TO_ADDRESS);
+    //spendNote
+    Note senderNote = new Note(senderPaymentAddress.getD(), senderPaymentAddress.getPkD(),
+        50, rcm, new byte[512]);
+    byte[][] cm = new byte[1][32];
+    System.arraycopy(senderNote.cm(), 0, cm[0], 0, 32);
+    IncrementalMerkleTreeContainer tree = new IncrementalMerkleTreeContainer(
+        new IncrementalMerkleTreeCapsule());
+    IncrementalMerkleVoucherContainer voucher = addSimpleMerkleVoucherContainer(tree, cm);
+    byte[] path = decodePath(voucher.path().encode());
+    byte[] anchor = voucher.root().getContent().toByteArray();
+    long position = voucher.position();
+    builder.addSpend(senderExpsk, senderNote, anchor, path, position);
+    ShieldedTRC20Parameters params = builder.build(true);
+
+    byte[] inputData = abiEncodeForBurn(params, value);
+    Pair<Boolean, byte[]> contractResult = burnContract.execute(new byte[512]);
+    byte[] result = contractResult.getRight();
+
+    Assert.assertEquals(0, result[31]);
+  }
+
+  private IncrementalMerkleVoucherContainer addSimpleMerkleVoucherContainer(
       IncrementalMerkleTreeContainer tree, byte[][] cm)
       throws ZksnarkException {
     for (int i = 0; i < cm.length; i++) {
@@ -375,7 +844,7 @@ public class PrecompiledContractsVerifyProofTest {
     return voucher;
   }
 
-  public byte[] decodePath(byte[] encodedPath) {
+  private byte[] decodePath(byte[] encodedPath) {
     Assert.assertEquals(1065, encodedPath.length);
     byte[] path = new byte[32 * 32];
     for (int i = 0; i < 32; i++) {
@@ -384,8 +853,8 @@ public class PrecompiledContractsVerifyProofTest {
     return path;
   }
 
-  public byte[] abiEncodeForMint(ShieldedTRC20Parameters params, long value,
-                                 byte[] frontier, long leafCount) {
+  private byte[] abiEncodeForMint(ShieldedTRC20Parameters params, long value,
+                                  byte[] frontier, long leafCount) {
     byte[] mergedBytes;
     ShieldContract.ReceiveDescription revDesc = params.getReceiveDescription(0);
     mergedBytes = ByteUtil.merge(
@@ -450,11 +919,10 @@ public class PrecompiledContractsVerifyProofTest {
         recvCountBytes,
         output
     );
-    //logger.info(ByteArray.toHexString(mergedBytes));
     return mergedBytes;
   }
 
-  public byte[] abiEncodeForBurn(ShieldedTRC20Parameters params, long value) {
+  private byte[] abiEncodeForBurn(ShieldedTRC20Parameters params, long value) {
     byte[] mergedBytes;
     ShieldContract.SpendDescription spendDesc = params.getSpendDescription(0);
     mergedBytes = ByteUtil.merge(
@@ -471,10 +939,14 @@ public class PrecompiledContractsVerifyProofTest {
     return mergedBytes;
   }
 
-  public byte[] longTo32Bytes(long value) {
+  private byte[] longTo32Bytes(long value) {
     byte[] longBytes = ByteArray.fromLong(value);
     byte[] zeroBytes = new byte[24];
     return ByteUtil.merge(zeroBytes, longBytes);
   }
 
+  private long randomLong() {
+    return (long) Math.round(Math.random() * Long.MAX_VALUE / 2);
+  }
+
 }",add more unit tests for verifyProof PrecompiledContract,"""Fixed issues with duplicate nullifiers and output notes in shielded TRC20 transactions, and added tests for verifying proof correctness and handling edge cases.""",Added duplicate nullifier and output note checks in PrecompiledContracts and added test cases for various edge cases in PrecompiledContractsVerifyProofTest.,"This commit adds several new test methods to the PrecompiledContractsVerifyProofTest class in the org.tron.common.runtime.vm package. Specifically, it adds the following methods:

* merkleHashCorrectTest: tests the correctness of the Merkle hash implementation.
* verifyMintWrongDataLength: tests the behavior of the verifyMint method when the input data has the wrong length.
* verifyTransferWrongDataLength: tests the behavior of the verifyTransfer method when the input data has the wrong length.
* verifyMintWrongLeafcount: tests the behavior of the verifyMint method when the leaf count is out of bounds.
* verifyTransferWrongLeafcount: tests the behavior of the verifyTransfer method when the leaf count is out of bounds.
* verifyTransferDuplicateNf: tests the behavior of the verifyTransfer method when the nullifier list contains duplicates.
* verifyTransferDuplicateReceiveNotes: tests the behavior of the verifyTransfer method when the receive note list contains duplicates.

Additionally, it adds some new import statements and a new class-level field for the MerkleHash contract. It also modifies some existing test methods to use the new verifyTransfer method and to assert the correctness of the result byte array. Finally, it adds some new utility methods for generating random data and converting long values to byte arrays.","Fixed output handling, added duplicate check for nullifiers/notes, and extended unit tests for Proofs."
"diff --git a/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java
index 7ecd0985b8..d80189fe10 100644
--- a/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java
+++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java
@@ -128,8 +128,8 @@ public class EventListenerMethodProcessor implements SmartInitializingSingleton,
 			}
 			if (annotatedMethods.isEmpty()) {
 				this.nonAnnotatedClasses.add(type);
-				if (logger.isDebugEnabled()) {
-					logger.debug(""No @EventListener annotations found on bean class: "" + type);
+				if (logger.isTraceEnabled()) {
+					logger.trace(""No @EventListener annotations found on bean class: "" + type);
 				}
 			}
 			else {
diff --git a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java
index 608e4c964f..3eb3a9a819 100644
--- a/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java
+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java
@@ -231,8 +231,8 @@ public class ScheduledAnnotationBeanPostProcessor implements BeanPostProcessor,
 			});
 			if (annotatedMethods.isEmpty()) {
 				this.nonAnnotatedClasses.add(targetClass);
-				if (logger.isDebugEnabled()) {
-					logger.debug(""No @Scheduled annotations found on bean class: "" + bean.getClass());
+				if (logger.isTraceEnabled()) {
+					logger.trace(""No @Scheduled annotations found on bean class: "" + bean.getClass());
 				}
 			}
 			else {
diff --git a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java
index edf6c97634..54b8e98f80 100644
--- a/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java
+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java
@@ -208,8 +208,8 @@ public class JmsListenerAnnotationBeanPostProcessor
 			});
 			if (annotatedMethods.isEmpty()) {
 				this.nonAnnotatedClasses.add(bean.getClass());
-				if (logger.isDebugEnabled()) {
-					logger.debug(""No @JmsListener annotations found on bean class: "" + bean.getClass());
+				if (logger.isTraceEnabled()) {
+					logger.trace(""No @JmsListener annotations found on bean class: "" + bean.getClass());
 				}
 			}
 			else {",Reduce logging level of EventListenerMethodProcessor .,"""Downgrade log level from DEBUG to TRACE for missing annotations""","""Log level for missing annotation messages changed from DEBUG to TRACE""","""Lower log level for no annotation found messages in EventListenerMethodProcessor, ScheduledAnnotationBeanPostProcessor, and JmsListenerAnnotationBeanPostProcessor""

This commit changes the log level from DEBUG to TRACE in three classes: EventListenerMethodProcessor, ScheduledAnnotationBeanPostProcessor, and JmsListenerAnnotationBeanPostProcessor. This means that the messages ""No @EventListener annotations found on bean class: ..."", ""No @Scheduled annotations found on bean class: ..."", and ""No @JmsListener annotations found on bean class: ..."" will only be logged at the TRACE level, which is a more detailed level of logging that is typically not enabled unless specifically needed for debugging. This change could be useful for reducing the amount of log output in applications that use these classes and have many beans without the corresponding annotations.",Change logging from debug to trace when no annotations are found in annotated classes for event and scheduling processors.
"diff --git a/lib.profiler/src/org/netbeans/lib/profiler/server/ThreadInfo.java b/lib.profiler/src/org/netbeans/lib/profiler/server/ThreadInfo.java
index fc5618c56..94ff3ba2f 100644
--- a/lib.profiler/src/org/netbeans/lib/profiler/server/ThreadInfo.java
+++ b/lib.profiler/src/org/netbeans/lib/profiler/server/ThreadInfo.java
@@ -312,7 +312,6 @@ public class ThreadInfo {
                 }
 
                 ti.initialized = false;
-                ti.resetInternalState();
             }
         }
     }
diff --git a/profiler/src/org/netbeans/modules/profiler/Bundle.properties b/profiler/src/org/netbeans/modules/profiler/Bundle.properties
index 26def7cb6..5669c3ca6 100644
--- a/profiler/src/org/netbeans/modules/profiler/Bundle.properties
+++ b/profiler/src/org/netbeans/modules/profiler/Bundle.properties
@@ -281,8 +281,6 @@ SaveViewAction_SaveDialogPreview=Saved view preview\:
 SaveViewAction_SaveDialogVisible=Save only visible area
 SaveViewAction_OomeSavingMsg=<html><b>Not enough memory to save the image.</b><br><br>To avoid this error, either save smaller image or increase the -Xmx<br>value in the etc/netbeans.conf file in NetBeans IDE installation.</html>
 
-SnapshotDataLoader_DisplayName=Profiler Snapshot Loader
-
 SnapshotDiffWindow_AllocCaption=Allocations Comparison
 SnapshotDiffWindow_LivenessCaption=Liveness Comparison
 SnapshotDiffWindow_AllocAccessDescr=Comparison of two memory allocations snapshots
@@ -392,4 +390,4 @@ UI_PROFILER_MODIFY_ICON_BASE=org/netbeans/modules/profiler/actions/resources/mod
 UI_PROFILER_PROFILE_APP=Profile Application
 UI_PROFILER_PROFILE_APP_ICON_BASE=org/netbeans/modules/profiler/actions/resources/profile.png
 UI_PROFILER_PROFILE_CLASS=Profile Single Class
-UI_PROFILER_PROFILE_PROFILE_CLASS_ICON_BASE=org/netbeans/modules/profiler/actions/resources/profile.png
\ No newline at end of file
+UI_PROFILER_PROFILE_PROFILE_CLASS_ICON_BASE=org/netbeans/modules/profiler/actions/resources/profile.png
diff --git a/profiler/src/org/netbeans/modules/profiler/MemorySnapshotPanel.java b/profiler/src/org/netbeans/modules/profiler/MemorySnapshotPanel.java
index 25cb39691..410a719a9 100644
--- a/profiler/src/org/netbeans/modules/profiler/MemorySnapshotPanel.java
+++ b/profiler/src/org/netbeans/modules/profiler/MemorySnapshotPanel.java
@@ -339,7 +339,7 @@ public class MemorySnapshotPanel extends SnapshotPanel implements ChangeListener
             }
 
             memoryPanel.setFindString(findString);
-            reversePanel.setFindString(findString);
+            if (reversePanel != null) reversePanel.setFindString(findString);
 
             if (!memoryPanel.findFirst()) {
                 NetBeansProfiler.getDefaultNB().displayInfoAndWait(STRING_NOT_FOUND_MSG);
@@ -370,7 +370,7 @@ public class MemorySnapshotPanel extends SnapshotPanel implements ChangeListener
                 }
 
                 memoryPanel.setFindString(findString);
-                reversePanel.setFindString(findString);
+                if (reversePanel != null) reversePanel.setFindString(findString);
             }
 
             if (!memoryPanel.findNext()) {
@@ -404,7 +404,7 @@ public class MemorySnapshotPanel extends SnapshotPanel implements ChangeListener
                 }
 
                 memoryPanel.setFindString(findString);
-                reversePanel.setFindString(findString);
+                if (reversePanel != null) reversePanel.setFindString(findString);
             }
 
             if (!memoryPanel.findPrevious()) {
diff --git a/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoader.java b/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoader.java
deleted file mode 100644
index 22e8da84f..000000000
--- a/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoader.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- *
- * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
- *
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only (""GPL"") or the Common
- * Development and Distribution License(""CDDL"") (collectively, the
- * ""License""). You may not use this file except in compliance with the
- * License. You can obtain a copy of the License at
- * http://www.netbeans.org/cddl-gplv2.html
- * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
- * specific language governing permissions and limitations under the
- * License.  When distributing the software, include this License Header
- * Notice in each file and include the License file at
- * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
- * particular file as subject to the ""Classpath"" exception as provided
- * by Sun in the GPL Version 2 section of the License file that
- * accompanied this code. If applicable, add the following below the
- * License Header, with the fields enclosed by brackets [] replaced by
- * your own identifying information:
- * ""Portions Copyrighted [year] [name of copyright owner]""
- *
- * Contributor(s):
- * The Original Software is NetBeans. The Initial Developer of the Original
- * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
- * Microsystems, Inc. All Rights Reserved.
- *
- * If you wish your version of this file to be governed by only the CDDL
- * or only the GPL Version 2, indicate your decision by adding
- * ""[Contributor] elects to include this software in this distribution
- * under the [CDDL or GPL Version 2] license."" If you do not indicate a
- * single choice of license, a recipient has the option to distribute
- * your version of this file under either the CDDL, the GPL Version 2 or
- * to extend the choice of license to its licensees as provided above.
- * However, if you add GPL Version 2 code and therefore, elected the GPL
- * Version 2 license, then the option applies only if the new code is
- * made subject to such option by the copyright holder.
- */
-
-package org.netbeans.modules.profiler;
-
-import org.openide.actions.*;
-import org.openide.filesystems.FileObject;
-import org.openide.loaders.DataObjectExistsException;
-import org.openide.loaders.MultiDataObject;
-import org.openide.loaders.UniFileLoader;
-import org.openide.util.NbBundle;
-import org.openide.util.actions.SystemAction;
-
-
-/**
- * Data loader which recognizes profiler snapshot files.
- *
- * @author Tomas Hurka
- * @author Ian Formanek
- */
-public class SnapshotDataLoader extends UniFileLoader {
-    //~ Static fields/initializers -----------------------------------------------------------------------------------------------
-
-    // -----
-    // I18N String constants
-    private static final String DISPLAY_NAME = NbBundle.getMessage(SnapshotDataLoader.class, ""SnapshotDataLoader_DisplayName""); // NOI18N
-                                                                                                                                // -----
-
-    /**
-     * Generated serial version UID.
-     */
-    static final long serialVersionUID = -8188437526246245429L;
-
-    //~ Constructors -------------------------------------------------------------------------------------------------------------
-
-    /**
-     * Creates new image loader.
-     */
-    public SnapshotDataLoader() {
-        // Set the representation class.
-        super(""org.netbeans.modules.profiler.SnapshotDataObject""); // NOI18N
-    }
-
-    //~ Methods ------------------------------------------------------------------------------------------------------------------
-
-    /**
-     * Create the image data object.
-     *
-     * @param primaryFile the primary file (e.g. <code>*.gif</code>)
-     * @return the data object for this file
-     * @throws DataObjectExistsException if the primary file already has a data object
-     * @throws java.io.IOException       should not be thrown
-     */
-    protected MultiDataObject createMultiObject(FileObject primaryFile)
-                                         throws DataObjectExistsException, java.io.IOException {
-        return new SnapshotDataObject(primaryFile, this);
-    }
-
-    /**
-     * Gets default system actions. Overrides superclass method.
-     */
-    protected SystemAction[] defaultActions() {
-        return new SystemAction[] {
-                   SystemAction.get(OpenAction.class), SystemAction.get(FileSystemAction.class), null,
-                   SystemAction.get(CutAction.class), SystemAction.get(CopyAction.class), SystemAction.get(PasteAction.class),
-                   null, SystemAction.get(DeleteAction.class), SystemAction.get(RenameAction.class), null,
-                   SystemAction.get(ToolsAction.class), SystemAction.get(PropertiesAction.class)
-               };
-    }
-
-    /**
-     * Gets default display name. Overrides superclass method.
-     */
-    protected String defaultDisplayName() {
-        return DISPLAY_NAME;
-    }
-
-    protected FileObject findPrimaryFile(FileObject fo) {
-        if (fo.isFolder()) {
-            return null;
-        } else {
-            String ext = fo.getExt();
-
-            if (ext.equals(ResultsManager.SNAPSHOT_EXTENSION)) {
-                return fo;
-            } else {
-                return null;
-            }
-        }
-    }
-}
diff --git a/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoaderBeanInfo.java b/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoaderBeanInfo.java
deleted file mode 100644
index 9c536f47b..000000000
--- a/profiler/src/org/netbeans/modules/profiler/SnapshotDataLoaderBeanInfo.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- *
- * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
- *
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only (""GPL"") or the Common
- * Development and Distribution License(""CDDL"") (collectively, the
- * ""License""). You may not use this file except in compliance with the
- * License. You can obtain a copy of the License at
- * http://www.netbeans.org/cddl-gplv2.html
- * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
- * specific language governing permissions and limitations under the
- * License.  When distributing the software, include this License Header
- * Notice in each file and include the License file at
- * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
- * particular file as subject to the ""Classpath"" exception as provided
- * by Sun in the GPL Version 2 section of the License file that
- * accompanied this code. If applicable, add the following below the
- * License Header, with the fields enclosed by brackets [] replaced by
- * your own identifying information:
- * ""Portions Copyrighted [year] [name of copyright owner]""
- *
- * Contributor(s):
- * The Original Software is NetBeans. The Initial Developer of the Original
- * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
- * Microsystems, Inc. All Rights Reserved.
- *
- * If you wish your version of this file to be governed by only the CDDL
- * or only the GPL Version 2, indicate your decision by adding
- * ""[Contributor] elects to include this software in this distribution
- * under the [CDDL or GPL Version 2] license."" If you do not indicate a
- * single choice of license, a recipient has the option to distribute
- * your version of this file under either the CDDL, the GPL Version 2 or
- * to extend the choice of license to its licensees as provided above.
- * However, if you add GPL Version 2 code and therefore, elected the GPL
- * Version 2 license, then the option applies only if the new code is
- * made subject to such option by the copyright holder.
- */
-
-package org.netbeans.modules.profiler;
-
-import org.openide.ErrorManager;
-import org.openide.loaders.UniFileLoader;
-import org.openide.util.Utilities;
-import java.awt.Image;
-import java.beans.*;
-
-
-/**
- * Snapshot data loader bean info.
- *
- * @author Tomas Hurka
- * @author Ian Formanek
- */
-public class SnapshotDataLoaderBeanInfo extends SimpleBeanInfo {
-    //~ Methods ------------------------------------------------------------------------------------------------------------------
-
-    public BeanInfo[] getAdditionalBeanInfo() {
-        try {
-            return new BeanInfo[] { Introspector.getBeanInfo(UniFileLoader.class) };
-        } catch (IntrospectionException ie) {
-            ErrorManager.getDefault().notify(ie);
-
-            return null;
-        }
-    }
-
-    public Image getIcon(final int type) {
-        if ((type == java.beans.BeanInfo.ICON_COLOR_16x16) || (type == java.beans.BeanInfo.ICON_MONO_16x16)) {
-            return Utilities.loadImage(""org/netbeans/modules/profiler/resources/snapshotDataObjectCPU.gif""); // NOI18N
-        } else {
-            return Utilities.loadImage(""org/netbeans/modules/profiler/resources/snapshotDataObjectCPU32.gif""); // NOI18N
-        }
-    }
-}
diff --git a/profiler/src/org/netbeans/modules/profiler/SnapshotDataObject.java b/profiler/src/org/netbeans/modules/profiler/SnapshotDataObject.java
deleted file mode 100644
index 3367bdbab..000000000
--- a/profiler/src/org/netbeans/modules/profiler/SnapshotDataObject.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
- *
- * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
- *
- * The contents of this file are subject to the terms of either the GNU
- * General Public License Version 2 only (""GPL"") or the Common
- * Development and Distribution License(""CDDL"") (collectively, the
- * ""License""). You may not use this file except in compliance with the
- * License. You can obtain a copy of the License at
- * http://www.netbeans.org/cddl-gplv2.html
- * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
- * specific language governing permissions and limitations under the
- * License.  When distributing the software, include this License Header
- * Notice in each file and include the License file at
- * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
- * particular file as subject to the ""Classpath"" exception as provided
- * by Sun in the GPL Version 2 section of the License file that
- * accompanied this code. If applicable, add the following below the
- * License Header, with the fields enclosed by brackets [] replaced by
- * your own identifying information:
- * ""Portions Copyrighted [year] [name of copyright owner]""
- *
- * Contributor(s):
- * The Original Software is NetBeans. The Initial Developer of the Original
- * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
- * Microsystems, Inc. All Rights Reserved.
- *
- * If you wish your version of this file to be governed by only the CDDL
- * or only the GPL Version 2, indicate your decision by adding
- * ""[Contributor] elects to include this software in this distribution
- * under the [CDDL or GPL Version 2] license."" If you do not indicate a
- * single choice of license, a recipient has the option to distribute
- * your version of this file under either the CDDL, the GPL Version 2 or
- * to extend the choice of license to its licensees as provided above.
- * However, if you add GPL Version 2 code and therefore, elected the GPL
- * Version 2 license, then the option applies only if the new code is
- * made subject to such option by the copyright holder.
- */
-
-package org.netbeans.modules.profiler;
-
-import org.openide.actions.OpenAction;
-import org.openide.cookies.OpenCookie;
-import org.openide.filesystems.FileObject;
-import org.openide.loaders.DataNode;
-import org.openide.loaders.DataObjectExistsException;
-import org.openide.loaders.MultiDataObject;
-import org.openide.loaders.MultiFileLoader;
-import org.openide.nodes.Children;
-import org.openide.nodes.CookieSet;
-import org.openide.nodes.Node;
-import org.openide.util.HelpCtx;
-import org.openide.util.actions.SystemAction;
-import java.awt.*;
-import javax.swing.*;
-
-
-/**
- * Object that represents one snapshot file.
- *
- * @author Tomas Hurka
- * @author Ian Formanek
- */
-public class SnapshotDataObject extends MultiDataObject implements CookieSet.Factory, OpenCookie {
-    //~ Inner Classes ------------------------------------------------------------------------------------------------------------
-
-    /**
-     * Node representing <code>SnapshotDataObject</code>.
-     */
-    private static final class SnapshotNode extends DataNode {
-        //~ Constructors ---------------------------------------------------------------------------------------------------------
-
-        /**
-         * Constructs snapshot node.
-         */
-        public SnapshotNode(SnapshotDataObject obj) {
-            super(obj, Children.LEAF);
-
-            int type = ResultsManager.getDefault().getSnapshotType(obj.getPrimaryFile());
-
-            switch (type) {
-                case LoadedSnapshot.SNAPSHOT_TYPE_CPU:
-                    setIconBaseWithExtension(SNAPSHOT_ICON_BASE_CPU);
-
-                    break;
-                case LoadedSnapshot.SNAPSHOT_TYPE_CODEFRAGMENT:
-                    setIconBaseWithExtension(SNAPSHOT_ICON_BASE_FRAGMENT);
-
-                    break;
-                case LoadedSnapshot.SNAPSHOT_TYPE_MEMORY_ALLOCATIONS:
-                case LoadedSnapshot.SNAPSHOT_TYPE_MEMORY_LIVENESS:
-                    setIconBaseWithExtension(SNAPSHOT_ICON_BASE_MEMORY);
-
-                    break;
-            }
-        }
-
-        //~ Methods --------------------------------------------------------------------------------------------------------------
-
-        public Image getIcon(int i) {
-            return super.getIcon(i); //To change body of overridden methods use File | Settings | File Templates.
-        }
-
-        public Action getPreferredAction() {
-            return SystemAction.get(OpenAction.class);
-        }
-    }
-
-    //~ Static fields/initializers -----------------------------------------------------------------------------------------------
-
-    /**
-     * Generated serialized version UID.
-     */
-    static final long serialVersionUID = -6037463545669336965L;
-
-    /**
-     * Base for image resource.
-     */
-    private static final String SNAPSHOT_ICON_BASE_CPU = ""org/netbeans/modules/profiler/resources/snapshotDataObjectCPU.png""; // NOI18N
-    private static final String SNAPSHOT_ICON_BASE_MEMORY = ""org/netbeans/modules/profiler/resources/snapshotDataObjectMemory.png""; // NOI18N
-    private static final String SNAPSHOT_ICON_BASE_FRAGMENT = ""org/netbeans/modules/profiler/resources/snapshotDataObjectFragment.png""; // NOI18N
-
-    //~ Constructors -------------------------------------------------------------------------------------------------------------
-
-    /**
-     * Constructor.
-     *
-     * @param pf     primary file object for this data object
-     * @param loader the data loader creating it
-     * @throws DataObjectExistsException if there was already a data object for it
-     */
-    public SnapshotDataObject(FileObject pf, MultiFileLoader loader)
-                       throws DataObjectExistsException {
-        super(pf, loader);
-
-        getCookieSet().add(OpenCookie.class, this);
-    }
-
-    //~ Methods ------------------------------------------------------------------------------------------------------------------
-
-    /**
-     * Help context for this object.
-     *
-     * @return the help context
-     */
-    public HelpCtx getHelpCtx() {
-        return HelpCtx.DEFAULT_HELP;
-    }
-
-    /**
-     * Implements <code>CookieSet.Factory</code> interface.
-     */
-    public Node.Cookie createCookie(Class clazz) {
-        if (clazz.isAssignableFrom(OpenCookie.class)) {
-            return this;
-        } else {
-            return null;
-        }
-    }
-
-    public void open() {
-        LoadedSnapshot[] loaded = ResultsManager.getDefault().loadSnapshots(new FileObject[] { getPrimaryFile() });
-        ResultsManager.getDefault().openSnapshots(loaded);
-    }
-
-    /**
-     * Create a node to represent the image. Overrides superclass method.
-     *
-     * @return node delegate
-     */
-    protected Node createNodeDelegate() {
-        return new SnapshotNode(this);
-    }
-}
diff --git a/profiler/src/org/netbeans/modules/profiler/mf-layer.xml b/profiler/src/org/netbeans/modules/profiler/mf-layer.xml
index 1202663a7..e9f3acf26 100644
--- a/profiler/src/org/netbeans/modules/profiler/mf-layer.xml
+++ b/profiler/src/org/netbeans/modules/profiler/mf-layer.xml
@@ -85,15 +85,6 @@ made subject to such option by the copyright holder.
           </folder>
       </folder>
     </folder>
-    <folder name=""content"">
-        <folder name=""unknown"">
-            <folder name=""Factories"">
-                <file name=""org-netbeans-modules-profiler-SnapshotDataLoader.instance"">
-                    <attr name=""position"" intvalue=""98312""/>
-                </file>
-            </folder>
-        </folder>
-    </folder>
   </folder>
 
   <folder name=""Menu"">",Automated merge with http : / / hg . netbeans . org / main,"""Remove SnapshotDataLoader and related classes, and update ThreadInfo and MemorySnapshotPanel""",Removed profiler snapshot data loader and related classes.,"""Removed SnapshotDataLoader and related classes, updated Bundle.properties and mf-layer.xml""","""Removed obsolete SnapshotDataLoader and associated files, added null checks in MemorySnapshotPanel, and minor cleanup in ThreadInfo."""
"diff --git a/community/pom.xml b/community/pom.xml
index 7728033e90a..dafded820b5 100644
--- a/community/pom.xml
+++ b/community/pom.xml
@@ -43,13 +43,7 @@
     <org.neo4j.webservice.packages>org.neo4j.rest.web,org.neo4j.webadmin,org.neo4j.webadmin.backup,org.neo4j.webadmin.console,org.neo4j.webadmin.domain,org.neo4j.webadmin.parser,org.neo4j.webadmin.properties,org.neo4j.webadmin.resources,org.neo4j.webadmin.rest,org.neo4j.webadmin.rrd,org.neo4j.webadmin.task,org.neo4j.webadmin.utils</org.neo4j.webservice.packages>
     <org.neo4j.server.bundledir>../system/lib</org.neo4j.server.bundledir>
 
-    <!-- 
-         Runtime properties. These are used to bootstrap
-         the server. All other configuration should happen
-         through a configuration file. 
-         Each of these should have a sensible default, so
-         that the server can operate without them defined.
-         -->
+    <!-- Runtime properties. These are used to bootstrap the server. All other configuration should happen through a configuration file. Each of these should have a sensible default, so that the server can operate without them defined. -->
     <neo4j.home>${project.build.directory}/neo4j</neo4j.home>
     <neo4j.confdir>${neo4j.home}/conf</neo4j.confdir> <!-- needed? -->
     <neo4j.datadir>${neo4j.home}/data</neo4j.datadir> <!-- needed? -->
@@ -169,6 +163,12 @@
       <artifactId>neo4j-server</artifactId>
       <version>${neo4j-server.version}</version>
     </dependency>
+    <dependency>
+      <groupId>org.neo4j.app</groupId>
+      <artifactId>neo4j-server</artifactId>
+      <version>${neo4j-server.version}</version>
+      <classifier>static-web</classifier> 
+    </dependency>
     <dependency>
       <groupId>org.neo4j.examples</groupId>
       <artifactId>neo4j-examples</artifactId>
@@ -192,12 +192,7 @@
       <version>${neo4j-examples.version}</version>
       <classifier>site</classifier>
     </dependency>
-    <!--dependency>
-      <groupId>org.neo4j.app</groupId>
-      <artifactId>neo4j-server</artifactId>
-      <version>${neo4j-server.version}</version>
-      <classifier>static-web</classifier>
-    </dependency-->
+    <!--dependency> <groupId>org.neo4j.app</groupId> <artifactId>neo4j-server</artifactId> <version>${neo4j-server.version}</version> <classifier>static-web</classifier> </dependency -->
 
     <!-- OSGi Bundles -->
     <dependency>
@@ -205,7 +200,7 @@
       <artifactId>org.apache.felix.fileinstall</artifactId>
       <version>${felix-fileinstall.version}</version>
     </dependency>
-    
+
     <dependency>
       <groupId>org.ops4j.pax.logging</groupId>
       <artifactId>pax-logging-api</artifactId>
@@ -216,7 +211,7 @@
       <artifactId>pax-logging-service</artifactId>
       <version>${pax-logging.version}</version>
     </dependency>
-    
+
   </dependencies>
 
   <developers>",reverting packaging changes .,"""Add static-web classifier dependency for neo4j-server and remove commented out dependencies""","The commit message should be:

""Update community/pom.xml to include static-web dependency""

However, a more descriptive and conventional commit message would be:

""Add static-web dependency to community/pom.xml for Neo4j server""

This commit message clearly conveys the changes made in the commit and follows the conventional commit message format.","The commit message could be:

""Added dependency for neo4j-server static-web classifier and removed unnecessary comment blocks in community/pom.xml""","""Added static-web classifier to neo4j-server dependency and removed commented code for cleaner pom.xml."""
"diff --git a/rxjava-core/src/test/java/rx/operators/OperationConcatTest.java b/rxjava-core/src/test/java/rx/operators/OperatorConcatTest.java
similarity index 99%
rename from rxjava-core/src/test/java/rx/operators/OperationConcatTest.java
rename to rxjava-core/src/test/java/rx/operators/OperatorConcatTest.java
index 2a56cea35..122610bba 100644
--- a/rxjava-core/src/test/java/rx/operators/OperationConcatTest.java
+++ b/rxjava-core/src/test/java/rx/operators/OperatorConcatTest.java
@@ -43,7 +43,7 @@ import rx.schedulers.TestScheduler;
 import rx.subscriptions.BooleanSubscription;
 import rx.subscriptions.Subscriptions;
 
-public class OperationConcatTest {
+public class OperatorConcatTest {
 
     @Test
     public void testConcat() {",Rename concat test,"""Rename OperationConcatTest to OperatorConcatTest""","The commit message should be:

""Rename OperationConcatTest to OperatorConcatTest""

This message accurately reflects the change made in the commit, which is a simple rename of the class name.","""Rename OperationConcatTest.java to OperatorConcatTest.java""",Renamed `OperationConcatTest.java` to `OperatorConcatTest.java` and updated class name accordingly.
"diff --git a/h2/src/main/org/h2/value/ValueTimestampTimeZone.java b/h2/src/main/org/h2/value/ValueTimestampTimeZone.java
index ef5815d1d..c14d356cf 100644
--- a/h2/src/main/org/h2/value/ValueTimestampTimeZone.java
+++ b/h2/src/main/org/h2/value/ValueTimestampTimeZone.java
@@ -61,6 +61,11 @@ private ValueTimestampTimeZone(long dateValue, long timeNanos,
             throw new IllegalArgumentException(
                     ""timeNanos out of range "" + timeNanos);
         }
+        /*
+         * Some current and historic time zones have offsets larger than 12 hours.
+         * JSR-310 determines 18 hours as maximum possible offset in both directions, so
+         * we use this limit too for compatibility.
+         */
    ",Add a comment about 18h limit in ValueTimestampTimeZone,"""Relax time zone offset limit to 18 hours for compatibility with JSR-310""","""Update ValueTimestampTimeZone to handle time zones with offsets larger than 12 hours""","""Added limit for time zone offsets to 18 hours for compatibility with JSR-310 in ValueTimestampTimeZone.java""",Added a comment about the maximum possible time zone offset of 18 hours for compatibility with JSR-310 standards.
"diff --git a/src/main/java/com/google/devtools/build/lib/rules/objc/TestSupport.java b/src/main/java/com/google/devtools/build/lib/rules/objc/TestSupport.java
index e813e19319..50ad82d419 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/objc/TestSupport.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/objc/TestSupport.java
@@ -127,7 +127,6 @@ public class TestSupport {
    */
   private ImmutableList<Substitution> substitutionsForSimulator() {
     ImmutableList.Builder<Substitution> substitutions = new ImmutableList.Builder<Substitution>()
-        .add(Substitution.of(""%(iossim_path)s"", iossim().getRunfilesPathString()))
         .add(Substitution.of(""%(std_redirect_dylib_path)s"",
             stdRedirectDylib().getRunfilesPathString()))
         .addAll(deviceSubstitutions().getSubstitutionsForTestRunnerScript());
@@ -173,10 +172,6 @@ public class TestSupport {
     }
   }
 
-  private Artifact iossim() {
-    return ruleContext.getPrerequisiteArtifact(SimulatorRule.IOSSIM_ATTR, Mode.HOST);
-  }
-
   private Artifact stdRedirectDylib() {
     return ruleContext.getPrerequisiteArtifact(SimulatorRule.STD_REDIRECT_DYLIB_ATTR, Mode.HOST);
   }
@@ -231,7 +226,6 @@ public class TestSupport {
         .addTransitiveArtifacts(plugins());
     if (!runWithLabDevice()) {
       runfilesBuilder
-          .addArtifact(iossim())
           .addArtifact(stdRedirectDylib())
           .addTransitiveArtifacts(deviceRunfiles())
           .addArtifacts(testRunner().asSet());","Remove the useless flag \"" iossim \"" for the / / tools / objc / ios_test . sh . bazel_template .","""Remove unused iossim() method and its references in TestSupport""","The commit message should be:

""Remove unused iossim() method and related artifacts""

This message accurately reflects the changes made in the commit, which involve removing the `ioossim()` method and related artifacts from the code.","""Remove usage of iossim() and its method in TestSupport.java""

This commit removes the private method `iossim()` and its usage in `substitutionsForSimulator()` and `runfiles()` methods in the `TestSupport.java` file. The `iossim()` method was used to return the `Artifact` for the iOS simulator, but it seems it's no longer needed in the current implementation.",Remove iossim artifact and its substitutions to streamline TestSupport for non-simulator environments.
"diff --git a/test/org/opensolaris/opengrok/web/ScriptsTest.java b/test/org/opensolaris/opengrok/web/ScriptsTest.java
new file mode 100644
index 00000000000..a6451d97d72
--- /dev/null
+++ b/test/org/opensolaris/opengrok/web/ScriptsTest.java
@@ -0,0 +1,138 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the ""License"").
+ * You may not use this file except in compliance with the License.
+ *
+ * See LICENSE.txt included in this distribution for the specific
+ * language governing permissions and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at LICENSE.txt.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets ""[]"" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+
+ /*
+ * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ */
+package org.opensolaris.opengrok.web;
+
+import java.util.Map.Entry;
+import org.junit.Before;
+import org.junit.Test;
+import org.opensolaris.opengrok.web.Scripts.Script;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+/**
+ *
+ * @author Krystof Tulinger
+ */
+public class ScriptsTest {
+
+    private Scripts scripts;
+
+    @Before
+    public void setUp() {
+        scripts = new Scripts();
+    }
+
+    @Test
+    public void testInstance() {
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main1.js"", 0));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main2.js"", 0));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main3.js"", 0));
+
+        assertEquals(3, scripts.size());
+        scripts.sort();
+
+        assertEquals(scripts.get(0).getScript(), ""http://example.com/main1.js"");
+        assertEquals(scripts.get(0).getPriority(), 0);
+        assertEquals(scripts.get(1).getScript(), ""http://example.com/main2.js"");
+        assertEquals(scripts.get(1).getPriority(), 0);
+        assertEquals(scripts.get(2).getScript(), ""http://example.com/main3.js"");
+        assertEquals(scripts.get(2).getPriority(), 0);
+    }
+
+    @Test
+    public void testSorted() {
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main1.js"", 3));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main2.js"", 1));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main3.js"", 2));
+
+        assertEquals(3, scripts.size());
+
+        scripts.sort();
+
+        assertEquals(scripts.get(0).getScript(), ""http://example.com/main2.js"");
+        assertEquals(scripts.get(0).getPriority(), 1);
+        assertEquals(scripts.get(1).getScript(), ""http://example.com/main3.js"");
+        assertEquals(scripts.get(1).getPriority(), 2);
+        assertEquals(scripts.get(2).getScript(), ""http://example.com/main1.js"");
+        assertEquals(scripts.get(2).getPriority(), 3);
+    }
+
+    @Test
+    public void testContent() {
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main1.js"", 0));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main2.js"", 0));
+        scripts.addScript(new Scripts.FileScript(""http://example.com/main3.js"", 0));
+
+        assertEquals(3, scripts.size());
+        scripts.sort();
+
+        assertTrue(scripts.toHtml()
+                .contains(""<script type=\""text/javascript\""""
+                        + "" src=\""http://example.com/main1.js\""""
+                        + "" data-priority=\""0\""></script>""));
+        assertTrue(scripts.toHtml()
+                .contains(""<script type=\""text/javascript\""""
+                        + "" src=\""http://example.com/main2.js\""""
+                        + "" data-priority=\""0\""></script>""));
+        assertTrue(scripts.toHtml()
+                .contains(""<script type=\""text/javascript\""""
+                        + "" src=\""http://example.com/main3.js\""""
+                        + "" data-priority=\""0\""></script>""));
+    }
+
+    @Test
+    public void testLookup() {
+        scripts.addScript("""", ""utils"");
+        scripts.addScript("""", ""jquery"");
+        scripts.addScript("""", ""diff"");
+        scripts.addScript("""", ""jquery-tablesorter"");
+
+        assertEquals(4, scripts.size());
+        scripts.sort();
+
+        int prev = -1;
+        for (Script s : scripts) {
+            if (prev > s.getPriority()) {
+                fail(""The scripts must be sorted in ascending order by the priority, "" + prev + "" > "" + s.getPriority());
+            }
+            prev = s.getPriority();
+        }
+
+        for (Entry<String, Script> s : Scripts.SCRIPTS.entrySet()) {
+            if (!s.getKey().equals(""utils"")
+                    && !s.getKey().equals(""jquery"")
+                    && !s.getKey().equals(""jquery-tablesorter"")
+                    && !s.getKey().equals(""diff"")) {
+                continue;
+            }
+            assertTrue(scripts.toHtml() + "" must contain <script type=\""text/javascript\""""
+                    + "" src=\"""" + s.getValue().getScript() + ""\""""
+                    + "" data-priority=\"""" + s.getValue().getPriority() + ""\""></script>"", scripts.toHtml()
+                    .contains(""<script type=\""text/javascript\""""
+                            + "" src=\"""" + s.getValue().getScript() + ""\""""
+                            + "" data-priority=\"""" + s.getValue().getPriority() + ""\""></script>""));
+        }
+    }
+}",adding a test case,"""Added unit test for Scripts class""",Added test class ScriptsTest for Scripts functionality.,"""Adding ScriptsTest.java to test the Scripts class in org.opensolaris.opengrok.web package""

The diff shows that a new file ScriptsTest.java has been added to the test directory of the org.opensolaris.opengrok.web package. The file contains several tests for the Scripts class, including tests for adding and sorting scripts, as well as tests for generating HTML content from the scripts. The tests use JUnit assertions to verify the expected behavior of the Scripts class.","Added unit tests for Scripts class in ScriptsTest.java to verify script addition, sorting, HTML content, and lookup functionality."
"diff --git a/src/test/java/me/coley/recaf/DebugTest.java b/src/test/java/me/coley/recaf/DebugTest.java
index edb5f8aa..af361b04 100644
--- a/src/test/java/me/coley/recaf/DebugTest.java
+++ b/src/test/java/me/coley/recaf/DebugTest.java
@@ -21,6 +21,8 @@ import static org.junit.jupiter.api.Assertions.*;
  *
  * @author Matt
  */
+@Disabled
+// TODO: These tests are flaky and can fail intermittently
 public class DebugTest extends Base {
 	private static final long FAIL_TIMEOUT_SECONDS = 4;
 	private DebuggerResource resource;","Disable DebugTest , feature is on hold","""Disable DebugTest due to intermittent failures""","""Mark DebugTest as flaky and temporarily disable it""

Or, in a more conventional commit message format:

""Disable DebugTest due to flakiness and add TODO comment""

Or, if you want to follow the conventional commit message format:

""feat: disable DebugTest due to flakiness and add TODO comment""

However, the most conventional commit message would be:

""temporarily-disable-debug-test-due-to-flakiness""

This format follows the conventional commit message format which is:

""fix: <brief description of the commit>""
""feat: <brief description of the commit>""
""docs: <brief description of the commit>""
""style: <brief description of the commit>""
""refactor: <brief description of the commit>""
""perf: <brief description of the commit>""
""test: <brief description of the commit>""
""chore: <brief description of the commit>""
""temporarily-disable-debug-test-due-to-flakiness""","""Disabled DebugTest and added TODO comment about flaky tests""",Disable flaky DebugTest class in unit tests.
"diff --git a/awaitility-kotlin/src/main/kotlin/org/awaitility/kotlin/AwaitilityKt.kt b/awaitility-kotlin/src/main/kotlin/org/awaitility/kotlin/AwaitilityKt.kt
index f1555f0..ca3d7b2 100644
--- a/awaitility-kotlin/src/main/kotlin/org/awaitility/kotlin/AwaitilityKt.kt
+++ b/awaitility-kotlin/src/main/kotlin/org/awaitility/kotlin/AwaitilityKt.kt
@@ -5,7 +5,29 @@
  */
 package org.awaitility.kotlin
 
+import org.awaitility.Awaitility
+import org.awaitility.Duration
 import org.awaitility.core.ConditionFactory
+import org.awaitility.pollinterval.PollInterval
+import org.hamcrest.Matcher
+import java.util.concurrent.ExecutorService
+import java.util.concurrent.atomic.AtomicBoolean
+import kotlin.reflect.KClass
+
+/**
+ * This is typically the starting point of the Kotlin ""DSL"". Allows you to write `await` instead of `await()`. For example:
+ *
+ * ```
+ * await until { myRepository.count() == 2 }
+ * ```
+ * @since 3.1.2
+ */
+val await: ConditionFactory
+    /**
+     * @return A new [ConditionFactory] instance
+     * @see [Awaitility.await]
+     */
+    get() = Awaitility.await()
 
 /**
  * An intermediary data type that stores the [ConditionFactory] and [fn] for later use.
@@ -16,7 +38,7 @@ import org.awaitility.core.ConditionFactory
  * @param fn The function to call in order to extract the value used by the predicate
  * @see untilCallTo
  */
-data class AwaitilityKtUntilFunCondition<T> internal constructor(val factory: ConditionFactory, val fn: () -> T?)
+data class AwaitilityKtUntilFunCondition<T> internal constructor(internal val factory: ConditionFactory, internal val fn: () -> T?)
 
 /**
  * Infix function which is what allows us to write the predicate on right-hand side of [matches] without using a dot.
@@ -29,13 +51,192 @@ infix fun <T> AwaitilityKtUntilFunCondition<T>.matches(pred: (T?) -> Boolean) =
  * An extension function to `ConditionFactory` that allows you do write conditions such as:
  *
  * ```
- * await().untilCallTo { myRepository.count() } matches { count -> count == 1 }
+ * await untilCallTo { myRepository.count() } matches { count -> count == 1 }
  * ```
  *
- * Note that the reason why we can't name this function [untilCallTo] is because it clashes with
- * `org.awaitility.core.ConditionFactory#until(java.util.concurrent.Callable<java.lang.Boolean>)`.
+ * Note that [await] is a getter that needs to imported from `org.awaitility.kotlin`.
  *
  * @param fn A function that returns the value that will be evaluated by the predicate in [matches].
  * @since 3.1.1
  */
-fun <T> ConditionFactory.untilCallTo(fn: () -> T?) = AwaitilityKtUntilFunCondition(this, fn)
\ No newline at end of file
+infix fun <T> ConditionFactory.untilCallTo(fn: () -> T?) = AwaitilityKtUntilFunCondition(this, fn)
+
+/**
+ * An extension function to `ConditionFactory` that allows you do write conditions such as:
+ *
+ * ```
+ * await until { myRepository.count() == 1 }
+ * ```
+ *
+ * Note that [await] is a getter that needs to imported from `org.awaitility.kotlin`.
+ *
+ * @param fn The function to evaluate
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.until(fn: () -> Boolean) = until(fn)
+
+/**
+ * An extension function to `ConditionFactory` that allows you do write conditions such as:
+ *
+ * ```
+ * await withPollInterval ONE_HUNDRED_MILLISECONDS ignoreException IllegalArgumentException::class untilAsserted  {
+ *     assertThat(fakeRepository.value).isEqualTo(1)
+ *}
+ * ```
+ *
+ * I.e. you can use [untilAsserted] to integrate Awaitility with an assertion library of choice.
+ * Note that [await] is a getter that needs to imported from `org.awaitility.kotlin`
+ *
+ * @param fn A function that returns the value that will be evaluated by the predicate in [matches].
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.untilAsserted(fn: () -> Unit): Unit = untilAsserted(fn)
+
+/**
+ * Await at most `timeout` before throwing a timeout exception.
+ *
+ * @param duration the duration
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.atMost(duration: Duration): ConditionFactory = atMost(duration)
+
+/**
+ * Condition has to be evaluated not earlier than `timeout` before throwing a timeout exception.
+ *
+ * @param timeout the timeout
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.atLeast(timeout: Duration): ConditionFactory = atLeast(timeout)
+
+/**
+ * Start building a named await statement. This is useful is cases when you
+ * have several awaits in your test and you need to tell them apart. If a
+ * named await timeout's the <code>alias</code> will be displayed indicating
+ * which await statement that failed.
+ *
+ * @param alias the alias that will be shown if the await timeouts.
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.withAlias(alias: String): ConditionFactory = alias(alias)
+
+/**
+ * Specify the delay that will be used before Awaitility starts polling for
+ * the result the first time. If you don't specify a poll delay explicitly
+ * it'll be the same as the poll interval.
+ *
+ * @param pollDelay the poll delay
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.withPollDelay(pollDelay: Duration): ConditionFactory = pollDelay(pollDelay)
+
+/**
+ * Specify the polling interval Awaitility will use for this await
+ * statement. This means the frequency in which the condition is checked for
+ * completion.
+ *
+ * @param pollInterval the poll interval
+ * @return the condition factory
+ * @since 3.1.2
+ * @see [ConditionFactory.pollInterval]
+ */
+infix fun ConditionFactory.withPollInterval(pollInterval: Duration): ConditionFactory = pollInterval(pollInterval)
+
+/**
+ * Specify the polling interval Awaitility will use for this await
+ * statement. For example [org.awaitility.pollinterval.FibonacciPollInterval.fibonacci].
+ *
+ * @param pollInterval the poll interval
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.withPollInterval(pollInterval: PollInterval): ConditionFactory = pollInterval(pollInterval)
+
+/**
+ * Instruct Awaitility to ignore exceptions instance of the supplied exceptionType type.
+ * Exceptions will be treated as evaluating to <code>false</code>.
+ * This is useful in situations where the evaluated conditions may temporarily throw exceptions.
+ *
+ * @param exceptionType The exception type (hierarchy) to ignore
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.ignoreExceptionsInstanceOf(exceptionType: KClass<out Throwable>): ConditionFactory = ignoreExceptionsInstanceOf(exceptionType.javaObjectType)
+
+/**
+ * Instruct Awaitility to ignore a specific exception and <i>no</i> subclasses of this exception.
+ * Exceptions will be treated as evaluating to <code>false</code>.
+ * This is useful in situations where the evaluated conditions may temporarily throw exceptions.
+ *
+ * @param exceptionType The exception type to ignore
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.ignoreException(exceptionType: KClass<out Throwable>): ConditionFactory = ignoreException(exceptionType.javaObjectType)
+
+/**
+ * Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied Hamcrest matcher.
+ * Exceptions will be treated as evaluating to `false`. This is useful in situations where the evaluated
+ * conditions may temporarily throw exceptions.
+ *
+ * @param matcher The Hamcrest matcher
+ * @return the condition factory.
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.ignoreExceptionsMatching(matcher: Matcher<in Throwable>): ConditionFactory = ignoreExceptionsMatching(matcher)
+
+/**
+ * Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied Hamcrest matcher.
+ * Exceptions will be treated as evaluating to `false`. This is useful in situations where the evaluated
+ * conditions may temporarily throw exceptions.
+ *
+ * @param matcher The predicate
+ * @return the condition factory.
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.ignoreExceptionsMatching(matcher: (Throwable) -> Boolean): ConditionFactory = ignoreExceptionsMatching(matcher)
+
+/**
+ * Specify the executor service whose threads will be used to evaluate the poll condition in Awaitility.
+ * Note that the executor service must be shutdown manually!
+ *
+ * This is an advanced feature and it should only be used sparingly.
+ *
+ * @param executorService The executor service that Awaitility will use when polling condition evaluations
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.pollExecutorService(executorService: ExecutorService): ConditionFactory = pollExecutorService(executorService)
+
+/**
+ * Specify a thread supplier whose thread will be used to evaluate the poll condition in Awaitility.
+ * The supplier will be called only once and the thread it returns will be reused during all condition evaluations.
+ * This is an advanced feature and it should only be used sparingly.
+ *
+ * @param threadSupplier A supplier of the thread that Awaitility will use when polling
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.pollThread(threadSupplier: (Runnable) -> Thread): ConditionFactory = pollThread(threadSupplier)
+
+/**
+ * Await until a Atomic boolean becomes true.
+ *
+ * @param atomicBoolean the atomic variable
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.untilTrue(atomicBoolean: AtomicBoolean) = untilTrue(atomicBoolean)
+
+/**
+ * Await until a Atomic boolean becomes false.
+ *
+ * @param atomicBoolean the atomic variable
+ * @return the condition factory
+ * @since 3.1.2
+ */
+infix fun ConditionFactory.untilFalse(atomicBoolean: AtomicBoolean) = untilFalse(atomicBoolean)
\ No newline at end of file
diff --git a/awaitility-kotlin/src/test/kotlin/org/awaitility/kotlin/KotlinTest.kt b/awaitility-kotlin/src/test/kotlin/org/awaitility/kotlin/KotlinTest.kt
index 9cc77c1..91cf997 100644
--- a/awaitility-kotlin/src/test/kotlin/org/awaitility/kotlin/KotlinTest.kt
+++ b/awaitility-kotlin/src/test/kotlin/org/awaitility/kotlin/KotlinTest.kt
@@ -16,19 +16,21 @@
 
 package org.awaitility.kotlin
 
-import org.assertj.core.api.Assertions
 import org.assertj.core.api.Assertions.assertThat
 import org.assertj.core.api.Assertions.catchThrowable
 import org.awaitility.Awaitility.await
+import org.awaitility.Duration.*
 import org.awaitility.classes.Asynch
 import org.awaitility.classes.FakeRepository
 import org.awaitility.classes.FakeRepositoryImpl
 import org.awaitility.core.ConditionTimeoutException
+import org.awaitility.pollinterval.FibonacciPollInterval.fibonacci
 import org.hamcrest.Matchers.*
 import org.junit.Before
 import org.junit.Rule
 import org.junit.Test
 import org.junit.rules.ExpectedException
+import java.util.concurrent.TimeUnit.MILLISECONDS
 import java.util.concurrent.TimeUnit.SECONDS
 import kotlin.test.assertEquals
 
@@ -84,12 +86,39 @@ class KotlinTest {
         await().untilCallTo { fakeRepository.value } matches { it == 1 }
     }
 
+    @Test
+    fun simpleAwaitUntilWithKotlin() {
+        Asynch(fakeRepository).perform()
+
+        await until { fakeRepository.value == 1 }
+    }
+
+    @Test
+    fun usingLotsOfMethodsInDsl() {
+        Asynch(fakeRepository).perform()
+
+        await withAlias ""Kotlin Test"" ignoreExceptionsInstanceOf
+                IllegalArgumentException::class withPollDelay ONE_HUNDRED_MILLISECONDS withPollInterval
+                fibonacci().with().offset(1).and().timeUnit(MILLISECONDS) atLeast TWO_HUNDRED_MILLISECONDS atMost
+                ONE_MINUTE untilCallTo { fakeRepository.value } matches { it == 1 }
+
+    }
+
+    @Test
+    fun untilAsserted() {
+        Asynch(fakeRepository).perform()
+
+        await withPollInterval ONE_HUNDRED_MILLISECONDS ignoreException IllegalArgumentException::class untilAsserted  {
+            assertThat(fakeRepository.value).isEqualTo(1)
+        }
+    }
+
     @Test
     fun untilCallToExtensionFnHasADecentErrorMessage() {
         Asynch(fakeRepository).perform()
 
         val throwable = catchThrowable {
-            await().atMost(1, SECONDS).untilCallTo { fakeRepository.value } matches { it == 2 }
+            await() atMost (ONE_SECOND) untilCallTo { fakeRepository.value } matches { it == 2 }
         }
 
         assertThat(throwable).isExactlyInstanceOf(ConditionTimeoutException::class.java).hasMessageEndingWith(""expected the predicate to return <true> but it returned <false> for input of <1> within 1 seconds."")
diff --git a/changelog.txt b/changelog.txt
index 59ac1a1..847bade 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -2,6 +2,20 @@ Changelog next version
 ----------------------
 * Added ""alias"" method to awaitility which allows one to set the alias using a more english-like DSL:
     await().with().alias(""my alias""). ..
+* Added several new Kotlin extension methods. For example you can now do:
+
+    await withPollInterval ONE_HUNDRED_MILLISECONDS ignoreException IllegalArgumentException::class untilAsserted  {
+        assertThat(fakeRepository.value).isEqualTo(1)
+    }
+
+  or:
+
+     await withAlias ""Kotlin Test"" ignoreExceptionsInstanceOf
+            IllegalArgumentException::class withPollDelay ONE_HUNDRED_MILLISECONDS withPollInterval
+            fibonacci().with().offset(1).and().timeUnit(MILLISECONDS) atLeast TWO_HUNDRED_MILLISECONDS atMost
+            ONE_MINUTE untilCallTo { fakeRepository.value } matches { it == 1 }
+
+  All extension functions can be imported from the ""org.awaitility.kotlin"" package (e.g. 'import org.awaitility.kotlin.*')
 
 Changelog 3.1.1 (2018-06-29)
 ----------------------------",Added several new Kotlin extension methods,"""Added Kotlin DSL support for Awaitility""","Added several new Kotlin extension methods to Awaitility, including `until`, `untilAsserted`, `atMost`, `atLeast`, `withAlias`, `withPollDelay`, `withPollInterval`, `ignoreExceptionsInstanceOf`, `ignoreException`, `ignoreExceptionsMatching`, `pollExecutorService`, `pollThread`, `untilTrue`, and `untilFalse`.","The commit message should be:

Add new Kotlin DSL extension functions
-------------------------------------

* Add a new top-level `await` getter that returns a new `ConditionFactory` instance. This allows you to write `await` instead of `await()` in your Kotlin code.
* Add several new Kotlin extension functions to the `ConditionFactory` class, allowing you to use a more English-like DSL for building your await statements. For example, you can now write:
```
await withPollInterval ONE_HUNDRED_MILLISECONDS ignoreException IllegalArgumentException::class untilAsserted  {
    assertThat(fakeRepository.value).isEqualTo(1)
}
```
or:
```
await withAlias ""Kotlin Test"" ignoreExceptionsInstanceOf
        IllegalArgumentException::class withPollDelay ONE_HUNDRED_MILLISECONDS withPollInterval
        fibonacci().with().offset(1).and().timeUnit(MILLISECONDS) atLeast TWO_HUNDRED_MILLISECONDS atMost
        ONE_MINUTE untilCallTo { fakeRepository.value } matches { it == 1 }
```
All extension functions can be imported from the ""org.awaitility.kotlin"" package (e.g. 'import org.awaitility.kotlin.\*').

Add new Kotlin tests
--------------------

* Add new tests for the new Kotlin DSL extension functions.

Refactor existing Kotlin tests
-------------------------------

* Refactor existing Kotlin tests to use the new `await` getter and extension functions.

Fix typo
--------

* Fix a typo in the `AwaitilityKtUntilFunCondition` class.","Added Kotlin extension methods for Awaitility, enabling DSL usage such as custom poll intervals, exception handling, and condition assertions."
"diff --git a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HeadsetHandler/HeadSetReceiver.java b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HeadsetHandler/HeadSetReceiver.java
new file mode 100644
index 0000000..0bff575
--- /dev/null
+++ b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HeadsetHandler/HeadSetReceiver.java
@@ -0,0 +1,36 @@
+package com.sdsmdg.harjot.MusicDNA.HeadsetHandler;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
+/**
+ * Created by Harjot on 06-Oct-16.
+ */
+public class HeadSetReceiver extends BroadcastReceiver {
+
+    onHeadsetRemovedListener mCallback;
+
+    public interface onHeadsetRemovedListener {
+        public void onHeadsetRemoved();
+    }
+
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+
+        mCallback = (onHeadsetRemovedListener) context;
+
+        if (intent.getAction().equals(Intent.ACTION_HEADSET_PLUG)) {
+            int state = intent.getIntExtra(""state"", -1);
+            switch (state) {
+                case 0:
+                    mCallback.onHeadsetRemoved();
+                    break;
+                case 1:
+                    break;
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HomeActivity.java b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HomeActivity.java
index ba4a0e4..8f4af2a 100644
--- a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HomeActivity.java
+++ b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/HomeActivity.java
@@ -8,6 +8,7 @@ import android.app.PendingIntent;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
@@ -73,6 +74,7 @@ import android.widget.Toast;
 import com.github.amlcurran.showcaseview.ShowcaseView;
 import com.github.amlcurran.showcaseview.targets.ViewTarget;
 import com.google.gson.Gson;
+import com.sdsmdg.harjot.MusicDNA.HeadsetHandler.HeadSetReceiver;
 import com.sdsmdg.harjot.MusicDNA.Interfaces.StreamService;
 import com.sdsmdg.harjot.MusicDNA.LocalMusicFragments.AlbumFragment;
 import com.sdsmdg.harjot.MusicDNA.LocalMusicFragments.ArtistFragment;
@@ -158,7 +160,8 @@ public class HomeActivity extends AppCompatActivity
         MediaPlayerService.onCallbackListener,
         SettingsFragment.onColorChangedListener,
         SettingsFragment.onAlbumArtBackgroundToggled,
-        AddToPlaylistFragment.newPlaylistListener {
+        AddToPlaylistFragment.newPlaylistListener,
+        HeadSetReceiver.onHeadsetRemovedListener {
 
 
     ScrollView container;
@@ -314,6 +317,8 @@ public class HomeActivity extends AppCompatActivity
 
     static byte[] mBytes;
 
+    HeadSetReceiver headSetReceiver;
+
     ShowcaseView showCase;
 
     View playerContainer;
@@ -634,6 +639,8 @@ public class HomeActivity extends AppCompatActivity
 
         setContentView(R.layout.activity_home);
 
+        headSetReceiver = new HeadSetReceiver();
+
         PackageInfo pInfo = null;
         try {
             pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
@@ -1006,6 +1013,7 @@ public class HomeActivity extends AppCompatActivity
 
     }
 
+
     private void getSavedData() {
         try {
             Gson gson = new Gson();
@@ -1281,6 +1289,13 @@ public class HomeActivity extends AppCompatActivity
         }
     }
 
+    @Override
+    protected void onResume() {
+        IntentFilter filter = new IntentFilter(Intent.ACTION_HEADSET_PLUG);
+        registerReceiver(headSetReceiver, filter);
+        super.onResume();
+    }
+
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         // Inflate the menu; this adds items to the action bar if it is present.
@@ -1586,7 +1601,7 @@ public class HomeActivity extends AppCompatActivity
             Window window = ((Activity) (ctx)).getWindow();
             window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
             window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-            window.setStatusBarColor(themeColor);
+            window.setStatusBarColor(getDarkColor(themeColor));
         }
 
         isPlayerVisible = false;
@@ -1844,18 +1859,22 @@ public class HomeActivity extends AppCompatActivity
 
     public static void updatePoints3() {
 
-        PlayerFragment.mVisualizerView.outerRadius = (float) (Math.min(PlayerFragment.mVisualizerView.width, PlayerFragment.mVisualizerView.height) * 0.42);
-        PlayerFragment.mVisualizerView.normalizedPosition = ((float) (PlayerFragment.mMediaPlayer.getCurrentPosition()) / (float) (PlayerFragment.durationInMilliSec));
-        if (mBytes == null) {
-            return;
+        try {
+            PlayerFragment.mVisualizerView.outerRadius = (float) (Math.min(PlayerFragment.mVisualizerView.width, PlayerFragment.mVisualizerView.height) * 0.42);
+            PlayerFragment.mVisualizerView.normalizedPosition = ((float) (PlayerFragment.mMediaPlayer.getCurrentPosition()) / (float) (PlayerFragment.durationInMilliSec));
+            if (mBytes == null) {
+                return;
+            }
+            PlayerFragment.mVisualizerView.angle = (float) (Math.PI - PlayerFragment.mVisualizerView.normalizedPosition * PlayerFragment.mVisualizerView.TAU);
+            PlayerFragment.mVisualizerView.color = 0;
+            PlayerFragment.mVisualizerView.lnDataDistance = 0;
+            PlayerFragment.mVisualizerView.distance = 0;
+            PlayerFragment.mVisualizerView.size = 0;
+            PlayerFragment.mVisualizerView.volume = 0;
+            PlayerFragment.mVisualizerView.power = 0;
+        } catch (Exception e) {
+
         }
-        PlayerFragment.mVisualizerView.angle = (float) (Math.PI - PlayerFragment.mVisualizerView.normalizedPosition * PlayerFragment.mVisualizerView.TAU);
-        PlayerFragment.mVisualizerView.color = 0;
-        PlayerFragment.mVisualizerView.lnDataDistance = 0;
-        PlayerFragment.mVisualizerView.distance = 0;
-        PlayerFragment.mVisualizerView.size = 0;
-        PlayerFragment.mVisualizerView.volume = 0;
-        PlayerFragment.mVisualizerView.power = 0;
 
         float x, y;
 
@@ -1957,18 +1976,22 @@ public class HomeActivity extends AppCompatActivity
 
     public static void updatePoints() {
 
-        PlayerFragment.mVisualizerView.outerRadius = (float) (Math.min(PlayerFragment.mVisualizerView.width, PlayerFragment.mVisualizerView.height) * 0.42);
-        PlayerFragment.mVisualizerView.normalizedPosition = ((float) (PlayerFragment.mMediaPlayer.getCurrentPosition()) / (float) (PlayerFragment.durationInMilliSec));
-        if (mBytes == null) {
-            return;
+        try {
+            PlayerFragment.mVisualizerView.outerRadius = (float) (Math.min(PlayerFragment.mVisualizerView.width, PlayerFragment.mVisualizerView.height) * 0.42);
+            PlayerFragment.mVisualizerView.normalizedPosition = ((float) (PlayerFragment.mMediaPlayer.getCurrentPosition()) / (float) (PlayerFragment.durationInMilliSec));
+            if (mBytes == null) {
+                return;
+            }
+            PlayerFragment.mVisualizerView.angle = (float) (Math.PI - PlayerFragment.mVisualizerView.normalizedPosition * PlayerFragment.mVisualizerView.TAU);
+            PlayerFragment.mVisualizerView.color = 0;
+            PlayerFragment.mVisualizerView.lnDataDistance = 0;
+            PlayerFragment.mVisualizerView.distance = 0;
+            PlayerFragment.mVisualizerView.size = 0;
+            PlayerFragment.mVisualizerView.volume = 0;
+            PlayerFragment.mVisualizerView.power = 0;
+        } catch (Exception e) {
+
         }
-        PlayerFragment.mVisualizerView.angle = (float) (Math.PI - PlayerFragment.mVisualizerView.normalizedPosition * PlayerFragment.mVisualizerView.TAU);
-        PlayerFragment.mVisualizerView.color = 0;
-        PlayerFragment.mVisualizerView.lnDataDistance = 0;
-        PlayerFragment.mVisualizerView.distance = 0;
-        PlayerFragment.mVisualizerView.size = 0;
-        PlayerFragment.mVisualizerView.volume = 0;
-        PlayerFragment.mVisualizerView.power = 0;
 
         float x, y;
 
@@ -2619,6 +2642,19 @@ public class HomeActivity extends AppCompatActivity
         }
     }
 
+    @Override
+    public void onHeadsetRemoved() {
+        PlayerFragment pFrag = getPlayerFragment();
+        if (pFrag != null) {
+            if (pFrag.mMediaPlayer != null && pFrag.mMediaPlayer.isPlaying()) {
+                if (!pFrag.pauseClicked) {
+                    pFrag.pauseClicked = true;
+                }
+                pFrag.togglePlayPause();
+            }
+        }
+    }
+
     public static class MyAsyncTask extends AsyncTask<Void, Void, Void> {
 
         @Override
@@ -2643,6 +2679,8 @@ public class HomeActivity extends AppCompatActivity
     protected void onPause() {
         super.onPause();
 
+        unregisterReceiver(headSetReceiver);
+
         new SaveSettings().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
         new SaveData().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
         new SaveQueue().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
@@ -2925,7 +2963,7 @@ public class HomeActivity extends AppCompatActivity
 
     public void showFragment(String type) {
 
-        if (!type.equals(""viewAlbum"") && !type.equals(""folderContent"") && !type.equals(""viewArtist""))
+        if (!type.equals(""viewAlbum"") && !type.equals(""folderContent"") && !type.equals(""viewArtist"") && !type.equals(""playlist"") && !type.equals(""newPlaylist""))
             hideAllFrags();
 
         if (!searchView.isIconified()) {
@@ -2988,7 +3026,8 @@ public class HomeActivity extends AppCompatActivity
         } else if (type.equals(""playlist"") && !isPlaylistVisible) {
             setTitle(tempPlaylist.getPlaylistName());
             setUpFragmentToolbar(themeColor, (String) getTitle());
-            switchToolbar(toolbar, fragmentToolbar, ""left"");
+            if (!isAllPlaylistVisible)
+                switchToolbar(toolbar, fragmentToolbar, ""left"");
             isPlaylistVisible = true;
             android.support.v4.app.FragmentManager fm = getSupportFragmentManager();
             ViewPlaylistFragment newFragment = (ViewPlaylistFragment) fm.findFragmentByTag(""playlist"");
@@ -3039,7 +3078,8 @@ public class HomeActivity extends AppCompatActivity
         } else if (type.equals(""newPlaylist"") && !isNewPlaylistVisible) {
             setTitle(""Add to Playlist"");
             setUpFragmentToolbar(themeColor, (String) getTitle());
-            switchToolbar(toolbar, fragmentToolbar, ""left"");
+            if (!isAllPlaylistVisible)
+                switchToolbar(toolbar, fragmentToolbar, ""left"");
             navigationView.setCheckedItem(R.id.nav_playlists);
             isNewPlaylistVisible = true;
             android.support.v4.app.FragmentManager fm = getSupportFragmentManager();
@@ -3674,7 +3714,7 @@ public class HomeActivity extends AppCompatActivity
                         Window window = ((Activity) ctx).getWindow();
                         window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
                         window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-                        window.setStatusBarColor(themeColor);
+                        window.setStatusBarColor(getDarkColor(themeColor));
                     }
 
                     if (allPlaylists == null) {
@@ -4521,4 +4561,17 @@ public class HomeActivity extends AppCompatActivity
         Pair<String, String> pair = Pair.create(minS, secS);
         return pair;
     }
+
+    public int getDarkColor(int color) {
+        int darkColor = 0;
+
+        int r = (int) (Color.red(color) * 0.823);
+        int g = (int) (Color.green(color) * 0.823);
+        int b = (int) (Color.green(color) * 0.823);
+
+        darkColor = Color.rgb(r, g, b);
+
+        return darkColor;
+    }
+
 }
diff --git a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/NotificationManager/MediaPlayerService.java b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/NotificationManager/MediaPlayerService.java
index c174e0e..c96d1c0 100644
--- a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/NotificationManager/MediaPlayerService.java
+++ b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/NotificationManager/MediaPlayerService.java
@@ -281,7 +281,7 @@ public class MediaPlayerService extends Service implements PlayerFragment.onPlay
                     pFrag.isStart = false;
                     buildNotification(generateAction(android.R.drawable.ic_media_pause, ""Pause"", Constants.ACTION_PAUSE));
                 } catch (Exception e) {
-                    notificationManager.cancel(1);
+
                 }
             }
 
diff --git a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/PlayerFragment.java b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/PlayerFragment.java
index 8d704cc..b3163fb 100644
--- a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/PlayerFragment.java
+++ b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/PlayerFragment.java
@@ -157,26 +157,30 @@ public class PlayerFragment extends Fragment implements
         }
 
         if (HomeActivity.isEqualizerEnabled) {
-            bassBoost = new BassBoost(0, mMediaPlayer.getAudioSessionId());
-            bassBoost.setEnabled(true);
-            BassBoost.Settings bassBoostSettingTemp = bassBoost.getProperties();
-            BassBoost.Settings bassBoostSetting = new BassBoost.Settings(bassBoostSettingTemp.toString());
-            if (HomeActivity.bassStrength == -1) {
-                bassBoostSetting.strength = (1000 / 19);
-            } else {
-                bassBoostSetting.strength = HomeActivity.bassStrength;
-            }
-            bassBoost.setProperties(bassBoostSetting);
-            mMediaPlayer.setAuxEffectSendLevel(1.0f);
+            try {
+                bassBoost = new BassBoost(0, mMediaPlayer.getAudioSessionId());
+                bassBoost.setEnabled(true);
+                BassBoost.Settings bassBoostSettingTemp = bassBoost.getProperties();
+                BassBoost.Settings bassBoostSetting = new BassBoost.Settings(bassBoostSettingTemp.toString());
+                if (HomeActivity.bassStrength == -1) {
+                    bassBoostSetting.strength = (1000 / 19);
+                } else {
+                    bassBoostSetting.strength = HomeActivity.bassStrength;
+                }
+                bassBoost.setProperties(bassBoostSetting);
+                mMediaPlayer.setAuxEffectSendLevel(1.0f);
+
+                presetReverb = new PresetReverb(0, mMediaPlayer.getAudioSessionId());
+                if (HomeActivity.reverbPreset == -1) {
+                    presetReverb.setPreset(PresetReverb.PRESET_NONE);
+                } else {
+                    presetReverb.setPreset(HomeActivity.reverbPreset);
+                }
+                presetReverb.setEnabled(true);
+                mMediaPlayer.setAuxEffectSendLevel(1.0f);
+            } catch (Exception e) {
 
-            presetReverb = new PresetReverb(0, mMediaPlayer.getAudioSessionId());
-            if (HomeActivity.reverbPreset == -1) {
-                presetReverb.setPreset(PresetReverb.PRESET_NONE);
-            } else {
-                presetReverb.setPreset(HomeActivity.reverbPreset);
             }
-            presetReverb.setEnabled(true);
-            mMediaPlayer.setAuxEffectSendLevel(1.0f);
         }
 
 
@@ -371,7 +375,7 @@ public class PlayerFragment extends Fragment implements
 
         currentAlbumArtHolder = (ImageView) view.findViewById(R.id.current_album_art_holder);
 
-        if(HomeActivity.settings.isAlbumArtBackgroundEnabled() && (currentAlbumArtHolder.getVisibility() == View.GONE || currentAlbumArtHolder.getVisibility() == View.INVISIBLE)){
+        if (HomeActivity.settings != null && HomeActivity.settings.isAlbumArtBackgroundEnabled() && (currentAlbumArtHolder.getVisibility() == View.GONE || currentAlbumArtHolder.getVisibility() == View.INVISIBLE)) {
             currentAlbumArtHolder.setVisibility(View.VISIBLE);
         }
 
@@ -704,8 +708,12 @@ public class PlayerFragment extends Fragment implements
             } catch (Exception e) {
 
             }
-            HomeActivity.spTitleAB.setText(localTrack.getTitle());
-            selected_track_title.setText(localTrack.getTitle());
+            try {
+                HomeActivity.spTitleAB.setText(localTrack.getTitle());
+                selected_track_title.setText(localTrack.getTitle());
+            } catch (Exception e) {
+
+            }
         }
 
         temp = getTime(durationInMilliSec);
@@ -1062,12 +1070,24 @@ public class PlayerFragment extends Fragment implements
             HomeActivity.spTitleAB.setText(track.getTitle());
             selected_track_title.setText(track.getTitle());
         } else {
-            durationInMilliSec = (int) localTrack.getDuration();
-            imgLoader.DisplayImage(localTrack.getPath(), HomeActivity.spImgAB);
-            imgLoader.DisplayImage(localTrack.getPath(), currentAlbumArtHolder);
-            imgLoader.DisplayImage(localTrack.getPath(), selected_track_image);
-            HomeActivity.spTitleAB.setText(localTrack.getTitle());
-            selected_track_title.setText(localTrack.getTitle());
+            try {
+                durationInMilliSec = (int) localTrack.getDuration();
+            } catch (Exception e) {
+
+            }
+            try {
+                imgLoader.DisplayImage(localTrack.getPath(), HomeActivity.spImgAB);
+                imgLoader.DisplayImage(localTrack.getPath(), selected_track_image);
+                imgLoader.DisplayImage(localTrack.getPath(), currentAlbumArtHolder);
+            } catch (Exception e) {
+
+            }
+            try {
+                HomeActivity.spTitleAB.setText(localTrack.getTitle());
+                selected_track_title.setText(localTrack.getTitle());
+            } catch (Exception e) {
+
+            }
         }
 
         temp = getTime(durationInMilliSec);
diff --git a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/SettingsFragment.java b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/SettingsFragment.java
index 29f10ea..3d8bbc8 100644
--- a/app/src/main/java/com/sdsmdg/harjot/MusicDNA/SettingsFragment.java
+++ b/app/src/main/java/com/sdsmdg/harjot/MusicDNA/SettingsFragment.java
@@ -147,7 +147,7 @@ public class SettingsFragment extends Fragment {
                                     Window window = ((Activity) (getContext())).getWindow();
                                     window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
                                     window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-                                    window.setStatusBarColor(color);
+                                    window.setStatusBarColor(getDarkColor(color));
                                 }
                             }
                         })
@@ -210,4 +210,16 @@ public class SettingsFragment extends Fragment {
         RefWatcher refWatcher = MusicDNAApplication.getRefWatcher(getContext());
         refWatcher.watch(this);
     }
+
+    public int getDarkColor(int color) {
+        int darkColor = 0;
+
+        int r = (int) (Color.red(color) * 0.823);
+        int g = (int) (Color.green(color) * 0.823);
+        int b = (int) (Color.green(color) * 0.823);
+
+        darkColor = Color.rgb(r, g, b);
+
+        return darkColor;
+    }
 }
diff --git a/app/src/main/res/layout/app_bar_home.xml b/app/src/main/res/layout/app_bar_home.xml
index 7177537..e3322a9 100644
--- a/app/src/main/res/layout/app_bar_home.xml
+++ b/app/src/main/res/layout/app_bar_home.xml
@@ -138,8 +138,10 @@
 
                     <ImageView
                         android:id=""@+id/queue_toolbar_back_button_img""
-                        android:layout_width=""24dp""
-                        android:layout_height=""48dp""
+                        android:layout_width=""50dp""
+                        android:layout_height=""50dp""
+                        android:layout_marginLeft=""-11dp""
+                        android:padding=""12dp""
                         android:layout_centerVertical=""true""
                         android:background=""?attr/selectableItemBackgroundBorderless""
         ","Added headset unplugged listener , fixed minor bug and UI changes","""Added HeadsetReceiver to handle headset plug/unplug events and pause/play music accordingly""","Added headset detection and improved audio effects

This commit message summarizes the main changes made in the code, which include adding headset detection and improving audio effects.","""Added HeadSetReceiver class and implemented onHeadsetRemovedListener interface in HomeActivity""

The changes include the addition of a new class called HeadSetReceiver which extends BroadcastReceiver and implements an interface called onHeadsetRemovedListener. The onReceive method of the HeadSetReceiver class checks if the action of the received intent is ACTION\_HEADSET\_PLUG and if so, it gets the state of the headset and calls the onHeadsetRemoved method of the onHeadsetRemovedListener interface if the state is 0 (headset removed).

The HomeActivity class now implements the onHeadsetRemovedListener interface and overrides the onHeadsetRemoved method. This method is called when the headset is removed and it sets the isHeadsetPluggedIn variable to false.

Additionally, the onResume method of the HomeActivity class registers the HeadSetReceiver with an IntentFilter for ACTION\_HEADSET\_PLUG and the onPause method unregisters the receiver.

Finally, the import statements for BroadcastReceiver, Context, Intent, Log, and the onHeadsetRemovedListener interface were added to the HeadSetReceiver class, and the import statement for IntentFilter was added to the HomeActivity class.","""Add headset receiver functionality to pause music on headset removal; fix exceptions and UI inconsistencies; enhance status bar color handling."""
"diff --git a/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpHeaderNames.java b/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpHeaderNames.java
index cdd665d8..f50b1946 100644
--- a/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpHeaderNames.java
+++ b/zuul-core/src/main/java/com/netflix/zuul/message/http/HttpHeaderNames.java
@@ -87,6 +87,7 @@ public class HttpHeaderNames
     public static final HeaderName ACCESS_CONTROL_ALLOW_CREDENTIALS = HEADER_NAME_CACHE.get(""Access-Control-Allow-Credentials"");
     public static final HeaderName ACCESS_CONTROL_ALLOW_HEADERS = HEADER_NAME_CACHE.get(""Access-Control-Allow-Headers"");
     public static final HeaderName ACCESS_CONTROL_ALLOW_METHODS = HEADER_NAME_CACHE.get(""Access-Control-Allow-Methods"");
+    public static final HeaderName ACCESS_CONTROL_REQUEST_HEADERS = HEADER_NAME_CACHE.get(""Access-Control-Request-Headers"");
     public static final HeaderName STRICT_TRANSPORT_SECURITY = HEADER_NAME_CACHE.get(""Strict-Transport-Security"");
     public static final HeaderName LINK = HEADER_NAME_CACHE.get(""Link"");
 ",Add Access - Control - Request - Headers to HeaderNames,"""Added ACCESS_CONTROL_REQUEST_HEADERS to HttpHeaderNames""",Added ACCESS_CONTROL_REQUEST_HEADERS to HttpHeaderNames.,"""Added ACCESS_CONTROL_REQUEST_HEADERS constant to HttpHeaderNames class in Zuul core""",Added ACCESS_CONTROL_REQUEST_HEADERS to the HttpHeaderNames class for handling Access-Control-Request-Headers in HTTP requests.
"diff --git a/zipkin-ui/index.ejs b/zipkin-ui/index.ejs
index 601fe4164..1011261c3 100644
--- a/zipkin-ui/index.ejs
+++ b/zipkin-ui/index.ejs
@@ -13,5 +13,19 @@
     <title><%= htmlWebpackPlugin.options.title %></title>
   </head>
   <body>
+
+    <!-- we include a reduced header on page load, as this makes the page load feel much smoother -->
+
+    <div class='navbar navbar-inverse' role='navigation'>
+      <div class='container'>
+        <div class='navbar-header'>
+          <a class='navbar-brand' href='#'>
+            Zipkin<span class='muted' style='font-size: .75em; padding-left: 10px;' data-i18n=""nav.inves"">Investigate system behavior</span>
+          </a>
+        </div>
+        </div><!--/.nav-collapse -->
+      </div>
+    </div>
+
   </body>
 </html>",include minimal header on page load ( <issue_id> ) .,"""Added reduced header to Zipkin UI for smoother page load""","""Added reduced header for smoother page load experience""","""Added reduced header to Zipkin UI for smoother page load""

This commit adds a new section of HTML code to the `index.ejs` file in the Zipkin UI directory. The added code includes a `div` element with the classes `navbar` and `navbar-inverse`, which creates a navigation bar with an inverted color scheme. Within this navigation bar, there is a container `div` that includes a header with a link to the Zipkin homepage and a tagline for the Zipkin project.

The purpose of this commit appears to be to add a reduced header to the Zipkin UI that will be displayed on page load. This is intended to make the page load feel smoother. The commit message should reflect this change.",Added a reduced header for smoother page load in Zipkin UI.
"diff --git a/vavr/src/main/java/io/vavr/concurrent/Future.java b/vavr/src/main/java/io/vavr/concurrent/Future.java
index 4e954fd08..56ed7c3ab 100644
--- a/vavr/src/main/java/io/vavr/concurrent/Future.java
+++ b/vavr/src/main/java/io/vavr/concurrent/Future.java
@@ -483,7 +483,7 @@ public interface Future<T> extends Value<T> {
         if (!futures.iterator().hasNext()) {
             throw new NoSuchElementException(""Future.reduce on empty futures"");
         } else {
-            return Future.sequence(futures).map(seq -> seq.reduceLeft(f));
+            return Future.<T> sequence(futures).map(seq -> seq.reduceLeft(f));
         }
     }
 ",added type witness to make make GWT compiler happy ( <issue_id> ),"""Fix Future.reduce on empty futures by adding explicit type parameter to Future.sequence""","""Add type parameter to Future.sequence call in reduce method""","""Added explicit type argument to Future.sequence method call in Future.reduce""",Add type hint to Future.sequence in reduce method to fix type inference issue.
"diff --git a/slobrok/src/vespa/slobrok/server/exchange_manager.cpp b/slobrok/src/vespa/slobrok/server/exchange_manager.cpp
index 9b2f0fd5a72..e941889ffa3 100644
--- a/slobrok/src/vespa/slobrok/server/exchange_manager.cpp
+++ b/slobrok/src/vespa/slobrok/server/exchange_manager.cpp
@@ -175,11 +175,9 @@ ExchangeManager::WorkPackage::WorkPackage(op_type op,
     : _work(),
       _doneCnt(0),
       _numDenied(0),
-      _donehandler(std::move(script)),
+      _script(std::move(script)),
       _exchanger(exchanger),
-      _optype(op),
-      _name(_donehandler.name()),
-      _spec(_donehandler.spec())
+      _optype(op)
 {
 }
 
@@ -196,9 +194,9 @@ ExchangeManager::WorkPackage::doneItem(bool denied)
         (int)_doneCnt, (int)_work.size(), (int)_numDenied);
     if (_doneCnt == _work.size()) {
         if (_numDenied > 0) {
-            _donehandler.doneHandler(OkState(_numDenied, ""denied by remote""));
+            _script.doneHandler(OkState(_numDenied, ""denied by remote""));
         } else {
-            _donehandler.doneHandler(OkState());
+            _script.doneHandler(OkState());
         }
         delete this;
     }
@@ -211,6 +209,9 @@ ExchangeManager::WorkPackage::addItem(RemoteSlobrok *partner)
     if (! partner->isConnected()) {
         return;
     }
+    const char *name_p = _script.name().c_str();
+    const char *spec_p = _script.spec().c_str();
+
     FRT_RPCRequest *r = _exchanger._env.getSupervisor()->AllocRPCRequest();
     // XXX should recheck rpcsrvmap again
     if (_optype == OP_REMOVE) {
@@ -221,13 +222,13 @@ ExchangeManager::WorkPackage::addItem(RemoteSlobrok *partner)
         r->SetMethodName(""slobrok.internal.doAdd"");
     }
     r->GetParams()->AddString(_exchanger._env.mySpec().c_str());
-    r->GetParams()->AddString(_name.c_str());
-    r->GetParams()->AddString(_spec.c_str());
+    r->GetParams()->AddString(name_p);
+    r->GetParams()->AddString(spec_p);
 
     _work.push_back(std::make_unique<WorkItem>(*this, partner, r));
     LOG(spam, ""added %s(%s,%s,%s) for %s to workpackage"",
         r->GetMethodName(), _exchanger._env.mySpec().c_str(),
-        _name.c_str(), _spec.c_str(), partner->getName().c_str());
+        name_p, spec_p, partner->getName().c_str());
 }
 
 
@@ -237,7 +238,7 @@ ExchangeManager::WorkPackage::expedite()
     size_t sz = _work.size();
     if (sz == 0) {
         // no remotes need doing.
-        _donehandler.doneHandler(OkState());
+        _script.doneHandler(OkState());
         delete this;
         return;
     }
diff --git a/slobrok/src/vespa/slobrok/server/exchange_manager.h b/slobrok/src/vespa/slobrok/server/exchange_manager.h
index f86807a6f68..85f5996e3d2 100644
--- a/slobrok/src/vespa/slobrok/server/exchange_manager.h
+++ b/slobrok/src/vespa/slobrok/server/exchange_manager.h
@@ -62,13 +62,11 @@ private:
         std::vector<std::unique_ptr<WorkItem>> _work;
         size_t        _doneCnt;
         size_t        _numDenied;
-        ScriptCommand _donehandler;
+        ScriptCommand _script;
     public:
         ExchangeManager &_exchanger;
         enum op_type { OP_NOP, OP_WANTADD, OP_DOADD, OP_REMOVE };
         op_type _optype;
-        const std::string _name;
-        const std::string _spec;
         void addItem(RemoteSlobrok *partner);
         void doneItem(bool denied);
         void expedite();",reduce data multiplication,"""Refactor ExchangeManager::WorkPackage to use _script instead of _donehandler""","""Refactor ExchangeManager::WorkPackage to use _script instead of _donehandler""","Refactor ExchangeManager to use ScriptCommand instead of DoneHandler

Changes include:

* Renaming `_donehandler` to `_script` in the WorkPackage class
* Removing `_name` and `_spec` from the WorkPackage class and using `_script.name()` and `_script.spec()` instead
* Updating references to `_donehandler` to use `_script` instead
* Updating the constructor of the WorkPackage class to initialize `_script` instead of `_donehandler`

This refactor simplifies the code by removing unnecessary member variables and consolidating functionality into the ScriptCommand class.",Refactored WorkPackage class to replace _donehandler with _script and updated related methods accordingly.
"diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ConnectedClientOperationTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ConnectedClientOperationTest.java
index d5c2c6b57a..3d4bbafe0a 100644
--- a/hazelcast-client/src/test/java/com/hazelcast/client/ConnectedClientOperationTest.java
+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ConnectedClientOperationTest.java
@@ -69,6 +69,7 @@ public class ConnectedClientOperationTest extends HazelcastTestSupport {
         assertEquals(0, clientStats.get(ClientType.CSHARP).intValue());
         assertEquals(0, clientStats.get(ClientType.NODEJS).intValue());
         assertEquals(0, clientStats.get(ClientType.PYTHON).intValue());
+        assertEquals(0, clientStats.get(ClientType.GO).intValue());
         assertEquals(0, clientStats.get(ClientType.OTHER).intValue());
     }
 
diff --git a/hazelcast/src/main/java/com/hazelcast/client/ClientTypes.java b/hazelcast/src/main/java/com/hazelcast/client/ClientTypes.java
index 8210ae6d9e..e12f47c6e8 100644
--- a/hazelcast/src/main/java/com/hazelcast/client/ClientTypes.java
+++ b/hazelcast/src/main/java/com/hazelcast/client/ClientTypes.java
@@ -59,6 +59,11 @@ public final class ClientTypes {
      */
     public static final String NODEJS = ""NJS"";
 
+    /**
+     * Go client protocol ID
+     */
+    public static final String GO = ""GOO"";
+
     private ClientTypes() {
     }
 }
diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java b/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java
index d7240f21ed..a1b75e8d9f 100644
--- a/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java
+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEndpointImpl.java
@@ -178,6 +178,9 @@ public final class ClientEndpointImpl implements ClientEndpoint {
             case NODEJS_CLIENT:
                 type = ClientType.NODEJS;
                 break;
+            case GO_CLIENT:
+                type = ClientType.GO;
+                break;
             case BINARY_CLIENT:
                 type = ClientType.OTHER;
                 break;
diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEngineImpl.java b/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEngineImpl.java
index 1c325e37c2..ba8f236334 100644
--- a/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEngineImpl.java
+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/ClientEngineImpl.java
@@ -545,6 +545,7 @@ public class ClientEngineImpl implements ClientEngine, CoreService, PreJoinAware
         return liveMappings.isEmpty() ? null : new OnJoinClientOperation(liveMappings);
     }
 
+    @SuppressWarnings(""checkstyle:methodlength"")
     @Override
     public Map<ClientType, Integer> getConnectedClientStats() {
 
@@ -553,6 +554,7 @@ public class ClientEngineImpl implements ClientEngine, CoreService, PreJoinAware
         int numberOfJavaClients = 0;
         int numberOfNodeJSClients = 0;
         int numberOfPythonClients = 0;
+        int numberOfGoClients = 0;
         int numberOfOtherClients = 0;
 
         OperationService operationService = node.nodeEngine.getOperationService();
@@ -596,6 +598,9 @@ public class ClientEngineImpl implements ClientEngine, CoreService, PreJoinAware
                 case PYTHON:
                     numberOfPythonClients++;
                     break;
+                case GO:
+                    numberOfGoClients++;
+                    break;
                 default:
                     numberOfOtherClients++;
             }
@@ -606,6 +611,7 @@ public class ClientEngineImpl implements ClientEngine, CoreService, PreJoinAware
         resultMap.put(ClientType.JAVA, numberOfJavaClients);
         resultMap.put(ClientType.NODEJS, numberOfNodeJSClients);
         resultMap.put(ClientType.PYTHON, numberOfPythonClients);
+        resultMap.put(ClientType.GO, numberOfGoClients);
         resultMap.put(ClientType.OTHER, numberOfOtherClients);
 
         return resultMap;
diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java
index 795583f79e..11aa8b9b6e 100644
--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java
+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AuthenticationBaseMessageTask.java
@@ -223,6 +223,8 @@ public abstract class AuthenticationBaseMessageTask<P> extends AbstractStableClu
             connection.setType(ConnectionType.RUBY_CLIENT);
         } else if (ClientTypes.NODEJS.equals(type)) {
             connection.setType(ConnectionType.NODEJS_CLIENT);
+        } else if (ClientTypes.GO.equals(type)) {
+            connection.setType(ConnectionType.GO_CLIENT);
         } else {
             clientEngine.getLogger(getClass()).info(""Unknown client type: "" + type);
             connection.setType(ConnectionType.BINARY_CLIENT);
diff --git a/hazelcast/src/main/java/com/hazelcast/core/ClientType.java b/hazelcast/src/main/java/com/hazelcast/core/ClientType.java
index 33068a69ac..a286e792bb 100644
--- a/hazelcast/src/main/java/com/hazelcast/core/ClientType.java
+++ b/hazelcast/src/main/java/com/hazelcast/core/ClientType.java
@@ -26,5 +26,6 @@ public enum ClientType {
     PYTHON,
     RUBY,
     NODEJS,
+    GO,
     OTHER
 }
diff --git a/hazelcast/src/main/java/com/hazelcast/nio/ConnectionType.java b/hazelcast/src/main/java/com/hazelcast/nio/ConnectionType.java
index 3937e28b93..01243c2c28 100644
--- a/hazelcast/src/main/java/com/hazelcast/nio/ConnectionType.java
+++ b/hazelcast/src/main/java/com/hazelcast/nio/ConnectionType.java
@@ -32,6 +32,7 @@ public enum ConnectionType {
     PYTHON_CLIENT(false, true),
     RUBY_CLIENT(false, true),
     NODEJS_CLIENT(false, true),
+    GO_CLIENT(false, true),
     BINARY_CLIENT(false, true),
     REST_CLIENT(false, false),
     MEMCACHE_CLIENT(false, false);
diff --git a/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java b/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java
index 4a63439aab..02a596ffaa 100644
--- a/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java
+++ b/hazelcast/src/main/java/com/hazelcast/util/PhoneHome.java
@@ -166,6 +166,7 @@ public final class PhoneHome {
         parameterCreator.addParam(""cjv"", Integer.toString(clusterClientStats.get(ClientType.JAVA)));
         parameterCreator.addParam(""cnjs"", Integer.toString(clusterClientStats.get(ClientType.NODEJS)));
         parameterCreator.addParam(""cpy"", Integer.toString(clusterClientStats.get(ClientType.PYTHON)));
+        parameterCreator.addParam(""cgo"", Integer.toString(clusterClientStats.get(ClientType.GO)));
         parameterCreator.addParam(""cuptm"", Long.toString(clusterUpTime));
         parameterCreator.addParam(""nuptm"", Long.toString(runtimeMxBean.getUptime()));
         parameterCreator.addParam(""jvmn"", runtimeMxBean.getVmName());
diff --git a/hazelcast/src/test/java/com/hazelcast/util/PhoneHomeTest.java b/hazelcast/src/test/java/com/hazelcast/util/PhoneHomeTest.java
index f2bd08e777..49fcc43bd9 100644
--- a/hazelcast/src/test/java/com/hazelcast/util/PhoneHomeTest.java
+++ b/hazelcast/src/test/java/com/hazelcast/util/PhoneHomeTest.java
@@ -78,6 +78,7 @@ public class PhoneHomeTest extends HazelcastTestSupport {
         assertEquals(parameters.get(""cjv""), ""0"");
         assertEquals(parameters.get(""cnjs""), ""0"");
         assertEquals(parameters.get(""cpy""), ""0"");
+        assertEquals(parameters.get(""cgo""), ""0"");
         assertEquals(parameters.get(""jetv""), """");
         assertFalse(Integer.parseInt(parameters.get(""cuptm"")) < 0);
         assertNotEquals(parameters.get(""nuptm""), ""0"");",send count of Golang clients to PhoneHome app ( <issue_id> ) .,"""Added support for Go client""",Added support for Go client protocol in Hazelcast.,"""Added GO client type and related changes""

This commit appears to add a new client type for GO in the Hazelcast client and server code. It includes changes to the ClientTypes class, ClientEndpointImpl, ClientEngineImpl, AuthenticationBaseMessageTask, ClientType, ConnectionType, and PhoneHome classes. It also includes changes to the ConnectedClientOperationTest test class to include the new GO client type in its assertions. The changes seem to be related to supporting a new client type for the GO programming language.",Added support for tracking and handling Go clients in Hazelcast client statistics and various client-related functionalities.
"diff --git a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/BaseTest.java b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/BaseTest.java
index 753c9844..8aaf510b 100644
--- a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/BaseTest.java
+++ b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/BaseTest.java
@@ -4,26 +4,26 @@ import android.database.sqlite.SQLiteDatabase;
 import android.support.annotation.NonNull;
 import android.support.test.InstrumentationRegistry;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
-import com.pushtorefresh.storio.db.impl.BambooStorageSQLiteDb;
+import com.pushtorefresh.storio.db.StorIODb;
+import com.pushtorefresh.storio.db.impl.StorIOSQLiteDb;
 
 import org.junit.Before;
 
 public abstract class BaseTest {
 
-    @NonNull protected BambooStorageDb bambooStorageDb;
+    @NonNull protected StorIODb storIODb;
     @NonNull protected SQLiteDatabase db;
 
     @Before public void setUp() throws Exception {
         db = new TestSQLiteOpenHelper(InstrumentationRegistry.getContext())
                 .getWritableDatabase();
 
-        bambooStorageDb = new BambooStorageSQLiteDb.Builder()
+        storIODb = new StorIOSQLiteDb.Builder()
                 .db(db)
                 .build();
 
         // clearing db before each test case
-        bambooStorageDb
+        storIODb
                 .delete()
                 .byQuery(User.DELETE_ALL)
                 .prepare()
diff --git a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/DeleteTest.java b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/DeleteTest.java
index e6b2951b..e5093f0f 100644
--- a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/DeleteTest.java
+++ b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/DeleteTest.java
@@ -18,7 +18,7 @@ public class DeleteTest extends BaseTest {
     @Test public void deleteOne() {
         final User user = TestFactory.newUser();
 
-        final PutResult putResult = bambooStorageDb
+        final PutResult putResult = storIODb
                 .put()
                 .object(user)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -32,7 +32,7 @@ public class DeleteTest extends BaseTest {
         assertEquals(1, cursorAfterInsert.getCount());
         cursorAfterInsert.close();
 
-        final DeleteResult deleteResult = bambooStorageDb
+        final DeleteResult deleteResult = storIODb
                 .delete()
                 .object(user)
                 .withMapFunc(User.MAP_TO_DELETE_QUERY)
diff --git a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/InsertTest.java b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/InsertTest.java
index 824e69bf..177fb4c3 100644
--- a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/InsertTest.java
+++ b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/InsertTest.java
@@ -21,7 +21,7 @@ public class InsertTest extends BaseTest {
     @Test public void insertOne() {
         final User user = TestFactory.newUser();
 
-        final PutResult putResult = bambooStorageDb
+        final PutResult putResult = storIODb
                 .put()
                 .object(user)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -31,7 +31,7 @@ public class InsertTest extends BaseTest {
 
         assertTrue(putResult.wasInserted());
 
-        // why we created BambooStorage: nobody loves nulls
+        // why we created StorIODb: nobody loves nulls
         final Cursor cursor = db.query(User.TABLE, null, null, null, null, null, null);
 
         // asserting that values was really inserted to db
@@ -49,7 +49,7 @@ public class InsertTest extends BaseTest {
     @Test public void insertCollection() {
         final List<User> users = TestFactory.newUsers(3);
 
-        final PutCollectionResult<User> putResult = bambooStorageDb
+        final PutCollectionResult<User> putResult = storIODb
                 .put()
                 .objects(users)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
diff --git a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/QueryTest.java b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/QueryTest.java
index c8189211..c08427e9 100644
--- a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/QueryTest.java
+++ b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/QueryTest.java
@@ -19,7 +19,7 @@ public class QueryTest extends BaseTest {
     @Test public void queryAll() {
         final List<User> users = TestFactory.newUsers(3);
 
-        final PutCollectionResult<User> putResult = bambooStorageDb
+        final PutCollectionResult<User> putResult = storIODb
                 .put()
                 .objects(users)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -29,7 +29,7 @@ public class QueryTest extends BaseTest {
 
         assertEquals(users.size(), putResult.numberOfInserts());
 
-        final List<User> usersFromQuery = bambooStorageDb
+        final List<User> usersFromQuery = storIODb
                 .get()
                 .listOfObjects(User.class)
                 .withMapFunc(User.MAP_FROM_CURSOR)
diff --git a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/UpdateTest.java b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/UpdateTest.java
index e9e5b56a..59fbca53 100644
--- a/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/UpdateTest.java
+++ b/bamboo-storage/src/androidTest/java/com/pushtorefresh/storio/db/integration_test/impl/UpdateTest.java
@@ -21,7 +21,7 @@ public class UpdateTest extends BaseTest {
     @Test public void updateOne() {
         final User userForInsert = TestFactory.newUser();
 
-        final PutResult insertResult = bambooStorageDb
+        final PutResult insertResult = storIODb
                 .put()
                 .object(userForInsert)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -36,7 +36,7 @@ public class UpdateTest extends BaseTest {
                 ""new@email.com"" // new value
         );
 
-        final PutResult updateResult = bambooStorageDb
+        final PutResult updateResult = storIODb
                 .put()
                 .object(userForUpdate)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -60,7 +60,7 @@ public class UpdateTest extends BaseTest {
     @Test public void updateCollection() {
         final List<User> usersForInsert = TestFactory.newUsers(3);
 
-        final PutCollectionResult<User> insertResult = bambooStorageDb
+        final PutCollectionResult<User> insertResult = storIODb
                 .put()
                 .objects(usersForInsert)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
@@ -76,7 +76,7 @@ public class UpdateTest extends BaseTest {
             usersForUpdate.add(new User(usersForInsert.get(i).getId(), ""new"" + i + ""@email.com"" + i));
         }
 
-        final PutCollectionResult<User> updateResult = bambooStorageDb
+        final PutCollectionResult<User> updateResult = storIODb
                 .put()
                 .objects(usersForUpdate)
                 .withMapFunc(User.MAP_TO_CONTENT_VALUES)
diff --git a/bamboo-storage/src/main/AndroidManifest.xml b/bamboo-storage/src/main/AndroidManifest.xml
index 154224ec..002f1043 100644
--- a/bamboo-storage/src/main/AndroidManifest.xml
+++ b/bamboo-storage/src/main/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
 <manifest
-    package=""com.pushtorefresh.android.bamboostorage""
+    package=""com.pushtorefresh.storio""
     xmlns:android=""http://schemas.android.com/apk/res/android"">
 
 </manifest>
\ No newline at end of file
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/BambooStorageDb.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/StorIODb.java
similarity index 85%
rename from bamboo-storage/src/main/java/com/pushtorefresh/storio/db/BambooStorageDb.java
rename to bamboo-storage/src/main/java/com/pushtorefresh/storio/db/StorIODb.java
index 05527445..dd0032fc 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/BambooStorageDb.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/StorIODb.java
@@ -26,10 +26,10 @@ import rx.Observable;
  * It's an abstract class instead of interface because we want to have ability to add some
  * changes without breaking existing implementations
  */
-public abstract class BambooStorageDb {
+public abstract class StorIODb {
 
     /**
-     * Prepares ""execute sql"" operation for BambooStorage
+     * Prepares ""execute sql"" operation for {@link StorIODb}
      * Allows to execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.
      *
      * @return builder for PreparedExecSql
@@ -37,24 +37,24 @@ public abstract class BambooStorageDb {
     @NonNull public abstract PreparedExecSql.Builder execSql();
 
     /**
-     * Prepares ""get"" operation for BambooStorage
-     * Allows to get information from BambooStorage
+     * Prepares ""get"" operation for {@link StorIODb}
+     * Allows to get information from {@link StorIODb}
      *
      * @return builder for PreparedGet
      */
     @NonNull public abstract PreparedGet.Builder get();
 
     /**
-     * Prepares ""put"" operation for BambooStorage
-     * Allows to insert/update information in BambooStorage
+     * Prepares ""put"" operation for {@link StorIODb}
+     * Allows to insert/update information in {@link StorIODb}
      *
      * @return builder for PreparedPut
      */
     @NonNull public abstract PreparedPut.Builder put();
 
     /**
-     * Prepares ""delete"" operation for BambooStorage
-     * Allows to delete information from BambooStorage
+     * Prepares ""delete"" operation for {@link StorIODb}
+     * Allows to delete information from {@link StorIODb}
      *
      * @return builder for PreparedDelete
      */
@@ -81,15 +81,15 @@ public abstract class BambooStorageDb {
     }
 
     /**
-     * Hides some internal operations for BambooStorage to make API of BambooStorage clean and easy to understand
+     * Hides some internal operations for {@link StorIODb} to make API of {@link StorIODb} clean and easy to understand
      *
-     * @return implementation of Internal operations for BambooStorage
+     * @return implementation of Internal operations for {@link StorIODb}
      */
     @NonNull public abstract Internal internal();
 
     /**
-     * Hides some internal operations for BambooStorage
-     * to make API of BambooStorage clean and easy to understand
+     * Hides some internal operations of {@link StorIODb}
+     * to make {@link StorIODb} API clean and easy to understand
      */
     public static abstract class Internal {
 
@@ -143,16 +143,16 @@ public abstract class BambooStorageDb {
         public abstract int delete(@NonNull DeleteQuery deleteQuery);
 
         /**
-         * Notifies subscribers about changes happened in {@link BambooStorageDb}
+         * Notifies subscribers about changes happened in {@link StorIODb}
          * Operations can be executed in transaction or one operation can affect multiple tables, so to reduce number of notifications
          * you can call this method once and provide Changes object
          *
-         * @param changes changes happened in {@link BambooStorageDb}
+         * @param changes changes happened in {@link StorIODb}
          */
         public abstract void notifyAboutChanges(@NonNull Changes changes);
 
         /**
-         * BambooStorage implementation could not provide support for transactions
+         * {@link StorIODb} implementation could not provide support for transactions
          *
          * @return true if transactions are supported, false otherwise
          */
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/BambooStorageSQLiteDb.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/StorIOSQLiteDb.java
similarity index 92%
rename from bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/BambooStorageSQLiteDb.java
rename to bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/StorIOSQLiteDb.java
index a4d22444..ed9931d2 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/BambooStorageSQLiteDb.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/impl/StorIOSQLiteDb.java
@@ -6,7 +6,7 @@ import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.Changes;
 import com.pushtorefresh.storio.db.operation.delete.PreparedDelete;
 import com.pushtorefresh.storio.db.operation.exec_sql.PreparedExecSql;
@@ -24,7 +24,7 @@ import rx.Observable;
 import rx.functions.Func1;
 import rx.subjects.PublishSubject;
 
-public class BambooStorageSQLiteDb extends BambooStorageDb {
+public class StorIOSQLiteDb extends StorIODb {
 
     /**
      * Real db
@@ -32,17 +32,17 @@ public class BambooStorageSQLiteDb extends BambooStorageDb {
     @NonNull private final SQLiteDatabase db;
 
     /**
-     * Reactive bus for notifying observers about changes in BambooStorageDb
+     * Reactive bus for notifying observers about changes in StorIODb
      * One change can affect several tables, so we use Set<String> as set of changed tables per event
      */
     @NonNull private final PublishSubject<Changes> changesBus = PublishSubject.create();
 
     /**
-     * Implementation of {@link BambooStorageDb.Internal}
+     * Implementation of {@link StorIODb.Internal}
      */
     @NonNull private final Internal internal = new InternalImpl();
 
-    protected BambooStorageSQLiteDb(@NonNull SQLiteDatabase db) {
+    protected StorIOSQLiteDb(@NonNull SQLiteDatabase db) {
         this.db = db;
     }
 
@@ -172,12 +172,12 @@ public class BambooStorageSQLiteDb extends BambooStorageDb {
             return this;
         }
 
-        @NonNull public BambooStorageSQLiteDb build() {
+        @NonNull public StorIOSQLiteDb build() {
             if (db == null) {
                 throw new IllegalStateException(""Please specify SQLiteDatabase instance"");
             }
 
-            return new BambooStorageSQLiteDb(db);
+            return new StorIOSQLiteDb(db);
         }
     }
 }
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/Changes.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/Changes.java
index 8aca0961..4e1c8460 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/Changes.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/Changes.java
@@ -2,11 +2,13 @@ package com.pushtorefresh.storio.db.operation;
 
 import android.support.annotation.NonNull;
 
+import com.pushtorefresh.storio.db.StorIODb;
+
 import java.util.Collections;
 import java.util.Set;
 
 /**
- * Contains information about one or more changed tables in {@link com.pushtorefresh.storio.db.BambooStorageDb}
+ * Contains information about one or more changed tables in {@link StorIODb}
  */
 public class Changes {
 
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDelete.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDelete.java
index d14b9e9c..bbad0d57 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDelete.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDelete.java
@@ -2,7 +2,7 @@ package com.pushtorefresh.storio.db.operation.delete;
 
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.PreparedOperation;
 import com.pushtorefresh.storio.db.query.DeleteQuery;
 
@@ -10,30 +10,30 @@ import java.util.Collection;
 
 public abstract class PreparedDelete<T> implements PreparedOperation<T>{
 
-    @NonNull protected BambooStorageDb bambooStorageDb;
+    @NonNull protected StorIODb storIODb;
 
-    protected PreparedDelete(@NonNull BambooStorageDb bambooStorageDb) {
-        this.bambooStorageDb = bambooStorageDb;
+    protected PreparedDelete(@NonNull StorIODb storIODb) {
+        this.storIODb = storIODb;
     }
 
     public static class Builder {
 
-        @NonNull private final BambooStorageDb bambooStorageDb;
+        @NonNull private final StorIODb storIODb;
 
-        public Builder(@NonNull BambooStorageDb bambooStorageDb) {
-            this.bambooStorageDb = bambooStorageDb;
+        public Builder(@NonNull StorIODb storIODb) {
+            this.storIODb = storIODb;
         }
 
         @NonNull public PreparedDeleteByQuery.Builder byQuery(@NonNull DeleteQuery deleteQuery) {
-            return new PreparedDeleteByQuery.Builder(bambooStorageDb, deleteQuery);
+            return new PreparedDeleteByQuery.Builder(storIODb, deleteQuery);
         }
 
         @NonNull public <T> PreparedDeleteObject.Builder<T> object(@NonNull T object) {
-            return new PreparedDeleteObject.Builder<>(bambooStorageDb, object);
+            return new PreparedDeleteObject.Builder<>(storIODb, object);
         }
 
         @NonNull public <T> PreparedDeleteCollectionOfObjects.Builder<T> objects(@NonNull Collection<T> objects) {
-            return new PreparedDeleteCollectionOfObjects.Builder<>(bambooStorageDb, objects);
+            return new PreparedDeleteCollectionOfObjects.Builder<>(storIODb, objects);
         }
     }
 }
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteByQuery.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteByQuery.java
index f2093295..893a967e 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteByQuery.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteByQuery.java
@@ -2,7 +2,7 @@ package com.pushtorefresh.storio.db.operation.delete;
 
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.Changes;
 import com.pushtorefresh.storio.db.query.DeleteQuery;
 
@@ -15,13 +15,13 @@ public class PreparedDeleteByQuery extends PreparedDelete<DeleteResult> {
 
     @NonNull private final DeleteQuery deleteQuery;
 
-    protected PreparedDeleteByQuery(@NonNull BambooStorageDb bambooStorageDb, @NonNull DeleteQuery deleteQuery) {
-        super(bambooStorageDb);
+    protected PreparedDeleteByQuery(@NonNull StorIODb storIODb, @NonNull DeleteQuery deleteQuery) {
+        super(storIODb);
         this.deleteQuery = deleteQuery;
     }
 
     @NonNull @Override public DeleteResult executeAsBlocking() {
-        final BambooStorageDb.Internal internal = bambooStorageDb.internal();
+        final StorIODb.Internal internal = storIODb.internal();
 
         final int countOfDeletedRows = internal.delete(deleteQuery);
         internal.notifyAboutChanges(new Changes(deleteQuery.table));
@@ -44,16 +44,16 @@ public class PreparedDeleteByQuery extends PreparedDelete<DeleteResult> {
 
     public static class Builder {
 
-        @NonNull private final BambooStorageDb bambooStorageDb;
+        @NonNull private final StorIODb storIODb;
         @NonNull private final DeleteQuery deleteQuery;
 
-        public Builder(@NonNull BambooStorageDb bambooStorageDb, @NonNull DeleteQuery deleteQuery) {
-            this.bambooStorageDb = bambooStorageDb;
+        public Builder(@NonNull StorIODb storIODb, @NonNull DeleteQuery deleteQuery) {
+            this.storIODb = storIODb;
             this.deleteQuery = deleteQuery;
         }
 
         @NonNull public PreparedDeleteByQuery prepare() {
-            return new PreparedDeleteByQuery(bambooStorageDb, deleteQuery);
+            return new PreparedDeleteByQuery(storIODb, deleteQuery);
         }
     }
 }
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteCollectionOfObjects.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteCollectionOfObjects.java
index 1cff8098..999fa174 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteCollectionOfObjects.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteCollectionOfObjects.java
@@ -2,7 +2,7 @@ package com.pushtorefresh.storio.db.operation.delete;
 
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.Changes;
 import com.pushtorefresh.storio.db.operation.MapFunc;
 import com.pushtorefresh.storio.db.query.DeleteQuery;
@@ -23,15 +23,15 @@ public class PreparedDeleteCollectionOfObjects<T> extends PreparedDelete<DeleteC
     @NonNull private final MapFunc<T, DeleteQuery> mapFunc;
     private final boolean useTransactionIfPossible;
 
-    protected PreparedDeleteCollectionOfObjects(@NonNull BambooStorageDb bambooStorageDb, @NonNull Collection<T> objects, @NonNull MapFunc<T, DeleteQuery> mapFunc, boolean useTransactionIfPossible) {
-        super(bambooStorageDb);
+    protected PreparedDeleteCollectionOfObjects(@NonNull StorIODb storIODb, @NonNull Collection<T> objects, @NonNull MapFunc<T, DeleteQuery> mapFunc, boolean useTransactionIfPossible) {
+        super(storIODb);
         this.objects = objects;
         this.mapFunc = mapFunc;
         this.useTransactionIfPossible = useTransactionIfPossible;
     }
 
     @NonNull @Override public DeleteCollectionOfObjectsResult<T> executeAsBlocking() {
-        final BambooStorageDb.Internal internal = bambooStorageDb.internal();
+        final StorIODb.Internal internal = storIODb.internal();
 
         final Map<T, DeleteResult> results = new HashMap<>();
 
@@ -102,14 +102,14 @@ public class PreparedDeleteCollectionOfObjects<T> extends PreparedDelete<DeleteC
 
     public static class Builder<T> {
 
-        @NonNull private final BambooStorageDb bambooStorageDb;
+        @NonNull private final StorIODb storIODb;
         @NonNull private final Collection<T> objects;
 
         private MapFunc<T, DeleteQuery> mapFunc;
         private boolean useTransactionIfPossible = true;
 
-        public Builder(@NonNull BambooStorageDb bambooStorageDb, @NonNull Collection<T> objects) {
-            this.bambooStorageDb = bambooStorageDb;
+        public Builder(@NonNull StorIODb storIODb, @NonNull Collection<T> objects) {
+            this.storIODb = storIODb;
             this.objects = objects;
         }
 
@@ -130,7 +130,7 @@ public class PreparedDeleteCollectionOfObjects<T> extends PreparedDelete<DeleteC
 
         @NonNull public PreparedDeleteCollectionOfObjects<T> prepare() {
             return new PreparedDeleteCollectionOfObjects<>(
-                    bambooStorageDb,
+                    storIODb,
                     objects,
                     mapFunc,
                     useTransactionIfPossible
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteObject.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteObject.java
index f75a429d..6f7f197a 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteObject.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/delete/PreparedDeleteObject.java
@@ -2,7 +2,7 @@ package com.pushtorefresh.storio.db.operation.delete;
 
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.Changes;
 import com.pushtorefresh.storio.db.operation.MapFunc;
 import com.pushtorefresh.storio.db.query.DeleteQuery;
@@ -17,14 +17,14 @@ public class PreparedDeleteObject<T> extends PreparedDelete<DeleteResult> {
     @NonNull private final T object;
     @NonNull private final MapFunc<T, DeleteQuery> mapFunc;
 
-    protected PreparedDeleteObject(@NonNull BambooStorageDb bambooStorageDb, @NonNull T object, @NonNull MapFunc<T, DeleteQuery> mapFunc) {
-        super(bambooStorageDb);
+    protected PreparedDeleteObject(@NonNull StorIODb storIODb, @NonNull T object, @NonNull MapFunc<T, DeleteQuery> mapFunc) {
+        super(storIODb);
         this.object = object;
         this.mapFunc = mapFunc;
     }
 
     @NonNull @Override public DeleteResult executeAsBlocking() {
-        final BambooStorageDb.Internal internal = bambooStorageDb.internal();
+        final StorIODb.Internal internal = storIODb.internal();
         final DeleteQuery deleteQuery = mapFunc.map(object);
 
         final int countOfDeletedRows = internal.delete(deleteQuery);
@@ -49,13 +49,13 @@ public class PreparedDeleteObject<T> extends PreparedDelete<DeleteResult> {
 
     public static class Builder<T> {
 
-        @NonNull private final BambooStorageDb bambooStorageDb;
+        @NonNull private final StorIODb storIODb;
         @NonNull private final T object;
 
         private MapFunc<T, DeleteQuery> mapFunc;
 
-        public Builder(@NonNull BambooStorageDb bambooStorageDb, @NonNull T object) {
-            this.bambooStorageDb = bambooStorageDb;
+        public Builder(@NonNull StorIODb storIODb, @NonNull T object) {
+            this.storIODb = storIODb;
             this.object = object;
         }
 
@@ -65,7 +65,7 @@ public class PreparedDeleteObject<T> extends PreparedDelete<DeleteResult> {
         }
 
         @NonNull public PreparedDeleteObject<T> prepare() {
-            return new PreparedDeleteObject<>(bambooStorageDb, object, mapFunc);
+            return new PreparedDeleteObject<>(storIODb, object, mapFunc);
         }
     }
 }
diff --git a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/exec_sql/PreparedExecSql.java b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/exec_sql/PreparedExecSql.java
index 2c37afd8..a52f6268 100644
--- a/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/exec_sql/PreparedExecSql.java
+++ b/bamboo-storage/src/main/java/com/pushtorefresh/storio/db/operation/exec_sql/PreparedExecSql.java
@@ -2,7 +2,7 @@ package com.pushtorefresh.storio.db.operation.exec_sql;
 
 import android.support.annotation.NonNull;
 
-import com.pushtorefresh.storio.db.BambooStorageDb;
+import com.pushtorefresh.storio.db.StorIODb;
 import com.pushtorefresh.storio.db.operation.PreparedOperation;
 import com.pushtorefresh.storio.db.query.RawQuery;
 
@@ -11,16 +11,16 @@ import rx.Subscriber;
 
 public class PreparedExecSql implements PreparedOperation<Void> {
 
-    @NonNull private final BambooStorageDb bambooStorageDb;
+    @NonNull private final StorIODb storIODb;
     @NonNull private final RawQuery rawQuery;
 
-    public PreparedExecSql(@NonNull BambooStorageDb bambooStorageDb, @NonNull RawQuery rawQuery) {
-        this.bambooStorageDb = bambooStorageDb;
+    public PreparedExecSql(@NonNull StorIODb storIODb, @NonNull RawQuery rawQuery) {
+        this.storIODb = storIODb;
         this.rawQuery = rawQuery;
     }
 
     @NonNull @Override public Void executeAsBlocking() {
-        bambooStorageDb.internal().execSql(rawQuery);
+        storIODb.internal().execSql(rawQuery);
      ",Rename BambooStorageDb to StorIODb,"""Rename BambooStorage to StorIO""","Rename package and classes to match new naming convention

This commit message accurately reflects the changes made in the code. The changes include renaming the package and classes to match a new naming convention, specifically replacing ""BambooStorage"" with ""StorIO"".","This commit appears to rename and refactor the `BambooStorageDb` class to `StorIODb`, updating all references to the class throughout the codebase. Additionally, some changes have been made to the `Changes` class and the `PreparedDelete` class hierarchy. The `BambooStorageSQLiteDb` class has also been updated to extend the new `StorIODb` class. The commit message should reflect these changes, for example: ""Refactor BambooStorageDb to StorIODb and update related classes and tests"".",Renamed BambooStorageDb to StorIODb and related classes for consistency. Updated package names and references across various files.
"diff --git a/prj.el b/prj.el
index b7c7d16ab..e4f28ec44 100644
--- a/prj.el
+++ b/prj.el
@@ -7,7 +7,7 @@
  '(jde-run-option-debug nil)
  '(jde-run-option-vm-args (quote (""-XX:+PrintGC"")))
  '(jde-compile-option-directory ""./target/classes"")
- '(jde-run-option-application-args (quote (""-beta"" ""-mainClass"" ""org.junit.runner.JUnitCore"" ""hex.gbm.GBMTest"")))
+ '(jde-run-option-application-args (quote (""-beta"" ""-mainClass"" ""org.junit.runner.JUnitCore"" ""water.fvec.ParseTimeTest"")))
  '(jde-debugger (quote (""JDEbug"")))
  '(jde-compile-option-source (quote (""1.6"")))
  '(jde-compile-option-classpath (quote (""./target/classes"" ""./lib/javassist.jar"" ""./lib/hadoop/cdh4/hadoop-common.jar"" ""./lib/hadoop/cdh4/hadoop-auth.jar"" ""./lib/hadoop/cdh4/slf4j-api-1.6.1.jar"" ""./lib/hadoop/cdh4/slf4j-nop-1.6.1.jar"" ""./lib/hadoop/cdh4/hadoop-hdfs.jar"" ""./lib/hadoop/cdh4/protobuf-java-2.4.0a.jar"" ""./lib/apache/commons-codec-1.4.jar"" ""./lib/apache/commons-configuration-1.6.jar"" ""./lib/apache/commons-lang-2.4.jar"" ""./lib/apache/commons-logging-1.1.1.jar"" ""./lib/apache/httpclient-4.1.1.jar"" ""./lib/apache/httpcore-4.1.jar"" ""./lib/junit/junit-4.11.jar"" ""./lib/apache/guava-12.0.1.jar"" ""./lib/gson/gson-2.2.2.jar"" ""./lib/poi/poi-3.8-20120326.jar"" ""./lib/poi/poi-ooxml-3.8-20120326.jar"" ""./lib/poi/poi-ooxml-schemas-3.8-20120326.jar"" ""./lib/poi/dom4j-1.6.1.jar"" ""./lib/Jama/Jama.jar"" ""./lib/s3/aws-java-sdk-1.3.27.jar"" ""./lib/log4j/log4j-1.2.15.jar"" ""./lib/joda/joda-time-2.3.jar"")))
diff --git a/smalldata/test/test_uuid.csv b/smalldata/test/test_uuid.csv
index 13a4da649..252b63a9f 100644
--- a/smalldata/test/test_uuid.csv
+++ b/smalldata/test/test_uuid.csv
@@ -1,16 +1,20 @@
-         1,9ff4ed3a-6b00-4130-9aca-2ed897305fd1
-         2,ac1e1ca3-5ca8-438a-85a4-8175ed5bb7ec
-         3,6870f256-e145-4d75-adb0-99ccb77d5d3a
-         4,d8da52c1-d145-4dff-b3d1-127c6eb75d40
-         5,25ce1456-546d-4e35-bddc-d571b26581ea
-         6,2e1d193f-d1da-4664-8a2b-ffdfe0aa7be3 
-1000010407,89e68530-422e-43ba-bd00-aa3d8f2cfcaa
-1000024046,4055a53b-411f-46f0-9d2e-cf03bc95c080
-1000054511,49d14d8e-5c42-439d-b4a8-995e25b1602f
-1000065922,4e31b8aa-4aa9-4e8b-be8f-5cc6323235b4
-1000066478,2e1d193f-d1da-4664-8a2b-ffdfe0aa7be3
-1000067268,25ce1456-546d-4e35-bddc-d571b26581ea
- 100007536,d8da52c1-d145-4dff-b3d1-127c6eb75d40
-1000079839,6870f256-e145-4d75-adb0-99ccb77d5d3a
-  10000913,ac1e1ca3-5ca8-438a-85a4-8175ed5bb7ec
-1000104538,9ff4ed3a-6b00-4130-9aca-2ed897305fd1 
\ No newline at end of file
+         1,9ff4ed3a-6b00-4130-9aca-2ed897305fd1,1
+         2,ac1e1ca3-5ca8-438a-85a4-8175ed5bb7ec,1
+         3,6870f256-e145-4d75-adb0-99ccb77d5d3a,0
+         4,d8da52c1-d145-4dff-b3d1-127c6eb75d40,1
+         5,25ce1456-546d-4e35-bddc-d571b26581ea,0
+         6,2e1d193f-d1da-4664-8a2b-ffdfe0aa7be3,0 
+1000010407,89e68530-422e-43ba-bd00-aa3d8f2cfcaa,1
+1000024046,4055a53b-411f-46f0-9d2e-cf03bc95c080,0
+1000054511,49d14d8e-5c42-439d-b4a8-995e25b1602f,0
+1000065922,4e31b8aa-4aa9-4e8b-be8f-5cc6323235b4,0
+1000066478,2e1d193f-d1da-4664-8a2b-ffdfe0aa7be3,0
+1000067268,25ce1456-546d-4e35-bddc-d571b26581ea,0
+ 100007536,d8da52c1-d145-4dff-b3d1-127c6eb75d40,1
+1000079839,6870f256-e145-4d75-adb0-99ccb77d5d3a,0
+  10000913,ac1e1ca3-5ca8-438a-85a4-8175ed5bb7ec,0
+1000104538,9ff4ed3a-6b00-4130-9aca-2ed897305fd1,1 
+         7,00000000-0000-0000-0000-000000000000,0
+         8,80000000-0000-0000-0000-000000000000,0
+         9,FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF,1
+
diff --git a/src/main/java/hex/FrameExtractor.java b/src/main/java/hex/FrameExtractor.java
index b95e6bdad..f06859dc9 100644
--- a/src/main/java/hex/FrameExtractor.java
+++ b/src/main/java/hex/FrameExtractor.java
@@ -106,10 +106,12 @@ public abstract class FrameExtractor extends H2OCountedCompleter {
     final int num = dataset.numCols(); // number of columns in input frame
     final int nsplits = espcPerSplit.length; // number of splits
     final String[][] domains = dataset.domains(); // domains
+    final boolean[] uuids = dataset.uuids();
+    final byte[] times = dataset.times();
     Vec[][] t = new Vec[nsplits][/*num*/]; // resulting vectors for all
     for (int i=0; i<nsplits; i++) {
       // vectors for j-th split
-      t[i] = new Vec(Vec.newKey(),espcPerSplit[i/*-th split*/]).makeZeros(num, domains);
+      t[i] = new Vec(Vec.newKey(),espcPerSplit[i/*-th split*/]).makeZeros(num, domains, uuids, times);
     }
     return t;
   }
diff --git a/src/main/java/hex/FrameSplitter.java b/src/main/java/hex/FrameSplitter.java
index 4b94ea3e1..a4143d248 100644
--- a/src/main/java/hex/FrameSplitter.java
+++ b/src/main/java/hex/FrameSplitter.java
@@ -128,10 +128,12 @@ public class FrameSplitter extends H2OCountedCompleter {
     final int num = dataset.numCols(); // number of columns in input frame
     final int nsplits = espcPerSplit.length; // number of splits
     final String[][] domains = dataset.domains(); // domains
+    final boolean[] uuids = dataset.uuids();
+    final byte   [] times = dataset.times();
     Vec[][] t = new Vec[nsplits][/*num*/]; // resulting vectors for all
     for (int i=0; i<nsplits; i++) {
       // vectors for j-th split
-      t[i] = new Vec(Vec.newKey(),espcPerSplit[i/*-th split*/]).makeZeros(num, domains);
+      t[i] = new Vec(Vec.newKey(),espcPerSplit[i/*-th split*/]).makeZeros(num, domains, uuids, times);
     }
     return t;
   }
@@ -191,7 +193,7 @@ public class FrameSplitter extends H2OCountedCompleter {
       int nrows = cs[0]._len;
       // For each output chunk extract appropriate rows for partIdx-th part
       for (int i=0; i<cs.length; i++) {
-        // WARNING: this implementation does not preserver co-location of chunks so we are forcing here network transfer!
+        // WARNING: this implementation does not preserve co-location of chunks so we are forcing here network transfer!
         ChunkSplitter.extractChunkPart(_srcVecs[i].chunkForChunkIdx(cinidx), cs[i], startRow, nrows, _fs);
       }
     }
diff --git a/src/main/java/hex/Summary2.java b/src/main/java/hex/Summary2.java
index fc4e2dadf..c69caef23 100644
--- a/src/main/java/hex/Summary2.java
+++ b/src/main/java/hex/Summary2.java
@@ -5,12 +5,10 @@ import water.api.*;
 import water.api.Request.API;
 import water.fvec.*;
 import water.exec.Flow;
-import water.parser.*;
 import water.util.Utils;
 import water.util.Log;
 
 import java.util.Arrays;
-import java.util.Random;
 
 /**
  * Summary of a column.
@@ -131,6 +129,7 @@ public class Summary2 extends Iced {
       for(int i = 0; i < chk._len; i++) {
         double val;
         if (chk.isNA0(i)) { _nas++; continue; }
+        if( chk._vec.isUUID() ) continue;
         if (Double.isNaN(val = chk.at0(i))) { _nans++; continue; }
         if      (val == Double.POSITIVE_INFINITY) _pinfs++;
         else if (val == Double.NEGATIVE_INFINITY) _ninfs++;
@@ -167,21 +166,6 @@ public class Summary2 extends Iced {
       return this;
     }
 
-    /**
-     * @return number of filled elements, excluding NaN's as well.
-     */
-    public long len1() {
-      return _len - _nas - _nans;
-    }
-    /**
-     * Returns whether the fill density is less than the given percent.
-     * @param pct target percent.
-     * @param nan if true then NaN is counted as missing.
-     * @return true if less than {@code pct} of rows are filled. */
-    public boolean isSparse(double pct, boolean nan) {
-      assert 0 < pct && pct <= 1;
-      return (double)(_len - _nas - (nan?_nans:0)) / _len < pct;
-    }
   }
 
   public static class PrePass extends MRTask2<PrePass> {
@@ -312,7 +296,7 @@ public class Summary2 extends Iced {
   public Summary2(Vec vec, String name, BasicStat stat0, int max_qbins) {
     colname = name;
     _stat0 = stat0;
-    _type = vec.isEnum()?2:vec.isInt()?1:0;
+    _type = vec.isEnum()?T_ENUM:vec.isInt()?T_INT:T_REAL;
     _domain = vec.isEnum() ? vec.domain() : null;
     _gprows = 0;
     double sigma = Double.isNaN(vec.sigma()) ? 0 : vec.sigma();
@@ -469,6 +453,7 @@ public class Summary2 extends Iced {
   }
 
   public Summary2 add(Chunk chk) {
+    if( chk._vec.isUUID() ) return this;
     for (int i = 0; i < chk._len; i++)
       add(chk.at0(i));
     return this;
diff --git a/src/main/java/water/Job.java b/src/main/java/water/Job.java
index 6ff327f54..99b7e63b9 100644
--- a/src/main/java/water/Job.java
+++ b/src/main/java/water/Job.java
@@ -201,11 +201,6 @@ public abstract class Job extends Func {
     return state == JobState.CANCELLED || state == JobState.FAILED;
   }
 
-  /** Returns true if the job was cancelled by the user.
-   * @return true if the job is in state {@link JobState#CANCELLED}.
-   */
-  public boolean isCancelledXX() { return state == JobState.CANCELLED; }
-
   /** Returns true if the job was terminated by unexpected exception.
    * @return true, if the job was terminated by unexpected exception.
    */
@@ -273,13 +268,10 @@ public abstract class Job extends Func {
    * @param jobkey job key
    * @return returns a job with given job key or null if a job is not found.
    */
-  public static final Job findJob(final Key jobkey) {
-    Job job = UKV.get(jobkey);
-    return job;
-  }
+  public static Job findJob(final Key jobkey) { return UKV.get(jobkey); }
 
   /** Finds a job with given dest key or returns null */
-  public static final Job findJobByDest(final Key destKey) {
+  public static Job findJobByDest(final Key destKey) {
     Job job = null;
     for( Job current : Job.all() ) {
       if( current.dest().equals(destKey) ) {
@@ -372,7 +364,7 @@ public abstract class Job extends Func {
         return;
       }
 
-      try { Thread.sleep (pollingIntervalMillis); } catch (Exception xe) {}
+      try { Thread.sleep (pollingIntervalMillis); } catch (Exception ignore) {}
     }
   }
 
@@ -390,8 +382,7 @@ public abstract class Job extends Func {
     final long _count;
     private final Status _status;
     final String _error;
-    protected DException _ex;
-    public enum Status { Computing, Done, Cancelled, Error };
+    public enum Status { Computing, Done, Cancelled, Error }
 
     public Status status() { return _status; }
 
@@ -587,6 +578,14 @@ public abstract class Job extends Func {
       if (!isEmpty(ignored_cols_by_name)) { specified++; }
       if (specified > 1) throw new IllegalArgumentException(""Arguments 'cols', 'ignored_cols_by_name', and 'ignored_cols' are exclusive"");
 
+      Vec[] vecs = source.vecs();
+      for( int i = 0; i < vecs.length; i++ )
+        if( vecs[i].isUUID() ) {
+          if( ignored_cols==null ) ignored_cols = new int[0];
+          ignored_cols = Arrays.copyOf(ignored_cols,ignored_cols.length+1);
+          ignored_cols[ignored_cols.length-1] = i;
+       }
+
       // If the column are not specified, then select everything.
       if (isEmpty(cols)) {
         cols = new int[source.vecs().length];
@@ -884,7 +883,7 @@ public abstract class Job extends Func {
     protected String[] getVectorDomain(final Vec v) {
       assert v==null || v.isInt() || v.isEnum() : ""Cannot get vector domain!"";
       if (v==null) return null;
-      String[] r = null;
+      String[] r;
       if (v.isEnum()) {
         r = v.domain();
       } else {
diff --git a/src/main/java/water/PrettyPrint.java b/src/main/java/water/PrettyPrint.java
index dba3212da..b98da846c 100644
--- a/src/main/java/water/PrettyPrint.java
+++ b/src/main/java/water/PrettyPrint.java
@@ -32,4 +32,15 @@ public class PrettyPrint {
     if( bytes < 0 ) return ""N/A"";
     return bytes(bytes)+""/S"";
   }
+
+  // About as clumsy and random as a blaster...
+  public static String UUID( long lo, long hi ) {
+    long lo0 = (lo>>32)&0xFFFFFFFFL;
+    long lo1 = (lo>>16)&0xFFFFL;
+    long lo2 = (lo>> 0)&0xFFFFL;
+    long hi0 = (hi>>48)&0xFFFFL;
+    long hi1 = (hi>> 0)&0xFFFFFFFFFFFFL;
+    return String.format(""%08X-%04X-%04X-%04X-%012X"",lo0,lo1,lo2,hi0,hi1);
+  }
+
 }
diff --git a/src/main/java/water/api/Inspect2.java b/src/main/java/water/api/Inspect2.java
index 0ed301d70..6065d3ac9 100644
--- a/src/main/java/water/api/Inspect2.java
+++ b/src/main/java/water/api/Inspect2.java
@@ -36,12 +36,13 @@ public class Inspect2 extends Request2 {
 
   // An internal JSON-output-only class
   static class ColSummary extends Iced {
-    public static enum ColType { Enum, Int, Real, Time };
+    public static enum ColType { Enum, Int, Real, Time, UUID };
     static final int API_WEAVER=1; // This file has auto-gen'd doc & json fields
     static public DocGen.FieldDoc[] DOC_FIELDS; // Initialized from Auto-Gen code.
     public ColSummary( String name, Vec vec ) {
       this.name = name;
-      this.type = vec.isEnum() ? ColType.Enum : vec.isInt() ? (vec.isTime() ? ColType.Time : ColType.Int) : ColType.Real;
+      this.type = vec.isEnum() ? ColType.Enum : vec.isUUID() ? ColType.UUID : (vec.isInt() ? (vec.isTime() ? ColType.Time : ColType.Int) : ColType.Real);
+      boolean numeric = !vec.isEnum() && !vec.isUUID();
       this.min  = vec.isEnum() ? Double.NaN : vec.min();
       this.max  = vec.isEnum() ? Double.NaN : vec.max();
       this.mean = vec.isEnum() ? Double.NaN : vec.mean();
@@ -194,7 +195,10 @@ public class Inspect2 extends Request2 {
     sb.append(""<tr class='warning'>"");
     sb.append(""<td>"").append(""Mean"").append(""</td>"");
     for( int i=0; i<cols.length; i++ )
-      sb.append(""<td>"").append(cols[i].type == ColType.Enum ? NA : mean_dformat.format(cols[i].mean)).append(""</td>"");
+      sb.append(""<td>"").append((cols[i].type == ColType.Enum) ||
+                               (cols[i].type == ColType.UUID) 
+                               ? NA 
+                               : mean_dformat.format(cols[i].mean)).append(""</td>"");
     sb.append(""</tr>"");
 
     // Cardinality row is shown only if dataset contains enum-column
@@ -259,8 +263,13 @@ public class Inspect2 extends Request2 {
   }
 
   // ---
-  // Return a well-formated string for this kind of Vec
-  public static String x0( Vec v, long row ) { return x1(v,row,v.at(row)); }
+  // Return a well-formatted string for this kind of Vec
+  public static String x0( Vec v, long row ) { 
+    if( !v.isUUID() ) return x1(v,row,v.at(row));
+    // UUID handling
+    if( v.isNA(row) ) return x1(v,row,Double.NaN);
+    return ""<b style=\""font-family:monospace;\"">""+PrettyPrint.UUID(v.at16l(row),v.at16h(row))+""</b>"";
+  }
 
   // Format a row, OR the min/max
   public static String x1( Vec v, long row, double d ) {
diff --git a/src/main/java/water/api/RequestArguments.java b/src/main/java/water/api/RequestArguments.java
index 35badf86f..8552b806c 100644
--- a/src/main/java/water/api/RequestArguments.java
+++ b/src/main/java/water/api/RequestArguments.java
@@ -2617,6 +2617,18 @@ public class RequestArguments extends RequestStatics {
   /** A Class Vec/Column within a Frame.  Limited to 1000 classes, just to prevent madness. */
   public class FrameClassVec extends FrameKeyVec {
     public FrameClassVec(String name, TypeaheadKey key ) { super(name, key); }
+    @Override protected String[] selectValues() {
+      final Vec [] vecs = fr().vecs();
+      String[] names = new String[vecs.length];
+      int j = 0;
+      for( int i = 0; i < vecs.length; ++i) {
+        if( vecs[i].min() < vecs[i].max() &&
+            ((double)vecs[i].naCnt())/vecs[i].length() <= 0.1 &&
+            !vecs[i].isUUID() ) // No math on strings or UUIDs
+          names[j++] = fr()._names[i]; // ignore constant columns and columns with too many NAs
+      }
+      return Arrays.copyOf(names, j);
+    }
     @Override protected Vec defaultValue() {
       Frame fr = fr();
       return fr != null ? fr.vecs()[fr.vecs().length - 1] : null;
@@ -2649,7 +2661,8 @@ public class RequestArguments extends RequestStatics {
       addPrerequisite(response);
     }
     public boolean shouldIgnore(int i, Frame fr ) {
-      return _response != null && _response.value() == fr.vecs()[i];
+      return (_response != null && _response.value() == fr.vecs()[i]) ||
+        fr.vecs()[i].isUUID();
     }
     public void checkLegality(Vec v) throws IllegalArgumentException { }
     protected Comparator<Integer> colComp(final ValueArray ary){
@@ -2713,9 +2726,10 @@ public class RequestArguments extends RequestStatics {
       final Vec [] vecs = fr().vecs();
       int [] res = new int[vecs.length];
       int j = 0;
-      for(int i = 0; i < vecs.length; ++i){
+      for( int i = 0; i < vecs.length; ++i) {
         if(!(vecs[i].min() < vecs[i].max()) ||
-          (_filterNAs && ((double)vecs[i].naCnt())/vecs[i].length() > 0.1))
+          (_filterNAs && ((double)vecs[i].naCnt())/vecs[i].length() > 0.1) ||
+           vecs[i].isUUID() ) // No math on strings or UUIDs
           res[j++] = i; // ignore constant columns and columns with too many NAs
       }
       return Arrays.copyOf(res, j);
diff --git a/src/main/java/water/fvec/AppendableVec.java b/src/main/java/water/fvec/AppendableVec.java
index c51efcfad..dffa46238 100644
--- a/src/main/java/water/fvec/AppendableVec.java
+++ b/src/main/java/water/fvec/AppendableVec.java
@@ -22,6 +22,7 @@ public class AppendableVec extends Vec {
   public static final byte ENUM   = 2;
   public static final byte NUMBER = 4;
   public static final byte TIME   = 8;
+  public static final byte UUID   =16;
   byte [] _chunkTypes;
   long _naCnt;
   long _strCnt;
@@ -97,11 +98,12 @@ public class AppendableVec extends Vec {
     int nchunk = _espc.length;
     while( nchunk > 0 && _espc[nchunk-1] == 0 ) nchunk--;
     DKV.remove(chunkKey(nchunk)); // remove potential trailing key
-    boolean hasNumber = false, hasEnum = false, hasTime=false;
+    boolean hasNumber = false, hasEnum = false, hasTime=false, hasUUID=false;
     for( int i = 0; i < nchunk; ++i ) {
       if( (_chunkTypes[i] & TIME  ) != 0 ) { hasNumber = true; hasTime=true; }
       if( (_chunkTypes[i] & NUMBER) != 0 )   hasNumber = true;
       if( (_chunkTypes[i] & ENUM  ) != 0 )   hasEnum   = true;
+      if( (_chunkTypes[i] & UUID  ) != 0 )   hasUUID   = true;
     }
     // number wins, we need to go through the enum chunks and declare them all
     // NAs (chunk is considered enum iff it has only enums + possibly some nas)
@@ -110,6 +112,14 @@ public class AppendableVec extends Vec {
         if(_chunkTypes[i] == ENUM)
           DKV.put(chunkKey(i), new C0DChunk(Double.NaN, (int)_espc[i]),fs);
     }
+    // enum wins over UUID
+    if( hasUUID && hasEnum ) {
+      hasUUID=false;
+      for(int i = 0; i < nchunk; ++i)
+        if(_chunkTypes[i] == UUID)
+          DKV.put(chunkKey(i), new C0DChunk(Double.NaN, (int)_espc[i]),fs);
+    }
+
     // Make sure time is consistent
     int t = -1;
     if( hasTime ) {
@@ -138,8 +148,7 @@ public class AppendableVec extends Vec {
     }
     espc[nchunk]=x;             // Total element count in last
     // Replacement plain Vec for AppendableVec.
-    Vec vec = new Vec(_key, espc, _domain);
-    vec._time = (byte)t;        // Time parse, if any
+    Vec vec = new Vec(_key, espc, _domain, hasUUID, (byte)t);
     DKV.put(_key,vec,fs);       // Inject the header
     return vec;
   }
diff --git a/src/main/java/water/fvec/C16Chunk.java b/src/main/java/water/fvec/C16Chunk.java
new file mode 100644
index 000000000..20274c3bf
--- /dev/null
+++ b/src/main/java/water/fvec/C16Chunk.java
@@ -0,0 +1,52 @@
+package water.fvec;
+
+import water.*;
+
+/**
+ * The empty-compression function, where data is in long-pairs for UUIDs
+ */
+public class C16Chunk extends Chunk {
+  protected static final long _LO_NA = Long.MIN_VALUE;
+  protected static final long _HI_NA = 0;
+  C16Chunk( byte[] bs ) { _mem=bs; _start = -1; _len = _mem.length>>4; }
+  @Override protected final long   at8_impl( int i ) { throw new IllegalArgumentException(""at8 but 16-bit UUID"");  }
+  @Override protected final double atd_impl( int i ) { throw new IllegalArgumentException(""atd but 16-bit UUID"");  }
+  @Override protected final boolean isNA_impl( int i ) { return UDP.get8(_mem,(i<<4))==_LO_NA && UDP.get8(_mem,(i<<4)+8)==_HI_NA; }
+  @Override protected long at16l_impl(int idx) { 
+    long lo = UDP.get8(_mem,(idx<<4)  );
+    long hi = UDP.get8(_mem,(idx<<4)+8);
+    if( lo==_LO_NA && hi==_HI_NA ) throw new IllegalArgumentException(""at16 but value is missing"");
+    return lo;
+  }
+  @Override protected long at16h_impl(int idx) { 
+    long lo = UDP.get8(_mem,(idx<<4)  );
+    long hi = UDP.get8(_mem,(idx<<4)+8);
+    if( lo==_LO_NA && hi==_HI_NA ) throw new IllegalArgumentException(""at16 but value is missing"");
+    return hi;
+  }
+  @Override boolean set_impl(int idx, long l) { return false; }
+  @Override boolean set_impl(int i, double d) { return false; }
+  @Override boolean set_impl(int i, float f ) { return false; }
+  @Override boolean setNA_impl(int idx) { UDP.set8(_mem,(idx<<4),_LO_NA); UDP.set8(_mem,(idx<<4),_HI_NA); return true; }
+  @Override boolean hasFloat() { return false; }
+  @Override public AutoBuffer write(AutoBuffer bb) { return bb.putA1(_mem,_mem.length); }
+  @Override public C16Chunk read(AutoBuffer bb) {
+    _mem = bb.bufClose();
+    _start = -1;
+    _len = _mem.length>>4;
+    assert _mem.length == _len<<4;
+    return this;
+  }
+  @Override NewChunk inflate_impl(NewChunk nc) {
+    //nothing to inflate - just copy
+    nc._ls = MemoryManager.malloc8 (_len);
+    nc._ds = MemoryManager.malloc8d(_len);
+    nc._len = _len;
+    nc._len2 = _len;
+    for( int i=0; i<_len; i++ ) { //use unsafe?
+      nc._ls[i] =                         UDP.get8(_mem,(i<<4)  );
+      nc._ds[i] = Double.longBitsToDouble(UDP.get8(_mem,(i<<4)+8));
+    }
+    return nc;
+  }
+}
diff --git a/src/main/java/water/fvec/Chunk.java b/src/main/java/water/fvec/Chunk.java
index 8508a28dd..93483437e 100644
--- a/src/main/java/water/fvec/Chunk.java
+++ b/src/main/java/water/fvec/Chunk.java
@@ -56,6 +56,16 @@ public abstract class Chunk extends Iced implements Cloneable {
     throw new ArrayIndexOutOfBoundsException(""""+_start+"" <= ""+i+"" < ""+(_start+_len));
   }
 
+  public final long at16l( long i ) {
+    long x = i-_start;
+    if( 0 <= x && x < _len ) return at16l0((int)x);
+    throw new ArrayIndexOutOfBoundsException(""""+_start+"" <= ""+i+"" < ""+(_start+_len));
+  }
+  public final long at16h( long i ) {
+    long x = i-_start;
+    if( 0 <= x && x < _len ) return at16h0((int)x);
+    throw new ArrayIndexOutOfBoundsException(""""+_start+"" <= ""+i+"" < ""+(_start+_len));
+  }
 
   /** The zero-based API.  Somewhere between 10% to 30% faster in a tight-loop
    *  over the data than the generic at() API.  Probably no gain on larger
@@ -64,6 +74,8 @@ public abstract class Chunk extends Iced implements Cloneable {
   public final double  at0  ( int i ) { return _chk2 == null ? atd_impl(i) : _chk2. atd_impl(i); }
   public final long    at80 ( int i ) { return _chk2 == null ? at8_impl(i) : _chk2. at8_impl(i); }
   public final boolean isNA0( int i ) { return _chk2 == null ?isNA_impl(i) : _chk2.isNA_impl(i); }
+  public final long   at16l0( int i ) { return _chk2 == null ? at16l_impl(i) : _chk2.at16l_impl(i); }
+  public final long   at16h0( int i ) { return _chk2 == null ? at16h_impl(i) : _chk2.at16h_impl(i); }
 
 
   /** Slightly slower than 'at0' inside a chunk; goes (very) slow outside the
@@ -153,6 +165,8 @@ public abstract class Chunk extends Iced implements Cloneable {
   abstract protected double   atd_impl(int idx);
   abstract protected long     at8_impl(int idx);
   abstract protected boolean isNA_impl(int idx);
+  protected long at16l_impl(int idx) { throw new IllegalArgumentException(""Not a UUID""); }
+  protected long at16h_impl(int idx) { throw new IllegalArgumentException(""Not a UUID""); }
 
   /** Chunk-specific writer.  Returns false if the value does not fit in the
    *  current compression scheme.  */
diff --git a/src/main/java/water/fvec/Frame.java b/src/main/java/water/fvec/Frame.java
index 7a280f363..9d4b670c7 100644
--- a/src/main/java/water/fvec/Frame.java
+++ b/src/main/java/water/fvec/Frame.java
@@ -3,7 +3,6 @@ package water.fvec;
 import water.*;
 import water.H2O.H2OCountedCompleter;
 import water.exec.Flow;
-import water.fvec.Vec.VectorGroup;
 import water.util.Log;
 
 import java.io.IOException;
@@ -374,6 +373,22 @@ public class Frame extends Lockable<Frame> {
     return ds;
   }
 
+  /** true/false every Vec is a UUID */
+  public boolean[] uuids() {
+    boolean bs[] = new boolean[vecs().length];
+    for( int i=0; i<vecs().length; i++ )
+      bs[i] = vecs()[i].isUUID();
+    return bs;
+  }
+
+  /** Time status for every Vec */
+  public byte[] times() {
+    byte bs[] = new byte[vecs().length];
+    for( int i=0; i<vecs().length; i++ )
+      bs[i] = vecs()[i]._time;
+    return bs;
+  }
+
   private String[][] domains(int [] cols){
     Vec [] vecs = vecs();
     String [][] res = new String[cols.length][];
@@ -638,8 +653,9 @@ public class Frame extends Lockable<Frame> {
         for( int i = 0; i < vs.length; i++ ) {
           if(i > 0) sb.append(',');
           if(!vs[i].isNA(_row)) {
-            if(vs[i].isEnum()) sb.append('""' + vs[i]._domain[(int) vs[i].at8(_row)] + '""');
-            else if(vs[i].isInt()) sb.append(vs[i].at8(_row));
+            if( vs[i].isEnum() ) sb.append('""' + vs[i]._domain[(int) vs[i].at8(_row)] + '""');
+            else if( vs[i].isUUID() ) sb.append(PrettyPrint.UUID(vs[i].at16l(_row),vs[i].at16h(_row)));
+            else if( vs[i].isInt() ) sb.append(vs[i].at8(_row));
             else {
               // R 3.1 unfortunately changed the behavior of read.csv().
               // (Really type.convert()).
diff --git a/src/main/java/water/fvec/NewChunk.java b/src/main/java/water/fvec/NewChunk.java
index d94312448..5887a1599 100644
--- a/src/main/java/water/fvec/NewChunk.java
+++ b/src/main/java/water/fvec/NewChunk.java
@@ -26,6 +26,7 @@ public class NewChunk extends Chunk {
   int _naCnt=-1;  ","Add a non - modeling column type , the UUID .","""Added support for UUIDs in Frames and Vectors""","""Added support for UUID columns in various parts of the codebase, including data storage, processing, and display.""","It seems like you've shared some code changes with me, but you didn't provide a specific question or context. These changes appear to be related to Java code, specifically in the H2O AI project, but without more information, it's challenging for me to provide a meaningful response.

If you need help understanding the changes, they seem to involve modifications to how UUIDs (Universally Unique Identifiers) are handled in various classes, such as `FrameExtractor`, `FrameSplitter`, `Summary2`, `Job`, `PrettyPrint`, `Inspect2`, `RequestArguments`, `AppendableVec`, and others. There are also additions of new methods and classes like `C16Chunk` for handling UUIDs.

If you're looking for a commit message, it could be something like: ""Added UUID support and handling across various classes and methods, and made necessary modifications for UUID compatibility.""

Please provide more context or a specific question so I can assist you better.","The changes include enhancing data handling to support UUIDs, fixing minor issues, and refining code for better clarity and performance."
"diff --git a/blueocean-personalization/.babelrc b/blueocean-personalization/.babelrc
new file mode 100644
index 000000000..3d7749049
--- /dev/null
+++ b/blueocean-personalization/.babelrc
@@ -0,0 +1,3 @@
+{
+ ""presets"": [""es2015"", ""stage-0"", ""react""]
+}
diff --git a/blueocean-personalization/.eslintrc b/blueocean-personalization/.eslintrc
new file mode 100644
index 000000000..0f119252a
--- /dev/null
+++ b/blueocean-personalization/.eslintrc
@@ -0,0 +1,8 @@
+{
+  ""extends"": ""@jenkins-cd/jenkins/react"",
+  ""rules"": {
+    ""react/jsx-no-bind"": 0,
+    ""no-unused-vars"": [2, {""varsIgnorePattern"": ""^React$""}],
+    ""max-len"": [1, 160, 4]
+  }
+}
diff --git a/blueocean-personalization/LICENSE.txt b/blueocean-personalization/LICENSE.txt
new file mode 100644
index 000000000..26cfa52a0
--- /dev/null
+++ b/blueocean-personalization/LICENSE.txt
@@ -0,0 +1,21 @@
+The MIT License
+
+Copyright (c) 2016 CloudBees Inc and a number of other of contributors
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the ""Software""), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/blueocean-personalization/README.md b/blueocean-personalization/README.md
new file mode 100644
index 000000000..e69de29bb
diff --git a/blueocean-personalization/gulpfile.js b/blueocean-personalization/gulpfile.js
new file mode 100644
index 000000000..93509ff65
--- /dev/null
+++ b/blueocean-personalization/gulpfile.js
@@ -0,0 +1,34 @@
+//
+// See https://github.com/jenkinsci/js-builder
+//
+var builder = require('@jenkins-cd/js-builder')
+    .withExternalModuleMapping('react-router', 'react:react-router');
+
+//
+// Redefine the ""test"" task to use mocha and support es6.
+// We might build this into js-builder, but is ok here
+// for now.
+//
+builder.defineTask('test', function() {
+    var mocha = require('gulp-mocha');
+    var babel = require('babel-core/register');
+
+    // Allow running of a specific test
+    // e.g.  gulp test --test pipelines
+    // will run the pipelines-spec.js
+    var filter = builder.args.argvValue('--test', '*');
+
+    builder.gulp.src('src/test/js/' + filter + '-spec.js')
+        .pipe(mocha({
+            compilers: {js: babel}
+        })).on('error', function(e) {
+            if (builder.isRetest()) {
+                // ignore test failures if we are running retest.
+                return;
+            }
+            throw e;
+        });
+});
+builder.gulp.task('lint:watch', function () {
+    builder.gulp.watch(['src/main/js/**/*.js', 'src/main/js/**/*.jsx'], ['lint']);
+});
diff --git a/blueocean-personalization/package.json b/blueocean-personalization/package.json
new file mode 100644
index 000000000..5ba4eceaf
--- /dev/null
+++ b/blueocean-personalization/package.json
@@ -0,0 +1,66 @@
+{
+  ""name"": ""blueocean-personalization"",
+  ""version"": ""0.0.1"",
+  ""scripts"": {
+    ""lint"": ""gulp lint"",
+    ""lint:fix"": ""gulp lint --fixLint"",
+    ""lint:watch"": ""gulp lint:watch --continueOnLint"",
+    ""test"": ""gulp test"",
+    ""test:watch"": ""gulp test:watch"",
+    ""bundle"": ""gulp bundle"",
+    ""bundle:watch"": ""gulp bundle:watch""
+  },
+  ""devDependencies"": {
+    ""@jenkins-cd/eslint-config-jenkins"": ""0.0.2"",
+    ""@jenkins-cd/js-builder"": ""0.0.34"",
+    ""@jenkins-cd/js-test"": ""1.1.1"",
+    ""babel"": ""^6.5.2"",
+    ""babel-core"": ""^6.7.6"",
+    ""babel-eslint"": ""^6.0.2"",
+    ""babel-preset-es2015"": ""^6.6.0"",
+    ""babel-preset-react"": ""^6.5.0"",
+    ""babel-preset-stage-0"": ""^6.5.0"",
+    ""chai"": ""^3.5.0"",
+    ""enzyme"": ""^2.2.0"",
+    ""eslint"": ""2.8.0"",
+    ""eslint-plugin-react"": ""^5.0.1"",
+    ""gulp"": ""^3.9.1"",
+    ""gulp-mocha"": ""^2.2.0"",
+    ""mocha"": ""^2.4.5"",
+    ""nock"": ""^8.0.0""
+  },
+  ""dependencies"": {
+    ""@jenkins-cd/design-language"": ""0.0.58"",
+    ""@jenkins-cd/js-extensions"": ""0.0.15"",
+    ""@jenkins-cd/js-modules"": ""0.0.5"",
+    ""@jenkins-cd/sse-gateway"": ""0.0.5"",
+    ""immutable"": ""3.8.1"",
+    ""isomorphic-fetch"": ""2.2.1"",
+    ""keymirror"": ""0.1.1"",
+    ""moment"": ""2.13.0"",
+    ""moment-duration-format"": ""1.3.0"",
+    ""react"": ""15.0.1"",
+    ""react-dom"": ""15.0.1"",
+    ""react-material-icons-blue"": ""1.0.4"",
+    ""react-redux"": ""4.4.5"",
+    ""react-router"": ""2.3.0"",
+    ""redux"": ""3.5.2"",
+    ""redux-thunk"": ""2.0.1"",
+    ""reselect"": ""2.5.1"",
+    ""window-handle"": ""1.0.0""
+  },
+  ""jenkinscd"": {
+    ""extDependencies"": [
+      ""@jenkins-cd/sse-gateway"",
+      ""immutable"",
+      ""isomorphic-fetch"",
+      ""react-router"",
+      ""keymirror"",
+      ""react-redux"",
+      ""react-router"",
+      ""redux"",
+      ""redux-thunk"",
+      ""reselect""
+    ]
+  }
+}
diff --git a/blueocean-personalization/pom.xml b/blueocean-personalization/pom.xml
new file mode 100644
index 000000000..b54957c51
--- /dev/null
+++ b/blueocean-personalization/pom.xml
@@ -0,0 +1,19 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <parent>
+        <artifactId>blueocean-parent</artifactId>
+        <groupId>io.jenkins.blueocean</groupId>
+        <version>1.0-alpha-1-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <name>BlueOcean :: Personalization</name>
+    <artifactId>blueocean-personalization</artifactId>
+    <packaging>hpi</packaging>
+
+    <dependencies>
+    </dependencies>
+
+</project>
diff --git a/blueocean-personalization/src/main/js/components/ActionLink.jsx b/blueocean-personalization/src/main/js/components/ActionLink.jsx
new file mode 100644
index 000000000..53262bf2b
--- /dev/null
+++ b/blueocean-personalization/src/main/js/components/ActionLink.jsx
@@ -0,0 +1,7 @@
+import React, { Component } from 'react';
+
+export default class ActionLink extends Component {
+    render() {
+        return <div>Action!</div>;
+    }
+}
diff --git a/blueocean-personalization/src/main/js/jenkins-js-extension.yaml b/blueocean-personalization/src/main/js/jenkins-js-extension.yaml
new file mode 100644
index 000000000..f97a2c91e
--- /dev/null
+++ b/blueocean-personalization/src/main/js/jenkins-js-extension.yaml
@@ -0,0 +1,6 @@
+# Extensions in this plugin
+# NB: ""component"" currently maps to modules, not ""symbols"" so make sure to ""export default""
+# WARNING: If you change this you'll have to change io.jenkins.blueocean.jsextensions.JenkinsJSExtensionsTest as well :(
+extensions:
+  - component: components/ActionLink
+    extensionPoint: jenkins.dashboard.item.action
diff --git a/blueocean-personalization/src/main/less/extensions.less b/blueocean-personalization/src/main/less/extensions.less
new file mode 100644
index 000000000..e69de29bb
diff --git a/blueocean-personalization/src/main/resources/index.jelly b/blueocean-personalization/src/main/resources/index.jelly
new file mode 100644
index 000000000..c2412efc5
--- /dev/null
+++ b/blueocean-personalization/src/main/resources/index.jelly
@@ -0,0 +1,4 @@
+<?jelly escape-by-default='true'?>
+<div>
+  Blue Ocean Personalization
+</div>","add a new Maven module for the Personalization plugin , with a simple test EP component","""Initial commit for Blue Ocean Personalization plugin""","""Initial setup for Blue Ocean Personalization plugin, including configuration files, dependencies, and initial component implementation.""","""Adding initial files for Blue Ocean Personalization plugin""

This commit appears to be initializing a new project for a Blue Ocean Personalization plugin. It includes the addition of various configuration files (such as `.babelrc`, `.eslintrc`, `gulpfile.js`, `package.json`, and `pom.xml`), a license file, a README file, and some initial source code files for the plugin (such as `ActionLink.jsx` and `jenkins-js-extension.yaml`). It also includes the addition of a `node_modules` directory, which suggests that the project dependencies have been installed.","Initial setup of Blue Ocean Personalization plugin including build configuration, dependencies, and sample React component."
"diff --git a/tests/com/goide/runconfig/testing/GoUnitTestEventsConverterTest.java b/tests/com/goide/runconfig/testing/GoUnitTestEventsConverterTest.java
index 6602683d7..fb201b80d 100644
--- a/tests/com/goide/runconfig/testing/GoUnitTestEventsConverterTest.java
+++ b/tests/com/goide/runconfig/testing/GoUnitTestEventsConverterTest.java
@@ -6,6 +6,7 @@ import com.intellij.execution.executors.DefaultRunExecutor;
 import com.intellij.execution.process.ProcessOutputTypes;
 import com.intellij.openapi.util.io.FileUtil;
 import com.intellij.openapi.util.text.StringUtil;
+import com.intellij.util.SystemProperties;
 import jetbrains.buildServer.messages.serviceMessages.*;
 import org.jetbrains.annotations.NotNull;
 
@@ -43,9 +44,8 @@ public class GoUnitTestEventsConverterTest extends GoCodeInsightFixtureTestCase
 
     String inputDataFilename = getTestName(true) + "".txt"";
     LoggingServiceMessageVisitor serviceMessageVisitor = new LoggingServiceMessageVisitor();
-    String lineSeparator = System.getProperty(""line.separator"");
-    // todo: replace with FileUtil.loadLines(String) in 13.1
-    for (String line : StringUtil.splitByLines(FileUtil.loadFile(new File(getTestDataPath() + ""/"" + inputDataFilename)))) {
+    String lineSeparator = SystemProperties.getLineSeparator();
+    for (String line : FileUtil.loadLines(new File(getTestDataPath() + ""/"" + inputDataFilename))) {
       converter.processServiceMessages(line + lineSeparator, ProcessOutputTypes.STDOUT, serviceMessageVisitor);
     }
     assertSameLinesWithFile(getTestDataPath() + ""/"" + getTestName(true) + ""-expected.txt"", serviceMessageVisitor.getLog());",remove todo,"""Refactor GoUnitTestEventsConverterTest to use SystemProperties and FileUtil.loadLines""","""Refactor GoUnitTestEventsConverterTest to use SystemProperties.getLineSeparator() and FileUtil.loadLines() for improved performance and consistency.""","""Updated line separator retrieval and file loading in GoUnitTestEventsConverterTest""

Explanation:
The commit updates the GoUnitTestEventsConverterTest.java file by replacing the way the line separator is retrieved and the way lines are loaded from a file.

1. The line separator retrieval is updated from using `System.getProperty(""line.separator"")` to using `SystemProperties.getLineSeparator()`.
2. The file loading is updated from using `StringUtil.splitByLines(FileUtil.loadFile(new File(getTestDataPath() + ""/"" + inputDataFilename)))` to using `FileUtil.loadLines(new File(getTestDataPath() + ""/"" + inputDataFilename))`.

These changes improve the code readability and maintainability by using more direct methods to achieve the same goals. The todo comment suggesting the use of `FileUtil.loadLines(String)` in 13.1 is also removed since the change has been made.",Refactored GoUnitTestEventsConverterTest to use SystemProperties for line separator and updated file loading using FileUtil.loadLines.
"diff --git a/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java b/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
index e51679c50..ae0cd3bb5 100644
--- a/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
+++ b/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
@@ -177,12 +177,11 @@ public class MarathonScheduler implements IScheduler {
   }
 
   protected ArrayNode getFetchList(ObjectMapper mapper) {
-    String heronCoreURI = Context.corePackageUri(config);
-    String topologyURI = Runtime.topologyPackageUri(runtime).toString();
+    final String topologyURI = Runtime.topologyPackageUri(runtime).toString();
 
-    String[] uris = new String[]{heronCoreURI, topologyURI};
+    final String[] uris = new String[]{topologyURI};
 
-    ArrayNode urisNode = mapper.createArrayNode();
+    final ArrayNode urisNode = mapper.createArrayNode();
     for (String uri : uris) {
       ObjectNode uriObject = mapper.createObjectNode();
       uriObject.put(MarathonConstants.URI, uri);
diff --git a/website/content/docs/operators/deployment/schedulers/dcos.md b/website/content/docs/operators/deployment/schedulers/dcos.md
index bde49f45d..bf64cc917 100644
--- a/website/content/docs/operators/deployment/schedulers/dcos.md
+++ b/website/content/docs/operators/deployment/schedulers/dcos.md
@@ -93,7 +93,8 @@ heron.class.launcher:                        com.twitter.heron.scheduler.maratho
 # location of java - pick it up from shell environment
 heron.directory.sandbox.java.home:          $JAVA_HOME
 
-heron.directory.home:                       ""./heron-core/""
+# location of heron - pick it up from shell environment
+heron.directory.home:                       $HERON_HOME
 
 heron.directory.conf:                       ""./heron-conf/""
 
@@ -106,11 +107,8 @@ heron.marathon.scheduler.auth.token: ""<auth_token>""
 # Invoke the IScheduler as a library directly
 heron.scheduler.is.service:                  False
 
-# location of the core package
-heron.package.core.uri:  https://github.com/twitter/heron/releases/download/0.14.7/heron-core-0.14.7-ubuntu.tar.gz
-
-# docker repo for executor
-heron.executor.docker.image: 'ndustrialio/heron-executor:jre8'
+# docker repo for heron with core packages installed
+heron.executor.docker.image: 'streamlio/heron:latest-ubuntu14.04'
 ```
 
 ",Remove heron core fetching for MarathonScheduler .,"""Remove heron-core package URI from MarathonScheduler and update heron.executor.docker.image to use streamlio/heron:latest-ubuntu14.04""","""Refactor MarathonScheduler to use topology package URI and remove hardcoded Heron Core URI. Update DCOS scheduler configuration to use environment variables for Heron and Java locations.""","""Update MarathonScheduler to only fetch topology package and use HERON_HOME in config

In the MarathonScheduler, the method getFetchList has been modified to only include the topology package URI in the list of URIs to fetch. Previously, it also included the Heron core package URI.

Additionally, in the configuration for DC/OS deployment, the heron.directory.home property has been updated to use the HERON_HOME environment variable, and the heron.package.core.uri property has been removed as it is no longer needed. The heron.executor.docker.image property has also been updated to a new Docker image.""","""Remove heronCoreURI from MarathonScheduler and update dcos.md for HERON_HOME usage and new Docker image."""
"diff --git a/src/java/org/apache/cassandra/utils/BloomFilter.java b/src/java/org/apache/cassandra/utils/BloomFilter.java
index 19cff63ef4..0cc78ed06c 100644
--- a/src/java/org/apache/cassandra/utils/BloomFilter.java
+++ b/src/java/org/apache/cassandra/utils/BloomFilter.java
@@ -70,7 +70,8 @@ public class BloomFilter extends Filter
                                       numElements, bucketsPerElement, targetBucketsPerElem));
         }
         BloomCalculations.BloomSpecification spec = BloomCalculations.computeBloomSpec(bucketsPerElement);
-        logger.trace(""Creating bloom filter for {} elements and spec {}"", numElements, spec);
+        if (logger.isTraceEnabled())
+            logger.trace(""Creating bloom filter for {} elements and spec {}"", numElements, spec);
         return new BloomFilter(spec.K, bucketsFor(numElements, spec.bucketsPerElement));
     }
 ",Add trace check before logging .,"""Optimize BloomFilter logging by checking if trace is enabled before logging""","""Add conditional logging for Bloom filter creation""","""Add conditional logging statement in BloomFilter.java""

Explanation: The diff shows that a conditional logging statement has been added to the BloomFilter.java class. The logging statement will only execute if the logger is trace enabled. This is done to improve performance by avoiding the cost of constructing the log message if the log level is not set to trace.","""Add logger trace level check before logging bloom filter creation in BloomFilter.java."""
"diff --git a/pinot-core/src/main/java/com/linkedin/pinot/core/operator/filter/StarTreeIndexOperator.java b/pinot-core/src/main/java/com/linkedin/pinot/core/operator/filter/StarTreeIndexOperator.java
index a2e6657f76..da4e6be5c8 100644
--- a/pinot-core/src/main/java/com/linkedin/pinot/core/operator/filter/StarTreeIndexOperator.java
+++ b/pinot-core/src/main/java/com/linkedin/pinot/core/operator/filter/StarTreeIndexOperator.java
@@ -33,7 +33,6 @@ import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.HashBiMap;
 import com.linkedin.pinot.common.request.BrokerRequest;
-import com.linkedin.pinot.common.request.FilterOperator;
 import com.linkedin.pinot.common.request.GroupBy;
 import com.linkedin.pinot.common.utils.request.FilterQueryTree;
 import com.linkedin.pinot.common.utils.request.RequestUtils;
@@ -43,7 +42,6 @@ import com.linkedin.pinot.core.common.DataSource;
 import com.linkedin.pinot.core.common.DataSourceMetadata;
 import com.linkedin.pinot.core.common.Operator;
 import com.linkedin.pinot.core.common.Predicate;
-import com.linkedin.pinot.core.common.predicate.EqPredicate;
 import com.linkedin.pinot.core.indexsegment.IndexSegment;
 import com.linkedin.pinot.core.operator.blocks.BaseFilterBlock;
 import com.linkedin.pinot.core.operator.dociditerators.BitmapDocIdIterator;
@@ -54,13 +52,14 @@ public class StarTreeIndexOperator extends BaseFilterOperator {
   private static final Logger LOGGER = LoggerFactory.getLogger(StarTreeIndexOperator.class);
   private IndexSegment segment;
 
-  // predicates map
+  // Predicates map
   Map<String, PredicateEntry> predicatesMap;
 
-  // group by columns
+  // Group by columns
   Set<String> groupByColumns;
 
-  Set<String> equalityPredicateColumns;
+  // Columns with predicate on them
+  Set<String> predicateColumns;
 
   boolean emptyResult = false;
   private BrokerRequest brokerRequest;
@@ -68,7 +67,7 @@ public class StarTreeIndexOperator extends BaseFilterOperator {
   public StarTreeIndexOperator(IndexSegment segment, BrokerRequest brokerRequest) {
     this.segment = segment;
     this.brokerRequest = brokerRequest;
-    equalityPredicateColumns = new HashSet<>();
+    predicateColumns = new HashSet<>();
     groupByColumns = new HashSet<>();
     predicatesMap = new HashMap<>();
     initPredicatesToEvaluate();
@@ -101,28 +100,19 @@ public class StarTreeIndexOperator extends BaseFilterOperator {
     Predicate predicate = Predicate.newPredicate(childFilter);
     Dictionary dictionary = segment.getDataSource(column).getDictionary();
     PredicateEntry predicateEntry = null;
-    if (childFilter.getOperator() == FilterOperator.EQUALITY) {
-      EqPredicate eqPredicate = (EqPredicate) predicate;
-      // Computing dictionaryId allows us early termination and avoids multiple looks up during tree
-      // traversal
-      int dictId = dictionary.indexOf(eqPredicate.getEqualsValue());
-      if (dictId < 0) {
-        // Empty result
-        emptyResult = true;
-      }
-      predicateEntry = new PredicateEntry(predicate, dictId);
-      equalityPredicateColumns.add(column);
-    } else {
-      // If dictionary does not have any values that satisfy the predicate, set emptyResults to
-      // true.
-      PredicateEvaluator predicateEvaluator =
-          PredicateEvaluatorProvider.getPredicateFunctionFor(predicate, dictionary);
-      if (predicateEvaluator.alwaysFalse()) {
-        emptyResult = true;
-      }
-      // Store this predicate, we will have to apply it later
-      predicateEntry = new PredicateEntry(predicate, -1);
+
+    PredicateEvaluator predicateEvaluator =
+        PredicateEvaluatorProvider.getPredicateFunctionFor(predicate, dictionary);
+
+    // If dictionary does not have any values that satisfy the predicate, set emptyResults to
+    // true.
+    if (predicateEvaluator.alwaysFalse()) {
+      emptyResult = true;
     }
+
+    // Store this predicate, we will have to apply it later
+    predicateEntry = new PredicateEntry(predicate, predicateEvaluator);
+    predicateColumns.add(column);
     predicatesMap.put(column, predicateEntry);
   }
 
@@ -408,16 +398,19 @@ public class StarTreeIndexOperator extends BaseFilterOperator {
       HashSet<String> remainingGroupByColumns) {
     Map<Integer, StarTreeIndexNode> children = node.getChildren();
 
-    if (equalityPredicateColumns.contains(column)) {
+    if (predicateColumns.contains(column)) {
       // Check if there is exact match filter on this column
-      int nextValueId;
       PredicateEntry predicateEntry = predicatesMap.get(column);
-      nextValueId = predicateEntry.dictionaryId;
+
       remainingPredicateColumns.remove(column);
       remainingGroupByColumns.remove(column);
-      if (children.containsKey(nextValueId)) {
-        addNodeToSearchQueue(searchQueue, children.get(nextValueId), remainingPredicateColumns,
-            remainingGroupByColumns);
+
+      int[] matchingDictionaryIds = predicateEntry.predicateEvaluator.getMatchingDictionaryIds();
+      for (int matchingDictionaryId : matchingDictionaryIds) {
+        if (children.containsKey(matchingDictionaryId)) {
+          addNodeToSearchQueue(searchQueue, children.get(matchingDictionaryId), remainingPredicateColumns,
+              remainingGroupByColumns);
+        }
       }
     } else {
       int nextValueId;
@@ -473,11 +466,11 @@ public class StarTreeIndexOperator extends BaseFilterOperator {
 
   class PredicateEntry {
     Predicate predicate;
-    int dictionaryId;
+    private PredicateEvaluator predicateEvaluator;
 
-    public PredicateEntry(Predicate predicate, int dictionaryId) {
+    public PredicateEntry(Predicate predicate, PredicateEvaluator predicateEvaluator) {
       this.predicate = predicate;
-      this.dictionaryId = dictionaryId;
+      this.predicateEvaluator = predicateEvaluator;
     }
   }
 }
diff --git a/pinot-integration-tests/src/test/java/com/linkedin/pinot/integration/tests/StarTreeClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/com/linkedin/pinot/integration/tests/StarTreeClusterIntegrationTest.java
index f9c6681fb7..23e709e7ee 100644
--- a/pinot-integration-tests/src/test/java/com/linkedin/pinot/integration/tests/StarTreeClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/com/linkedin/pinot/integration/tests/StarTreeClusterIntegrationTest.java
@@ -339,4 +339,28 @@ public class StarTreeClusterIntegrationTest extends ClusterTest {
     query = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay > 0 AND ArrDelay > 0 AND OriginStateName = 'Massachusetts'\n"";
     testOneQuery(query, false);
   }
+
+  /**
+   * Tests queries with non-equality predicates
+   */
+  @Test
+  public void testNonEqualityPredicates() {
+    String query;
+
+    // 'Range' query
+    query = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE DepDelay between 0 and 10000\n"";
+    testOneQuery(query, false);
+
+    // 'IN' query
+    query = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE Origin IN ('JFK', 'LAX', 'DCW')\n"";
+    testOneQuery(query, false);
+
+    // 'NOT IN' Query
+    query = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE Origin NOT IN ('JFK', 'LAX', 'DCW')\n"";
+    testOneQuery(query, false);
+
+    // 'NOT EQ' Query
+    query = ""SELECT SUM(DepDelayMinutes) FROM myStarTable WHERE Origin <> 'JFK'\n"";
+    testOneQuery(query, false);
+  }
 }",Enhance StarTreeIndexOperator to support all predicate ( <issue_id> ) .,"""Support non-equality predicates in StarTreeIndexOperator""

This commit message accurately reflects the changes made in the code. The changes include removing the dependency on equality predicates and adding support for non-equality predicates such as range, IN, NOT IN, and NOT EQ. The test cases have also been updated to include tests for these new predicates.","""Refactor StarTreeIndexOperator to support non-equality predicates""

This commit message accurately reflects the changes made in the diff, which include removing the equality predicate columns and replacing them with a more general predicate columns, and updating the code to handle non-equality predicates.","""Update StarTreeIndexOperator to handle non-equality predicates and add test for non-equality predicates in StarTreeClusterIntegrationTest""

Explanation:

The commit includes changes to the StarTreeIndexOperator class to handle non-equality predicates. The changes include the addition of a new field 'predicateColumns' to keep track of columns with predicates, updates to the constructor to initialize the new field and store the predicate evaluator for each predicate, and updates to the 'search' method to handle non-equality predicates.

The commit also includes a new test method 'testNonEqualityPredicates' in the StarTreeClusterIntegrationTest class to test queries with non-equality predicates. The new test method includes four test cases for range, IN, NOT IN, and NOT EQ predicates.

Therefore, a suitable commit message would be ""Update StarTreeIndexOperator to handle non-equality predicates and add test for non-equality predicates in StarTreeClusterIntegrationTest"".","""Refactor StarTreeIndexOperator to support non-equality predicates and add corresponding integration tests."""
"diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java
index 1118d6e9bb8..5195fd11978 100644
--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java
+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java
@@ -137,10 +137,10 @@ public class TermsAggregatorFactory extends ValuesSourceAggregatorFactory<Values
             if (valuesSource instanceof ValuesSource.Bytes.WithOrdinals == false) {
                 execution = ExecutionMode.MAP;
             }
-            final long maxOrd = execution == ExecutionMode.GLOBAL_ORDINALS ? getMaxOrd(valuesSource, searchContext.searcher()) : -1;
             if (execution == null) {
                 execution = ExecutionMode.GLOBAL_ORDINALS;
             }
+            final long maxOrd = execution == ExecutionMode.GLOBAL_ORDINALS ? getMaxOrd(valuesSource, searchContext.searcher()) : -1;
             SubAggCollectionMode cm = collectMode;
             if (cm == null) {
                 cm = SubAggCollectionMode.DEPTH_FIRST;
diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorTests.java b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorTests.java
index 57b255a1573..3ea22e456e8 100644
--- a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorTests.java
+++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorTests.java
@@ -137,7 +137,7 @@ public class TermsAggregatorTests extends AggregatorTestCase {
             CoreValuesSourceType.BYTES));
     }
 
-    public void testGlobalOrdinalsExecutionHint() throws Exception {
+    public void testUsesGlobalOrdinalsByDefault() throws Exception {
         randomizeAggregatorImpl = false;
 
         Directory directory = newDirectory();
@@ -148,8 +148,7 @@ public class TermsAggregatorTests extends AggregatorTestCase {
         IndexSearcher indexSearcher = new IndexSearcher(indexReader);
 
         TermsAggregationBuilder aggregationBuilder = new TermsAggregationBuilder(""_name"", ValueType.STRING)
-            .field(""string"")
-            .collectMode(Aggregator.SubAggCollectionMode.BREADTH_FIRST);
+            .field(""string"");
         MappedFieldType fieldType = new KeywordFieldMapper.KeywordFieldType();
         fieldType.setName(""string"");
         fieldType.setHasDocValues(true);
@@ -159,11 +158,29 @@ public class TermsAggregatorTests extends AggregatorTestCase {
         GlobalOrdinalsStringTermsAggregator globalAgg = (GlobalOrdinalsStringTermsAggregator) aggregator;
         assertFalse(globalAgg.remapGlobalOrds());
 
+        // Infers depth_first because the maxOrd is 0 which is less than the size
         aggregationBuilder
             .subAggregation(AggregationBuilders.cardinality(""card"").field(""string""));
         aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);
         assertThat(aggregator, instanceOf(GlobalOrdinalsStringTermsAggregator.class));
         globalAgg = (GlobalOrdinalsStringTermsAggregator) aggregator;
+        assertThat(globalAgg.collectMode, equalTo(Aggregator.SubAggCollectionMode.DEPTH_FIRST));
+        assertTrue(globalAgg.remapGlobalOrds());
+
+        aggregationBuilder
+            .collectMode(Aggregator.SubAggCollectionMode.DEPTH_FIRST);
+        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);
+        assertThat(aggregator, instanceOf(GlobalOrdinalsStringTermsAggregator.class));
+        globalAgg = (GlobalOrdinalsStringTermsAggregator) aggregator;
+        assertThat(globalAgg.collectMode, equalTo(Aggregator.SubAggCollectionMode.DEPTH_FIRST));
+        assertTrue(globalAgg.remapGlobalOrds());
+
+        aggregationBuilder
+            .collectMode(Aggregator.SubAggCollectionMode.BREADTH_FIRST);
+        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);
+        assertThat(aggregator, instanceOf(GlobalOrdinalsStringTermsAggregator.class));
+        globalAgg = (GlobalOrdinalsStringTermsAggregator) aggregator;
+        assertThat(globalAgg.collectMode, equalTo(Aggregator.SubAggCollectionMode.BREADTH_FIRST));
         assertFalse(globalAgg.remapGlobalOrds());
 
         aggregationBuilder",Allow terms agg to default to depth first ( <issue_id> ) ( <issue_id> ) .,"""Terms Aggregator: Infer SubAggCollectionMode when not specified and use Global Ordinals by default""","""Refactor TermsAggregatorFactory to use default execution mode and fix test cases to reflect the change""","""Fix null pointer exception in TermsAggregatorFactory""

The commit changes the order of operations in the `TermsAggregatorFactory` class to prevent a null pointer exception. Specifically, it moves the initialization of the `maxOrd` variable after the `execution` variable is assigned a non-null value. This ensures that the `getMaxOrd` method is only called when `execution` is not null, preventing the null pointer exception.

Additionally, the commit updates a test method name in `TermsAggregatorTests` class from `testGlobalOrdinalsExecutionHint` to `testUsesGlobalOrdinalsByDefault`. This change does not affect the functionality of the code, but rather improves the clarity of the test method name.",Adjusted default execution mode for TermsAggregator and updated relevant tests to reflect priority for global ordinals usage.
"diff --git a/Makefile b/Makefile
index 9ffa9685b..e88187656 100644
--- a/Makefile
+++ b/Makefile
@@ -42,9 +42,9 @@ release_pkg: helm_pkg
 release_helm_version:
 	echo ""Updating default image tags in Helm Chart to $(RELEASE_VERSION)""
 	# Update default image tag in chart values.yaml to RELEASE_VERSION
-	sed -i 's/\(tag: \)latest/\1$(RELEASE_VERSION)/g' $(CHART_PATH)values.yaml
+	sed -i 's/\(tag: \).*/\1$(RELEASE_VERSION)/g' $(CHART_PATH)values.yaml
 	# Update default image tag in chart README.md config grid with RELEASE_VERSION
-	sed -i 's/\(image\.tag[^\n]*\| \)`latest`/\1`$(RELEASE_VERSION)`/g' $(CHART_PATH)README.md
+	sed -i 's/\(image\.tag[^\n]*| \)`.*`/\1`$(RELEASE_VERSION)`/g' $(CHART_PATH)README.md
 
 helm_pkg:
 	# Copying unarchived Helm Chart to release directory",Fix some Makefiles issues with seding Helm Chart files during release process - between RCs etc .,"""Update Helm Chart image tags to use RELEASE_VERSION""","""Update default image tags in Helm Chart to use RELEASE_VERSION consistently""","""Update default image tags in Helm Chart to new release version""

The changes made in this commit modify the `Makefile` used for building and releasing a software package. Specifically, the `release_helm_version` target has been updated to change the default image tags in the Helm Chart's `values.yaml` and `README.md` files to a new release version specified by the `RELEASE_VERSION` variable.

In the `values.yaml` file, the `sed` command searches for lines containing the string `tag: latest` and replaces `latest` with the value of `RELEASE_VERSION`. Similarly, in the `README.md` file, the `sed` command searches for lines containing the string `image.tag` followed by any number of characters that are not a newline, and replaces the tag value with the value of `RELEASE_VERSION`.

These changes ensure that when a new release is built and packaged, the Helm Chart will reference the correct image tags for the release version.",Update sed commands in Makefile for more accurate versioning in Helm chart files.
"diff --git a/test/java/net/yacy/kelondro/util/FileUtilsTest.java b/test/java/net/yacy/kelondro/util/FileUtilsTest.java
index a01341f1b..7d6ced99e 100644
--- a/test/java/net/yacy/kelondro/util/FileUtilsTest.java
+++ b/test/java/net/yacy/kelondro/util/FileUtilsTest.java
@@ -26,6 +26,8 @@ import java.io.ByteArrayOutputStream;
 import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.StringReader;
+import java.io.StringWriter;
 import java.nio.charset.StandardCharsets;
 
 import org.junit.Assert;
@@ -152,6 +154,60 @@ public class FileUtilsTest {
 		}
 	}
 	
+	/**
+	 * Copy reader : normal case
+	 * @throws IOException when a read/write error occurred
+	 */
+	@Test
+	public void testCopyReaderWriter() throws IOException {
+		StringReader source = new StringReader(""A test string"");
+		StringWriter dest = new StringWriter();
+		
+		try {
+			FileUtils.copy(source, dest);
+		} finally {
+			source.close();
+			dest.close();
+		}
+		Assert.assertEquals(""A test string"", dest.toString());
+	}
+	
+	/**
+	 * Copy reader : empty input
+	 * @throws IOException when a read/write error occurred
+	 */
+	@Test
+	public void testCopyEmptyReaderWriter() throws IOException {
+		StringReader source = new StringReader("""");
+		StringWriter dest = new StringWriter();
+		try {
+			FileUtils.copy(source, dest);
+		} finally {
+			source.close();
+			dest.close();
+		}
+		Assert.assertEquals("""", dest.toString());
+	}
+	
+	/**
+	 * Copy reader : writer with existing content
+	 * @throws IOException when a read/write error occurred
+	 */
+	@Test
+	public void testCopyReaderWriterNotEmpty() throws IOException {
+		StringReader source = new StringReader(""An input String"");
+		StringWriter dest = new StringWriter();
+		
+		try {
+			dest.write(""Non empty out stream."");
+			FileUtils.copy(source, dest);
+		} finally {
+			source.close();
+			dest.close();
+		}
+		Assert.assertEquals(""Non empty out stream.An input String"", dest.toString());
+	}
+		
 	/**
 	 * Test reading n bytes in a stream
 	 * @throws IOException when a read/write error occurred",Added some unit tests on FileUtils .,"""Added tests for FileUtils.copy(Reader, Writer) method""",Added test cases for FileUtils.copy method with StringReader and StringWriter.,"This commit adds several new test methods to the FileUtilsTest class in the net.yacy.kelondro.util package. Specifically, it adds three new tests for the FileUtils.copy(Reader, Writer) method, which copies the contents of a Reader to a Writer. The new tests cover the following cases:

* Copying a non-empty string from a StringReader to a StringWriter
* Copying an empty string from a StringReader to a StringWriter
* Copying a non-empty string from a StringReader to a StringWriter that already contains some data

In addition to these new tests, the commit also includes some minor formatting changes to the existing code. The overall purpose of these changes is to improve the test coverage of the FileUtils class and ensure that its methods work correctly in a variety of scenarios.","""Add unit tests for reader and writer copy operations in FileUtilsTest.java"""
"diff --git a/src/main/java/org/tron/core/capsule/TransactionCapsule.java b/src/main/java/org/tron/core/capsule/TransactionCapsule.java
index 5fdebe6b1..d5c3c377b 100755
--- a/src/main/java/org/tron/core/capsule/TransactionCapsule.java
+++ b/src/main/java/org/tron/core/capsule/TransactionCapsule.java
@@ -38,6 +38,7 @@ import org.tron.common.crypto.ECKey;
 import org.tron.common.crypto.ECKey.ECDSASignature;
 import org.tron.common.runtime.Runtime;
 import org.tron.common.runtime.vm.program.Program.BadJumpDestinationException;
+import org.tron.common.runtime.vm.program.Program.BytecodeExecutionException;
 import org.tron.common.runtime.vm.program.Program.IllegalOperationException;
 import org.tron.common.runtime.vm.program.Program.JVMStackOverFlowException;
 import org.tron.common.runtime.vm.program.Program.OutOfEnergyException;
@@ -47,8 +48,10 @@ import org.tron.common.runtime.vm.program.Program.PrecompiledContractException;
 import org.tron.common.runtime.vm.program.Program.StackTooLargeException;
 import org.tron.common.runtime.vm.program.Program.StackTooSmallException;
 import org.tron.common.utils.ByteArray;
+import org.tron.common.utils.ForkController;
 import org.tron.common.utils.Sha256Hash;
 import org.tron.core.Wallet;
+import org.tron.core.config.Parameter.ForkBlockVersionEnum;
 import org.tron.core.db.AccountStore;
 import org.tron.core.db.Manager;
 import org.tron.core.db.TransactionTrace;
@@ -772,6 +775,12 @@ public class TransactionCapsule implements ProtoCapsule<Transaction> {
       this.setResultCode(contractResult.JVM_STACK_OVER_FLOW);
       return;
     }
+    if (ForkController.instance().pass(ForkBlockVersionEnum.VERSION_3_5)){
+      if (exception instanceof BytecodeExecutionException) {
+        this.setResultCode(contractResult.BYTECODE_EXECUTION_EXCEPTION);
+        return;
+      }
+    }
     this.setResultCode(contractResult.UNKNOWN);
     return;
   }
diff --git a/src/main/java/org/tron/core/db/TransactionTrace.java b/src/main/java/org/tron/core/db/TransactionTrace.java
index 229c80448..6ebea5e0c 100644
--- a/src/main/java/org/tron/core/db/TransactionTrace.java
+++ b/src/main/java/org/tron/core/db/TransactionTrace.java
@@ -13,6 +13,7 @@ import org.tron.common.runtime.Runtime;
 import org.tron.common.runtime.RuntimeImpl;
 import org.tron.common.runtime.vm.program.InternalTransaction;
 import org.tron.common.runtime.vm.program.Program.BadJumpDestinationException;
+import org.tron.common.runtime.vm.program.Program.BytecodeExecutionException;
 import org.tron.common.runtime.vm.program.Program.IllegalOperationException;
 import org.tron.common.runtime.vm.program.Program.JVMStackOverFlowException;
 import org.tron.common.runtime.vm.program.Program.OutOfEnergyException;
@@ -24,6 +25,7 @@ import org.tron.common.runtime.vm.program.Program.StackTooSmallException;
 import org.tron.common.runtime.vm.program.ProgramResult;
 import org.tron.common.runtime.vm.program.invoke.ProgramInvokeFactoryImpl;
 import org.tron.common.storage.DepositImpl;
+import org.tron.common.utils.ForkController;
 import org.tron.common.utils.Sha256Hash;
 import org.tron.core.Constant;
 import org.tron.core.capsule.AccountCapsule;
@@ -31,6 +33,7 @@ import org.tron.core.capsule.BlockCapsule;
 import org.tron.core.capsule.ContractCapsule;
 import org.tron.core.capsule.ReceiptCapsule;
 import org.tron.core.capsule.TransactionCapsule;
+import org.tron.core.config.Parameter.ForkBlockVersionEnum;
 import org.tron.core.config.args.Args;
 import org.tron.core.exception.BalanceInsufficientException;
 import org.tron.core.exception.ContractExeException;
@@ -277,6 +280,12 @@ public class TransactionTrace {
       receipt.setResult(contractResult.JVM_STACK_OVER_FLOW);
       return;
     }
+    if (ForkController.instance().pass(ForkBlockVersionEnum.VERSION_3_5)){
+      if (exception instanceof BytecodeExecutionException) {
+        receipt.setResult(contractResult.BYTECODE_EXECUTION_EXCEPTION);
+        return;
+      }
+    }
     receipt.setResult(contractResult.UNKNOWN);
   }
 
diff --git a/src/main/protos/core/Tron.proto b/src/main/protos/core/Tron.proto
index 67d7405df..98b36225f 100644
--- a/src/main/protos/core/Tron.proto
+++ b/src/main/protos/core/Tron.proto
@@ -292,6 +292,7 @@ message Transaction {
       OUT_OF_TIME = 11;
       JVM_STACK_OVER_FLOW = 12;
       UNKNOWN = 13;
+      BYTECODE_EXECUTION_EXCEPTION = 14;
     }
     int64 fee = 1;
     code ret = 2;",add bytecodeexecution exception to transaction,"""Added support for BytecodeExecutionException in TransactionCapsule and TransactionTrace""","""Add support for BYTECODE_EXECUTION_EXCEPTION in TransactionCapsule and TransactionTrace, and update Tron.proto to include the new error code.""","This commit adds a new exception type called ""BytecodeExecutionException"" to the TransactionCapsule and TransactionTrace classes in the org.tron.core and org.tron.core.db packages respectively. It also adds a new result code called ""BYTECODE\_EXECUTION\_EXCEPTION"" to the ContractResult enum in the core.protos.Tron.proto file.

In the TransactionCapsule class, the new exception type is handled in the checkTransaction() method by setting the result code to the new ""BYTECODE\_EXECUTION\_EXCEPTION"" value.

In the TransactionTrace class, the new exception type is handled in the execute() method by setting the result of the receipt to the new ""BYTECODE\_EXECUTION\_EXCEPTION"" value.

Additionally, it appears that this code is only executed if the fork version is 3.5 or higher, as indicated by the ""if (ForkController.instance().pass(ForkBlockVersionEnum.VERSION\_3\_5))"" statement.

The commit message could be: ""Add BytecodeExecutionException and new result code BYTECODE\_EXECUTION\_EXCEPTION for fork version 3.5 and higher.""",Add BytecodeExecutionException handling and update to transaction result codes.
"diff --git a/samples/s14gameplay/QTESample.java b/samples/s14gameplay/QTESample.java
index 58f2a97cf..90d71e7f0 100644
--- a/samples/s14gameplay/QTESample.java
+++ b/samples/s14gameplay/QTESample.java
@@ -30,6 +30,8 @@ import com.almasb.fxgl.app.GameApplication;
 import com.almasb.fxgl.gameplay.qte.QTE;
 import com.almasb.fxgl.settings.GameSettings;
 import javafx.scene.input.KeyCode;
+import javafx.scene.paint.Color;
+import javafx.scene.text.Text;
 import javafx.util.Duration;
 
 /**
@@ -60,7 +62,7 @@ public class QTESample extends GameApplication {
     protected void initGame() {
 
         // when app runs, after 2 seconds a QTE event will occur
-        getMasterTimer().runOnceAfter(() -> {
+        getMasterTimer().runAtInterval(() -> {
 
             // 1. get QTE service
             QTE qte = getQTE();
@@ -72,14 +74,19 @@ public class QTESample extends GameApplication {
 
             }, Duration.seconds(3), KeyCode.F, KeyCode.X, KeyCode.G, KeyCode.L);
 
-        }, Duration.seconds(2));
+        }, Duration.seconds(5));
     }
 
     @Override
     protected void initPhysics() {}
 
     @Override
-    protected void initUI() {}
+    protected void initUI() {
+        Text text = getUIFactory().newText(""Prepare! QTE runs every 5 seconds"", Color.BLACK, 16.0);
+        text.setTranslateY(50);
+
+        getGameScene().addUINode(text);
+    }
 
     @Override
     public void onUpdate(double tpf) {}
diff --git a/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEKey.kt b/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEKey.kt
index ae3e58417..fa2ca629d 100644
--- a/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEKey.kt
+++ b/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEKey.kt
@@ -37,7 +37,7 @@ import javafx.scene.shape.Rectangle
  *
  * @author Almas Baimagambetov (almaslvl@gmail.com)
  */
-class QTEKey(keyCode: KeyCode) : StackPane() {
+class QTEKey(val keyCode: KeyCode) : StackPane() {
 
     private val background = Rectangle(72.0, 72.0, Color.BLACK)
     private val text = FXGL.getUIFactory().newText(keyCode.getName(), Color.WHITE, 72.0)
diff --git a/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEProvider.kt b/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEProvider.kt
index 6b5c9d755..aeb37d450 100644
--- a/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEProvider.kt
+++ b/src/main/kotlin/com/almasb/fxgl/gameplay/qte/QTEProvider.kt
@@ -57,7 +57,6 @@ class QTEProvider
     private val closeButton = Button()
     private val keysBox = HBox(10.0)
 
-    private val queue = ArrayDeque<KeyCode>()
     private val qteKeys = ArrayDeque<QTEKey>()
 
     private lateinit var callback: Consumer<Boolean>
@@ -71,14 +70,12 @@ class QTEProvider
 
         eventHandler = EventHandler<KeyEvent> {
 
-            val k = queue.poll()
+            val qteKey = qteKeys.poll()
 
-            if (k == it.code) {
-
-                val qteKey = qteKeys.poll()
+            if (qteKey.keyCode == it.code) {
                 qteKey.lightUp()
 
-                if (queue.isEmpty()) {
+                if (qteKeys.isEmpty()) {
                     close()
                     callback.accept(true)
                 }
@@ -99,8 +96,8 @@ class QTEProvider
     private fun close() {
         scheduledAction.cancel(true)
 
-        queue.clear()
         qteKeys.clear()
+        keysBox.children.clear()
 
         fxScene.removeEventHandler(KeyEvent.KEY_PRESSED, eventHandler)
 
@@ -111,21 +108,21 @@ class QTEProvider
         if (keys.isEmpty())
             throw IllegalArgumentException(""At least 1 key must be specified"")
 
-        if (queue.isNotEmpty())
+        if (qteKeys.isNotEmpty())
             throw IllegalStateException(""Cannot start more than 1 QTE at a time"")
 
         this.callback = callback
 
-        queue.addAll(keys)
         qteKeys.addAll(keys.map { QTEKey(it) })
 
         keysBox.children.setAll(qteKeys)
 
         show()
 
+        // timer
         scheduledAction = FXGL.getExecutor().schedule( {
 
-            if (queue.isNotEmpty()) {
+            if (qteKeys.isNotEmpty()) {
                 Platform.runLater {
 
                     close()","simplified code , allow old QTEKeys to be GCed","""Refactor QTEProvider to directly use qteKeys deque and remove queue, add UI text to QTESample, and make QTEKey's keyCode a val""","""Added QTE (Quick Time Event) feature with customizable keys and interval""","""Updated QTESample to run QTE every 5 seconds and added UI text; modified QTEKey to store KeyCode; updated QTEProvider to use QTEKey for key comparison and removed queue""

Explanation:

* In QTESample.java, the QTE event is now set to run every 5 seconds instead of just once after 2 seconds. Additionally, a UI text element has been added to inform the user about the QTE event.
* In QTEKey.kt, the class now stores the KeyCode as a val, which is used for key comparison in QTEProvider.kt.
* In QTEProvider.kt, the queue variable has been removed and the QTEKey objects are now used directly for key comparison. The keysBox children are also cleared when the QTE event ends. Finally, a scheduled action is added to close the QTE event if it is not completed before the time runs out.","""Implemented recurring QTE events every 5 seconds and improved QTEKey handling by removing redundant queue management."""
"diff --git a/community/community-it/community-it/src/test/java/org/neo4j/server/security/auth/AuthProceduresIT.java b/community/community-it/community-it/src/test/java/org/neo4j/server/security/auth/AuthProceduresIT.java
index c4e8f58d81f..60b5141ff75 100644
--- a/community/community-it/community-it/src/test/java/org/neo4j/server/security/auth/AuthProceduresIT.java
+++ b/community/community-it/community-it/src/test/java/org/neo4j/server/security/auth/AuthProceduresIT.java
@@ -209,10 +209,8 @@ public class AuthProceduresIT
     void shouldNotCreateUserIfInvalidUsername()
     {
         assertFail( admin, ""CALL dbms.security.createUser('', '1234', true)"", ""The provided username is empty."" );
-        assertFail( admin, ""CALL dbms.security.createUser(',!', '1234', true)"",
-                ""Username ',!' contains illegal characters."" );
-        assertFail( admin, ""CALL dbms.security.createUser(':ss!', '', true)"", ""Username ':ss!' contains illegal "" +
-                ""characters."" );
+        assertFail( admin, ""CALL dbms.security.createUser(',!', '1234', true)"", ""Username ',!' contains illegal characters."" );
+        assertFail( admin, ""CALL dbms.security.createUser(':ss!', '1234', true)"", ""Username ':ss!' contains illegal "" + ""characters."" );
     }
 
     @Test",Fixed test after re - ordering username and password validation,"""Fix test case for creating user with invalid username""","According to the diff, the commit message should be:

""Refine invalid username checks in createUser procedure tests""

This message accurately reflects the changes made in the commit, which involve refining the checks for invalid usernames in the `createUser` procedure tests.","The commit message could be:

""Refactor: Combine similar assertFail calls in shouldNotCreateUserIfInvalidUsername method""

This commit message indicates that the changes made are related to refactoring the code in the `shouldNotCreateUserIfInvalidUsername` method by combining similar `assertFail` calls, making the code more concise and easier to read.",Fix formatting in AuthProceduresIT for username validation tests and uniformity of error messages.
"diff --git a/core/client/src/main/java/alluxio/client/file/FileInStream.java b/core/client/src/main/java/alluxio/client/file/FileInStream.java
index 3c890ab924..b78f032a90 100644
--- a/core/client/src/main/java/alluxio/client/file/FileInStream.java
+++ b/core/client/src/main/java/alluxio/client/file/FileInStream.java
@@ -525,7 +525,7 @@ public class FileInStream extends InputStream implements BoundedStream, Seekable
       // End of file.
       return;
     }
-    Preconditions.checkNotNull(mCurrentBlockInStream);
+    Preconditions.checkNotNull(mCurrentBlockInStream, ""mCurrentBlockInStream"");
     if (!mShouldCache || mCurrentBlockInStream.isLocal()) {
       return;
     }",Specify null variable in FileInStream . java precondition check,"""Add error message to Preconditions.checkNotNull in FileInStream""",Added null check for mCurrentBlockInStream with informative error message.,"The commit message could be: ""Added descriptive error message to null check for mCurrentBlockInStream in FileInStream.java""

Explanation: The change is adding a descriptive error message to the null check for the variable `mCurrentBlockInStream` in the `FileInStream` class. This can help with debugging if the variable is unexpectedly null.",Add descriptive error message to Preconditions.checkNotNull for mCurrentBlockInStream in FileInStream.java
"diff --git a/runtime/cfdumper/main.c b/runtime/cfdumper/main.c
index e5f3e8af2..9a068eb05 100644
--- a/runtime/cfdumper/main.c
+++ b/runtime/cfdumper/main.c
@@ -36,6 +36,7 @@
 #include ""j9cp.h""
 #include ""bcutil_api.h""
 #include ""cfdumper_internal.h""
+#include ""vendor_version.h""
 
 #if defined(J9ZOS390)
 #include ""atoe.h""
diff --git a/runtime/gc_check/CheckCycle.cpp b/runtime/gc_check/CheckCycle.cpp
index 8ee48e734..870f39a95 100644
--- a/runtime/gc_check/CheckCycle.cpp
+++ b/runtime/gc_check/CheckCycle.cpp
@@ -23,6 +23,7 @@
 
 #include <string.h>
 
+#include ""vendor_version.h""
 #include ""CheckCycle.hpp""
 #include ""CheckClassHeap.hpp""
 #include ""CheckClassLoaders.hpp""
diff --git a/runtime/include/j9cfg.h.ftl b/runtime/include/j9cfg.h.ftl
index 112598f42..4dc64686a 100644
--- a/runtime/include/j9cfg.h.ftl
+++ b/runtime/include/j9cfg.h.ftl
@@ -33,7 +33,6 @@ extern ""C"" {
 #endif
 
 #include ""omrcfg.h""
-#include ""vendor_version.h""
 
 #define J9_COPYRIGHT_STRING ""(c) Copyright 1991, ${uma.year} IBM Corp. and others.""
 
diff --git a/runtime/jnichk/jnicheck.c b/runtime/jnichk/jnicheck.c
index 2ae4d6a64..2400634d1 100644
--- a/runtime/jnichk/jnicheck.c
+++ b/runtime/jnichk/jnicheck.c
@@ -42,6 +42,7 @@
 #include ""jnicheck.h""
 #include ""jnichk_internal.h""
 #include ""ut_j9jni.h""
+#include ""vendor_version.h""
 
 static void jniCallIn (J9VMThread * vmThread);
 static void methodExitHook (J9HookInterface** hook, UDATA eventNum, void* eventData, void* userData);
diff --git a/runtime/vmchk/vmcheck.c b/runtime/vmchk/vmcheck.c
index 320ba8735..4d7831c39 100755
--- a/runtime/vmchk/vmcheck.c
+++ b/runtime/vmchk/vmcheck.c
@@ -32,6 +32,7 @@
 #include ""mmomrhook.h""
 #include ""vmcheck.h""
 #include ""ut_j9vmchk.h""
+#include ""vendor_version.h""
 
 #include <stdarg.h>
 ",Remove vendor_version . h from j9cfg . h .,"""Added vendor_version.h inclusion to multiple runtime components""",Added vendor version header inclusion to various files.,"Added #include ""vendor_version.h"" to multiple files

This commit adds the #include ""vendor_version.h"" directive to several source files in the runtime directory of a software project. The files affected include main.c in the cfdumper directory, CheckCycle.cpp in the gc\_check directory, jnicheck.c in the jnichk directory, and vmcheck.c in the vmchk directory.

The purpose of this change is likely to include the vendor version header file in these source files. This header file may contain version information or other configuration details specific to the vendor or distributor of the software. By including this header file, the software can access this information at runtime and use it for various purposes, such as displaying version information or performing vendor-specific checks or optimizations.","Add `#include ""vendor_version.h""` to various runtime components for consistency and potential future vendor-specific versioning."
"diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java
index 7230e8ceb6..b4cebc3cf7 100644
--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java
+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java
@@ -222,7 +222,7 @@ public class Collection {
         modSchema(true);
         SchedV2 v2Sched = new SchedV2(this);
         if (ver == 1) {
-            v2Sched.moveToV1()
+            v2Sched.moveToV1();
         } else {
             v2Sched.moveToV2();
         }
diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/Sched.java b/AnkiDroid/src/main/java/com/ichi2/libanki/Sched.java
index 3c5866bfe2..27663cd7ce 100644
--- a/AnkiDroid/src/main/java/com/ichi2/libanki/Sched.java
+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/Sched.java
@@ -96,6 +96,14 @@ public class Sched {
     // Not in libanki
     private WeakReference<Activity> mContextReference;
 
+
+    /**
+     * This is a do-nothing constructor for descendants (ScedV2) to use.
+     */
+    public Sched() {
+
+    }
+
     /**
      * queue types: 0=new/cram, 1=lrn, 2=rev, 3=day lrn, -1=suspended, -2=buried
      * revlog types: 0=lrn, 1=rev, 2=relrn, 3=cram
diff --git a/AnkiDroid/src/main/java/com/ichi2/libanki/SchedV2.java b/AnkiDroid/src/main/java/com/ichi2/libanki/SchedV2.java
index 944ed9a42a..2c7c69502f 100644
--- a/AnkiDroid/src/main/java/com/ichi2/libanki/SchedV2.java
+++ b/AnkiDroid/src/main/java/com/ichi2/libanki/SchedV2.java
@@ -29,7 +29,6 @@ import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
 import android.text.style.StyleSpan;
 
-import com.google.common.primitives.Longs;
 import com.ichi2.anki.R;
 import com.ichi2.libanki.hooks.Hooks;
 
@@ -112,7 +111,7 @@ public class SchedV2 extends Sched {
      */
 
     public SchedV2(Collection col) {
-        super(col);
+        super();
         mCol = col;
         mQueueLimit = 50;
         mReportLimit = 1000;
@@ -2363,7 +2362,7 @@ public class SchedV2 extends Sched {
         }
         // then bury
         if (toBury.size() > 0) {
-            buryCards(Longs.toArray(toBury),false);
+            buryCards(Utils.arrayList2array(toBury),false);
         }
     }
 ",Fix some compiling and loading issues,"""Refactor Sched and SchedV2 constructors and fix buryCards method call""","The commit message should be:

""Add do-nothing constructor to Sched class and modify SchedV2 to use it""

However, a more concise and conventional commit message would be:

""Add do-nothing Sched constructor and use it in SchedV2""

Or, if you want to focus on the main change:

""Modify SchedV2 to use do-nothing Sched constructor""

Or, if you want to make it more descriptive:

""Refactor SchedV2 to use do-nothing Sched constructor for better inheritance""

Choose the one that best fits your project's commit message style.","""Update Collection.java and Sched.java to fix syntax error and add constructor in Sched.java for SchedV2

Changes include:

* Fixing a syntax error in Collection.java by adding a semicolon at the end of the line `v2Sched.moveToV1()`.
* Adding a new constructor in Sched.java for use by the SchedV2 class.
* Updating SchedV2.java to use the new constructor in Sched.java and to use `Utils.arrayList2array()` instead of `Longs.toArray()`.""","""Fixed missing semicolon and refactored Sched constructor to allow descendants to use it."""
"diff --git a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/BLauncherCmd.java b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/BLauncherCmd.java
index 7c46a4e9add..d62b4e91989 100644
--- a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/BLauncherCmd.java
+++ b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/BLauncherCmd.java
@@ -62,13 +62,6 @@ public interface BLauncherCmd {
      */
     void setParentCmdParser(CommandLine parentCmdParser);
 
-    /**
-     * Set the {@link CommandLine} object representing this command.
-     *
-     * @param selfCmdParser the {@link CommandLine} object representing the command
-     */
-    void setSelfCmdParser(CommandLine selfCmdParser);
-
     /**
      * Retrieve command usage info.
      *
diff --git a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
index 68768176152..db6a5f82dd8 100644
--- a/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
+++ b/cli/ballerina-launcher/src/main/java/org/ballerinalang/launcher/Main.java
@@ -80,11 +80,6 @@ public class Main {
         }
     }
 
-    private static CommandLine addSubCommand(CommandLine parentCmd, String commandName, Object commandObject) {
-        parentCmd.addSubcommand(commandName, commandObject);
-        return parentCmd.getSubcommands().get(commandName);
-    }
-
     private static Optional<BLauncherCmd> getInvokedCmd(String... args) {
         try {
             DefaultCmd defaultCmd = new DefaultCmd();
@@ -93,9 +88,7 @@ public class Main {
 
             // Run command
             RunCmd runCmd = new RunCmd();
-            CommandLine pcRunCmd = addSubCommand(cmdParser, BallerinaCliCommands.RUN, runCmd);
             runCmd.setParentCmdParser(cmdParser);
-            runCmd.setSelfCmdParser(pcRunCmd);
 
             // Set stop at positional before the other commands are added as sub commands, to enforce ordering only
             // for the run command
@@ -295,10 +288,6 @@ public class Main {
         @Override
         public void setParentCmdParser(CommandLine parentCmdParser) {
         }
-
-        @Override
-        public void setSelfCmdParser(CommandLine selfCmdParser) {
-        }
     }
 
     /**
@@ -350,10 +339,6 @@ public class Main {
         public void setParentCmdParser(CommandLine parentCmdParser) {
             this.parentCmdParser = parentCmdParser;
         }
-
-        @Override
-        public void setSelfCmdParser(CommandLine selfCmdParser) {
-        }
     }
 
     /**
@@ -410,11 +395,6 @@ public class Main {
         public void setParentCmdParser(CommandLine parentCmdParser) {
             this.parentCmdParser = parentCmdParser;
         }
-
-        @Override
-        public void setSelfCmdParser(CommandLine selfCmdParser) {
-
-        }
     }
 
     /**
@@ -502,11 +482,6 @@ public class Main {
         public void setParentCmdParser(CommandLine parentCmdParser) {
         }
 
-        @Override
-        public void setSelfCmdParser(CommandLine selfCmdParser) {
-
-        }
-
         private String promptForInput(String msg) {
             errStream.println(msg);
             return new String(System.console().readPassword());
@@ -562,9 +537,5 @@ public class Main {
         @Override
         public void setParentCmdParser(CommandLine parentCmdParser) {
         }
-
-        @Override
-        public void setSelfCmdParser(CommandLine selfCmdParser) {
-        }
     }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java
index 27c0a787116..6193da48087 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/BuildCommand.java
@@ -230,10 +230,6 @@ public class BuildCommand implements BLauncherCmd {
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
 
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
-
     private void genNativeBinary(Path projectDirPath, List<String> argList) {
         throw LauncherUtils.createLauncherException(""llvm native generation is not supported"");
     }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java
index b06974eab60..db3a1c31230 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InitCommand.java
@@ -295,13 +295,6 @@ public class InitCommand implements BLauncherCmd {
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
-
     /**
      * Validates the version is a semver version.
      *
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InstallCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InstallCommand.java
index ff2ec40296f..eecd3ca75f2 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InstallCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/InstallCommand.java
@@ -89,8 +89,4 @@ public class InstallCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/ListCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/ListCommand.java
index e5692de3286..f9b0ff5879e 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/ListCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/ListCommand.java
@@ -94,8 +94,4 @@ public class ListCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PullCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PullCommand.java
index 8350464001c..bd85214811e 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PullCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PullCommand.java
@@ -146,8 +146,4 @@ public class PullCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PushCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PushCommand.java
index 3199d9c972e..d9d76eab9c5 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PushCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/PushCommand.java
@@ -113,8 +113,4 @@ public class PushCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/SearchCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/SearchCommand.java
index 47860711cb5..c0853aca807 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/SearchCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/SearchCommand.java
@@ -89,8 +89,4 @@ public class SearchCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/UninstallCommand.java b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/UninstallCommand.java
index 5627b9a9c31..ec750b16a10 100644
--- a/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/UninstallCommand.java
+++ b/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/UninstallCommand.java
@@ -80,8 +80,4 @@ public class UninstallCommand implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/misc/docerina/src/main/java/org/ballerinalang/docgen/cmd/BallerinaDocCmd.java b/misc/docerina/src/main/java/org/ballerinalang/docgen/cmd/BallerinaDocCmd.java
index 13856daff79..38949c99b29 100644
--- a/misc/docerina/src/main/java/org/ballerinalang/docgen/cmd/BallerinaDocCmd.java
+++ b/misc/docerina/src/main/java/org/ballerinalang/docgen/cmd/BallerinaDocCmd.java
@@ -137,8 +137,4 @@ public class BallerinaDocCmd implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    }
 }
diff --git a/misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java b/misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java
index 52b834baba8..f8e1ad99119 100644
--- a/misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java
+++ b/misc/protobuf-ballerina/src/main/java/org/ballerinalang/protobuf/cmd/GrpcCmd.java
@@ -313,11 +313,6 @@ public class GrpcCmd implements BLauncherCmd {
         this.parentCmdParser = parentCmdParser;
     }
     
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-    
-    }
-    
     private List<String> readProperties(ClassLoader classLoader) {
         String fileName;
         List<String> protoFilesList = new ArrayList<>();
diff --git a/misc/swagger-ballerina/modules/swagger-to-ballerina-generator/src/main/java/org/ballerinalang/swagger/cmd/SwaggerCmd.java b/misc/swagger-ballerina/modules/swagger-to-ballerina-generator/src/main/java/org/ballerinalang/swagger/cmd/SwaggerCmd.java
index 51632b0a32f..0db0ac7f266 100644
--- a/misc/swagger-ballerina/modules/swagger-to-ballerina-generator/src/main/java/org/ballerinalang/swagger/cmd/SwaggerCmd.java
+++ b/misc/swagger-ballerina/modules/swagger-to-ballerina-generator/src/main/java/org/ballerinalang/swagger/cmd/SwaggerCmd.java
@@ -144,9 +144,4 @@ public class SwaggerCmd implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-
-    }
 }
diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestCmd.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestCmd.java
index 33d38fabc6a..5675fe9f0e3 100644
--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestCmd.java
+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestCmd.java
@@ -177,10 +177,4 @@ public class TestCmd implements BLauncherCmd {
     @Override
     public void setParentCmdParser(CommandLine parentCmdParser) {
     }
-
-    @Override
-    public void setSelfCmdParser(CommandLine selfCmdParser) {
-        // ignore
-
-    }
 }",Remove unused setSelfCmdParser method,"""Remove unused setSelfCmdParser method from BLauncherCmd interface and its implementations""",Remove unused methods and fields from BLauncherCmd interface and its implementations.,"""Removed setSelfCmdParser method from BLauncherCmd interface and its implementations""",Removed `setSelfCmdParser` method and related calls from BLauncherCmd implementations and Main class.
"diff --git a/ql/src/test/queries/clientpositive/cbo_correctness.q b/ql/src/test/queries/clientpositive/cbo_correctness.q
index d1a5648ebb..d211c9bab7 100644
--- a/ql/src/test/queries/clientpositive/cbo_correctness.q
+++ b/ql/src/test/queries/clientpositive/cbo_correctness.q
@@ -191,22 +191,24 @@ create view v3 as select v1.value val from v1 join t1 on v1.c_boolean = t1.c_boo
 -- view chaining
 select count(val) from v3 where val != '1';
 with q1 as ( select key from t1 where key = '1')
-select *
-from q1
-;
+select count(*) from q1;
 
 with q1 as ( select value from v1 where c_boolean = false)
-select *
-from q1 ;
+select count(value) from q1 ;
 
 create view v4 as
-with q1 as ( select key from t1  where key = '1')
+with q1 as ( select key,c_int from t1  where key = '1')
 select * from q1
 ;
 
 with q1 as ( select c_int from q2 where c_boolean = false),
 q2 as ( select c_int,c_boolean from v1  where value = '1')
-select * from (select c_int from q1) a;
+select sum(c_int) from (select c_int from q1) a;
+
+with q1 as ( select t1.c_int c_int from q2 join t1 where q2.c_int = t1.c_int),
+q2 as ( select c_int,c_boolean from v1  where value = '1')
+select count(*) from q1 join q2 join v4 on q1.c_int = q2.c_int and v4.c_int = q2.c_int;
+
 
 drop view v1;
 drop view v2;
diff --git a/ql/src/test/results/clientpositive/cbo_correctness.q.out b/ql/src/test/results/clientpositive/cbo_correctness.q.out
index 9391828b76..fdaefc622c 100644
--- a/ql/src/test/results/clientpositive/cbo_correctness.q.out
+++ b/ql/src/test/results/clientpositive/cbo_correctness.q.out
@@ -16316,63 +16316,47 @@ POSTHOOK: Input: default@v3
 #### A masked pattern was here ####
 96
 PREHOOK: query: with q1 as ( select key from t1 where key = '1')
-select *
-from q1
+select count(*) from q1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
 PREHOOK: Input: default@t1@dt=2014
 #### A masked pattern was here ####
 POSTHOOK: query: with q1 as ( select key from t1 where key = '1')
-select *
-from q1
+select count(*) from q1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@t1
 POSTHOOK: Input: default@t1@dt=2014
 #### A masked pattern was here ####
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
+12
 PREHOOK: query: with q1 as ( select value from v1 where c_boolean = false)
-select *
-from q1
+select count(value) from q1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
 PREHOOK: Input: default@t1@dt=2014
 PREHOOK: Input: default@v1
 #### A masked pattern was here ####
 POSTHOOK: query: with q1 as ( select value from v1 where c_boolean = false)
-select *
-from q1
+select count(value) from q1
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@t1
 POSTHOOK: Input: default@t1@dt=2014
 POSTHOOK: Input: default@v1
 #### A masked pattern was here ####
-1
-1
+2
 PREHOOK: query: create view v4 as
-with q1 as ( select key from t1  where key = '1')
+with q1 as ( select key,c_int from t1  where key = '1')
 select * from q1
 PREHOOK: type: CREATEVIEW
 PREHOOK: Input: default@t1
 POSTHOOK: query: create view v4 as
-with q1 as ( select key from t1  where key = '1')
+with q1 as ( select key,c_int from t1  where key = '1')
 select * from q1
 POSTHOOK: type: CREATEVIEW
 POSTHOOK: Input: default@t1
 POSTHOOK: Output: default@v4
 PREHOOK: query: with q1 as ( select c_int from q2 where c_boolean = false),
 q2 as ( select c_int,c_boolean from v1  where value = '1')
-select * from (select c_int from q1) a
+select sum(c_int) from (select c_int from q1) a
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
 PREHOOK: Input: default@t1@dt=2014
@@ -16380,14 +16364,33 @@ PREHOOK: Input: default@v1
 #### A masked pattern was here ####
 POSTHOOK: query: with q1 as ( select c_int from q2 where c_boolean = false),
 q2 as ( select c_int,c_boolean from v1  where value = '1')
-select * from (select c_int from q1) a
+select sum(c_int) from (select c_int from q1) a
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@t1
 POSTHOOK: Input: default@t1@dt=2014
 POSTHOOK: Input: default@v1
 #### A masked pattern was here ####
-1
-1
+2
+Warning: Shuffle Join JOIN[26][tables = [$hdt$_394, $hdt$_397]] in Stage 'Stage-1:MAPRED' is a cross product
+PREHOOK: query: with q1 as ( select t1.c_int c_int from q2 join t1 where q2.c_int = t1.c_int),
+q2 as ( select c_int,c_boolean from v1  where value = '1')
+select count(*) from q1 join q2 join v4 on q1.c_int = q2.c_int and v4.c_int = q2.c_int
+PREHOOK: type: QUERY
+PREHOOK: Input: default@t1
+PREHOOK: Input: default@t1@dt=2014
+PREHOOK: Input: default@v1
+PREHOOK: Input: default@v4
+#### A masked pattern was here ####
+POSTHOOK: query: with q1 as ( select t1.c_int c_int from q2 join t1 where q2.c_int = t1.c_int),
+q2 as ( select c_int,c_boolean from v1  where value = '1')
+select count(*) from q1 join q2 join v4 on q1.c_int = q2.c_int and v4.c_int = q2.c_int
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@t1
+POSTHOOK: Input: default@t1@dt=2014
+POSTHOOK: Input: default@v1
+POSTHOOK: Input: default@v4
+#### A masked pattern was here ####
+31104
 PREHOOK: query: drop view v1
 PREHOOK: type: DROPVIEW
 PREHOOK: Input: default@v1",Add tests for cte for cbo ( Ashutosh Chauhan ) .,"""Update cbo_correctness.q to use aggregate functions and join queries""","""Refactor queries in cbo_correctness.q to improve performance and fix issues with view chaining and joins.""","""Update CBO correctness query: add new query and fix existing ones""

Explanation:
The diff shows that a new query has been added at the end of the file, and some existing queries have been modified. Specifically, the changes include:

* Adding a new query that joins three tables (q1, q2, and v4) and counts the number of rows in the result.
* Modifying an existing query to select the count of rows instead of all columns from a subquery (q1).
* Modifying another existing query to select the sum of a column instead of all columns from a subquery (q1).

The changes seem to be related to improving the correctness of the CBO (Cost-Based Optimizer) in the ql/src/test/queries/clientpositive/cbo\_correctness.q file. Therefore, a suitable commit message could be ""Update CBO correctness query: add new query and fix existing ones"".",Refactored queries to use aggregate functions and updated test result outputs for improved performance and accuracy.
"diff --git a/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest/service-test.bal b/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest/service-test.bal
index c9c6b692960..4670cd33461 100644
--- a/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest/service-test.bal
+++ b/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest/service-test.bal
@@ -35,14 +35,12 @@ function init() {
 
 @test:config{before: ""init""}
 function testService () {
-    endpoint<http:HttpClient> httpEndpoint {
-                              create http:HttpClient(url2, {});
-    }
+    endpoint<http:HttpClient> httpEndpoint {url : url2}
 
     http:OutRequest req = {};
     // Send a GET request to the specified endpoint
     http:InResponse resp = {};
-    resp, _ = httpEndpoint.get(""/events"", req);
+    resp, _ = httpEndpoint -> get(""/events"", req);
 
     io:println(""GET request:"");
     var jsonRes, _ = resp.getJsonPayload();
diff --git a/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest2/event-service-client.bal b/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest2/event-service-client.bal
index 2d9317d5fba..559ee92e722 100644
--- a/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest2/event-service-client.bal
+++ b/misc/testerina/modules/testerina-core/src/test/resources/servicemocktest2/event-service-client.bal
@@ -3,15 +3,14 @@ package src.test.resources.servicemocktest2;
 import ballerina.config;
 import ballerina.net.http;
 
-const string eventServiceEP = ""http://localhost:9092/events"";
+string eventServiceEP = ""http://localhost:9092/events"";
 
 public function getEvents () (json resPl) {
 
-    endpoint<http:HttpClient> httpEndpoint {create http:HttpClient(eventServiceEP, {});
-    }
+    endpoint<http:HttpClient> httpEndpoint {url: eventServiceEP}
     http:OutRequest req = {};
     http:InResponse resp = {};
-    resp, _ = httpEndpoint.get(""/"", req);
+    resp, _ = httpEndpoint -> get(""/"", req);
     resPl, _ = resp.getJsonPayload();
     return;
 }
\ No newline at end of file",Adapt client connector syntax changes .,"""Simplify HTTP client endpoint creation and usage in service mock tests""","""Refactor service mock test to use arrow function syntax for HTTP requests""","""Update service-test.bal and event-service-client.bal: Refactor HTTP client endpoint creation and usage""

Here are the changes made in each file:

1. service-test.bal:
* Replaced the HTTP client endpoint creation using an initializer block with a more concise object initializer syntax.
* Changed the HTTP GET request invocation from using the dot operator to using the arrow operator.
1. event-service-client.bal:
* Changed the constant string `eventServiceEP` to a regular string.
* Replaced the HTTP client endpoint creation using an initializer block with a more concise object initializer syntax.
* Changed the HTTP GET request invocation from using the dot operator to using the arrow operator.

These changes simplify the code and make it more readable by using more idiomatic Ballerina syntax. The arrow operator is preferred over the dot operator for invoking remote functions, as it helps distinguish between local and remote function calls.",Replace deprecated `create` syntax with new syntax for `http:HttpClient` endpoints and use arrow operator for method calls.
"diff --git a/misc/testerina/modules/testerina-core/src/main/ballerina/ballerina/test/annotations.bal b/misc/testerina/modules/testerina-core/src/main/ballerina/ballerina/test/annotations.bal
index 88d8dbaf71c..fbe1cba80c5 100644
--- a/misc/testerina/modules/testerina-core/src/main/ballerina/ballerina/test/annotations.bal
+++ b/misc/testerina/modules/testerina-core/src/main/ballerina/ballerina/test/annotations.bal
@@ -20,7 +20,7 @@ public struct TestConfig {
 @Field {value:""packageName: Name of the package that the function to be mocked resides in""}
 @Field {value:""functionName: Name of the function to be mocked""}
 public struct MockConfig {
-    string packageName;
+    string packageName = ""."";
     string functionName;
 }
 
diff --git a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java
index 88358a72e70..900f2cb31f7 100644
--- a/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java
+++ b/misc/testerina/modules/testerina-core/src/main/java/org/ballerinalang/testerina/core/TestAnnotationProcessor.java
@@ -117,6 +117,9 @@ public class TestAnnotationProcessor extends AbstractCompilerPlugin {
                 suite.addAfterEachFunction(functionName);
             } else if (MOCK_ANNOTATION_NAME.equals(annotationName)) {
                 String[] vals = new String[2];
+                // If package property not present the package is .
+                // TODO: when default values are supported in annotation struct we can remove this
+                vals[0] = ""."";
                 if (attachmentNode.getExpression() instanceof BLangRecordLiteral) {
                     List<BLangRecordLiteral.BLangRecordKeyValue> attributes = ((BLangRecordLiteral) attachmentNode
                             .getExpression()).getKeyValuePairs();",Add a default package when package is not specified for mock functions,"""Default package name to '.' for mock config in test annotations""","""Update default package name for MockConfig and remove package name check in TestAnnotationProcessor""","""Update TestConfig struct in annotations.bal and handle missing package property in TestAnnotationProcessor.java""

Explanation:

The commit includes two changes:

1. In the file `annotations.bal`, the `packageName` field of the `MockConfig` struct in the `TestConfig` struct is given a default value of `"".""`. This means that if no package name is provided when creating a `MockConfig`, it will default to the current package.

2. In the file `TestAnnotationProcessor.java`, a check is added to see if the `package` property is present in the attachment node of a mock annotation. If it is not present, the package is set to `"".""`. This is to handle the case where no package name is provided in the mock annotation, and is marked as a temporary solution until default values are supported in annotation structs.

Therefore, a suitable commit message would be ""Update TestConfig struct in annotations.bal and handle missing package property in TestAnnotationProcessor.java"". This message clearly describes both changes made in the commit.","Set default packageName to ""."" in MockConfig and handle it in TestAnnotationProcessor."
"diff --git a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java
index 53ea1b5..03527fa 100644
--- a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java
+++ b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java
@@ -225,14 +225,15 @@ public abstract class NanoHTTPD {
      */
     public void start() throws IOException {
         if (sslServerSocketFactory != null) {
-            SSLServerSocket ss = (SSLServerSocket) sslServerSocketFactory.createServerSocket(myPort);
+            SSLServerSocket ss = (SSLServerSocket) sslServerSocketFactory.createServerSocket();
             ss.setNeedClientAuth(false);
             myServerSocket = ss;
         } else {
             myServerSocket = new ServerSocket();
-            myServerSocket.setReuseAddress(true);
-            myServerSocket.bind((hostname != null) ? new InetSocketAddress(hostname, myPort) : new InetSocketAddress(myPort));
         }
+        myServerSocket.setReuseAddress(true);
+        myServerSocket.bind((hostname != null) ? new InetSocketAddress(hostname, myPort) : new InetSocketAddress(myPort));
+
         myThread = new Thread(new Runnable() {
        ",Allow hostname binding for SSL,"""Refactor NanoHTTPD start method to set reuse address and bind socket after SSL server socket creation""","The commit message should be:

""Fix SSLServerSocket creation and reuse address setting""

This message accurately describes the changes made in the commit, which include:

- Creating an SSLServerSocket without specifying a port (previously the port was specified)
- Setting the need for client authentication to false
- Moving the setting of the reuse address and binding of the server socket to after the creation of the server socket (regardless of whether it's an SSLServerSocket or not)","""Move socket configuration outside of SSL check in NanoHTTPD.java""

This commit moves the socket configuration (setReuseAddress and bind) outside of the SSL check in the start() method of NanoHTTPD.java. This means that the socket configuration will be applied regardless of whether SSL is used or not. This could potentially fix issues where the socket configuration was not being applied correctly when SSL was not used.",Refactored server socket initialization; ensured reuse address and binding logic are applied for both SSL and non-SSL servers.
"diff --git a/sdks/python/apache_beam/transforms/util.py b/sdks/python/apache_beam/transforms/util.py
index 8b84d31c57..4388f6a066 100644
--- a/sdks/python/apache_beam/transforms/util.py
+++ b/sdks/python/apache_beam/transforms/util.py
@@ -683,7 +683,7 @@ class ToString(object):
     by the specific delimiter and the value.
     """"""
 
-    def __init__(self, delimiter=None, **kwargs):
+    def __init__(self, delimiter=None):
       self.delimiter = delimiter or "",""
 
     def expand(self, pcoll):
@@ -699,7 +699,7 @@ class ToString(object):
     Transforms each element of the PCollection to a string.
     """"""
 
-    def __init__(self, delimiter=None, **kwargs):
+    def __init__(self, delimiter=None):
       self.delimiter = delimiter or "",""
 
     def expand(self, pcoll):
@@ -716,7 +716,7 @@ class ToString(object):
     string. There is no trailing delimiter.
     """"""
 
-    def __init__(self, delimiter=None, **kwargs):
+    def __init__(self, delimiter=None):
       self.delimiter = delimiter or "",""
 
     def expand(self, pcoll):",Remove unused * * kwargs arguments for various transforms . .,"""Remove unused **kwargs from ToString class constructors""","""Remove unnecessary keyword arguments from ToString class constructors.""","""Removed unused **kwargs from ToString class constructors in util.py""

This commit removes the unused **kwargs parameter from the constructors of the ToString classes in the util.py file of the Apache Beam SDK for Python. This change does not affect the functionality of the classes, as the **kwargs parameter was not being used.",Remove unused **kwargs from constructors in the ToString class family.
"diff --git a/plugin-spark-sink-mysql/src/main/scala/org/apache/spark/sql/execution/datasources/jdbc2/JDBCOptions.scala b/plugin-spark-sink-mysql/src/main/scala/org/apache/spark/sql/execution/datasources/jdbc2/JDBCOptions.scala
index e56b22094..6d8d7b25b 100755
--- a/plugin-spark-sink-mysql/src/main/scala/org/apache/spark/sql/execution/datasources/jdbc2/JDBCOptions.scala
+++ b/plugin-spark-sink-mysql/src/main/scala/org/apache/spark/sql/execution/datasources/jdbc2/JDBCOptions.scala
@@ -21,6 +21,7 @@ import java.sql.{Connection, DriverManager}
 import java.util.{Locale, Properties}
 
 import org.apache.spark.sql.catalyst.util.CaseInsensitiveMap
+import org.apache.spark.sql.types.StructType
 
 /**
  * Options for the JDBC data source.
@@ -64,7 +65,6 @@ class JDBCOptions(
   // Required parameters
   // ------------------------------------------------------------
   require(parameters.isDefinedAt(JDBC_URL), s""Option '$JDBC_URL' is required."")
-  require(parameters.isDefinedAt(JDBC_TABLE_NAME), s""Option '$JDBC_TABLE_NAME' is required."")
   // a JDBC URL
   val url = parameters(JDBC_URL)
 
@@ -210,7 +210,7 @@ class JdbcOptionsInWrite(
 
   val table = parameters(JDBC_TABLE_NAME)
 
-  // Custom mysql duplicate key update statement when saveMode is update
+  // Waterdrop: custom mysql duplicate key update statement when saveMode is update
   val customUpdateStmt = parameters.get(JDBC_CUSTOM_UPDATE_STMT)
 }
 
@@ -242,6 +242,7 @@ object JDBCOptions {
   val JDBC_TXN_ISOLATION_LEVEL = newOption(""isolationLevel"")
   val JDBC_SESSION_INIT_STATEMENT = newOption(""sessionInitStatement"")
   val JDBC_PUSHDOWN_PREDICATE = newOption(""pushDownPredicate"")
+  // Waterdrop: add extra options
   val JDBC_DUPLICATE_INCS = newOption(""duplicateIncs"")
   val JDBC_CUSTOM_UPDATE_STMT = newOption(""customUpdateStmt"")
 }",Add additional comments on modifying mysql JDBCOptions,"""Add support for custom MySQL duplicate key update statement and extra JDBC options""","""Added support for custom duplicate key update statement in MySQL sink and extra options""","""Add extra options for JDBC data source in Spark SQL""

This commit appears to add some additional options for the JDBC data source in Apache Spark's SQL module. Specifically, it adds a new import for `StructType` and a new option called `JDBC_CUSTOM_UPDATE_STMT` that allows for a custom update statement to be used when the save mode is set to ""update"" for MySQL databases. It also includes some minor changes to error messages and comments.","""Remove table name requirement and add custom MySQL duplicate key update statement option in JDBCOptions.scala"""
"diff --git a/library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java b/library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
index 42ed696..cc31268 100644
--- a/library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
+++ b/library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
@@ -1291,7 +1291,7 @@ public class MaterialAutoCompleteTextView extends AppCompatAutoCompleteTextView
     }
 
     // draw the clear button
-    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText())) {
+    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText()) && isEnabled()) {
       paint.setAlpha(255);
       int buttonLeft;
       if (isRTL()) {
@@ -1463,7 +1463,7 @@ public class MaterialAutoCompleteTextView extends AppCompatAutoCompleteTextView
       setSelection(0);
       return false;
     }
-    if (hasFocus() && showClearButton) {
+    if (hasFocus() && showClearButton && isEnabled()) {
       switch (event.getAction()) {
         case MotionEvent.ACTION_DOWN:
           if (insideClearButton(event)) {
diff --git a/library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java b/library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
index 9311924..06789af 100644
--- a/library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
+++ b/library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
@@ -1288,7 +1288,7 @@ public class MaterialMultiAutoCompleteTextView extends AppCompatMultiAutoComplet
     }
 
     // draw the clear button
-    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText())) {
+    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText()) && isEnabled()) {
       paint.setAlpha(255);
       int buttonLeft;
       if (isRTL()) {
@@ -1460,7 +1460,7 @@ public class MaterialMultiAutoCompleteTextView extends AppCompatMultiAutoComplet
       setSelection(0);
       return false;
     }
-    if (hasFocus() && showClearButton) {
+    if (hasFocus() && showClearButton && isEnabled()) {
       switch (event.getAction()) {
         case MotionEvent.ACTION_DOWN:
           if (insideClearButton(event)) {",Add fix for MaterialAutoCompleteTextView and MaterialMultiAutocompleteTextView,"""Added isEnabled() check for clear button visibility and click handling""","""Add check for isEnabled() when drawing and handling clear button""","""Added check for isEnabled() before showing clear button in MaterialAutoCompleteTextView and MaterialMultiAutoCompleteTextView""

This commit adds a check for `isEnabled()` before showing the clear button in both `MaterialAutoCompleteTextView` and `MaterialMultiAutoCompleteTextView`. This ensures that the clear button is only shown when the text view is enabled, in addition to the existing conditions of having focus, `showClearButton` being true, and the text view not being empty. The change is made in both the `onDraw()` method and the `onTouchEvent()` method for each class.","""Add isEnabled check before showing clear button in Material[Multi]AutoCompleteTextView."""
"diff --git a/zeppelin-web/Gruntfile.js b/zeppelin-web/Gruntfile.js
index 906c14272..ce62d8bed 100644
--- a/zeppelin-web/Gruntfile.js
+++ b/zeppelin-web/Gruntfile.js
@@ -434,7 +434,7 @@ module.exports = function (grunt) {
   ]);
 
   grunt.registerTask('build', [
-    'newer:jshint',
+    'jshint:all',
     'clean:dist',
     'wiredep',
     'useminPrepare',
diff --git a/zeppelin-web/pom.xml b/zeppelin-web/pom.xml
index 2c46c76ed..0e54d6573 100644
--- a/zeppelin-web/pom.xml
+++ b/zeppelin-web/pom.xml
@@ -124,7 +124,6 @@
             </goals>
             <configuration>
               <arguments>build</arguments>
-              <arguments>--force</arguments>
             </configuration>
           </execution>
 ",Make CI Crash when there is jshint errors .,"""Update Gruntfile.js to run jshint on all files and remove --force argument from pom.xml""","""Remove --force flag from build process and switch to jshint:all in Gruntfile.js""","""Update Gruntfile.js to use 'jshint:all' instead of 'newer:jshint' and remove '--force' argument from pom.xml""",Removed '--force' argument and changed 'newer:jshint' to 'jshint:all' in Gruntfile.js for build task.
"diff --git a/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/DynamicJWTController.java b/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/DynamicJWTController.java
index 72bc491b00..184b4b1055 100644
--- a/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/DynamicJWTController.java
+++ b/jjwt/src/main/java/io/jsonwebtoken/jjwtfun/controller/DynamicJWTController.java
@@ -41,31 +41,31 @@ public class DynamicJWTController extends BaseController {
         claims.forEach((key, value) -> {
             switch (key) {
                 case ""iss"":
-                    ensureType(key, value,  String.class);
+                    ensureType(key, value, String.class);
                     builder.setIssuer((String) value);
                     break;
                 case ""sub"":
-                    ensureType(key, value,  String.class);
+                    ensureType(key, value, String.class);
                     builder.setSubject((String) value);
                     break;
                 case ""aud"":
-                    ensureType(key, value,  String.class);
+                    ensureType(key, value, String.class);
                     builder.setAudience((String) value);
                     break;
                 case ""exp"":
-                    value = ensureType(key, value,  Long.class);
-                    builder.setExpiration(Date.from(Instant.ofEpochSecond((Long) value)));
+                    ensureType(key, value, Long.class);
+                    builder.setExpiration(Date.from(Instant.ofEpochSecond(Long.parseLong(value.toString()))));
                     break;
                 case ""nbf"":
-                    value = ensureType(key, value,  Long.class);
-                    builder.setNotBefore(Date.from(Instant.ofEpochSecond((Long) value)));
+                    ensureType(key, value, Long.class);
+                    builder.setNotBefore(Date.from(Instant.ofEpochSecond(Long.parseLong(value.toString()))));
                     break;
                 case ""iat"":
-                    value = ensureType(key, value,  Long.class);
-                    builder.setIssuedAt(Date.from(Instant.ofEpochSecond((Long) value)));
+                    ensureType(key, value, Long.class);
+                    builder.setIssuedAt(Date.from(Instant.ofEpochSecond(Long.parseLong(value.toString()))));
                     break;
     ",Simplified type checking .,"""Fix ensureType method calls to remove unnecessary whitespace and handle non-Long values for exp, nbf, and iat claims""","""Fixed type casting for claims in DynamicJWTController""

However, a more descriptive and conventional commit message would be:

""Refactor claims type casting in DynamicJWTController for consistency and accuracy""

This commit message clearly conveys the changes made in the commit and follows standard professional guidelines for commit messages.","""Fixed type casting and parsing for 'exp', 'nbf', and 'iat' claims in DynamicJWTController""

Explanation:
The changes made in this commit are related to the handling of 'exp', 'nbf', and 'iat' claims in the DynamicJWTController class. In the original version, the ensureType method was used to check the type of the value and cast it to Long. However, in the updated version, the ensureType method is still used to check the type, but the value is parsed to Long using Long.parseLong(value.toString()) instead of casting. This change fixes potential issues with type casting and ensures that the values are correctly parsed and set for the JWT builder.",Refactor `DynamicJWTController` to improve type handling and ensure consistent string parsing for date-related claims.
"diff --git a/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/en-US-GB.txt b/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/en-US-GB.txt
index f1309dc9c2..469123bb34 100644
--- a/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/en-US-GB.txt
+++ b/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/en-US-GB.txt
@@ -1292,6 +1292,7 @@ extemporize;extemporise
 extemporized;extemporised
 extemporizes;extemporises
 extemporizing;extemporising
+exteriorization;exteriorisation
 externalization;externalisation
 externalizations;externalisations
 externalize;externalise
@@ -2394,6 +2395,7 @@ palatalize;palatalise
 palatalized;palatalised
 palatalizes;palatalises
 palatalizing;palatalising
+palletization;palletisation
 palletize;palletise
 palletized;palletised
 palletizer;palletiser
@@ -2413,7 +2415,7 @@ paralyze;paralyse
 paralyzed;paralysed
 paralyzes;paralyses
 paralyzing;paralysing
-parametrization;parameterization
+parameterization;parameterisation
 parasitize;parasitise
 parasitized;parasitised
 parasitizes;parasitises
@@ -2811,6 +2813,7 @@ recognizer;recogniser
 recognizers;recognisers
 recognizes;recognises
 recognizing;recognising
+recolonization;recolonisation
 recolonize;recolonise
 recolonized;recolonised
 recolonizes;recolonises
diff --git a/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/hunspell/spelling.txt b/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/hunspell/spelling.txt
index 0428eaebca..b8befdb13c 100644
--- a/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/hunspell/spelling.txt
+++ b/languagetool-language-modules/en/src/main/resources/org/languagetool/resource/en/hunspell/spelling.txt
@@ -77,6 +77,7 @@ et al
 etherealization
 ex officio
 exempli gratia
+exteriorization
 fait accompli
 feralized
 focalization
@@ -238,6 +239,7 @@ oxygenized
 oxygenizes
 oxygenizing
 pacta sunt servanda
+palletization
 Palme d'or
 Palme d'Or
 panegyrize
@@ -250,6 +252,7 @@ papalizes
 papalizing
 papyral
 parabolization
+parameterization
 parfocalize
 parfocalized
 parfocalizes",Add spellings and US - GB .,"""Added British English spellings for various words""","""Update English language module with additional verb forms and spellings""","""Add exteriorization, palletization, parameterization to en-US-GB.txt and spelling.txt""","Added new British English and American English conversions, including ""exteriorization"", ""palletization"", and corrected ""parameterization"" in `en-US-GB.txt` and `spelling.txt`."
"diff --git a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/InvocationState.java b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/InvocationState.java
index d58d7ef0a50..5e05ba30e79 100644
--- a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/InvocationState.java
+++ b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/InvocationState.java
@@ -29,7 +29,6 @@
 import io.quarkus.rest.runtime.core.Serialisers;
 import io.quarkus.rest.runtime.jaxrs.QuarkusRestConfiguration;
 import io.quarkus.rest.runtime.jaxrs.QuarkusRestResponse;
-import io.quarkus.rest.runtime.jaxrs.QuarkusRestResponseBuilder;
 import io.quarkus.rest.runtime.util.CaseInsensitiveMap;
 import io.vertx.core.Handler;
 import io.vertx.core.buffer.Buffer;
@@ -230,9 +229,10 @@ private void ensureResponseAndRunFilters(QuarkusRestClientResponseContext respon
                 }
             }
         }
-        QuarkusRestResponseBuilder builder = new QuarkusRestResponseBuilder();
+        QuarkusRestClientResponseBuilder builder = new QuarkusRestClientResponseBuilder();
         builder.status(responseContext.getStatus(), responseContext.getReasonPhrase());
         builder.setAllHeaders(responseContext.getHeaders());
+        builder.serializers(serialisers);
         if (existingEntity != null) {
             builder.entity(existingEntity);
         } else {
@@ -245,8 +245,22 @@ private void ensureResponseAndRunFilters(QuarkusRestClientResponseContext respon
                         mediaType)) {
                     InputStream in = responseContext.getEntityStream();
                     try {
-                        builder.entity(((MessageBodyReader) reader).readFrom(responseType.getRawType(), responseType.getType(),
-                                null, mediaType, responseContext.getHeaders(), in));
+                        Object entity = ((MessageBodyReader) reader).readFrom(responseType.getRawType(), responseType.getType(),
+                                null, mediaType, responseContext.getHeaders(), in);
+                        builder.entity(entity);
+
+                        // because we convert the bytes into the response type eagerly (as opposed to RESTEasy for example which does it on demand)
+                        // what we are doing here is making the data available for re-consumption which is needed when the Response is used
+                        // to read any entity of some specific class (the TCK does this extensively)
+                        if (in instanceof ByteArrayInputStream) {
+                            try {
+                                in.reset();
+                                builder.entityStream(in);
+                            } catch (IOException e) {
+                                // ignore as it just means that the input stream won't be available for re-consumption
+                            }
+                        }
+
                     } catch (IOException e) {
                         result.completeExceptionally(e);
                     }
diff --git a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponse.java b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponse.java
new file mode 100644
index 00000000000..a02ab214e0c
--- /dev/null
+++ b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponse.java
@@ -0,0 +1,52 @@
+package io.quarkus.rest.runtime.client;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import java.util.List;
+
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.ext.MessageBodyReader;
+
+import io.quarkus.rest.runtime.core.Serialisers;
+import io.quarkus.rest.runtime.jaxrs.QuarkusRestResponse;
+
+public class QuarkusRestClientResponse extends QuarkusRestResponse {
+
+    Serialisers serialisers;
+
+    @Override
+    public <T> T readEntity(Class<T> entityType) {
+        return readEntity(entityType, null, null);
+    }
+
+    @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
+    private <T> T readEntity(Class<T> entityType, Type genericType, Annotation[] annotations) {
+        if (entityType.isInstance(getEntity())) {
+            return (T) getEntity();
+        }
+
+        if (!(getEntityStream() instanceof ByteArrayInputStream)) {
+            throw new IllegalStateException(""Data cannot be re-read"");
+        }
+
+        MediaType mediaType = getMediaType();
+        List<MessageBodyReader<?>> readers = serialisers.findReaders(entityType, mediaType);
+        for (MessageBodyReader<?> reader : readers) {
+            if (reader.isReadable(entityType, genericType, annotations, mediaType)) {
+                Object entity;
+                try {
+                    entity = ((MessageBodyReader) reader).readFrom(entityType, genericType,
+                            annotations, mediaType, getStringHeaders(), getEntityStream());
+                } catch (IOException e) {
+                    throw new UncheckedIOException(e);
+                }
+                return (T) entity;
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponseBuilder.java b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponseBuilder.java
new file mode 100644
index 00000000000..65176ef2b4e
--- /dev/null
+++ b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/client/QuarkusRestClientResponseBuilder.java
@@ -0,0 +1,32 @@
+package io.quarkus.rest.runtime.client;
+
+import java.io.InputStream;
+
+import io.quarkus.rest.runtime.core.Serialisers;
+import io.quarkus.rest.runtime.jaxrs.QuarkusRestResponse;
+import io.quarkus.rest.runtime.jaxrs.QuarkusRestResponseBuilder;
+
+public class QuarkusRestClientResponseBuilder extends QuarkusRestResponseBuilder {
+
+    Serialisers serialisers;
+    InputStream entityStream;
+
+    public QuarkusRestClientResponseBuilder serializers(Serialisers serialisers) {
+        this.serialisers = serialisers;
+        return this;
+    }
+
+    public QuarkusRestClientResponseBuilder entityStream(InputStream entityStream) {
+        this.entityStream = entityStream;
+        return this;
+    }
+
+    @Override
+    public QuarkusRestResponse build() {
+        QuarkusRestClientResponse response = new QuarkusRestClientResponse();
+        populateResponse(response);
+        response.serialisers = serialisers;
+        response.setEntityStream(entityStream);
+        return response;
+    }
+}
diff --git a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponse.java b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponse.java
index 712b9bb4a34..df2efedc159 100644
--- a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponse.java
+++ b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponse.java
@@ -35,9 +35,9 @@ public class QuarkusRestResponse extends Response {
     String reasonPhrase;
     Object entity;
     MultivaluedMap<String, Object> headers;
+    InputStream entityStream;
     private QuarkusRestStatusType statusType;
     private MultivaluedHashMap<String, String> stringHeaders;
-    private InputStream entityStream;
 
     @Override
     public int getStatus() {
@@ -73,6 +73,14 @@ public Object getEntity() {
         return entity;
     }
 
+    public InputStream getEntityStream() {
+        return entityStream;
+    }
+
+    public void setEntityStream(InputStream entityStream) {
+        this.entityStream = entityStream;
+    }
+
     @Override
     public <T> T readEntity(Class<T> entityType) {
         // TODO Auto-generated method stub
diff --git a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponseBuilder.java b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponseBuilder.java
index 7dc47a65b5d..8b2cde430aa 100644
--- a/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponseBuilder.java
+++ b/extensions/quarkus-rest/runtime/src/main/java/io/quarkus/rest/runtime/jaxrs/QuarkusRestResponseBuilder.java
@@ -81,9 +81,33 @@ public class QuarkusRestResponseBuilder extends ResponseBuilder {
     MultivaluedMap<String, Object> metadata = new CaseInsensitiveMap<>();
     Annotation[] entityAnnotations;
 
+    public int getStatus() {
+        return status;
+    }
+
+    public String getReasonPhrase() {
+        return reasonPhrase;
+    }
+
+    public Object getEntity() {
+        return entity;
+    }
+
+    public Annotation[] getEntityAnnotations() {
+        return entityAnnotations;
+    }
+
     @Override
     public QuarkusRestResponse build() {
-        QuarkusRestResponse response = new QuarkusRestResponse();
+        return populateResponse(new QuarkusRestResponse());
+    }
+
+    /**
+     * Populates a response with the standard data
+     * 
+     * @return The given response
+     */
+    public <T extends QuarkusRestResponse> T populateResponse(T response) {
         response.entity = entity;
         if ((entity == null) && (status == -1)) {
             response.status = 204; // spec says that when no status is set and the entity is null, we",Implement readEntity for rest client,"""Improve Quarkus REST client response handling and entity reading""","""Added support for re-reading response entity and entity stream in Quarkus REST client responses""","""Fix Quarkus Rest Client Response handling""

This commit introduces the following changes:

1. A new class `QuarkusRestClientResponse` is added, which extends `QuarkusRestResponse`. It overrides the `readEntity` method to provide additional functionality for reading the entity from the response.

2. A new class `QuarkusRestClientResponseBuilder` is added, which extends `QuarkusRestResponseBuilder`. It adds two new methods: `serializers` and `entityStream`.

3. The `InvocationState` class is modified to use `QuarkusRestClientResponseBuilder` instead of `QuarkusRestResponseBuilder`. It also adds the serialized entity stream to the response builder, which allows the data to be re-consumed.

4. The `QuarkusRestResponse` class is modified to add a new field `entityStream` and corresponding getter and setter methods.

5. The `QuarkusRestResponseBuilder` class is modified to add getter methods for `status`, `reasonPhrase`, `entity`, and `entityAnnotations`. It also adds a new method `populateResponse` which is used to populate a response with the standard data.

These changes seem to be related to improving the handling of responses in the Quarkus Rest Client, particularly in terms of reading and re-consuming the entity data.",Refactor Quarkus Rest Client response handling to support re-reading of entity streams with new response builder.
"diff --git a/eval/CMakeLists.txt b/eval/CMakeLists.txt
index f128b1d8a20..7022569e6a3 100644
--- a/eval/CMakeLists.txt
+++ b/eval/CMakeLists.txt
@@ -55,9 +55,7 @@ vespa_define_module(
     src/tests/instruction/join_with_number
     src/tests/streamed/value
     src/tests/tensor/dense_add_dimension_optimizer
-    src/tests/tensor/dense_dimension_combiner
     src/tests/tensor/dense_fast_rename_optimizer
-    src/tests/tensor/dense_generic_join
     src/tests/tensor/dense_inplace_join_function
     src/tests/tensor/dense_pow_as_map_optimizer
     src/tests/tensor/dense_remove_dimension_optimizer
@@ -66,13 +64,11 @@ vespa_define_module(
     src/tests/tensor/dense_simple_map_function
     src/tests/tensor/dense_single_reduce_function
     src/tests/tensor/dense_tensor_create_function
-    src/tests/tensor/direct_dense_tensor_builder
     src/tests/tensor/instruction_benchmark
     src/tests/tensor/onnx_wrapper
     src/tests/tensor/partial_add
     src/tests/tensor/partial_modify
     src/tests/tensor/partial_remove
-    src/tests/tensor/tensor_address
     src/tests/tensor/tensor_conformance
     src/tests/tensor/typed_cells
     src/tests/tensor/vector_from_doubles_function
diff --git a/eval/src/tests/eval/tensor_lambda/tensor_lambda_test.cpp b/eval/src/tests/eval/tensor_lambda/tensor_lambda_test.cpp
index f1c8e6d3a5e..73a3648a34c 100644
--- a/eval/src/tests/eval/tensor_lambda/tensor_lambda_test.cpp
+++ b/eval/src/tests/eval/tensor_lambda/tensor_lambda_test.cpp
@@ -7,9 +7,7 @@
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/instruction/dense_cell_range_function.h>
 #include <vespa/eval/instruction/dense_lambda_peek_function.h>
-#include <vespa/eval/tensor/dense/dense_lambda_function.h>
 #include <vespa/eval/tensor/dense/dense_fast_rename_optimizer.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 #include <vespa/eval/eval/tensor_nodes.h>
diff --git a/eval/src/tests/tensor/dense_add_dimension_optimizer/dense_add_dimension_optimizer_test.cpp b/eval/src/tests/tensor/dense_add_dimension_optimizer/dense_add_dimension_optimizer_test.cpp
index 4b2ca3ae4ae..0e8e50daae5 100644
--- a/eval/src/tests/tensor/dense_add_dimension_optimizer/dense_add_dimension_optimizer_test.cpp
+++ b/eval/src/tests/tensor/dense_add_dimension_optimizer/dense_add_dimension_optimizer_test.cpp
@@ -5,7 +5,6 @@
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/tensor/dense/dense_fast_rename_optimizer.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/dense_fast_rename_optimizer/dense_fast_rename_optimizer_test.cpp b/eval/src/tests/tensor/dense_fast_rename_optimizer/dense_fast_rename_optimizer_test.cpp
index 681b1987a6d..52afde0e92c 100644
--- a/eval/src/tests/tensor/dense_fast_rename_optimizer/dense_fast_rename_optimizer_test.cpp
+++ b/eval/src/tests/tensor/dense_fast_rename_optimizer/dense_fast_rename_optimizer_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/tensor/dense/dense_fast_rename_optimizer.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/dense_generic_join/CMakeLists.txt b/eval/src/tests/tensor/dense_generic_join/CMakeLists.txt
deleted file mode 100644
index 1fbb35cb2b8..00000000000
--- a/eval/src/tests/tensor/dense_generic_join/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-# Copyright 2018 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-vespa_add_executable(eval_dense_generic_join_test_app TEST
-    SOURCES
-    dense_generic_join_test.cpp
-    DEPENDS
-    vespaeval
-)
-vespa_add_test(NAME eval_dense_generic_join_test_app COMMAND eval_dense_generic_join_test_app)
diff --git a/eval/src/tests/tensor/dense_generic_join/dense_generic_join_test.cpp b/eval/src/tests/tensor/dense_generic_join/dense_generic_join_test.cpp
deleted file mode 100644
index faf6bed2786..00000000000
--- a/eval/src/tests/tensor/dense_generic_join/dense_generic_join_test.cpp
+++ /dev/null
@@ -1,124 +0,0 @@
-// Copyright 2018 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-
-#include <vespa/vespalib/testkit/test_kit.h>
-#include <vespa/eval/eval/tensor_function.h>
-#include <vespa/eval/tensor/dense/typed_dense_tensor_builder.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
-#include <vespa/eval/eval/test/tensor_model.hpp>
-#include <vespa/eval/eval/test/eval_fixture.h>
-
-#include <vespa/vespalib/util/stringfmt.h>
-#include <vespa/vespalib/util/stash.h>
-
-using namespace vespalib;
-using namespace vespalib::eval;
-using namespace vespalib::eval::test;
-using namespace vespalib::tensor;
-using namespace vespalib::eval::tensor_function;
-
-const ValueBuilderFactory &prod_factory = FastValueBuilderFactory::get();
-
-double seq_value = 0.0;
-
-struct GlobalSequence : public Sequence {
-    GlobalSequence() {}
-    double operator[](size_t) const override {
-        seq_value += 1.0;
-        return seq_value;
-    }
-    ~GlobalSequence() {}
-};
-GlobalSequence seq;
-
-EvalFixture::ParamRepo make_params() {
-    return EvalFixture::ParamRepo()
-        .add(""con_x5_A"",     spec({x(5)          }, seq))
-        .add(""con_x5y3_B"",   spec({x(5),y(3)     }, seq))
-        .add(""con_x5z4_C"",   spec({x(5),     z(4)}, seq))
-        .add(""con_x5y3z4_D"", spec({x(5),y(3),z(4)}, seq))
-        .add(""con_y3_E"",     spec({     y(3)     }, seq))
-        .add(""con_y3z4_F"",   spec({     y(3),z(4)}, seq))
-        .add(""con_z4_G"",     spec({          z(4)}, seq))
-        .add(""con_x5f_H"",    spec({x(5)          }, seq), ""tensor<float>(x[5])"")
-        .add(""con_x5y3_I"",   spec({x(5),y(3)     }, seq), ""tensor<float>(x[5],y[3])"")
-        .add(""con_x5z4_J"",   spec({x(5),     z(4)}, seq), ""tensor<float>(x[5],z[4])"")
-        .add(""con_x5y3z4_K"", spec({x(5),y(3),z(4)}, seq), ""tensor<float>(x[5],y[3],z[4])"")
-        .add(""con_y3_L"",     spec({     y(3)     }, seq), ""tensor<float>(y[3])"")
-        .add(""con_y3z4_M"",   spec({     y(3),z(4)}, seq), ""tensor<float>(y[3],z[4])))"")
-        .add(""con_z4_N"",     spec({          z(4)}, seq), ""tensor<float>(z[4]))"")
-        .add(""con_y2"",       spec({y(5)}, seq))
-        .add(""con_y2f"",      spec({y(5)}, seq), ""tensor<float>(y[2]))"");
-}
-EvalFixture::ParamRepo param_repo = make_params();
-
-void verify_equal(const vespalib::string &expr) {
-    EvalFixture fixture(prod_factory, expr, param_repo, true, true);
-    EXPECT_EQUAL(fixture.result(), EvalFixture::ref(expr, param_repo));
-}
-
-
-TEST(""require that non-overlapping dense join works"") {
-    TEST_DO(verify_equal(""con_x5_A-con_y3_E""));
-    TEST_DO(verify_equal(""con_x5_A+con_y3_E""));
-    TEST_DO(verify_equal(""con_x5_A*con_y3_E""));
-
-    TEST_DO(verify_equal(""con_x5_A-con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5_A+con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5_A*con_y3z4_F""));
-
-    TEST_DO(verify_equal(""con_x5_A-con_z4_G""));
-    TEST_DO(verify_equal(""con_x5_A+con_z4_G""));
-    TEST_DO(verify_equal(""con_x5_A*con_z4_G""));
-
-    TEST_DO(verify_equal(""con_x5y3_B-con_z4_G""));
-    TEST_DO(verify_equal(""con_x5y3_B+con_z4_G""));
-    TEST_DO(verify_equal(""con_x5y3_B*con_z4_G""));
-
-    TEST_DO(verify_equal(""con_y3_E-con_z4_G""));
-    TEST_DO(verify_equal(""con_y3_E+con_z4_G""));
-    TEST_DO(verify_equal(""con_y3_E*con_z4_G""));
-}
-
-TEST(""require that overlapping dense join works"") {
-    TEST_DO(verify_equal(""con_x5_A-con_x5y3_B""));
-    TEST_DO(verify_equal(""con_x5_A+con_x5y3_B""));
-    TEST_DO(verify_equal(""con_x5_A*con_x5y3_B""));
-
-    TEST_DO(verify_equal(""con_x5_A-con_x5z4_C""));
-    TEST_DO(verify_equal(""con_x5_A+con_x5z4_C""));
-    TEST_DO(verify_equal(""con_x5_A*con_x5z4_C""));
-
-    TEST_DO(verify_equal(""con_x5y3_B-con_y3_E""));
-    TEST_DO(verify_equal(""con_x5y3_B+con_y3_E""));
-    TEST_DO(verify_equal(""con_x5y3_B*con_y3_E""));
-
-    TEST_DO(verify_equal(""con_x5y3_B-con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3_B+con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3_B*con_y3z4_F""));
-
-    TEST_DO(verify_equal(""con_x5y3z4_D-con_x5y3_B""));
-    TEST_DO(verify_equal(""con_x5y3z4_D+con_x5y3_B""));
-    TEST_DO(verify_equal(""con_x5y3z4_D*con_x5y3_B""));
-
-    TEST_DO(verify_equal(""con_x5y3z4_D-con_x5z4_C""));
-    TEST_DO(verify_equal(""con_x5y3z4_D+con_x5z4_C""));
-    TEST_DO(verify_equal(""con_x5y3z4_D*con_x5z4_C""));
-
-    TEST_DO(verify_equal(""con_x5y3z4_D-con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3z4_D+con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3z4_D*con_y3z4_F""));
-
-    TEST_DO(verify_equal(""con_x5y3z4_D-con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3z4_D+con_y3z4_F""));
-    TEST_DO(verify_equal(""con_x5y3z4_D*con_y3z4_F""));
-
-    TEST_DO(verify_equal(""con_y3_E-con_y3z4_F""));
-    TEST_DO(verify_equal(""con_y3_E+con_y3z4_F""));
-    TEST_DO(verify_equal(""con_y3_E*con_y3z4_F""));
-
-    TEST_DO(verify_equal(""con_y3z4_F-con_z4_G""));
-    TEST_DO(verify_equal(""con_y3z4_F+con_z4_G""));
-    TEST_DO(verify_equal(""con_y3z4_F*con_z4_G""));
-}
-
-TEST_MAIN() { TEST_RUN_ALL(); }
diff --git a/eval/src/tests/tensor/dense_inplace_join_function/dense_inplace_join_function_test.cpp b/eval/src/tests/tensor/dense_inplace_join_function/dense_inplace_join_function_test.cpp
index 0f3a200bfdd..853607ae76d 100644
--- a/eval/src/tests/tensor/dense_inplace_join_function/dense_inplace_join_function_test.cpp
+++ b/eval/src/tests/tensor/dense_inplace_join_function/dense_inplace_join_function_test.cpp
@@ -2,7 +2,6 @@
 
 #include <vespa/vespalib/testkit/test_kit.h>
 #include <vespa/eval/eval/tensor_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/dense_remove_dimension_optimizer/dense_remove_dimension_optimizer_test.cpp b/eval/src/tests/tensor/dense_remove_dimension_optimizer/dense_remove_dimension_optimizer_test.cpp
index b655c52c9d3..69910e27b4b 100644
--- a/eval/src/tests/tensor/dense_remove_dimension_optimizer/dense_remove_dimension_optimizer_test.cpp
+++ b/eval/src/tests/tensor/dense_remove_dimension_optimizer/dense_remove_dimension_optimizer_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/tensor/dense/dense_fast_rename_optimizer.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/dense_replace_type_function/dense_replace_type_function_test.cpp b/eval/src/tests/tensor/dense_replace_type_function/dense_replace_type_function_test.cpp
index dd4ddb9044a..2612869e72f 100644
--- a/eval/src/tests/tensor/dense_replace_type_function/dense_replace_type_function_test.cpp
+++ b/eval/src/tests/tensor/dense_replace_type_function/dense_replace_type_function_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/fast_value.h>
 #include <vespa/eval/eval/value_codec.h>
 #include <vespa/eval/eval/interpreted_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 
diff --git a/eval/src/tests/tensor/dense_single_reduce_function/dense_single_reduce_function_test.cpp b/eval/src/tests/tensor/dense_single_reduce_function/dense_single_reduce_function_test.cpp
index 1948d8d010a..347228269cf 100644
--- a/eval/src/tests/tensor/dense_single_reduce_function/dense_single_reduce_function_test.cpp
+++ b/eval/src/tests/tensor/dense_single_reduce_function/dense_single_reduce_function_test.cpp
@@ -4,8 +4,6 @@
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/eval/operation.h>
 #include <vespa/eval/tensor/dense/dense_single_reduce_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/dense_tensor_create_function/dense_tensor_create_function_test.cpp b/eval/src/tests/tensor/dense_tensor_create_function/dense_tensor_create_function_test.cpp
index 2bc937a26bf..edf999e97b3 100644
--- a/eval/src/tests/tensor/dense_tensor_create_function/dense_tensor_create_function_test.cpp
+++ b/eval/src/tests/tensor/dense_tensor_create_function/dense_tensor_create_function_test.cpp
@@ -3,7 +3,6 @@
 #include <vespa/vespalib/testkit/test_kit.h>
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/tensor/dense/dense_tensor_create_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/tests/tensor/direct_dense_tensor_builder/CMakeLists.txt b/eval/src/tests/tensor/direct_dense_tensor_builder/CMakeLists.txt
deleted file mode 100644
index 70ccbddd617..00000000000
--- a/eval/src/tests/tensor/direct_dense_tensor_builder/CMakeLists.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-# Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-vespa_add_executable(eval_direct_dense_tensor_builder_test_app TEST
-    SOURCES
-    direct_dense_tensor_builder_test.cpp
-    DEPENDS
-    vespaeval
-)
-vespa_add_test(NAME eval_direct_dense_tensor_builder_test_app COMMAND eval_direct_dense_tensor_builder_test_app)
diff --git a/eval/src/tests/tensor/direct_dense_tensor_builder/direct_dense_tensor_builder_test.cpp b/eval/src/tests/tensor/direct_dense_tensor_builder/direct_dense_tensor_builder_test.cpp
deleted file mode 100644
index 52768663647..00000000000
--- a/eval/src/tests/tensor/direct_dense_tensor_builder/direct_dense_tensor_builder_test.cpp
+++ /dev/null
@@ -1,192 +0,0 @@
-// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-
-#include <vespa/vespalib/test/insertion_operators.h>
-#include <vespa/vespalib/testkit/test_kit.h>
-#include <vespa/eval/tensor/dense/typed_dense_tensor_builder.h>
-#include <vespa/vespalib/util/exceptions.h>
-
-using namespace vespalib::tensor;
-using vespalib::IllegalArgumentException;
-using BuilderDbl = TypedDenseTensorBuilder<double>;
-using BuilderFlt = TypedDenseTensorBuilder<float>;
-using vespalib::eval::TensorSpec;
-using vespalib::eval::ValueType;
-using vespalib::ConstArrayRef;
-
-struct CallMakeVector {
-    template <typename T>
-    static std::vector<double> call(const ConstArrayRef<T> &ref) {
-        std::vector<double> result;
-        result.reserve(ref.size());
-        for (T v : ref) {
-            result.push_back(v);
-        }
-        return result;
-    }
-};
-
-void assertTensor(const vespalib::string &type_spec,
-                  const std::vector<double> &expCells,
-                  const Tensor &tensor)
-{
-    EXPECT_EQUAL(ValueType::from_spec(type_spec), tensor.type());
-    EXPECT_EQUAL(expCells, dispatch_1<CallMakeVector>(tensor.cells()));
-}
-
-void assertTensorSpec(const TensorSpec &expSpec, const Tensor &tensor) {
-    TensorSpec actSpec = tensor.toSpec();
-    EXPECT_EQUAL(expSpec, actSpec);
-}
-
-Tensor::UP build1DTensor() {
-    BuilderDbl builder(ValueType::from_spec(""tensor(x[3])""));
-    builder.insertCell(0, 10);
-    builder.insertCell(1, 11);
-    builder.insertCell(2, 12);
-    return builder.build();
-}
-
-TEST(""require that 1d tensor can be constructed"") {
-    assertTensor(""tensor(x[3])"", {10,11,12}, *build1DTensor());
-}
-
-TEST(""require that 1d tensor can be converted to tensor spec"") {
-    assertTensorSpec(TensorSpec(""tensor(x[3])"").
-                     add({{""x"", 0}}, 10).
-                     add({{""x"", 1}}, 11).
-                     add({{""x"", 2}}, 12),
-                     *build1DTensor());
-}
-
-Tensor::UP build2DTensor() {
-    BuilderDbl builder(ValueType::from_spec(""tensor(x[3],y[2])""));
-    builder.insertCell({0, 0}, 10);
-    builder.insertCell({0, 1}, 11);
-    builder.insertCell({1, 0}, 12);
-    builder.insertCell({1, 1}, 13);
-    builder.insertCell({2, 0}, 14);
-    builder.insertCell({2, 1}, 15);
-    return builder.build();
-}
-
-TEST(""require that 2d tensor can be constructed"") {
-    assertTensor(""tensor(x[3],y[2])"", {10,11,12,13,14,15}, *build2DTensor());
-}
-
-TEST(""require that 2d tensor can be converted to tensor spec"") {
-    assertTensorSpec(TensorSpec(""tensor(x[3],y[2])"").
-                     add({{""x"", 0},{""y"", 0}}, 10).
-                     add({{""x"", 0},{""y"", 1}}, 11).
-                     add({{""x"", 1},{""y"", 0}}, 12).
-                     add({{""x"", 1},{""y"", 1}}, 13).
-                     add({{""x"", 2},{""y"", 0}}, 14).
-                     add({{""x"", 2},{""y"", 1}}, 15),
-                     *build2DTensor());
-}
-
-TEST(""require that 3d tensor can be constructed"") {
-    BuilderDbl builder(ValueType::from_spec(""tensor(x[3],y[2],z[2])""));
-    builder.insertCell({0, 0, 0}, 10);
-    builder.insertCell({0, 0, 1}, 11);
-    builder.insertCell({0, 1, 0}, 12);
-    builder.insertCell({0, 1, 1}, 13);
-    builder.insertCell({1, 0, 0}, 14);
-    builder.insertCell({1, 0, 1}, 15);
-    builder.insertCell({1, 1, 0}, 16);
-    builder.insertCell({1, 1, 1}, 17);
-    builder.insertCell({2, 0, 0}, 18);
-    builder.insertCell({2, 0, 1}, 19);
-    builder.insertCell({2, 1, 0}, 20);
-    builder.insertCell({2, 1, 1}, 21);
-    assertTensor(""tensor(x[3],y[2],z[2])"",
-                 {10,11,12,13,14,15,16,17,18,19,20,21},
-                 *builder.build());
-}
-
-TEST(""require that 2d tensor with float cells can be constructed"") {
-    BuilderFlt builder(ValueType::from_spec(""tensor<float>(x[3],y[2])""));
-    builder.insertCell({0, 1}, 2.5);
-    builder.insertCell({1, 0}, 1.5);
-    builder.insertCell({2, 0}, -0.25);
-    builder.insertCell({2, 1}, 0.75);
-    assertTensor(""tensor<float>(x[3],y[2])"", {0,2.5,1.5,0,-0.25,0.75},
-                 *builder.build());
-}
-
-TEST(""require that cells get default value 0 if not specified"") {
-    BuilderDbl builder(ValueType::from_spec(""tensor(x[3])""));
-    builder.insertCell(1, 11);
-    assertTensor(""tensor(x[3])"", {0,11,0},
-                 *builder.build());
-}
-
-void assertTensorCell(const DenseTensorView::Address &expAddress,
-                      double expCell,
-                      const DenseTensorView::CellsIterator &itr)
-{
-    EXPECT_TRUE(itr.valid());
-    EXPECT_EQUAL(expAddress, itr.address());
-    EXPECT_EQUAL(expCell, itr.cell());
-}
-
-TEST(""require that dense tensor cells iterator works for 1d tensor"") {
-    Tensor::UP tensor;
-    {
-        BuilderDbl builder(ValueType::from_spec(""tensor(x[2])""));
-        builder.insertCell(0, 2);
-        builder.insertCell(1, 3);
-        tensor = builder.build();
-    }
-
-    const DenseTensorView &denseTensor = dynamic_cast<const DenseTensorView &>(*tensor);
-    DenseTensorView::CellsIterator itr = denseTensor.cellsIterator();
-
-    assertTensorCell({0}, 2, itr);
-    itr.next();
-    assertTensorCell({1}, 3, itr);
-    itr.next();
-    EXPECT_FALSE(itr.valid());
-}
-
-TEST(""require that dense tensor cells iterator works for 2d tensor"") {
-    Tensor::UP tensor;
-    {
-        BuilderDbl builder(ValueType::from_spec(""tensor(x[2],y[2])""));
-        builder.insertCell({0, 0}, 2);
-        builder.insertCell({0, 1}, 3);
-        builder.insertCell({1, 0}, 5);
-        builder.insertCell({1, 1}, 7);
-        tensor = builder.build();
-    }
-
-    const DenseTensorView &denseTensor = dynamic_cast<const DenseTensorView &>(*tensor);
-    DenseTensorView::CellsIterator itr = denseTensor.cellsIterator();
-
-    assertTensorCell({0,0}, 2, itr);
-    itr.next();
-    assertTensorCell({0,1}, 3, itr);
-    itr.next();
-    assertTensorCell({1,0}, 5, itr);
-    itr.next();
-    assertTensorCell({1,1}, 7, itr);
-    itr.next();
-    EXPECT_FALSE(itr.valid());
-}
-
-TEST(""require that memory used count is reasonable"") {
-    Tensor::UP full = build2DTensor();
-    const DenseTensorView &full_view = dynamic_cast<const DenseTensorView &>(*full);
-    DenseTensorView ref_view(full_view.fast_type(), full_view.cells());
-
-    size_t full_sz = full->get_memory_usage().usedBytes();
-    size_t view_sz = full_view.get_memory_usage().usedBytes();
-    size_t ref_sz = ref_view.get_memory_usage().usedBytes();
-
-    EXPECT_EQUAL(ref_sz, sizeof(DenseTensorView));
-    EXPECT_LESS(ref_sz, full_sz);
-    EXPECT_EQUAL(full_sz, view_sz);
-    EXPECT_LESS(full_sz, 10000u);
-    EXPECT_GREATER(full_sz, sizeof(DenseTensor<double>));
-}
-
-TEST_MAIN() { TEST_RUN_ALL(); }
diff --git a/eval/src/tests/tensor/partial_add/partial_add_test.cpp b/eval/src/tests/tensor/partial_add/partial_add_test.cpp
index 42db77a311f..893acf07adb 100644
--- a/eval/src/tests/tensor/partial_add/partial_add_test.cpp
+++ b/eval/src/tests/tensor/partial_add/partial_add_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/value_codec.h>
 #include <vespa/eval/tensor/partial_update.h>
-#include <vespa/eval/tensor/tensor.h>
 #include <vespa/vespalib/util/stringfmt.h>
 #include <vespa/vespalib/gtest/gtest.h>
 #include <optional>
diff --git a/eval/src/tests/tensor/partial_modify/partial_modify_test.cpp b/eval/src/tests/tensor/partial_modify/partial_modify_test.cpp
index a39bcc87ab3..a1802540fa5 100644
--- a/eval/src/tests/tensor/partial_modify/partial_modify_test.cpp
+++ b/eval/src/tests/tensor/partial_modify/partial_modify_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/value_codec.h>
 #include <vespa/eval/tensor/partial_update.h>
-#include <vespa/eval/tensor/tensor.h>
 #include <vespa/vespalib/util/stringfmt.h>
 #include <vespa/vespalib/gtest/gtest.h>
 #include <optional>
diff --git a/eval/src/tests/tensor/partial_remove/partial_remove_test.cpp b/eval/src/tests/tensor/partial_remove/partial_remove_test.cpp
index 410331c5eb7..fef6d99519f 100644
--- a/eval/src/tests/tensor/partial_remove/partial_remove_test.cpp
+++ b/eval/src/tests/tensor/partial_remove/partial_remove_test.cpp
@@ -4,7 +4,6 @@
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/value_codec.h>
 #include <vespa/eval/tensor/partial_update.h>
-#include <vespa/eval/tensor/tensor.h>
 #include <vespa/vespalib/util/stringfmt.h>
 #include <vespa/vespalib/gtest/gtest.h>
 #include <optional>
diff --git a/eval/src/tests/tensor/vector_from_doubles_function/vector_from_doubles_function_test.cpp b/eval/src/tests/tensor/vector_from_doubles_function/vector_from_doubles_function_test.cpp
index 9881d120a74..c3e1f2f248e 100644
--- a/eval/src/tests/tensor/vector_from_doubles_function/vector_from_doubles_function_test.cpp
+++ b/eval/src/tests/tensor/vector_from_doubles_function/vector_from_doubles_function_test.cpp
@@ -3,7 +3,6 @@
 #include <vespa/vespalib/testkit/test_kit.h>
 #include <vespa/eval/eval/tensor_function.h>
 #include <vespa/eval/tensor/dense/vector_from_doubles_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor.h>
 #include <vespa/eval/eval/test/tensor_model.hpp>
 #include <vespa/eval/eval/test/eval_fixture.h>
 
diff --git a/eval/src/vespa/eval/eval/optimize_tensor_function.cpp b/eval/src/vespa/eval/eval/optimize_tensor_function.cpp
index e13582e0fe9..ed0b122196d 100644
--- a/eval/src/vespa/eval/eval/optimize_tensor_function.cpp
+++ b/eval/src/vespa/eval/eval/optimize_tensor_function.cpp
@@ -13,7 +13,6 @@
 #include <vespa/eval/tensor/dense/dense_single_reduce_function.h>
 #include <vespa/eval/tensor/dense/dense_remove_dimension_optimizer.h>
 #include <vespa/eval/instruction/dense_lambda_peek_optimizer.h>
-#include <vespa/eval/tensor/dense/dense_lambda_function.h>
 #include <vespa/eval/instruction/dense_simple_expand_function.h>
 #include <vespa/eval/tensor/dense/dense_simple_join_function.h>
 #include <vespa/eval/instruction/join_with_number_function.h>
diff --git a/eval/src/vespa/eval/instruction/dense_cell_range_function.cpp b/eval/src/vespa/eval/instruction/dense_cell_range_function.cpp
index 18ccb33fadf..4c655c67747 100644
--- a/eval/src/vespa/eval/instruction/dense_cell_range_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_cell_range_function.cpp
@@ -1,7 +1,6 @@
 // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 
 #include ""dense_cell_range_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/value.h>
 
 namespace vespalib::eval {
@@ -15,7 +14,7 @@ void my_cell_range_op(InterpretedFunction::State &state, uint64_t param) {
     const auto &self = unwrap_param<DenseCellRangeFunction>(param);
     auto old_cells = state.peek(0).cells().typify<CT>();
     ConstArrayRef<CT> new_cells(&old_cells[self.offset()], self.length());
-    state.pop_push(state.stash.create<tensor::DenseTensorView>(self.result_type(), TypedCells(new_cells)));
+    state.pop_push(state.stash.create<DenseValueView>(self.result_type(), TypedCells(new_cells)));
 }
 
 struct MyCellRangeOp {
diff --git a/eval/src/vespa/eval/instruction/dense_dot_product_function.cpp b/eval/src/vespa/eval/instruction/dense_dot_product_function.cpp
index ce27bec35d4..e3cf52a8e3f 100644
--- a/eval/src/vespa/eval/instruction/dense_dot_product_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_dot_product_function.cpp
@@ -1,7 +1,6 @@
 // Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 
 #include ""dense_dot_product_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/operation.h>
 #include <vespa/eval/eval/value.h>
 #include <cblas.h>
diff --git a/eval/src/vespa/eval/instruction/dense_lambda_peek_function.cpp b/eval/src/vespa/eval/instruction/dense_lambda_peek_function.cpp
index bf9d5b10a5f..4a4f6b9be14 100644
--- a/eval/src/vespa/eval/instruction/dense_lambda_peek_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_lambda_peek_function.cpp
@@ -2,7 +2,6 @@
 
 #include ""dense_lambda_peek_function.h""
 #include ""index_lookup_table.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/value.h>
 
 namespace vespalib::eval {
diff --git a/eval/src/vespa/eval/instruction/dense_lambda_peek_optimizer.cpp b/eval/src/vespa/eval/instruction/dense_lambda_peek_optimizer.cpp
index a2ea24dbf0a..6853b1a078f 100644
--- a/eval/src/vespa/eval/instruction/dense_lambda_peek_optimizer.cpp
+++ b/eval/src/vespa/eval/instruction/dense_lambda_peek_optimizer.cpp
@@ -3,7 +3,6 @@
 #include ""dense_lambda_peek_optimizer.h""
 #include ""dense_lambda_peek_function.h""
 #include ""dense_cell_range_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/tensor/dense/dense_replace_type_function.h>
 #include <vespa/eval/eval/value.h>
 #include <vespa/eval/eval/node_tools.h>
diff --git a/eval/src/vespa/eval/instruction/dense_matmul_function.cpp b/eval/src/vespa/eval/instruction/dense_matmul_function.cpp
index 1394a201e6d..33d9054820b 100644
--- a/eval/src/vespa/eval/instruction/dense_matmul_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_matmul_function.cpp
@@ -1,7 +1,6 @@
 // Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 
 #include ""dense_matmul_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/vespalib/objects/objectvisitor.h>
 #include <vespa/eval/eval/value.h>
 #include <vespa/eval/eval/operation.h>
diff --git a/eval/src/vespa/eval/instruction/dense_matmul_function.h b/eval/src/vespa/eval/instruction/dense_matmul_function.h
index a5432a7d86f..c96f2c35c75 100644
--- a/eval/src/vespa/eval/instruction/dense_matmul_function.h
+++ b/eval/src/vespa/eval/instruction/dense_matmul_function.h
@@ -3,7 +3,6 @@
 #pragma once
 
 #include <vespa/eval/eval/tensor_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 
 namespace vespalib::eval {
 
diff --git a/eval/src/vespa/eval/instruction/dense_multi_matmul_function.h b/eval/src/vespa/eval/instruction/dense_multi_matmul_function.h
index 3038bdf7fdc..7dd99b58a2f 100644
--- a/eval/src/vespa/eval/instruction/dense_multi_matmul_function.h
+++ b/eval/src/vespa/eval/instruction/dense_multi_matmul_function.h
@@ -2,7 +2,6 @@
 
 #pragma once
 
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/tensor_function.h>
 
 namespace vespalib::eval {
diff --git a/eval/src/vespa/eval/instruction/dense_simple_expand_function.cpp b/eval/src/vespa/eval/instruction/dense_simple_expand_function.cpp
index a656a0249f9..e67aa042881 100644
--- a/eval/src/vespa/eval/instruction/dense_simple_expand_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_simple_expand_function.cpp
@@ -1,7 +1,6 @@
 // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 
 #include ""dense_simple_expand_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/vespalib/objects/objectvisitor.h>
 #include <vespa/eval/eval/value.h>
 #include <vespa/eval/eval/operation.h>
diff --git a/eval/src/vespa/eval/instruction/dense_tensor_peek_function.cpp b/eval/src/vespa/eval/instruction/dense_tensor_peek_function.cpp
index 323909227f7..07fd0f8938c 100644
--- a/eval/src/vespa/eval/instruction/dense_tensor_peek_function.cpp
+++ b/eval/src/vespa/eval/instruction/dense_tensor_peek_function.cpp
@@ -1,7 +1,6 @@
 // Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
 
 #include ""dense_tensor_peek_function.h""
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/eval/eval/value.h>
 
 namespace vespalib::eval {
diff --git a/eval/src/vespa/eval/instruction/dense_xw_product_function.h b/eval/src/vespa/eval/instruction/dense_xw_product_function.h
index 6883c8a981f..7e87377f891 100644
--- a/eval/src/vespa/eval/instruction/dense_xw_product_function.h
+++ b/eval/src/vespa/eval/instruction/dense_xw_product_function.h
@@ -3,7 +3,6 @@
 #pragma once
 
 #include <vespa/eval/eval/tensor_function.h>
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 
 namespace vespalib::eval {
 
diff --git a/eval/src/vespa/eval/instruction/generic_concat.cpp b/eval/src/vespa/eval/instruction/generic_concat.cpp
index 4d949d5e725..fa9d2192b99 100644
--- a/eval/src/vespa/eval/instruction/generic_concat.cpp
+++ b/eval/src/vespa/eval/instruction/generic_concat.cpp
@@ -4,7 +4,6 @@
 #include ""generic_join.h""
 #include <vespa/eval/eval/value.h>
 #include <vespa/eval/eval/wrap_param.h>
-#include <vespa/eval/tensor/dense/dense_tensor_view.h>
 #include <vespa/vespalib/util/overload.h>
 #include <vespa/vespalib/util/stash.h>
 #include <vespa/vespalib/util/typify.h>
diff --git a/eval/src/vespa/eval/tensor/CMakeLists.txt b/eval/src/vespa/eval/tensor/CMakeLists.txt
index c2968bd3efd..8b0178bd656 100644
--- a/eval/src/vespa/eval/tensor/CMakeLists.txt
+++ b/eval/src/vespa/eval/tensor/CMakeLists.txt
@@ -2,6 +2,4 @@
 vespa_add_library(eval_tensor OBJECT
     SOURCES
     partial_update.cpp
-    tensor.cpp
-    tensor_address.cpp
 )
diff --git a/eval/src/vespa/eval/tensor/cell_function.h b/eval/src/vespa/eval/tensor/cell_function.h
deleted file mode 100644
index a268c9a34b1..00000000000
--- a/eval/src/vespa/eval/tensor/cell_function.h
+++ /dev/null
@@ -1,19 +0,0 @@
-// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-
-#pragma once
-
-#include <functional>
-
-namespace vespalib::tensor {
-
-/**
- * Interface for a function to be applied on cells in a tensor.
- */
-struct CellFunction
-{
-    typedef std::reference_wrapper<const CellFunction> CREF;
-    virtual ~CellFunction() {}
-    virtual double apply(double value) const = 0;
-};
-
-}
diff --git a/eval/src/vespa/eval/tensor/dense/CMakeLists.txt b/eval/src/vespa/eval/tensor/dense/CMakeLists.txt
index a8ce38fb270..1431ae53f66 100644
--- a/eval/src/vespa/eval/tensor/dense/CMakeLists.txt
+++ b/eval/src/vespa/eval/tensor/dense/CMakeLists.txt
@@ -2,26 +2,15 @@
 vespa_add_library(eval_tensor_dense OBJECT
     SOURCES
     dense_add_dimension_optimizer.cpp
-    dense_dimension_combiner.cpp
     dense_fast_rename_optimizer.cpp
-    dense_lambda_function.cpp
-    dense_number_join_function.cpp
     dense_pow_as_map_optimizer.cpp
     dense_remove_dimension_optimizer.cpp
     dense_replace_type_function.cpp
     dense_simple_join_function.cpp
     dense_simple_map_function.cpp
     dense_single_reduce_function.cpp
-    dense_tensor.cpp
-    dense_tensor_address_mapper.cpp
-    dense_tensor_cells_iterator.cpp
     dense_tensor_create_function.cpp
-    dense_tensor_reduce.cpp
-    dense_tensor_value_builder.cpp
-    dense_tensor_view.cpp
     mutable_dense_tensor_view.cpp
     onnx_wrapper.cpp
-    typed_cells_dispatch.cpp
-    typed_dense_tensor_builder.cpp
     vector_from_doubles_function.cpp
 )
diff --git a/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.cpp b/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.cpp
deleted file mode 100644
index 22c8ff12ad1..00000000000
--- a/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.cpp
+++ /dev/null
@@ -1,91 +0,0 @@
-// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-
-#include ""dense_dimension_combiner.h""
-#include <cassert>
-
-namespace vespalib::tensor {
-
-DenseDimensionCombiner::~DenseDimensionCombiner() = default;
-
-DenseDimensionCombiner::DenseDimensionCombiner(const eval::ValueType &lhs,
-                                               const eval::ValueType &rhs)
-  : _left(), _right(),
-    _commonDims(),
-    _outputIndex(0),
-    _outputSize(1u),
-    result_type(eval::ValueType::join(lhs, rhs))
-{
-    assert(lhs.is_dense());
-    assert(rhs.is_dense());
-    assert(result_type.is_dense());
-
-    const auto &lDims = lhs.dimensions();
-    const auto &rDims = rhs.dimensions();
-    const auto &oDims = result_type.dimensions();
-
-    size_t i = lDims.size();
-    size_t j = rDims.size();
-    size_t k = oDims.size();
-
-    uint32_t lMul = 1;
-    uint32_t rMul = 1;
-    uint32_t oMul = 1;
-
-    while (k-- > 0) {
-        if ((i > 0) && (lDims[i-1].name == oDims[k].name)) {
-            --i;
-            // left dim match
-            if ((j > 0) && (rDims[j-1].name == oDims[k].name)) {
-                // both dim match
-                --j;
-                CommonDim cd;
-                cd.idx = 0;
-                cd.leftMultiplier = lMul;
-                cd.rightMultiplier = rMul;
-                cd.outputMultiplier = oMul;
-                assert(lDims[i].size == oDims[k].size);
-                assert(rDims[j].size == oDims[k].size);
-                cd.size = oDims[k].size;
-                lMul *= cd.size;
-                rMul *= cd.size;
-                oMul *= cd.size;
-                _left.totalSize *= cd.size;
-                _right.totalSize *= cd.size;
-                _outputSize *= cd.size;
-                _commonDims.push_back(cd);
-            } else {
-                SideDim ld;
-                ld.idx = 0;
-                ld.sideMultiplier = lMul;
-                ld.outputMultiplier = oMul;
-                assert(lDims[i].size == oDims[k].size);
-                ld.size = oDims[k].size;
-                lMul *= ld.size;
-                oMul *= ld.size;
-                _outputSize *= ld.size;
-                _left.totalSize *= ld.size;
-                _left.dims.push_back(ld);
-            }
-        } else {
-            // right dim match
-            assert(j > 0);
-            assert(rDims[j-1].name == oDims[k].name);
-            --j;
-            SideDim rd;
-            rd.idx = 0;
-            rd.sideMultiplier = rMul;
-            rd.outputMultiplier = oMul;
-            assert(rDims[j].size == oDims[k].size);
-            rd.size = oDims[k].size;
-            rMul *= rd.size;
-            oMul *= rd.size;
-            _outputSize *= rd.size;
-            _right.totalSize *= rd.size;
-            _right.dims.push_back(rd);
-        }
-    }
-}
-
-
-} // namespace
-
diff --git a/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.h b/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.h
deleted file mode 100644
index dd3f74bad9b..00000000000
--- a/eval/src/vespa/eval/tensor/dense/dense_dimension_combiner.h
+++ /dev/null
@@ -1,114 +0,0 @@
-// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
-
-#pragma once
-
-#include <vespa/eval/tensor/tensor.h>
-#include <vespa/eval/tensor/types.h>
-#include <vespa/eval/eval/value_type.h>
-
-namespace vespalib::tensor {
-
-class DenseDimensionCombiner {
-
-    struct SideDim {
-        uint32_t idx;
-        uint32_t size;
-        uint32_t sideMultiplier;
-        uint32_t outputMultiplier;
-    };
-    struct CommonDim {
-        uint32_t idx;
-        uint32_t size;
-        uint32_t leftMultiplier;
-        uint32_t rightMultiplier;
-        uint32_t outputMultiplier;
-    };
-
-    struct SideDims {
-        std::vector<SideDim> dims;
-        uint32_t index;
-        uint32_t totalSize;
-
-        SideDims() : dims(), index(0), totalSize(1u) {}
-
-        void reset(uint32_t &outIndex) {
-            for (SideDim& d : dims) {
-                index -= d.idx * d.sideMultiplier;
-                outIndex -= d.idx * d.outputMultiplier;
-                d.idx = 0;
-            }
-            if (index >= totalSize) {
-                index -= totalSize;
-            }
-        }
-        void step(uint32_t &outIndex) {
-            for (SideDim& d : dims) {
-                d.idx++;
-                index += d.sideMultiplier;
-                outIndex += d.outputMultiplier;
-                if (d.idx < d.size) return;
-                index -= d.idx * d.sideMultiplier;
-                outIndex -= d.idx * d.outputMultiplier;
-                d.idx = 0;
-            }
-            index += totalSize;
-        }
-",remove old dense vectors,Remove dense tensor functionality.,"Removed unused dense tensor functionality.

This commit message is concise and accurately reflects the changes made in the commit. It mentions the removal of unused dense tensor functionality, which is the main change in the commit.","This commit removes several files and directories related to dense tensor operations in the Vespa evaluation library. Specifically, it removes:

* The dense generic join test files (`dense_generic_join_test.cpp` and its corresponding CMakeLists file)
* The direct dense tensor builder test files (`direct_dense_tensor_builder_test.cpp` and its corresponding CMakeLists file)
* The dense tensor address mapper and cells iterator (`dense_tensor_address_mapper.cpp`, `dense_tensor_cells_iterator.cpp`, and their corresponding header files)
* The dense tensor value builder (`dense_tensor_value_builder.cpp` and its corresponding header file)
* The dense tensor view (`dense_tensor_view.cpp` and its corresponding header file)
* The typed cells dispatch (`typed_cells_dispatch.cpp` and its corresponding header file)

It also modifies several other files to remove references to these removed files.

This commit does not appear to add any new functionality or features, but rather removes existing code. It is possible that this code was deprecated, unused, or replaced by other functionality.

Here is a possible commit message for this change:

Remove deprecated dense tensor operations

This commit removes several files and directories related to dense tensor operations in the Vespa evaluation library. This includes the dense generic join test, direct dense tensor builder test, dense tensor address mapper and cells iterator, dense tensor value builder, dense tensor view, and typed cells dispatch. These files and directories have been removed because the corresponding functionality has been deprecated, unused, or replaced by other functionality.","""Remove dense tensor utilities and related test cases from the project to streamline code and reduce redundancy."""
"diff --git a/presto-docs/src/main/sphinx/installation/deployment.rst b/presto-docs/src/main/sphinx/installation/deployment.rst
index 8c5c50f1a6..2a9b57ee50 100644
--- a/presto-docs/src/main/sphinx/installation/deployment.rst
+++ b/presto-docs/src/main/sphinx/installation/deployment.rst
@@ -2,6 +2,30 @@
 Deploying Presto
 ================
 
+Requirements
+------------
+
+Linux Operating System
+^^^^^^^^^^^^^^^^^^^^^^
+
+* 64-bit required
+* newer release preferred, especially when running on containers
+
+.. _requirements-java:
+
+Java Runtime Environment
+^^^^^^^^^^^^^^^^^^^^^^^^
+
+* 64-bit required
+* version 11 recommended (higher versions are less tested)
+* Azul Zulu recommended (most tested)
+
+Python
+^^^^^^
+
+* version 2.6.x, 2.7.x, or 3.x
+* required by the ``bin/launcher`` script only
+
 Installing Presto
 -----------------
 
diff --git a/presto-docs/src/main/sphinx/release/release-326.rst b/presto-docs/src/main/sphinx/release/release-326.rst
index c991d44bdd..dcba55f002 100644
--- a/presto-docs/src/main/sphinx/release/release-326.rst
+++ b/presto-docs/src/main/sphinx/release/release-326.rst
@@ -16,7 +16,7 @@ General Changes
 Server RPM Changes
 ------------------
 
-* Allow running Presto with Java 11 or newer. (:issue:`2057`)
+* Allow running Presto with :ref:`Java 11 or above <requirements-java>`. (:issue:`2057`)
 
 Security Changes
 ----------------
diff --git a/presto-docs/src/main/sphinx/release/release-330.rst b/presto-docs/src/main/sphinx/release/release-330.rst
index b7984feb14..1b022cf76e 100644
--- a/presto-docs/src/main/sphinx/release/release-330.rst
+++ b/presto-docs/src/main/sphinx/release/release-330.rst
@@ -31,7 +31,7 @@ General Changes
 Server Changes
 --------------
 
-* Require running on Java 11. This requirement may be temporarily relaxed by adding
+* Require running on :ref:`Java 11 or above <requirements-java>`. This requirement may be temporarily relaxed by adding
   ``-Dpresto-temporarily-allow-java8=true`` to the Presto :ref:`presto_jvm_config`.
   This fallback will be removed in future versions of Presto after March 2020. (:issue:`2751`)
 * Add experimental support for running on Linux aarch64 (ARM64). (:issue:`2809`)
diff --git a/presto-docs/src/main/sphinx/release/release-333.rst b/presto-docs/src/main/sphinx/release/release-333.rst
index 6e498cbaf5..3e0fc72de4 100644
--- a/presto-docs/src/main/sphinx/release/release-333.rst
+++ b/presto-docs/src/main/sphinx/release/release-333.rst
@@ -26,7 +26,7 @@ General Changes
 Server Changes
 --------------
 
-* Require running on Java 11 or above. (:issue:`2799`)
+* Require running on :ref:`Java 11 or above <requirements-java>`. (:issue:`2799`)
 
 Server RPM Changes
 ------------------",Add software requirements,"""Update Presto documentation to include system requirements and link to Java requirements""","""Update documentation to reflect Java 11 or above as the required version for Presto deployment and operation""","The commit message should be:

 Deploying Presto: Add requirements section
 Release 326: Update Java requirement in server RPM changes
 Release 330: Update Java requirement in server changes
 Release 333: Update Java requirement in server changes

The changes made in the first file add a new section titled ""Requirements"" that outlines the necessary operating system, Java runtime environment, and Python versions needed to run Presto. The other changes update the Java version requirement in the server RPM changes for release 326 and the server changes for releases 330 and 333. Specifically, the changes allow running Presto with Java 11 or above, which is recommended, and mention that Azul Zulu is the most tested Java version.","""Add system requirements section to deployment documentation and link Java requirements in release notes."""
"diff --git a/compose/compose-runtime/compose-runtime-benchmark/src/androidTest/java/androidx/compose/benchmark/realworld4/RealWorld4_Widgets.kt b/compose/compose-runtime/compose-runtime-benchmark/src/androidTest/java/androidx/compose/benchmark/realworld4/RealWorld4_Widgets.kt
index 75e33a51557..d6a8ae5567c 100644
--- a/compose/compose-runtime/compose-runtime-benchmark/src/androidTest/java/androidx/compose/benchmark/realworld4/RealWorld4_Widgets.kt
+++ b/compose/compose-runtime/compose-runtime-benchmark/src/androidTest/java/androidx/compose/benchmark/realworld4/RealWorld4_Widgets.kt
@@ -31,7 +31,7 @@ import androidx.ui.graphics.Color
 import androidx.ui.layout.Column
 import androidx.ui.layout.padding
 import androidx.ui.foundation.Box
-import androidx.ui.foundation.DrawBackground
+import androidx.ui.foundation.drawBackground
 import androidx.ui.layout.Row
 import androidx.ui.layout.fillMaxSize
 import androidx.ui.layout.fillMaxWidth
@@ -54,7 +54,7 @@ fun RealWorld4_FancyWidget_000(model: RealWorld4_DataModel_00) {
     }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_001(
@@ -124,7 +124,7 @@ fun RealWorld4_FancyWidget_001(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_002(
@@ -172,7 +172,7 @@ fun RealWorld4_FancyWidget_002(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_003(
@@ -269,7 +269,7 @@ fun RealWorld4_FancyWidget_003(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_004(
@@ -372,7 +372,7 @@ fun RealWorld4_FancyWidget_004(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_005(
@@ -460,7 +460,7 @@ fun RealWorld4_FancyWidget_005(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_133(
@@ -571,7 +571,7 @@ fun RealWorld4_FancyWidget_006(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_070(
@@ -637,7 +637,7 @@ fun RealWorld4_FancyWidget_007(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_071(
@@ -716,7 +716,7 @@ fun RealWorld4_FancyWidget_008(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_012(
@@ -763,7 +763,7 @@ fun RealWorld4_FancyWidget_009(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_123(
@@ -818,7 +818,7 @@ fun RealWorld4_FancyWidget_010(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -856,7 +856,7 @@ fun RealWorld4_FancyWidget_011(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -893,7 +893,7 @@ fun RealWorld4_FancyWidget_012(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_091(
@@ -956,7 +956,7 @@ fun RealWorld4_FancyWidget_013(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -995,7 +995,7 @@ fun RealWorld4_FancyWidget_014(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1040,7 +1040,7 @@ fun RealWorld4_FancyWidget_015(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_119(
@@ -1099,7 +1099,7 @@ fun RealWorld4_FancyWidget_016(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_057(
@@ -1169,7 +1169,7 @@ fun RealWorld4_FancyWidget_017(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1223,7 +1223,7 @@ fun RealWorld4_FancyWidget_018(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_147(
@@ -1280,7 +1280,7 @@ fun RealWorld4_FancyWidget_019(
     }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1331,7 +1331,7 @@ fun RealWorld4_FancyWidget_020(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1364,7 +1364,7 @@ fun RealWorld4_FancyWidget_021(
     }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1416,7 +1416,7 @@ fun RealWorld4_FancyWidget_022(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_015(
@@ -1499,7 +1499,7 @@ fun RealWorld4_FancyWidget_023(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp5 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2 + tmp3 + tmp4
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp5.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp5.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_094(
@@ -1552,7 +1552,7 @@ fun RealWorld4_FancyWidget_024(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_048(
@@ -1599,7 +1599,7 @@ fun RealWorld4_FancyWidget_025(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_138(
@@ -1660,7 +1660,7 @@ fun RealWorld4_FancyWidget_026(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1699,7 +1699,7 @@ fun RealWorld4_FancyWidget_027(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1749,7 +1749,7 @@ fun RealWorld4_FancyWidget_028(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1792,7 +1792,7 @@ fun RealWorld4_FancyWidget_029(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_016(
@@ -1839,7 +1839,7 @@ fun RealWorld4_FancyWidget_030(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_121(
@@ -1887,7 +1887,7 @@ fun RealWorld4_FancyWidget_031(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1928,7 +1928,7 @@ fun RealWorld4_FancyWidget_032(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp5 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2 + tmp3 + tmp4
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp5.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp5.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -1967,7 +1967,7 @@ fun RealWorld4_FancyWidget_033(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     RealWorld4_FancyWidget_063(
@@ -2022,7 +2022,7 @@ fun RealWorld4_FancyWidget_034(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -2067,7 +2067,7 @@ fun RealWorld4_FancyWidget_035(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
                 Column {
                     Box(Modifier.fillMaxWidth().weight(1f), backgroundColor = model.toColor())
@@ -2106,7 +2106,7 @@ fun RealWorld4_FancyWidget_036(
             }.map { it.toString().reversed() }.joinToString(""-""))
     val tmp3 = ""lkjzndgke84ts"" + tmp0 + tmp1 + tmp2
     WithConstraints(modifier) {
-        Box(Modifier.padding(1.dp) + DrawBackground(color = tmp3.toColor())) {
+        Box(Modifier.padding(1.dp).drawBackground(color = tmp3.toColor())) {
             if (constraints.maxHeight > constraints.maxWidth) {
    ",Updated DrawBackground to leverage .,Replace DrawBackground with drawBackground in RealWorld4_Widgets.kt.,"""Update Compose runtime benchmark to use `drawBackground` instead of `DrawBackground`""

This commit message accurately reflects the change made in the code, which is replacing `DrawBackground` with `drawBackground` in the Compose runtime benchmark.","""Update RealWorld4_Widgets.kt: Replace DrawBackground with drawBackground""

Explanation: The diff shows that in the file `RealWorld4_Widgets.kt`, there are multiple instances of `DrawBackground` being replaced with `drawBackground`. The changes are made in various functions, such as `RealWorld4_FancyWidget_000`, `RealWorld4_FancyWidget_001`, and so on. The modification is consistent across all the occurrences - the function `DrawBackground` is removed, and the method `drawBackground` is used instead.","""Refactor DrawBackground to drawBackground in RealWorld4_Widgets.kt for improved Compose API consistency and readability."""
"diff --git a/keyvalue/server/src/main/java/alluxio/master/keyvalue/DefaultKeyValueMaster.java b/keyvalue/server/src/main/java/alluxio/master/keyvalue/DefaultKeyValueMaster.java
index 983882061b..37b7d1e461 100644
--- a/keyvalue/server/src/main/java/alluxio/master/keyvalue/DefaultKeyValueMaster.java
+++ b/keyvalue/server/src/main/java/alluxio/master/keyvalue/DefaultKeyValueMaster.java
@@ -27,6 +27,7 @@ import alluxio.master.file.options.CreateDirectoryOptions;
 import alluxio.master.file.options.DeleteOptions;
 import alluxio.master.file.options.RenameOptions;
 import alluxio.master.journal.Journal;
+import alluxio.proto.journal.Journal.JournalEntry;
 import alluxio.proto.journal.KeyValue;
 import alluxio.thrift.KeyValueMasterClientService;
 import alluxio.thrift.PartitionInfo;
@@ -38,6 +39,7 @@ import com.google.common.base.Preconditions;
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
+import net.jcip.annotations.ThreadSafe;
 import org.apache.thrift.TProcessor;
 
 import java.io.IOException;
@@ -50,6 +52,11 @@ import java.util.NoSuchElementException;
 import java.util.Set;
 import java.util.UUID;
 
+/**
+ * This master stores key-value store information in Alluxio, including the partitions of
+ * each key-value store.
+ */
+@ThreadSafe
 public class DefaultKeyValueMaster extends AbstractMaster implements KeyValueMaster {
   private static final Set<Class<? extends Server>> DEPS =
       ImmutableSet.<Class<? extends Server>>of(FileSystemMaster.class);
@@ -119,7 +126,7 @@ public class DefaultKeyValueMaster extends AbstractMaster implements KeyValueMas
   }
 
   @Override
-  public synchronized Iterator<alluxio.proto.journal.Journal.JournalEntry> getJournalEntryIterator() {
+  public synchronized Iterator<JournalEntry> getJournalEntryIterator() {
     return Iterators.concat(getStoreIterator(mCompleteStoreToPartitions),
         getStoreIterator(mIncompleteStoreToPartitions));
   }
diff --git a/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMaster.java b/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMaster.java
index c5eb75b65b..33eaed2e4a 100644
--- a/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMaster.java
+++ b/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMaster.java
@@ -22,6 +22,10 @@ import alluxio.thrift.PartitionInfo;
 import java.io.IOException;
 import java.util.List;
 
+/**
+ * Interface of key-value master that stores key-value store information in Alluxio, including the partitions of
+ * each key-value store.
+ */
 public interface KeyValueMaster {
 
   /**
diff --git a/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMasterFactory.java b/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMasterFactory.java
index 7128705e80..64e4c85214 100644
--- a/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMasterFactory.java
+++ b/keyvalue/server/src/main/java/alluxio/master/keyvalue/KeyValueMasterFactory.java
@@ -54,7 +54,8 @@ public final class KeyValueMasterFactory implements MasterFactory {
     LOG.info(""Creating {} "", KeyValueMaster.class.getName());
     Journal journal = journalFactory.create(getName());
     FileSystemMaster fileSystemMaster = registry.get(FileSystemMaster.class);
-    DefaultKeyValueMaster defaultKeyValueMaster = new DefaultKeyValueMaster(fileSystemMaster, journal);
+    DefaultKeyValueMaster defaultKeyValueMaster =
+        new DefaultKeyValueMaster(fileSystemMaster, journal);
     registry.add(DefaultKeyValueMaster.class, defaultKeyValueMaster);
     return defaultKeyValueMaster;
   }",Added some minor changes to pass the code style check,"""Refactor DefaultKeyValueMaster to implement ThreadSafe and add documentation comments""

This commit message is short and to the point, it describes the main changes made in the commit. The changes include adding the `@ThreadSafe` annotation to the `DefaultKeyValueMaster` class and adding documentation comments to explain the purpose of the class and interface.","""Update DefaultKeyValueMaster to implement ThreadSafe annotation and improve code quality""

However, a more concise and conventional commit message would be:

""Implement ThreadSafe annotation in DefaultKeyValueMaster""

This commit message is short, clear, and directly states the main change made in the commit.","The commit message could be: ""Update DefaultKeyValueMaster and KeyValueMaster interfaces with thread safety and documentation. Also, import the necessary classes and adjust the import statements in KeyValueMasterFactory.""

Explanation:

* In DefaultKeyValueMaster.java, the class-level JavaDoc comment and @ThreadSafe annotation have been added. Additionally, an import statement for net.jcip.annotations.ThreadSafe has been added, and the return type of the method getJournalEntryIterator() has been changed from alluxio.proto.journal.Journal.JournalEntry to JournalEntry.
* In KeyValueMaster.java, a class-level JavaDoc comment has been added.
* In KeyValueMasterFactory.java, an import statement for DefaultKeyValueMaster has been added, and the code that creates an instance of DefaultKeyValueMaster has been adjusted to use the fully qualified class name.",Added documentation and thread-safety annotations to KeyValueMaster and DefaultKeyValueMaster classes.
"diff --git a/build.xml b/build.xml
index 435d4a0824..20c26a8136 100644
--- a/build.xml
+++ b/build.xml
@@ -25,7 +25,7 @@
     <property name=""debuglevel"" value=""source,lines,vars""/>
 
     <!-- default version and SCM information -->
-    <property name=""base.version"" value=""2.1.8""/>
+    <property name=""base.version"" value=""2.1.9""/>
     <property name=""scm.connection"" value=""scm:git://git.apache.org/cassandra.git""/>
     <property name=""scm.developerConnection"" value=""scm:git://git.apache.org/cassandra.git""/>
     <property name=""scm.url"" value=""http://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=tree""/>
diff --git a/debian/changelog b/debian/changelog
index a540f387d3..09629a60a5 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,3 +1,9 @@
+cassandra (2.1.9) unstable; urgency=medium
+
+  * New release
+
+ -- Jake Luciani <jake@apache.org>  Tue, 25 Aug 2015 09:32:27 -0400
+
 cassandra (2.1.8) unstable; urgency=medium
 
   * New release ",bump versions,"""Bump version to 2.1.9""",Bump base version to 2.1.9 and update Debian changelog.,"It seems like you're working with version control and build files, specifically for Apache Cassandra. The changes you've made are updating the version number from 2.1.8 to 2.1.9 in the build.xml file and adding a new entry for the same version in the debian/changelog file.

As for the commit message, it should ideally describe what changes have been made in this commit. Given the context, a suitable commit message could be:

""Bumping Cassandra version to 2.1.9 and updating changelog""",Updating version number from 2.1.8 to 2.1.9 in build.xml and debian/changelog files for new release.
"diff --git a/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/AbstractJDBCQueryResult.java b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/AbstractJDBCQueryResult.java
new file mode 100644
index 00000000000..385b102a668
--- /dev/null
+++ b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/AbstractJDBCQueryResult.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc;
+
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.infra.executor.sql.QueryResult;
+
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+
+/**
+ * Abstract JDBC query result.
+ */
+@RequiredArgsConstructor
+public abstract class AbstractJDBCQueryResult implements QueryResult {
+    
+    private final ResultSetMetaData resultSetMetaData;
+    
+    @Override
+    public final int getColumnCount() throws SQLException {
+        return resultSetMetaData.getColumnCount();
+    }
+    
+    @Override
+    public final String getColumnName(final int columnIndex) throws SQLException {
+        return resultSetMetaData.getColumnName(columnIndex);
+    }
+    
+    @Override
+    public final String getColumnLabel(final int columnIndex) throws SQLException {
+        return resultSetMetaData.getColumnLabel(columnIndex);
+    }
+    
+    @Override
+    public final String getColumnTypeName(final int columnIndex) throws SQLException {
+        return resultSetMetaData.getColumnTypeName(columnIndex);
+    }
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/MemoryQueryResult.java b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/MemoryQueryResult.java
similarity index 86%
rename from shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/MemoryQueryResult.java
rename to shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/MemoryQueryResult.java
index 2180fb13d1c..d0669bd716e 100644
--- a/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/MemoryQueryResult.java
+++ b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/MemoryQueryResult.java
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult;
+package org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc;
 
 import lombok.SneakyThrows;
-import org.apache.shardingsphere.infra.executor.sql.QueryResult;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -40,16 +39,14 @@ import java.util.List;
 /**
  * Query result for memory loading.
  */
-public final class MemoryQueryResult implements QueryResult {
-    
-    private final ResultSetMetaData resultSetMetaData;
+public final class MemoryQueryResult extends AbstractJDBCQueryResult {
     
     private final Iterator<List<Object>> rows;
     
     private List<Object> currentRow;
     
     public MemoryQueryResult(final ResultSet resultSet) throws SQLException {
-        resultSetMetaData = resultSet.getMetaData();
+        super(resultSet.getMetaData());
         rows = getRows(resultSet);
     }
     
@@ -154,24 +151,4 @@ public final class MemoryQueryResult implements QueryResult {
     public boolean wasNull() {
         return null == currentRow;
     }
-    
-    @Override
-    public int getColumnCount() throws SQLException {
-        return resultSetMetaData.getColumnCount();
-    }
-    
-    @Override
-    public String getColumnName(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnName(columnIndex);
-    }
-    
-    @Override
-    public String getColumnLabel(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnLabel(columnIndex);
-    }
-    
-    @Override
-    public String getColumnTypeName(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnTypeName(columnIndex);
-    }
 }
diff --git a/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/StreamQueryResult.java b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/StreamQueryResult.java
similarity index 82%
rename from shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/StreamQueryResult.java
rename to shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/StreamQueryResult.java
index d30e20e5b78..86b8c8e4bf6 100644
--- a/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/StreamQueryResult.java
+++ b/shardingsphere-infra/shardingsphere-infra-executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/resourced/jdbc/queryresult/jdbc/StreamQueryResult.java
@@ -15,9 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult;
-
-import org.apache.shardingsphere.infra.executor.sql.QueryResult;
+package org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc;
 
 import java.io.InputStream;
 import java.math.BigDecimal;
@@ -26,7 +24,6 @@ import java.sql.Blob;
 import java.sql.Clob;
 import java.sql.Date;
 import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.sql.Time;
 import java.sql.Timestamp;
@@ -35,14 +32,12 @@ import java.util.Calendar;
 /**
  * Query result for stream loading.
  */
-public final class StreamQueryResult implements QueryResult {
-    
-    private final ResultSetMetaData resultSetMetaData;
+public final class StreamQueryResult extends AbstractJDBCQueryResult {
     
     private final ResultSet resultSet;
     
     public StreamQueryResult(final ResultSet resultSet) throws SQLException {
-        resultSetMetaData = resultSet.getMetaData();
+        super(resultSet.getMetaData());
         this.resultSet = resultSet;
     }
     
@@ -123,24 +118,4 @@ public final class StreamQueryResult implements QueryResult {
     public boolean wasNull() throws SQLException {
         return resultSet.wasNull();
     }
-    
-    @Override
-    public int getColumnCount() throws SQLException {
-        return resultSetMetaData.getColumnCount();
-    }
-    
-    @Override
-    public String getColumnName(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnName(columnIndex);
-    }
-    
-    @Override
-    public String getColumnLabel(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnLabel(columnIndex);
-    }
-    
-    @Override
-    public String getColumnTypeName(final int columnIndex) throws SQLException {
-        return resultSetMetaData.getColumnTypeName(columnIndex);
-    }
 }
diff --git a/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/MemoryQueryResultTest.java b/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/MemoryQueryResultTest.java
index 8cfe7d16a5e..0037bac9f27 100644
--- a/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/MemoryQueryResultTest.java
+++ b/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/MemoryQueryResultTest.java
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.infra.executor.sql.jdbc.queryresult;
 
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.MemoryQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.MemoryQueryResult;
 import org.hamcrest.core.Is;
 import org.junit.Test;
 
diff --git a/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/StreamQueryResultTest.java b/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/StreamQueryResultTest.java
index 97925e60fd2..104dd685d81 100644
--- a/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/StreamQueryResultTest.java
+++ b/shardingsphere-infra/shardingsphere-infra-executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/jdbc/queryresult/StreamQueryResultTest.java
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.infra.executor.sql.jdbc.queryresult;
 
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.junit.Test;
 
 import java.math.BigDecimal;
diff --git a/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/decorator/ResultDecoratorFixture.java b/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/decorator/ResultDecoratorFixture.java
index 0a2540e158a..3336f0458f6 100644
--- a/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/decorator/ResultDecoratorFixture.java
+++ b/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/decorator/ResultDecoratorFixture.java
@@ -19,7 +19,7 @@ package org.apache.shardingsphere.infra.merge.fixture.decorator;
 
 import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
 import org.apache.shardingsphere.infra.executor.sql.QueryResult;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.merge.engine.decorator.ResultDecorator;
 import org.apache.shardingsphere.infra.merge.fixture.rule.DecoratorRuleFixture;
 import org.apache.shardingsphere.infra.merge.result.MergedResult;
diff --git a/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/merger/ResultMergerFixture.java b/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/merger/ResultMergerFixture.java
index 046b313da3e..c4631e29aa3 100644
--- a/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/merger/ResultMergerFixture.java
+++ b/shardingsphere-infra/shardingsphere-infra-merge/src/test/java/org/apache/shardingsphere/infra/merge/fixture/merger/ResultMergerFixture.java
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.infra.merge.fixture.merger;
 
 import org.apache.shardingsphere.infra.executor.sql.QueryResult;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.merge.engine.merger.ResultMerger;
 import org.apache.shardingsphere.infra.merge.result.MergedResult;
 import org.apache.shardingsphere.infra.merge.result.impl.transparent.TransparentMergedResult;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/PreparedStatementExecutor.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/PreparedStatementExecutor.java
index 57fab5de08f..8b5197f1092 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/PreparedStatementExecutor.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/PreparedStatementExecutor.java
@@ -27,8 +27,8 @@ import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.Exec
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutor;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutorCallback;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.impl.DefaultSQLExecutorCallback;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.MemoryQueryResult;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.MemoryQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.route.context.RouteUnit;
 import org.apache.shardingsphere.infra.rule.type.DataNodeContainedRule;
 import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/StatementExecutor.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/StatementExecutor.java
index c3ee7461103..3777a2e1324 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/StatementExecutor.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/executor/StatementExecutor.java
@@ -27,8 +27,8 @@ import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.Exec
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutor;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutorCallback;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.impl.DefaultSQLExecutorCallback;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.MemoryQueryResult;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.MemoryQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.route.context.RouteUnit;
 import org.apache.shardingsphere.infra.rule.type.DataNodeContainedRule;
 import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java
index 2d8ff5a6d33..f9345e6c2cc 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSpherePreparedStatement.java
@@ -52,7 +52,7 @@ import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.StatementExec
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutor;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.group.PreparedStatementExecuteGroupEngine;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.group.StatementOption;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.merge.MergeEngine;
 import org.apache.shardingsphere.infra.merge.result.MergedResult;
 import org.apache.shardingsphere.infra.metadata.schema.ShardingSphereSchema;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java
index df3b37c8e77..4dd560469e2 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-core/src/main/java/org/apache/shardingsphere/driver/jdbc/core/statement/ShardingSphereStatement.java
@@ -50,7 +50,7 @@ import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.StatementExec
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.SQLExecutor;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.group.StatementExecuteGroupEngine;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.group.StatementOption;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.infra.merge.MergeEngine;
 import org.apache.shardingsphere.infra.merge.result.MergedResult;
 import org.apache.shardingsphere.infra.metadata.schema.ShardingSphereSchema;
diff --git a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/execute/engine/jdbc/ProxySQLExecutorCallback.java b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/execute/engine/jdbc/ProxySQLExecutorCallback.java
index e0f80193b07..54a7bf43f66 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/execute/engine/jdbc/ProxySQLExecutorCallback.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/communication/jdbc/execute/engine/jdbc/ProxySQLExecutorCallback.java
@@ -25,8 +25,8 @@ import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.Exe
 import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.query.QueryHeader;
 import org.apache.shardingsphere.infra.executor.sql.raw.execute.result.update.ExecuteUpdateResult;
 import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.impl.DefaultSQLExecutorCallback;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.MemoryQueryResult;
-import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.StreamQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.MemoryQueryResult;
+import org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc.StreamQueryResult;
 import org.apache.shardingsphere.proxy.backend.communication.jdbc.connection.BackendConnection;
 import org.apache.shardingsphere.proxy.backend.communication.jdbc.statement.accessor.JDBCAccessor;
 import org.apache.shardingsphere.proxy.backend.context.ProxyContext;",Add AbstractJDBCQueryResult,Extract AbstractJDBCQueryResult and refactor MemoryQueryResult and StreamQueryResult to extend it,"Extracted AbstractJDBCQueryResult class and moved MemoryQueryResult and StreamQueryResult to inherit from it.

Or 

Extracted AbstractJDBCQueryResult class and refactored MemoryQueryResult and StreamQueryResult to extend it.","""Refactor AbstractJDBCQueryResult and move MemoryQueryResult and StreamQueryResult to jdbc package""

This commit introduces a new abstract class `AbstractJDBCQueryResult` to provide common methods for JDBC query results. `MemoryQueryResult` and `StreamQueryResult` are refactored to extend this abstract class and are moved to the `org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.queryresult.jdbc` package. The changes also include updating the imports and class names in the test files and other dependent classes.",Refactor JDBC query results to use an abstract base class and streamline package structure and imports.
"diff --git a/docs/sql/ddl.txt b/docs/sql/ddl.txt
index 5b57a99913..77a80cce26 100644
--- a/docs/sql/ddl.txt
+++ b/docs/sql/ddl.txt
@@ -44,78 +44,6 @@ data is inserted, otherwise an error is returned.
 
   Multiple primary keys are not supported yet.
 
-
-Indexes and Fulltext Search
-===========================
-
-Indexes for fulltextsearch are created using an analyzer that consists of
-one tokenizer and zero or more token filters and char filters.
-Existing Analyzers can be used to create custom Analyzers by means of extending them.
-
-
-Create Analyzer Syntax::
-
-    CREATE ANALYZER <analyzer_name> [EXTENDS <analyzer_name>] (
-        [TOKENIZER [WITH] (
-            <tokenizer_property>=<value>,
-            ...
-        )]
-        [TOKEN_FILTERS [WITH] (
-            <builtin_token_filter_name> [WITH] (
-                <token_filter_property>=<value>,
-                ...
-            ),
-            ...
-        )]
-        [CHAR_FILTERS [WITH] (
-            <builtin_char_filter_name> [WITH] (
-                <char_filter_property>=<value>,
-                ...
-            ),
-            ...
-        )]
-    )
-
-Built-in and self-made Analyzers can be used to create iundices by referencing them by name.
-
-Create a Fulltext Index::
-
-    CREATE INDEX <index_name> ON <table_name> USING <method>(<column_name>, ...)
-    [
-        WITH (
-            <index_property>=<value>
-        )
-    ]
-
-Where possible ``index_property`` values are::
-
-    analyzer=<analyzer_name>
-
-And possible ``methods`` are::
-
-    fulltext
-
-This is the only index-method currently supported. It uses the given analyzer to create a fulltext-searchable
-representation of the fields it is defined for.
-
-Defining Indexes on Columns within ``CREATE TABLE``-Statements.
-This way only a single column can be indexed, no combination of columns as with the ``CREATE INDEX`` statement::
-
-    CREATE TABLE t1 (
-        field string INDEX [ USING <method> [WITH] (<index_property>=<value>) | OFF ]
-    )
-
-Indexes over multiple columns can be defined using a Table-Constraint inside the ``CREATE TABLE`` statement::
-
-    CREATE TABLE t2 (
-        title string,
-        content string INDEX OFF,
-        INDEX ft USING fulltext(title, content) WITH (analyzer='vorarlbergerisch')
-    )
-
-
-
-
 Data Types
 ==========
 
diff --git a/sql/src/main/java/org/cratedb/sql/parser/parser/IndexProperties.java b/sql/src/main/java/org/cratedb/sql/parser/parser/IndexProperties.java
index 03f250da76..0af0731e8a 100644
--- a/sql/src/main/java/org/cratedb/sql/parser/parser/IndexProperties.java
+++ b/sql/src/main/java/org/cratedb/sql/parser/parser/IndexProperties.java
@@ -5,7 +5,7 @@ import org.cratedb.sql.parser.StandardException;
 import java.util.HashMap;
 import java.util.Map;
 
-public class IndexProperties extends QueryTreeNode{
+public class IndexProperties extends QueryTreeNode {
     public static final String ANALYZER_PROPERTY = ""analyzer"";
 
     private final Map<String, ValueNode> keyValues = new HashMap<>();
diff --git a/sql/src/main/java/org/cratedb/sql/parser/parser/OrderedColumnList.java b/sql/src/main/java/org/cratedb/sql/parser/parser/OrderedColumnList.java
index ac0b8cdb81..17ced98890 100644
--- a/sql/src/main/java/org/cratedb/sql/parser/parser/OrderedColumnList.java
+++ b/sql/src/main/java/org/cratedb/sql/parser/parser/OrderedColumnList.java
@@ -43,8 +43,7 @@ package org.cratedb.sql.parser.parser;
  * List of OrderedColumns
  *
  */
-public abstract class
-        OrderedColumnList<N extends OrderedColumn>
+public abstract class OrderedColumnList<N extends OrderedColumn> 
     extends QueryTreeNodeList<N>
 {
 }
diff --git a/sql/src/main/javacc/org/cratedb/sql/parser/parser/SQLGrammar.jj b/sql/src/main/javacc/org/cratedb/sql/parser/parser/SQLGrammar.jj
index 88c389bf7d..e2e115266f 100644
--- a/sql/src/main/javacc/org/cratedb/sql/parser/parser/SQLGrammar.jj
+++ b/sql/src/main/javacc/org/cratedb/sql/parser/parser/SQLGrammar.jj
@@ -3171,8 +3171,6 @@ createStatements() throws StandardException :
     statementNode = udtDefinition(createOrReplace)
 |
     statementNode = indexDefinition()
-|
-    statementNode = analyzerDefinition()
 )
     {
         return statementNode;
@@ -10616,7 +10614,8 @@ indexDefinition() throws StandardException :
     indexName = qualifiedName() 
     <ON> tableName = qualifiedName()
     <USING>
-    indexMethod = indexMethod() <LEFT_PAREN>
+    indexMethod = indexMethod()
+    <LEFT_PAREN>
        indexItemList(indexColumnList = (IndexColumnList)nodeFactory.getNode(NodeTypes.INDEX_COLUMN_LIST, parserContext))
     <RIGHT_PAREN>
     [
@@ -10715,17 +10714,6 @@ indexProperty(IndexProperties indexProperties) throws StandardException :
     }
 }
 
-StatementNode
-analyzerDefinition() throws StandardException :
-{}
-{
-    <ANALYZER>
-    {
-        return null;
-    }
-
-}
-
 /**
     CREATE PROCEDURE
 
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.expected b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.expected
new file mode 100644
index 0000000000..887ba0c3d1
--- /dev/null
+++ b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.expected
@@ -0,0 +1,25 @@
+org.cratedb.sql.parser.parser.CreateIndexNode@51827002
+name: i1
+statementType: CREATE INDEX
+unique: false
+indexName: i1
+tableName: t1
+indexMethod: fulltext
+indexColumns: 
+indexProperties: {analyzer=value: german
+type: CHAR(6) NOT NULL
+}
+existenceCheck: NO_CONDITION
+	
+	org.cratedb.sql.parser.parser.IndexColumnList@4a87bd1c
+
+	[0]:	
+	org.cratedb.sql.parser.parser.IndexColumn@15909f7e
+	columnName: c1
+	tableName: null
+	ascending
+	[1]:	
+	org.cratedb.sql.parser.parser.IndexColumn@49d71441
+	columnName: c2
+	tableName: null
+	ascending
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.sql b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.sql
new file mode 100644
index 0000000000..c2950c6594
--- /dev/null
+++ b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-5.sql
@@ -0,0 +1 @@
+CREATE INDEX i1 ON t1 USING fulltext(""c1"", c2) with (analyzer='german')
\ No newline at end of file
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.expected b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.expected
index 887ba0c3d1..5c3503a59b 100644
--- a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.expected
+++ b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.expected
@@ -1,25 +1,20 @@
-org.cratedb.sql.parser.parser.CreateIndexNode@51827002
-name: i1
+org.cratedb.sql.parser.parser.CreateIndexNode@301e2f11
+name: myindex
 statementType: CREATE INDEX
 unique: false
-indexName: i1
-tableName: t1
+indexName: myindex
+tableName: mytable
 indexMethod: fulltext
 indexColumns: 
-indexProperties: {analyzer=value: german
-type: CHAR(6) NOT NULL
+indexProperties: {analyzer=value: myanalyzer
+type: CHAR(10) NOT NULL
 }
 existenceCheck: NO_CONDITION
 	
-	org.cratedb.sql.parser.parser.IndexColumnList@4a87bd1c
+	org.cratedb.sql.parser.parser.IndexColumnList@da41dc5
 
 	[0]:	
-	org.cratedb.sql.parser.parser.IndexColumn@15909f7e
-	columnName: c1
-	tableName: null
-	ascending
-	[1]:	
-	org.cratedb.sql.parser.parser.IndexColumn@49d71441
-	columnName: c2
-	tableName: null
+	org.cratedb.sql.parser.parser.IndexColumn@119e7782
+	columnName: mycolumn
+	tableName: mytable
 	ascending
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.sql b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.sql
index c2950c6594..aa96dd936d 100644
--- a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.sql
+++ b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-6.sql
@@ -1 +1 @@
-CREATE INDEX i1 ON t1 USING fulltext(""c1"", c2) with (analyzer='german')
\ No newline at end of file
+create index myIndex on myTable using fulltext(myTable.myColumn) with (analyzer='myanalyzer')
\ No newline at end of file
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.expected b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.expected
deleted file mode 100644
index 5c3503a59b..0000000000
--- a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.expected
+++ /dev/null
@@ -1,20 +0,0 @@
-org.cratedb.sql.parser.parser.CreateIndexNode@301e2f11
-name: myindex
-statementType: CREATE INDEX
-unique: false
-indexName: myindex
-tableName: mytable
-indexMethod: fulltext
-indexColumns: 
-indexProperties: {analyzer=value: myanalyzer
-type: CHAR(10) NOT NULL
-}
-existenceCheck: NO_CONDITION
-	
-	org.cratedb.sql.parser.parser.IndexColumnList@da41dc5
-
-	[0]:	
-	org.cratedb.sql.parser.parser.IndexColumn@119e7782
-	columnName: mycolumn
-	tableName: mytable
-	ascending
diff --git a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.sql b/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.sql
deleted file mode 100644
index aa96dd936d..0000000000
--- a/sql/src/test/resources/org/cratedb/sql/parser/parser/create-index-7.sql
+++ /dev/null
@@ -1 +0,0 @@
-create index myIndex on myTable using fulltext(myTable.myColumn) with (analyzer='myanalyzer')
\ No newline at end of file",create index statement fixup,"""Remove analyzer definition and related documentation, and update index creation syntax""","""Added support for creating fulltext indexes with custom analyzers and updated test cases accordingly.""","This commit removes the section about creating analyzers and indexes for fulltext search from the documentation. It also removes the corresponding code from the Java files. The commit message could be something like:

""Remove fulltext search analyzer and index creation from documentation and code""

It looks like this functionality may have been removed or changed significantly, so it makes sense to remove it from the documentation and the code. If fulltext search is still supported, the documentation and code should be updated to reflect the current implementation.","""Removed analyzer-related syntax and documentation for creating indexes and ran relevant tests to ensure compatibility."""
"diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/DaemonRunner.java b/titan-test/src/main/java/com/thinkaurelius/titan/DaemonRunner.java
index d49aeb0e5..334ce011f 100644
--- a/titan-test/src/main/java/com/thinkaurelius/titan/DaemonRunner.java
+++ b/titan-test/src/main/java/com/thinkaurelius/titan/DaemonRunner.java
@@ -94,6 +94,7 @@ public abstract class DaemonRunner<S> {
         }
 
         if (null != killerHook) {
+            Runtime.getRuntime().removeShutdownHook(killerHook);
             killerHook = null;
             log.debug(""Unregistered killer hook: {}"", killerHook);
         }",Remove daemon - killing shutdown hooks in testing .,"""Remove shutdown hook before unsetting killer hook in DaemonRunner""","""Remove shutdown hook registration on daemon shutdown""

However, a more conventional commit message would be:

""Unregister shutdown hook on daemon shutdown""

This is because the commit message should be a brief summary of the changes made, and ""Unregister shutdown hook"" clearly conveys the action taken.","""Added a line to unregister the killer hook in DaemonRunner.java""",Unregister killer hook by removing shutdown hook before setting it to null in the DaemonRunner class.
"diff --git a/invoice/src/main/java/org/killbill/billing/invoice/dao/InvoiceItemModelDao.java b/invoice/src/main/java/org/killbill/billing/invoice/dao/InvoiceItemModelDao.java
index e814a69d04..1f8e56a3df 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/dao/InvoiceItemModelDao.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/dao/InvoiceItemModelDao.java
@@ -47,13 +47,15 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
     private BigDecimal rate;
     private Currency currency;
     private UUID linkedItemId;
+    private Integer quantity;
+    private String itemDetails;
 
     public InvoiceItemModelDao() { /* For the DAO mapper */ }
 
     public InvoiceItemModelDao(final UUID id, final DateTime createdDate, final InvoiceItemType type, final UUID invoiceId, final UUID accountId,
                                final UUID childAccountId, final UUID bundleId, final UUID subscriptionId, final String description, final String planName,
                                final String phaseName, final String usageName, final LocalDate startDate, final LocalDate endDate, final BigDecimal amount,
-                               final BigDecimal rate, final Currency currency, final UUID linkedItemId) {
+                               final BigDecimal rate, final Currency currency, final UUID linkedItemId, final Integer quantity, final String itemDetails) {
         super(id, createdDate, createdDate);
         this.type = type;
         this.invoiceId = invoiceId;
@@ -71,6 +73,24 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         this.rate = rate;
         this.currency = currency;
         this.linkedItemId = linkedItemId;
+        this.quantity = quantity;
+        this.itemDetails = itemDetails;
+    }
+    public InvoiceItemModelDao(final UUID id, final DateTime createdDate, final InvoiceItemType type, final UUID invoiceId, final UUID accountId,
+                               final UUID childAccountId, final UUID bundleId, final UUID subscriptionId, final String description, final String planName,
+                               final String phaseName, final String usageName, final LocalDate startDate, final LocalDate endDate, final BigDecimal amount,
+                               final BigDecimal rate, final Currency currency, final UUID linkedItemId) {
+        this(id, createdDate, type, invoiceId, accountId, childAccountId, bundleId, subscriptionId, description, planName, phaseName, usageName,
+             startDate, endDate, amount, rate, currency, linkedItemId, null, null);
+
+    }
+
+    public InvoiceItemModelDao(final DateTime createdDate, final InvoiceItemType type, final UUID invoiceId, final UUID accountId,
+                               final UUID bundleId, final UUID subscriptionId, final String description, final String planName,
+                               final String phaseName, final String usageName, final LocalDate startDate, final LocalDate endDate, final BigDecimal amount,
+                               final BigDecimal rate, final Currency currency, final UUID linkedItemId, final Integer quantity, final String itemDetails) {
+        this(UUIDs.randomUUID(), createdDate, type, invoiceId, accountId, null, bundleId, subscriptionId, description, planName, phaseName, usageName,
+             startDate, endDate, amount, rate, currency, linkedItemId, quantity, itemDetails);
     }
 
     public InvoiceItemModelDao(final DateTime createdDate, final InvoiceItemType type, final UUID invoiceId, final UUID accountId,
@@ -78,13 +98,13 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
                                final String phaseName, final String usageName, final LocalDate startDate, final LocalDate endDate, final BigDecimal amount,
                                final BigDecimal rate, final Currency currency, final UUID linkedItemId) {
         this(UUIDs.randomUUID(), createdDate, type, invoiceId, accountId, null, bundleId, subscriptionId, description, planName, phaseName, usageName,
-             startDate, endDate, amount, rate, currency, linkedItemId);
+             startDate, endDate, amount, rate, currency, linkedItemId, null, null);
     }
 
     public InvoiceItemModelDao(final InvoiceItem invoiceItem) {
         this(invoiceItem.getId(), invoiceItem.getCreatedDate(), invoiceItem.getInvoiceItemType(), invoiceItem.getInvoiceId(), invoiceItem.getAccountId(), invoiceItem.getChildAccountId(), invoiceItem.getBundleId(),
              invoiceItem.getSubscriptionId(), invoiceItem.getDescription(), invoiceItem.getPlanName(), invoiceItem.getPhaseName(), invoiceItem.getUsageName(), invoiceItem.getStartDate(), invoiceItem.getEndDate(),
-             invoiceItem.getAmount(), invoiceItem.getRate(), invoiceItem.getCurrency(), invoiceItem.getLinkedItemId());
+             invoiceItem.getAmount(), invoiceItem.getRate(), invoiceItem.getCurrency(), invoiceItem.getLinkedItemId(), invoiceItem.getQuantity(), invoiceItem.getItemDetails());
     }
 
     /*
@@ -159,6 +179,10 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         return linkedItemId;
     }
 
+    public Integer getQuantity() { return quantity; }
+
+    public String getItemDetails() { return itemDetails; }
+
     public void setType(final InvoiceItemType type) {
         this.type = type;
     }
@@ -223,6 +247,10 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         this.linkedItemId = linkedItemId;
     }
 
+    public void setQuantity(final Integer quantity) { this.quantity = quantity; }
+
+    public void setItemDetails(final String itemDetails) { this.itemDetails = itemDetails; }
+
     @Override
     public String toString() {
         final StringBuilder sb = new StringBuilder(""InvoiceItemModelDao{"");
@@ -242,6 +270,8 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         sb.append("", rate="").append(rate);
         sb.append("", currency="").append(currency);
         sb.append("", linkedItemId="").append(linkedItemId);
+        sb.append("", quantity="").append(quantity);
+        sb.append("", itemDetails="").append(itemDetails);
         sb.append('}');
         return sb.toString();
     }
@@ -308,6 +338,12 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         if (type != that.type) {
             return false;
         }
+        if (quantity != null ? !quantity.equals(that.quantity) : that.quantity != null) {
+            return false;
+        }
+        if (itemDetails != null ? !itemDetails.equals(that.itemDetails) : that.itemDetails != null) {
+            return false;
+        }
 
         return true;
     }
@@ -331,6 +367,8 @@ public class InvoiceItemModelDao extends EntityModelDaoBase implements EntityMod
         result = 31 * result + (rate != null ? rate.hashCode() : 0);
         result = 31 * result + (currency != null ? currency.hashCode() : 0);
         result = 31 * result + (linkedItemId != null ? linkedItemId.hashCode() : 0);
+        result = 31 * result + (quantity != null ? quantity.hashCode() : 0);
+        result = 31 * result + (itemDetails != null ? itemDetails.hashCode() : 0);
         return result;
     }
 
diff --git a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemBase.java b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemBase.java
index 0e6ea008f8..329d2f101c 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemBase.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemBase.java
@@ -53,23 +53,40 @@ public abstract class InvoiceItemBase extends EntityBase implements InvoiceItem
     /* RepairAdjInvoiceItem */
     protected final UUID linkedItemId;
 
+    /* Usage details */
+    protected final Integer quantity;
+    protected final String itemDetails;
 
     public InvoiceItemBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
                            @Nullable final UUID subscriptionId, @Nullable final String description,
                            final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, final UUID reversedItemId) {
-        this(id, createdDate, invoiceId, accountId, null, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, reversedItemId);
+        this(id, createdDate, invoiceId, accountId, null, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, reversedItemId, null, null);
+    }
+
+    public InvoiceItemBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
+                           @Nullable final UUID subscriptionId, @Nullable final String description,
+                           final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, final UUID reversedItemId,
+                           @Nullable final Integer quantity, @Nullable final String itemDetails) {
+        this(id, createdDate, invoiceId, accountId, null, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, reversedItemId, quantity, itemDetails);
     }
 
     // For parent invoices
     public InvoiceItemBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, final UUID childAccountId,
                              final BigDecimal amount, final Currency currency, final String description) {
-        this(id, createdDate, invoiceId, accountId, childAccountId, null, null, description, null, null, amount, null, currency, null);
+        this(id, createdDate, invoiceId, accountId, childAccountId, null, null, description, null, null, amount, null, currency, null, null, null);
+    }
+
+    public InvoiceItemBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID childAccountId, @Nullable final UUID bundleId,
+                            @Nullable final UUID subscriptionId, @Nullable final String description,
+                            @Nullable final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency,
+                            final UUID reversedItemId){
+        this(id, createdDate, invoiceId, accountId, childAccountId, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, reversedItemId, null, null);
     }
 
     private InvoiceItemBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID childAccountId, @Nullable final UUID bundleId,
                             @Nullable final UUID subscriptionId, @Nullable final String description,
                             @Nullable final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency,
-                            final UUID reversedItemId) {
+                            final UUID reversedItemId,@Nullable final Integer quantity,@Nullable final String itemDetails) {
         super(id, createdDate, createdDate);
         this.invoiceId = invoiceId;
         this.accountId = accountId;
@@ -83,6 +100,8 @@ public abstract class InvoiceItemBase extends EntityBase implements InvoiceItem
         this.currency = currency;
         this.rate = rate;
         this.linkedItemId = reversedItemId;
+        this.quantity = quantity;
+        this.itemDetails = itemDetails;
     }
 
     @Override
@@ -172,6 +191,11 @@ public abstract class InvoiceItemBase extends EntityBase implements InvoiceItem
         return null;
     }
 
+    @Override
+    public Integer getQuantity() { return quantity; }
+
+    @Override
+    public String getItemDetails() { return itemDetails; }
 
     @Override
     public boolean equals(final Object o) {
diff --git a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemCatalogBase.java b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemCatalogBase.java
index 6ad9068de0..9ad25ce197 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemCatalogBase.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemCatalogBase.java
@@ -40,15 +40,30 @@ public abstract class InvoiceItemCatalogBase extends InvoiceItemBase implements
     public InvoiceItemCatalogBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
                                   @Nullable final UUID subscriptionId, @Nullable final String description, @Nullable final String planName, @Nullable final String phaseName, @Nullable final String usageName,
                                   final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, @Nullable final UUID linkedItemId) {
-        this(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, null, null, null, startDate, endDate, amount, rate, currency, linkedItemId);
+        this(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, null, null, null, startDate, endDate, amount, rate, currency, linkedItemId, null, null);
     }
 
+    public InvoiceItemCatalogBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
+                                  @Nullable final UUID subscriptionId, @Nullable final String description, @Nullable final String planName, @Nullable final String phaseName, @Nullable final String usageName,
+                                  final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, @Nullable final UUID linkedItemId,
+                                  @Nullable final Integer quantity, @Nullable final String itemDetails) {
+        this(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, null, null, null, startDate, endDate, amount, rate, currency, linkedItemId, quantity, itemDetails);
+    }
 
     public InvoiceItemCatalogBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
                                   @Nullable final UUID subscriptionId, @Nullable final String description, @Nullable final String planName, @Nullable final String phaseName, @Nullable final String usageName,
                                   @Nullable final String prettyPlanName, @Nullable final String prettyPhaseName, @Nullable final String prettyUsageName,
                                   final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, @Nullable final UUID linkedItemId) {
-        super(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, linkedItemId);
+        this(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, prettyPlanName, prettyPhaseName, prettyUsageName, startDate, endDate, amount, rate, currency, linkedItemId, null, null);
+    }
+
+
+    public InvoiceItemCatalogBase(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId,
+                                  @Nullable final UUID subscriptionId, @Nullable final String description, @Nullable final String planName, @Nullable final String phaseName, @Nullable final String usageName,
+                                  @Nullable final String prettyPlanName, @Nullable final String prettyPhaseName, @Nullable final String prettyUsageName,
+                                  final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final BigDecimal rate, final Currency currency, @Nullable final UUID linkedItemId,
+                                  @Nullable final Integer quantity, @Nullable final String itemDetails) {
+        super(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, startDate, endDate, amount, rate, currency, linkedItemId, quantity, itemDetails);
         this.planName = planName;
         this.phaseName = phaseName;
         this.usageName = usageName;
diff --git a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemFactory.java b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemFactory.java
index e8eef207b1..b93a20fde0 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemFactory.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/model/InvoiceItemFactory.java
@@ -69,6 +69,8 @@ public class InvoiceItemFactory {
         final BigDecimal rate = invoiceItemModelDao.getRate();
         final Currency currency = invoiceItemModelDao.getCurrency();
         final UUID linkedItemId = invoiceItemModelDao.getLinkedItemId();
+        final Integer quantity = invoiceItemModelDao.getQuantity();
+        final String itemDetails = invoiceItemModelDao.getItemDetails();
 
         final InvoiceItemType type = invoiceItemModelDao.getType();
 
@@ -101,7 +103,7 @@ public class InvoiceItemFactory {
                 item = new ItemAdjInvoiceItem(id, createdDate, invoiceId, accountId, startDate, description, amount, currency, linkedItemId);
                 break;
             case USAGE:
-                item = new UsageInvoiceItem(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, prettyPlanName, prettyPlanPhaseName, prettyUsageName, startDate, endDate, description, amount, currency);
+                item = new UsageInvoiceItem(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, prettyPlanName, prettyPlanPhaseName, prettyUsageName, startDate, endDate, description, amount, currency, quantity, itemDetails);
                 break;
             case TAX:
                 item = new TaxInvoiceItem(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, prettyPlanName, prettyPlanPhaseName, prettyUsageName, startDate, description, amount, currency, linkedItemId);
diff --git a/invoice/src/main/java/org/killbill/billing/invoice/model/UsageInvoiceItem.java b/invoice/src/main/java/org/killbill/billing/invoice/model/UsageInvoiceItem.java
index 3f66f696f8..0af4a8ec74 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/model/UsageInvoiceItem.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/model/UsageInvoiceItem.java
@@ -35,14 +35,21 @@ public class UsageInvoiceItem extends InvoiceItemCatalogBase {
     public UsageInvoiceItem(final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId, @Nullable final UUID subscriptionId,
                             final String planName, final String phaseName, final String usageName,
                             final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final Currency currency) {
-        this(UUIDs.randomUUID(), null, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, null, null, null, startDate, endDate, null, amount, currency);
+        this(UUIDs.randomUUID(), null, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, null, null, null, startDate, endDate, null, amount, currency, null, null);
+    }
+
+    public UsageInvoiceItem(final UUID invoiceId, final UUID accountId, @Nullable final UUID bundleId, @Nullable final UUID subscriptionId,
+                            final String planName, final String phaseName, final String usageName,
+                            final LocalDate startDate, final LocalDate endDate, final BigDecimal amount, final Currency currency, @Nullable final Integer quantity, @Nullable final String itemDetails) {
+        this(UUIDs.randomUUID(), null, invoiceId, accountId, bundleId, subscriptionId, planName, phaseName, usageName, null, null, null, startDate, endDate, null, amount, currency, quantity, itemDetails);
     }
 
     public UsageInvoiceItem(final UUID id, @Nullable final DateTime createdDate, final UUID invoiceId, final UUID accountId, final UUID bundleId,
                             final UUID subscriptionId, final String planName, final String phaseName, final String usageName,
                             final String prettyPlanName, final String prettyPhaseName, final String prettyUsageName,
-                            final LocalDate startDate, final LocalDate endDate, @Nullable final String description, final BigDecimal amount, final Currency currency) {
-        super(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, prettyPlanName, prettyPhaseName, prettyUsageName, startDate, endDate, amount, null, currency, null);
+                            final LocalDate startDate, final LocalDate endDate, @Nullable final String description, final BigDecimal amount, final Currency currency,
+                            @Nullable final Integer quantity, @Nullable final String itemDetails) {
+        super(id, createdDate, invoiceId, accountId, bundleId, subscriptionId, description, planName, phaseName, usageName, prettyPlanName, prettyPhaseName, prettyUsageName, startDate, endDate, amount, null, currency, null, quantity, itemDetails);
     }
 
     @Override
diff --git a/invoice/src/main/java/org/killbill/billing/invoice/template/formatters/DefaultInvoiceItemFormatter.java b/invoice/src/main/java/org/killbill/billing/invoice/template/formatters/DefaultInvoiceItemFormatter.java
index f59f5d8787..c411381d4b 100644
--- a/invoice/src/main/java/org/killbill/billing/invoice/template/formatters/DefaultInvoiceItemFormatter.java
+++ b/invoice/src/main/java/org/killbill/billing/invoice/template/formatters/DefaultInvoiceItemFormatter.java
@@ -192,6 +192,12 @@ public class DefaultInvoiceItemFormatter implements InvoiceItemFormatter {
         return null;
     }
 
+    @Override
+    public Integer getQuantity() { return item.getQuantity(); }
+
+    @Override
+    public String getItemDetails() { return item.getItemDetails(); }
+
     @Override
     public boolean matches(final Object other) {
         throw new UnsupportedOperationException();
diff --git a/invoice/src/main/resources/org/killbill/billing/invoice/dao/InvoiceItemSqlDao.sql.stg b/invoice/src/main/resources/org/killbill/billing/invoice/dao/InvoiceItemSqlDao.sql.stg
index c7596b429c..eccd1c5364 100644
--- a/invoice/src/main/resources/org/killbill/billing/invoice/dao/InvoiceItemSqlDao.sql.stg
+++ b/invoice/src/main/resources/org/killbill/billing/invoice/dao/InvoiceItemSqlDao.sql.stg
@@ -19,6 +19,8 @@ tableFields(prefix) ::= <<
 , <prefix>rate
 , <prefix>currency
 , <prefix>linked_item_id
+, <prefix>quantity
+, <prefix>item_details
 , <prefix>created_by
 , <prefix>created_date
 >>
@@ -40,6 +42,8 @@ tableValues() ::= <<
 , :rate
 , :currency
 , :linkedItemId
+, :quantity
+, :itemDetails
 , :createdBy
 , :createdDate
 >>
diff --git a/invoice/src/main/resources/org/killbill/billing/invoice/ddl.sql b/invoice/src/main/resources/org/killbill/billing/invoice/ddl.sql
index 52f4ee7b6f..f2bce3665c 100644
--- a/invoice/src/main/resources/org/killbill/billing/invoice/ddl.sql
+++ b/invoice/src/main/resources/org/killbill/billing/invoice/ddl.sql
@@ -20,6 +20,8 @@ CREATE TABLE invoice_items (
     rate numeric(15,9) NULL,
     currency varchar(3) NOT NULL,
     linked_item_id varchar(36),
+    quantity int,
+    item_details text,
     created_by varchar(50) NOT NULL,
     created_date datetime",Adding quantity and item_details fields,"""Added quantity and item details fields to InvoiceItemModelDao and related classes""","""Added quantity and item details to InvoiceItemModelDao and related classes""","This commit appears to add new fields to the `InvoiceItemModelDao` and `InvoiceItemBase` classes, specifically `quantity` and `itemDetails`. It also adds new constructors to these classes that include these fields, and updates the `toString`, `equals`, and `hashCode` methods to include them.

In addition, it adds new getter methods for these fields in both classes, and updates the `InvoiceItemFactory` class to set these fields when creating `InvoiceItem` objects.

Finally, it updates the SQL scripts for the `invoice_items` table to include new columns for `quantity` and `itemDetails`.

Based on these changes, a possible commit message could be:

""Add quantity and item details to invoice items

This commit adds new fields to the `InvoiceItemModelDao` and `InvoiceItemBase` classes to track the quantity and item details of invoice items. It also updates the SQL scripts for the `invoice_items` table to include new columns for these fields. In addition, it updates the `InvoiceItemFactory` class to set these fields when creating `InvoiceItem` objects.""","Added quantity and itemDetails fields to InvoiceItemModelDao, InvoiceItemBase, and related classes; updated SQL schema and DAOs accordingly."
"diff --git a/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java b/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java
index 910731a..5d08b27 100644
--- a/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java
+++ b/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java
@@ -42,7 +42,7 @@ public class PullToRefreshAttacher implements View.OnTouchListener {
 	private static final int DEFAULT_HEADER_LAYOUT = R.layout.default_header;
 	private static final float DEFAULT_REFRESH_SCROLL_DISTANCE = 0.5f;
 	private static final boolean DEFAULT_REFRESH_ON_UP = false;
-	private static final int DEFAULT_REFRESH_MINIMIZED_DELAY = 3 * 1000;
+	private static final int DEFAULT_REFRESH_MINIMIZED_DELAY = 1 * 1000;
 	private static final boolean DEFAULT_REFRESH_MINIMIZE = true;
 
 	private static final boolean DEBUG = false;",Tweak default minimization delay to 1 second,"""Reduce default refresh minimized delay from 3 seconds to 1 second""","""Reduce default minimized delay to 1 second""","""Reduced DEFAULT_REFRESH_MINIMIZED_DELAY from 3000ms to 1000ms in PullToRefreshAttacher.java""","""Reduce default refresh minimized delay from 3 seconds to 1 second in PullToRefreshAttacher.java"""
"diff --git a/devs/docs/es-backports.rst b/devs/docs/es-backports.rst
index c977d04a54..c6dd8f9dda 100644
--- a/devs/docs/es-backports.rst
+++ b/devs/docs/es-backports.rst
@@ -42,7 +42,8 @@ repository. For example::
       server/src/main/java/org/elasticsearch/transport \
       server/src/main/java/org/elasticsearch/gateway \
       server/src/main/java/org/elasticsearch/action/admin/cluster/health \
-      server/src/main/java/org/elasticsearch/action/support/replication
+      server/src/main/java/org/elasticsearch/action/support/replication \
+      server/src/main/java/org/elasticsearch/action/support/master
 
 
 Here ``4b16d50cd4b`` is the starting point, it shows any changes since then
@@ -102,6 +103,7 @@ should be crossed out as well.
 - [ ] 8f8d2d1b4ba [DOCS] Fix dup word in ShardRouting hashcode method. (#63452)
 - [ ] 62857b49d1d Add support for missing value fetchers. (#63515)
 - [ ] 2d1bf0c79ef Dry up TransportMasterNodeAction Usage (#63524)
+- [ ] 4e740c2e4a5 Dry up AcknowledgedResponse Handling (#63335)
 - [ ] dc5dbbbfe29 Flush translog writer before adding new operation (#63505)
 - [ ] 8c56bbc3e6e Add factory methods for common value fetchers. (#63438)
 - [ ] 80268f9bff6 TextSearchInfo should never get null analyzers (#63472)
@@ -331,6 +333,7 @@ should be crossed out as well.
 - [ ] 6477924c262 Store parsed mapping settings in IndexSettings (#57492)
 - [ ] 4d6dc51c729 Header warning logging refactoring (#55941)
 - [ ] 2ef82cd7f95 Fix Local Translog Recovery not Updating Safe Commit in Edge Case (#57350)
+- [ ] 9d07229879d Change cluster info actions to be able to resolve data streams. (#56878)
 - [ ] 99871b18d64 Catch InputCoercionException thrown by Jackson parser (#57287)
 - [ ] 86b64e4c39e Remove unused logic from FieldNamesFieldMapper. (#56834)
 - [ ] 579ce2f99cb Reestablish peer recovery after network errors (#55274)
@@ -493,6 +496,7 @@ should be crossed out as well.
 - [ ] c117c0cf0a2 Password-protected Keystore Feature Branch PR (#51123)
 - [ ] 0c87892b3db Remove sync flush logic in Engine (#51450)
 - [ ] b034d1e2ef8 Remove translog retention policy (#51417)
+- [ ] db480292eeb Fix TransportMasterNodeAction not Retrying NodeClosedException (#51325)
 - [ ] 80cacc617f2 Enable operation-based recoveries for old copies (#51380)
 - [ ] 5132715bc10 Do not wrap soft-deletes reader for segment stats (#51331)
 - [ ] 151148622cb Exclude nested documents in LuceneChangesSnapshot (#51279)
@@ -505,6 +509,7 @@ should be crossed out as well.
 - [ ] 173c3bdac41 Introduce hidden indices (#50452)
 - [ ] 9bb7d21c0b0 Remove the AllFieldMapper from master (#51106)
 - [ ] 09b46c86463 Goodbye and thank you synced flush! (#50882)
+- [ ] 0e0f900d181 Tweak formatter config for long generic lines (#50909)
 - [ ] 7cd4b73b098 Fix compilation for #50813
 - [ ] d94b81e8b0e Remove custom metadata tool (#50813)
 - [ ] e349c5eec09 Track Snapshot Version in RepositoryData (#50930)",Add master transport action commits to es - backports . rst,"""Update es-backports.rst with new backport PRs""","""Update devs/docs/es-backports.rst with new task additions and changes""","It seems like you're working with a git repository and you're trying to backport some changes from one branch to another. The changes you've listed are commit IDs along with their corresponding descriptions.

The additional commit you've added in both sections is correct. Here's how the updated lists look:

For the first list:
- [ ] 4e740c2e4a5 Dry up AcknowledgedResponse Handling (#63335)

For the second list:
- [ ] 9d07229879d Change cluster info actions to be able to resolve data streams. (#56878)

As for the commit message, it's not provided in your question. If you're asking about how to write a commit message for these changes, a good commit message might summarize the changes you've made. For example, ""Backported changes from [branch name] to [branch name], including [brief description of changes].""",Update Elasticsearch backports documentation by including changes in relevant directories and marking additional commits for tracking.
"diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/DebuggerConnection.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/DebuggerConnection.java
index ee575b4d3cd..e58bfc0a1ec 100644
--- a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/DebuggerConnection.java
+++ b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/DebuggerConnection.java
@@ -123,7 +123,6 @@ public final class DebuggerConnection implements JDWPCommands {
         public void run() {
             while (!Thread.currentThread().isInterrupted()) {
                 DebuggerCommand debuggerCommand = awaitNextCommand(); // blocking
-                //System.out.println(""got a "" + debuggerCommand.kind + "" command from debugger"");
 
                 if (debuggerCommand != null) {
                     Object thread = debuggerCommand.getThread();
diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/JDWPDebuggerController.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/JDWPDebuggerController.java
index 23556b0bebf..22a37d7023b 100644
--- a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/JDWPDebuggerController.java
+++ b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/JDWPDebuggerController.java
@@ -376,7 +376,6 @@ public class JDWPDebuggerController {
 
             boolean hit = false;
             for (Breakpoint bp : event.getBreakpoints()) {
-                //System.out.println(""BP at suspension point: "" + bp.getLocationDescription());
 
                 BreakpointInfo info = breakpointInfos.get(bp);
                 suspendPolicy = info.getSuspendPolicy();
diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/Packet.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/Packet.java
index 5ca3585a7ba..4243e15fbf2 100644
--- a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/Packet.java
+++ b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/Packet.java
@@ -140,51 +140,4 @@ public final class Packet {
          */
         return uID++;
     }
-
-    public void dump(boolean sending) {
-        String direction = sending ? ""Sending"" : ""Receiving"";
-        if (sending) {
-            System.out.println(direction + "" Command. id="" + id +
-                    "", length="" + data.length +
-                    "", commandSet="" + cmdSet +
-                    "", command="" + cmd +
-                    "", flags="" + flags);
-        } else {
-            String type = (flags & Packet.Reply) != 0 ?
-                    ""Reply"" : ""Event"";
-            System.out.println(direction + "" "" + type + "". id="" + id +
-                    "", length="" + data.length +
-                    "", errorCode="" + errorCode +
-                    "", flags="" + flags);
-        }
-
-        StringBuffer line = new StringBuffer(80);
-
-        line.append(""0000: "");
-        if (data.length == 0) {
-            line.append(""no data in packet"");
-        }
-        for (int i = 0; i < data.length; i++) {
-            if ((i > 0) && (i % 16 == 0)) {
-                System.out.println(line.toString());
-                line.setLength(0);
-                line.append(String.valueOf(i));
-                line.append("": "");
-                int len = line.length();
-                for (int j = 0; j < 6 - len; j++) {
-                    line.insert(0, '0');
-                }
-            }
-            int val = 0xff & data[i];
-            String str = Integer.toHexString(val);
-            if (str.length() == 1) {
-                line.append('0');
-            }
-            line.append(str);
-            line.append(' ');
-        }
-        if (line.length() > 6) {
-            System.out.println(line.toString());
-        }
-    }
 }
\ No newline at end of file
diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/PacketStream.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/PacketStream.java
index cb854268470..49244e8a180 100644
--- a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/PacketStream.java
+++ b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/PacketStream.java
@@ -212,7 +212,6 @@ public final class PacketStream {
         try {
             ret = new String(packet.data, readPosition, len, ""UTF8"");
         } catch(java.io.UnsupportedEncodingException e) {
-            System.err.println(e);
             ret = ""Conversion error!"";
         }
         readPosition += len;
diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/RequestedJDWPEvents.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/RequestedJDWPEvents.java
index f17e25faa42..e39c5a6c609 100644
--- a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/RequestedJDWPEvents.java
+++ b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/RequestedJDWPEvents.java
@@ -301,7 +301,6 @@ public final class RequestedJDWPEvents {
             if (kind == eventKind) {
                 switch (eventKind) {
                     case SINGLE_STEP:
-                        //System.out.println(""clear single step not implemented"");
                         break;
                     case METHOD_EXIT_WITH_RETURN_VALUE:
                     case METHOD_ENTRY:
diff --git a/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/VMEventListenerImpl.java b/src/com.oracle.truffle.espresso.jdwp/src/com/oracle/truffle/espresso/jdwp/impl/VMEventListenerImpl.java
index",remove all sysout / syserr including the ones in comments,"""Remove debug print statements from JDWP implementation""","Based on the provided diff, it appears that several debug print statements have been removed from the code. Here's a possible commit message:

`Remove debug print statements`

Alternatively, if you want to be more specific about the files or classes affected, you could use:

`Remove debug print statements from JDWP implementation`

Or, if you want to highlight the fact that several files were modified, you could use:

`Remove debug print statements from multiple JDWP implementation files`","""Removed debug print statements and added error message in PacketStream""

Explanation:

* In DebuggerConnection.java, a print statement was removed.
* In JDWPDebuggerController.java, a print statement was removed.
* In Packet.java, a dump method was removed, and it contained multiple print statements.
* In PacketStream.java, an error message was added in the catch block for UnsupportedEncodingException.

These changes seem to be focused on removing unnecessary debug output and improving error handling.",Removed commented-out debugging statements from JDWP implementation files for cleaner and more maintainable code.
"diff --git a/server-core/src/main/java/io/onedev/server/web/behavior/inputassist/input-assist.css b/server-core/src/main/java/io/onedev/server/web/behavior/inputassist/input-assist.css
index 1a356ff01..c827b6ecd 100644
--- a/server-core/src/main/java/io/onedev/server/web/behavior/inputassist/input-assist.css
+++ b/server-core/src/main/java/io/onedev/server/web/behavior/inputassist/input-assist.css
@@ -1,4 +1,4 @@
-.input-assist {
+.floating>.content>.input-assist {
 	padding: 8px;
 }
 .input-assist .suggestions {
diff --git a/server-core/src/main/java/io/onedev/server/web/page/base/base.css b/server-core/src/main/java/io/onedev/server/web/page/base/base.css
index 4e829723e..ce4a8c9ac 100644
--- a/server-core/src/main/java/io/onedev/server/web/page/base/base.css
+++ b/server-core/src/main/java/io/onedev/server/web/page/base/base.css
@@ -480,15 +480,18 @@ table>tbody>tr>td.actions a:last-child {
 .clearable-wrapper input.clearable::-ms-clear {
     display: none;
 }
+.clearable-wrapper input.clearable {
+	padding-right: 20px;
+}
 a.input-clear {
 	font-family: sans-serif;
 	display: block;
-	width: 24px; 
+	width: 12px; 
 	height: 24px;
 	line-height: 24px;
 	font-size: 16px;
 	position: absolute;
-	right: 5px;
+	right: 6px;
 	top: 0; 
 	bottom: 0;
 	margin: auto;
diff --git a/server-core/src/main/java/io/onedev/server/web/page/base/base.js b/server-core/src/main/java/io/onedev/server/web/page/base/base.js
index 3b652e406..989b9dd60 100644
--- a/server-core/src/main/java/io/onedev/server/web/page/base/base.js
+++ b/server-core/src/main/java/io/onedev/server/web/page/base/base.js
@@ -643,7 +643,7 @@ onedev.server = {
 		function installClearer($container) {
 			$container.find("".clearable-wrapper"").each(function() {
 				var $wrapper = $(this);
-                var $input = $wrapper.find(""input[type=text]:visible, input:not([type]):visible, textarea:visible"");
+                var $input = $wrapper.find(""input[type=text], input:not([type])"");
 				if (!$input.hasClass(""clearable"")) {
 					$input.addClass(""clearable"");
 					var $clear = $(""<a class='input-clear'>x</a>"");",Fix the issue that input clear hides input text,"""Refactor input assist and clearable input styles and behavior""","""Updated CSS and JavaScript for input clearing and floating input assist""","""Update input-assist CSS and clearable input styles in base.css, base.js""

Explanation:

* input-assist.css: The CSS class `.input-assist` is changed to `.floating>.content>.input-assist`. This will affect the padding of the input assist element.
* base.css: The CSS class `.clearable-wrapper input.clearable` is added, which sets the padding-right of the clearable input to 20px. Additionally, the width of the `a.input-clear` class is changed from 24px to 12px, and the right position is changed from 5px to 6px.
* base.js: In the `installClearer` function, the variable `$input` is changed to select only visible text inputs and inputs without a type attribute, instead of also including textareas. The `$clear` variable is also added, which creates an anchor element with the class `input-clear` and the text ""x"".","Updated CSS and JS for input assist and clearable inputs, improved compatibility and padding adjustments."
"diff --git a/sharding-core/src/test/java/io/shardingsphere/core/rule/ShardingRuleTest.java b/sharding-core/src/test/java/io/shardingsphere/core/rule/ShardingRuleTest.java
index eca5da6efd4..c986d31310f 100644
--- a/sharding-core/src/test/java/io/shardingsphere/core/rule/ShardingRuleTest.java
+++ b/sharding-core/src/test/java/io/shardingsphere/core/rule/ShardingRuleTest.java
@@ -18,6 +18,7 @@
 package io.shardingsphere.core.rule;
 
 import io.shardingsphere.api.algorithm.fixture.TestPreciseShardingAlgorithm;
+import io.shardingsphere.api.config.BroadcastTableRuleConfiguration;
 import io.shardingsphere.api.config.ShardingRuleConfiguration;
 import io.shardingsphere.api.config.TableRuleConfiguration;
 import io.shardingsphere.api.config.strategy.NoneShardingStrategyConfiguration;
@@ -105,6 +106,16 @@ public final class ShardingRuleTest {
         assertFalse(actual.tryFindTableRuleByLogicTable(""null"").isPresent());
     }
     
+    @Test
+    public void assertFindBroadcastTableRule() {
+        ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();
+        BroadcastTableRuleConfiguration broadcastTableRuleConfiguration = createBoradcastTableRuleConfig();
+        shardingRuleConfig.getBroadcastTableRuleConfigs().add(broadcastTableRuleConfiguration);
+        ShardingRule actual = new ShardingRule(shardingRuleConfig, createDataSourceNames());
+        assertTrue(actual.tryFindBroadcastTableRuleByLogicTable(""broadcast_logic_Table"").isPresent());
+        assertFalse(actual.tryFindBroadcastTableRuleByLogicTable(""null"").isPresent());
+    }
+    
     @Test
     public void assertGetDatabaseShardingStrategyFromTableRule() {
         ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration();
@@ -411,6 +422,19 @@ public final class ShardingRuleTest {
         return result;
     }
     
+    private BroadcastTableRuleConfiguration createBoradcastTableRuleConfig() {
+        BroadcastTableRuleConfiguration result = new BroadcastTableRuleConfiguration();
+        result.setLogicTable(""BROADCAST_LOGIC_TABLE"");
+        return result;
+    }
+    
+    private TableRuleConfiguration createSubTableRuleConfig() {
+        TableRuleConfiguration result = new TableRuleConfiguration();
+        result.setLogicTable(""SUB_LOGIC_TABLE"");
+        result.setActualDataNodes(""ds${0..1}.sub_table_${0..2}"");
+        return result;
+    }
+    
     private TableRuleConfiguration createTableRuleConfigWithLogicIndex() {
         TableRuleConfiguration result = new TableRuleConfiguration();
         result.setLogicTable(""LOGIC_TABLE"");
@@ -435,13 +459,6 @@ public final class ShardingRuleTest {
         return result;
     }
     
-    private TableRuleConfiguration createSubTableRuleConfig() {
-        TableRuleConfiguration result = new TableRuleConfiguration();
-        result.setLogicTable(""SUB_LOGIC_TABLE"");
-        result.setActualDataNodes(""ds${0..1}.sub_table_${0..2}"");
-        return result;
-    }
-    
     private TableRuleConfiguration createTableRuleConfigWithAllStrategies() {
         TableRuleConfiguration result = new TableRuleConfiguration();
         result.setLogicTable(""LOGIC_TABLE"");",add tryFindBroadcastTableRuleByLogicTable test,"""Add test for finding broadcast table rule in ShardingRuleTest""",Added support for broadcast table rule configuration and test cases.,"""Add test for finding broadcast table rule and refactor test utility methods in ShardingRuleTest""

Explanation:

* A new test method `assertFindBroadcastTableRule()` has been added to check the functionality of finding a broadcast table rule by logic table.
* A utility method `createBoradcastTableRuleConfig()` has been added to create a BroadcastTableRuleConfiguration object for testing.
* A utility method `createSubTableRuleConfig()` has been added to create a TableRuleConfiguration object for testing.
* The existing utility method `createTableRuleConfigWithAllStrategies()` has been updated to use the new `createSubTableRuleConfig()` method.
* The commit message should briefly summarize these changes.","Add and test BroadcastTableRuleConfiguration in ShardingRuleTest, ensuring correct retrieval of broadcast table rules."
"diff --git a/pom.xml b/pom.xml
index 572c344011..0bb54c565f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -66,6 +66,7 @@
         <module>plugins/org.jkiss.dbeaver.test</module>
 
         <module>features/org.jkiss.dbeaver.core.feature</module>
+        <module>features/org.jkiss.dbeaver.debug.feature</module>
         <module>features/org.jkiss.dbeaver.ext.db2.feature</module>
         <module>features/org.jkiss.dbeaver.ext.generic.feature</module>
         <module>features/org.jkiss.dbeaver.ext.mysql.feature</module>",Build fix ( debug feature ) .,"""Added features/org.jkiss.dbeaver.debug.feature module to pom.xml""",Added org.jkiss.dbeaver.debug.feature to the list of modules in pom.xml.,"""Added org.jkiss.dbeaver.debug.feature module to pom.xml""",Add new debug feature module to the project in pom.xml.
"diff --git a/jaxp/.hgtags b/jaxp/.hgtags
index a300149d20..80868b1be6 100644
--- a/jaxp/.hgtags
+++ b/jaxp/.hgtags
@@ -749,3 +749,4 @@ d36b0186befa153f155302f394797ddcacbcaf70 jdk8u152-b08
 9a4e0d4984a41d7413fbd4cbf12b53a3631a1132 jdk8u152-b10
 910f70805a76d62f11aaac6fb81a249756c43571 jdk8u152-b11
 228115c9db82ccc7955ff1bfea8c1f11d90d7f6f jdk8u152-b12
+1005fdca8d86e3fcbaf0f76d811a7073469c5da4 jdk8u152-b13",Added tag jdk8u152 - b13 for changeset d7ce4d31c676,"""Added jdk8u152-b13 tag to jaxp/.hgtags""","""Update .hgtags to include jdk8u152-b13""","Based on the provided diff, it appears that a new line has been added to the .hgtags file in the jaxp directory. The new line is:

`1005fdca8d86e3fcbaf0f76d811a7073469c5da4 jdk8u152-b13`

This line seems to be adding a new tag `jdk8u152-b13` that points to the commit hash `1005fdca8d86e3fcbaf0f76d811a7073469c5da4`.

Therefore, the commit message for this change could be something like:

""Add tag jdk8u152-b13 for commit 1005fdca8d86e3fcbaf0f76d811a7073469c5da4""",Added a new tag for jdk8u152-b13 to the .hgtags file.
"diff --git a/src/net/java/sip/communicator/impl/gui/utils/NotificationManager.java b/src/net/java/sip/communicator/impl/gui/utils/NotificationManager.java
index 35ca9a499..2b1709c3a 100644
--- a/src/net/java/sip/communicator/impl/gui/utils/NotificationManager.java
+++ b/src/net/java/sip/communicator/impl/gui/utils/NotificationManager.java
@@ -40,8 +40,6 @@ public static void registerGuiNotifications()
                 null,
                 null);
 
-        System.out.println(""INCOMING MESSAGE==========="" + SoundProperties.INCOMING_MESSAGE);
-
         notificationService.registerDefaultNotificationForEvent(
                 INCOMING_MESSAGE,
                 NotificationService.ACTION_SOUND,",Removes a System . out debug print,"""Remove debug print statement in NotificationManager""","""Removed debug print statement from registerGuiNotifications() method.""","""Removed print statement for INCOMING\_MESSAGE in registerGuiNotifications() method""",Removed debug print statement for incoming message sound properties in NotificationManager.java.
"diff --git a/k9mail/src/main/java/com/fsck/k9/activity/Accounts.java b/k9mail/src/main/java/com/fsck/k9/activity/Accounts.java
index 2deab0386..46c2babf6 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/Accounts.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/Accounts.java
@@ -434,7 +434,7 @@ public class Accounts extends K9ListActivity implements OnItemClickListener {
         handler.setViewTitle();
 
         // Handle activity restarts because of a configuration change (e.g. rotating the screen)
-        nonConfigurationInstance = (NonConfigurationInstance) getLastNonConfigurationInstance();
+        nonConfigurationInstance = (NonConfigurationInstance) getLastCustomNonConfigurationInstance();
         if (nonConfigurationInstance != null) {
             nonConfigurationInstance.restore(this);
         }
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/FolderList.java b/k9mail/src/main/java/com/fsck/k9/activity/FolderList.java
index ced0d32f0..f36508863 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/FolderList.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/FolderList.java
@@ -351,7 +351,7 @@ public class FolderList extends K9ListActivity {
 
     @SuppressWarnings(""unchecked"")
     private void restorePreviousData() {
-        final Object previousData = getLastNonConfigurationInstance();
+        final Object previousData = getLastCustomNonConfigurationInstance();
 
         if (previousData != null) {
             adapter.mFolders = (ArrayList<FolderInfoHolder>) previousData;
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/MessageCompose.java b/k9mail/src/main/java/com/fsck/k9/activity/MessageCompose.java
index 50dfd21b7..296df8df9 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/MessageCompose.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/MessageCompose.java
@@ -446,7 +446,7 @@ public class MessageCompose extends K9Activity implements OnClickListener,
 
         setTitle();
 
-        currentMessageBuilder = (MessageBuilder) getLastNonConfigurationInstance();
+        currentMessageBuilder = (MessageBuilder) getLastCustomNonConfigurationInstance();
         if (currentMessageBuilder != null) {
             setProgressBarIndeterminateVisibility(true);
             currentMessageBuilder.reattachCallback(this);",Replace usages of getLastNonConfigurationInstance ( ) .,"""Replace getLastNonConfigurationInstance with getLastCustomNonConfigurationInstance""","""Switch to getLastCustomNonConfigurationInstance() for restoring state after configuration changes""","""Replace getLastNonConfigurationInstance() with getLastCustomNonConfigurationInstance() in Accounts, FolderList, and MessageCompose activities""

This commit is changing the method used to retrieve the last non-configuration instance in three different activities in the K9Mail application. The previous method, `getLastNonConfigurationInstance()`, has been replaced with `getLastCustomNonConfigurationInstance()`. This change affects the Accounts, FolderList, and MessageCompose activities. The purpose of this change is not clear without additional context, but it may be related to how the application handles configuration changes (such as screen rotation) and restores previous data.",Switched from `getLastNonConfigurationInstance` to `getLastCustomNonConfigurationInstance` for handling activity restarts due to configuration changes.
"diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java10Validator.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java10Validator.java
index 42e5c61c8..c7fda2f46 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java10Validator.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java10Validator.java
@@ -1,39 +1,14 @@
 package com.github.javaparser.ast.validator;
 
-import com.github.javaparser.ast.Node;
-import com.github.javaparser.ast.body.VariableDeclarator;
-import com.github.javaparser.ast.expr.VariableDeclarationExpr;
-import com.github.javaparser.ast.stmt.ForStmt;
-import com.github.javaparser.ast.stmt.ForeachStmt;
 import com.github.javaparser.ast.type.VarType;
-
-import java.util.Optional;
+import com.github.javaparser.ast.validator.chunks.VarValidator;
 
 /**
  * This validator validates according to Java 10 syntax rules.
  */
 public class Java10Validator extends Java9Validator {
 
-    protected final Validator varOnlyOnLocalVariableDefinitionAndFor = new SingleNodeTypeValidator<>(VarType.class, (n, reporter) -> {
-        Optional<VariableDeclarator> variableDeclarator = n.findParent(VariableDeclarator.class);
-        if (!variableDeclarator.isPresent()) {
-            reporter.report(n, ""\""var\"" is not allowed here."");
-            return;
-        }
-        variableDeclarator.ifPresent(vd -> {
-            Optional<Node> container = vd.getParentNode();
-            if (!container.isPresent()) {
-                reporter.report(n, ""\""var\"" is not allowed here."");
-                return;
-            }
-            container.ifPresent(c -> {
-                boolean positionIsFine = c instanceof ForStmt || c instanceof ForeachStmt || c instanceof VariableDeclarationExpr;
-                if (!positionIsFine) {
-                    reporter.report(n, ""\""var\"" is not allowed here."");
-                }
-            });
-        });
-    });
+    protected final Validator varOnlyOnLocalVariableDefinitionAndFor = new SingleNodeTypeValidator<>(VarType.class, new VarValidator(false));
 
     public Java10Validator() {
         super();
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java11Validator.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java11Validator.java
index d80577268..0eb879aa0 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java11Validator.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/Java11Validator.java
@@ -1,10 +1,16 @@
 package com.github.javaparser.ast.validator;
 
+import com.github.javaparser.ast.type.VarType;
+import com.github.javaparser.ast.validator.chunks.VarValidator;
+
 /**
  * This validator validates according to Java 11 syntax rules.
  */
 public class Java11Validator extends Java10Validator {
+    protected final Validator varAlsoInLambdaParameters = new SingleNodeTypeValidator<>(VarType.class, new VarValidator(true));
+
     public Java11Validator() {
         super();
+        replace(varOnlyOnLocalVariableDefinitionAndFor, varAlsoInLambdaParameters);
     }
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/chunks/VarValidator.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/chunks/VarValidator.java
new file mode 100644
index 000000000..19357e83c
--- /dev/null
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/chunks/VarValidator.java
@@ -0,0 +1,93 @@
+package com.github.javaparser.ast.validator.chunks;
+
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.body.Parameter;
+import com.github.javaparser.ast.body.VariableDeclarator;
+import com.github.javaparser.ast.expr.ArrayCreationExpr;
+import com.github.javaparser.ast.expr.LambdaExpr;
+import com.github.javaparser.ast.expr.NullLiteralExpr;
+import com.github.javaparser.ast.expr.VariableDeclarationExpr;
+import com.github.javaparser.ast.stmt.ExpressionStmt;
+import com.github.javaparser.ast.stmt.ForStmt;
+import com.github.javaparser.ast.stmt.ForeachStmt;
+import com.github.javaparser.ast.type.VarType;
+import com.github.javaparser.ast.validator.ProblemReporter;
+import com.github.javaparser.ast.validator.TypedValidator;
+
+import java.util.Optional;
+
+public class VarValidator implements TypedValidator<VarType> {
+    private boolean varAllowedInLambdaParameters;
+
+    public VarValidator(boolean varAllowedInLambdaParameters) {
+        this.varAllowedInLambdaParameters = varAllowedInLambdaParameters;
+    }
+
+    @Override
+    public void accept(VarType node, ProblemReporter reporter) {
+        // All allowed locations are within a VariableDeclaration inside a VariableDeclarationExpr inside something else.
+        Optional<VariableDeclarator> variableDeclarator = node.findParent(VariableDeclarator.class);
+        if (!variableDeclarator.isPresent()) {
+            // Java 11's var in lambda's
+            if (varAllowedInLambdaParameters) {
+                boolean valid = node
+                        .findParent(Parameter.class)
+                        .flatMap(Node::getParentNode)
+                        .map((Node p) -> p instanceof LambdaExpr).orElse(false);
+                if (valid) {
+                    return;
+                }
+            }
+            reportIllegalPosition(node, reporter);
+            return;
+        }
+        variableDeclarator.ifPresent(vd -> {
+            Optional<Node> variableDeclarationExpr = vd.getParentNode();
+            if (!variableDeclarationExpr.isPresent()) {
+                reportIllegalPosition(node, reporter);
+                return;
+            }
+            variableDeclarationExpr.ifPresent(vdeNode -> {
+                if (!(vdeNode instanceof VariableDeclarationExpr)) {
+                    reportIllegalPosition(node, reporter);
+                    return;
+                }
+                VariableDeclarationExpr vde = (VariableDeclarationExpr) vdeNode;
+                if (vde.getVariables().size() > 1) {
+                    reporter.report(vde, ""\""var\"" only takes a single variable."");
+                }
+                Optional<Node> container = vdeNode.getParentNode();
+                if (!container.isPresent()) {
+                    reportIllegalPosition(node, reporter);
+                    return;
+                }
+                container.ifPresent(c -> {
+                    boolean positionIsFine = c instanceof ForStmt || c instanceof ForeachStmt || c instanceof ExpressionStmt;
+                    if (!positionIsFine) {
+                        reportIllegalPosition(node, reporter);
+                    }
+                    // A local variable declaration ends up inside an ExpressionStmt.
+                    if (c instanceof ExpressionStmt) {
+                        if (!vd.getInitializer().isPresent()) {
+                            reporter.report(node, ""\""var\"" needs an initializer."");
+                        }
+                        vd.getInitializer().ifPresent(initializer -> {
+                            if (initializer instanceof NullLiteralExpr) {
+                                reporter.report(node, ""\""var\"" cannot infer type from just null."");
+                            }
+                            if (initializer instanceof ArrayCreationExpr) {
+                                reporter.report(node, ""\""var\"" cannot infer array types."");
+                            }
+                        });
+
+                    }
+                });
+            });
+        });
+
+    }
+
+    private void reportIllegalPosition(VarType n, ProblemReporter reporter) {
+        reporter.report(n, ""\""var\"" is not allowed here."");
+    }
+}
diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/javaparser/VarTypeTest.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/javaparser/VarTypeTest.java
index 3444ba2b1..6f2f72057 100644
--- a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/javaparser/VarTypeTest.java
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/javaparser/VarTypeTest.java
@@ -26,7 +26,7 @@ public class VarTypeTest {
 
     @Test
     public void resolveAPrimitive() {
-        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{var abc = 1;}"")).getResult().get();
+        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{void x(){var abc = 1;}}"")).getResult().get();
         VarType varType = ast.findFirst(VarType.class).get();
 
         ResolvedType resolvedType = varType.resolve();
@@ -36,7 +36,7 @@ public class VarTypeTest {
 
     @Test
     public void resolveAReferenceType() {
-        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{var abc = \""\"";}"")).getResult().get();
+        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{void x(){var abc = \""\"";}}"")).getResult().get();
         VarType varType = ast.findFirst(VarType.class).get();
 
         ResolvedType resolvedType = varType.resolve();
@@ -46,7 +46,7 @@ public class VarTypeTest {
 
     @Test(expected = IllegalStateException.class)
     public void failResolveNoInitializer() {
-        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{var abc;}"")).getResult().get();
+        CompilationUnit ast = javaParser.parse(ParseStart.COMPILATION_UNIT, provider(""class X{void x(){var abc;}}"")).getResult().get();
         VarType varType = ast.findFirst(VarType.class).get();
 
         varType.resolve();
diff --git a/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java10ValidatorTest.java b/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java10ValidatorTest.java
index b4b3d038b..afd65aaa5 100644
--- a/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java10ValidatorTest.java
+++ b/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java10ValidatorTest.java
@@ -3,15 +3,15 @@ package com.github.javaparser.ast.validator;
 import com.github.javaparser.JavaParser;
 import com.github.javaparser.ParseResult;
 import com.github.javaparser.ParserConfiguration;
-import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.body.BodyDeclaration;
 import com.github.javaparser.ast.stmt.Statement;
+import org.junit.Ignore;
 import org.junit.Test;
 
-import static com.github.javaparser.ParseStart.COMPILATION_UNIT;
+import static com.github.javaparser.ParseStart.CLASS_BODY;
 import static com.github.javaparser.ParseStart.STATEMENT;
-import static com.github.javaparser.ParserConfiguration.LanguageLevel.*;
+import static com.github.javaparser.ParserConfiguration.LanguageLevel.JAVA_10_PREVIEW;
 import static com.github.javaparser.Providers.provider;
-import static com.github.javaparser.ast.validator.Java1_1ValidatorTest.allModifiers;
 import static com.github.javaparser.utils.TestUtils.assertNoProblems;
 import static com.github.javaparser.utils.TestUtils.assertProblems;
 
@@ -42,6 +42,18 @@ public class Java10ValidatorTest {
         assertNoProblems(result);
     }
 
+    @Test
+    public void varNotAllowedInTryWithResources() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""try(var f = new FileReader(\""\"")){ }catch (Exception e){ }""));
+        assertProblems(result, ""(line 1,col 5) \""var\"" is not allowed here."");
+    }
+
+    @Test
+    public void varNotAllowedInField() {
+        ParseResult<BodyDeclaration<?>> result = javaParser.parse(CLASS_BODY, provider(""var a = 20;""));
+        assertProblems(result, ""(line 1,col 1) \""var\"" is not allowed here."");
+    }
+
     @Test
     public void varNotAllowedInTypeArguments() {
         ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""new X<var>();""));
@@ -53,4 +65,44 @@ public class Java10ValidatorTest {
         ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""x((var x) -> null);""));
         assertProblems(result, ""(line 1,col 4) \""var\"" is not allowed here."");
     }
+
+    @Test
+    public void emptyInitializerNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a;""));
+        assertProblems(result, ""(line 1,col 1) \""var\"" needs an initializer."");
+    }
+
+    @Test
+    public void multipleVariablesNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a=1, b=2;""));
+        assertProblems(result, ""(line 1,col 1) \""var\"" only takes a single variable."");
+    }
+
+    @Test
+    public void nullVariablesNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a=null;""));
+        assertProblems(result, ""(line 1,col 1) \""var\"" cannot infer type from just null."");
+    }
+
+    @Test
+    public void arrayDimensionBracketsNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a=new String[]{};""));
+        assertProblems(result, ""(line 1,col 1) \""var\"" cannot infer array types."");
+    }
+
+    // This is pretty hard to impossible to implement correctly with just the AST.
+    @Ignore
+    @Test
+    public void selfReferenceNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a=a;""));
+        assertProblems(result, """");
+    }
+
+    // Can be implemented once https://github.com/javaparser/javaparser/issues/1434 is implemented.
+    @Ignore
+    @Test
+    public void polyExpressionAsInitializerNotAllowed() {
+        ParseResult<Statement> result = javaParser.parse(STATEMENT, provider(""var a=new ArrayList<>();""));
+        assertProblems(result, """");
+    }
 }
diff --git a/javaparser-testing/src/test/java/com/github/javaparser/version/Java11PostProcessorTest.java b/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java11ValidatorTest.java
similarity index 91%
rename from javaparser-testing/src/test/java/com/github/javaparser/version/Java11PostProcessorTest.java
rename to javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java11ValidatorTest.java
index 30115c87c..1e1f8c0f8 100644
--- a/javaparser-testing/src/test/java/com/github/javaparser/version/Java11PostProcessorTest.java
+++ b/javaparser-testing/src/test/java/com/github/javaparser/ast/validator/Java11ValidatorTest.java
@@ -1,4 +1,4 @@
-package com.github.javaparser.version;
+package com.github.javaparser.ast.validator;
 
 import com.github.javaparser.JavaParser;
 import com.github.javaparser.ParseResult;
@@ -11,7 +11,7 @@ import static com.github.javaparser.ParserConfiguration.LanguageLevel.JAVA_11_PR
 import static com.github.javaparser.Providers.provider;
 import static com.github.javaparser.utils.TestUtils.assertNoProblems;
 
-public class Java11PostProcessorTest {
+public class Java11ValidatorTest {
     public static final JavaParser javaParser = new JavaParser(new ParserConfiguration().setLanguageLevel(JAVA_11_PREVIEW));
 
     @Test",Validate positions of var,"""Refactor VarType validation to use a reusable VarValidator""","""Refactor var keyword validation to use a separate validator class and add tests for Java 11 features""","""Update Java10Validator and Java11Validator to use VarValidator""

Explanation: The changes in this commit are mainly related to the validation of the ""var"" keyword in Java 10 and 11. The commit introduces a new class VarValidator, which is then used in Java10Validator and Java11Validator to validate the usage of ""var"". The validation rules for ""var"" have been moved from Java10Validator to VarValidator, and Java11Validator now uses VarValidator with an additional flag to allow ""var"" in lambda parameters.",Refactor VarType validation logic to a separate VarValidator class and add comprehensive unit tests for Java 10 and 11 syntax rules.
"diff --git a/src/com/facebook/buck/halide/HalideLibraryDescription.java b/src/com/facebook/buck/halide/HalideLibraryDescription.java
index bd1ff6101f..b6ff434f16 100644
--- a/src/com/facebook/buck/halide/HalideLibraryDescription.java
+++ b/src/com/facebook/buck/halide/HalideLibraryDescription.java
@@ -324,7 +324,7 @@ public class HalideLibraryDescription
       // we use the host flavor here, regardless of the flavors on the build
       // target.
       CxxPlatform hostCxxPlatform = cxxPlatforms.getValue(CxxPlatforms.getHostFlavor());
-      final ImmutableSortedSet<BuildTarget> compilerDeps = args.getCompilerDeps();
+      ImmutableSortedSet<BuildTarget> compilerDeps = args.getCompilerDeps();
       return createHalideCompiler(
           buildTarget,
           projectFilesystem,
diff --git a/src/com/facebook/buck/haskell/HaskellBinaryDescription.java b/src/com/facebook/buck/haskell/HaskellBinaryDescription.java
index 58f9b478e6..bc1e388ff7 100644
--- a/src/com/facebook/buck/haskell/HaskellBinaryDescription.java
+++ b/src/com/facebook/buck/haskell/HaskellBinaryDescription.java
@@ -278,8 +278,8 @@ public class HaskellBinaryDescription
     ImmutableList<Arg> linkInputs = linkInputsBuilder.build();
     ImmutableList<Arg> linkFlags = linkFlagsBuilder.build();
 
-    final CommandTool executable = executableBuilder.build();
-    final HaskellLinkRule linkRule =
+    CommandTool executable = executableBuilder.build();
+    HaskellLinkRule linkRule =
         HaskellDescriptionUtils.createLinkRule(
             binaryTarget,
             projectFilesystem,
diff --git a/src/com/facebook/buck/haskell/HaskellCompileRule.java b/src/com/facebook/buck/haskell/HaskellCompileRule.java
index a36245faf0..8a2235277c 100644
--- a/src/com/facebook/buck/haskell/HaskellCompileRule.java
+++ b/src/com/facebook/buck/haskell/HaskellCompileRule.java
@@ -153,19 +153,19 @@ public class HaskellCompileRule extends AbstractBuildRuleWithDeclaredAndExtraDep
       ProjectFilesystem projectFilesystem,
       BuildRuleParams baseParams,
       SourcePathRuleFinder ruleFinder,
-      final Tool compiler,
+      Tool compiler,
       HaskellVersion haskellVersion,
       ImmutableList<String> flags,
-      final PreprocessorFlags ppFlags,
+      PreprocessorFlags ppFlags,
       CxxPlatform cxxPlatform,
       PicType picType,
       boolean hsProfile,
       Optional<String> main,
       Optional<HaskellPackageInfo> packageInfo,
-      final ImmutableList<SourcePath> includes,
-      final ImmutableSortedMap<String, HaskellPackage> exposedPackages,
-      final ImmutableSortedMap<String, HaskellPackage> packages,
-      final HaskellSources sources,
+      ImmutableList<SourcePath> includes,
+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,
+      ImmutableSortedMap<String, HaskellPackage> packages,
+      HaskellSources sources,
       Preprocessor preprocessor) {
     Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =
         MoreSuppliers.memoize(
@@ -394,7 +394,7 @@ public class HaskellCompileRule extends AbstractBuildRuleWithDeclaredAndExtraDep
   }
 
   public ImmutableList<SourcePath> getObjects() {
-    final String suffix = ""."" + getObjectSuffix();
+    String suffix = ""."" + getObjectSuffix();
 
     ImmutableList.Builder<SourcePath> objects = ImmutableList.builder();
     for (String module : sources.getModuleNames()) {
@@ -435,8 +435,7 @@ public class HaskellCompileRule extends AbstractBuildRuleWithDeclaredAndExtraDep
   private Step prepareOutputDir(String name, Path root, String suffix) {
     return new AbstractExecutionStep(String.format(""preparing %s output dir"", name)) {
       @Override
-      public StepExecutionResult execute(ExecutionContext context)
-          throws IOException, InterruptedException {
+      public StepExecutionResult execute(ExecutionContext context) throws IOException {
         getProjectFilesystem().mkdirs(root);
         getProjectFilesystem()
             .walkRelativeFileTree(
diff --git a/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java b/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java
index bfe3c69bce..6ae2813742 100644
--- a/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java
+++ b/src/com/facebook/buck/haskell/HaskellDescriptionUtils.java
@@ -96,13 +96,13 @@ public class HaskellDescriptionUtils {
    */
   private static HaskellCompileRule createCompileRule(
       BuildTarget target,
-      final ProjectFilesystem projectFilesystem,
+      ProjectFilesystem projectFilesystem,
       BuildRuleParams baseParams,
-      final BuildRuleResolver resolver,
+      BuildRuleResolver resolver,
       SourcePathRuleFinder ruleFinder,
       ImmutableSet<BuildRule> deps,
       HaskellPlatform platform,
-      final Linker.LinkableDepType depType,
+      Linker.LinkableDepType depType,
       boolean hsProfile,
       Optional<String> main,
       Optional<HaskellPackageInfo> packageInfo,
@@ -111,11 +111,11 @@ public class HaskellDescriptionUtils {
 
     CxxPlatform cxxPlatform = platform.getCxxPlatform();
 
-    final Map<BuildTarget, ImmutableList<String>> depFlags = new TreeMap<>();
-    final Map<BuildTarget, ImmutableList<SourcePath>> depIncludes = new TreeMap<>();
-    final ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =
+    Map<BuildTarget, ImmutableList<String>> depFlags = new TreeMap<>();
+    Map<BuildTarget, ImmutableList<SourcePath>> depIncludes = new TreeMap<>();
+    ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =
         ImmutableSortedMap.naturalOrder();
-    final ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =
+    ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =
         ImmutableSortedMap.naturalOrder();
     new AbstractBreadthFirstTraversal<BuildRule>(deps) {
       private final ImmutableSet<BuildRule> empty = ImmutableSet.of();
@@ -406,10 +406,10 @@ public class HaskellDescriptionUtils {
   /** Give a rule that will result in a ghci session for the target */
   public static HaskellGhciRule requireGhciRule(
       BuildTarget buildTarget,
-      final ProjectFilesystem projectFilesystem,
+      ProjectFilesystem projectFilesystem,
       BuildRuleParams params,
       CellPathResolver cellPathResolver,
-      final BuildRuleResolver resolver,
+      BuildRuleResolver resolver,
       HaskellPlatform platform,
       CxxBuckConfig cxxBuckConfig,
       ImmutableSortedSet<BuildTarget> argDeps,
diff --git a/src/com/facebook/buck/haskell/HaskellGhciRule.java b/src/com/facebook/buck/haskell/HaskellGhciRule.java
index 20a9f991a4..a6a65e14ac 100644
--- a/src/com/facebook/buck/haskell/HaskellGhciRule.java
+++ b/src/com/facebook/buck/haskell/HaskellGhciRule.java
@@ -392,7 +392,7 @@ public class HaskellGhciRule extends AbstractBuildRuleWithDeclaredAndExtraDeps
                 CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
       }
 
-      pkgdirs.add(""${DIR}/"" + dir.relativize(pkgdir.resolve(pkgDbSrc.getFileName())).toString());
+      pkgdirs.add(""${DIR}/"" + dir.relativize(pkgdir.resolve(pkgDbSrc.getFileName())));
     }
 
     ImmutableSet.Builder<String> exposedPkgs = ImmutableSet.builder();
@@ -497,7 +497,7 @@ public class HaskellGhciRule extends AbstractBuildRuleWithDeclaredAndExtraDeps
 
         steps.add(CopyStep.forFile(getProjectFilesystem(), resolver.getRelativePath(sp), bin));
 
-        ghcPath = ""${DIR}/"" + dir.relativize(bin).toString() + "" -B"" + ghciLib.toRealPath();
+        ghcPath = ""${DIR}/"" + dir.relativize(bin) + "" -B"" + ghciLib.toRealPath();
       } else {
         ghcPath = ghciGhc.toRealPath().toString();
       }
diff --git a/src/com/facebook/buck/haskell/HaskellHaddockLibRule.java b/src/com/facebook/buck/haskell/HaskellHaddockLibRule.java
index 22986489cb..6f59ea48ff 100644
--- a/src/com/facebook/buck/haskell/HaskellHaddockLibRule.java
+++ b/src/com/facebook/buck/haskell/HaskellHaddockLibRule.java
@@ -94,8 +94,8 @@ public class HaskellHaddockLibRule extends AbstractBuildRuleWithDeclaredAndExtra
       ImmutableList<String> compilerFlags,
       ImmutableList<String> linkerFlags,
       ImmutableSet<SourcePath> interfaces,
-      final ImmutableSortedMap<String, HaskellPackage> packages,
-      final ImmutableSortedMap<String, HaskellPackage> exposedPackages,
+      ImmutableSortedMap<String, HaskellPackage> packages,
+      ImmutableSortedMap<String, HaskellPackage> exposedPackages,
       HaskellPackageInfo packageInfo,
       HaskellPlatform platform,
       Preprocessor preprocessor,
@@ -121,7 +121,7 @@ public class HaskellHaddockLibRule extends AbstractBuildRuleWithDeclaredAndExtra
       BuildRuleParams buildRuleParams,
       SourcePathRuleFinder ruleFinder,
       HaskellSources sources,
-      final Tool haddockTool,
+      Tool haddockTool,
       ImmutableList<String> haddockFlags,
       ImmutableList<String> compilerFlags,
       ImmutableList<String> linkerFlags,
@@ -374,7 +374,7 @@ public class HaskellHaddockLibRule extends AbstractBuildRuleWithDeclaredAndExtra
     }
   }
 
-  public static enum Type {
+  public enum Type {
     HTML,
     HOOGLE
   }
diff --git a/src/com/facebook/buck/haskell/HaskellHaddockRule.java b/src/com/facebook/buck/haskell/HaskellHaddockRule.java
index 8e04d1e01f..b512a8a7ff 100644
--- a/src/com/facebook/buck/haskell/HaskellHaddockRule.java
+++ b/src/com/facebook/buck/haskell/HaskellHaddockRule.java
@@ -81,7 +81,7 @@ public class HaskellHaddockRule extends AbstractBuildRuleWithDeclaredAndExtraDep
       ProjectFilesystem projectFilesystem,
       BuildRuleParams buildRuleParams,
       SourcePathRuleFinder ruleFinder,
-      final Tool haddockTool,
+      Tool haddockTool,
       ImmutableList<String> flags,
       ImmutableSet<HaskellHaddockInput> inputs) {
     ImmutableSet.Builder<SourcePath> ifacesBuilder = ImmutableSet.builder();
diff --git a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java
index e2c5ad5843..72bbc95ce3 100644
--- a/src/com/facebook/buck/haskell/HaskellLibraryDescription.java
+++ b/src/com/facebook/buck/haskell/HaskellLibraryDescription.java
@@ -490,9 +490,9 @@ public class HaskellLibraryDescription
 
     // Collect all Haskell deps
     ImmutableSet.Builder<SourcePath> haddockInterfaces = ImmutableSet.builder();
-    final ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =
+    ImmutableSortedMap.Builder<String, HaskellPackage> packagesBuilder =
         ImmutableSortedMap.naturalOrder();
-    final ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =
+    ImmutableSortedMap.Builder<String, HaskellPackage> exposedPackagesBuilder =
         ImmutableSortedMap.naturalOrder();
 
     // Traverse all deps to pull interfaces
@@ -659,14 +659,14 @@ public class HaskellLibraryDescription
       BuildRuleCreationContext context,
       BuildTarget buildTarget,
       BuildRuleParams params,
-      final HaskellLibraryDescriptionArg args) {
+      HaskellLibraryDescriptionArg args) {
     BuildRuleResolver resolver = context.getBuildRuleResolver();
     HaskellPlatformsProvider haskellPlatformsProvider = getHaskellPlatformsProvider();
     ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
     FlavorDomain<HaskellPlatform> platforms = haskellPlatformsProvider.getHaskellPlatforms();
 
     SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(resolver);
-    final SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);
+    SourcePathResolver pathResolver = DefaultSourcePathResolver.from(ruleFinder);
     CxxDeps allDeps =
         CxxDeps.builder().addDeps(args.getDeps()).addPlatformDeps(args.getPlatformDeps()).build();
 
diff --git a/src/com/facebook/buck/haskell/HaskellPackageRule.java b/src/com/facebook/buck/haskell/HaskellPackageRule.java
index 00737b9243..e361178a93 100644
--- a/src/com/facebook/buck/haskell/HaskellPackageRule.java
+++ b/src/com/facebook/buck/haskell/HaskellPackageRule.java
@@ -106,14 +106,14 @@ public class HaskellPackageRule extends AbstractBuildRuleWithDeclaredAndExtraDep
       ProjectFilesystem projectFilesystem,
       BuildRuleParams baseParams,
       SourcePathRuleFinder ruleFinder,
-      final Tool ghcPkg,
+      Tool ghcPkg,
       HaskellVersion haskellVersion,
       Linker.LinkableDepType depType,
       HaskellPackageInfo packageInfo,
-      final ImmutableSortedMap<String, HaskellPackage> depPackages,
+      ImmutableSortedMap<String, HaskellPackage> depPackages,
       ImmutableSortedSet<String> modules,
-      final ImmutableSortedSet<SourcePath> libraries,
-      final ImmutableSortedSet<SourcePath> interfaces,
+      ImmutableSortedSet<SourcePath> libraries,
+      ImmutableSortedSet<SourcePath> interfaces,
       ImmutableSortedSet<SourcePath> objects) {
     Supplier<ImmutableSortedSet<BuildRule>> declaredDeps =
         MoreSuppliers.memoize(
@@ -222,7 +222,7 @@ public class HaskellPackageRule extends AbstractBuildRuleWithDeclaredAndExtraDep
                 context.getBuildCellRootPath(), getProjectFilesystem(), scratchDir)));
 
     // Setup the package DB directory.
-    final Path packageDb = getPackageDb();
+    Path packageDb = getPackageDb();
     steps.add(
         RmStep.of(
                 BuildCellRelativePath.fromCellRelativePath(
diff --git a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java
index 9bb4ba7b42..41d93a069c 100644
--- a/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java
+++ b/src/com/facebook/buck/haskell/HaskellPrebuiltLibraryDescription.java
@@ -61,7 +61,7 @@ public class HaskellPrebuiltLibraryDescription
       BuildRuleCreationContext context,
       BuildTarget buildTarget,
       BuildRuleParams params,
-      final HaskellPrebuiltLibraryDescriptionArg args) {
+      HaskellPrebuiltLibraryDescriptionArg args) {
     BuildRuleResolver resolver = context.getBuildRuleResolver();
     return new PrebuiltHaskellLibrary(buildTarget, context.getProjectFilesystem(), params) {
 
diff --git a/src/com/facebook/buck/httpserver/ArtifactCacheHandler.java b/src/com/facebook/buck/httpserver/ArtifactCacheHandler.java
index 4550856e73..be889cf1b4 100644
--- a/src/com/facebook/buck/httpserver/ArtifactCacheHandler.java
+++ b/src/com/facebook/buck/httpserver/ArtifactCacheHandler.java
@@ -35,7 +35,6 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.file.Path;
 import java.util.Optional;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Request;
@@ -60,7 +59,7 @@ public class ArtifactCacheHandler extends AbstractHandler {
   @Override
   public void handle(
       String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
-      throws IOException, ServletException {
+      throws IOException {
     try {
       int status = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
       String method = baseRequest.getMethod();
@@ -107,7 +106,7 @@ public class ArtifactCacheHandler extends AbstractHandler {
         return HttpServletResponse.SC_NOT_FOUND;
       }
 
-      final Path tempFinal = temp;
+      Path tempFinal = temp;
       HttpArtifactCacheBinaryProtocol.FetchResponse fetchResponse =
           new HttpArtifactCacheBinaryProtocol.FetchResponse(
               ImmutableSet.of(ruleKey),
diff --git a/src/com/facebook/buck/httpserver/IndexHandlerDelegate.java b/src/com/facebook/buck/httpserver/IndexHandlerDelegate.java
index 62a49a7191..c5073cbbc9 100644
--- a/src/com/facebook/buck/httpserver/IndexHandlerDelegate.java
+++ b/src/com/facebook/buck/httpserver/IndexHandlerDelegate.java
@@ -18,7 +18,6 @@ package com.facebook.buck.httpserver;
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.io.Resources;
-import java.io.IOException;
 import java.net.URL;
 import javax.annotation.Nullable;
 import org.eclipse.jetty.server.Request;
@@ -33,7 +32,7 @@ class IndexHandlerDelegate implements TemplateHandlerDelegate {
 
   @Nullable
   @Override
-  public ImmutableMap<String, Object> getDataForRequest(Request baseRequest) throws IOException {
+  public ImmutableMap<String, Object> getDataForRequest(Request baseRequest) {
     return ImmutableMap.of();
   }
 
diff --git a/src/com/facebook/buck/httpserver/StaticResourcesHandler.java b/src/com/facebook/buck/httpserver/StaticResourcesHandler.java
index ab0be4afd5..14296eb767 100644
--- a/src/com/facebook/buck/httpserver/StaticResourcesHandler.java
+++ b/src/com/facebook/buck/httpserver/StaticResourcesHandler.java
@@ -22,7 +22,6 @@ import com.google.common.io.ByteStreams;
 import com.google.common.net.MediaType;
 import java.io.IOException;
 import java.io.InputStream;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Request;
@@ -41,7 +40,7 @@ class StaticResourcesHandler extends AbstractHandler {
   @Override
   public void handle(
       String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
-      throws IOException, ServletException {
+      throws IOException {
     if (!""GET"".equals(request.getMethod())) {
       Responses.writeFailedResponse(baseRequest, response);
       return;
diff --git a/src/com/facebook/buck/httpserver/StreamingWebSocketServlet.java b/src/com/facebook/buck/httpserver/StreamingWebSocketServlet.java
index c10e628732..77b9c08c11 100644
--- a/src/com/facebook/buck/httpserver/StreamingWebSocketServlet.java
+++ b/src/com/facebook/buck/httpserver/StreamingWebSocketServlet.java
@@ -34,7 +34,7 @@ public class StreamingWebSocketServlet extends WebSocketServlet {
   private final Set<MyWebSocket> connections;
 
   public StreamingWebSocketServlet() {
-    this.connections = Collections.newSetFromMap(Maps.<MyWebSocket, Boolean>newConcurrentMap());
+    this.connections = Collections.newSetFromMap(Maps.newConcurrentMap());
   }
 
   @Override
diff --git a/src/com/facebook/buck/httpserver/TemplateHandler.java b/src/com/facebook/buck/httpserver/TemplateHandler.java
index 2676fb7eb5..f7bae97d8a 100644
--- a/src/com/facebook/buck/httpserver/TemplateHandler.java
+++ b/src/com/facebook/buck/httpserver/TemplateHandler.java
@@ -21,7 +21,6 @@ import com.google.common.net.MediaType;
 import java.io.IOException;
 import java.util.Map;
 import javax.annotation.Nullable;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Handler;
@@ -58,7 +57,7 @@ class TemplateHandler extends AbstractHandler {
   @Override
   public void handle(
       String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
-      throws IOException, ServletException {
+      throws IOException {
     String html = createHtmlForResponse(baseRequest);
     if (html != null) {
       Responses.writeSuccessfulResponse(html, MediaType.HTML_UTF_8, baseRequest, response);
diff --git a/src/com/facebook/buck/httpserver/TraceDataHandler.java b/src/com/facebook/buck/httpserver/TraceDataHandler.java
index befa0fcc53..43ff77961b 100644
--- a/src/com/facebook/buck/httpserver/TraceDataHandler.java
+++ b/src/com/facebook/buck/httpserver/TraceDataHandler.java
@@ -27,7 +27,6 @@ import java.io.Writer;
 import java.util.Iterator;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.eclipse.jetty.server.Request;
@@ -49,7 +48,7 @@ class TraceDataHandler extends AbstractHandler {
   @Override
   public void handle(
       String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
-      throws IOException, ServletException {
+      throws IOException {
     if (""GET"".equals(baseRequest.getMethod())) {
       doGet(baseRequest, response);
     } else {
diff --git a/src/com/facebook/buck/httpserver/WebServerBuckEventListener.java b/src/com/facebook/buck/httpserver/WebServerBuckEventListener.java
index 5e8e7bb8df..590032df0f 100644
--- a/src/com/facebook/buck/httpserver/WebServerBuckEventListener.java
+++ b/src/com/facebook/buck/httpserver/WebServerBuckEventListener.java
@@ -38,7 +38,7 @@ import com.google.common.eventbus.Subscribe;
 public class WebServerBuckEventListener implements BuckEventListener {
   private final StreamingWebSocketServlet streamingWebSocketServlet;
 
-  WebServerBuckEventListener(final WebServer webServer) {
+  WebServerBuckEventListener(WebServer webServer) {
     this.streamingWebSocketServlet = webServer.getStreamingWebSocketServlet();
   }
 
diff --git a/src/com/facebook/buck/ide/intellij/DefaultIjLibraryFactory.java b/src/com/facebook/buck/ide/intellij/DefaultIjLibraryFactory.java
index 940995e068..7d25c0f3b6 100644
--- a/src/com/facebook/buck/ide/intellij/DefaultIjLibraryFactory.java
+++ b/src/com/facebook/buck/ide/intellij/DefaultIjLibraryFactory.java
@@ -108,7 +108,7 @@ class DefaultIjLibraryFactory extends IjLibraryFactory {
     return Optional.ofNullable(rule);
   }
 
-  private Optional<IjLibrary> createLibrary(final TargetNode<?, ?> targetNode) {
+  private Optional<IjLibrary> createLibrary(TargetNode<?, ?> targetNode) {
     return getRule(targetNode)
         .map(
             rule -> {
diff --git a/src/com/facebook/buck/ide/intellij/IJProjectCleaner.java b/src/com/facebook/buck/ide/intellij/IJProjectCleaner.java
index 773f1753e3..51b05823de 100644
--- a/src/com/facebook/buck/ide/intellij/IJProjectCleaner.java
+++ b/src/com/facebook/buck/ide/intellij/IJProjectCleaner.java
@@ -100,15 +100,15 @@ public class IJProjectCleaner {
   }
 
   public void clean(
-      final BuckConfig buckConfig,
-      final Path librariesXmlBase,
-      final boolean runPostGenerationCleaner,
-      final boolean removeOldLibraries) {
+      BuckConfig buckConfig,
+      Path librariesXmlBase,
+      boolean runPostGenerationCleaner,
+      boolean removeOldLibraries) {
     if (!runPostGenerationCleaner && !removeOldLibraries) {
       return;
     }
 
-    final Set<File> buckDirectories = new HashSet<>();
+    Set<File> buckDirectories = new HashSet<>();
     buckDirectories.add(
         convertPathToFile(
             projectFilesystem.resolve(projectFilesystem.getBuckPaths().getBuckOut())));
diff --git a/src/com/facebook/buck/ide/intellij/IjModuleGraph.java b/src/com/facebook/buck/ide/intellij/IjModuleGraph.java
index c244a39255..088e75eb47 100644
--- a/src/com/facebook/buck/ide/intellij/IjModuleGraph.java
+++ b/src/com/facebook/buck/ide/intellij/IjModuleGraph.java
@@ -63,7 +63,7 @@ public class IjModuleGraph {
   }
 
   public ImmutableMap<IjModule, DependencyType> getDependentModulesFor(IjModule source) {
-    final ImmutableMap<IjProjectElement, DependencyType> deps = getDepsFor(source);
+    ImmutableMap<IjProjectElement, DependencyType> deps = getDepsFor(source);
     return deps.keySet()
         .stream()
         .filter(dep -> dep instanceof IjModule)
@@ -74,7 +74,7 @@ public class IjModuleGraph {
   }
 
   public ImmutableMap<IjLibrary, DependencyType> getDependentLibrariesFor(IjModule source) {
-    final ImmutableMap<IjProjectElement, DependencyType> deps = getDepsFor(source);
+    ImmutableMap<IjProjectElement, DependencyType> deps = getDepsFor(source);
     return deps.keySet()
         .stream()
         .filter(dep -> dep instanceof IjLibrary)
diff --git a/src/com/facebook/buck/ide/intellij/IjModuleGraphFactory.java b/src/com/facebook/buck/ide/intellij/IjModuleGraphFactory.java
index c6ce7e8c48..fb16901ee8 100644
--- a/src/com/facebook/buck/ide/intellij/IjModuleGraphFactory.java
+++ b/src/com/facebook/buck/ide/intellij/IjModuleGraphFactory.java
@@ -62,7 +62,7 @@ public final class IjModuleGraphFactory {
       TargetGraph targetGraph,
       IjModuleFactory moduleFactory,
       AggregationModuleFactory aggregationModuleFactory,
-      final int minimumPathDepth,
+      int minimumPathDepth,
       ImmutableSet<String> ignoredTargetLabels) {
 
     Stream<TargetNode<?, ?>> nodes =
@@ -162,11 +162,11 @@ public final class IjModuleGraphFactory {
   }
 
   private static ImmutableSet<IjProjectElement> getProjectElementFromBuildTargets(
-      final TargetGraph targetGraph,
-      final IjLibraryFactory libraryFactory,
-      final ImmutableMap<BuildTarget, IjModule> rulesToModules,
-      final IjModule module,
-      final Stream<BuildTarget> buildTargetStream) {
+      TargetGraph targetGraph,
+      IjLibraryFactory libraryFactory,
+      ImmutableMap<BuildTarget, IjModule> rulesToModules,
+      IjModule module,
+      Stream<BuildTarget> buildTargetStream) {
     return buildTargetStream
         .filter(
             input -> {
@@ -205,14 +205,14 @@ public final class IjModuleGraphFactory {
    *     and Ma contains Ta and Mb contains Tb.
    */
   public static IjModuleGraph from(
-      final ProjectFilesystem projectFilesystem,
-      final IjProjectConfig projectConfig,
-      final TargetGraph targetGraph,
-      final IjLibraryFactory libraryFactory,
-      final IjModuleFactory moduleFactory,
-      final AggregationModuleFactory aggregationModuleFactory) {
+      ProjectFilesystem projectFilesystem,
+      IjProjectConfig projectConfig,
+      TargetGraph targetGraph,
+      IjLibraryFactory libraryFactory,
+      IjModuleFactory moduleFactory,
+      AggregationModuleFactory aggregationModuleFactory) {
     ImmutableSet<String> ignoredTargetLabels = projectConfig.getIgnoredTargetLabels();
-    final ImmutableMap<BuildTarget, IjModule> rulesToModules =
+    ImmutableMap<BuildTarget, IjModule> rulesToModules =
         createModules(
             projectFilesystem,
             projectConfig,
@@ -221,16 +221,16 @@ public final class IjModuleGraphFactory {
             aggregationModuleFactory,
             projectConfig.getAggregationMode().getGraphMinimumDepth(targetGraph.getNodes().size()),
             ignoredTargetLabels);
-    final ExportedDepsClosureResolver exportedDepsClosureResolver =
+    ExportedDepsClosureResolver exportedDepsClosureResolver =
         new ExportedDepsClosureResolver(targetGraph, ignoredTargetLabels);
-    final TransitiveDepsClosureResolver transitiveDepsClosureResolver =
+    TransitiveDepsClosureResolver transitiveDepsClosureResolver =
         new TransitiveDepsClosureResolver(targetGraph, ignoredTargetLabels);
     ImmutableMap.Builder<IjProjectElement, ImmutableMap<IjProjectElement, DependencyType>>
         depsBuilder = ImmutableMap.builder();
-    final Set<IjLibrary> referencedLibraries = new HashSet<>();
+    Set<IjLibrary> referencedLibraries = new HashSet<>();
     Optional<Path> extraCompileOutputRootPath = projectConfig.getExtraCompilerOutputModulesPath();
 
-    for (final IjModule module : ImmutableSet.copyOf(rulesToModules.values())) {
+    for (IjModule module : ImmutableSet.copyOf(rulesToModules.values())) {
       Map<IjProjectElement, DependencyType> moduleDeps = new LinkedHashMap<>();
 
       for (Map.Entry<BuildTarget, DependencyType> entry : module.getDependencies().entrySet()) {
diff --git a/src/com/facebook/buck/ide/intellij/IjProject.java b/src/com/facebook/buck/ide/intellij/IjProject.java
index 7c4b8dac72..42b5dcab73 100644
--- a/src/com/facebook/buck/ide/intellij/IjProject.java
+++ b/src/com/facebook/buck/ide/intellij/IjProject.java
@@ -71,7 +71,7 @@ public class IjProject {
    * @throws IOException
    */
   public ImmutableSet<BuildTarget> write() throws IOException {
-    final ImmutableSet.Builder<BuildTarget> requiredBuildTargets = ImmutableSet.builder();
+    ImmutableSet.Builder<BuildTarget> requiredBuildTargets = ImmutableSet.builder();
     IjLibraryFactory libraryFactory =
         new DefaultIjLibraryFactory(
             new DefaultIjLibraryFactoryResolver(
diff --git a/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java b/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java
index 8889debd7f..7e4d094f0e 100644
--- a/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java
+++ b/src/com/facebook/buck/ide/intellij/IjProjectCommandHelper.java
@@ -39,7 +39,6 @@ import com.facebook.buck.parser.PerBuildState;
 import com.facebook.buck.parser.TargetNodePredicateSpec;
 import com.facebook.buck.parser.TargetNodeSpec;
 import com.facebook.buck.parser.exceptions.BuildFileParseException;
-import com.facebook.buck.parser.exceptions.BuildTargetException;
 import com.facebook.buck.rules.ActionGraphAndResolver;
 import com.facebook.buck.rules.ActionGraphCache;
 import com.facebook.buck.rules.BuildRuleResolver;
@@ -227,7 +226,7 @@ public class IjProjectCommandHelper {
 
   private TargetGraph getProjectGraphForIde(
       ListeningExecutorService executor, ImmutableSet<BuildTarget> passedInTargets)
-      throws InterruptedException, BuildFileParseException, BuildTargetException, IOException {
+      throws InterruptedException, BuildFileParseException, IOException {
 
     if (passedInTargets.isEmpty()) {
       return parser
@@ -247,7 +246,7 @@ public class IjProjectCommandHelper {
   }
 
   /** Run intellij specific project generation actions. */
-  private ExitCode runIntellijProjectGenerator(final TargetGraphAndTargets targetGraphAndTargets)
+  private ExitCode runIntellijProjectGenerator(TargetGraphAndTargets targetGraphAndTargets)
       throws IOException, InterruptedException {
     ImmutableSet<BuildTarget> requiredBuildTargets =
         writeProjectAndGetRequiredBuildTargets(targetGraphAndTargets);
@@ -321,7 +320,7 @@ public class IjProjectCommandHelper {
   }
 
   private ImmutableSet<BuildTarget> getTargetsWithAnnotations(
-      final TargetGraph targetGraph, ImmutableSet<BuildTarget> buildTargets) {
+      TargetGraph targetGraph, ImmutableSet<BuildTarget> buildTargets) {
     return buildTargets
         .stream()
         .filter(
@@ -381,8 +380,7 @@ public class IjProjectCommandHelper {
       ImmutableSet<BuildTarget> graphRoots,
       boolean needsFullRecursiveParse,
       ListeningExecutorService executor)
-      throws IOException, InterruptedException, BuildFileParseException, BuildTargetException,
-          VersionException {
+      throws IOException, InterruptedException, BuildFileParseException, VersionException {
 
     boolean isWithTests = isWithTests();
     ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();
diff --git a/src/com/facebook/buck/ide/intellij/IjProjectTemplateDataPreparer.java b/src/com/facebook/buck/ide/intellij/IjProjectTemplateDataPreparer.java
index 1bf1ccf8b4..b9ea169631 100644
--- a/src/com/facebook/buck/ide/intellij/IjProjectTemplateDataPreparer.java
+++ b/src/com/facebook/buck/ide/intellij/IjProjectTemplateDataPreparer.java
@@ -190,10 +190,10 @@ public class IjProjectTemplateDataPreparer {
   }
 
   private ImmutableList<ContentRoot> createContentRoots(
-      final IjModule module,
+      IjModule module,
       Path contentRootPath,
       ImmutableCollection<IjFolder> folders,
-      final Path moduleLocationBasePath) {
+      Path moduleLocationBasePath) {
     ImmutableListMultimap<Path, IjFolder> simplifiedFolders =
         sourceRootSimplifier.simplify(
             contentRootPath.toString().isEmpty() ? 0 : contentRootPath.getNameCount(),
@@ -227,18 +227,17 @@ public class IjProjectTemplateDataPreparer {
     return contentRootsBuilder.build();
   }
 
-  public ImmutableCollection<IjFolder> createExcludes(final IjModule module) throws IOException {
-    final Path moduleBasePath = module.getModuleBasePath();
+  public ImmutableCollection<IjFolder> createExcludes(IjModule module) throws IOException {
+    Path moduleBasePath = module.getModuleBasePath();
     if (!projectFilesystem.exists(moduleBasePath)) {
       return ImmutableList.of();
     }
-    final ImmutableList.Builder<IjFolder> excludesBuilder = ImmutableList.builder();
+    ImmutableList.Builder<IjFolder> excludesBuilder = ImmutableList.builder();
     projectFilesystem.walkRelativeFileTree(
         moduleBasePath,
         new FileVisitor<Path>() {
           @Override
-          public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
-              throws IOException {
+          public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
             // This is another module that's nested in this one. The entire subtree will be handled
             // When we create excludes for that module.
             if (filesystemTraversalBoundaryPaths.contains(dir) && !moduleBasePath.equals(dir)) {
@@ -258,18 +257,17 @@ public class IjProjectTemplateDataPreparer {
           }
 
           @Override
-          public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
-              throws IOException {
+          public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
             return FileVisitResult.CONTINUE;
           }
 
           @Override
-          public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
+          public FileVisitResult visitFileFailed(Path file, IOException exc) {
             return FileVisitResult.CONTINUE;
           }
 
           @Override
-          public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
+          public FileVisitResult postVisitDirectory(Path dir, IOException exc) {
             return FileVisitResult.CONTINUE;
           }
         },
@@ -294,7 +292,7 @@ public class IjProjectTemplateDataPreparer {
   public ImmutableList<ContentRoot> getContentRoots(IjModule module) throws IOException {
     Path moduleBasePath = module.getModuleBasePath();
     Path moduleLocation = module.getModuleImlFilePath();
-    final Path moduleLocationBasePath =
+    Path moduleLocationBasePath =
         (moduleLocation.getParent() == null) ? Paths.get("""") : moduleLocation.getParent();
     ImmutableList<IjFolder> sourcesAndExcludes =
         Stream.concat(module.getFolders().stream(), createExcludes(module).stream())
@@ -303,7 +301,7 @@ public class IjProjectTemplateDataPreparer {
     return createContentRoots(module, moduleBasePath, sourcesAndExcludes, moduleLocationBasePath);
   }
 
-  public ImmutableSet<IjSourceFolder> getGeneratedSourceFolders(final IjModule",Apply IntelliJ cleanup actions . . Test Plan : CI .,Remove unnecessary final keywords.,"The commit message should be:

""Remove final keyword from method parameters and return types""

This commit message accurately reflects the changes made in the code, which involve removing the `final` keyword from method parameters and return types.","This commit updates several classes in the Buck build system, primarily in the Haskell and IntelliJ IDEA integration code. It removes the 'final' modifier from many method parameters and local variables, which allows them to be reassigned within the method. It also updates some imports and removes unnecessary ones. Additionally, it fixes a bug in the ArtifactCacheHandler class by adding a missing '@Nullable' annotation. Overall, these changes should not have any significant impact on the functionality of the Buck build system.","""Removed unnecessary final keyword declarations and redundant imports to improve code readability and maintainability."""
"diff --git a/core/src/main/java/org/elasticsearch/ingest/IngestService.java b/core/src/main/java/org/elasticsearch/ingest/IngestService.java
index c540d25334c..07e2aa1fe51 100644
--- a/core/src/main/java/org/elasticsearch/ingest/IngestService.java
+++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java
@@ -24,7 +24,6 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
 
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.env.Environment;
@@ -43,9 +42,11 @@ public class IngestService {
     public IngestService(Settings settings, ThreadPool threadPool,
                          Environment env, ScriptService scriptService, List<IngestPlugin> ingestPlugins) {
         final TemplateService templateService = new InternalTemplateService(scriptService);
+        Processor.Parameters parameters = new Processor.Parameters(env, scriptService, templateService,
+                threadPool.getThreadContext());
         Map<String, Processor.Factory> processorFactories = new HashMap<>();
         for (IngestPlugin ingestPlugin : ingestPlugins) {
-            Map<String, Processor.Factory> newProcessors = ingestPlugin.getProcessors(env, scriptService, templateService);
+            Map<String, Processor.Factory> newProcessors = ingestPlugin.getProcessors(parameters);
             for (Map.Entry<String, Processor.Factory> entry : newProcessors.entrySet()) {
                 if (processorFactories.put(entry.getKey(), entry.getValue()) != null) {
                     throw new IllegalArgumentException(""Ingest processor ["" + entry.getKey() + ""] is already registered"");
diff --git a/core/src/main/java/org/elasticsearch/ingest/Processor.java b/core/src/main/java/org/elasticsearch/ingest/Processor.java
index f018f91e79c..ef1cd882d22 100644
--- a/core/src/main/java/org/elasticsearch/ingest/Processor.java
+++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java
@@ -19,6 +19,10 @@
 
 package org.elasticsearch.ingest;
 
+import org.elasticsearch.common.util.concurrent.ThreadContext;
+import org.elasticsearch.env.Environment;
+import org.elasticsearch.script.ScriptService;
+
 import java.util.Map;
 
 /**
@@ -60,4 +64,41 @@ public interface Processor {
         Processor create(Map<String, Processor.Factory> processorFactories, String tag,
                          Map<String, Object> config) throws Exception;
     }
+
+    /**
+     * Infrastructure class that holds services that can be used by processor factories to create processor instances
+     * and that gets passed around to all {@link org.elasticsearch.plugins.IngestPlugin}s.
+     */
+    class Parameters {
+
+        /**
+         * Useful to provide access to the node's environment like config directory to processor factories.
+         */
+        public final Environment env;
+
+        /**
+         * Provides processors script support.
+         */
+        public final ScriptService scriptService;
+
+        /**
+         * Provides template support to pipeline settings.
+         */
+        public final TemplateService templateService;
+
+        /**
+         * Allows processors to read headers set by {@link org.elasticsearch.action.support.ActionFilter}
+         * instances that have run prior to in ingest.
+         */
+        public final ThreadContext threadContext;
+
+        public Parameters(Environment env, ScriptService scriptService, TemplateService templateService,
+                          ThreadContext threadContext) {
+            this.env = env;
+            this.scriptService = scriptService;
+            this.templateService = templateService;
+            this.threadContext = threadContext;
+        }
+
+    }
 }
diff --git a/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java b/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java
index c1d873c8d6e..74c83a67d51 100644
--- a/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java
+++ b/core/src/main/java/org/elasticsearch/plugins/IngestPlugin.java
@@ -22,11 +22,7 @@ package org.elasticsearch.plugins;
 import java.util.Collections;
 import java.util.Map;
 
-import org.elasticsearch.cluster.service.ClusterService;
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.ingest.Processor;
-import org.elasticsearch.ingest.TemplateService;
-import org.elasticsearch.script.ScriptService;
 
 /**
  * An extension point for {@link Plugin} implementations to add custom ingest processors
@@ -40,8 +36,7 @@ public interface IngestPlugin {
      * in pipeline configurations, and the value is a {@link org.elasticsearch.ingest.Processor.Factory}
      * to create the processor from a given pipeline configuration.
      */
-    default Map<String, Processor.Factory> getProcessors(
-        Environment env, ScriptService scriptService, TemplateService templateService) {
+    default Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
         return Collections.emptyMap();
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/ingest/IngestServiceTests.java b/core/src/test/java/org/elasticsearch/ingest/IngestServiceTests.java
index e44dc42cbe8..08cde7e04d8 100644
--- a/core/src/test/java/org/elasticsearch/ingest/IngestServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/ingest/IngestServiceTests.java
@@ -24,29 +24,31 @@ import java.util.Collections;
 import java.util.Map;
 
 import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.plugins.IngestPlugin;
-import org.elasticsearch.script.ScriptService;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.threadpool.ThreadPool;
+import org.mockito.Mockito;
 
 public class IngestServiceTests extends ESTestCase {
     private final IngestPlugin DUMMY_PLUGIN = new IngestPlugin() {
         @Override
-        public Map<String, Processor.Factory> getProcessors(Environment env, ScriptService scriptService, TemplateService templateService) {
+        public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
             return Collections.singletonMap(""foo"", (factories, tag, config) -> null);
         }
     };
 
     public void testIngestPlugin() {
-        IngestService ingestService = new IngestService(Settings.EMPTY, null, null, null, Collections.singletonList(DUMMY_PLUGIN));
+        ThreadPool tp = Mockito.mock(ThreadPool.class);
+        IngestService ingestService = new IngestService(Settings.EMPTY, tp, null, null, Collections.singletonList(DUMMY_PLUGIN));
         Map<String, Processor.Factory> factories = ingestService.getPipelineStore().getProcessorFactories();
         assertTrue(factories.containsKey(""foo""));
         assertEquals(1, factories.size());
     }
 
     public void testIngestPluginDuplicate() {
+        ThreadPool tp = Mockito.mock(ThreadPool.class);
         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->
-            new IngestService(Settings.EMPTY, null, null, null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN))
+            new IngestService(Settings.EMPTY, tp, null, null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN))
         );
         assertTrue(e.getMessage(), e.getMessage().contains(""already registered""));
     }
diff --git a/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java
index 063ccac2d45..c89f6164de7 100644
--- a/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java
+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/IngestCommonPlugin.java
@@ -28,12 +28,9 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.ingest.Processor;
-import org.elasticsearch.ingest.TemplateService;
 import org.elasticsearch.plugins.IngestPlugin;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.ScriptService;
 
 public class IngestCommonPlugin extends Plugin implements IngestPlugin {
 
@@ -44,14 +41,13 @@ public class IngestCommonPlugin extends Plugin implements IngestPlugin {
     }
 
     @Override
-    public Map<String, Processor.Factory> getProcessors(Environment env, ScriptService scriptService,
-                                                        TemplateService templateService) {
+    public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
         Map<String, Processor.Factory> processors = new HashMap<>();
         processors.put(DateProcessor.TYPE, new DateProcessor.Factory());
-        processors.put(SetProcessor.TYPE, new SetProcessor.Factory(templateService));
-        processors.put(AppendProcessor.TYPE, new AppendProcessor.Factory(templateService));
+        processors.put(SetProcessor.TYPE, new SetProcessor.Factory(parameters.templateService));
+        processors.put(AppendProcessor.TYPE, new AppendProcessor.Factory(parameters.templateService));
         processors.put(RenameProcessor.TYPE, new RenameProcessor.Factory());
-        processors.put(RemoveProcessor.TYPE, new RemoveProcessor.Factory(templateService));
+        processors.put(RemoveProcessor.TYPE, new RemoveProcessor.Factory(parameters.templateService));
         processors.put(SplitProcessor.TYPE, new SplitProcessor.Factory());
         processors.put(JoinProcessor.TYPE, new JoinProcessor.Factory());
         processors.put(UppercaseProcessor.TYPE, new UppercaseProcessor.Factory());
@@ -59,12 +55,12 @@ public class IngestCommonPlugin extends Plugin implements IngestPlugin {
         processors.put(TrimProcessor.TYPE, new TrimProcessor.Factory());
         processors.put(ConvertProcessor.TYPE, new ConvertProcessor.Factory());
         processors.put(GsubProcessor.TYPE, new GsubProcessor.Factory());
-        processors.put(FailProcessor.TYPE, new FailProcessor.Factory(templateService));
+        processors.put(FailProcessor.TYPE, new FailProcessor.Factory(parameters.templateService));
         processors.put(ForEachProcessor.TYPE, new ForEachProcessor.Factory());
         processors.put(DateIndexNameProcessor.TYPE, new DateIndexNameProcessor.Factory());
         processors.put(SortProcessor.TYPE, new SortProcessor.Factory());
         processors.put(GrokProcessor.TYPE, new GrokProcessor.Factory(builtinPatterns));
-        processors.put(ScriptProcessor.TYPE, new ScriptProcessor.Factory(scriptService));
+        processors.put(ScriptProcessor.TYPE, new ScriptProcessor.Factory(parameters.scriptService));
         return Collections.unmodifiableMap(processors);
     }
 
diff --git a/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/IngestAttachmentPlugin.java b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/IngestAttachmentPlugin.java
index eaba639255b..7846f0ad28c 100644
--- a/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/IngestAttachmentPlugin.java
+++ b/plugins/ingest-attachment/src/main/java/org/elasticsearch/ingest/attachment/IngestAttachmentPlugin.java
@@ -22,18 +22,14 @@ package org.elasticsearch.ingest.attachment;
 import java.util.Collections;
 import java.util.Map;
 
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.ingest.Processor;
-import org.elasticsearch.ingest.TemplateService;
 import org.elasticsearch.plugins.IngestPlugin;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.ScriptService;
 
 public class IngestAttachmentPlugin extends Plugin implements IngestPlugin {
 
     @Override
-    public Map<String, Processor.Factory> getProcessors(
-        Environment env, ScriptService scriptService, TemplateService templateService) {
+    public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
         return Collections.singletonMap(AttachmentProcessor.TYPE, new AttachmentProcessor.Factory());
     }
 }
diff --git a/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java
index 52fbad2c90f..2190036c7fc 100644
--- a/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java
+++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java
@@ -35,25 +35,20 @@ import java.util.zip.GZIPInputStream;
 
 import com.maxmind.geoip2.DatabaseReader;
 import org.apache.lucene.util.IOUtils;
-import org.elasticsearch.cluster.service.ClusterService;
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.ingest.Processor;
-import org.elasticsearch.ingest.TemplateService;
 import org.elasticsearch.plugins.IngestPlugin;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.ScriptService;
 
 public class IngestGeoIpPlugin extends Plugin implements IngestPlugin, Closeable {
 
     private Map<String, DatabaseReader> databaseReaders;
 
     @Override
-    public Map<String, Processor.Factory> getProcessors(
-        Environment env, ScriptService scriptService, TemplateService templateService) {
+    public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
         if (databaseReaders != null) {
             throw new IllegalStateException(""called onModule twice for geoip plugin!!"");
         }
-        Path geoIpConfigDirectory = env.configFile().resolve(""ingest-geoip"");
+        Path geoIpConfigDirectory = parameters.env.configFile().resolve(""ingest-geoip"");
         try {
             databaseReaders = loadDatabaseReaders(geoIpConfigDirectory);
         } catch (IOException e) {
diff --git a/plugins/ingest-user-agent/src/main/java/org/elasticsearch/ingest/useragent/IngestUserAgentPlugin.java b/plugins/ingest-user-agent/src/main/java/org/elasticsearch/ingest/useragent/IngestUserAgentPlugin.java
index 005f24079ab..ce82d6e1c4d 100644
--- a/plugins/ingest-user-agent/src/main/java/org/elasticsearch/ingest/useragent/IngestUserAgentPlugin.java
+++ b/plugins/ingest-user-agent/src/main/java/org/elasticsearch/ingest/useragent/IngestUserAgentPlugin.java
@@ -20,14 +20,9 @@
 package org.elasticsearch.ingest.useragent;
 
 import org.elasticsearch.common.settings.Setting;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.ingest.Processor;
-import org.elasticsearch.ingest.TemplateService;
-import org.elasticsearch.node.NodeModule;
 import org.elasticsearch.plugins.IngestPlugin;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.ScriptService;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -48,16 +43,15 @@ public class IngestUserAgentPlugin extends Plugin implements IngestPlugin {
     static final String DEFAULT_PARSER_NAME = ""_default_"";
 
     @Override
-    public Map<String, Processor.Factory> getProcessors(
-        Environment env, ScriptService scriptService, TemplateService templateService) {
-        Path userAgentConfigDirectory = env.configFile().resolve(""ingest-user-agent"");
+    public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
+        Path userAgentConfigDirectory = parameters.env.configFile().resolve(""ingest-user-agent"");
 
         if (Files.exists(userAgentConfigDirectory) == false && Files.isDirectory(userAgentConfigDirectory)) {
             throw new IllegalStateException(
                 ""the user agent directory ["" + userAgentConfigDirectory + ""] containing the regex file doesn't exist"");
         }
 
-        long cacheSize = CACHE_SIZE_SETTING.get(env.settings());
+        long cacheSize = CACHE_SIZE_SETTING.get(parameters.env.settings());
         Map<String, UserAgentParser> userAgentParsers;
         try {
             userAgentParsers = createUserAgentParsers(userAgentConfigDirectory, new UserAgentCache(cacheSize));
diff --git a/test/framework/src/main/java/org/elasticsearch/ingest/IngestTestPlugin.java b/test/framework/src/main/java/org/elasticsearch/ingest/IngestTestPlugin.java
index 53e8f026788..dd38a0707b4 100644
--- a/test/framework/src/main/java/org/elasticsearch/ingest/IngestTestPlugin.java
+++ b/test/framework/src/main/java/org/elasticsearch/ingest/IngestTestPlugin.java
@@ -22,18 +22,15 @@ package org.elasticsearch.ingest;
 import java.util.Collections;
 import java.util.Map;
 
-import org.elasticsearch.env.Environment;
 import org.elasticsearch.plugins.IngestPlugin;
 import org.elasticsearch.plugins.Plugin;
-import org.elasticsearch.script.ScriptService;
 
 /**
  * Adds an ingest processor to be used in tests.
  */
 public class IngestTestPlugin extends Plugin implements IngestPlugin {
     @Override
-    public Map<String, Processor.Factory> getProcessors(
-        Environment env, ScriptService scriptService, TemplateService templateService) {
+    public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {
         return Collections.singletonMap(""test"", (factories, tag, config) ->
             new TestProcessor(""id"", ""test"", doc -> {
                 doc.setFieldValue(""processed"", true);",Provide access to ThreadContext in ingest plugins .,"""Introduce Processor.Parameters to simplify ingest plugin registration""","""Refactor IngestService to use Processor.Parameters for plugin processors""","""Refactor IngestService to use Processor.Parameters for processor factories""

This commit introduces a new class `Processor.Parameters` that encapsulates the services required by processor factories to create processor instances. This class is used in the `IngestService` constructor and passed to all `IngestPlugin`s.

The `getProcessors` method in `IngestPlugin` interface is updated to accept `Processor.Parameters` as an argument instead of individual services.

Additionally, the `IngestService` constructor is updated to use the new `Processor.Parameters` object when getting processors from each `IngestPlugin`.

This change simplifies the constructor of `IngestService` and makes it easier to add new services required by processor factories in the future. It also makes the code more maintainable and easier to read by reducing the number of arguments passed to the `getProcessors` method.","Refactor `IngestPlugin` to use `Processor.Parameters` for passing dependencies like `Environment`, `ScriptService`, and `TemplateService`."
"diff --git a/src/test/java/com/rarchives/ripme/tst/AppTest.java b/src/test/java/com/rarchives/ripme/tst/AppTest.java
deleted file mode 100644
index fb9bc680..00000000
--- a/src/test/java/com/rarchives/ripme/tst/AppTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.rarchives.ripme.tst;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-public class AppTest extends TestCase {
-    /**
-     * Create the test case
-     *
-     * @param testName name of the test case
-     */
-    public AppTest(String testName) {
-        super(testName);
-    }
-
-    /**
-     * @return the suite of tests being tested
-     */
-    public static Test suite() {
-        return new TestSuite(AppTest.class);
-    }
-
-    /**
-     * Rigourous Test :-)
-     */
-    public void testApp() {
-        assertTrue(true);
-    }
-}",delete AppTest which is only true = true,"""Remove unused AppTest.java file""","""Removed AppTest.java test class""","""Deleted AppTest.java from src/test/java/com/rarchives/ripme/tst/""

This commit message indicates that the file AppTest.java has been removed from the specified directory. It's always a good practice to write clear and concise commit messages to help others understand the changes you've made.","""Deleted obsolete AppTest.java file from the test suite to clean up the project."""
"diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java
index 5219bbf59..f1fb8575b 100644
--- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -1357,9 +1357,10 @@ final class NameAnalyzer implements CompilerPass {
    */
   private void referenceAliases() {
 
-    // Minimize the number of connections in the graph by creating a connected cluster for
-    // names that are used to modify the alias and then assure there is at least one link to the
-    // cluster from the other alias names to the cluster.
+    // Minimize the number of connections in the graph by creating a connected
+    // cluster for names that are used to modify the object and then ensure
+    // there is at least one link to the cluster from the other names (which are
+    // removalable on there own) in the AliasSet.
 
     Set<AliasSet> sets = new HashSet<>(aliases.values());
     for (AliasSet set : sets) {
@@ -1377,13 +1378,16 @@ final class NameAnalyzer implements CompilerPass {
       }
 
       if (!required.isEmpty()) {
-        // link the required nodes to themselves
+        // link the required nodes together to form a cluster so that if one
+        // is needed, all are kept.
         for (DiGraphNode<JsName, RefType> node : required) {
           recordReference(node, first, RefType.REGULAR);
           recordReference(first, node, RefType.REGULAR);
         }
 
-        // link all the other aliases to the one of the required nodes
+        // link all the other aliases to the one of the required nodes, so
+        // that if they are kept only if referenced directly, but all the
+        // required nodes are kept if any are referenced.
         for (String key : set.names) {
           DiGraphNode<JsName, RefType> alias = getGraphNode(getName(key, false));
          ",Update some comments in NameAnalyzer .,"""Improve alias handling in NameAnalyzer by creating a connected cluster for required aliases and linking other aliases to the cluster.""","""Improve alias cluster formation in NameAnalyzer to ensure required nodes are kept together.""","""Refactor NameAnalyzer to clarify alias referencing strategy""

Explanation:
The provided code snippets show changes in the comments that explain the strategy for connecting nodes in the graph representing aliases. The updated comments aim to provide a clearer explanation of the approach used to minimize the number of connections in the graph and ensure that required alias names are preserved even when other aliases are removed.

In the updated version of the code, the comments have been expanded to better describe the purpose of the following steps:

1. Creating a connected cluster for names that are used to modify the object (previously referred to as ""alias"").
2. Ensuring there is at least one link to the cluster from the other names in the AliasSet.

The commit message should reflect the changes made to improve the clarity of the code's logic without altering its functionality.",Refactor and clarify comments in `referenceAliases` method to improve code readability and understanding.
"diff --git a/runners/java-fn-execution/pom.xml b/runners/java-fn-execution/pom.xml
index 7e23ddcc59..22eb3bee1f 100644
--- a/runners/java-fn-execution/pom.xml
+++ b/runners/java-fn-execution/pom.xml
@@ -32,20 +32,6 @@
 
   <packaging>jar</packaging>
 
-  <build>
-    <plugins>
-      <plugin>
-        <!--  Override Beam parent to allow Java8 -->
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.8</source>
-          <target>1.8</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
   <dependencies>
     <dependency>
       <groupId>org.apache.beam</groupId>
diff --git a/runners/pom.xml b/runners/pom.xml
index 814b3f11ee..091d51688e 100644
--- a/runners/pom.xml
+++ b/runners/pom.xml
@@ -59,15 +59,6 @@
         </plugins>
       </build>
     </profile>
-    <profile>
-      <id>java8</id>
-      <activation>
-        <jdk>[1.8,)</jdk>
-      </activation>
-      <modules>
-        <module>gearpump</module>
-      </modules>
-    </profile>
   </profiles>
 
   <build>
diff --git a/sdks/java/fn-execution/pom.xml b/sdks/java/fn-execution/pom.xml
index ca520c87d5..5d637fabbb 100644
--- a/sdks/java/fn-execution/pom.xml
+++ b/sdks/java/fn-execution/pom.xml
@@ -34,20 +34,6 @@
 
   <packaging>jar</packaging>
 
-  <build>
-    <plugins>
-      <plugin>
-        <!--  Override Beam parent to allow Java8 -->
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.8</source>
-          <target>1.8</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
   <dependencies>
     <dependency>
       <groupId>org.apache.beam</groupId>
diff --git a/sdks/java/harness/pom.xml b/sdks/java/harness/pom.xml
index 683011929a..58be3d6651 100644
--- a/sdks/java/harness/pom.xml
+++ b/sdks/java/harness/pom.xml
@@ -151,23 +151,6 @@
         </plugin>
       </plugins>
     </pluginManagement>
-
-    <plugins>
-      <plugin>
-        <!--  Override Beam parent to allow Java8 -->
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <source>1.8</source>
-          <target>1.8</target>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-      </plugin>
-    </plugins>
   </build>
 
   <dependencies>
diff --git a/sdks/java/java8tests/pom.xml b/sdks/java/java8tests/pom.xml
index 1fc84ed4c1..993aead6ed 100644
--- a/sdks/java/java8tests/pom.xml
+++ b/sdks/java/java8tests/pom.xml
@@ -34,18 +34,6 @@
     user.</description>
 
   <build>
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <artifactId>maven-compiler-plugin</artifactId>
-          <configuration>
-             <source>1.8</source>
-             <target>1.8</target>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-
     <plugins>
       <!-- Coverage analysis for unit tests. -->
       <plugin>
diff --git a/sdks/java/pom.xml b/sdks/java/pom.xml
index c6ab2349f4..451cb0ac59 100644
--- a/sdks/java/pom.xml
+++ b/sdks/java/pom.xml
@@ -46,18 +46,4 @@
     <module>javadoc</module> -->
     <module>nexmark</module>
   </modules>
-
-  <profiles>
-    <profile>
-      <id>java8-tests</id>
-      <activation>
-        <jdk>[1.8,)</jdk>
-      </activation>
-      <modules>
-        <module>harness</module>
-        <module>container</module>
-        <module>java8tests</module>
-      </modules>
-    </profile>
-  </profiles>
 </project>",Remove unneeded explicit Java 8 references on maven - compiler - plugin,"""Remove Java 8 specific configurations and profiles""","Remove Java 8 dependencies and configurations

This commit message accurately reflects the changes made in the diff, which involve removing Java 8 dependencies and configurations from various pom.xml files.","""Remove Java 8 specific configurations and profiles from Beam runners and SDK""

This commit removes the Maven compiler plugin configurations that were overriding the Beam parent to allow Java 8, as well as Java 8 specific profiles from the Beam runners and SDK. This suggests that the project is no longer supporting Java 8, or that Java 8 is now the default and no longer needs specific configurations.",Removed Java 8 specific plugin configurations and profiles from various Maven POM files.
"diff --git a/src/plugins/presence/changelog.html b/src/plugins/presence/changelog.html
index 8a01f0390..d557aa81a 100644
--- a/src/plugins/presence/changelog.html
+++ b/src/plugins/presence/changelog.html
@@ -44,8 +44,9 @@
 Presence Plugin Changelog
 </h1>
 
-<p><b>1.2.1</b> -- June ??, 2006</p>
+<p><b>1.3.0</b> -- July 10, 2006</p>
 <ul>
+    <li>Added support for probing presence of components.
     <li>Fixed minor problem in readme.html -- the example Apache redirect was incorrect.
 </ul>
 
diff --git a/src/plugins/presence/plugin.xml b/src/plugins/presence/plugin.xml
index 50f4329fd..e374fd91e 100644
--- a/src/plugins/presence/plugin.xml
+++ b/src/plugins/presence/plugin.xml
@@ -5,8 +5,8 @@
     <name>Presence Service</name>
     <description>Exposes presence information through HTTP.</description>
     <author>Jive Software</author>
-    <version>1.2.0</version>
-    <date>4/19/2006</date>
+    <version>1.3.0</version>
+    <date>7/10/2006</date>
     <minServerVersion>2.5.1</minServerVersion>
 	
     <adminconsole>		
diff --git a/src/plugins/presence/readme.html b/src/plugins/presence/readme.html
index b76aef2b1..ef651670f 100644
--- a/src/plugins/presence/readme.html
+++ b/src/plugins/presence/readme.html
@@ -58,7 +58,7 @@ Presence Plugin Readme
 
 <p>
 The presence plugin is a service that provides simple presence information over HTTP. 
-It can be used to display an online status icon for a user on a web page or to
+It can be used to display an online status icon for a user or component on a web page or to
 poll for presence information from a web service.
 </p>
 
diff --git a/src/plugins/presence/src/java/org/jivesoftware/wildfire/plugin/PresencePlugin.java b/src/plugins/presence/src/java/org/jivesoftware/wildfire/plugin/PresencePlugin.java
index bfb6da146..26e8ea8ac 100644
--- a/src/plugins/presence/src/java/org/jivesoftware/wildfire/plugin/PresencePlugin.java
+++ b/src/plugins/presence/src/java/org/jivesoftware/wildfire/plugin/PresencePlugin.java
@@ -12,7 +12,6 @@
 package org.jivesoftware.wildfire.plugin;
 
 import org.jivesoftware.util.JiveGlobals;
-import org.jivesoftware.util.Log;
 import org.jivesoftware.wildfire.PresenceManager;
 import org.jivesoftware.wildfire.XMPPServer;
 import org.jivesoftware.wildfire.container.Plugin;
@@ -20,20 +19,20 @@ import org.jivesoftware.wildfire.container.PluginManager;
 import org.jivesoftware.wildfire.user.User;
 import org.jivesoftware.wildfire.user.UserManager;
 import org.jivesoftware.wildfire.user.UserNotFoundException;
+import org.xmpp.component.Component;
 import org.xmpp.component.ComponentManager;
 import org.xmpp.component.ComponentManagerFactory;
-import org.xmpp.component.Component;
 import org.xmpp.packet.JID;
-import org.xmpp.packet.Presence;
 import org.xmpp.packet.Packet;
+import org.xmpp.packet.Presence;
 
 import java.io.File;
-import java.util.HashMap;
-import java.lang.Thread;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * Plugin that includes a servlet that provides information about the presence type of the
- * users in the server. For security reasons, the XMPP spec does not allow anyone to see
+ * Plugin that includes a servlet that provides information about users' and components'
+ * presence in the server. For security reasons, the XMPP spec does not allow anyone to see
  * the presence of any user. Only the users that are subscribed to the presence of other
  * users may see their presences.<p/>
  *
@@ -41,19 +40,25 @@ import java.lang.Thread;
  * so that anyone or only the users that are subscribed to a user presence may see the presence
  * of other users.<p/>
  *
- * Currently, the servlet provides information about user presences in two formats. In XML format
- * or using images.
+ * Currently, the servlet provides presence information in two formats: 1) In XML format
+ * and 2) using images.<p>
+ *
+ * The presence plugin is also a component so that it can probe presences of other components.
+ * The new component will use <tt>presence</tt> as the subdomain subdomain.
  *
  * @author Gaston Dombiak
  */
 public class PresencePlugin implements Plugin, Component {
 
+    private static final String subdomain = ""presence"";
+
     private UserManager userManager;
     private PresenceManager presenceManager;
     private PluginManager pluginManager;
     private ComponentManager componentManager;
     private String hostname;
-    private HashMap<String, Presence> probedPresence;
+    private Map<String, Presence> probedPresence;
+    private JID componentJID;
 
     public void initializePlugin(PluginManager manager, File pluginDirectory) {
         pluginManager = manager;
@@ -61,11 +66,12 @@ public class PresencePlugin implements Plugin, Component {
         userManager = server.getUserManager();
         presenceManager = server.getPresenceManager();
         hostname = server.getServerInfo().getName();
-        probedPresence = new HashMap<String, Presence>();
-
+        probedPresence = new ConcurrentHashMap<String, Presence>();
+        componentJID = new JID(subdomain + ""."" + hostname);
+        // Register new component
         componentManager = ComponentManagerFactory.getComponentManager();
         try {
-            componentManager.addComponent(""presence"", this);
+            componentManager.addComponent(subdomain, this);
         }
         catch (Exception e) {
             componentManager.getLog().error(e);
@@ -75,9 +81,9 @@ public class PresencePlugin implements Plugin, Component {
     public void destroyPlugin() {
         userManager = null;
         presenceManager = null;
-
+        // Remove presence plugin component
         try {
-            componentManager.removeComponent(""presence"");
+            componentManager.removeComponent(subdomain);
             componentManager = null;
         }
         catch (Exception e) {
@@ -103,9 +109,14 @@ public class PresencePlugin implements Plugin, Component {
     }
 
     public void processPacket(Packet packet) {
+        // Check that we are getting an answer to a presence probe
         if (packet instanceof Presence) {
             Presence presence = (Presence) packet;
-            probedPresence.put(presence.getFrom().toString(), presence);
+            if (presence.isAvailable() || presence.getType() == Presence.Type.unavailable ||
+                    presence.getType() == Presence.Type.error) {
+                // Store answer of presence probes
+                probedPresence.put(presence.getFrom().toString(), presence);
+            }
         }
     }
 
@@ -152,29 +163,30 @@ public class PresencePlugin implements Plugin, Component {
         if (!hostname.equals(targetJID.getDomain())) {
             // Sender is requesting information about component presence, so we send a 
             // presence probe to the component.
-            presenceManager.probePresence(new JID(""presence."" + hostname), targetJID);
+            presenceManager.probePresence(componentJID, targetJID);
 
+            // Wait 30 seconds until we get the probe presence result
             int count = 0;
-            while (!probedPresence.containsKey(jid)) {
+            Presence presence = probedPresence.get(jid);
+            while (presence == null) {
+                if (count > 300) {
+                    // After 30 seconds, timeout
+                    throw new UserNotFoundException(
+                            ""Request for component presence has timed-out."");
+                }
                 try {
                     Thread.sleep(100);
                 }
                 catch (InterruptedException e) {
                     // don't care!
                 }
+                presence = probedPresence.get(jid);
 
                 count++;
-
-                if (count > 300) {
-                    // After 30 seconds, timeout
-                    throw new UserNotFoundException(""Request for user presence has timed-out."");
-                }
             }
-
-            // Clean-up
-            Presence presence = probedPresence.get(jid);
+            // Clean-up probe presence result
             probedPresence.remove(jid);
-
+            // Return component presence
             return presence;
         }
         if (targetJID.getNode() == null ||",Added support for probing presence of components . . git - svn - id : http : / / svn . igniterealtime . org / svn / repos / wildfire / trunk @ 4339 b35dd754 - fafc - 0310 - a699 - 88a17e54d16e,"""Updated Presence Plugin to version 1.3.0, added support for probing presence of components, and fixed minor issue in readme.html""","""Updated Presence Plugin to version 1.3.0, added support for probing presence of components, and fixed minor issues in changelog, plugin.xml, and readme.html.""","Added support for probing presence of components.

The changes include:

1. Updated the changelog to reflect the new version (1.3.0) and added a new item to the list of changes: ""Added support for probing presence of components.""
2. Updated the plugin version in the plugin.xml file to 1.3.0.
3. Updated the readme file to include components in the description of what the presence plugin can be used for.
4. Modified the PresencePlugin.java file to include support for probing the presence of components. The changes include:
	* Importing the org.xmpp.component.Component class.
	* Adding a new private static final String variable named ""subdomain"" with the value ""presence"".
	* Changing the HashMap variable ""probedPresence"" to a ConcurrentHashMap variable.
	* Adding a new private JID variable named ""componentJID"" with the value ""presence."" + hostname.
	* Modifying the initializePlugin() method to add the presence plugin as a component using the ComponentManager.
	* Modifying the destroyPlugin() method to remove the presence plugin component using the ComponentManager.
	* Modifying the processPacket() method to check if the packet is a Presence packet and to store only the presence probes in the ""probedPresence"" map.
	* Modifying the getPresence() method to check if the target JID is a component and to send a presence probe to the component if it is. The method also waits for up to 30 seconds for a response to the presence probe and returns the presence if a response is received within that time. If no response is received within 30 seconds, a UserNotFoundException is thrown. The method also removes the presence from the ""probedPresence"" map before returning it.",Added support for probing presence of components and updated plugin version to 1.3.0.
"diff --git a/enterprise/core-edge/src/test/java/org/neo4j/coreedge/discovery/procedures/GetServersProcedureTest.java b/enterprise/core-edge/src/test/java/org/neo4j/coreedge/discovery/procedures/GetServersProcedureTest.java
index 46f558ab6f7..b5bf8d42b87 100644
--- a/enterprise/core-edge/src/test/java/org/neo4j/coreedge/discovery/procedures/GetServersProcedureTest.java
+++ b/enterprise/core-edge/src/test/java/org/neo4j/coreedge/discovery/procedures/GetServersProcedureTest.java
@@ -19,6 +19,10 @@
  */
 package org.neo4j.coreedge.discovery.procedures;
 
+import org.hamcrest.MatcherAssert;
+import org.hamcrest.Matchers;
+import org.junit.Test;
+
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
@@ -27,11 +31,6 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Collectors;
 
-import org.hamcrest.MatcherAssert;
-import org.hamcrest.Matchers;
-import org.junit.Test;
-
-import org.neo4j.collection.RawIterator;
 import org.neo4j.coreedge.core.consensus.LeaderLocator;
 import org.neo4j.coreedge.core.consensus.NoLeaderFoundException;
 import org.neo4j.coreedge.discovery.CoreAddresses;
@@ -42,26 +41,41 @@ import org.neo4j.coreedge.discovery.EdgeTopology;
 import org.neo4j.coreedge.identity.ClusterId;
 import org.neo4j.coreedge.identity.MemberId;
 import org.neo4j.helpers.AdvertisedSocketAddress;
-import org.neo4j.kernel.api.exceptions.ProcedureException;
+import org.neo4j.kernel.api.proc.FieldSignature;
+import org.neo4j.kernel.api.proc.ProcedureSignature;
 import org.neo4j.logging.NullLogProvider;
 
 import static java.util.Collections.emptySet;
 import static java.util.stream.Collectors.toList;
-
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-
 import static org.neo4j.coreedge.identity.RaftTestMember.member;
 import static org.neo4j.helpers.collection.Iterators.asList;
-import static org.neo4j.logging.NullLogProvider.getInstance;
+import static org.neo4j.kernel.api.proc.Neo4jTypes.NTInteger;
+import static org.neo4j.kernel.api.proc.Neo4jTypes.NTString;
 
 public class GetServersProcedureTest
 {
     private ClusterId clusterId = new ClusterId( UUID.randomUUID() );
 
+    @Test
+    public void shouldHaveCorrectSignature() throws Exception
+    {
+        // given
+        final GetServersProcedure proc = new GetServersProcedure( null, null, NullLogProvider.getInstance() );
+
+        // when
+        ProcedureSignature signature = proc.signature();
+
+        // then
+        assertThat( signature.outputSignature(), containsInAnyOrder( new FieldSignature( ""address"", NTString ),
+                        new FieldSignature( ""role"", NTString ),
+                        new FieldSignature( ""expiry"", NTInteger ) ) );
+    }
+
     @Test
     public void shouldReturnCoreServersWithReadRouteAndSingleWriteActions() throws Exception
     {
@@ -71,7 +85,7 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenReturn( member( 0 ) );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         coreMembers.put( member( 0 ), coreAddresses( 0 ) );
         coreMembers.put( member( 1 ), coreAddresses( 1 ) );
         coreMembers.put( member( 2 ), coreAddresses( 2 ) );
@@ -94,8 +108,7 @@ public class GetServersProcedureTest
                 new Object[]{coreAddresses( 1 ).getRaftServer().toString(), ""ROUTE"", Long.MAX_VALUE},
                 new Object[]{coreAddresses( 1 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE},
                 new Object[]{coreAddresses( 2 ).getRaftServer().toString(), ""ROUTE"", Long.MAX_VALUE},
-                new Object[]{coreAddresses( 2 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE} )
-        );
+                new Object[]{coreAddresses( 2 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE} ) );
     }
 
     @Test
@@ -107,7 +120,7 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenReturn( member( 0 ) );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         coreMembers.put( member( 0 ), coreAddresses( 0 ) );
 
         final CoreTopology clusterTopology = new CoreTopology( clusterId, false, coreMembers );
@@ -133,7 +146,7 @@ public class GetServersProcedureTest
         // given
         final CoreTopologyService topologyService = mock( CoreTopologyService.class );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         MemberId theLeader = member( 0 );
         coreMembers.put( theLeader, coreAddresses( 0 ) );
 
@@ -143,8 +156,8 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenReturn( theLeader );
 
-        GetServersProcedure procedure = new GetServersProcedure( topologyService, leaderLocator,
-                NullLogProvider.getInstance() );
+        GetServersProcedure procedure =
+                new GetServersProcedure( topologyService, leaderLocator, NullLogProvider.getInstance() );
 
         // when
         final List<Object[]> members = asList( procedure.apply( null, new Object[0] ) );
@@ -154,8 +167,7 @@ public class GetServersProcedureTest
                 new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""ROUTE"", Long.MAX_VALUE},
                 new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""WRITE"", Long.MAX_VALUE},
                 new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE},
-                new Object[]{coreAddresses( 1 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE}
-        ) );
+                new Object[]{coreAddresses( 1 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE} ) );
     }
 
     @Test
@@ -164,7 +176,7 @@ public class GetServersProcedureTest
         // given
         final CoreTopologyService topologyService = mock( CoreTopologyService.class );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         MemberId theLeader = member( 0 );
         coreMembers.put( theLeader, coreAddresses( 0 ) );
 
@@ -174,8 +186,8 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenReturn( theLeader );
 
-        GetServersProcedure procedure = new GetServersProcedure( topologyService, leaderLocator,
-                NullLogProvider.getInstance() );
+        GetServersProcedure procedure =
+                new GetServersProcedure( topologyService, leaderLocator, NullLogProvider.getInstance() );
 
         // when
         final List<Object[]> members = asList( procedure.apply( null, new Object[0] ) );
@@ -184,8 +196,7 @@ public class GetServersProcedureTest
         assertThat( members, containsInAnyOrder(
                 new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""WRITE"", Long.MAX_VALUE},
                 new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""READ"", Long.MAX_VALUE},
-                new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""ROUTE"", Long.MAX_VALUE}
-        ) );
+                new Object[]{coreAddresses( 0 ).getRaftServer().toString(), ""ROUTE"", Long.MAX_VALUE} ) );
     }
 
     @Test
@@ -194,7 +205,7 @@ public class GetServersProcedureTest
         // given
         final CoreTopologyService topologyService = mock( CoreTopologyService.class );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         coreMembers.put( member( 0 ), coreAddresses( 0 ) );
 
         when( topologyService.coreServers() ).thenReturn( new CoreTopology( clusterId, false, coreMembers ) );
@@ -203,8 +214,8 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenThrow( new NoLeaderFoundException() );
 
-        GetServersProcedure procedure = new GetServersProcedure( topologyService, leaderLocator,
-                NullLogProvider.getInstance() );
+        GetServersProcedure procedure =
+                new GetServersProcedure( topologyService, leaderLocator, NullLogProvider.getInstance() );
 
         // when
         final List<Object[]> members = asList( procedure.apply( null, new Object[0] ) );
@@ -220,7 +231,7 @@ public class GetServersProcedureTest
         // given
         final CoreTopologyService topologyService = mock( CoreTopologyService.class );
 
-        Map<MemberId, CoreAddresses> coreMembers = new HashMap<>();
+        Map<MemberId,CoreAddresses> coreMembers = new HashMap<>();
         coreMembers.put( member( 0 ), coreAddresses( 0 ) );
 
         when( topologyService.coreServers() ).thenReturn( new CoreTopology( clusterId, false, coreMembers ) );
@@ -229,8 +240,8 @@ public class GetServersProcedureTest
         LeaderLocator leaderLocator = mock( LeaderLocator.class );
         when( leaderLocator.getLeader() ).thenReturn( member( 1 ) );
 
-        GetServersProcedure procedure = new GetServersProcedure( topologyService, leaderLocator,
-                NullLogProvider.getInstance() );
+        GetServersProcedure procedure =
+                new GetServersProcedure( topologyService, leaderLocator, NullLogProvider.getInstance() );
 
         // when
         final List<Object[]> members = asList( procedure.apply( null, new Object[0] ) );
@@ -242,9 +253,7 @@ public class GetServersProcedureTest
 
     static Set<EdgeAddresses> addresses( int... ids )
     {
-        return Arrays.stream( ids )
-                .mapToObj( GetServersProcedureTest::edgeAddresses )
-                .collect( Collectors.toSet() );
+        return Arrays.stream( ids ).mapToObj( GetServersProcedureTest::edgeAddresses ).collect( Collectors.toSet() );
     }
 
     static CoreAddresses coreAddresses( int id )",Adding signature test for GetServersProcedure,"""Add test for GetServersProcedure signature and refactor test code""",Added test for GetServersProcedure signature and refactored repeated code in test methods.,"""Added test for correct procedure signature in GetServersProcedureTest""

Explanation:
The diff shows the addition of a new test method named 'shouldHaveCorrectSignature' in the 'GetServersProcedureTest' class. This method checks if the 'GetServersProcedure' has the correct output signature. Hence, the commit message should reflect this change.",Add a test for verifying the signature of the GetServersProcedure method. Clean up formatting and imports.
"diff --git a/Readme.html b/Readme.html
index a32457e..9782bfe 100644
--- a/Readme.html
+++ b/Readme.html
@@ -283,7 +283,7 @@ see javassist.Dump.
 
 <p>-version 3.19
 <ul>
-<li>JIRA JASSIST-158, 205, 206, 207, 208, 211, 212, 216, 220, 223, 224, 227, 230, 234, 235, 236.
+<li>JIRA JASSIST-158, 205, 206, 207, 208, 209, 211, 212, 216, 220, 223, 224, 227, 230, 234, 235, 236.
 </ul>
 </p>
 
diff --git a/src/main/javassist/bytecode/annotation/ClassMemberValue.java b/src/main/javassist/bytecode/annotation/ClassMemberValue.java
index 6a1bcd8..7169d72 100644
--- a/src/main/javassist/bytecode/annotation/ClassMemberValue.java
+++ b/src/main/javassist/bytecode/annotation/ClassMemberValue.java
@@ -101,10 +101,10 @@ public class ClassMemberValue extends MemberValue {
     public String getValue() {
         String v = cp.getUtf8Info(valueIndex);
         try {
-			return SignatureAttribute.toTypeSignature(v).jvmTypeName();
-		} catch (BadBytecode e) {
-			throw new RuntimeException(e);
-		}
+            return SignatureAttribute.toTypeSignature(v).jvmTypeName();
+        } catch (BadBytecode e) {
+            throw new RuntimeException(e);
+        }
     }
 
     /**",reformatted the code for fixing JASSIST - 209 . .,"""Update JIRA issue list in Readme.html and fix indentation in ClassMemberValue.java""","According to the diff, the commit message should be:

""Fixed JASSIST-209 in version list and updated ClassMemberValue to handle BadBytecode exceptions.""","It seems like you're working with Git and Java code. The changes you've made in the first part are related to updating a readme file, specifically the version history section. You've added a new version number and the corresponding JIRA tickets that were addressed in that version.

The second part of your code is a change in a Java class named `ClassMemberValue`. You've modified the `getValue()` method, specifically the way it handles exceptions. The functionality seems to be the same, but the code structure has been slightly altered.

As for the commit message, it should briefly describe what changes you've made. Based on the changes I see, a suitable commit message could be:

""Update Readme.html with new version and JIRA tickets. Refactor exception handling in ClassMemberValue.java.""","""Added JIRA issue 209 to the release notes and corrected indentation in ClassMemberValue.java"""
"diff --git a/karate-core/src/main/java/com/intuit/karate/http/RequestHandler.java b/karate-core/src/main/java/com/intuit/karate/http/RequestHandler.java
index e3bfde707..a5fc4e9d5 100644
--- a/karate-core/src/main/java/com/intuit/karate/http/RequestHandler.java
+++ b/karate-core/src/main/java/com/intuit/karate/http/RequestHandler.java
@@ -95,10 +95,10 @@ public class RequestHandler implements ServerHandler {
                 }
             }
             if (session == null) {
-                if (homePagePath.equals(request.getPath())) {
+                if (config.isAutoCreateSession() || homePagePath.equals(request.getPath())) {
                     session = createSession();
                     newSession = true;
-                    logger.debug(""creating new session for '{}': {}"", homePagePath, session);
+                    logger.debug(""creating new session for '{}': {}"", request.getPath(), session);
                 } else {
                     logger.warn(""session not found: {}"", request);
                     ResponseBuilder rb = response().deleteSessionCookie(sessionId);
diff --git a/karate-core/src/main/java/com/intuit/karate/http/ServerConfig.java b/karate-core/src/main/java/com/intuit/karate/http/ServerConfig.java
index f440d509a..38f971ef0 100644
--- a/karate-core/src/main/java/com/intuit/karate/http/ServerConfig.java
+++ b/karate-core/src/main/java/com/intuit/karate/http/ServerConfig.java
@@ -42,6 +42,7 @@ public class ServerConfig {
     private String sessionCookieName = ""karate.sid"";
     private boolean stripContextPathFromRequest;
     private boolean useGlobalSession;
+    private boolean autoCreateSession;
     private SessionStore sessionStore = JvmSessionStore.INSTANCE;
     private int sessionExpirySeconds = 60 * 10;
     private ResourceResolver resourceResolver = new FileSystemResourceResolver(null);
@@ -94,7 +95,11 @@ public class ServerConfig {
 
     public boolean isUseGlobalSession() {
         return useGlobalSession;
-    }        
+    }
+
+    public boolean isAutoCreateSession() {
+        return autoCreateSession;
+    }
 
     public int getSessionExpirySeconds() {
         return sessionExpirySeconds;
@@ -162,11 +167,16 @@ public class ServerConfig {
         stripContextPathFromRequest = value;
         return this;
     }
-    
+
     public ServerConfig useGlobalSession(boolean value) {
         useGlobalSession = value;
         return this;
-    }    
+    }
+
+    public ServerConfig autoCreateSession(boolean value) {
+        autoCreateSession = value;
+        return this;
+    }
 
     public ServerConfig sessionStore(SessionStore value) {
         sessionStore = value;
diff --git a/karate-e2e-tests/src/test/java/driver/00.feature b/karate-e2e-tests/src/test/java/driver/00.feature
index 8c2f47bfb..ce7e0088b 100644
--- a/karate-e2e-tests/src/test/java/driver/00.feature
+++ b/karate-e2e-tests/src/test/java/driver/00.feature
@@ -8,13 +8,13 @@ Scenario:
 * call read('01.feature')
 
 # waitFor() | waitForText() | waitForEnabled()
-#* call read('02.feature')
+* call read('02.feature')
 
 # script() | waitUntil()
-#* call read('03.feature')
+* call read('03.feature')
 
 # cookies
-#* call read('04.feature')
+* call read('04.feature')
 
 # driver.intercept
-#* call read('05.feature')
+* if (driverType == 'chrome') karate.call('05.feature')
diff --git a/karate-e2e-tests/src/test/java/driver/00_outline.feature b/karate-e2e-tests/src/test/java/driver/00_outline.feature
index 6a2d287b8..f3aa37cd9 100644
--- a/karate-e2e-tests/src/test/java/driver/00_outline.feature
+++ b/karate-e2e-tests/src/test/java/driver/00_outline.feature
@@ -4,8 +4,8 @@ Scenario Outline:
 * call read('00.feature')
 
 Examples:
-| driver       | dimensions                                 |
+| driverType       | dimensions                                 |
 | chrome       | { x: 0, y: 0, width: 300, height: 800 }    |
 | chromedriver | { x: 50, y: 0, width: 250, height: 800 }   |
 | geckodriver  | { x: 600, y: 0, width: 300, height: 800 }  |
-| safaridriver | { x: 1000, y: 0, width: 400, height: 800 } |
+#| safaridriver | { x: 1000, y: 0, width: 400, height: 800 } |
diff --git a/karate-e2e-tests/src/test/java/driver/ServerStarter.java b/karate-e2e-tests/src/test/java/driver/ServerStarter.java
index 2054b193a..844ed9c60 100644
--- a/karate-e2e-tests/src/test/java/driver/ServerStarter.java
+++ b/karate-e2e-tests/src/test/java/driver/ServerStarter.java
@@ -20,6 +20,7 @@ public class ServerStarter {
     public static HttpServer start(int port) {
         ServerConfig config = new ServerConfig()
                 .fileSystemRoot(""src/test/java/driver/html"")
+                .autoCreateSession(true)
                 .homePagePath(""00"");
         RequestHandler handler = new RequestHandler(config);
         return new HttpServer(port, handler);
diff --git a/karate-e2e-tests/src/test/java/driver/karate-config-xbrowser.js b/karate-e2e-tests/src/test/java/driver/karate-config-xbrowser.js
index 88469b9cb..a8a88e956 100644
--- a/karate-e2e-tests/src/test/java/driver/karate-config-xbrowser.js
+++ b/karate-e2e-tests/src/test/java/driver/karate-config-xbrowser.js
@@ -1,4 +1,4 @@
 function fn() {
-  karate.log('using driver:', driver);
-  karate.configure('driver', {type: driver, showDriverLog: true});
+  karate.log('using driver:', driverType);
+  karate.configure('driver', {type: driverType, showDriverLog: true});
 }",cross browser test working wip,"""Added auto-create session feature to Karate server""","""Added auto-create session feature and updated tests to use it""","""Add autoCreateSession feature to Karate HTTP server and update E2E tests""

This commit appears to add a new feature to the Karate HTTP server where it can automatically create a new session if one does not exist or if the request is for the home page. The `ServerConfig` class has been updated with a new `autoCreateSession` boolean field and a corresponding getter and setter method. The `RequestHandler` class has been updated to use this new feature.

Additionally, the E2E tests have been updated to use this new feature. The `ServerStarter` class has been updated to start the HTTP server with `autoCreateSession` set to true. The `karate-config-xbrowser.js` file has been updated to log the driver type instead of the driver. The `00.feature` and `00_outline.feature` files have been updated to use `driverType` instead of `driver`. The `05.feature` file has been updated to only be called if the driver type is 'chrome'.","Added autoCreateSession feature to ServerConfig, updated RequestHandler, modified e2e tests to include condition for driver type and updated variables."
"diff --git a/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcImportRule.java b/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcImportRule.java
index 98ba63374f..fcb162b61d 100644
--- a/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcImportRule.java
+++ b/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCcImportRule.java
@@ -39,7 +39,6 @@ public final class BazelCcImportRule implements RuleDefinition {
         .add(
             attr(CcToolchain.CC_TOOLCHAIN_TYPE_ATTRIBUTE_NAME, NODEP_LABEL)
                 .value(CppRuleClasses.ccToolchainTypeAttribute(env)))
-        .add(attr("":stl"", LABEL).value(BazelCppRuleClasses.STL))
         .build();
   }
 
diff --git a/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCppRuleClasses.java b/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCppRuleClasses.java
index 089dd47729..1ea477759f 100644
--- a/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCppRuleClasses.java
+++ b/src/main/java/com/google/devtools/build/lib/bazel/rules/cpp/BazelCppRuleClasses.java
@@ -44,11 +44,8 @@ import com.google.devtools.build.lib.analysis.PlatformConfiguration;
 import com.google.devtools.build.lib.analysis.RuleDefinition;
 import com.google.devtools.build.lib.analysis.RuleDefinitionEnvironment;
 import com.google.devtools.build.lib.analysis.config.HostTransition;
-import com.google.devtools.build.lib.cmdline.Label;
 import com.google.devtools.build.lib.packages.Attribute;
-import com.google.devtools.build.lib.packages.Attribute.LabelLateBoundDefault;
 import com.google.devtools.build.lib.packages.AttributeMap;
-import com.google.devtools.build.lib.packages.BuildType;
 import com.google.devtools.build.lib.packages.ImplicitOutputsFunction.SafeImplicitOutputsFunction;
 import com.google.devtools.build.lib.packages.RuleClass;
 import com.google.devtools.build.lib.packages.RuleClass.Builder.RuleClassType;
@@ -56,7 +53,6 @@ import com.google.devtools.build.lib.packages.SkylarkProviderIdentifier;
 import com.google.devtools.build.lib.packages.TriState;
 import com.google.devtools.build.lib.rules.cpp.CcModule.CcSkylarkInfo;
 import com.google.devtools.build.lib.rules.cpp.CcToolchain;
-import com.google.devtools.build.lib.rules.cpp.CppConfiguration;
 import com.google.devtools.build.lib.rules.cpp.CppFileTypes;
 import com.google.devtools.build.lib.rules.cpp.CppRuleClasses;
 import com.google.devtools.build.lib.rules.cpp.CppRuleClasses.CcIncludeScanningRule;
@@ -72,31 +68,6 @@ public class BazelCppRuleClasses {
   static final SafeImplicitOutputsFunction CC_BINARY_IMPLICIT_OUTPUTS =
       fromFunctions(CppRuleClasses.CC_BINARY_STRIPPED, CppRuleClasses.CC_BINARY_DEBUG_PACKAGE);
 
-  /**
-   * Returns the STL prerequisite of the rule.
-   *
-   * <p>If rule has an implicit $stl_default attribute returns STL version set on the command line
-   * or if not set, the value of the $stl_default attribute. Returns {@code null} otherwise.
-   */
-  public static final LabelLateBoundDefault<?> STL =
-      LabelLateBoundDefault.fromTargetConfiguration(
-          CppConfiguration.class,
-          null,
-          (rule, attributes, cppConfig) -> {
-            Label stl = null;
-            if (attributes.has(""$stl_default"", BuildType.LABEL)) {
-              Label stlConfigLabel = cppConfig.getStl();
-              Label stlRuleLabel = attributes.get(""$stl_default"", BuildType.LABEL);
-              if (stlConfigLabel == null) {
-                stl = stlRuleLabel;
-              } else if (!stlConfigLabel.equals(rule.getLabel()) && stlRuleLabel != null) {
-                // prevents self-reference and a cycle through standard STL in the dependency graph
-                stl = stlConfigLabel;
-              }
-            }
-            return stl;
-          });
-
   static final FileTypeSet ALLOWED_SRC_FILES =
       FileTypeSet.of(
           CPP_SOURCE,
@@ -173,8 +144,6 @@ public class BazelCppRuleClasses {
           </p>
           <!-- #END_BLAZE_RULE.ATTRIBUTE -->*/
           .add(attr(""copts"", STRING_LIST))
-          .add(attr(""$stl_default"", LABEL).value(env.getToolsLabel(""//tools/cpp:stl"")))
-          .add(attr("":stl"", LABEL).value(STL))
           .build();
     }
 
@@ -392,20 +361,6 @@ public class BazelCppRuleClasses {
            </p>
           <!-- #END_BLAZE_RULE.ATTRIBUTE -->*/
           .add(attr(""linkstatic"", BOOLEAN).value(true))
-          .override(
-              attr(""$stl_default"", LABEL)
-                  .value(
-                      new Attribute.ComputedDefault() {
-                        @Override
-                        public Object getDefault(AttributeMap rule) {
-                          // Every cc_rule depends implicitly on STL to make
-                          // sure that the correct headers are used for inclusion.
-                          // The only exception is STL itself,
-                          // to avoid cycles in the dependency graph.
-                          Label stl = env.getToolsLabel(""//tools/cpp:stl"");
-                          return rule.getLabel().equals(stl) ? null : stl;
-                        }
-                      }))
           .add(
               attr(""$def_parser"", LABEL)
                   .cfg(HostTransition.INSTANCE)
diff --git a/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCompilationHelper.java b/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCompilationHelper.java
index d2b27f141d..fdc7f0d6df 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCompilationHelper.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/cpp/CcCompilationHelper.java
@@ -1177,17 +1177,28 @@ public final class CcCompilationHelper {
         !featureConfiguration.isEnabled(CppRuleClasses.MODULE_MAP_WITHOUT_EXTERN_MODULE));
   }
 
+  private static CcInfo getStlDependency(RuleContext ruleContext) {
+    if (ruleContext.attributes().has(""$stl"", BuildType.LABEL)) {
+      return ruleContext.getPrerequisite(""$stl"", Mode.TARGET, CcInfo.PROVIDER);
+    } else if (ruleContext.attributes().has("":stl"", BuildType.LABEL)) {
+      // This is here because some Starlark rules use configuration_field() to depend on the STL
+      // which results in an attribute like this. In order to keep the world ticking along, we need
+      // to support that until they are deleted.
+      return ruleContext.getPrerequisite("":stl"", Mode.TARGET, CcInfo.PROVIDER);
+    } else {
+      return null;
+    }
+  }
+
   private Iterable<CppModuleMap> collectModuleMaps() {
     // Cpp module maps may be null for some rules. We filter the nulls out at the end.
     List<CppModuleMap> result =
         ccCompilationContexts.stream()
             .map(CPP_DEPS_TO_MODULES)
             .collect(toCollection(ArrayList::new));
-    if (ruleContext.getRule().getAttributeDefinition("":stl"") != null) {
-      CcInfo stl = ruleContext.getPrerequisite("":stl"", Mode.TARGET, CcInfo.PROVIDER);
-      if (stl != null) {
-        result.add(stl.getCcCompilationContext().getCppModuleMap());
-      }
+    CcInfo stl = getStlDependency(ruleContext);
+    if (stl != null) {
+      result.add(stl.getCcCompilationContext().getCppModuleMap());
     }
 
     if (ccToolchain != null) {
@@ -2074,26 +2085,20 @@ public final class CcCompilationHelper {
 
   /**
    * Merges the STL and toolchain contexts into context builder. The STL is automatically determined
-   * using the "":stl"" attribute.
+   * using the ""$stl"" (or, historically, "":stl"") attribute.
    */
   private static void mergeToolchainDependentCcCompilationContext(
       RuleContext ruleContext,
       CcToolchainProvider toolchain,
       CcCompilationContext.Builder ccCompilationContextBuilder) {
-    if (ruleContext.getRule().getAttributeDefinition("":stl"") != null) {
-      TransitiveInfoCollection stl = ruleContext.getPrerequisite("":stl"", Mode.TARGET);
-      if (stl != null) {
-        CcInfo ccInfo = stl.get(CcInfo.PROVIDER);
-        CcCompilationContext ccCompilationContext =
-            ccInfo != null ? ccInfo.getCcCompilationContext() : null;
-        if (ccCompilationContext == null) {
-          ruleContext.ruleError(
-              ""Unable to merge the STL '"" + stl.getLabel() + ""' and toolchain contexts"");
-          return;
-        }
+    CcInfo stl = getStlDependency(ruleContext);
+    if (stl != null) {
+      CcCompilationContext ccCompilationContext = stl.getCcCompilationContext();
+      if (ccCompilationContext != null) {
         ccCompilationContextBuilder.mergeDependentCcCompilationContext(ccCompilationContext);
       }
     }
+
     if (toolchain != null) {
       ccCompilationContextBuilder.mergeDependentCcCompilationContext(
           toolchain.getCcCompilationContext());
diff --git a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfiguration.java b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfiguration.java
index 51d6c2e1a4..f993a598d2 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfiguration.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfiguration.java
@@ -196,7 +196,6 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
 
   // TODO(b/113849758): Remove once it's not needed for toolchain selection in CppConfiguration.
   private final Label ccToolchainLabel;
-  private final Label stlLabel;
 
   // TODO(kmensah): This is temporary until all the Skylark functions that need this can be removed.
   private final PathFragment nonConfiguredSysroot;
@@ -277,7 +276,6 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
         params.fdoPath,
         params.fdoOptimizeLabel,
         params.ccToolchainLabel,
-        params.stlLabel,
         params.sysrootLabel == null
             ? cppToolchainInfo.getDefaultSysroot()
             : params.sysrootLabel.getPackageFragment(),
@@ -314,7 +312,6 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
       PathFragment fdoPath,
       Label fdoOptimizeLabel,
       Label ccToolchainLabel,
-      Label stlLabel,
       PathFragment nonConfiguredSysroot,
       Label sysrootLabel,
       ImmutableList<String> compilerFlags,
@@ -343,7 +340,6 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
     this.fdoPath = fdoPath;
     this.fdoOptimizeLabel = fdoOptimizeLabel;
     this.ccToolchainLabel = ccToolchainLabel;
-    this.stlLabel = stlLabel;
     this.nonConfiguredSysroot = nonConfiguredSysroot;
     this.sysrootLabel = sysrootLabel;
     this.compilerFlags = compilerFlags;
@@ -792,14 +788,6 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
     return cppOptions.linkCompileOutputSeparately;
   }
 
-  /**
-   * Returns the STL label if given on the command line. {@code null}
-   * otherwise.
-   */
-  public Label getStl() {
-    return stlLabel;
-  }
-
   @SkylarkConfigurationField(
       name = ""stl"",
       doc = ""The label of the STL target"",
@@ -807,14 +795,11 @@ public final class CppConfiguration extends BuildConfiguration.Fragment
       defaultInToolRepository = false
   )
   public Label getSkylarkStl() {
-    if (stlLabel == null) {
-      try {
-        return Label.parseAbsolute(""//third_party/stl"", ImmutableMap.of());
-      } catch (LabelSyntaxException e) {
-        throw new IllegalStateException(""STL label not formatted correctly"", e);
-      }
+    try {
+      return Label.parseAbsolute(""//third_party/stl"", ImmutableMap.of());
+    } catch (LabelSyntaxException e) {
+      throw new IllegalStateException(""STL label not formatted correctly"", e);
     }
-    return stlLabel;
   }
 
   public boolean isFdo() {
diff --git a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfigurationLoader.java b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfigurationLoader.java
index 956254af10..7c1aab25e1 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfigurationLoader.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppConfigurationLoader.java
@@ -86,7 +86,6 @@ public class CppConfigurationLoader implements ConfigurationFragmentFactory {
     protected final CppOptions cppOptions;
     protected final Label crosstoolTop;
     protected final Label ccToolchainLabel;
-    protected final Label stlLabel;
     protected final PathFragment fdoPath;
     protected final Label fdoOptimizeLabel;
     protected final Label sysrootLabel;
@@ -104,7 +103,6 @@ public class CppConfigurationLoader implements ConfigurationFragmentFactory {
         Label fdoOptimizeLabel,
         Label crosstoolTop,
         Label ccToolchainLabel,
-        Label stlLabel,
         Label sysrootLabel,
         CcToolchainConfigInfo ccToolchainConfigInfo) {
       this.transformedCpu = transformedCpu;
@@ -116,7 +114,6 @@ public class CppConfigurationLoader implements ConfigurationFragmentFactory {
       this.fdoOptimizeLabel = fdoOptimizeLabel;
       this.crosstoolTop = crosstoolTop;
       this.ccToolchainLabel = ccToolchainLabel;
-      this.stlLabel = stlLabel;
       this.sysrootLabel = sysrootLabel;
       this.ccToolchainConfigInfo = ccToolchainConfigInfo;
     }
@@ -201,14 +198,6 @@ public class CppConfigurationLoader implements ConfigurationFragmentFactory {
 
     Label sysrootLabel = getSysrootLabel(cToolchain, cppOptions.libcTopLabel);
 
-    Label stlLabel = null;
-    if (cppOptions.stl != null) {
-      stlLabel = RedirectChaser.followRedirects(env, cppOptions.stl, ""stl"");
-      if (stlLabel == null) {
-        return null;
-      }
-    }
-
     String ccToolchainSuiteProtoAttributeValue =
         StringUtil.emptyToNull(
             NonconfigurableAttributeMapper.of((Rule) crosstoolTop).get(""proto"", Type.STRING));
@@ -251,7 +240,6 @@ public class CppConfigurationLoader implements ConfigurationFragmentFactory {
         fdoProfileLabel,
         crosstoolTopLabel,
         ccToolchainLabel,
-        stlLabel,
         sysrootLabel,
         ccToolchainConfigInfo);
   }
diff --git a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppOptions.java b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppOptions.java
index cca8f851bf..87e3605987 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/cpp/CppOptions.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/cpp/CppOptions.java
@@ -470,19 +470,6 @@ public class CppOptions extends FragmentOptions {
       help = ""If set, use of fdo_absolute_profile_path will raise an error."")
   public boolean enableFdoProfileAbsolutePath;
 
-  @Option(
-    name = ""experimental_stl"",
-    converter = LabelConverter.class,
-    defaultValue = ""null"",
-    documentationCategory = OptionDocumentationCategory.TOOLCHAIN,
-    effectTags = {OptionEffectTag.AFFECTS_OUTPUTS, OptionEffectTag.ACTION_COMMAND_LINES},
-    metadataTags = {OptionMetadataTag.EXPERIMENTAL},
-    help =
-        ""If set, use this label instead of the default STL implementation. ""
-            + ""This option is EXPERIMENTAL and may go away in a future release.""
-  )
-  public Label stl;
-
   @Option(
     name = ""save_temps"",
     defaultValue = ""false"",
diff --git a/src/test/java/com/google/devtools/build/lib/analysis/BuildViewTest.java b/src/test/java/com/google/devtools/build/lib/analysis/BuildViewTest.java
index 3b6221ad82..0f1efb8ec4 100644
--- a/src/test/java/com/google/devtools/build/lib/analysis/BuildViewTest.java
+++ b/src/test/java/com/google/devtools/build/lib/analysis/BuildViewTest.java
@@ -1044,33 +1044,6 @@ public class BuildViewTest extends BuildViewTestBase {
             Pair.of(""//cycle:foo"", ""//cycle:foo""), Pair.of(""//cycle:bat"", ""//cycle:bas""));
   }
 
-  @Test
-  public void testCircularDependencyWithLateBoundLabel() throws Exception {
-    if (getInternalTestExecutionMode() != TestConstants.InternalTestExecutionMode.NORMAL) {
-      // TODO(b/67412276): handle cycles properly.
-      return;
-    }
-    scratch.file(""cycle/BUILD"",
-        ""cc_library(name = 'foo', deps = [':bar'])"",
-        ""cc_library(name = 'bar')"");
-    useConfiguration(""--experimental_stl=//cycle:foo"");
-    reporter.removeHandler(failFastHandler);
-    EventBus eventBus = new EventBus();
-    LoadingFailureRecorder loadingFailureRecorder = new LoadingFailureRecorder();
-    AnalysisFailureRecorder analysisFailureRecorder = new AnalysisFailureRecorder();
-    eventBus.register(loadingFailureRecorder);
-    eventBus.register(analysisFailureRecorder);
-    AnalysisResult result = update(eventBus, defaultFlags().with(Flag.KEEP_GOING), ""//cycle:foo"");
-    assertThat(result.hasError()).isTrue();
-    assertContainsEvent(""in cc_library rule //cycle:foo: cycle in dependency graph:"");
-    // This needs to be reported as an anlysis-phase cycle; the cycle only occurs due to the stl
-    // command-line option, which is part of the configuration, and which is used due to the
-    // late-bound label.
-    assertThat(Iterables.transform(analysisFailureRecorder.events, ANALYSIS_EVENT_TO_STRING_PAIR))
-        .containsExactly(Pair.of(""//cycle:foo"", ""//cycle:foo""));
-    assertThat(loadingFailureRecorder.events).isEmpty();
-  }
-
   @Test
   public void testLoadingErrorReportedCorrectly() throws Exception {
     scratch.file(""a/BUILD"", ""cc_library(name='a')"");
diff --git a/src/test/java/com/google/devtools/build/lib/analysis/select/AbstractAttributeMapperTest.java b/src/test/java/com/google/devtools/build/lib/analysis/select/AbstractAttributeMapperTest.java
index 4901884590..cadcf7c381 100644
--- a/src/test/java/com/google/devtools/build/lib/analysis/select/AbstractAttributeMapperTest.java
+++ b/src/test/java/com/google/devtools/build/lib/analysis/select/AbstractAttributeMapperTest.java
@@ -19,7 +19,6 @@ import static org.junit.Assert.fail;
 import com.google.devtools.build.lib.analysis.util.BuildViewTestCase;
 import com.google.devtools.build.lib.cmdline.Label;
 import com.google.devtools.build.lib.packages.AbstractAttributeMapper;
-import com.google.devtools.build.lib.packages.Attribute;
 import com.google.devtools.build.lib.packages.AttributeContainer;
 import com.google.devtools.build.lib.packages.AttributeMap;
 import com.google.devtools.build.lib.packages.BuildType;
@@ -131,13 +130,4 @@ public class AbstractAttributeMapperTest extends BuildViewTestCase {
         .map(Label::toString)
         .collect(Collectors.toList());
   }
-
-  @Test
-  public void testComputedDefault() throws Exception {
-    // Should return a valid ComputedDefault instance since this is a computed default:
-    assertThat(mapper.getComputedDefault(""$stl_default"", BuildType.LABEL))
-        .isInstanceOf(Attribute.ComputedDefault.class);
-    // Should return null since this *isn't* a computed default:
-    assertThat(mapper.getComputedDefault(""srcs"", BuildType.LABEL_LIST)).isNull();
-  }
 }
diff --git a/src/test/java/com/google/devtools/build/lib/analysis/select/AggregatingAttributeMapperTest.java b/src/test/java/com/google/devtools/build/lib/analysis/select/AggregatingAttributeMapperTest.java
index 073c751766..1bd508a27e 100644
--- a/src/test/java/com/google/devtools/build/lib/analysis/select/AggregatingAttributeMapperTest.java
+++ b/src/test/java/com/google/devtools/build/lib/analysis/select/AggregatingAttributeMapperTest.java
@@ -21,7 +21,6 @@ import com.google.common.base.Joiner;
 import com.google.common.base.Verify;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
-import com.google.devtools.build.lib.actions.MutableActionGraph.ActionConflictException;
 import com.google.devtools.build.lib.analysis.BaseRuleClasses;
 import com.google.devtools.build.lib.analysis.ConfiguredRuleClassProvider;
 import com.google.devtools.build.lib.analysis.ConfiguredTarget;
@@ -269,8 +268,7 @@ public class AggregatingAttributeMapperTest extends AbstractAttributeMapperTest
     }
 
     @Override
-    public ConfiguredTarget create(RuleContext ruleContext)
-        throws InterruptedException, RuleErrorException, ActionConflictException {
+    public ConfiguredTarget create(RuleContext ruleContext) {
       throw new UnsupportedOperationException();
     }
   }
diff --git a/src/test/java/com/google/devtools/build/lib/rules/cpp/CcLibraryConfiguredTargetTest.java b/src/test/java/com/google/devtools/build/lib/rules/cpp/CcLibraryConfiguredTargetTest.java
index a82bade540..eca984f1a1 100644
--- a/src/test/java/com/google/devtools/build/lib/rules/cpp/CcLibraryConfiguredTargetTest.java
+++ b/src/test/java/com/google/devtools/build/lib/rules/cpp/CcLibraryConfiguredTargetTest.java
@@ -587,16 +587,16 @@ public class CcLibraryConfiguredTargetTest extends BuildViewTestCase {
         .setupCrosstool(mockToolsConfig, MockCcSupport.HEADER_MODULES_FEATURE_CONFIGURATION);
     useConfiguration(""--cpu=k8"");
     ConfiguredTarget x =
+
         scratchConfiguredTarget(
             ""foo"",
             ""x"",
             ""package(features = ['header_modules'])"",
             ""cc_library(name = 'x', srcs = ['x.cc'], deps = [':y'])"",
             ""cc_library(name = 'y', hdrs = ['y.h'])"");
-    assertThat(
-            ActionsTestUtil.baseNamesOf(
-                getOutputGroup(x, OutputGroupInfo.COMPILATION_PREREQUISITES)))
-        .isEqualTo(""y.h y.cppmap stl.cppmap crosstool.cppmap x.cppmap y.pic.pcm x.cc"");
+    assertThat(ActionsTestUtil.baseArtifactNames(
+        getOutputGroup(x, OutputGroupInfo.COMPILATION_PREREQUISITES)))
+        .containsAllOf(""y.h"", ""y.cppmap"", ""crosstool.cppmap"", ""x.cppmap"", ""y.pic.pcm"", ""x.cc"");
   }
 
   @Test
@@ -1016,9 +1016,8 @@ public class CcLibraryConfiguredTargetTest extends BuildViewTestCase {
     useConfiguration();
     writeSimpleCcLibrary();
     CppModuleMapAction action = getCppModuleMapAction(""//module:map"");
-    assertThat(ActionsTestUtil.baseArtifactNames(action.getDependencyArtifacts())).containsExactly(
-        ""stl.cppmap"",
-        ""crosstool.cppmap"");
+    assertThat(ActionsTestUtil.baseArtifactNames(action.getDependencyArtifacts()))
+        .contains(""crosstool.cppmap"");
     assertThat(artifactsToStrings(action.getPrivateHeaders()))
         .containsExactly(""src module/a.h"");
     assertThat(action.getPublicHeaders()).isEmpty();
@@ -1507,15 +1506,4 @@ public class CcLibraryConfiguredTargetTest extends BuildViewTestCase {
     // Should not crash
     scratchConfiguredTarget(""a"", ""a"", ""cc_library(name='a', hdrs=['a.h'])"");
   }
-
-  @Test
-  public void testStlWithAlias() throws Exception {
-    scratch.file(""a/BUILD"",
-        ""cc_library(name='a')"",
-        ""alias(name='stl', actual=':realstl')"",
-        ""cc_library(name='realstl')"");
-
-    useConfiguration(""--experimental_stl=//a:stl"");
-    getConfiguredTarget(""//a:a"");
-  }
 }
diff --git a/src/test/java/com/google/devtools/build/lib/skylark/SkylarkDefinedAspectsTest.java b/src/test/java/com/google/devtools/build/lib/skylark/SkylarkDefinedAspectsTest.java
index b5b5cb1199..ef4c733d42 100644
--- a/src/test/java/com/google/devtools/build/lib/skylark/SkylarkDefinedAspectsTest.java
+++ b/src/test/java/com/google/devtools/build/lib/skylark/SkylarkDefinedAspectsTest.java
@@ -317,23 +317,23 @@ public class SkylarkDefinedAspectsTest extends AnalysisTestCase {
         ""   s = depset([target.label])"",
         ""   c = depset([ctx.rule.kind])"",
         ""   a = ctx.rule.attr"",
-        ""   if hasattr(a, '_stl') and a._stl:"",
-        ""       s += a._stl.target_labels"",
-        ""       c += a._stl.rule_kinds"",
-        ""   if hasattr(a, '_stl_default') and a._stl_default:"",
-        ""       s += a._stl_default.target_labels"",
-        ""       c += a._stl_default.rule_kinds"",
+        ""   if hasattr(a, '_defaultattr') and a._defaultattr:"",
+        ""       s += a._defaultattr.target_labels"",
+        ""       c += a._defaultattr.rule_kinds"",
+        ""   if hasattr(a, '_cc_toolchain') and a._cc_toolchain:"",
+        ""       s += a._cc_toolchain.target_labels"",
+        ""       c += a._cc_toolchain.rule_kinds"",
         ""   return struct(target_labels = s, rule_kinds = c)"",
         """",
         ""def _rule_impl(ctx):"",
         ""   pass"",
         """",
         ""my_rule = rule(implementation = _rule_impl,"",
-        ""   attrs = { '_stl' : attr.label(default = Label('//test:xxx')) },"",
+        ""   attrs = { '_defaultattr' : attr.label(default = Label('//test:xxx')) },"",
         "")"",
         ""MyAspect = aspect("",
         ""   implementation=_impl,"",
-        ""   attr_aspects=['_stl', '_stl_default'],"",
+        ""   attr_aspects=['_defaultattr', '_cc_toolchain'],"",
         "")"");
     scratch.file(
         ""test/BUILD"",
@@ -349,16 +349,17 @@ public class SkylarkDefinedAspectsTest extends AnalysisTestCase {
     AspectValue aspectValue = analysisResult.getAspects().iterator().next();
     ConfiguredAspect configuredAspect = aspectValue.getConfiguredAspect();
     assertThat(configuredAspect).isNotNull();
-    Object names = configuredAspect.get(""target_labels"");
-    assertThat(names).isInstanceOf(SkylarkNestedSet.class);
-    assertThat(
-            transform(
-                ((SkylarkNestedSet) names).toCollection(),
-                o -> {
-                  assertThat(o).isInstanceOf(Label.class);
-                  return ((Label) o).getName();
-                }))
-        .containsExactly(""stl"", ""xxx"", ""yyy"");
+    Object nameSet = configuredAspect.get(""target_labels"");
+    ImmutableList<String> names = ImmutableList.copyOf(transform(
+        ((SkylarkNestedSet) nameSet).toCollection(),
+        o -> {
+          assertThat(o).isInstanceOf(Label.class);
+          return ((Label) o).getName();
+        }));
+
+    assertThat(names).containsAllOf(""xxx"", ""yyy"");
+    // Third is the C++ toolchain; its name changes between Blaze and Bazel.
+    assertThat(names).hasSize(3);
   }
 
   @Test",Remove the - - experimental_stl = command line option . . Also rearrange dependencies on the STL a bit - - now that it cannot be changed .,Remove the experimental STL option and related code.,"Remove experimental STL support

This commit removes the experimental STL support feature, which allowed users to specify a custom STL implementation using the `--experimental_stl` flag. The feature has been removed as it was considered experimental and may go away in a future release.","This commit removes the "":stl"" attribute and replaces it with ""$stl_default"" in the BazelCcImportRule. It also removes the STL prerequisite of the rule and the corresponding safe implicit outputs function. Additionally, it updates the CcCompilationHelper to handle the new attribute and the BazelCppRuleClasses to remove the STL late-bound default attribute. The commit message could be:

""Refactor BazelCcImportRule to use $stl_default attribute and remove :stl attribute and STL prerequisite""","**Commit Message:**

Remove STL attribute and related logic from Bazel C++ rules, simplifying the rule definitions and configurations."
"diff --git a/presto-client/src/main/java/com/facebook/presto/client/QueryError.java b/presto-client/src/main/java/com/facebook/presto/client/QueryError.java
index d4e565b43d..6bb0d0ee63 100644
--- a/presto-client/src/main/java/com/facebook/presto/client/QueryError.java
+++ b/presto-client/src/main/java/com/facebook/presto/client/QueryError.java
@@ -28,6 +28,8 @@ public class QueryError
     private final String message;
     private final String sqlState;
     private final int errorCode;
+    private final String errorName;
+    private final String errorType;
     private final ErrorLocation errorLocation;
     private final FailureInfo failureInfo;
 
@@ -36,12 +38,16 @@ public class QueryError
             @JsonProperty(""message"") String message,
             @JsonProperty(""sqlState"") String sqlState,
             @JsonProperty(""errorCode"") int errorCode,
+            @JsonProperty(""errorName"") String errorName,
+            @JsonProperty(""errorType"") String errorType,
             @JsonProperty(""errorLocation"") ErrorLocation errorLocation,
             @JsonProperty(""failureInfo"") FailureInfo failureInfo)
     {
         this.message = message;
         this.sqlState = sqlState;
         this.errorCode = errorCode;
+        this.errorName = errorName;
+        this.errorType = errorType;
         this.errorLocation = errorLocation;
         this.failureInfo = failureInfo;
     }
@@ -66,6 +72,20 @@ public class QueryError
         return errorCode;
     }
 
+    @NotNull
+    @JsonProperty
+    public String getErrorName()
+    {
+        return errorName;
+    }
+
+    @NotNull
+    @JsonProperty
+    public String getErrorType()
+    {
+        return errorType;
+    }
+
     @Nullable
     @JsonProperty
     public ErrorLocation getErrorLocation()
@@ -87,6 +107,8 @@ public class QueryError
                 .add(""message"", message)
                 .add(""sqlState"", sqlState)
                 .add(""errorCode"", errorCode)
+                .add(""errorName"", errorName)
+                .add(""errorType"", errorType)
                 .add(""errorLocation"", errorLocation)
                 .add(""failureInfo"", failureInfo)
                 .toString();
diff --git a/presto-main/src/main/java/com/facebook/presto/server/StatementResource.java b/presto-main/src/main/java/com/facebook/presto/server/StatementResource.java
index 64eab7d6e8..8ec9c1c200 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/StatementResource.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/StatementResource.java
@@ -34,6 +34,7 @@ import com.facebook.presto.execution.TaskId;
 import com.facebook.presto.execution.TaskInfo;
 import com.facebook.presto.operator.ExchangeClient;
 import com.facebook.presto.spi.ConnectorSession;
+import com.facebook.presto.spi.ErrorCode;
 import com.facebook.presto.spi.Page;
 import com.facebook.presto.spi.block.Block;
 import com.facebook.presto.spi.type.StandardTypes;
@@ -92,6 +93,7 @@ import static com.facebook.presto.client.PrestoHeaders.PRESTO_SET_SESSION;
 import static com.facebook.presto.server.ResourceUtil.assertRequest;
 import static com.facebook.presto.server.ResourceUtil.createSessionForRequest;
 import static com.facebook.presto.spi.StandardErrorCode.INTERNAL_ERROR;
+import static com.facebook.presto.spi.StandardErrorCode.toErrorType;
 import static com.facebook.presto.util.Failures.toFailure;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -624,15 +626,23 @@ public class StatementResource
                 log.warn(""Query %s in state %s has no failure info"", queryInfo.getQueryId(), state);
                 failure = toFailure(new RuntimeException(format(""Query is %s (reason unknown)"", state))).toFailureInfo();
             }
-            int errorCode;
+
+            ErrorCode errorCode;
             if (queryInfo.getErrorCode() != null) {
-                errorCode = queryInfo.getErrorCode().getCode();
+                errorCode = queryInfo.getErrorCode();
             }
             else {
-                errorCode = INTERNAL_ERROR.toErrorCode().getCode();
+                errorCode = INTERNAL_ERROR.toErrorCode();
                 log.warn(""Failed query %s has no error code"", queryInfo.getQueryId());
             }
-            return new QueryError(failure.getMessage(), null, errorCode, failure.getErrorLocation(), failure);
+            return new QueryError(
+                    failure.getMessage(),
+                    null,
+                    errorCode.getCode(),
+                    errorCode.getName(),
+       ",Add errorName and errorType to QueryError,"""Add errorName and errorType to QueryError and update StatementResource to use ErrorCode""",Added error name and type to QueryError class and updated StatementResource to use ErrorCode.,"""Add errorName and errorType to QueryError and use ErrorCode in StatementResource""

Explanation:
The diff shows the addition of two new fields, `errorName` and `errorType`, to the `QueryError` class in the file `presto-client/src/main/java/com/facebook/presto/client/QueryError.java`. These fields are also added to the constructor and getter methods are implemented.

In the file `presto-main/src/main/java/com/facebook/presto/server/StatementResource.java`, the import statement for `ErrorCode` is added and the variable `errorCode` is changed from `int` to `ErrorCode`. The `getCode()` method is removed from the `errorCode` variable when it is assigned the value of `queryInfo.getErrorCode().getCode()` and `INTERNAL_ERROR.toErrorCode().getCode()`. Instead, `queryInfo.getErrorCode()` and `INTERNAL_ERROR.toErrorCode()` are assigned directly to `errorCode`.

Therefore, it appears that this commit adds support for storing and retrieving the name and type of an error in the `QueryError` class, and updates the `StatementResource` class to use the `ErrorCode` class instead of just an error code integer.",Adding errorName and errorType fields to QueryError class for detailed error information.
"diff --git a/modules/swagger-codegen/src/main/resources/objc/api_doc.mustache b/modules/swagger-codegen/src/main/resources/objc/api_doc.mustache
index c27f6425388..7acaada7e32 100644
--- a/modules/swagger-codegen/src/main/resources/objc/api_doc.mustache
+++ b/modules/swagger-codegen/src/main/resources/objc/api_doc.mustache
@@ -42,29 +42,21 @@ Method | HTTP request | Description
 {{#allParams}}{{{dataType}}} {{paramName}} = {{{example}}}; // {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
 {{/allParams}}
 
-@try
-{ 
-    {{classname}} *apiInstance = [[{{classname}} alloc] init];
-
-{{#summary}}    // {{{.}}}
-{{/summary}}    [apiInstance {{#vendorExtensions.x-objc-operationId}}{{vendorExtensions.x-objc-operationId}}{{/vendorExtensions.x-objc-operationId}}{{^vendorExtensions.x-objc-operationId}}{{nickname}}{{#hasParams}}With{{vendorExtensions.firstParamAltName}}{{/hasParams}}{{^hasParams}}WithCompletionHandler: {{/hasParams}}{{/vendorExtensions.x-objc-operationId}}{{#allParams}}{{#secondaryParam}}
-                  {{paramName}}{{/secondaryParam}}:{{paramName}}{{/allParams}}
-              {{#hasParams}}completionHandler: {{/hasParams}}^({{#returnBaseType}}{{{returnType}}} output, {{/returnBaseType}}NSError* error) {
+{{classname}}*apiInstance = [[{{classname}} alloc] init];
+
+{{#summary}}// {{{.}}}
+{{/summary}}[apiInstance {{#vendorExtensions.x-objc-operationId}}{{vendorExtensions.x-objc-operationId}}{{/vendorExtensions.x-objc-operationId}}{{^vendorExtensions.x-objc-operationId}}{{nickname}}{{#hasParams}}With{{vendorExtensions.firstParamAltName}}{{/hasParams}}{{^hasParams}}WithCompletionHandler: {{/hasParams}}{{/vendorExtensions.x-objc-operationId}}{{#allParams}}{{#secondaryParam}}
+              {{paramName}}{{/secondaryParam}}:{{paramName}}{{/allParams}}
+          {{#hasParams}}completionHandler: {{/hasParams}}^({{#returnBaseType}}{{{returnType}}} output, {{/returnBaseType}}NSError* error) {
 {{#returnType}}
-                            if (output) {
-                                NSLog(@""%@"", output);
-                            }
+                        if (output) {
+                            NSLog(@""%@"", output);
+                        }
 {{/returnType}}
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling {{classname}}->{{operationId}}: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+                        if (error) {
+                            NSLog(@""Error calling {{classname}}->{{operationId}}: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
diff --git a/samples/client/petstore/objc/README.md b/samples/client/petstore/objc/README.md
index 17dda837f12..32999a5e80b 100644
--- a/samples/client/petstore/objc/README.md
+++ b/samples/client/petstore/objc/README.md
@@ -6,7 +6,7 @@ This ObjC package is automatically generated by the [Swagger Codegen](https://gi
 
 - API version: 1.0.0
 - Package version: 
-- Build date: 2016-05-16T09:18:48.757+02:00
+- Build date: 2016-05-18T23:48:57.670+08:00
 - Build package: class io.swagger.codegen.languages.ObjcClientCodegen
 
 ## Requirements
@@ -124,6 +124,12 @@ Class | Method | HTTP request | Description
 ## Documentation For Authorization
 
 
+## api_key
+
+- **Type**: API key
+- **API key parameter name**: api_key
+- **Location**: HTTP header
+
 ## petstore_auth
 
 - **Type**: OAuth
@@ -133,12 +139,6 @@ Class | Method | HTTP request | Description
  - **write:pets**: modify pets in your account
  - **read:pets**: read your pets
 
-## api_key
-
-- **Type**: API key
-- **API key parameter name**: api_key
-- **Location**: HTTP header
-
 
 ## Author
 
diff --git a/samples/client/petstore/objc/SwaggerClient/Api/SWGPetApi.m b/samples/client/petstore/objc/SwaggerClient/Api/SWGPetApi.m
index 409f5b86655..e35421fc520 100644
--- a/samples/client/petstore/objc/SwaggerClient/Api/SWGPetApi.m
+++ b/samples/client/petstore/objc/SwaggerClient/Api/SWGPetApi.m
@@ -376,7 +376,7 @@ NSInteger kSWGPetApiMissingParamErrorCode = 234513;
     NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];
 
     // Authentication setting
-    NSArray *authSettings = @[@""petstore_auth"", @""api_key""];
+    NSArray *authSettings = @[@""api_key"", @""petstore_auth""];
 
     id bodyParam = nil;
     NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
diff --git a/samples/client/petstore/objc/SwaggerClient/Core/SWGConfiguration.m b/samples/client/petstore/objc/SwaggerClient/Core/SWGConfiguration.m
index cd8d6e7aeef..630c751ce74 100644
--- a/samples/client/petstore/objc/SwaggerClient/Core/SWGConfiguration.m
+++ b/samples/client/petstore/objc/SwaggerClient/Core/SWGConfiguration.m
@@ -109,13 +109,6 @@
 
 - (NSDictionary *) authSettings {
     return @{
-               @""petstore_auth"":
-                   @{
-                       @""type"": @""oauth"",
-                       @""in"": @""header"",
-                       @""key"": @""Authorization"",
-                       @""value"": [self getAccessToken]
-                   },
                @""api_key"":
                    @{
                        @""type"": @""api_key"",
@@ -123,6 +116,13 @@
                        @""key"": @""api_key"",
                        @""value"": [self getApiKeyWithPrefix:@""api_key""]
                    },
+               @""petstore_auth"":
+                   @{
+                       @""type"": @""oauth"",
+                       @""in"": @""header"",
+                       @""key"": @""Authorization"",
+                       @""value"": [self getAccessToken]
+                   },
                };
 }
 
diff --git a/samples/client/petstore/objc/docs/SWGPetApi.md b/samples/client/petstore/objc/docs/SWGPetApi.md
index a07f0cf067c..92fb2c4de81 100644
--- a/samples/client/petstore/objc/docs/SWGPetApi.md
+++ b/samples/client/petstore/objc/docs/SWGPetApi.md
@@ -34,23 +34,15 @@ SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 
 SWGPet* body = [[SWGPet alloc] init]; // Pet object that needs to be added to the store (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Add a new pet to the store
-    [apiInstance addPetWithBody:body
-              completionHandler: ^(NSError* error) {
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->addPet: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Add a new pet to the store
+[apiInstance addPetWithBody:body
+          completionHandler: ^(NSError* error) {
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->addPet: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -96,24 +88,16 @@ SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 NSNumber* petId = @789; // Pet id to delete
 NSString* apiKey = @""apiKey_example""; //  (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Deletes a pet
-    [apiInstance deletePetWithPetId:petId
-                  apiKey:apiKey
-              completionHandler: ^(NSError* error) {
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->deletePet: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Deletes a pet
+[apiInstance deletePetWithPetId:petId
+              apiKey:apiKey
+          completionHandler: ^(NSError* error) {
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->deletePet: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -158,26 +142,18 @@ SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 
 NSArray<NSString*>* status = @[@""available""]; // Status values that need to be considered for filter (optional) (default to available)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Finds Pets by status
-    [apiInstance findPetsByStatusWithStatus:status
-              completionHandler: ^(NSArray<SWGPet>* output, NSError* error) {
-                            if (output) {
-                                NSLog(@""%@"", output);
-                            }
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->findPetsByStatus: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Finds Pets by status
+[apiInstance findPetsByStatusWithStatus:status
+          completionHandler: ^(NSArray<SWGPet>* output, NSError* error) {
+                        if (output) {
+                            NSLog(@""%@"", output);
+                        }
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->findPetsByStatus: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -221,26 +197,18 @@ SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 
 NSArray<NSString*>* tags = @[@""tags_example""]; // Tags to filter by (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Finds Pets by tags
-    [apiInstance findPetsByTagsWithTags:tags
-              completionHandler: ^(NSArray<SWGPet>* output, NSError* error) {
-                            if (output) {
-                                NSLog(@""%@"", output);
-                            }
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->findPetsByTags: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Finds Pets by tags
+[apiInstance findPetsByTagsWithTags:tags
+          completionHandler: ^(NSArray<SWGPet>* output, NSError* error) {
+                        if (output) {
+                            NSLog(@""%@"", output);
+                        }
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->findPetsByTags: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -278,37 +246,29 @@ Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error cond
 ```objc
 SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 
-// Configure OAuth2 access token for authorization: (authentication scheme: petstore_auth)
-[apiConfig setAccessToken:@""YOUR_ACCESS_TOKEN""];
-
 // Configure API key authorization: (authentication scheme: api_key)
 [apiConfig setApiKey:@""YOUR_API_KEY"" forApiKeyIdentifier:@""api_key""];
 // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //[apiConfig setApiKeyPrefix:@""Bearer"" forApiKeyIdentifier:@""api_key""];
 
+// Configure OAuth2 access token for authorization: (authentication scheme: petstore_auth)
+[apiConfig setAccessToken:@""YOUR_ACCESS_TOKEN""];
+
 
 NSNumber* petId = @789; // ID of pet that needs to be fetched
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Find pet by ID
-    [apiInstance getPetByIdWithPetId:petId
-              completionHandler: ^(SWGPet* output, NSError* error) {
-                            if (output) {
-                                NSLog(@""%@"", output);
-                            }
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->getPetById: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Find pet by ID
+[apiInstance getPetByIdWithPetId:petId
+          completionHandler: ^(SWGPet* output, NSError* error) {
+                        if (output) {
+                            NSLog(@""%@"", output);
+                        }
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->getPetById: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -323,7 +283,7 @@ Name | Type | Description  | Notes
 
 ### Authorization
 
-[petstore_auth](../README.md#petstore_auth), [api_key](../README.md#api_key)
+[api_key](../README.md#api_key), [petstore_auth](../README.md#petstore_auth)
 
 ### HTTP request headers
 
@@ -352,23 +312,15 @@ SWGConfiguration *apiConfig = [SWGConfiguration sharedConfig];
 
 SWGPet* body = [[SWGPet alloc] init]; // Pet object that needs to be added to the store (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Update an existing pet
-    [apiInstance updatePetWithBody:body
-              completionHandler: ^(NSError* error) {
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->updatePet: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Update an existing pet
+[apiInstance updatePetWithBody:body
+          completionHandler: ^(NSError* error) {
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->updatePet: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -416,25 +368,17 @@ NSString* petId = @""petId_example""; // ID of pet that needs to be updated
 NSString* name = @""name_example""; // Updated name of the pet (optional)
 NSString* status = @""status_example""; // Updated status of the pet (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // Updates a pet in the store with form data
-    [apiInstance updatePetWithFormWithPetId:petId
-                  name:name
-                  status:status
-              completionHandler: ^(NSError* error) {
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->updatePetWithForm: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// Updates a pet in the store with form data
+[apiInstance updatePetWithFormWithPetId:petId
+              name:name
+              status:status
+          completionHandler: ^(NSError* error) {
+                        if (error) {
+                            NSLog(@""Error calling SWGPetApi->updatePetWithForm: %@"", error);
+                        }
+                    }];
 ```
 
 ### Parameters
@@ -484,25 +428,17 @@ NSNumber* petId = @789; // ID of pet to update
 NSString* additionalMetadata = @""additionalMetadata_example""; // Additional data to pass to server (optional)
 NSURL* file = [NSURL fileURLWithPath:@""/path/to/file.txt""]; // file to upload (optional)
 
-@try
-{ 
-    SWGPetApi *apiInstance = [[SWGPetApi alloc] init];
-
-    // uploads an image
-    [apiInstance uploadFileWithPetId:petId
-                  additionalMetadata:additionalMetadata
-                  file:file
-              completionHandler: ^(NSError* error) {
-                            if (error) {
-                                NSLog(@""Error: %@"", error);
-                            }
-                        }];
-}
-@catch (NSException *exception)
-{
-    NSLog(@""Exception when calling SWGPetApi->uploadFile: %@ "", exception.name);
-    NSLog(@""Reason: %@ "", exception.reason);
-}
+SWGPetApi*apiInstance = [[SWGPetApi alloc] init];
+
+// uploads an image
+[apiInstance uploadFileWithPetId:petId
+       ",remove try - catch block from objc sample code,Refactor Objective-C code generation to remove unnecessary try-catch blocks and improve error handling.,"""Update Swagger Codegen to prioritize API key authentication over OAuth""","This commit updates the Objective-C API documentation and code snippets for the Swagger Petstore sample project. It removes the try-catch blocks and exception handling in the code snippets, updates the build date, and reorders the authentication settings in SwaggerClient/Api/SWGPetApi.m and SwaggerClient/Core/SWGConfiguration.m to prioritize 'api\_key' over 'petstore\_auth'. Additionally, it updates the API documentation to reflect these changes.",Refactor Objective-C API documentation by removing try-catch blocks and updating error logging methods for improved readability.
"diff --git a/engine/src/main/java/org/terasology/physics/bullet/BulletPhysics.java b/engine/src/main/java/org/terasology/physics/bullet/BulletPhysics.java
index fd588d8fb..99f299ddc 100644
--- a/engine/src/main/java/org/terasology/physics/bullet/BulletPhysics.java
+++ b/engine/src/main/java/org/terasology/physics/bullet/BulletPhysics.java
@@ -63,6 +63,7 @@
 import org.terasology.physics.CollisionGroup;
 import org.terasology.physics.HitResult;
 import org.terasology.physics.StandardCollisionGroup;
+import org.terasology.physics.bullet.shapes.BulletCollisionShapeFactory;
 import org.terasology.physics.components.RigidBodyComponent;
 import org.terasology.physics.components.TriggerComponent;
 import org.terasology.physics.engine.CharacterCollider;
@@ -73,6 +74,7 @@
 import org.terasology.physics.engine.RigidBody;
 import org.terasology.physics.shapes.BoxShapeComponent;
 import org.terasology.physics.shapes.CapsuleShapeComponent;
+import org.terasology.physics.shapes.CollisionShapeFactory;
 import org.terasology.physics.shapes.CylinderShapeComponent;
 import org.terasology.physics.shapes.HullShapeComponent;
 import org.terasology.physics.shapes.SphereShapeComponent;
@@ -103,6 +105,8 @@ public class BulletPhysics implements PhysicsEngine {
     private final Deque<RigidBodyRequest> insertionQueue = Lists.newLinkedList();
     private final Deque<BulletRigidBody> removalQueue = Lists.newLinkedList();
 
+    private final BulletCollisionShapeFactory collisionShapeFactory = new BulletCollisionShapeFactory();
+
     private final CollisionDispatcher dispatcher;
     private final BroadphaseInterface broadphase;
     private final DiscreteDynamicsWorld discreteDynamicsWorld;
@@ -441,6 +445,11 @@ public float getEpsilon() {
         return BulletGlobals.SIMD_EPSILON;
     }
 
+    @Override
+    public CollisionShapeFactory getCollisionShapeFactory() {
+        return collisionShapeFactory;
+    }
+
     //*******************Private helper methods**************************\\
 
     /**
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletBoxShape.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletBoxShape.java
new file mode 100644
index 000000000..e95c9ac00
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletBoxShape.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+import com.bulletphysics.collision.shapes.BoxShape;
+import com.bulletphysics.linearmath.Transform;
+import org.terasology.math.AABB;
+import org.terasology.math.VecMath;
+import org.terasology.math.geom.Quat4f;
+import org.terasology.math.geom.Vector3f;
+import org.terasology.physics.shapes.CollisionShape;
+
+public class BulletBoxShape extends BulletCollisionShape implements org.terasology.physics.shapes.BoxShape {
+    private final BoxShape boxShape;
+
+    public BulletBoxShape(Vector3f halfExtents) {
+        boxShape = new BoxShape(VecMath.to(halfExtents));
+        underlyingShape = boxShape;
+    }
+
+    @Override
+    public CollisionShape rotate(Quat4f rot) {
+        return null;
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShape.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShape.java
new file mode 100644
index 000000000..2a879d922
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShape.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+
+import com.bulletphysics.collision.shapes.CollisionShape;
+import com.bulletphysics.linearmath.Transform;
+import org.terasology.math.AABB;
+import org.terasology.math.VecMath;
+
+public abstract class BulletCollisionShape implements org.terasology.physics.shapes.CollisionShape {
+    public CollisionShape underlyingShape;
+
+    @Override
+    public AABB getAABB(org.terasology.math.Transform transform) {
+        Transform t = toBulletTransform(transform);
+
+        javax.vecmath.Vector3f min = new javax.vecmath.Vector3f();
+        javax.vecmath.Vector3f max = new javax.vecmath.Vector3f();
+        underlyingShape.getAabb(t, min, max);
+
+        return AABB.createMinMax(VecMath.from(min), VecMath.from(max));
+    }
+
+    protected static Transform toBulletTransform(org.terasology.math.Transform transform) {
+        return new Transform(
+                new javax.vecmath.Matrix4f(VecMath.to(transform.rotation),
+                        VecMath.to(transform.origin), transform.scale)
+        );
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShapeFactory.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShapeFactory.java
new file mode 100644
index 000000000..bc7e55ea9
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCollisionShapeFactory.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+import org.terasology.math.geom.Vector3f;
+import org.terasology.physics.shapes.BoxShape;
+import org.terasology.physics.shapes.CollisionShapeFactory;
+import org.terasology.physics.shapes.CompoundShape;
+import org.terasology.physics.shapes.ConvexHullShape;
+import org.terasology.physics.shapes.SphereShape;
+
+import java.util.List;
+
+public class BulletCollisionShapeFactory implements CollisionShapeFactory {
+    @Override
+    public BoxShape box(Vector3f extents) {
+        return new BulletBoxShape(extents.mul(0.5f));
+    }
+
+    @Override
+    public ConvexHullShape convexHull(List<Vector3f> vertices) {
+        return new BulletConvexHullShape(vertices);
+    }
+
+    @Override
+    public CompoundShape compoundShape() {
+        return new BulletCompoundShape();
+    }
+
+    @Override
+    public SphereShape sphere(float radius) {
+        return new BulletSphereShape(radius);
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCompoundShape.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCompoundShape.java
new file mode 100644
index 000000000..8f3c8d511
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletCompoundShape.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+
+import com.bulletphysics.collision.shapes.CompoundShape;
+import org.terasology.math.geom.Quat4f;
+import org.terasology.physics.shapes.CollisionShape;
+
+public class BulletCompoundShape extends BulletCollisionShape implements org.terasology.physics.shapes.CompoundShape {
+    private final CompoundShape compoundShape;
+
+    public BulletCompoundShape() {
+        compoundShape = new CompoundShape();
+    }
+
+    @Override
+    public void addChildShape(org.terasology.math.Transform transform, CollisionShape collisionShape) {
+        compoundShape.addChildShape(toBulletTransform(transform), ((BulletCollisionShape) collisionShape).underlyingShape);
+    }
+
+    @Override
+    public CollisionShape rotate(Quat4f rot) {
+        return null;
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletConvexHullShape.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletConvexHullShape.java
new file mode 100644
index 000000000..7696c01ff
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletConvexHullShape.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+import com.bulletphysics.collision.shapes.ConvexHullShape;
+import com.bulletphysics.util.ObjectArrayList;
+import org.terasology.math.AABB;
+import org.terasology.math.Transform;
+import org.terasology.math.VecMath;
+import org.terasology.math.geom.Quat4f;
+import org.terasology.math.geom.Vector3f;
+import org.terasology.physics.shapes.CollisionShape;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class BulletConvexHullShape extends BulletCollisionShape implements org.terasology.physics.shapes.ConvexHullShape {
+    private final ConvexHullShape convexHullShape;
+
+    public BulletConvexHullShape(List<Vector3f> vertices) {
+        ObjectArrayList<javax.vecmath.Vector3f> vertexList = new ObjectArrayList<>();
+
+        vertexList.addAll(vertices.stream().map(VecMath::to).collect(Collectors.toList()));
+
+        convexHullShape = new ConvexHullShape(vertexList);
+        underlyingShape = convexHullShape;
+    }
+
+    @Override
+    public CollisionShape rotate(Quat4f rot) {
+        return null;
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletSphereShape.java b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletSphereShape.java
new file mode 100644
index 000000000..a3bd2f34a
--- /dev/null
+++ b/engine/src/main/java/org/terasology/physics/bullet/shapes/BulletSphereShape.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2017 MovingBlocks
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.terasology.physics.bullet.shapes;
+
+import com.bulletphysics.collision.shapes.SphereShape;
+import org.terasology.math.geom.Quat4f;
+import org.terasology.physics.shapes.CollisionShape;
+
+public class BulletSphereShape extends BulletCollisionShape implements org.terasology.physics.shapes.SphereShape {
+    private final SphereShape sphereShape;
+
+    public BulletSphereShape(float radius) {
+        sphereShape = new SphereShape(radius);
+        underlyingShape = sphereShape;
+    }
+
+    @Override
+    public CollisionShape rotate(Quat4f rot) {
+        return null;
+    }
+}
diff --git a/engine/src/main/java/org/terasology/physics/shapes/BoxShape.java b/engine/src/main/java/org/terasology/physics/shapes/BoxShape.java
index 2850a7831..808d4873d 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/BoxShape.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/BoxShape.java
@@ -15,5 +15,5 @@
  */
 package org.terasology.physics.shapes;
 
-public abstract class BoxShape extends CollisionShape {
+public interface BoxShape extends CollisionShape {
 }
diff --git a/engine/src/main/java/org/terasology/physics/shapes/CollisionShape.java b/engine/src/main/java/org/terasology/physics/shapes/CollisionShape.java
index 043f86ec1..0af17bb5a 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/CollisionShape.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/CollisionShape.java
@@ -19,8 +19,8 @@
 import org.terasology.math.Transform;
 import org.terasology.math.geom.Quat4f;
 
-public abstract class CollisionShape {
-    public abstract AABB getAABB(Transform transform);
+public interface CollisionShape {
+    AABB getAABB(Transform transform);
 
-    public abstract CollisionShape rotate(Quat4f rot);
+    CollisionShape rotate(Quat4f rot);
 }
diff --git a/engine/src/main/java/org/terasology/physics/shapes/CollisionShapeFactory.java b/engine/src/main/java/org/terasology/physics/shapes/CollisionShapeFactory.java
index 8d874b381..caa31dc85 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/CollisionShapeFactory.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/CollisionShapeFactory.java
@@ -24,7 +24,9 @@ public interface CollisionShapeFactory {
 
     ConvexHullShape convexHull(List<Vector3f> vertices);
 
-    BoxShape defaultCube();
+    default BoxShape defaultCube() {
+        return box(Vector3f.one());
+    }
 
     CompoundShape compoundShape();
 
diff --git a/engine/src/main/java/org/terasology/physics/shapes/CompoundShape.java b/engine/src/main/java/org/terasology/physics/shapes/CompoundShape.java
index c5bd4e22a..4c7acc4ad 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/CompoundShape.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/CompoundShape.java
@@ -15,8 +15,8 @@
  */
 package org.terasology.physics.shapes;
 
-import com.bulletphysics.linearmath.Transform;
+import org.terasology.math.Transform;
 
-public abstract class CompoundShape extends CollisionShape {
-    public abstract void addChildShape(Transform transform, CollisionShape collisionShape);
+public interface CompoundShape extends CollisionShape {
+    void addChildShape(Transform transform, CollisionShape collisionShape);
 }
diff --git a/engine/src/main/java/org/terasology/physics/shapes/ConvexHullShape.java b/engine/src/main/java/org/terasology/physics/shapes/ConvexHullShape.java
index 81e8d414d..2376d6391 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/ConvexHullShape.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/ConvexHullShape.java
@@ -15,5 +15,5 @@
  */
 package org.terasology.physics.shapes;
 
-public abstract class ConvexHullShape extends CollisionShape {
+public interface ConvexHullShape extends CollisionShape {
 }
diff --git a/engine/src/main/java/org/terasology/physics/shapes/SphereShape.java b/engine/src/main/java/org/terasology/physics/shapes/SphereShape.java
index 4e7392d5e..0b3af19b4 100644
--- a/engine/src/main/java/org/terasology/physics/shapes/SphereShape.java
+++ b/engine/src/main/java/org/terasology/physics/shapes/SphereShape.java
@@ -15,5 +15,5 @@
  */
 package org.terasology.physics.shapes;
 
-public abstract class SphereShape extends CollisionShape {
+public interface SphereShape extends CollisionShape {
 }
diff --git a/engine/src/main/java/org/terasology/world/block/shapes/JsonBlockShapeLoader.java b/engine/src/main/java/org/terasology/world/block/shapes/JsonBlockShapeLoader.java
index a6b25d0cc..ba562760a 100644
--- a/engine/src/main/java/org/terasology/world/block/shapes/JsonBlockShapeLoader.java
+++ b/engine/src/main/java/org/terasology/world/block/shapes/JsonBlockShapeLoader.java
@@ -16,7 +16,6 @@
 
 package org.terasology.world.block.shapes;
 
-import com.bulletphysics.linearmath.Transform;
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.gson.Gson;
@@ -34,6 +33,7 @@
 import org.terasology.assets.format.AssetDataFile;
 import org.terasology.assets.module.annotations.RegisterAssetFileFormat;
 import org.terasology.math.Rotation;
+import org.terasology.math.Transform;
 import org.terasology.math.VecMath;
 import org.terasology.math.geom.Vector2f;
 import org.terasology.math.geom.Vector3f;
@@ -213,7 +213,7 @@ private ColliderInfo processCompoundShape(List<ColliderInfo> colliders) {
             CompoundShape collisionShape = physicsEngine.getCollisionShapeFactory().compoundShape();
 
             for (ColliderInfo collider : colliders) {
-                Transform transform = new Transform(new javax.vecmath.Matrix4f(VecMath.to(Rotation.none().getQuat4f()), VecMath.to(collider.offset), 1.0f));
+                Transform transform = new Transform(collider.offset, Rotation.none().getQuat4f(), 1.0f);
                 collisionShape.addChildShape(transform, collider.collisionShape);
             }
             return new ColliderInfo(new Vector3f(), collisionShape);","Convert collision shapes to interfaces , Add Bullet collision shapes","""Implement Bullet Physics Collision Shapes and Factory""","""Added Bullet Physics library integration and shape factory implementation""","""Add BulletCollisionShapeFactory and related classes for Bullet physics engine""

This commit adds a new factory class for creating collision shapes specifically for the Bullet physics engine. It also includes new classes for representing different types of collision shapes, such as boxes and spheres, that extend a base class BulletCollisionShape and implement the CollisionShape interface. Additionally, the BulletPhysics class has been updated to use this new factory for creating collision shapes.","Added Bullet collision shapes and factory, converted abstract classes to interfaces in physics shapes, updated JsonBlockShapeLoader accordingly."
"diff --git a/src/test/groovy/graphql/language/NodeVisitorStubTest.groovy b/src/test/groovy/graphql/language/NodeVisitorStubTest.groovy
index a6969520..5732dbbf 100644
--- a/src/test/groovy/graphql/language/NodeVisitorStubTest.groovy
+++ b/src/test/groovy/graphql/language/NodeVisitorStubTest.groovy
@@ -140,5 +140,59 @@ class NodeVisitorStubTest extends Specification {
         control == TraversalControl.QUIT
     }
 
+    def ""type definitions call visitTypeDefinition by default""() {
+        given:
+        NodeVisitorStub nodeVisitorStub = Spy(NodeVisitorStub, constructorArgs: [])
+        UnionTypeDefinition unionTypeDefinition = new UnionTypeDefinition("""")
+        InputObjectTypeDefinition inputObjectTypeDefinition = new InputObjectTypeDefinition("""")
+        ScalarTypeDefinition scalarTypeDefinition = new ScalarTypeDefinition("""")
+        InterfaceTypeDefinition interfaceTypeDefinition = new InterfaceTypeDefinition("""")
+        EnumTypeDefinition enumTypeDefinition = new EnumTypeDefinition("""")
+        ObjectTypeDefinition objectTypeDefinition = new ObjectTypeDefinition("""")
+        TraverserContext context = Mock(TraverserContext)
+
+        when:
+        def control = nodeVisitorStub.visitUnionTypeDefinition(unionTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitTypeDefinition(unionTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitInputObjectTypeDefinition(inputObjectTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitTypeDefinition(inputObjectTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitInputObjectTypeDefinition(inputObjectTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitTypeDefinition(inputObjectTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitScalarTypeDefinition(scalarTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitTypeDefinition(scalarTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitInterfaceTypeDefinition(interfaceTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitTypeDefinition(interfaceTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitEnumTypeDefinition(enumTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitEnumTypeDefinition(enumTypeDefinition, context) >> TraversalControl.QUIT
+        control == TraversalControl.QUIT
+
+        when:
+        control = nodeVisitorStub.visitObjectTypeDefinition(objectTypeDefinition, context)
+        then:
+        1 * nodeVisitorStub.visitObjectTypeDefinition(objectTypeDefinition, context) >> TraversalControl.QUIT
+     ",fix test,"""Add test for default behavior of type definitions in NodeVisitorStub""","""Add test cases for type definitions calling visitTypeDefinition by default in NodeVisitorStub""","""Add tests for type definitions calling visitTypeDefinition by default in NodeVisitorStubTest.groovy""

This commit message describes the addition of new test cases in the NodeVisitorStubTest.groovy file. These tests ensure that the visitTypeDefinition method is called by default when dealing with various type definitions such as UnionTypeDefinition, InputObjectTypeDefinition, ScalarTypeDefinition, InterfaceTypeDefinition, and ObjectTypeDefinition. The tests also verify that the TraversalControl returns the expected value, which is TraversalControl.QUIT in these cases.",Add tests for default type definition visits in NodeVisitorStub to verify method call and TraversalControl behavior.
"diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
index f017ae64ad..e52bb71d2a 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
@@ -66,21 +66,9 @@ public class DashManifestParser extends DefaultHandler
   private static final Pattern CEA_708_ACCESSIBILITY_PATTERN =
       Pattern.compile(""([1-9]|[1-5][0-9]|6[0-3])=.*"");
 
-  private final String contentId;
   private final XmlPullParserFactory xmlParserFactory;
 
-  /**
-   * Equivalent to calling {@code new DashManifestParser(null)}.
-   */
   public DashManifestParser() {
-    this(null);
-  }
-
-  /**
-   * @param contentId An optional content identifier to include in the parsed manifest.
-   */
-  public DashManifestParser(String contentId) {
-    this.contentId = contentId;
     try {
       xmlParserFactory = XmlPullParserFactory.newInstance();
     } catch (XmlPullParserException e) {
@@ -355,8 +343,9 @@ public class DashManifestParser extends DefaultHandler
     // Build the representations.
     List<Representation> representations = new ArrayList<>(representationInfos.size());
     for (int i = 0; i < representationInfos.size(); i++) {
-      representations.add(buildRepresentation(representationInfos.get(i), contentId,
-          drmSchemeType, drmSchemeDatas, inbandEventStreams));
+      representations.add(
+          buildRepresentation(
+              representationInfos.get(i), drmSchemeType, drmSchemeDatas, inbandEventStreams));
     }
 
     return buildAdaptationSet(id, contentType, representations, accessibilityDescriptors,
@@ -664,8 +653,10 @@ public class DashManifestParser extends DefaultHandler
         id, label, containerMimeType, sampleMimeType, codecs, bitrate, selectionFlags, language);
   }
 
-  protected Representation buildRepresentation(RepresentationInfo representationInfo,
-      String contentId, String extraDrmSchemeType, ArrayList<SchemeData> extraDrmSchemeDatas,
+  protected Representation buildRepresentation(
+      RepresentationInfo representationInfo,
+      String extraDrmSchemeType,
+      ArrayList<SchemeData> extraDrmSchemeDatas,
       ArrayList<Descriptor> extraInbandEventStreams) {
     Format format = representationInfo.format;
     String drmSchemeType = representationInfo.drmSchemeType != null
@@ -679,8 +670,13 @@ public class DashManifestParser extends DefaultHandler
     }
     ArrayList<Descriptor> inbandEventStreams = representationInfo.inbandEventStreams;
     inbandEventStreams.addAll(extraInbandEventStreams);
-    return Representation.newInstance(contentId, representationInfo.revisionId, format,
-        representationInfo.baseUrl, representationInfo.segmentBase, inbandEventStreams);
+    return Representation.newInstance(
+        /* contentId= */ null,
+        representationInfo.revisionId,
+        format,
+        representationInfo.baseUrl,
+        representationInfo.segmentBase,
+        inbandEventStreams);
   }
 
   // SegmentBase, SegmentList and SegmentTemplate parsing.",Remove ability to inject content - id via DashManifestParser .,"""Remove contentId from DashManifestParser and Representation""","""Remove contentId from DashManifestParser constructor and buildRepresentation method.""","It seems like you're sharing a code diff for the class `DashManifestParser` in a Java project. The changes include:

1. Removing the `contentId` field and its constructor parameter.
2. Modifying the `buildRepresentation` method to remove the `contentId` parameter and passing `null` instead of `contentId` when creating a new instance of `Representation`.

The commit message should summarize these changes. Here's a suggestion:

""Remove contentId from DashManifestParser and update buildRepresentation accordingly""

This message clearly states what has been changed and why, which can be helpful for other developers or for future reference. If there's a specific reason or a related issue number, you might want to include that as well.",Remove contentId parameter and related code from DashManifestParser for simplification and clarity.
"diff --git a/src/site/markdown/general/suppression.md b/src/site/markdown/general/suppression.md
index af3dfb57d..c5aab679b 100644
--- a/src/site/markdown/general/suppression.md
+++ b/src/site/markdown/general/suppression.md
@@ -73,7 +73,7 @@ HTML version of the report. The other common scenario would be to ignore all CVE
 </suppressions>
 ```
 
-The full schema for suppression files can be found here: [suppression.xsd](https://github.com/jeremylong/DependencyCheck/blob/master/dependency-check-core/src/main/resources/schema/suppression.xsd ""Suppression Schema"")
+The full schema for suppression files can be found here: [suppression.xsd](https://github.com/jeremylong/DependencyCheck/blob/master/core/src/main/resources/schema/suppression.xsd ""Suppression Schema"")
 
 Please see the appropriate configuration option in each interfaces configuration guide:
 ",Modifying file path for schema file link .,"""Update suppression schema URL in documentation""","""Update suppression schema link to reflect core module location""","""Update suppression schema location in suppression.md""

This commit updates the link to the suppression schema file in the suppression.md document. The old link pointed to the schema file in the `master` branch of the `dependency-check-core` directory, while the new link points to the schema file in the `master` branch of the `core` directory.","""Update suppression schema URL to the correct path in suppression.md"""
"diff --git a/VERSION.txt b/VERSION.txt
index c115cb7af6..04e8e877b2 100644
--- a/VERSION.txt
+++ b/VERSION.txt
@@ -1,5 +1,6 @@
 jetty-7.0.0.RC4-SNAPSHOT 
  + 286185 Implement ability for JSON implementation to automatically register convertors
+ + Added discoverable start options
 
 jetty-7.0.0.RC3 7 August 2009
  + 277403 remove system properties
diff --git a/jetty-distribution/pom.xml b/jetty-distribution/pom.xml
index 3e0ec27c00..5689209fde 100644
--- a/jetty-distribution/pom.xml
+++ b/jetty-distribution/pom.xml
@@ -44,13 +44,13 @@
                        dest=""${assembly.directory}/lib/servlet-api-2.5.jar""
                        usetimestamp=""true""
                        verbose=""true"" />
-		  <mkdir dir=""${assembly.directory}/lib/jetty-jndi""/>
+		  <mkdir dir=""${assembly.directory}/lib/jndi""/>
                   <get src=""http://download.eclipse.org/tools/orbit/downloads/drops/R20090529135407/bundles/javax.activation_1.1.0.v200905021805.jar""
-                       dest=""${assembly.directory}/lib/jetty-jndi/activation-1.1.jar""
+                       dest=""${assembly.directory}/lib/jndi/activation-1.1.jar""
                        usetimestamp=""true""
                        verbose=""true"" />
                   <get src=""http://download.eclipse.org/tools/orbit/downloads/drops/R20090529135407/bundles/javax.mail_1.4.0.v200905040518.jar""
-                       dest=""${assembly.directory}/lib/jetty-jndi/mail-1.4.jar""
+                       dest=""${assembly.directory}/lib/jndi/mail-1.4.jar""
                        usetimestamp=""true""
                        verbose=""true"" />
                 </tasks>
@@ -341,7 +341,7 @@
                   <type>jar</type>
                   <overWrite>true</overWrite>
                   <includes>**</includes>
-                  <outputDirectory>${assembly.directory}/lib/security</outputDirectory>
+                  <outputDirectory>${assembly.directory}/lib</outputDirectory>
                 </artifactItem>
                 <artifactItem>
                   <groupId>org.eclipse.jetty</groupId>
@@ -384,53 +384,43 @@
               </artifactItems>
             </configuration>
           </execution>
-            <execution>
+	  <!--
+          <execution>
             <phase>generate-resources</phase>
             <goals>
               <goal>copy</goal>
             </goals>
             <configuration>
               <artifactItems>
-               <artifactItem>
-                  <groupId>javax.mail</groupId>
-                  <artifactId>mail</artifactId>
-                  <version>${mail-version}</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-jndi</outputDirectory>
-               </artifactItem>
-               <artifactItem>
-                  <groupId>javax.activation</groupId>
-                  <artifactId>activation</artifactId>
-                  <version>${activation-version}</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-jndi</outputDirectory>
-               </artifactItem>
                <artifactItem>
                   <groupId>org.apache.geronimo.specs</groupId>
                   <artifactId>geronimo-annotation_1.0_spec</artifactId>
                   <version>1.1.1</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-annotations</outputDirectory>
+                  <outputDirectory>${assembly.directory}/lib/annotations</outputDirectory>
               </artifactItem>
               <artifactItem>
                   <groupId>asm</groupId>
                   <artifactId>asm-commons</artifactId>
                   <version>3.1</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-annotations</outputDirectory>
+                  <outputDirectory>${assembly.directory}/lib/annotations</outputDirectory>
               </artifactItem>
               <artifactItem>
                   <groupId>asm</groupId>
                   <artifactId>asm</artifactId>
                   <version>3.1</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-annotations</outputDirectory>
+                  <outputDirectory>${assembly.directory}/lib/annotations</outputDirectory>
               </artifactItem>
               <artifactItem>
                   <groupId>asm</groupId>
                   <artifactId>asm-tree</artifactId>
                   <version>3.1</version>
-                  <outputDirectory>${assembly.directory}/lib/jetty-annotations</outputDirectory>
+                  <outputDirectory>${assembly.directory}/lib/annotations</outputDirectory>
               </artifactItem>
               </artifactItems>
             </configuration>
           </execution>
-          </executions>
+	  -->
+        </executions>
       </plugin>     
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
diff --git a/jetty-policy/src/main/config/lib/security/jetty.policy b/jetty-policy/src/main/config/lib/policy/jetty.policy
similarity index 100%
rename from jetty-policy/src/main/config/lib/security/jetty.policy
rename to jetty-policy/src/main/config/lib/policy/jetty.policy
diff --git a/jetty-start/src/main/java/org/eclipse/jetty/start/Config.java b/jetty-start/src/main/java/org/eclipse/jetty/start/Config.java
index 3bc7feaabe..cdc5b7be2b 100644
--- a/jetty-start/src/main/java/org/eclipse/jetty/start/Config.java
+++ b/jetty-start/src/main/java/org/eclipse/jetty/start/Config.java
@@ -196,9 +196,7 @@ public class Config
         {
             Classpath cp = _classpaths.get(section);
             if (cp == null)
-            {
                 cp = new Classpath();
-            }
 
             boolean added = cp.addComponent(component);
             _classpaths.put(section,cp);
@@ -247,8 +245,11 @@ public class Config
 
         for (File entry : entries)
         {
-            if (entry.isDirectory() && recurse)
-                addJars(sections,entry,recurse);
+            if (entry.isDirectory())
+            {
+                if (recurse)
+                    addJars(sections,entry,recurse);
+            }
             else
             {
                 String name = entry.getName().toLowerCase();
@@ -561,24 +562,35 @@ public class Config
                 if (trim.startsWith(""["") && trim.endsWith(""]""))
                 {
                     String identifier = trim.substring(1,trim.length() - 1);
-                    if (identifier.charAt(0) == '=')
+
+                    // Normal case: section identifier (possibly separated by commas)
+                    sections = Arrays.asList(identifier.split("",""));
+                    List<String> section_ids=new ArrayList<String>();
+                    
+                    // Ensure section classpaths exist
+                    for (String sectionId : sections)
                     {
-                        // Special case: dynamic/discovered option section identifier.
-                        processDynamicSectionIdentifier(identifier.substring(1));
+                        if (sectionId.charAt(0) == '=')
+                            continue;
+
+                        if (!_classpaths.containsKey(sectionId))
+                            _classpaths.put(sectionId,new Classpath());
+                        
+                        section_ids.add(sectionId);
                     }
-                    else
+                    
+
+                    // Process Dynamic
+                    for (String sectionId : sections)
                     {
-                        // Normal case: section identifier (possibly separated by commas)
-                        sections = Arrays.asList(identifier.split("",""));
-                        // Ensure section classpaths exist
-                        for (String sectionId : sections)
-                        {
-                            if (!_classpaths.containsKey(sectionId))
-                            {
-                                _classpaths.put(sectionId,new Classpath());
-                            }
-                        }
+                        if (sectionId.charAt(0) != '=')
+                            continue;
+                        
+                        section_ids = processDynamicSectionIdentifier(sectionId.substring(1),section_ids);
                     }
+                    
+                    sections = section_ids;
+                    
                     continue;
                 }
 
@@ -820,19 +832,42 @@ public class Config
         }
     }
 
-    private void processDynamicSectionIdentifier(String dynamicPathId) throws IOException
+    private List<String> processDynamicSectionIdentifier(String dynamicPathId,List<String> sections) throws IOException
     {
-        if (!dynamicPathId.endsWith(""/*""))
+        String section=null;
+        String rawPath;
+        boolean deep;
+        
+        if (dynamicPathId.endsWith(""/*""))
         {
-            String msg = ""Dynamic Section IDs must end in \""/*\"" to work.  Ignoring: [="" + dynamicPathId + ""]"";
-            System.err.println(msg);
+            deep=false;
+            rawPath = fixPath(dynamicPathId.substring(0,dynamicPathId.length() - 1));
+        }
+        else if (dynamicPathId.endsWith(""/**""))
+        {
+            deep=true;
+            rawPath = fixPath(dynamicPathId.substring(0,dynamicPathId.length() - 2));
+        }
+        else if (dynamicPathId.indexOf('/')>1 && !dynamicPathId.endsWith(""/""))
+        {
+            section=dynamicPathId.substring(dynamicPathId.lastIndexOf('/')+1);
+            rawPath=dynamicPathId.substring(0,dynamicPathId.lastIndexOf('/'));
+            deep=true;
+        }
+        else 
+        {
+            String msg = ""Illegal dynamic path ["" + dynamicPathId + ""]"";
             throw new IOException(msg);
         }
-
-        String rawPath = fixPath(dynamicPathId.substring(0,dynamicPathId.length() - 1));
+        
         File parentDir = new File(expand(rawPath));
-        debug(""Adding dynamic section entries based on path: "" + parentDir);
-        File dirs[] = parentDir.listFiles(new FileFilter()
+        if (!parentDir.exists())
+            return sections;
+        debug(""dynamic: "" + parentDir);
+        
+        File dirs[] = section!=null
+        ?new File[]{new File(parentDir,section)}   
+        :parentDir.listFiles(new FileFilter()
         {
             public boolean",Added discoverable start options .,"""Jetty-7.0.0.RC4-SNAPSHOT: Implement ability for JSON implementation to automatically register convertors, added discoverable start options, and various fixes to jetty-distribution/pom.xml and jetty-start/src/main/java/org/eclipse/jetty/start/Config.java""","""Refactor Jetty configuration and distribution to improve discoverability and flexibility""","The commit message should be:

```
Added discoverable start options
```

This commit message is derived from the second line of the VERSION.txt file diff, which indicates that the change involves adding discoverable start options.","Refactored JSON convertors registration, added discoverable start options, and improved dynamic section processing in `Config.java`."
"diff --git a/build.gradle b/build.gradle
index 65e6a69dbc..f9de5d1f17 100644
--- a/build.gradle
+++ b/build.gradle
@@ -419,6 +419,22 @@ subprojects {
         ""-Xlint:constant"",
         ""-Xlint:unused""
       ]
+
+      // Inline more aggressively when compiling the `core` jar since it's not meant to be used as a library.
+      // More specifically, inline classes from the Scala library so that we can inline methods like `Option.exists`
+      // and avoid lambda allocations. This is only safe if the Scala library version is the same at compile time
+      // and runtime. We cannot guarantee this for libraries like kafka streams, so only inline classes from the
+      // Kafka project in that case.
+      List<String> inlineFrom
+      if (project.name.equals('core'))
+        inlineFrom = [""-opt-inline-from:scala.**"", ""-opt-inline-from:kafka.**"", ""-opt-inline-from:org.apache.kafka.**""]
+      else
+        inlineFrom = [""-opt-inline-from:org.apache.kafka.**""]
+
+      // Somewhat confusingly, `-opt:l:inline` enables all optimizations. `inlineFrom` configures what can be inlined.
+      // See https://www.lightbend.com/blog/scala-inliner-optimizer for more information about the optimizer.
+      scalaCompileOptions.additionalParameters += [""-opt:l:inline""]
+      scalaCompileOptions.additionalParameters += inlineFrom
     }
     
   // these options are valid for Scala versions < 2.13 only
diff --git a/core/src/main/scala/kafka/log/AbstractIndex.scala b/core/src/main/scala/kafka/log/AbstractIndex.scala
index 242d074530..7dca8120c3 100644
--- a/core/src/main/scala/kafka/log/AbstractIndex.scala
+++ b/core/src/main/scala/kafka/log/AbstractIndex.scala
@@ -405,8 +405,8 @@ abstract class AbstractIndex[K, V](@volatile var file: File, val baseOffset: Lon
 
   private def compareIndexEntry(indexEntry: IndexEntry, target: Long, searchEntity: IndexSearchEntity): Int = {
     searchEntity match {
-      case IndexSearchType.KEY => indexEntry.indexKey.compareTo(target)
-      case IndexSearchType.VALUE => indexEntry.indexValue.compareTo(target)
+      case IndexSearchType.KEY => java.lang.Long.compare(indexEntry.indexKey, target)
+      case IndexSearchType.VALUE => java.lang.Long.compare(indexEntry.indexValue, target)
     }
   }
 
diff --git a/gradle/spotbugs-exclude.xml b/gradle/spotbugs-exclude.xml
index 07ca2b450e..70ea5b0682 100644
--- a/gradle/spotbugs-exclude.xml
+++ b/gradle/spotbugs-exclude.xml
@@ -104,10 +104,8 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read
     </Match>
 
     <Match>
-        <!-- Suppression for the equals() for extensiom methods. -->
-        <Or>
-            <Class name=""kafka.api.package$ElectLeadersRequestOps""/>
-        </Or>
+        <!-- Suppression for the equals() for extension methods. -->
+        <Class name=""kafka.api.package$ElectLeadersRequestOps""/>
         <Bug pattern=""EQ_UNUSUAL""/>
     </Match>
 
@@ -118,6 +116,59 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read
         <Bug pattern=""BC_VACUOUS_INSTANCEOF""/>
     </Match>
 
+    <Match>
+        <!-- A spurious null check after inlining by the scalac optimizer confuses spotBugs -->
+        <Class name=""kafka.log.Log""/>
+        <Bug pattern=""NP_NULL_ON_SOME_PATH_EXCEPTION""/>
+    </Match>
+
+    <Match>
+        <!-- A spurious null check after inlining by the scalac optimizer confuses spotBugs -->
+        <Class name=""kafka.tools.StateChangeLogMerger$""/>
+        <Bug pattern=""NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE""/>
+    </Match>
+
+    <Match>
+        <!-- Unboxing to Int to make scalac happy makes spotBugs unhappy -->
+        <Class name=""kafka.tools.ConsoleConsumer$ConsumerConfig""/>
+        <Bug pattern=""BX_UNBOXING_IMMEDIATELY_REBOXED""/>
+    </Match>
+
+    <Match>
+        <!-- Uncallable anonymous methods are left behind after inlining by scalac 2.12, fixed in 2.13 -->
+        <Source name=""AdminUtils.scala""/>
+        <Package name=""kafka.admin""/>
+        <Bug pattern=""UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS""/>
+    </Match>
+
+    <Match>
+        <!-- Uncallable anonymous methods are left behind after inlining by scalac 2.12, fixed in 2.13 -->
+        <Source name=""ControllerContext.scala""/>
+        <Package name=""kafka.controller""/>
+        <Bug pattern=""UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS""/>
+    </Match>
+
+    <Match>
+        <!-- Uncallable anonymous methods are left behind after inlining by scalac 2.12, fixed in 2.13 -->
+        <Source name=""LogManager.scala""/>
+        <Package name=""kafka.log""/>
+        <Bug pattern=""UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS""/>
+    </Match>
+
+    <Match>
+        <!-- Uncallable anonymous methods are left behind after inlining by scalac 2.12, fixed in 2.13 -->
+        <Source name=""DelayedElectLeader.scala""/>
+        <Package name=""kafka.server""/>
+        <Bug pattern=""UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS""/>
+    </Match>
+
+    <Match>
+        <!-- Uncallable anonymous methods are left behind after inlining by scalac 2.12, fixed in 2.13 -->
+        <Source name=""AdminZkClient.scala""/>
+        <Package name=""kafka.zk""/>
+        <Bug pattern=""UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS""/>
+    </Match>
+
     <Match>
         <!-- Suppress a warning about some static initializers in Schema using instances of a
              subclass. -->",Enable scalac optimizer ( <issue_id> ) .,"""Optimize Scala compilation and fix SpotBugs warnings""

This commit message is short and to the point, it describes the main changes made in the commit. The changes include optimizing Scala compilation by inlining more aggressively and fixing several SpotBugs warnings that were caused by the optimizer.","""Optimize Scala compilation for core jar and suppress SpotBugs warnings""","""Enable more aggressive inlining when compiling the `core` jar and fix comparison in `AbstractIndex`""

Explanation:

* The build.gradle file was updated to enable more aggressive inlining when compiling the `core` jar. This is achieved by passing additional parameters to the Scala compiler.
* The AbstractIndex.scala file was updated to fix the comparison in the `compareIndexEntry` method. The `compareTo` method was replaced with `java.lang.Long.compare` for both `IndexSearchType.KEY` and `IndexSearchType.VALUE` cases.
* The spotbugs-exclude.xml file was updated with several new entries to suppress specific warnings generated by SpotBugs. These warnings seem to be related to Scala code, such as uncallable methods of anonymous classes, null checks after inlining by the Scala compiler, and unboxing to Int to make the Scala compiler happy.","The commit message in at most 20 words should be:

""Add aggressive inlining for core, optimize scala comparisons, and suppress spotbugs warnings related to Scala optimizer inlining."""
"diff --git a/server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultPullRequestManager.java b/server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultPullRequestManager.java
index 4907a7799..5cd1d1a21 100644
--- a/server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultPullRequestManager.java
+++ b/server-core/src/main/java/io/onedev/server/entitymanager/impl/DefaultPullRequestManager.java
@@ -660,22 +660,24 @@ public class DefaultPullRequestManager extends AbstractEntityManager<PullRequest
 	@Sessional
 	protected void checkAsync(Collection<PullRequest> requests) {
 		Collection<Long> requestIds = requests.stream().map(it->it.getId()).collect(Collectors.toList());
-		transactionManager.runAfterCommit(new Runnable() {
-
-			@Override
-			public void run() {
-				dao.getSessionManager().runAsync(new Runnable() {
-
-					@Override
-					public void run() {
-				        for (Long requestId: requestIds)
-				        	check(load(requestId));
-					}
-					
-				}, SecurityUtils.getSubject());
-			}
-			
-		});
+		if (!requestIds.isEmpty()) {
+			transactionManager.runAfterCommit(new Runnable() {
+	
+				@Override
+				public void run() {
+					dao.getSessionManager().runAsync(new Runnable() {
+	
+						@Override
+						public void run() {
+					        for (Long requestId: requestIds)
+					        	check(load(requestId));
+						}
+						
+					}, SecurityUtils.getSubject());
+				}
+				
+			});
+		}
 	}
 	
 	@Transactional
diff --git a/server-core/src/main/java/io/onedev/server/web/component/markdown/MarkdownEditor.java b/server-core/src/main/java/io/onedev/server/web/component/markdown/MarkdownEditor.java
index 085fe681a..f0e1ce411 100644
--- a/server-core/src/main/java/io/onedev/server/web/component/markdown/MarkdownEditor.java
+++ b/server-core/src/main/java/io/onedev/server/web/component/markdown/MarkdownEditor.java
@@ -32,6 +32,7 @@ import org.apache.wicket.markup.html.basic.Label;
 import org.apache.wicket.markup.html.form.FormComponentPanel;
 import org.apache.wicket.markup.html.form.TextArea;
 import org.apache.wicket.model.IModel;
+import org.apache.wicket.model.LoadableDetachableModel;
 import org.apache.wicket.model.Model;
 import org.apache.wicket.request.IRequestParameters;
 import org.apache.wicket.request.cycle.RequestCycle;
@@ -165,7 +166,14 @@ public class MarkdownEditor extends FormComponentPanel<String> {
 
 		if (initialSplit) {
 			container.add(AttributeAppender.append(""class"", ""split-mode""));
-			preview.add(new Label(""rendered"", renderInput(getModelObject())) {
+			preview.add(new Label(""rendered"", new LoadableDetachableModel<String>() {
+
+				@Override
+				protected String load() {
+					return renderInput(input.getConvertedInput());
+				}
+				
+			}) {
 
 				@Override
 				public void renderHead(IHeaderResponse response) {
diff --git a/server-core/src/main/java/io/onedev/server/web/component/markdown/markdown.js b/server-core/src/main/java/io/onedev/server/web/component/markdown/markdown.js
index 79a47bff5..d49f3f30b 100644
--- a/server-core/src/main/java/io/onedev/server/web/component/markdown/markdown.js
+++ b/server-core/src/main/java/io/onedev/server/web/component/markdown/markdown.js
@@ -102,7 +102,6 @@ onedev.server.markdown = {
 			$splitLink.addClass(""active"");
 			onLayoutChange();
 			callback(""render"", $input.val());
-			console.log(onedev.server.markdown.getCookiePrefix($container)+"".split"");
 			Cookies.set(onedev.server.markdown.getCookiePrefix($container)+"".split"", true, {expires: Infinity});
 		});
 		",Fix the issue that markdown preview is not rendering when save issue and .,"""Fixed async pull request check and markdown editor rendering""","""Improved Markdown Editor and Pull Request Manager functionality""

This commit message is concise and accurately reflects the changes made in the code. It mentions the two main components that were improved: Markdown Editor and Pull Request Manager.","""Added null check before running async task in DefaultPullRequestManager and updated MarkdownEditor to use LoadableDetachableModel for rendered preview""

Explanation:

In DefaultPullRequestManager.java, a null check was added before running the async task to avoid unnecessary execution when there are no requests to process.

In MarkdownEditor.java, the Label ""rendered"" was updated to use a LoadableDetachableModel for its model. This allows the rendered preview to be loaded only when necessary, improving performance.

Lastly, in markdown.js, a console log statement was removed, which might have been used for debugging purposes.",Optimize asynchronous pull request checking and improve Markdown preview rendering dynamics by using LoadableDetachableModel.
"diff --git a/modules/swagger-codegen/src/main/resources/clojure/project.mustache b/modules/swagger-codegen/src/main/resources/clojure/project.mustache
index df83142e428..0fe990d02c8 100644
--- a/modules/swagger-codegen/src/main/resources/clojure/project.mustache
+++ b/modules/swagger-codegen/src/main/resources/clojure/project.mustache
@@ -4,5 +4,5 @@
   :license {:name ""<&projectLicenseName>""<#projectLicenseUrl>
             :url ""<&projectLicenseUrl>""</projectLicenseUrl>}</projectLicenseName>
   :dependencies [[org.clojure/clojure ""1.7.0""]
-                 [clj-http ""2.0.0""]
+                 [clj-http ""3.6.0""]
                  [cheshire ""5.5.0""]])
diff --git a/samples/client/petstore/clojure/project.clj b/samples/client/petstore/clojure/project.clj
index 34dcb2d99a7..e64d9ef7447 100644
--- a/samples/client/petstore/clojure/project.clj
+++ b/samples/client/petstore/clojure/project.clj
@@ -1,7 +1,7 @@
 (defproject swagger-petstore ""1.0.0""
-  :description ""This is a sample server Petstore server.  You can find out more about Swagger at <a href=\""http://swagger.io\"">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \""special-key\"" to test the authorization filters""
+  :description ""This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.""
   :license {:name ""Apache 2.0""
             :url ""http://www.apache.org/licenses/LICENSE-2.0.html""}
   :dependencies [[org.clojure/clojure ""1.7.0""]
-                 [clj-http ""2.0.0""]
+                 [clj-http ""3.6.0""]
                  [cheshire ""5.5.0""]])
diff --git a/samples/client/petstore/clojure/src/swagger_petstore/api/pet.clj b/samples/client/petstore/clojure/src/swagger_petstore/api/pet.clj
index 344ea3bb1f8..92ab5e13218 100644
--- a/samples/client/petstore/clojure/src/swagger_petstore/api/pet.clj
+++ b/samples/client/petstore/clojure/src/swagger_petstore/api/pet.clj
@@ -5,24 +5,22 @@
 (defn add-pet-with-http-info
   ""Add a new pet to the store
   ""
-  ([] (add-pet-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/pet"" :post
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types [""application/json"" ""application/xml""]
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    [""petstore_auth""]})))
+  [body ]
+  (call-api ""/pet"" :post
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    [""petstore_auth""]}))
 
 (defn add-pet
   ""Add a new pet to the store
   ""
-  ([] (add-pet nil))
-  ([optional-params]
-   (:data (add-pet-with-http-info optional-params))))
+  [body ]
+  (:data (add-pet-with-http-info body)))
 
 (defn delete-pet-with-http-info
   ""Deletes a pet
@@ -35,7 +33,7 @@
               :query-params  {}
               :form-params   {}
               :content-types []
-              :accepts       [""application/json"" ""application/xml""]
+              :accepts       [""application/xml"" ""application/json""]
               :auth-names    [""petstore_auth""]})))
 
 (defn delete-pet
@@ -48,48 +46,44 @@
 (defn find-pets-by-status-with-http-info
   ""Finds Pets by status
   Multiple status values can be provided with comma separated strings""
-  ([] (find-pets-by-status-with-http-info nil))
-  ([{:keys [status ]}]
-   (call-api ""/pet/findByStatus"" :get
-             {:path-params   {}
-              :header-params {}
-              :query-params  {""status"" (with-collection-format status :multi) }
-              :form-params   {}
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    [""petstore_auth""]})))
+  [status ]
+  (call-api ""/pet/findByStatus"" :get
+            {:path-params   {}
+             :header-params {}
+             :query-params  {""status"" (with-collection-format status :csv) }
+             :form-params   {}
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    [""petstore_auth""]}))
 
 (defn find-pets-by-status
   ""Finds Pets by status
   Multiple status values can be provided with comma separated strings""
-  ([] (find-pets-by-status nil))
-  ([optional-params]
-   (:data (find-pets-by-status-with-http-info optional-params))))
+  [status ]
+  (:data (find-pets-by-status-with-http-info status)))
 
 (defn find-pets-by-tags-with-http-info
   ""Finds Pets by tags
   Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.""
-  ([] (find-pets-by-tags-with-http-info nil))
-  ([{:keys [tags ]}]
-   (call-api ""/pet/findByTags"" :get
-             {:path-params   {}
-              :header-params {}
-              :query-params  {""tags"" (with-collection-format tags :multi) }
-              :form-params   {}
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    [""petstore_auth""]})))
+  [tags ]
+  (call-api ""/pet/findByTags"" :get
+            {:path-params   {}
+             :header-params {}
+             :query-params  {""tags"" (with-collection-format tags :csv) }
+             :form-params   {}
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    [""petstore_auth""]}))
 
 (defn find-pets-by-tags
   ""Finds Pets by tags
   Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.""
-  ([] (find-pets-by-tags nil))
-  ([optional-params]
-   (:data (find-pets-by-tags-with-http-info optional-params))))
+  [tags ]
+  (:data (find-pets-by-tags-with-http-info tags)))
 
 (defn get-pet-by-id-with-http-info
   ""Find pet by ID
-  Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions""
+  Returns a single pet""
   [pet-id ]
   (call-api ""/pet/{petId}"" :get
             {:path-params   {""petId"" pet-id }
@@ -97,36 +91,35 @@
              :query-params  {}
              :form-params   {}
              :content-types []
+
              :accepts       [""application/json"" ""application/xml""]
              :auth-names    [""api_key"" ""petstore_auth""]}))
 
 (defn get-pet-by-id
   ""Find pet by ID
-  Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions""
+  Returns a single pet""
   [pet-id ]
   (:data (get-pet-by-id-with-http-info pet-id)))
 
 (defn update-pet-with-http-info
   ""Update an existing pet
   ""
-  ([] (update-pet-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/pet"" :put
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types [""application/json"" ""application/xml""]
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    [""petstore_auth""]})))
+  [body ]
+  (call-api ""/pet"" :put
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    [""petstore_auth""]}))
 
 (defn update-pet
   ""Update an existing pet
   ""
-  ([] (update-pet nil))
-  ([optional-params]
-   (:data (update-pet-with-http-info optional-params))))
+  [body ]
+  (:data (update-pet-with-http-info body)))
 
 (defn update-pet-with-form-with-http-info
   ""Updates a pet in the store with form data
@@ -139,7 +132,7 @@
               :query-params  {}
               :form-params   {""name"" name ""status"" status }
               :content-types [""application/x-www-form-urlencoded""]
-              :accepts       [""application/json"" ""application/xml""]
+              :accepts       [""application/xml"" ""application/json""]
               :auth-names    [""petstore_auth""]})))
 
 (defn update-pet-with-form
@@ -160,7 +153,7 @@
               :query-params  {}
               :form-params   {""additionalMetadata"" additional-metadata ""file"" file }
               :content-types [""multipart/form-data""]
-              :accepts       [""application/json"" ""application/xml""]
+              :accepts       [""application/json""]
               :auth-names    [""petstore_auth""]})))
 
 (defn upload-file
diff --git a/samples/client/petstore/clojure/src/swagger_petstore/api/store.clj b/samples/client/petstore/clojure/src/swagger_petstore/api/store.clj
index 04d185a8086..0e1bf23f41a 100644
--- a/samples/client/petstore/clojure/src/swagger_petstore/api/store.clj
+++ b/samples/client/petstore/clojure/src/swagger_petstore/api/store.clj
@@ -12,7 +12,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts       [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
              :auth-names    []}))
 
 (defn delete-order
@@ -31,7 +31,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts       [""application/json"" ""application/xml""]
+             :accepts       [""application/json""]
              :auth-names    [""api_key""]}))
 
 (defn get-inventory
@@ -50,7 +50,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts       [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
              :auth-names    []}))
 
 (defn get-order-by-id
@@ -62,22 +62,20 @@
 (defn place-order-with-http-info
   ""Place an order for a pet
   ""
-  ([] (place-order-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/store/order"" :post
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    []})))
+  [body ]
+  (call-api ""/store/order"" :post
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    []}))
 
 (defn place-order
   ""Place an order for a pet
   ""
-  ([] (place-order nil))
-  ([optional-params]
-   (:data (place-order-with-http-info optional-params))))
+  [body ]
+  (:data (place-order-with-http-info body)))
 
diff --git a/samples/client/petstore/clojure/src/swagger_petstore/api/user.clj b/samples/client/petstore/clojure/src/swagger_petstore/api/user.clj
index 26e3dffc624..a57846f44c4 100644
--- a/samples/client/petstore/clojure/src/swagger_petstore/api/user.clj
+++ b/samples/client/petstore/clojure/src/swagger_petstore/api/user.clj
@@ -5,68 +5,62 @@
 (defn create-user-with-http-info
   ""Create user
   This can only be done by the logged in user.""
-  ([] (create-user-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/user"" :post
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    []})))
+  [body ]
+  (call-api ""/user"" :post
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    []}))
 
 (defn create-user
   ""Create user
   This can only be done by the logged in user.""
-  ([] (create-user nil))
-  ([optional-params]
-   (:data (create-user-with-http-info optional-params))))
+  [body ]
+  (:data (create-user-with-http-info body)))
 
 (defn create-users-with-array-input-with-http-info
   ""Creates list of users with given input array
   ""
-  ([] (create-users-with-array-input-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/user/createWithArray"" :post
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    []})))
+  [body ]
+  (call-api ""/user/createWithArray"" :post
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    []}))
 
 (defn create-users-with-array-input
   ""Creates list of users with given input array
   ""
-  ([] (create-users-with-array-input nil))
-  ([optional-params]
-   (:data (create-users-with-array-input-with-http-info optional-params))))
+  [body ]
+  (:data (create-users-with-array-input-with-http-info body)))
 
 (defn create-users-with-list-input-with-http-info
   ""Creates list of users with given input array
   ""
-  ([] (create-users-with-list-input-with-http-info nil))
-  ([{:keys [body ]}]
-   (call-api ""/user/createWithList"" :post
-             {:path-params   {}
-              :header-params {}
-              :query-params  {}
-              :form-params   {}
-              :body-param    body
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    []})))
+  [body ]
+  (call-api ""/user/createWithList"" :post
+            {:path-params   {}
+             :header-params {}
+             :query-params  {}
+             :form-params   {}
+             :body-param    body
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    []}))
 
 (defn create-users-with-list-input
   ""Creates list of users with given input array
   ""
-  ([] (create-users-with-list-input nil))
-  ([optional-params]
-   (:data (create-users-with-list-input-with-http-info optional-params))))
+  [body ]
+  (:data (create-users-with-list-input-with-http-info body)))
 
 (defn delete-user-with-http-info
   ""Delete user
@@ -78,7 +72,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts       [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
              :auth-names    []}))
 
 (defn delete-user
@@ -97,7 +91,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts       [""application/json"" ""application/xml""]
+             :accepts       [""application/xml"" ""application/json""]
              :auth-names    []}))
 
 (defn get-user-by-name
@@ -109,23 +103,21 @@
 (defn login-user-with-http-info
   ""Logs user into the system
   ""
-  ([] (login-user-with-http-info nil))
-  ([{:keys [username password ]}]
-   (call-api ""/user/login"" :get
-             {:path-params   {}
-              :header-params {}
-              :query-params  {""username"" username ""password"" password }
-              :form-params   {}
-              :content-types []
-              :accepts       [""application/json"" ""application/xml""]
-              :auth-names    []})))
+  [username password ]
+  (call-api ""/user/login"" :get
+            {:path-params   {}
+             :header-params {}
+             :query-params  {""username"" username ""password"" password }
+             :form-params   {}
+             :content-types []
+             :accepts       [""application/xml"" ""application/json""]
+             :auth-names    []}))
 
 (defn login-user
   ""Logs user into the system
   ""
-  ([] (login-user nil))
-  ([optional-params]
-   (:data (login-user-with-http-info optional-params))))
+  [username password ]
+  (:data (login-user-with-http-info username password)))
 
 (defn logout-user-with-http-info
   ""Logs out current logged in user session
@@ -137,7 +129,7 @@
              :query-params  {}
              :form-params   {}
              :content-types []
-             :accepts    ",Updates http - client dependency to correctly handles certificates ( <issue_id> ) .,"""Update clj-http dependency to 3.6.0 and refactor API functions to remove optional params""","""Update dependencies to clj-http 3.6.0 and fix Swagger API client responses to accept application/xml""","This commit updates the Clojure project dependencies in the Swagger Petstore sample project and the Swagger codegen project. Specifically, it updates the version of clj-http from 2.0.0 to 3.6.0 in both projects.

In addition, it makes several changes to the API functions in the Petstore sample project:

* It removes optional parameters from API functions that don't require them.
* It updates the `accepts` header in API functions to reflect the correct order of preferred response formats.
* It updates the descriptions of several API functions to be more accurate and informative.

Overall, these changes should improve the functionality and usability of the Swagger Petstore sample project and the Swagger codegen project.","Updated `clj-http` to v3.6.0, refined API methods, and modified content-type order for consistency and accuracy."
"diff --git a/README.md b/README.md
index 8b059b4c16..cc09bce6c6 100644
--- a/README.md
+++ b/README.md
@@ -311,6 +311,13 @@ hazelcast:
 
 All other parameters can be used exactly the same as described in the EC2-related section.
 
+## AWS Elastic Beanstalk
+
+The plugin works correctly on the AWS Elastic Beanstalk environment. While deploying your application into the Java Platform, please make sure your Elastic Beanstalk Environment Configuration satisfies the following requirements:
+* EC2 security groups contain a group which allows the port `5701`
+* IAM instance profile contains IAM role which has `ec2:DescribeInstances` permission (or your Hazelcast configuration contains `access-key` and `secret-key`)
+* Deployment policy is `Rolling` (instead of the default `All at once` which may cause the whole Hazelcast members to restart at the same time and therefore lose data)
+
 ## Zone Aware
 
 Hazelcast AWS Discovery plugin supports Hazelcast Zone Aware feature for both EC2 and ECS. When using `ZONE_AWARE` configuration, backups are created in the other Availability Zone.",Add AWS Elastic Beanstalk to README ( <issue_id> ),"""Added support for AWS Elastic Beanstalk environment in README""","Here's a possible commit message based on the provided diff:

`Added support for AWS Elastic Beanstalk deployment`

This commit message is concise and accurately reflects the changes made in the commit. It doesn't go into too much detail, but it gives a clear idea of what was added.","""Add AWS Elastic Beanstalk requirements to Hazelcast AWS Discovery plugin README""

This commit adds a new section to the README file of the Hazelcast AWS Discovery plugin, detailing the requirements for using the plugin on the AWS Elastic Beanstalk environment. The added section specifies that the EC2 security groups must contain a group which allows the port `5701`, the IAM instance profile must contain an IAM role which has `ec2:DescribeInstances` permission (or the Hazelcast configuration must contain `access-key` and `secret-key`), and the deployment policy must be `Rolling` (instead of the default `All at once`). This information will help users configure their Elastic Beanstalk environment correctly to use the plugin.","""Add AWS Elastic Beanstalk setup requirements for Hazelcast plugin to README"""
"diff --git a/build.gradle b/build.gradle
index 0497772..d1fac21 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,12 +1,28 @@
 buildscript {
-  ext.deps = [
-    android_gradle_plugin      : 'com.android.tools.build:gradle:3.0.0-alpha7',
+  ext.versions = [
+      'minSdk': 14,
+      'compileSdk': 25,
+      'buildTools': '25.0.0',
+      'supportLibrary': '23.1.1'
   ]
 
-  ext.versions = [
-    'minSdk': 14,
-    'compileSdk': 25,
-    'buildTools': '25.0.0',
+  ext.deps = [
+    android_gradle_plugin: 'com.android.tools.build:gradle:3.0.0-alpha7',
+    'support': [
+      'annotations': ""com.android.support:support-annotations:${versions.supportLibrary}"",
+      'appcompat': ""com.android.support:appcompat-v7:${versions.supportLibrary}"",
+      'design': ""com.android.support:design:${versions.supportLibrary}"",
+      'test': [
+          'espresso': 'com.android.support.test.espresso:espresso-core:2.2.1',
+          'runner': 'com.android.support.test:runner:0.4',
+          'rules': 'com.android.support.test:rules:0.4',
+      ]
+    ],
+    'junit': 'junit:junit:4.10',
+    'assertj': 'org.assertj:assertj-core:1.7.1',
+    'mockito': 'org.mockito:mockito-core:1.10.19',
+    'robolectric': 'org.robolectric:robolectric:3.0',
+    'antTasks': 'org.apache.maven:maven-ant-tasks:2.1.3',
   ]
 
   dependencies {
diff --git a/flow-sample-basic/build.gradle b/flow-sample-basic/build.gradle
index 0026d31..8ff5c37 100644
--- a/flow-sample-basic/build.gradle
+++ b/flow-sample-basic/build.gradle
@@ -25,11 +25,11 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  compile 'com.android.support:design:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  compile deps.support.design
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow-sample-helloworld/build.gradle b/flow-sample-helloworld/build.gradle
index 90fb370..8c9d67f 100644
--- a/flow-sample-helloworld/build.gradle
+++ b/flow-sample-helloworld/build.gradle
@@ -25,10 +25,10 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow-sample-intents/build.gradle b/flow-sample-intents/build.gradle
index 321b146..6d37de0 100644
--- a/flow-sample-intents/build.gradle
+++ b/flow-sample-intents/build.gradle
@@ -25,11 +25,11 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  compile 'com.android.support:design:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  compile deps.support.design
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow-sample-multikey/build.gradle b/flow-sample-multikey/build.gradle
index dfea1f2..8969365 100644
--- a/flow-sample-multikey/build.gradle
+++ b/flow-sample-multikey/build.gradle
@@ -25,11 +25,11 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  compile 'com.android.support:design:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  compile deps.support.design
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow-sample-orientation-lock/build.gradle b/flow-sample-orientation-lock/build.gradle
index 5115384..d97c05a 100644
--- a/flow-sample-orientation-lock/build.gradle
+++ b/flow-sample-orientation-lock/build.gradle
@@ -25,11 +25,11 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  compile 'com.android.support:design:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  compile deps.support.design
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow-sample-tree/build.gradle b/flow-sample-tree/build.gradle
index 5f391ef..fdfec5e 100644
--- a/flow-sample-tree/build.gradle
+++ b/flow-sample-tree/build.gradle
@@ -25,11 +25,11 @@ android {
 
 dependencies {
   compile project(':flow')
-  compile 'com.android.support:appcompat-v7:23.1.1'
-  compile 'com.android.support:design:23.1.1'
-  androidTestCompile 'com.android.support.test:runner:0.4'
-  androidTestCompile 'com.android.support.test:rules:0.4'
-  androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+  compile deps.support.appcompat
+  compile deps.support.design
+  androidTestCompile deps.support.test.runner
+  androidTestCompile deps.support.test.rules
+  androidTestCompile deps.support.test.espresso
 }
 
 //noinspection GroovyAssignabilityCheck
diff --git a/flow/build.gradle b/flow/build.gradle
index 13820cb..d2e48d0 100644
--- a/flow/build.gradle
+++ b/flow/build.gradle
@@ -11,12 +11,12 @@ android {
 }
 
 dependencies {
-  compile 'com.android.support:support-annotations:23.1.1'
-  testCompile 'junit:junit:4.10'
-  testCompile 'org.assertj:assertj-core:1.7.1'
-  testCompile 'org.mockito:mockito-core:1.10.19'
-  testCompile 'org.robolectric:robolectric:3.0'
-  testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
+  compile deps.support.annotations
+  testCompile deps.junit
+  testCompile deps.assertj
+  testCompile deps.mockito
+  testCompile deps.robolectric
+  testCompile deps.antTasks
 }
 
 apply from: rootProject.file('gradle/gradle-mvn-push.gradle')",Pull dependency definitions to root module,"""Refactor dependencies to use centralized version management""

This commit message accurately reflects the changes made in the diff, which involve moving dependencies to a centralized location (`ext.deps` and `ext.versions`) and using those variables to manage version numbers across multiple build.gradle files.","""Refactor dependencies to use a centralized versioning system""

This commit message accurately reflects the changes made in the diff, which involves refactoring the dependencies to use a centralized versioning system, specifically the `ext.versions` and `ext.deps` maps in the `build.gradle` files.","""Refactor build.gradle files to use version variables and centralized dependencies""

This commit refactors the build.gradle files in the project to use version variables and centralized dependencies. This change makes it easier to manage and update dependencies and versions across the entire project.

Here are the details of the changes:

* In the root build.gradle file:
	+ Added a new `versions` block to define version variables for `minSdk`, `compileSdk`, `buildTools`, and `supportLibrary`.
	+ Added a new `deps` block to define centralized dependencies for the project, including Android Gradle Plugin, Support Library, JUnit, AssertJ, Mockito, Robolectric, and Maven Ant Tasks.
	+ Updated the `dependencies` block to use the centralized dependencies.
* In the flow-sample-basic, flow-sample-helloworld, flow-sample-intents, flow-sample-multikey, flow-sample-orientation-lock, and flow-sample-tree module build.gradle files:
	+ Updated the `dependencies` block to use the centralized dependencies for Support Library and Espresso.
* In the flow module build.gradle file:
	+ Updated the `dependencies` block to use the centralized dependencies for Support Annotations and testing libraries.

Overall, this commit simplifies the build configuration and makes it easier to maintain the project.",Refactor dependencies management by utilizing `ext.deps` for common library versions across all build.gradle files.
"diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
index a92dd96d3..af13de828 100644
--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
@@ -23,7 +23,6 @@ import io.vertx.core.http.*;
 import io.vertx.core.http.HttpMethod;
 import io.vertx.core.http.HttpVersion;
 import io.vertx.core.http.impl.pool.ConnectionListener;
-import io.vertx.core.http.impl.ws.WebSocketCloseFrameCode;
 import io.vertx.core.http.impl.ws.WebSocketFrameInternal;
 import io.vertx.core.impl.ContextImpl;
 import io.vertx.core.logging.Logger;
diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
index a022fca89..39d6fda26 100644
--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
@@ -45,7 +45,6 @@ import io.vertx.core.http.HttpServerOptions;
 import io.vertx.core.http.HttpServerRequest;
 import io.vertx.core.http.ServerWebSocket;
 import io.vertx.core.http.WebSocketFrame;
-import io.vertx.core.http.impl.ws.WebSocketCloseFrameCode;
 import io.vertx.core.http.impl.ws.WebSocketFrameInternal;
 import io.vertx.core.impl.ContextImpl;
 import io.vertx.core.impl.VertxInternal;
diff --git a/src/main/java/io/vertx/core/http/impl/HttpUtils.java b/src/main/java/io/vertx/core/http/impl/HttpUtils.java
index 5b5016f66..0e61f3b76 100644
--- a/src/main/java/io/vertx/core/http/impl/HttpUtils.java
+++ b/src/main/java/io/vertx/core/http/impl/HttpUtils.java
@@ -12,6 +12,8 @@
 package io.vertx.core.http.impl;
 
 
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.compression.ZlibWrapper;
 import io.netty.handler.codec.http.HttpContentCompressor;
 import io.netty.handler.codec.http.HttpHeaderNames;
@@ -27,6 +29,7 @@ import io.vertx.core.http.HttpServerRequest;
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.Charset;
 import java.util.Base64;
 import java.util.List;
 import java.util.Map;
@@ -381,6 +384,16 @@ public final class HttpUtils {
     return null;
   }
 
+  public static ByteBuf generateWSCloseFrameByteBuf(short statusCode, String reason) {
+    if (reason != null)
+      return Unpooled.copiedBuffer(
+        Unpooled.copyShort(statusCode), // First two bytes are reserved for status code
+        Unpooled.copiedBuffer(reason, Charset.forName(""UTF-8""))
+      );
+    else
+      return Unpooled.copyShort(statusCode);
+  }
+
   private static class CustomCompressor extends HttpContentCompressor {
     @Override
     public ZlibWrapper determineWrapper(String acceptEncoding) {
diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketFrameFactoryImpl.java b/src/main/java/io/vertx/core/http/impl/WebSocketFrameFactoryImpl.java
index 1a45dc369..ab4589418 100644
--- a/src/main/java/io/vertx/core/http/impl/WebSocketFrameFactoryImpl.java
+++ b/src/main/java/io/vertx/core/http/impl/WebSocketFrameFactoryImpl.java
@@ -11,16 +11,11 @@
 
 package io.vertx.core.http.impl;
 
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import io.netty.buffer.UnpooledDirectByteBuf;
 import io.vertx.core.buffer.Buffer;
 import io.vertx.core.http.WebSocketFrame;
 import io.vertx.core.http.impl.ws.WebSocketFrameImpl;
 import io.vertx.core.spi.WebSocketFrameFactory;
 
-import java.nio.charset.Charset;
-
 /**
  * @author <a href=""http://tfox.org"">Tim Fox</a>
  */
@@ -51,5 +46,4 @@ public class WebSocketFrameFactoryImpl implements WebSocketFrameFactory {
   public WebSocketFrame pongFrame(Buffer data) {
     return new WebSocketFrameImpl(FrameType.PONG, data.getByteBuf(), true);
   }
-
 }
diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java
index b4fc28d5d..4b854e775 100644
--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java
+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java
@@ -18,12 +18,10 @@ import io.vertx.core.eventbus.Message;
 import io.vertx.core.eventbus.MessageConsumer;
 import io.vertx.core.http.WebSocketBase;
 import io.vertx.core.http.WebSocketFrame;
-import io.vertx.core.http.impl.ws.WebSocketCloseFrameCode;
 import io.vertx.core.http.impl.ws.WebSocketFrameImpl;
 import io.vertx.core.http.impl.ws.WebSocketFrameInternal;
 import io.vertx.core.impl.VertxInternal;
 import io.vertx.core.net.SocketAddress;
-import io.vertx.core.net.impl.ConnectionBase;
 
 import javax.net.ssl.SSLPeerUnverifiedException;
 import javax.net.ssl.SSLSession;
@@ -105,7 +103,7 @@ public abstract class WebSocketImplBase<S extends WebSocketBase> implements WebS
   public void close(short statusCode, String reason) {
     synchronized (conn) {
       checkClosed();
-      conn.closeWithPayload(WebSocketCloseFrameCode.generateByteBuffer(statusCode, reason));
+      conn.closeWithPayload(HttpUtils.generateWSCloseFrameByteBuf(statusCode, reason));
       cleanupHandlers();
     }
   }
diff --git a/src/main/java/io/vertx/core/http/impl/ws/WebSocketCloseFrameCode.java b/src/main/java/io/vertx/core/http/impl/ws/WebSocketCloseFrameCode.java
deleted file mode 100644
index 21c4e9596..000000000
--- a/src/main/java/io/vertx/core/http/impl/ws/WebSocketCloseFrameCode.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package io.vertx.core.http.impl.ws;
-
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-
-import java.nio.charset.Charset;
-
-/**
- * @author Francesco Guardiani @slinkydeveloper
- */
-public enum WebSocketCloseFrameCode {
-
-  NORMAL_CLOSE((short)1000, ""Connection Closed"");
-
-  private short statusCode;
-  private String reason;
-
-  WebSocketCloseFrameCode(short statusCode, String reason) {
-    this.statusCode = statusCode;
-    this.reason = reason;
-  }
-
-  public ByteBuf byteBuf() {
-    return generateByteBuffer(this.statusCode, this.reason);
-  }
-
-  public static ByteBuf generateByteBuffer(short statusCode, String reason) {
-    if (reason != null)
-      return Unpooled.copiedBuffer(
-        Unpooled.copyShort(statusCode), // First two bytes are reserved for status code
-        Unpooled.copiedBuffer(reason, Charset.forName(""UTF-8""))
-      );
-    else
-      return Unpooled.copyShort(statusCode);
-  }
-
-}","Removed useless enum , moved buffer generator method and cleaned WebSocketFrameFactoryImpl .","""Refactor WebSocket close frame generation to HttpUtils""","""Remove WebSocketCloseFrameCode enum and replace with HttpUtils.generateWSCloseFrameByteBuf in WebSocketImplBase""","""Remove WebSocketCloseFrameCode and move generateWSCloseFrameByteBuf to HttpUtils""

This commit removes the `WebSocketCloseFrameCode` class and moves the `generateWSCloseFrameByteBuf` method to the `HttpUtils` class. It also updates the imports and usage of the removed class and method in other classes such as `Http1xClientConnection`, `Http1xServerConnection`, and `WebSocketImplBase`. The `generateWSCloseFrameByteBuf` method is used to generate a WebSocket close frame byte buffer with a given status code and reason.","""Refactor WebSocket close frame generation by moving logic to HttpUtils and removing WebSocketCloseFrameCode class."""
"diff --git a/backend/api/src/main/java/com/fsck/k9/backend/api/Backend.kt b/backend/api/src/main/java/com/fsck/k9/backend/api/Backend.kt
index e2fe319e0..ab92f3350 100644
--- a/backend/api/src/main/java/com/fsck/k9/backend/api/Backend.kt
+++ b/backend/api/src/main/java/com/fsck/k9/backend/api/Backend.kt
@@ -18,6 +18,7 @@ interface Backend {
     val supportsMove: Boolean
     val supportsCopy: Boolean
     val supportsTrashFolder: Boolean
+    val supportsSearchByDate: Boolean
     val isPushCapable: Boolean
 
     @Throws(MessagingException::class)
@@ -79,4 +80,7 @@ interface Backend {
     fun uploadMessage(folderServerId: String, message: Message): String?
 
     fun createPusher(receiver: PushReceiver): Pusher
+
+    @Throws(MessagingException::class)
+    fun checkServerSettings()
 }
diff --git a/backend/imap/src/main/java/com/fsck/k9/backend/imap/ImapBackend.java b/backend/imap/src/main/java/com/fsck/k9/backend/imap/ImapBackend.java
index dc3774bba..021edf9e3 100644
--- a/backend/imap/src/main/java/com/fsck/k9/backend/imap/ImapBackend.java
+++ b/backend/imap/src/main/java/com/fsck/k9/backend/imap/ImapBackend.java
@@ -85,6 +85,11 @@ public class ImapBackend implements Backend {
         return true;
     }
 
+    @Override
+    public boolean getSupportsSearchByDate() {
+        return true;
+    }
+
     @Override
     public boolean isPushCapable() {
         return true;
@@ -187,4 +192,9 @@ public class ImapBackend implements Backend {
     public Pusher createPusher(@NotNull PushReceiver receiver) {
         return new ImapPusher(imapStore, receiver, powerManager);
     }
+
+    @Override
+    public void checkServerSettings() throws MessagingException {
+        imapStore.checkSettings();
+    }
 }
diff --git a/backend/pop3/src/main/java/com/fsck/k9/backend/pop3/Pop3Backend.kt b/backend/pop3/src/main/java/com/fsck/k9/backend/pop3/Pop3Backend.kt
index b12fbd58e..26f6fb779 100644
--- a/backend/pop3/src/main/java/com/fsck/k9/backend/pop3/Pop3Backend.kt
+++ b/backend/pop3/src/main/java/com/fsck/k9/backend/pop3/Pop3Backend.kt
@@ -15,7 +15,7 @@ import com.fsck.k9.mail.PushReceiver
 import com.fsck.k9.mail.Pusher
 import com.fsck.k9.mail.store.pop3.Pop3Store
 
-class Pop3Backend(accountName: String, backendStorage: BackendStorage, pop3Store: Pop3Store) : Backend {
+class Pop3Backend(accountName: String, backendStorage: BackendStorage, private val pop3Store: Pop3Store) : Backend {
     private val pop3Sync: Pop3Sync = Pop3Sync(accountName, backendStorage, pop3Store)
     private val commandGetFolders = CommandGetFolders()
     private val commandSetFlag = CommandSetFlag(pop3Store)
@@ -27,6 +27,7 @@ class Pop3Backend(accountName: String, backendStorage: BackendStorage, pop3Store
     override val supportsMove = false
     override val supportsCopy = false
     override val supportsTrashFolder = false
+    override val supportsSearchByDate = false
     override val isPushCapable = false
 
     override fun getFolders(forceListAll: Boolean): List<FolderInfo> {
@@ -105,4 +106,8 @@ class Pop3Backend(accountName: String, backendStorage: BackendStorage, pop3Store
     override fun createPusher(receiver: PushReceiver): Pusher {
         throw UnsupportedOperationException(""not supported"")
     }
+
+    override fun checkServerSettings() {
+        pop3Store.checkSettings()
+    }
 }
diff --git a/backend/webdav/src/main/java/com/fsck/k9/backend/webdav/WebDavBackend.kt b/backend/webdav/src/main/java/com/fsck/k9/backend/webdav/WebDavBackend.kt
index a173e2518..6cf478164 100644
--- a/backend/webdav/src/main/java/com/fsck/k9/backend/webdav/WebDavBackend.kt
+++ b/backend/webdav/src/main/java/com/fsck/k9/backend/webdav/WebDavBackend.kt
@@ -16,7 +16,11 @@ import com.fsck.k9.mail.PushReceiver
 import com.fsck.k9.mail.Pusher
 import com.fsck.k9.mail.store.webdav.WebDavStore
 
-class WebDavBackend(accountName: String, backendStorage: BackendStorage, webDavStore: WebDavStore) : Backend {
+class WebDavBackend(
+        accountName: String,
+        backendStorage: BackendStorage,
+        private val webDavStore: WebDavStore
+) : Backend {
     private val webDavSync: WebDavSync = WebDavSync(accountName, backendStorage, webDavStore)
     private val commandGetFolders = CommandGetFolders(webDavStore)
     private val commandSetFlag = CommandSetFlag(webDavStore)
@@ -31,6 +35,7 @@ class WebDavBackend(accountName: String, backendStorage: BackendStorage, webDavS
     override val supportsMove = true
     override val supportsCopy = true
     override val supportsTrashFolder = true
+    override val supportsSearchByDate = false
     override val isPushCapable = false
 
     override fun getFolders(forceListAll: Boolean): List<FolderInfo> {
@@ -110,4 +115,8 @@ class WebDavBackend(accountName: String, backendStorage: BackendStorage, webDavS
     override fun createPusher(receiver: PushReceiver): Pusher {
         throw UnsupportedOperationException(""not supported"")
     }
+
+    override fun checkServerSettings() {
+        webDavStore.checkSettings()
+    }
 }
diff --git a/k9mail/src/main/java/com/fsck/k9/Account.java b/k9mail/src/main/java/com/fsck/k9/Account.java
index 2cc9c6628..98943321c 100644
--- a/k9mail/src/main/java/com/fsck/k9/Account.java
+++ b/k9mail/src/main/java/com/fsck/k9/Account.java
@@ -29,8 +29,6 @@ import com.fsck.k9.mail.MessagingException;
 import com.fsck.k9.mail.NetworkType;
 import com.fsck.k9.mail.filter.Base64;
 import com.fsck.k9.mail.ssl.LocalKeyStore;
-import com.fsck.k9.mail.store.RemoteStore;
-import com.fsck.k9.mail.store.RemoteStoreManager;
 import com.fsck.k9.mail.store.StoreConfig;
 import com.fsck.k9.mailstore.LocalStore;
 import com.fsck.k9.mailstore.StorageManager;
@@ -1197,18 +1195,6 @@ public class Account implements BaseAccount, StoreConfig {
         return LocalStore.getInstance(this, K9.app);
     }
 
-    public RemoteStore getRemoteStore() throws MessagingException {
-        return RemoteStoreManager.getInstance(K9.app, this);
-    }
-
-    // It'd be great if this actually went into the store implementation
-    // to get this, but that's expensive and not easily accessible
-    // during initialization
-    public boolean isSearchByDateCapable() {
-        return (getStoreUri().startsWith(""imap""));
-    }
-
-
     @Override
     public synchronized String toString() {
         return description;
diff --git a/k9mail/src/main/java/com/fsck/k9/Preferences.java b/k9mail/src/main/java/com/fsck/k9/Preferences.java
index fca7f46e9..660f816e2 100644
--- a/k9mail/src/main/java/com/fsck/k9/Preferences.java
+++ b/k9mail/src/main/java/com/fsck/k9/Preferences.java
@@ -12,7 +12,7 @@ import java.util.Map;
 
 import android.content.Context;
 
-import com.fsck.k9.mail.store.RemoteStoreManager;
+import com.fsck.k9.backend.BackendManager;
 import com.fsck.k9.mailstore.LocalStore;
 import com.fsck.k9.preferences.Storage;
 import com.fsck.k9.preferences.StorageEditor;
@@ -31,7 +31,6 @@ public class Preferences {
         return preferences;
     }
 
-
     private Storage storage;
     private Map<String, Account> accounts = null;
     private List<Account> accountsInOrder = null;
@@ -127,7 +126,7 @@ public class Preferences {
         }
 
         try {
-            RemoteStoreManager.removeInstance(account);
+            getBackendManager().removeBackend(account);
         } catch (Exception e) {
             Timber.e(e, ""Failed to reset remote store for account %s"", account.getUuid());
         }
@@ -184,4 +183,8 @@ public class Preferences {
             }
         }
     }
+
+    private BackendManager getBackendManager() {
+        return DI.get(BackendManager.class);
+    }
 }
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupCheckSettings.java b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupCheckSettings.java
index c21b7e476..9d94d09fd 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupCheckSettings.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupCheckSettings.java
@@ -27,6 +27,7 @@ import android.widget.ProgressBar;
 import android.widget.TextView;
 
 import com.fsck.k9.Account;
+import com.fsck.k9.DI;
 import com.fsck.k9.K9;
 import com.fsck.k9.Preferences;
 import com.fsck.k9.R;
@@ -42,8 +43,6 @@ import com.fsck.k9.mail.MessagingException;
 import com.fsck.k9.mail.Transport;
 import com.fsck.k9.mail.TransportProvider;
 import com.fsck.k9.mail.filter.Hex;
-import com.fsck.k9.mail.store.RemoteStore;
-import com.fsck.k9.mail.store.webdav.WebDavStore;
 import com.fsck.k9.mailstore.LocalFolder;
 import com.fsck.k9.mailstore.LocalStore;
 import timber.log.Timber;
@@ -70,6 +69,8 @@ public class AccountSetupCheckSettings extends K9Activity implements OnClickList
         OUTGOING
     }
 
+    private final MessagingController messagingController = DI.get(MessagingController.class);
+
     private Handler mHandler = new Handler();
 
     private ProgressBar mProgressBar;
@@ -487,7 +488,7 @@ public class AccountSetupCheckSettings extends K9Activity implements OnClickList
         }
 
         private void checkOutgoing() throws MessagingException {
-            if (!(account.getRemoteStore() instanceof WebDavStore)) {
+            if (!isWebDavAccount()) {
                 publishProgress(R.string.account_setup_check_settings_check_outgoing_msg);
             }
             Transport transport = TransportProvider.getInstance().getTransport(K9.app, account);
@@ -500,15 +501,15 @@ public class AccountSetupCheckSettings extends K9Activity implements OnClickList
         }
 
         private void checkIncoming() throws MessagingException {
-            RemoteStore store = account.getRemoteStore();
-            if (store instanceof WebDavStore) {
+            if (isWebDavAccount()) {
                 publishProgress(R.string.account_setup_check_settings_authenticate);
             } else {
                 publishProgress(R.string.account_setup_check_settings_check_incoming_msg);
             }
-            store.checkSettings();
 
-            if (store instanceof WebDavStore) {
+            messagingController.checkServerSettings(account);
+
+            if (isWebDavAccount()) {
                 publishProgress(R.string.account_setup_check_settings_fetch);
             }
             MessagingController.getInstance(getApplication()).listFoldersSynchronous(account, true, null);
@@ -516,6 +517,10 @@ public class AccountSetupCheckSettings extends K9Activity implements OnClickList
                     .synchronizeMailbox(account, account.getInboxFolder(), null, null);
         }
 
+        private boolean isWebDavAccount() {
+            return account.getStoreUri().startsWith(""webdav"");
+        }
+
         private void createSpecialLocalFolders(CheckDirection direction) throws MessagingException {
             if (direction != CheckDirection.INCOMING) {
                 return;
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupIncoming.java b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupIncoming.java
index ee0a735ec..ad1950177 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupIncoming.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupIncoming.java
@@ -29,11 +29,13 @@ import android.widget.Toast;
 
 import com.fsck.k9.Account;
 import com.fsck.k9.Account.FolderMode;
+import com.fsck.k9.DI;
 import com.fsck.k9.Preferences;
 import com.fsck.k9.R;
 import com.fsck.k9.account.AccountCreator;
 import com.fsck.k9.activity.K9Activity;
 import com.fsck.k9.activity.setup.AccountSetupCheckSettings.CheckDirection;
+import com.fsck.k9.controller.MessagingController;
 import com.fsck.k9.helper.Utility;
 import com.fsck.k9.mail.AuthType;
 import com.fsck.k9.mail.ConnectionSecurity;
@@ -41,7 +43,6 @@ import com.fsck.k9.mail.NetworkType;
 import com.fsck.k9.mail.ServerSettings;
 import com.fsck.k9.mail.ServerSettings.Type;
 import com.fsck.k9.mail.TransportUris;
-import com.fsck.k9.mail.store.RemoteStore;
 import com.fsck.k9.mail.store.RemoteStoreManager;
 import com.fsck.k9.mail.store.imap.ImapStoreSettings;
 import com.fsck.k9.mail.store.webdav.WebDavStoreSettings;
@@ -56,6 +57,8 @@ public class AccountSetupIncoming extends K9Activity implements OnClickListener
     private static final String STATE_SECURITY_TYPE_POSITION = ""stateSecurityTypePosition"";
     private static final String STATE_AUTH_TYPE_POSITION = ""authTypePosition"";
 
+    private final MessagingController messagingController = DI.get(MessagingController.class);
+
     private Type mStoreType;
     private EditText mUsernameView;
     private EditText mPasswordView;
@@ -507,13 +510,7 @@ public class AccountSetupIncoming extends K9Activity implements OnClickListener
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (resultCode == RESULT_OK) {
             if (Intent.ACTION_EDIT.equals(getIntent().getAction())) {
-                boolean isPushCapable = false;
-                try {
-                    RemoteStore store = mAccount.getRemoteStore();
-                    isPushCapable = store.isPushCapable();
-                } catch (Exception e) {
-                    Timber.e(e, ""Could not get remote store"");
-                }
+                boolean isPushCapable = messagingController.isPushCapable(mAccount);
                 if (isPushCapable && mAccount.getFolderPushMode() != FolderMode.NONE) {
                     MailService.actionRestartPushers(this, null);
                 }
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupOptions.java b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupOptions.java
index d40723637..3814ca725 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupOptions.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/setup/AccountSetupOptions.java
@@ -12,12 +12,12 @@ import android.widget.CheckBox;
 import android.widget.Spinner;
 
 import com.fsck.k9.Account;
+import com.fsck.k9.DI;
 import com.fsck.k9.K9;
 import com.fsck.k9.Preferences;
 import com.fsck.k9.R;
 import com.fsck.k9.activity.K9Activity;
-import com.fsck.k9.mail.store.RemoteStore;
-import timber.log.Timber;
+import com.fsck.k9.controller.MessagingController;
 
 
 public class AccountSetupOptions extends K9Activity implements OnClickListener {
@@ -25,6 +25,8 @@ public class AccountSetupOptions extends K9Activity implements OnClickListener {
 
     private static final String EXTRA_MAKE_DEFAULT = ""makeDefault"";
 
+    private final MessagingController messagingController = DI.get(MessagingController.class);
+
     private Spinner mCheckFrequencyView;
 
     private Spinner mDisplayCountView;
@@ -116,15 +118,7 @@ public class AccountSetupOptions extends K9Activity implements OnClickListener {
                                             .getDisplayCount());
 
 
-        boolean isPushCapable = false;
-        try {
-            RemoteStore store = mAccount.getRemoteStore();
-            isPushCapable = store.isPushCapable();
-        } catch (Exception e) {
-            Timber.e(e, ""Could not get remote store"");
-        }
-
-
+        boolean isPushCapable = messagingController.isPushCapable(mAccount);
         if (!isPushCapable) {
             mPushEnable.setVisibility(View.GONE);
         } else {
diff --git a/k9mail/src/main/java/com/fsck/k9/activity/setup/FolderSettings.java b/k9mail/src/main/java/com/fsck/k9/activity/setup/FolderSettings.java
index 6ec8e4e9e..50911f4eb 100644
--- a/k9mail/src/main/java/com/fsck/k9/activity/setup/FolderSettings.java
+++ b/k9mail/src/main/java/com/fsck/k9/activity/setup/FolderSettings.java
@@ -10,14 +10,15 @@ import android.preference.ListPreference;
 import android.preference.Preference;
 
 import com.fsck.k9.Account;
+import com.fsck.k9.DI;
 import com.fsck.k9.Preferences;
 import com.fsck.k9.R;
 import com.fsck.k9.activity.FolderInfoHolder;
 import com.fsck.k9.activity.K9PreferenceActivity;
+import com.fsck.k9.controller.MessagingController;
 import com.fsck.k9.mail.Folder;
 import com.fsck.k9.mail.Folder.FolderClass;
 import com.fsck.k9.mail.MessagingException;
-import com.fsck.k9.mail.store.RemoteStore;
 import com.fsck.k9.mailstore.LocalFolder;
 import com.fsck.k9.mailstore.LocalStore;
 import com.fsck.k9.service.MailService;
@@ -36,6 +37,8 @@ public class FolderSettings extends K9PreferenceActivity {
     private static final String PREFERENCE_IN_TOP_GROUP = ""folder_settings_in_top_group"";
     private static final String PREFERENCE_INTEGRATE = ""folder_settings_include_in_integrated_inbox"";
 
+    private final MessagingController messagingController = DI.get(MessagingController.class);
+
     private LocalFolder mFolder;
 
     private CheckBoxPreference mInTopGroup;
@@ -69,13 +72,7 @@ public class FolderSettings extends K9PreferenceActivity {
             return;
         }
 
-        boolean isPushCapable = false;
-        try {
-            RemoteStore store = mAccount.getRemoteStore();
-            isPushCapable = store.isPushCapable();
-        } catch (Exception e) {
-            Timber.e(e, ""Could not get remote store"");
-        }
+        boolean isPushCapable = messagingController.isPushCapable(mAccount);
 
         addPreferencesFromResource(R.xml.folder_settings_preferences);
 
diff --git a/k9mail/src/main/java/com/fsck/k9/controller/MessagingController.java b/k9mail/src/main/java/com/fsck/k9/controller/MessagingController.java
index 75d23d2eb..7e3acd025 100644
--- a/k9mail/src/main/java/com/fsck/k9/controller/MessagingController.java
+++ b/k9mail/src/main/java/com/fsck/k9/controller/MessagingController.java
@@ -1834,6 +1834,26 @@ public class MessagingController {
         return getBackend(account).getSupportsCopy();
     }
 
+    public boolean isPushCapable(Account account) {
+        return getBackend(account).isPushCapable();
+    }
+
+    public boolean supportsSeenFlag(Account account) {
+        return getBackend(account).getSupportsSeenFlag();
+    }
+
+    public boolean supportsExpunge(Account account) {
+        return getBackend(account).getSupportsExpunge();
+    }
+
+    public boolean supportsSearchByDate(Account account) {
+        return getBackend(account).getSupportsSearchByDate();
+    }
+
+    public void checkServerSettings(Account account) throws MessagingException {
+        getBackend(account).checkServerSettings();
+    }
+
     public void moveMessages(final Account srcAccount, final String srcFolder,
             List<MessageReference> messageReferences, final String destFolder) {
         actOnMessageGroup(srcAccount, srcFolder, messageReferences, new MessageActor() {
diff --git a/k9mail/src/main/java/com/fsck/k9/fragment/MessageListFragment.java b/k9mail/src/main/java/com/fsck/k9/fragment/MessageListFragment.java
index a5dfd2d12..fcc4389ed 100644
--- a/k9mail/src/main/java/com/fsck/k9/fragment/MessageListFragment.java
+++ b/k9mail/src/main/java/com/fsck/k9/fragment/MessageListFragment.java
@@ -80,7 +80,6 @@ import com.fsck.k9.helper.MessageHelper;
 import com.fsck.k9.helper.Utility;
 import com.fsck.k9.mail.Flag;
 import com.fsck.k9.mail.Folder;
-import com.fsck.k9.mail.Message;
 import com.fsck.k9.mail.MessagingException;
 import com.fsck.k9.mailstore.LocalFolder;
 import com.fsck.k9.preferences.StorageEditor;
@@ -2506,11 +2505,7 @@ public class MessageListFragment extends Fragment implements OnItemClickListener
     }
 
     public boolean isAccountExpungeCapable() {
-        try {
-            return (account != null && account.getRemoteStore().isExpungeCapable());
-        } catch (Exception e) {
-            return false;
-        }
+        return account != null && messagingController.supportsExpunge(account);
     }
 
     public void onRemoteSearch() {
diff --git a/k9mail/src/main/java/com/fsck/k9/mail/store/RemoteStoreManager.java b/k9mail/src/main/java/com/fsck/k9/mail/store/RemoteStoreManager.java
index 474bc3aaa..88ddb43b3 100644
--- a/k9mail/src/main/java/com/fsck/k9/mail/store/RemoteStoreManager.java
+++ b/k9mail/src/main/java/com/fsck/k9/mail/store/RemoteStoreManager.java
@@ -1,82 +1,14 @@
 package com.fsck.k9.mail.store;
 
 
-import java.util.HashMap;
-import java.util.Map;
-
-import android.content.Context;
-import android.net.ConnectivityManager;
-
-import com.fsck.k9.mail.MessagingException;
 import com.fsck.k9.mail.ServerSettings;
 import com.fsck.k9.mail.ServerSettings.Type;
-import com.fsck.k9.mail.oauth.OAuth2TokenProvider;
-import com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory;
 import com.fsck.k9.mail.store.imap.ImapStore;
 import com.fsck.k9.mail.store.pop3.Pop3Store;
-import com.fsck.k9.mail.store.webdav.WebDavHttpClient;
 import com.fsck.k9.mail.store.webdav.WebDavStore;
 
 
 public abstract class RemoteStoreManager {
-    /**
-     * Remote stores indexed by Uri.
-     */
-    private static Map<String, RemoteStore> sStores = new HashMap<>();
-
-
-    /**
-     * Get an instance of a remote mail store.
-     */
-    public static synchronized RemoteStore getInstance(Context context, StoreConfig storeConfig)
-            throws MessagingException {
-        String uri = storeConfig.getStoreUri();
-
-        if (uri.startsWith(""local"")) {
-            throw new RuntimeException(""Asked to get non-local Store object but given LocalStore URI"");
-        }
-
-        RemoteStore store = sStores.get(uri);
-        if (store == null) {
-            if (uri.startsWith(""imap"")) {
-                OAuth2TokenProvider oAuth2TokenProvider = null;
-                store = new ImapStore(
-                        storeConfig,
-                        new DefaultTrustedSocketFactory(context),
-                        (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE),
-                        oAuth2TokenProvider);
-            } else if (uri.startsWith(""pop3"")) {
-                store = new Pop3Store(storeConfig, new DefaultTrustedSocketFactory(context));
-            } else if (uri.startsWith(""webdav"")) {
-                store = new WebDavStore(storeConfig, new WebDavHttpClient.WebDavHttpClientFactory());
-            }
-
-            if (store != null) {
-                sStores.put(uri, store);
-            }
-        }
-
-        if (store == null) {
-            throw new MessagingException(""Unable to locate an applicable Store for "" + uri);
-        }
-
-        return store;
-    }
-
-    /**
-     * Release reference to a remote mail store instance.
-     *
-     * @param storeConfig {@link StoreConfig} instance that is used to get the remote mail store instance.
-     */
-    public static void removeInstance(StoreConfig storeConfig) {
-        String uri = storeConfig.getStoreUri();
-        if (uri.startsWith(""local"")) {
-            throw new RuntimeException(""Asked to get non-local Store object but given "" +
-                    ""LocalStore URI"");
-        }
-        sStores.remove(uri);
-    }
-
     /**
      * Decodes the contents of store-specific URIs and puts them into a {@link ServerSettings}
      * object.
diff --git a/k9mail/src/main/java/com/fsck/k9/ui/settings/account/AccountSettingsFragment.kt b/k9mail/src/main/java/com/fsck/k9/ui/settings/account/AccountSettingsFragment.kt
index 2c0378ca4..16c02ede1 100644
--- a/k9mail/src/main/java/com/fsck/k9/ui/settings/account/AccountSettingsFragment.kt
+++ b/k9mail/src/main/java/com/fsck/k9/ui/settings/account/AccountSettingsFragment.kt
@@ -11,6 +11,7 @@ import com.fsck.k9.activity.ManageIdentities
 import com.fsck.k9.activity.setup.AccountSetupComposition
 import com.fsck.k9.activity.setup.AccountSetupIncoming
 import com.fsck.k9.activity.setup.AccountSetupOutgoing
+import com.fsck.k9.controller.MessagingController
 import com.fsck.k9.crypto.OpenPgpApiHelper
 import com.fsck.k9.mailstore.StorageManager
 import com.fsck.k9.ui.endtoend.AutocryptKeyTransferActivity
@@ -32,6 +33,7 @@ class AccountSettingsFragment : PreferenceFragmentCompat() {
     private val dataStoreFactory: AccountSettingsDataStoreFactory by inject()
     private val storageManager: StorageManager by inject()
     private val openPgpApiManager: OpenPgpApiManager by inject(parameters = { mapOf(""lifecycleOwner"" to this) })
+    private val messagingController: MessagingController by inject()
 
     private val accountUuid: String by lazy {
         checkNotNull(arguments?.getString(ARG_ACCOUNT_UUID)) { ""$ARG_ACCOUNT_UUID == null"" }
@@ -102,7 +104,7 @@ class AccountSettingsFragment : PreferenceFragmentCompat() {
 
     private fun initializeDeletePolicy(account: Account) {
         (findPreference(PREFERENCE_DELETE_POLICY) as? ListPreference)?.apply {
-            if (!account.remoteStore.isSeenFlagSupported) {
+            if (!messagingController.supportsSeenFlag(account)) {
                 removeEntry(DELETE_POLICY_MARK_AS_READ)
             }
         }
@@ -110,7 +112,7 @@ class AccountSettingsFragment : PreferenceFragmentCompat() {
 
     private fun initializeExpungePolicy(account: Account) {
         findPreference(PREFERENCE_EXPUNGE_POLICY)?.apply {
-            if (!account.remoteStore.isExpungeCapable) {
+            if (!messagingController.supportsExpunge(account)) {
                 remove()
             }
         }
@@ -118,14 +120,14 @@ class AccountSettingsFragment : PreferenceFragmentCompat() {
 
     private fun initializeMessageAge(account: Account) {
         findPreference(PREFERENCE_MESSAGE_AGE)?.apply {
-            if (!account.isSearchByDateCapable) {
+            if (!messagingController.supportsSearchByDate(account)) {
                 remove()
             }
         }
     }
 
     private fun initializeAdvancedPushSettings(account: Account) {
-        if (!account.remoteStore.isPushCapable) {
+        if (!messagingController.isPushCapable(account)) {
             findPreference(PREFERENCE_PUSH_MODE)?.remove()
             findPreference(PREFERENCE_ADVANCED_PUSH_SETTINGS)?.remove()
             findPreference(PREFERENCE_REMOTE_SEARCH)?.remove()
@@ -217,7 +219,7 @@ class AccountSettingsFragment : PreferenceFragmentCompat() {
 
     private fun initializeFolderSettings(account: Account) {
         findPreference(PREFERENCE_FOLDERS)?.let {
-            if (!account.remoteStore.isMoveCapable) {
+            if (!messagingController.isMoveCapable(account)) {
                 findPreference(PREFERENCE_ARCHIVE_FOLDER).remove()
                 findPreference(PREFERENCE_DRAFTS_FOLDER).remove()
                 findPreference(PREFERENCE_SENT_FOLDER).remove()
diff --git a/k9mail/src/test/java/com/fsck/k9/controller/MessagingControllerTest.java b/k9mail/src/test/java/com/fsck/k9/controller/MessagingControllerTest.java
index 209f21b2d..1fe7f96bf 100644
--- a/k9mail/src/test/java/com/fsck/k9/controller/MessagingControllerTest.java
+++ b/k9mail/src/test/java/com/fsck/k9/controller/MessagingControllerTest.java
@@ -498,7 +498,8 @@ public class MessagingControllerTest extends RobolectricTest {
     @Test
     public void searchRemoteMessagesSynchronous_shouldNotifyOnFinish() throws Exception {
         setupRemoteSearch();
-        when(account.getRemoteStore()).thenThrow(new MessagingException(""Test""));
+        when(backend.search(anyString(), nullable(String.class), nullable(Set.class), nullable(Set.class)))
+                .thenThrow(new MessagingException(""Test""));
 
         controller.searchRemoteMessagesSynchronous(""1"", FOLDER_NAME, ""query"", reqFlags, forbiddenFlags, listener);
 ",Remove references to RemoteStore from : k9mail module,"""Refactor backend API to include supportsSearchByDate and checkServerSettings methods, and update various classes to use the new backend API""","""Refactor MessagingController and RemoteStoreManager to use Backend abstraction""","""Add support for search by date to Backend API and implement it in ImapBackend""

This commit adds a new method `supportsSearchByDate` to the `Backend` interface and implements it in the `ImapBackend` class, returning true to indicate that IMAP supports search by date. It also adds a new method `checkServerSettings` to the `Backend` interface and implements it in the `ImapBackend` and `Pop3Backend` classes.","Refactor to use `Backend` interface for various server capabilities and settings checks, replacing direct calls to `RemoteStore`."
"diff --git a/.travis.yml b/.travis.yml
index e99f40d13..e5348b18d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -23,10 +23,6 @@ jdk:
 os:
   - linux
 
-branches:
-  only:
-    - master
-
 notifications:
   email: false
 ",Enable Travis for all branches .,"""Remove branch filtering from Travis CI configuration""","""Remove branch filtering and notifications configuration from Travis CI""

This commit message accurately reflects the changes made in the diff, which include removing the branch filtering and notifications configuration from the Travis CI configuration file.","""Removed branch restriction in Travis CI configuration""

This commit removes the `branches:` section from the `.travis.yml` configuration file, which previously restricted Travis CI builds to only run on the `master` branch. With this change, Travis CI will now run builds on all branches.",Removed branch restriction for Travis CI builds.
"diff --git a/OsmAnd/res/menu/wikivoyage_bottom_navigation.xml b/OsmAnd/res/menu/wikivoyage_bottom_navigation.xml
new file mode 100644
index 0000000000..8b55b93af2
--- /dev/null
+++ b/OsmAnd/res/menu/wikivoyage_bottom_navigation.xml
@@ -0,0 +1,10 @@
+<?xml version=""1.0"" encoding=""utf-8""?>
+<menu xmlns:android=""http://schemas.android.com/apk/res/android"">
+	<item
+		android:id=""@+id/action_explore""
+		android:title=""@string/shared_string_explore""/>
+
+	<item
+		android:id=""@+id/action_saved_articles""
+		android:title=""@string/saved_articles""/>
+</menu>
diff --git a/OsmAnd/res/values/strings.xml b/OsmAnd/res/values/strings.xml
index 3b46c67cf1..e691308917 100644
--- a/OsmAnd/res/values/strings.xml
+++ b/OsmAnd/res/values/strings.xml
@@ -9,6 +9,8 @@
          3. All your modified/created strings are in the top of the file (to make easier find what\'s translated).
     PLEASE: Have a look at http://code.google.com/p/osmand/wiki/UIConsistency, it may really improve your and our work  :-)  Thx - Hardy
     -->
+    <string name=""saved_articles"">Saved articles</string>
+    <string name=""shared_string_explore"">Explore</string>
     <string name=""shared_string_result"">Result</string>
     <string name=""use_two_digits_longitude"">Use two digits longitude</string>
     <string name=""shared_string_travel"">Travel</string>",Add menu file for wikivoyage bottom navigation,"""Added Wikivoyage bottom navigation menu and corresponding string resources""","""Added Wikivoyage bottom navigation menu and corresponding string resources.""","This commit appears to add a new menu resource file for a bottom navigation menu in the OsmAnd application, specifically for the Wikivoyage feature. The menu contains two items: ""Explore"" and ""Saved articles"". Additionally, two new string resources have been added to the `strings.xml` file to support these menu items.

Here's a suggested commit message:

```
Add bottom navigation menu for Wikivoyage with Explore and Saved articles options

This commit introduces a new bottom navigation menu for the Wikivoyage feature in the OsmAnd application. The menu includes two items: ""Explore"" and ""Saved articles"". The corresponding string resources have also been added to the `strings.xml` file.
```","""Add navigation menu for Wikivoyage with options to explore and view saved articles; update string resources accordingly."""
"diff --git a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/BeginNode.java b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/BeginNode.java
index f3d04429810..c18d1ee8f03 100644
--- a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/BeginNode.java
+++ b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/BeginNode.java
@@ -73,17 +73,27 @@ public class BeginNode extends AbstractStateSplit implements LIRLowerable, Simpl
         }
     }
 
-    public void evacuateGuards() {
+    public void evacuateGuards(FixedNode evacuateFrom) {
         if (!usages().isEmpty()) {
-            Node prevBegin = predecessor();
+            Node prevBegin = evacuateFrom;
             assert prevBegin != null;
             while (!(prevBegin instanceof BeginNode)) {
                 prevBegin = prevBegin.predecessor();
             }
-            replaceAtUsages(prevBegin);
+            for (Node anchored : anchored().snapshot()) {
+                anchored.replaceFirstInput(this, prevBegin);
+            }
         }
     }
 
+    public void prepareDelete() {
+        prepareDelete((FixedNode) predecessor());
+    }
+
+    public void prepareDelete(FixedNode evacuateFrom) {
+        evacuateGuards(evacuateFrom);
+    }
+
     @Override
     public boolean verify() {
         assertTrue(predecessor() != null || this == ((StructuredGraph) graph()).start() || this instanceof MergeNode, ""begin nodes must be connected"");
@@ -98,4 +108,8 @@ public class BeginNode extends AbstractStateSplit implements LIRLowerable, Simpl
     public NodeIterable<GuardNode> guards() {
         return usages().filter(GuardNode.class);
     }
+
+    public NodeIterable<Node> anchored() {
+        return usages();
+    }
 }
diff --git a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/IfNode.java b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/IfNode.java
index f32944fd7c7..62c4c04051f 100644
--- a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/IfNode.java
+++ b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/IfNode.java
@@ -161,14 +161,16 @@ public final class IfNode extends ControlSplitNode implements Simplifiable, LIRL
         EndNode falseEnd = (EndNode) falseSuccessor.next();
         assert trueEnd.merge() == falseEnd.merge();
 
+        FixedWithNextNode pred = (FixedWithNextNode) predecessor();
         MergeNode merge = trueEnd.merge();
+        merge.prepareDelete(pred);
         assert merge.usages().isEmpty();
 
         FixedNode next = merge.next();
         merge.setNext(null);
         setTrueSuccessor(null);
         setFalseSuccessor(null);
-        ((FixedWithNextNode) predecessor()).setNext(next);
+        pred.setNext(next);
         safeDelete();
         trueSuccessor.safeDelete();
         falseSuccessor.safeDelete();
diff --git a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/LoopBeginNode.java b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/LoopBeginNode.java
index 733887b5977..f2c836f1bf2 100644
--- a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/LoopBeginNode.java
+++ b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/LoopBeginNode.java
@@ -22,6 +22,8 @@
  */
 package com.oracle.graal.nodes;
 
+import static com.oracle.graal.graph.iterators.NodePredicates.*;
+
 import java.util.*;
 
 import com.oracle.graal.graph.*;
@@ -49,8 +51,13 @@ public class LoopBeginNode extends MergeNode implements Node.IterableNodeType, L
         return usages().filter(LoopEndNode.class);
     }
 
+    @Override
+    public NodeIterable<Node> anchored() {
+        return super.anchored().filter(isNotA(LoopEndNode.class));
+    }
+
     public List<LoopEndNode> orderedLoopEnds() {
-        List<LoopEndNode> snapshot = usages().filter(LoopEndNode.class).snapshot();
+        List<LoopEndNode> snapshot = loopEnds().snapshot();
         Collections.sort(snapshot, new Comparator<LoopEndNode>() {
             @Override
             public int compare(LoopEndNode o1, LoopEndNode o2) {
diff --git a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/MergeNode.java b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/MergeNode.java
index ce82e316eb1..9f9f1a82808 100644
--- a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/MergeNode.java
+++ b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/MergeNode.java
@@ -28,6 +28,7 @@ import com.oracle.graal.debug.*;
 import com.oracle.graal.graph.*;
 import com.oracle.graal.graph.iterators.*;
 import com.oracle.graal.nodes.spi.*;
+import com.oracle.graal.util.*;
 
 /**
  * Denotes the merging of multiple control-flow paths.
@@ -115,12 +116,22 @@ public class MergeNode extends BeginNode implements Node.IterableNodeType, LIRLo
     }
 
     public NodeIterable<PhiNode> phis() {
-        return this.usages().filter(new NodePredicate() {
+        return this.usages().filter(PhiNode.class).filter(new NodePredicate() {
             @Override
             public boolean apply(Node n) {
-                return n instanceof PhiNode && ((PhiNode) n).merge() == MergeNode.this;
+                return ((PhiNode) n).merge() == MergeNode.this;
             }
-        }).filter(PhiNode.class);
+        });
+    }
+
+    @Override
+    public NodeIterable<Node> anchored() {
+        return super.anchored().filter(isNotA(PhiNode.class).or(new NodePredicate() {
+            @Override
+            public boolean apply(Node n) {
+                return ((PhiNode) n).merge() != MergeNode.this;
+            }
+        }));
     }
 
     @Override
@@ -136,7 +147,9 @@ public class MergeNode extends BeginNode implements Node.IterableNodeType, LIRLo
                     }
                 }
             }
-            Debug.log(""Split %s into loop ends for %s"", this, begin);
+            FixedNode evacuateAnchoredTo = new ComputeImmediateDominator(this).compute();
+            Debug.log(""Split %s into loop ends for %s. Evacuate to %s"", this, begin, evacuateAnchoredTo);
+            this.prepareDelete(evacuateAnchoredTo);
             int numEnds = this.forwardEndCount();
             StructuredGraph graph = (StructuredGraph) graph();
             for (int i = 0; i < numEnds - 1; i++) {
diff --git a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/StructuredGraph.java b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/StructuredGraph.java
index bd6995ea836..f10ff9a51a7 100644
--- a/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/StructuredGraph.java
+++ b/graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/StructuredGraph.java
@@ -168,6 +168,9 @@ public class StructuredGraph extends Graph {
 
     public void removeFixed(FixedWithNextNode node) {
         assert node != null;
+        if (node instanceof BeginNode) {
+            ((BeginNode) node).prepareDelete();
+        }
         assert node.usages().isEmpty() : node + "" "" + node.usages();
         FixedNode next = node.next();
         node.setNext(null);
@@ -208,15 +211,11 @@ public class StructuredGraph extends Graph {
         assert node.usages().isEmpty();
         assert survivingSuccessor >= 0 && survivingSuccessor < node.blockSuccessorCount() : ""invalid surviving successor "" + survivingSuccessor + "" for "" + node;
         BeginNode begin = node.blockSuccessor(survivingSuccessor);
-        begin.evacuateGuards();
-        FixedNode next = begin.next();
-        begin.setNext(null);
         for (int i = 0; i < node.blockSuccessorCount(); i++) {
             node.setBlockSuccessor(i, null);
         }
-        node.replaceAtPredecessors(next);
+        node.replaceAtPredecessors(begin);
         node.safeDelete();
-        begin.safeDelete();
     }
 
     public void removeSplitPropagate(ControlSplitNode node, int survivingSuccessor) {
@@ -224,9 +223,6 @@ public class StructuredGraph extends Graph {
         assert node.usages().isEmpty();
         assert survivingSuccessor >= 0 && survivingSuccessor < node.blockSuccessorCount() : ""invalid surviving successor "" + survivingSuccessor + "" for "" + node;
         BeginNode begin = node.blockSuccessor(survivingSuccessor);
-        begin.evacuateGuards();
-        FixedNode next = begin.next();
-        begin.setNext(null);
         for (int i = 0; i < node.blockSuccessorCount(); i++) {
             BeginNode successor = node.blockSuccessor(i);
             node.setBlockSuccessor(i, null);
@@ -234,10 +230,9 @@ public class StructuredGraph extends Graph {
                 GraphUtil.killCFG(successor);
             }
         }
-        if (next.isAlive()) {
-            node.replaceAtPredecessors(next);
+        if (begin.isAlive()) {
+            node.replaceAtPredecessors(begin);
             node.safeDelete();
-            begin.safeDelete();
         } else {
             assert node.isDeleted();
         }
@@ -257,31 +252,23 @@ public class StructuredGraph extends Graph {
         assert node != null && replacement != null && node.isAlive() && replacement.isAlive() : ""cannot replace "" + node + "" with "" + replacement;
         assert survivingSuccessor >= 0 && survivingSuccessor < node.blockSuccessorCount() : ""invalid surviving successor "" + survivingSuccessor + "" for "" + node;
         BeginNode begin = node.blockSuccessor(survivingSuccessor);
-        begin.evacuateGuards();
-        FixedNode next = begin.next();
-        begin.setNext(null);
         for (int i = 0; i < node.blockSuccessorCount(); i++) {
             node.setBlockSuccessor(i, null);
         }
-        replacement.setNext(next);
+        replacement.setNext(begin);
         node.replaceAndDelete(replacement);
-        begin.safeDelete();
     }
 
     public void replaceSplitWithFloating(ControlSplitNode node, FloatingNode replacement, int survivingSuccessor) {
         assert node != null && replacement != null && node.isAlive() && replacement.isAlive() : ""cannot replace "" + node + "" with "" + replacement;
         assert survivingSuccessor >= 0 && survivingSuccessor < node.blockSuccessorCount() : ""invalid surviving successor "" + survivingSuccessor + "" for "" + node;
         BeginNode begin = node.blockSuccessor(survivingSuccessor);
-        begin.evacuateGuards();
-        FixedNode next = begin.next();
-        begin.setNext(null);
         for (int i = 0; i < node.blockSuccessorCount(); i++) {
             node.setBlockSuccessor(i, null);
         }
-        node.replaceAtPredecessors(next);
+        node.replaceAtPredecessors(begin);
         node.replaceAtUsages(replacement);
         node.safeDelete();
-        begin.safeDelete();
     }
 
     public void addAfterFixed(FixedWithNextNode node, FixedWithNextNode newNode) {
@@ -326,13 +313,7 @@ public class StructuredGraph extends Graph {
         FixedNode sux = merge.next();
         FrameState stateAfter = merge.stateAfter();
         // evacuateGuards
-        Node prevBegin = singleEnd.predecessor();
-        assert prevBegin != null;
-        while (!(prevBegin instanceof BeginNode)) {
-            prevBegin = prevBegin.predecessor();
-        }
-        merge.replaceAtUsages(prevBegin);
-
+        merge.prepareDelete((FixedNode) singleEnd.predecessor());
         merge.safeDelete();
         if (stateAfter != null && stateAfter.usages().isEmpty()) {
             stateAfter.safeDelete();","Improve exacuation of anchored values , use it to fix if and merge simplifications","""Refactor BeginNode evacuation and deletion logic""","""Improve BeginNode and MergeNode deletion logic to handle anchored nodes correctly""","""Refactor BeginNode, IfNode, LoopBeginNode, MergeNode, and StructuredGraph for better evacuation and deletion of nodes""

This commit introduces several changes to the classes BeginNode, IfNode, LoopBeginNode, MergeNode, and StructuredGraph in the Graal compiler's node representation.

1. BeginNode:
* A new method, `prepareDelete(FixedNode evacuateFrom)`, is added to evacuate guards and prepare the node for deletion. This method is also called in a new `prepareDelete()` method, which evacuates guards from the predecessor node.
* The `evacuateGuards()` method is updated to take a `FixedNode evacuateFrom` parameter and replace the node at its usages with the given evacuateFrom node.
* A new method, `anchored()`, is added to return the usages of the BeginNode.
1. IfNode:
* The `delete()` method is updated to call the `prepareDelete(FixedWithNextNode)` method on the MergeNode instead of directly setting the next node of the predecessor.
1. LoopBeginNode:
* The `anchored()` method is overridden to return only the usages that are not LoopEndNodes.
1. MergeNode:
* The `anchored()` method is overridden to return only the usages that are not PhiNodes or whose merge is not the MergeNode itself.
1. StructuredGraph:
* The `removeFixed(FixedWithNextNode node)` method is updated to call the `prepareDelete()` method on the BeginNode before removing it from the graph.
* Several other methods for removing and replacing nodes are updated to call the `prepareDelete()` method on the BeginNode or MergeNode before removing it from the graph.

These changes aim to improve the evacuation and deletion of nodes in the Graal compiler's graph representation by making the process more explicit and consistent.","Refactor BeginNode to enhance guard handling and anchored nodes evacuation, improving overall graph node deletion operations and consistency."
"diff --git a/gui/src/main/java/io/bisq/gui/main/dao/wallet/tx/BsqTxView.java b/gui/src/main/java/io/bisq/gui/main/dao/wallet/tx/BsqTxView.java
index 867580b4d6..74b09f266e 100644
--- a/gui/src/main/java/io/bisq/gui/main/dao/wallet/tx/BsqTxView.java
+++ b/gui/src/main/java/io/bisq/gui/main/dao/wallet/tx/BsqTxView.java
@@ -19,6 +19,7 @@ package io.bisq.gui.main.dao.wallet.tx;
 
 import de.jensd.fx.fontawesome.AwesomeDude;
 import de.jensd.fx.fontawesome.AwesomeIcon;
+import io.bisq.common.UserThread;
 import io.bisq.common.locale.Res;
 import io.bisq.core.btc.wallet.BsqBalanceListener;
 import io.bisq.core.btc.wallet.BsqWalletService;
@@ -57,6 +58,7 @@ import javax.inject.Inject;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
 @FxmlView
@@ -179,26 +181,28 @@ public class BsqTxView extends ActivatableView<GridPane, Void> {
     }
 
     private void onChainHeightChanged() {
-        if (bsqWalletService.getBestChainHeight() > 0) {
-            final boolean synced = bsqWalletService.getBestChainHeight() == bsqChainState.getChainHeadHeight();
-            chainSyncIndicator.setVisible(!synced);
-            chainSyncIndicator.setManaged(!synced);
-            if (bsqChainState.getChainHeadHeight() > 0)
-                chainSyncIndicator.setProgress((double) bsqChainState.getChainHeadHeight() / (double) bsqWalletService.getBestChainHeight());
-
-            if (synced)
-                chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSynced"",
-                        bsqChainState.getChainHeadHeight(),
-                        bsqWalletService.getBestChainHeight()));
-            else
+        UserThread.runAfter(() -> {
+            if (bsqWalletService.getBestChainHeight() > 0) {
+                final boolean synced = bsqWalletService.getBestChainHeight() == bsqChainState.getChainHeadHeight();
+                chainSyncIndicator.setVisible(!synced);
+                chainSyncIndicator.setManaged(!synced);
+                if (bsqChainState.getChainHeadHeight() > 0)
+                    chainSyncIndicator.setProgress((double) bsqChainState.getChainHeadHeight() / (double) bsqWalletService.getBestChainHeight());
+
+                if (synced)
+                    chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSynced"",
+                            bsqChainState.getChainHeadHeight(),
+                            bsqWalletService.getBestChainHeight()));
+                else
+                    chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSyncing"",
+                            bsqChainState.getChainHeadHeight(),
+                            bsqWalletService.getBestChainHeight()));
+            } else {
                 chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSyncing"",
                         bsqChainState.getChainHeadHeight(),
                         bsqWalletService.getBestChainHeight()));
-        } else {
-           ",Add delay at blockheight display to cover both dao and bitcoinj updates,"""Wrap onChainHeightChanged logic in UserThread.runAfter to ensure UI updates are executed on the correct thread""","According to the diff, the commit message should be:

""Update BsqTxView to handle chain height changes asynchronously""

This commit message accurately reflects the changes made in the code, which involve moving the chain height update logic to run asynchronously using `UserThread.runAfter()`.","The commit message should be:

""Refactor onChainHeightChanged method in BsqTxView.java and add UserThread.runAfter to improve UI responsiveness""

Explanation:

* The `onChainHeightChanged` method in `BsqTxView.java` has been refactored to use `UserThread.runAfter` to improve UI responsiveness.
* The `chainHeightLabel` text is updated differently depending on whether the chain is synced or not.
* The `chainSyncIndicator` is set to visible and managed only if the chain is not synced.
* The `chainSyncIndicator` progress is set to the ratio of `bsqChainState.getChainHeadHeight()` to `bsqWalletService.getBestChainHeight()`.
* The `chainHeightLabel` text is set to a different message depending on whether the chain is synced or not.
* The `UserThread.runAfter` method is used to run the code after a delay of 100 milliseconds, to improve UI responsiveness.",Run `onChainHeightChanged` method on the UserThread to ensure the UI updates are executed on JavaFX Application Thread.
"diff --git a/examples/test/src/test/java/org/parceler/ConverterTarget.java b/examples/test/src/test/java/org/parceler/ConverterTarget.java
index f6816a7..51aa732 100644
--- a/examples/test/src/test/java/org/parceler/ConverterTarget.java
+++ b/examples/test/src/test/java/org/parceler/ConverterTarget.java
@@ -30,10 +30,11 @@ public class ConverterTarget {
     String s;
     List<String> list;
     Map<String, String> map;
+    List<SubParcel> parcelList;
 
     public ConverterTarget(){}
 
-    public ConverterTarget(byte b, Byte bobj, double d, Double dobj, float f, Float fobj, int i, Integer iobj, long l, Long lobj, byte[] bya, char[] ca, boolean[] ba, int[] ia, long[] la, float[] fa, double[] da, String[] sa, String s, List list, Map<String, String> map) {
+    public ConverterTarget(byte b, Byte bobj, double d, Double dobj, float f, Float fobj, int i, Integer iobj, long l, Long lobj, byte[] bya, char[] ca, boolean[] ba, int[] ia, long[] la, float[] fa, double[] da, String[] sa, String s, List<String> list, Map<String, String> map, List<SubParcel> parcelList) {
         this.b = b;
         this.bobj = bobj;
         this.d = d;
@@ -55,6 +56,7 @@ public class ConverterTarget {
         this.s = s;
         this.list = list;
         this.map = map;
+        this.parcelList = parcelList;
     }
 
     public byte getB() {
@@ -144,4 +146,8 @@ public class ConverterTarget {
     public Map getMap() {
         return map;
     }
+
+    public List<SubParcel> getParcelList(){
+        return parcelList;
+    }
 }
diff --git a/examples/test/src/test/java/org/parceler/ConverterTest.java b/examples/test/src/test/java/org/parceler/ConverterTest.java
index 47f9602..4a8823a 100644
--- a/examples/test/src/test/java/org/parceler/ConverterTest.java
+++ b/examples/test/src/test/java/org/parceler/ConverterTest.java
@@ -54,7 +54,11 @@ public class ConverterTest {
         map.put(""one"", ""two"");
         map.put(""three"", ""four"");
 
-        ConverterTarget target = new ConverterTarget(b, bobj, d, dobj, f, fobj, i, iobj, l, lobj, bya, ca, ba, ia, la, fa, da, sa, s, list, map);
+        List<SubParcel> parcelList = new ArrayList<SubParcel>();
+
+        parcelList.add(new SubParcel(""test""));
+
+        ConverterTarget target = new ConverterTarget(b, bobj, d, dobj, f, fobj, i, iobj, l, lobj, bya, ca, ba, ia, la, fa, da, sa, s, list, map, parcelList);
 
         Parcelable converted = Parcels.wrap(target);
         ConverterTarget unwrapped = Parcels.unwrap(converted);
@@ -80,5 +84,7 @@ public class ConverterTest {
         assertEquals(s, unwrapped.getS());
         assertEquals(list, unwrapped.getList());
         assertEquals(map, unwrapped.getMap());
+        assertEquals(parcelList.size(), unwrapped.getParcelList().size());
+        assertEquals(parcelList.get(0).getName(), unwrapped.getParcelList().get(0).getName());
     }
 }
diff --git a/parceler/src/main/java/org/parceler/internal/ParcelableGenerator.java b/parceler/src/main/java/org/parceler/internal/ParcelableGenerator.java
index b34af43..86bea09 100644
--- a/parceler/src/main/java/org/parceler/internal/ParcelableGenerator.java
+++ b/parceler/src/main/java/org/parceler/internal/ParcelableGenerator.java
@@ -25,10 +25,7 @@ import org.androidtransfuse.gen.InvocationBuilder;
 import org.androidtransfuse.gen.UniqueVariableNamer;
 import org.androidtransfuse.util.matcher.Matcher;
 import org.androidtransfuse.util.matcher.Matchers;
-import org.parceler.ParcelConverter;
-import org.parceler.ParcelWrapper;
-import org.parceler.ParcelerRuntimeException;
-import org.parceler.Parcels;
+import org.parceler.*;
 
 import javax.inject.Inject;
 import java.io.Serializable;
@@ -45,6 +42,7 @@ public class ParcelableGenerator {
     private static final String NEW_ARRAY = ""newArray"";
     private static final String WRITE_TO_PARCEL = ""writeToParcel"";
     private static final String DESCRIBE_CONTENTS = ""describeContents"";
+    public static final String UNWRAP_METHOD = ""unwrap"";
     public static final String WRAP_METHOD = ""wrap"";
 
     private final JCodeModel codeModel;
@@ -87,21 +85,21 @@ public class ParcelableGenerator {
             JType inputType = generationUtil.ref(type);
 
             JDefinedClass parcelableClass = generationUtil.defineClass(ClassNamer.className(type).append(Parcels.IMPL_EXT).build());
-            parcelableClass._implements(codeModel.ref(""android.os.Parcelable""))
-                    ._implements(codeModel.ref(ParcelWrapper.class).narrow(inputType));
+            parcelableClass._implements(generationUtil.ref(""android.os.Parcelable""))
+                    ._implements(generationUtil.ref(ParcelWrapper.class).narrow(inputType));
 
             //wrapped @Parcel
             JFieldVar wrapped = parcelableClass.field(JMod.PRIVATE, inputType, variableNamer.generateName(type));
 
             //Parcel constructor
             JMethod parcelConstructor = parcelableClass.constructor(JMod.PUBLIC);
-            JVar parcelParam = parcelConstructor.param(codeModel.ref(""android.os.Parcel""), variableNamer.generateName(""android.os.Parcel""));
+            JVar parcelParam = parcelConstructor.param(generationUtil.ref(""android.os.Parcel""), variableNamer.generateName(""android.os.Parcel""));
             JBlock parcelConstructorBody = parcelConstructor.body();
 
             //writeToParcel(android.os.Parcel,int)
             JMethod writeToParcelMethod = parcelableClass.method(JMod.PUBLIC, codeModel.VOID, WRITE_TO_PARCEL);
             writeToParcelMethod.annotate(Override.class);
-            JVar wtParcelParam = writeToParcelMethod.param(codeModel.ref(""android.os.Parcel""), variableNamer.generateName(""android.os.Parcel""));
+            JVar wtParcelParam = writeToParcelMethod.param(generationUtil.ref(""android.os.Parcel""), variableNamer.generateName(""android.os.Parcel""));
             JVar flags = writeToParcelMethod.param(codeModel.INT, ""flags"");
 
             if (parcelableDescriptor.getParcelConverterType() == null) {
@@ -156,12 +154,12 @@ public class ParcelableGenerator {
             //public static final CREATOR = ...
             JDefinedClass creatorClass = parcelableClass._class(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, classNamer.numberedClassName(new ASTStringType(""android.os.Parcelable.Creator"")).build().getClassName());
 
-            creatorClass._implements(codeModel.ref(""android.os.Parcelable.Creator"").narrow(parcelableClass));
+            creatorClass._implements(generationUtil.ref(""android.os.Parcelable.Creator"").narrow(parcelableClass));
 
             //createFromParcel method
             JMethod createFromParcelMethod = creatorClass.method(JMod.PUBLIC, parcelableClass, CREATE_FROM_PARCEL);
             createFromParcelMethod.annotate(Override.class);
-            JVar cfpParcelParam = createFromParcelMethod.param(codeModel.ref(""android.os.Parcel""), variableNamer.generateName(codeModel.ref(""android.os.Parcel"")));
+            JVar cfpParcelParam = createFromParcelMethod.param(generationUtil.ref(""android.os.Parcel""), variableNamer.generateName(generationUtil.ref(""android.os.Parcel"")));
 
             createFromParcelMethod.body()._return(JExpr._new(parcelableClass).arg(cfpParcelParam));
 
@@ -185,16 +183,16 @@ public class ParcelableGenerator {
     private void buildReadFromParcel(JDefinedClass parcelableClass, JBlock parcelConstructorBody, JFieldVar wrapped, MethodReference propertyAccessor, JVar parcelParam) {
         //invocation
         propertyAccessor.accept(readFromParcelVisitor,
-                new ReadContext(parcelConstructorBody, wrapped, propertyAccessor.getType(), buildReadFromParcelExpression(parcelParam, parcelableClass, propertyAccessor.getType())));
+                new ReadContext(parcelConstructorBody, wrapped, propertyAccessor.getType(), buildReadFromParcelExpression(parcelConstructorBody, parcelParam, parcelableClass, propertyAccessor.getType())));
     }
 
     private void buildReadFromParcel(JDefinedClass parcelableClass, JBlock parcelConstructorBody, JFieldVar wrapped, FieldReference propertyAccessor, JVar parcelParam) {
         //invocation
         propertyAccessor.accept(readFromParcelVisitor,
-                new ReadContext(parcelConstructorBody, wrapped, propertyAccessor.getType(), buildReadFromParcelExpression(parcelParam, parcelableClass, propertyAccessor.getType())));
+                new ReadContext(parcelConstructorBody, wrapped, propertyAccessor.getType(), buildReadFromParcelExpression(parcelConstructorBody, parcelParam, parcelableClass, propertyAccessor.getType())));
     }
     
-    private void buildReadFromParcel(JDefinedClass parcelableClass, JBlock parcelConstructorBody,ASTType wrappedType,  JFieldVar wrapped, ConstructorReference propertyAccessor, JVar parcelParam){
+    private void buildReadFromParcel(JDefinedClass parcelableClass, JBlock parcelConstructorBody, ASTType wrappedType,  JFieldVar wrapped, ConstructorReference propertyAccessor, JVar parcelParam){
 
         ASTConstructor constructor = propertyAccessor.getConstructor();
         List<ASTType> parameterTypes = new ArrayList<ASTType>();
@@ -202,18 +200,18 @@ public class ParcelableGenerator {
 
         for (ASTParameter parameter : constructor.getParameters()) {
             parameterTypes.add(parameter.getASTType());
-            inputExpression.add(buildReadFromParcelExpression(parcelParam, parcelableClass, parameter.getASTType()));
+            inputExpression.add(buildReadFromParcelExpression(parcelConstructorBody, parcelParam, parcelableClass, parameter.getASTType()));
         }
 
         parcelConstructorBody.assign(wrapped, invocationBuilder.buildConstructorCall(constructor.getAccessModifier(), parameterTypes, inputExpression, wrappedType));
     }
 
-    private JExpression buildReadFromParcelExpression(JVar parcelParam, JDefinedClass parcelableClass, ASTType type){
+    private JExpression buildReadFromParcelExpression(JBlock body, JVar parcelParam, JDefinedClass parcelableClass, ASTType type){
         JClass returnJClassRef = generationUtil.ref(type);
 
         ReadWriteGenerator generator = getGenerator(type);
 
-        return generator.generateReader(parcelParam, type, returnJClassRef, parcelableClass);
+        return generator.generateReader(body, parcelParam, type, returnJClassRef, parcelableClass);
     }
 
     private void buildWriteToParcel(JBlock body, JVar parcel, JVar flags, AccessibleReference reference, ASTType wrappedType, JFieldVar wrapped) {
@@ -236,7 +234,7 @@ public class ParcelableGenerator {
 
     public interface ReadWriteGenerator{
 
-        JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass);
+        JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass);
 
         void generateWriter(JBlock body, JVar parcel, JVar flags, ASTType type, JExpression getExpression);
     }
@@ -248,7 +246,7 @@ public class ParcelableGenerator {
         }
 
         @Override
-        public JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
             return parcelParam.invoke(getReadMethod());
         }
 
@@ -269,7 +267,7 @@ public class ParcelableGenerator {
         }
 
         @Override
-        public JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
             return parcelParam.invoke(getReadMethod()).arg(returnJClassRef.dotclass().invoke(""getClassLoader""));
         }
 
@@ -361,7 +359,7 @@ public class ParcelableGenerator {
         }
 
         @Override
-        public JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
             return JExpr.cast(returnJClassRef, parcelParam.invoke(getReadMethod()).arg(returnJClassRef.dotclass().invoke(""getClassLoader"")));
         }
 
@@ -378,7 +376,7 @@ public class ParcelableGenerator {
         }
 
         @Override
-        public JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
             return JExpr.cast(returnJClassRef, parcelParam.invoke(getReadMethod()));
         }
 
@@ -400,8 +398,8 @@ public class ParcelableGenerator {
         }
 
         @Override
-        public JExpression generateReader(JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
-            JClass wrapperRef = codeModel.ref(ParcelWrapper.class).narrow(generationUtil.ref(type));
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+            JClass wrapperRef = generationUtil.ref(ParcelWrapper.class).narrow(generationUtil.ref(type));
             return ((JExpression) JExpr.cast(wrapperRef, parcelParam.invoke(getReadMethod())
                     .arg(parcelableClass.dotclass().invoke(""getClassLoader"")))).invoke(ParcelWrapper.GET_PARCEL);
         }
@@ -413,6 +411,57 @@ public class ParcelableGenerator {
         }
     }
 
+    public static class ListOfParcelsReadWriteGenerator extends ReadWriteGeneratorBase {
+
+        private final ClassGenerationUtil generationUtil;
+        private final JCodeModel codeModel;
+        private final UniqueVariableNamer namer;
+
+        public ListOfParcelsReadWriteGenerator(ClassGenerationUtil generationUtil, JCodeModel codeModel, UniqueVariableNamer namer) {
+            super(""readArrayList"", new Class[]{ClassLoader.class}, ""writeList"", new Class[]{List.class});
+            this.generationUtil = generationUtil;
+            this.codeModel = codeModel;
+            this.namer = namer;
+        }
+
+        @Override
+        public JExpression generateReader(JBlock body, JVar parcelParam, ASTType type, JClass returnJClassRef, JDefinedClass parcelableClass) {
+            //Builds a collection version of Parcels.unwrap()
+            JClass parcelableType = generationUtil.ref(""android.os.Parcelable"");
+            JClass listType = generationUtil.ref(List.class);
+            JClass arrayListType = generationUtil.ref(ArrayList.class);
+            JClass parcelableListType = generationUtil.ref(List.class).narrow(parcelableType);
+
+
+            JVar listVar = body.decl(listType, namer.generateName(List.class), JExpr._new(arrayListType));
+            JForEach forEach = body.forEach(parcelableType, namer.generateName(parcelableType), JExpr.cast(parcelableListType, parcelParam.invoke(getReadMethod())
+                    .arg(parcelableClass.dotclass().invoke(""getClassLoader""))));
+            JBlock forEachBody = forEach.body();
+
+            forEachBody.invoke(listVar, ""add"").arg(generationUtil.ref(Parcels.class).staticInvoke(""unwrap"").arg(forEach.var()));
+
+            return listVar;
+        }
+
+        @Override
+        public void generateWriter(JBlock body, JVar parcel, JVar flags, ASTType type, JExpression getExpression) {
+            //Builds a loop version of Parcels.wrap()
+            JClass parcelableType = generationUtil.ref(""android.os.Parcelable"");
+            JClass listType = generationUtil.ref(List.class).narrow(parcelableType);
+            JClass arrayListType = generationUtil.ref(ArrayList.class).narrow(parcelableType);
+            JClass inputType = generationUtil.ref(Object.class);
+
+
+            JVar listVar = body.decl(listType, namer.generateName(List.class), JExpr._new(arrayListType));
+            JForEach forEach = body.forEach(inputType, namer.generateName(parcelableType), getExpression);
+            JBlock forEachBody = forEach.body();
+
+            forEachBody.invoke(listVar, ""add"").arg(generationUtil.ref(Parcels.class).staticInvoke(""wrap"").arg(forEach.var()));
+
+            body.invoke(parcel, getWriteMethod()).arg(listVar);
+        }
+    }
+
     public static class ImplementsMatcher implements Matcher<ASTType>{
 
         private final ASTType superType;
@@ -455,6 +504,28 @@ public class ParcelableGenerator {
         }
     }
 
+    public static class ListOfParcelsMatcher implements Matcher<ASTType>{
+
+        private final ASTClassFactory astClassFactory;
+        private final ExternalParcelRepository externalParcelRepository;
+
+        public ListOfParcelsMatcher(ExternalParcelRepository externalParcelRepository, ASTClassFactory astClassFactory) {
+            this.externalParcelRepository = externalParcelRepository;
+            this.astClassFactory = astClassFactory;
+        }
+
+        @Override
+        public boolean matches(ASTType type) {
+            Matcher<ASTType> listMatcher = Matchers.type(astClassFactory.getType(List.class)).ignoreGenerics().build();
+            Matcher<ASTType> arrayListMatcher = Matchers.type(astClassFactory.getType(List.class)).ignoreGenerics().build();
+            if(listMatcher.matches(type) || arrayListMatcher.matches(type) && type.getGenericParameters().size() > 0){
+                ASTType genericType = type.getGenericParameters().iterator().next();
+                return genericType.isAnnotated(Parcel.class) || externalParcelRepository.contains(genericType);
+            }
+            return false;
+        }
+    }
+
     private void setup() {
         addPair(byte.class, ""readByte"", ""writeByte"");
         addPair(Byte.class, ""readByte"", ""writeByte"", byte.class);
@@ -484,6 +555,7 @@ public class ParcelableGenerator {
         generators.put(new ImplementsMatcher(new ASTStringType(""android.os.Parcelable"")), new ParcelableReadWriteGenerator(""readParcelable"", ""writeParcelable"", ""android.os.Parcelable""));
         generators.put(new ImplementsMatcher(new ASTArrayType(new ASTStringType(""android.os.Parcelable""))), new ParcelableReadWriteGenerator(""readParcelableArray"", ""writeParcelableArray"", ""[Landroid.os.Parcelable;""));
         generators.put(new ParcelMatcher(externalParcelRepository), new ParcelReadWriteGenerator(generationUtil, codeModel));
+        generators.put(new ListOfParcelsMatcher(externalParcelRepository, astClassFactory), new ListOfParcelsReadWriteGenerator(generationUtil, codeModel, variableNamer));
         generators.put(Matchers.type(astClassFactory.getType(List.class)).ignoreGenerics().build(), new ClassloaderReadWriteGenerator(""readArrayList"", ""writeList"", List.class));
         generators.put(Matchers.type(astClassFactory.getType(ArrayList.class)).ignoreGenerics().build(), new ClassloaderReadWriteGenerator(""readArrayList"", ""writeList"", List.class));
         generators.put(Matchers.type(astClassFactory.getType(Map.class)).ignoreGenerics().build(), new ClassloaderReadWriteGenerator(""readHashMap"", ""writeMap"", Map.class));",Added handling of List of Parcel,"""Added support for parceling lists of parcels""","""Added support for parceling lists of parcelable objects""","""Added support for List<SubParcel> in ConverterTarget and updated ConverterTest accordingly""

Explanation:

* In ConverterTarget.java, a new field `parcelList` of type `List<SubParcel>` has been added along with its getter method. The constructor has also been updated to include this field.
* In ConverterTest.java, a new list of `SubParcel` objects has been created and added to the `ConverterTarget` object. The test has been updated to check the size and contents of the `parcelList` field after unwrapping the Parcelable.
* In ParcelableGenerator.java, some imports have been updated and the `UNWRAP_METHOD` constant has been added. However, these changes do not seem directly related to the addition of `List<SubParcel>` support.",Added support for List<SubParcel> in ParcelableGenerator and corresponding tests in ConverterTarget and ConverterTest.
"diff --git a/CHANGES.txt b/CHANGES.txt
index 8548d71d94..3ede9b7fa3 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,4 +1,5 @@
 2.1.12
+ * Fix the sstable-needs-cleanup check (CASSANDRA-10740)
  * (cqlsh) Print column names before COPY operation (CASSANDRA-8935)
  * Add Native-Transport-Requests back to tpstats (CASSANDRA-10044)
  * Make paging logic consistent between searcher impls (CASSANDRA-10683)
diff --git a/src/java/org/apache/cassandra/db/compaction/CompactionManager.java b/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
index b85eb5119f..b0ad24474c 100644
--- a/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
+++ b/src/java/org/apache/cassandra/db/compaction/CompactionManager.java
@@ -44,6 +44,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multiset;
 import com.google.common.collect.Sets;
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.util.concurrent.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -690,7 +691,8 @@ public class CompactionManager implements CompactionManagerMBean
      * Determines if a cleanup would actually remove any data in this SSTable based
      * on a set of owned ranges.
      */
-    static boolean needsCleanup(SSTableReader sstable, Collection<Range<Token>> ownedRanges)
+    @VisibleForTesting
+    public static boolean needsCleanup(SSTableReader sstable, Collection<Range<Token>> ownedRanges)
     {
         assert !ownedRanges.isEmpty(); // cleanup checks for this
 
@@ -729,7 +731,7 @@ public class CompactionManager implements CompactionManagerMBean
             }
 
             Range<Token> nextRange = sortedRanges.get(i + 1);
-            if (!nextRange.contains(firstBeyondRange.getToken()))
+            if (firstBeyondRange.getToken().compareTo(nextRange.left) <= 0)
             {
                 // we found a key in between the owned ranges
                 return true;
diff --git a/test/unit/org/apache/cassandra/db/CleanupTest.java b/test/unit/org/apache/cassandra/db/CleanupTest.java
index 06f89978f0..1d04dfaca7 100644
--- a/test/unit/org/apache/cassandra/db/CleanupTest.java
+++ b/test/unit/org/apache/cassandra/db/CleanupTest.java
@@ -22,9 +22,11 @@ import java.io.IOException;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
+import java.util.AbstractMap;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
@@ -40,6 +42,7 @@ import org.apache.cassandra.db.index.SecondaryIndex;
 import org.apache.cassandra.dht.BytesToken;
 import org.apache.cassandra.dht.Range;
 import org.apache.cassandra.io.sstable.SSTableReader;
+import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.locator.TokenMetadata;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.ByteBufferUtil;
@@ -168,6 +171,78 @@ public class CleanupTest extends SchemaLoader
         assertEquals(0, rows.size());
     }
 
+    @Test
+    public void testNeedsCleanup() throws Exception
+    {
+        // setup
+        StorageService.instance.getTokenMetadata().clearUnsafe();
+        Keyspace keyspace = Keyspace.open(KEYSPACE1);
+        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF1);
+        fillCF(cfs, LOOPS);
+
+        // prepare SSTable and some useful tokens
+        SSTableReader ssTable = cfs.getSSTables().iterator().next();
+        final Token ssTableMin = ssTable.first.getToken();
+        final Token ssTableMax = ssTable.last.getToken();
+
+        final Token min = token((byte) 0);
+        final Token before1 = token((byte) 2);
+        final Token before2 = token((byte) 5);
+        final Token before3 = token((byte) 10);
+        final Token before4 = token((byte) 47);
+        final Token insideSsTable1 = token((byte) 50);
+        final Token insideSsTable2 = token((byte) 55);
+        final Token max = token((byte) 127, (byte) 127, (byte) 127, (byte) 127);
+
+        // test sanity check
+        assert (min.compareTo(ssTableMin) < 0);
+        assert (before1.compareTo(ssTableMin) < 0);
+        assert (before2.compareTo(ssTableMin) < 0);
+        assert (before3.compareTo(ssTableMin) < 0);
+        assert (before4.compareTo(ssTableMin) < 0);
+        assert (ssTableMin.compareTo(insideSsTable1) < 0);
+        assert (insideSsTable1.compareTo(ssTableMax) < 0);
+        assert (ssTableMin.compareTo(insideSsTable2) < 0);
+        assert (insideSsTable2.compareTo(ssTableMax) < 0);
+        assert (ssTableMax.compareTo(max) < 0);
+
+        // test cases
+        // key: needs cleanup?
+        // value: owned ranges
+        List<Map.Entry<Boolean, List<Range<Token>>>> testCases = new LinkedList<Map.Entry<Boolean, List<Range<Token>>>>()
+        {
+            {
+                add(entry(false, Arrays.asList(range(min, max)))); // SSTable owned as a whole
+                add(entry(true, Arrays.asList(range(min, insideSsTable1)))); // SSTable owned only partially
+                add(entry(true, Arrays.asList(range(insideSsTable1, max)))); // SSTable owned only partially
+                add(entry(true, Arrays.asList(range(min, ssTableMin)))); // SSTable not owned at all
+                add(entry(true, Arrays.asList(range(ssTableMax, max)))); // only last token of SSTable is owned
+                add(entry(true, Arrays.asList(range(min, insideSsTable1), range(insideSsTable2, max)))); // SSTable partially owned by two ranges
+                add(entry(true, Arrays.asList(range(ssTableMin, ssTableMax)))); // first token of SSTable is not owned
+                add(entry(false, Arrays.asList(range(before4, max)))); // first token of SSTable is not owned
+                add(entry(false, Arrays.asList(range(min, before1), range(before2, before3), range(before4, max)))); // SSTable owned by the last range
+            }
+        };
+
+        // check all test cases
+        for (Map.Entry<Boolean, List<Range<Token>>> testCase : testCases)
+        {
+            assertEquals(testCase.getKey(), CompactionManager.needsCleanup(ssTable, testCase.getValue()));
+        }
+    }
+    private static BytesToken token(byte ... value)
+    {
+        return new BytesToken(value);
+    }
+    private static <K, V> Map.Entry<K, V> entry(K k, V v)
+    {
+       return new AbstractMap.SimpleEntry<K, V>(k, v);
+    }
+    private static Range<Token> range(Token from, Token to)
+    {
+        return new Range<>(from, to);
+    }
+
     protected void fillCF(ColumnFamilyStore cfs, int rowsPerSSTable)
     {
         CompactionManager.instance.disableAutoCompaction();",Fix the sstable - needs - cleanup check .,"""Fix sstable-needs-cleanup check (CASSANDRA-10740)""",Fix sstable-needs-cleanup check and add test cases for it (CASSANDRA-10740),"""Fix the sstable-needs-cleanup check (CASSANDRA-10740)""

This commit appears to be fixing an issue with the ""sstable-needs-cleanup"" check in the CompactionManager class. The change includes a modification to the ""needsCleanup"" method and the addition of a new test case in the CleanupTest class. The test case seems to be testing various scenarios to ensure that the ""needsCleanup"" method is working correctly. The ""@VisibleForTesting"" annotation was also added to the ""needsCleanup"" method, which suggests that this method is now accessible for testing purposes.","""Fix sstable-needs-cleanup check and add unit test for needsCleanup method in CompactionManager."""
"diff --git a/messagebus/src/tests/bucketsequence/bucketsequence.cpp b/messagebus/src/tests/bucketsequence/bucketsequence.cpp
index 57d1f99e5c3..671f50efc03 100644
--- a/messagebus/src/tests/bucketsequence/bucketsequence.cpp
+++ b/messagebus/src/tests/bucketsequence/bucketsequence.cpp
@@ -11,19 +11,13 @@
 
 using namespace mbus;
 
-TEST_SETUP(Test);
-
 class MyMessage : public SimpleMessage {
 public:
     MyMessage() : SimpleMessage(""foo"") { }
-    bool hasBucketSequence() override { return true; }
+    bool hasBucketSequence() const override { return true; }
 };
 
-int
-Test::Main()
-{
-    TEST_INIT(""bucketsequence_test"");
-
+TEST(""bucketsequence_test"") {
     Slobrok slobrok;
     TestServer server(MessageBusParams()
                       .addProtocol(std::make_shared<SimpleProtocol>())
@@ -37,9 +31,10 @@ Test::Main()
     msg->setRoute(Route::parse(""foo""));
     ASSERT_TRUE(session->send(std::move(msg)).isAccepted());
     Reply::UP reply = receptor.getReply();
-    ASSERT_TRUE(reply.get() != nullptr);
+    ASSERT_TRUE(reply);
     EXPECT_EQUAL(1u, reply->getNumErrors());
     EXPECT_EQUAL((uint32_t)ErrorCode::SEQUENCE_ERROR, reply->getError(0).getCode());
 
-    TEST_DONE();
 }
+
+TEST_MAIN() { TEST_RUN_ALL(); }
diff --git a/messagebus/src/vespa/messagebus/message.h b/messagebus/src/vespa/messagebus/message.h
index 15e7384707c..22fb1e282b6 100644
--- a/messagebus/src/vespa/messagebus/message.h
+++ b/messagebus/src/vespa/messagebus/message.h
@@ -135,7 +135,7 @@ public:
      *
      * @return True to enable bucket sequencing.
      */
-    virtual bool hasBucketSequence() { return false; }
+    virtual bool hasBucketSequence() const { return false; }
 
     /**
      * Obtain the approximate size of this message object in bytes. This enables
diff --git a/messagebus/src/vespa/messagebus/network/rpcsend.cpp b/messagebus/src/vespa/messagebus/network/rpcsend.cpp
index 2422638dc05..dca7f0c997f 100644
--- a/messagebus/src/vespa/messagebus/network/rpcsend.cpp
+++ b/messagebus/src/vespa/messagebus/network/rpcsend.cpp
@@ -114,7 +114,7 @@ RPCSend::send(RoutingNode &recipient, const vespalib::Version &version,
               const PayLoadFiller & payload, duration timeRemaining)
 {
     auto ctx = std::make_unique<SendContext>(recipient, timeRemaining);
-    RPCServiceAddress &address = static_cast<RPCServiceAddress&>(recipient.getServiceAddress());
+    auto &address = static_cast<RPCServiceAddress&>(recipient.getServiceAddress());
     const Message &msg = recipient.getMessage();
     Route route = recipient.getRoute();
     Hop hop = route.removeHop(0);
diff --git a/storageapi/src/vespa/storageapi/mbusprot/storagecommand.h b/storageapi/src/vespa/storageapi/mbusprot/storagecommand.h
index 88af61509d5..697e7d6b461 100644
--- a/storageapi/src/vespa/storageapi/mbusprot/storagecommand.h
+++ b/storageapi/src/vespa/storageapi/mbusprot/storagecommand.h
@@ -21,6 +21,8 @@ public:
     api::StorageMessage::SP getInternalMessage() override { return _cmd; }
     api::StorageMessage::CSP getInternalMessage() const override { return _cmd; }
 
+    bool hasBucketSequence() const override { return true; }
+
     uint8_t priority() const override {
         return ((getInternalMessage()->getPriority()) / 255) * 16;
     }",Remove non - semantic changes prior to using a sequenced threadpool in mbus .,"""Fixed const correctness in MessageBus and StorageAPI""","""Implement bucket sequencing for messages and related tests and fixes.""","""Make hasBucketSequence() const in message and storagecommand, and adjust bucketsequence test""

Explanation:

* In `messagebus/src/tests/bucketsequence/bucketsequence.cpp`, the `hasBucketSequence()` method of the `MyMessage` class is changed from non-const to const.
* In `messagebus/src/vespa/messagebus/message.h`, the `hasBucketSequence()` method of the `Message` class is changed from non-const to const.
* In `storageapi/src/vespa/storageapi/mbusprot/storagecommand.h`, the `hasBucketSequence()` method is added to the `StorageCommand` class as a const method.
* The test setup and main function in `bucketsequence.cpp` are also adjusted to use the TEST macro and TEST_MAIN.","""Refactored bucketsequence tests and ensured const-correctness in bucket sequence check methods."""
"diff --git a/assembly.xml b/assembly.xml
index 493fa76d2..093cd7a45 100644
--- a/assembly.xml
+++ b/assembly.xml
@@ -42,10 +42,6 @@
             <directory>locales</directory>
             <outputDirectory>locales</outputDirectory>
         </fileSet>
-        <fileSet>
-            <directory>ranking</directory>
-            <outputDirectory>ranking</outputDirectory>
-        </fileSet>
    ","take out obsolete \"" ranking \"" directory from maven packaging","""Remove ranking fileSet from assembly.xml""","""Removed ranking fileSet from assembly.xml""","""Removed ranking file set from assembly.xml""

This commit message describes the change made in the given diff where the file set for the 'ranking' directory has been removed from the assembly.xml file.",Remove the <fileSet> configuration for the 'ranking' directory from the assembly.xml file.
"diff --git a/configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSessionRepo.java b/configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSessionRepo.java
index 885716b8e67..24eb862c528 100644
--- a/configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSessionRepo.java
+++ b/configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSessionRepo.java
@@ -206,14 +206,16 @@ public class RemoteSessionRepo extends SessionRepo<RemoteSession> {
     }
 
     private void nodeChanged() {
-        Multiset<Session.Status> sessionMetrics = HashMultiset.create();
-        for (RemoteSession session : listSessions()) {
-            sessionMetrics.add(session.getStatus());
-        }
-        metrics.setNewSessions(sessionMetrics.count(Session.Status.NEW));
-        metrics.setPreparedSessions(sessionMetrics.count(Session.Status.PREPARE));
-        metrics.setActivatedSessions(sessionMetrics.count(Session.Status.ACTIVATE));
-        metrics.setDeactivatedSessions(sessionMetrics.count(Session.Status.DEACTIVATE));
+        zkWatcherExecutor.execute(() -> {
+            Multiset<Session.Status> sessionMetrics = HashMultiset.create();
+            for (RemoteSession session : listSessions()) {
+                sessionMetrics.add(session.getStatus());
+            }
+            metrics.setNewSessions(sessionMetrics.count(Session.Status.NEW));
+            metrics.setPreparedSessions(sessionMetrics.count(Session.Status.PREPARE));
+            metrics.setActivatedSessions(sessionMetrics.count(Session.Status.ACTIVATE));
+            metrics.setDeactivatedSessions(sessionMetrics.count(Session.Status.DEACTIVATE));
+        });
     }
 
     @SuppressWarnings(""unused"")
diff --git a/configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantRepository.java b/configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantRepository.java
index 1e4ab210c81..ad2472add89 100644
--- a/configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantRepository.java
+++ b/configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantRepository.java
@@ -362,6 +362,7 @@ public class TenantRepository {
         try {
             zkCacheExecutor.shutdown();
             checkForRemovedApplicationsService.shutdown();
+            zkWatcherExecutor.shutdownAndWait();
             zkCacheExecutor.awaitTermination(50, TimeUnit.SECONDS);
             checkForRemovedApplicationsService.awaitTermination(50, TimeUnit.SECONDS);
         }","Shut down executor , and use shared executor for minor work too","""Offload session metrics calculation to zkWatcherExecutor in RemoteSessionRepo""","""Added asynchronous shutdown for zkWatcherExecutor and improved thread safety in nodeChanged() method of RemoteSessionRepo""","""Added shutdown and awaitTermination for zkWatcherExecutor in RemoteSessionRepo and TenantRepository""

This commit adds a shutdown and awaitTermination call for the zkWatcherExecutor in the RemoteSessionRepo and TenantRepository classes. This ensures that the executor is properly shut down and waits for it to terminate before proceeding. This can help in preventing any issues that may arise due to the executor not being shut down properly.","""Add zkWatcherExecutor for asynchronous node changes and ensure proper shutdown in TenantRepository."""
"diff --git a/runners/google-cloud-dataflow-java/build.gradle b/runners/google-cloud-dataflow-java/build.gradle
index b2046d521f..faa9d0ed9d 100644
--- a/runners/google-cloud-dataflow-java/build.gradle
+++ b/runners/google-cloud-dataflow-java/build.gradle
@@ -47,6 +47,9 @@ processResources {
 test {
   systemProperty ""beamTestPipelineOptions"", """"
   systemProperty ""beamUseDummyRunner"", ""true""
+  useJUnit {
+    excludeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'
+  }
 }
 
 configurations {
@@ -91,6 +94,7 @@ dependencies {
   testCompile library.java.jackson_dataformat_yaml
   validatesRunner project(path: "":sdks:java:core"", configuration: ""shadowTest"")
   validatesRunner project(project.path)
+  validatesRunner project(path: project.path, configuration: ""testRuntime"")
   validatesRunner library.java.hamcrest_core
   validatesRunner library.java.hamcrest_library
   coreSDKJavaIntegrationTest project(project.path)
@@ -101,10 +105,6 @@ dependencies {
   googleCloudPlatformIntegrationTest project(path: "":sdks:java:io:google-cloud-platform"", configuration: ""testRuntime"")
 }
 
-test {
-  systemProperties = [ ""beamUseDummyRunner"" : ""true"" ]
-}
-
 def dataflowProject = project.findProperty('dataflowProject') ?: 'apache-beam-testing'
 def dataflowValidatesTempRoot = project.findProperty('dataflowTempRoot') ?: 'gs://temp-storage-for-validates-runner-tests'
 def dataflowPostCommitTempRoot = project.findProperty('dataflowTempRoot') ?: 'gs://temp-storage-for-end-to-end-tests'
@@ -170,7 +170,8 @@ task validatesRunnerLegacyWorkerTest(type: Test) {
   // to the number of CPU cores, but can be increased by setting --max-workers=N.
   maxParallelForks Integer.MAX_VALUE
   classpath = configurations.validatesRunner
-  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs)
+  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs) +
+          files(project(project.path).sourceSets.test.output.classesDirs)
   useJUnit {
     includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'
     commonExcludeCategories.each {
@@ -196,7 +197,8 @@ task validatesRunnerLegacyWorkerJava11Test(type: Test) {
     // to the number of CPU cores, but can be increased by setting --max-workers=N.
     maxParallelForks Integer.MAX_VALUE
     classpath = configurations.validatesRunner
-    testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs)
+  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs) +
+          files(project(project.path).sourceSets.test.output.classesDirs)
     useJUnit {
         includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'
         commonExcludeCategories.each {
@@ -259,7 +261,8 @@ task validatesRunnerFnApiWorkerTest(type: Test) {
   // to the number of CPU cores, but can be increased by setting --max-workers=N.
   maxParallelForks Integer.MAX_VALUE
   classpath = configurations.validatesRunner
-  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs)
+  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs) +
+          files(project(project.path).sourceSets.test.output.classesDirs)
   useJUnit {
     includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'
     commonExcludeCategories.each {
@@ -290,7 +293,8 @@ task validatesRunnerFnApiWorkerExecutableStageTest(type: Test) {
   // to the number of CPU cores, but can be increased by setting --max-workers=N.
   maxParallelForks Integer.MAX_VALUE
   classpath = configurations.validatesRunner
-  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs)
+  testClassesDirs = files(project("":sdks:java:core"").sourceSets.test.output.classesDirs) +
+          files(project(project.path).sourceSets.test.output.classesDirs)
   useJUnit {
     includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'
     commonExcludeCategories.each {
diff --git a/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java b/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
index 4c48cb37da..9128a1f6b5 100644
--- a/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
+++ b/runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java
@@ -48,6 +48,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
@@ -118,6 +119,10 @@ import org.apache.beam.sdk.transforms.Combine.CombineFn;
 import org.apache.beam.sdk.transforms.Combine.GroupedValues;
 import org.apache.beam.sdk.transforms.Create;
 import org.apache.beam.sdk.transforms.DoFn;
+import org.apache.beam.sdk.transforms.DoFn.ProcessContext;
+import org.apache.beam.sdk.transforms.DoFn.ProcessElement;
+import org.apache.beam.sdk.transforms.GroupByKey;
+import org.apache.beam.sdk.transforms.GroupIntoBatches;
 import org.apache.beam.sdk.transforms.Impulse;
 import org.apache.beam.sdk.transforms.PTransform;
 import org.apache.beam.sdk.transforms.ParDo;
@@ -156,6 +161,7 @@ import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Utf8;
 import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;
 import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;
 import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;
+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.format.DateTimeFormat;
@@ -422,6 +428,14 @@ public class DataflowRunner extends PipelineRunner<DataflowPipelineJob> {
       // Dataflow Streaming runner overrides the SPLITTABLE_PROCESS_KEYED transform
       // natively in the Dataflow service.
     } else {
+      overridesBuilder
+          // Replace GroupIntoBatches before the state/timer replacements below since
+          // GroupIntoBatches internally uses a stateful DoFn.
+          .add(
+          PTransformOverride.of(
+              PTransformMatchers.classEqualTo(GroupIntoBatches.class),
+              new BatchGroupIntoBatchesOverrideFactory()));
+
       overridesBuilder
           // State and timer pardos are implemented by expansion to GBK-then-ParDo
           .add(
@@ -1430,6 +1444,61 @@ public class DataflowRunner extends PipelineRunner<DataflowPipelineJob> {
     DataflowPipelineTranslator.registerTransformTranslator(Impulse.class, new ImpulseTranslator());
   }
 
+  private static class BatchGroupIntoBatchesOverrideFactory<K, V>
+      implements PTransformOverrideFactory<
+          PCollection<KV<K, V>>, PCollection<KV<K, Iterable<V>>>, GroupIntoBatches<K, V>> {
+
+    @Override
+    public PTransformReplacement<PCollection<KV<K, V>>, PCollection<KV<K, Iterable<V>>>>
+        getReplacementTransform(
+            AppliedPTransform<
+                    PCollection<KV<K, V>>, PCollection<KV<K, Iterable<V>>>, GroupIntoBatches<K, V>>
+                transform) {
+      return PTransformReplacement.of(
+          PTransformReplacements.getSingletonMainInput(transform),
+          new BatchGroupIntoBatches(transform.getTransform().getBatchSize()));
+    }
+
+    @Override
+    public Map<PValue, ReplacementOutput> mapOutputs(
+        Map<TupleTag<?>, PValue> outputs, PCollection<KV<K, Iterable<V>>> newOutput) {
+      return ReplacementOutputs.singleton(outputs, newOutput);
+    }
+  }
+
+  /** Specialized implementation of {@link GroupIntoBatches} for bounded Dataflow pipelines. */
+  static class BatchGroupIntoBatches<K, V>
+      extends PTransform<PCollection<KV<K, V>>, PCollection<KV<K, Iterable<V>>>> {
+    private final long batchSize;
+
+    private BatchGroupIntoBatches(long batchSize) {
+      this.batchSize = batchSize;
+    }
+
+    @Override
+    public PCollection<KV<K, Iterable<V>>> expand(PCollection<KV<K, V>> input) {
+      return input
+          .apply(""GroupAll"", GroupByKey.create())
+          .apply(
+              ""SplitIntoBatches"",
+              ParDo.of(
+                  new DoFn<KV<K, Iterable<V>>, KV<K, Iterable<V>>>() {
+                    @ProcessElement
+                    public void process(ProcessContext c) {
+                      // Iterators.partition lazily creates the partitions as they are accessed
+                      // allowing it to partition very large iterators.
+                      Iterator<List<V>> iterator =
+                          Iterators.partition(c.element().getValue().iterator(), (int) batchSize);
+
+                      // Note that GroupIntoBatches only outputs when the batch is non-empty.
+                      while (iterator.hasNext()) {
+                        c.output(KV.of(c.element().getKey(), iterator.next()));
+                      }
+                    }
+                  }));
+    }
+  }
+
   private static class StreamingUnboundedReadOverrideFactory<T>
       implements PTransformOverrideFactory<PBegin, PCollection<T>, Read.Unbounded<T>> {
     @Override
diff --git a/runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowRunnerTest.java b/runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowRunnerTest.java
index 9e129a0300..0dba549e96 100644
--- a/runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowRunnerTest.java
+++ b/runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowRunnerTest.java
@@ -18,22 +18,25 @@
 package org.apache.beam.runners.dataflow;
 
 import static org.apache.beam.runners.dataflow.DataflowRunner.getContainerImageForJob;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.both;
+import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.hasItem;
 import static org.hamcrest.Matchers.hasKey;
 import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.startsWith;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyListOf;
@@ -72,11 +75,13 @@ import java.nio.file.StandardOpenOption;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+import org.apache.beam.runners.dataflow.DataflowRunner.BatchGroupIntoBatches;
 import org.apache.beam.runners.dataflow.DataflowRunner.StreamingShardedWriteFactory;
 import org.apache.beam.runners.dataflow.options.DataflowPipelineDebugOptions;
 import org.apache.beam.runners.dataflow.options.DataflowPipelineOptions;
@@ -114,11 +119,15 @@ import org.apache.beam.sdk.state.StateSpec;
 import org.apache.beam.sdk.state.StateSpecs;
 import org.apache.beam.sdk.state.ValueState;
 import org.apache.beam.sdk.testing.ExpectedLogs;
+import org.apache.beam.sdk.testing.PAssert;
 import org.apache.beam.sdk.testing.TestPipeline;
+import org.apache.beam.sdk.testing.ValidatesRunner;
 import org.apache.beam.sdk.transforms.Create;
 import org.apache.beam.sdk.transforms.DoFn;
+import org.apache.beam.sdk.transforms.GroupIntoBatches;
 import org.apache.beam.sdk.transforms.PTransform;
 import org.apache.beam.sdk.transforms.ParDo;
+import org.apache.beam.sdk.transforms.SerializableFunction;
 import org.apache.beam.sdk.transforms.SerializableFunctions;
 import org.apache.beam.sdk.transforms.windowing.BoundedWindow;
 import org.apache.beam.sdk.transforms.windowing.PaneInfo;
@@ -131,6 +140,7 @@ import org.apache.beam.sdk.values.TimestampedValue;
 import org.apache.beam.sdk.values.WindowingStrategy;
 import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Throwables;
 import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;
+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;
 import org.hamcrest.Description;
 import org.hamcrest.Matchers;
 import org.hamcrest.TypeSafeMatcher;
@@ -139,6 +149,7 @@ import org.joda.time.Instant;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
@@ -166,6 +177,7 @@ public class DataflowRunnerTest implements Serializable {
   @Rule public transient TemporaryFolder tmpFolder = new TemporaryFolder();
   @Rule public transient ExpectedException thrown = ExpectedException.none();
   @Rule public transient ExpectedLogs expectedLogs = ExpectedLogs.none(DataflowRunner.class);
+  @Rule public final transient TestPipeline pipeline = TestPipeline.create();
 
   private transient Dataflow.Projects.Locations.Jobs mockJobs;
   private transient GcsUtil mockGcsUtil;
@@ -1432,6 +1444,55 @@ public class DataflowRunnerTest implements Serializable {
     verifyMergingStatefulParDoRejected(options);
   }
 
+  @Test
+  @Category(ValidatesRunner.class)
+  public void testBatchGroupIntoBatchesOverride() {
+    // Ignore this test for streaming pipelines.
+    assumeFalse(pipeline.getOptions().as(StreamingOptions.class).isStreaming());
+
+    final int batchSize = 2;
+    List<KV<String, Integer>> testValues =
+        Arrays.asList(KV.of(""A"", 1), KV.of(""B"", 0), KV.of(""A"", 2), KV.of(""A"", 4), KV.of(""A"", 8));
+    PCollection<KV<String, Iterable<Integer>>> output =
+        pipeline.apply(Create.of(testValues)).apply(GroupIntoBatches.ofSize(batchSize));
+    PAssert.thatMultimap(output)
+        .satisfies(
+            new SerializableFunction<Map<String, Iterable<Iterable<Integer>>>, Void>() {
+              @Override
+              public Void apply(Map<String, Iterable<Iterable<Integer>>> input) {
+                assertEquals(2, input.size());
+                assertThat(input.keySet(), containsInAnyOrder(""A"", ""B""));
+                Map<String, Integer> sums = new HashMap<>();
+                for (Map.Entry<String, Iterable<Iterable<Integer>>> entry : input.entrySet()) {
+                  for (Iterable<Integer> batch : entry.getValue()) {
+                    assertThat(Iterables.size(batch), lessThanOrEqualTo(batchSize));
+                    for (Integer value : batch) {
+                      sums.put(entry.getKey(), value + sums.getOrDefault(entry.getKey(), 0));
+                    }
+                  }
+                }
+                assertEquals(15, (int) sums.get(""A""));
+                assertEquals(0, (int) sums.get(""B""));
+                return null;
+              }
+            });
+    pipeline.run();
+
+    AtomicBoolean sawGroupIntoBatchesOverride = new AtomicBoolean(false);
+    pipeline.traverseTopologically(
+        new PipelineVisitor.Defaults() {
+
+          @Override
+          public CompositeBehavior enterCompositeTransform(Node node) {
+            if (node.getTransform() instanceof BatchGroupIntoBatches) {
+              sawGroupIntoBatchesOverride.set(true);
+            }
+            return CompositeBehavior.ENTER_TRANSFORM;
+          }
+        });
+    assertTrue(sawGroupIntoBatchesOverride.get());
+  }
+
   private void testStreamingWriteOverride(PipelineOptions options, int expectedNumShards) {
     TestPipeline p = TestPipeline.fromOptions(options);
 
diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java
index b7b68cc104..3f724a9d1f 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupIntoBatches.java
@@ -80,6 +80,11 @@ public class GroupIntoBatches<K, InputT>
     return new GroupIntoBatches<>(batchSize);
   }
 
+  /** Returns the size of the batch. */
+  public long getBatchSize() {
+    return batchSize;
+  }
+
   @Override
   public PCollection<KV<K, Iterable<InputT>>> expand(PCollection<KV<K, InputT>> input) {
     Duration allowedLateness = input.getWindowingStrategy().getAllowedLateness();",Optimize GroupIntoBatches for batch Dataflow pipelines .,"""Add GroupIntoBatches override for bounded Dataflow pipelines""","""Implement batch grouping for Dataflow pipelines and add test for batch grouping override""","The commit message could be:

```bash
Update DataflowRunner to support GroupIntoBatches in batch mode

This change introduces a new PTransformOverrideFactory for GroupIntoBatches in batch mode. The BatchGroupIntoBatchesOverrideFactory replaces the GroupIntoBatches transform with a specialized implementation, BatchGroupIntoBatches, that works with bounded Dataflow pipelines.

Additionally, a new test case, testBatchGroupIntoBatchesOverride, is added to DataflowRunnerTest to verify the functionality of the BatchGroupIntoBatches transform. The test checks the output of the transform and ensures that the GroupIntoBatchesOverride is applied in the pipeline.

A new method, getBatchSize, is also added to the GroupIntoBatches class to return the size of the batch.
```","""Implement BatchGroupIntoBatches override for better handling in bounded pipelines and add new tests for validation."""
"diff --git a/.travis.yml b/.travis.yml
index 4b4d8d6983..350db7b907 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,9 +1,8 @@
 language: java
-script: ""mvn verify deploy --settings travisDeploySettings.xml""
+script: mvn verify deploy --settings travisDeploySettings.xml
 jdk:
-  - openjdk6
-
+- openjdk6
 env:
   global:
-  - secure: ""FPyn3w+tEhkqUD8PivyEFmXAIX3xlq5WhCqP1DyfoYXHrP8134Tkgasdg8PZdi1tOCSw9Ma63j0ccwxizJVlQOTY/UrItfPZPe0kpAY9s/L+WhYXSYrBdgLmJUylYyaIiz4rV5Z6nOWMLi3K3P2HBH+6lJPd2/Hfknfk0Xr7bVQ=""
-  - secure: ""usRRdgGnP275H1jmlnNAaKwspD/jHagr/R0gY7gEA3JgPP05ZZkE/DZuH2LA7JKKVYkoTMpWZQdm1fzNTW+MugLgxiWN6gGvKWP/nnSPzB8vkuEGKgYU/T4KNbSSbL11vaoOBEnMXu7fMCR90RJDo/TTQTYp6trwLPb4ZAhEZKc=""
+  - secure: mn5HXRqI8btBN76tIfrxeC6aLrXSgEuTVMA7ZuZLF7jwbTZkrs0rELFeAUNU0vjkW5gq3yKgV/WB0fhSFAMGGp44lrfOC0GB24lH3OaQWQQJcU7EKc7q/xvc65o9UbUTqxOoCBcQsqFaGSh7Op94mtR7h10Lbf7r69OcngOgt70=
+  - secure: i/GulSx1wbhHph7erloWXpdDunyqlKrWhEHqeEQeCn9BGVsJhBXtx/QWC03HtbvBg+tRGjHGQeiNfesbxBgVN87Vt3D8l8T6DygIVt9K2IDRtdm97gVf7P3tFi0PRRqTBT63eyXwymiMzxVOQC01OuLOHn4Y+HEFn80sdc+0WpA=
diff --git a/pom.xml b/pom.xml
index eb55104c1d..f0d8a493df 100644
--- a/pom.xml
+++ b/pom.xml
@@ -226,12 +226,6 @@
                 </configuration>
 
                 <executions>
-                    <!--<execution>-->
-                        <!--<id>prepare-agent</id>-->
-                        <!--<goals>-->
-                            <!--<goal>prepare-agent</goal>-->
-                        <!--</goals>-->
-                    <!--</execution>-->
                     <execution>
                   ",Added secures with travis commandline,"""Remove commented out execution block in pom.xml and update .travis.yml""","The commit message should be: 

""Update Travis CI configuration and remove unused Maven execution""

This message accurately reflects the changes made in the commit, including the update to the Travis CI configuration file and the removal of an unused Maven execution in the `pom.xml` file.","""Updated .travis.yml and pom.xml

1. In .travis.yml, removed unnecessary dashes (-) before openjdk6, updated secure environment variables, and removed quotes from the script command.
2. In pom.xml, commented out the 'prepare-agent' execution in the surefire plugin configuration.""","""Updated .travis.yml for formatting and env variables; cleaned up commented code in pom.xml."""
"diff --git a/src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java b/src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
index 97c08ddae..a4151e270 100644
--- a/src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
+++ b/src/org/zaproxy/zap/extension/pscan/ExtensionPassiveScan.java
@@ -25,6 +25,7 @@ import java.util.ArrayList;
 import java.util.List;
 
 import org.apache.commons.configuration.FileConfiguration;
+import org.apache.log4j.Logger;
 import org.parosproxy.paros.Constant;
 import org.parosproxy.paros.common.DynamicLoader;
 import org.parosproxy.paros.extension.ExtensionAdaptor;
@@ -47,6 +48,8 @@ public class ExtensionPassiveScan extends ExtensionAdaptor implements SessionCha
 	private PolicyPassiveScanPanel policyPanel = null;
 	private PassiveScanThread pst = null;
 	
+	private static final Logger logger = Logger.getLogger(ExtensionPassiveScan.class);
+	
 	public ExtensionPassiveScan() {
 		super();
 		initialize();
@@ -69,11 +72,16 @@ public class ExtensionPassiveScan extends ExtensionAdaptor implements SessionCha
 	}
 	
 	private void addPassiveScanner (PluginPassiveScanner scanner) {
-		FileConfiguration config = this.getModel().getOptionsParam().getConfig();
-		scanner.setConfig(config);
-
-		scannerList.add(scanner);
-		getPolicyPanel().getPassiveScanTableModel().addScanner(scanner);
+		try {
+			FileConfiguration config = this.getModel().getOptionsParam().getConfig();
+			scanner.setConfig(config);
+
+			scannerList.add(scanner);
+			getPolicyPanel().getPassiveScanTableModel().addScanner(scanner);
+			logger.info(""loaded passive scan rule: "" + scanner.getName());
+		} catch (Exception e) {
+			logger.error(""Failed to load passive scanner "" + scanner.getName(), e);
+		}
 	}
 	
 	@SuppressWarnings(""unchecked"")",Added logging and error handling around loading the scanners,"""Added logging for passive scan rule loading and error handling in ExtensionPassiveScan""",Added logging and exception handling for passive scan rule loading.,"""Added logging and exception handling to the addPassiveScanner method in ExtensionPassiveScan.java""

Explanation:

* The commit adds a `Logger` import and declares a `logger` variable at the class level.
* The `addPassiveScanner` method is modified to include a try-catch block, which logs an error message if an exception occurs while adding a new passive scanner.
* The commit also adds a log message to indicate that a new passive scan rule has been loaded successfully.",Added logging for passive scan rule loading and exception handling in ExtensionPassiveScan.java.
"diff --git a/java-symbol-solver-core/src/test/java/me/tomassetti/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclarationTest.java b/java-symbol-solver-core/src/test/java/me/tomassetti/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclarationTest.java
index a8d5e5415..9624d7a7e 100644
--- a/java-symbol-solver-core/src/test/java/me/tomassetti/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclarationTest.java
+++ b/java-symbol-solver-core/src/test/java/me/tomassetti/symbolsolver/javaparsermodel/declarations/JavaParserClassDeclarationTest.java
@@ -56,11 +56,29 @@ public class JavaParserClassDeclarationTest extends AbstractTest {
     }
 
     @Test
-    public void testGetAllSuperclasses() {
+    public void testGetAllSuperclassesWithoutTypeParameters() {
         JavaParserClassDeclaration cu = (JavaParserClassDeclaration) typeSolver.solveType(""com.github.javaparser.ast.CompilationUnit"");
         assertEquals(ImmutableSet.of(""com.github.javaparser.ast.Node"", ""java.lang.Object""), cu.getAllSuperClasses().stream().map(i -> i.getQualifiedName()).collect(Collectors.toSet()));
     }
 
+    @Test
+    public void testGetAllSuperclassesWithTypeParameters() {
+        JavaParserClassDeclaration constructorDeclaration = (JavaParserClassDeclaration) typeSolverNewCode.solveType(""com.github.javaparser.ast.body.ConstructorDeclaration"");
+        assertEquals(3, constructorDeclaration.getAllSuperClasses().size());
+
+        me.tomassetti.symbolsolver.model.usages.typesystem.ReferenceType ancestor = null;
+
+        ancestor = constructorDeclaration.getAllSuperClasses().get(0);
+        assertEquals(""com.github.javaparser.ast.body.BodyDeclaration"", ancestor.getQualifiedName());
+        assertEquals(""com.github.javaparser.ast.body.ConstructorDeclaration"", ancestor.typeParametersMap().getValueBySignature(""com.github.javaparser.ast.body.BodyDeclaration.T"").get().asReferenceType().getQualifiedName());
+
+        ancestor = constructorDeclaration.getAllSuperClasses().get(1);
+        assertEquals(""com.github.javaparser.ast.Node"", ancestor.getQualifiedName());
+
+        ancestor = constructorDeclaration.getAllSuperClasses().get(2);
+        assertEquals(""java.lang.Object"", ancestor.getQualifiedName());
+    }
+
     @Test
     public void testGetAllAncestors() {
         JavaParserClassDeclaration cu = (JavaParserClassDeclaration) typeSolver.solveType(""com.github.javaparser.ast.CompilationUnit"");",add test testGetAllSuperclassesWithTypeParameters,"""Added test for getting all superclasses with type parameters in JavaParserClassDeclaration""",Added test cases for getting all superclasses of JavaParserClassDeclaration with and without type parameters.,"""Added test for getting all superclasses with type parameters in JavaParserClassDeclarationTest""

Explanation:

* The method `testGetAllSuperclassesWithoutTypeParameters()` was renamed from `testGetAllSuperclasses()`.
* A new method `testGetAllSuperclassesWithTypeParameters()` was added to test the behavior of the `getAllSuperClasses()` method when type parameters are involved.
* The new method checks the size of the returned set of superclasses and also checks the qualified names and type parameters of each ancestor.
* The existing method `testGetAllAncestors()` was not changed.",Added tests for getting all superclasses with and without type parameters in JavaParserClassDeclaration.
"diff --git a/java/org/apache/catalina/core/ApplicationContext.java b/java/org/apache/catalina/core/ApplicationContext.java
index 9dfb694564..0186923aa4 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1253,7 +1253,7 @@ public class ApplicationContext implements ServletContext {
 
         Container[] wrappers = context.findChildren();
         for (Container wrapper : wrappers) {
-            result.put(((Wrapper) wrapper).getName(),
+            result.put(wrapper.getName(),
                     new ApplicationServletRegistration(
                             (Wrapper) wrapper, context));
         }
diff --git a/java/org/apache/catalina/core/ApplicationFilterConfig.java b/java/org/apache/catalina/core/ApplicationFilterConfig.java
index 5e63b8958a..b19d673e29 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -322,7 +322,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
             }
             if (!context.getIgnoreAnnotations()) {
                 try {
-                    ((StandardContext) context).getInstanceManager().destroyInstance(this.filter);
+                    context.getInstanceManager().destroyInstance(this.filter);
                 } catch (Exception e) {
                     Throwable t = ExceptionUtils
                             .unwrapInvocationTargetException(e);
@@ -343,7 +343,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     private InstanceManager getInstanceManager() {
         if (instanceManager == null) {
             if (context instanceof StandardContext) {
-                instanceManager = ((StandardContext)context).getInstanceManager();
+                instanceManager = context.getInstanceManager();
             } else {
                 instanceManager = new DefaultInstanceManager(null,
                         new HashMap<String, Map<String, String>>(),
diff --git a/java/org/apache/catalina/core/ApplicationPart.java b/java/org/apache/catalina/core/ApplicationPart.java
index 9f1ec4ea9a..d6400b5b61 100644
--- a/java/org/apache/catalina/core/ApplicationPart.java
+++ b/java/org/apache/catalina/core/ApplicationPart.java
@@ -62,7 +62,7 @@ public class ApplicationPart implements Part {
     @Override
     public String getHeader(String name) {
         if (fileItem instanceof DiskFileItem) {
-            return ((DiskFileItem) fileItem).getHeaders().getHeader(name);
+            return fileItem.getHeaders().getHeader(name);
         }
         return null;
     }
@@ -72,7 +72,7 @@ public class ApplicationPart implements Part {
         if (fileItem instanceof DiskFileItem) {
             LinkedHashSet<String> headerNames = new LinkedHashSet<>();
             Iterator<String> iter =
-                ((DiskFileItem) fileItem).getHeaders().getHeaderNames();
+                fileItem.getHeaders().getHeaderNames();
             while (iter.hasNext()) {
                 headerNames.add(iter.next());
             }
@@ -86,7 +86,7 @@ public class ApplicationPart implements Part {
         if (fileItem instanceof DiskFileItem) {
             LinkedHashSet<String> headers = new LinkedHashSet<>();
             Iterator<String> iter =
-                ((DiskFileItem) fileItem).getHeaders().getHeaders(name);
+                fileItem.getHeaders().getHeaders(name);
             while (iter.hasNext()) {
                 headers.add(iter.next());
             }
diff --git a/java/org/apache/catalina/core/AsyncContextImpl.java b/java/org/apache/catalina/core/AsyncContextImpl.java
index f4d9632a6a..034195c438 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -486,7 +486,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
     private InstanceManager getInstanceManager() {
         if (instanceManager == null) {
             if (context instanceof StandardContext) {
-                instanceManager = ((StandardContext)context).getInstanceManager();
+                instanceManager = context.getInstanceManager();
             } else {
                 instanceManager = new DefaultInstanceManager(null,
                         new HashMap<String, Map<String, String>>(),
diff --git a/java/org/apache/catalina/core/ContainerBase.java b/java/org/apache/catalina/core/ContainerBase.java
index a6344afd69..04dcd713e3 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1274,7 +1274,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         List<ObjectName> names = new ArrayList<>(children.size());
         for (Container next : children.values()) {
             if (next instanceof ContainerBase) {
-                names.add(((ContainerBase)next).getObjectName());
+                names.add(next.getObjectName());
             }
         }
         return names.toArray(new ObjectName[names.size()]);
diff --git a/java/org/apache/catalina/core/StandardWrapper.java b/java/org/apache/catalina/core/StandardWrapper.java
index 1425cf17d9..6e66aa57d6 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1711,7 +1711,7 @@ public class StandardWrapper extends ContainerBase
             keyProperties.append(hostName);
         }
 
-        String contextName = ((Context) getParent()).getName();
+        String contextName = getParent().getName();
         if (!contextName.startsWith(""/"")) {
             keyProperties.append('/');
         }
diff --git a/java/org/apache/catalina/ha/session/DeltaManager.java b/java/org/apache/catalina/ha/session/DeltaManager.java
index 95cae42428..e7344e0a35 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -758,14 +758,14 @@ public class DeltaManager extends ClusterManagerBase{
                     for (SessionMessage smsg : receivedMessageQueue) {
                         if (!stateTimestampDrop) {
                             messageReceived(smsg,
-                                    smsg.getAddress() != null ? (Member) smsg.getAddress() : null);
+                                    smsg.getAddress() != null ? smsg.getAddress() : null);
                         } else {
                             if (smsg.getEventType() != SessionMessage.EVT_GET_ALL_SESSIONS &&
                                     smsg.getTimestamp() >= stateTransferCreateSendTime) {
                                 // FIXME handle EVT_GET_ALL_SESSIONS later
                                 messageReceived(smsg,
                                         smsg.getAddress() != null ?
-                                                (Member) smsg.getAddress() :
+                                                smsg.getAddress() :
                                                 null);
                             } else {
                                 if (log.isWarnEnabled()) {
@@ -917,7 +917,7 @@ public class DeltaManager extends ClusterManagerBase{
                     break;
             } //switch
 
-            messageReceived(msg, msg.getAddress() != null ? (Member) msg.getAddress() : null);
+            messageReceived(msg, msg.getAddress() != null ? msg.getAddress() : null);
         }
     }
 
diff --git a/java/org/apache/catalina/ha/tcp/ReplicationValve.java b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
index f911f2d07e..e2c35627d7 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -310,7 +310,7 @@ public class ReplicationValve
         Context context = request.getContext();
         boolean isCrossContext = context != null
                 && context instanceof StandardContext
-                && ((StandardContext) context).getCrossContext();
+                && context.getCrossContext();
         try {
             if(isCrossContext) {
                 if(log.isDebugEnabled()) {
diff --git a/java/org/apache/catalina/loader/WebappLoader.java b/java/org/apache/catalina/loader/WebappLoader.java
index c28c370631..ad9bccd3e2 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -33,7 +33,6 @@ import javax.servlet.ServletContext;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Loader;
@@ -396,7 +395,7 @@ public class WebappLoader extends LifecycleMBeanBase
 
             setPermissions();
 
-            ((Lifecycle) classLoader).start();
+            classLoader.start();
 
             String contextName = context.getName();
             if (!contextName.startsWith(""/"")) {
diff --git a/java/org/apache/catalina/manager/host/HostManagerServlet.java b/java/org/apache/catalina/manager/host/HostManagerServlet.java
index 617bf707bf..c27e0d06b6 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -479,7 +479,7 @@ public class HostManagerServlet
         try {
             Container child = engine.findChild(name);
             engine.removeChild(child);
-            if ( child instanceof ContainerBase ) ((ContainerBase)child).destroy();
+            if ( child instanceof ContainerBase ) child.destroy();
         } catch (Exception e) {
             writer.println(smClient.getString(""hostManagerServlet.exception"",
                     e.toString()));
diff --git a/java/org/apache/catalina/mapper/MapperListener.java b/java/org/apache/catalina/mapper/MapperListener.java
index 4df71cedfb..51716ef62c 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -131,7 +131,7 @@ public class MapperListener extends LifecycleMBeanBase
     @Override
     protected String getDomainInternal() {
         if (service instanceof LifecycleMBeanBase) {
-            return ((LifecycleMBeanBase) service).getDomain();
+            return service.getDomain();
         } else {
             return null;
         }
diff --git a/java/org/apache/catalina/mbeans/MBeanFactory.java b/java/org/apache/catalina/mbeans/MBeanFactory.java
index a3755926e1..6e7143f3f6 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -752,7 +752,7 @@ public class MBeanFactory {
             host.removeChild(context);
             if(context instanceof StandardContext)
             try {
-                ((StandardContext)context).destroy();
+                context.destroy();
             } catch (Exception e) {
                 log.warn(""Error during context ["" + context.getName() + ""] destroy "", e);
            }
diff --git a/java/org/apache/catalina/storeconfig/StandardEngineSF.java b/java/org/apache/catalina/storeconfig/StandardEngineSF.java
index 2316ffaa49..290e623dab 100644
--- a/java/org/apache/catalina/storeconfig/StandardEngineSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardEngineSF.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Valve;
@@ -54,8 +53,7 @@ public class StandardEngineSF extends StoreFactoryBase {
         if (aEngine instanceof StandardEngine) {
             StandardEngine engine = (StandardEngine) aEngine;
             // Store nested <Listener> elements
-            LifecycleListener listeners[] = ((Lifecycle) engine)
-                    .findLifecycleListeners();
+            LifecycleListener listeners[] = engine.findLifecycleListeners();
             storeElementArray(aWriter, indent, listeners);
 
             // Store nested <Realm> element
diff --git a/java/org/apache/catalina/storeconfig/StandardHostSF.java b/java/org/apache/catalina/storeconfig/StandardHostSF.java
index 19d3e10189..31368bffb1 100644
--- a/java/org/apache/catalina/storeconfig/StandardHostSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardHostSF.java
@@ -23,7 +23,6 @@ import java.util.List;
 
 import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Valve;
@@ -55,8 +54,7 @@ public class StandardHostSF extends StoreFactoryBase {
         if (aHost instanceof StandardHost) {
             StandardHost host = (StandardHost) aHost;
             // Store nested <Listener> elements
-            LifecycleListener listeners[] = ((Lifecycle) host)
-                    .findLifecycleListeners();
+            LifecycleListener listeners[] = host.findLifecycleListeners();
             storeElementArray(aWriter, indent, listeners);
 
             // Store nested <Alias> elements
diff --git a/java/org/apache/catalina/storeconfig/StandardServerSF.java b/java/org/apache/catalina/storeconfig/StandardServerSF.java
index 1f2665c9c6..69023707e3 100644
--- a/java/org/apache/catalina/storeconfig/StandardServerSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardServerSF.java
@@ -19,7 +19,6 @@ package org.apache.catalina.storeconfig;
 
 import java.io.PrintWriter;
 
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Service;
 import org.apache.catalina.core.StandardServer;
@@ -68,8 +67,7 @@ public class StandardServerSF extends StoreFactoryBase {
         if (aObject instanceof StandardServer) {
             StandardServer server = (StandardServer) aObject;
             // Store nested <Listener> elements
-            LifecycleListener listeners[] = ((Lifecycle) server)
-                    .findLifecycleListeners();
+            LifecycleListener listeners[] = server.findLifecycleListeners();
             storeElementArray(aWriter, indent, listeners);
             /*LifecycleListener listener = null;
             for (int i = 0; listener == null && i < listeners.length; i++)
diff --git a/java/org/apache/catalina/storeconfig/StandardServiceSF.java b/java/org/apache/catalina/storeconfig/StandardServiceSF.java
index 67b6e44117..32e7779bc6 100644
--- a/java/org/apache/catalina/storeconfig/StandardServiceSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardServiceSF.java
@@ -21,7 +21,6 @@ import java.io.PrintWriter;
 
 import org.apache.catalina.Engine;
 import org.apache.catalina.Executor;
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.core.StandardService;
@@ -46,8 +45,7 @@ public class StandardServiceSF extends StoreFactoryBase {
         if (aService instanceof StandardService) {
             StandardService service = (StandardService) aService;
             // Store nested <Listener> elements
-            LifecycleListener listeners[] = ((Lifecycle) service)
-                    .findLifecycleListeners();
+            LifecycleListener listeners[] = service.findLifecycleListeners();
             storeElementArray(aWriter, indent, listeners);
 
             // Store nested <Executor> elements
diff --git a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
index 4ea22274b2..8c38712c6f 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -510,7 +510,7 @@ public abstract class AbstractReplicatedMap<K,V>
     public void transferState() {
         try {
             Member[] members = getMapMembers();
-            Member backup = members.length > 0 ? (Member) members[0] : null;
+            Member backup = members.length > 0 ? members[0] : null;
             if (backup != null) {
                 MapMessage msg = new MapMessage(mapContextName, getStateMessageType(), false,
                                                 null, null, null, null, null);
diff --git a/java/org/apache/el/lang/ExpressionBuilder.java b/java/org/apache/el/lang/ExpressionBuilder.java
index cde34a6735..f784d8e1f7 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -230,7 +230,7 @@ public final class ExpressionBuilder implements NodeVisitor {
                         """" + methodParameterCount, """" + node.jjtGetChild(0).jjtGetNumChildren()));
             }
         } else if (node instanceof AstIdentifier && this.varMapper != null) {
-            String variable = ((AstIdentifier) node).getImage();
+            String variable = node.getImage();
 
             // simply capture it
             this.varMapper.resolveVariable(variable);
diff --git a/java/org/apache/jasper/compiler/Generator.java b/java/org/apache/jasper/compiler/Generator.java
index ce29953a8e..b4a369ede5 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -330,7 +330,7 @@ class Generator {
                     }
                     for (int i = 0; i < namedAttrs.size(); i++) {
                         attrNames[attrs.getLength() + i] =
-                            ((NamedAttribute) namedAttrs.getNode(i)).getQName();
+                            namedAttrs.getNode(i).getQName();
                     }
                     Arrays.sort(attrNames, Collections.reverseOrder());
                     if (attrNames.length > 0) {
@@ -3415,8 +3415,7 @@ class Generator {
                         out.printil(""java.lang.String ""
                                 + varName
                  ",Removed redundant casts .,Remove unnecessary casts in various classes.,"""Remove unnecessary type casts and simplify code by using the correct method calls.""","""Update ApplicationContext, ApplicationFilterConfig, ApplicationPart, AsyncContextImpl, ContainerBase, StandardWrapper, DeltaManager, ReplicationValve, WebappLoader, HostManagerServlet, MapperListener, MBeanFactory, StandardEngineSF, StandardHostSF, StandardServerSF, StandardServiceSF, AbstractReplicatedMap, ExpressionBuilder, and Generator classes""",Refactored code to remove redundant type casting and clean up unnecessary imports across multiple files in the project.
"diff --git a/java/org/apache/tomcat/util/net/NioEndpoint.java b/java/org/apache/tomcat/util/net/NioEndpoint.java
index 6cb20abcc4..5d6d62890b 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -52,6 +52,7 @@ import javax.net.ssl.X509KeyManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
 import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
@@ -1478,11 +1479,11 @@ public class NioEndpoint extends AbstractEndpoint {
                     handshake = -1;
                 }
                 if ( handshake == 0 ) {
+                    SocketState state = SocketState.OPEN;
                     // Process the request from this socket
-                    boolean closed = (status==null)?(handler.process(socket)==Handler.SocketState.CLOSED) :
-                        (handler.event(socket,status)==Handler.SocketState.CLOSED);
+                    state = (status==null)?handler.process(socket):handler.event(socket,status);
 
-                    if (closed) {
+                    if (state == SocketState.CLOSED) {
                         // Close socket and pool
         ",Code clean - up . . Align BIO and NIO to make Async refactoring easier .,"""Refactor NioEndpoint to use SocketState enum for socket state handling""","""Refactor NioEndpoint to use SocketState enum for socket status handling""","""Update NioEndpoint to use SocketState enum in place of boolean for closed status""

Explanation: The provided code snippet shows a change in the variable type used to store the socket state, from a boolean 'closed' to an enum 'SocketState'. The enum value 'SocketState.CLOSED' is used in place of the boolean value 'true'. Additionally, the variable 'state' is initialized to 'SocketState.OPEN' before the 'process' or 'event' method is called on the 'handler' object. The 'if' condition also checks for 'SocketState.CLOSED' instead of 'true'. This change improves code readability and maintainability by using a more descriptive variable type and value.","""Refactored socket processing in NioEndpoint to use SocketState for determining the socket state."""
"diff --git a/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java b/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
index d8ba35ada..9d33a0316 100644
--- a/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
+++ b/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
@@ -28,6 +28,7 @@ import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 
+import com.mysema.query.mongodb.domain.*;
 import org.bson.types.ObjectId;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,15 +42,10 @@ import com.mongodb.MongoException;
 import com.mongodb.ReadPreference;
 import com.mysema.query.NonUniqueResultException;
 import com.mysema.query.SearchResults;
-import com.mysema.query.mongodb.domain.Address;
-import com.mysema.query.mongodb.domain.City;
-import com.mysema.query.mongodb.domain.Item;
-import com.mysema.query.mongodb.domain.MapEntity;
 import com.mysema.query.mongodb.domain.QAddress;
 import com.mysema.query.mongodb.domain.QItem;
 import com.mysema.query.mongodb.domain.QMapEntity;
 import com.mysema.query.mongodb.domain.QUser;
-import com.mysema.query.mongodb.domain.User;
 import com.mysema.query.mongodb.domain.User.Gender;
 import com.mysema.query.mongodb.morphia.MorphiaQuery;
 import com.mysema.query.types.EntityPath;
@@ -70,6 +66,7 @@ public class MongodbQueryTest {
     private final QItem item = QItem.item;
     private final QAddress address = QAddress.address;
     private final QMapEntity mapEntity = QMapEntity.mapEntity;
+    private final QDates dates = QDates.dates;
 
     List<User> users = Lists.newArrayList();
     User u1, u2, u3, u4;
@@ -77,7 +74,7 @@ public class MongodbQueryTest {
 
     public MongodbQueryTest() throws UnknownHostException, MongoException {
         mongo = new Mongo();
-        morphia = new Morphia().map(User.class).map(Item.class).map(MapEntity.class);
+        morphia = new Morphia().map(User.class).map(Item.class).map(MapEntity.class).map(Dates.class);
         ds = morphia.createDatastore(mongo, dbname);
     }
 
@@ -209,6 +206,18 @@ public class MongodbQueryTest {
         assertEquals(0, query().where(user.addresses.any().street.eq(""akatu"")).count());
     }
 
+    @Test
+    public void Dates() {
+        Date start = new Date();
+        ds.delete(ds.createQuery(Dates.class));
+        Dates d = new Dates();
+        d.setDate(new Date());
+        ds.save(d);
+        Date end = new Date();
+
+        assertEquals(d, query(dates).where(dates.date.between(start, end)).singleResult());
+    }
+
     @Test
     public void ElemMatch() {
 //      { ""addresses"" : { ""$elemMatch"" : { ""street"" : ""Aakatu1""}}}
diff --git a/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/domain/Dates.java b/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/domain/Dates.java
new file mode 100644
index 000000000..307580db1
--- /dev/null
+++ b/querydsl-mongodb/src/test/java/com/mysema/query/mongodb/domain/Dates.java
@@ -0,0 +1,31 @@
+package com.mysema.query.mongodb.domain;
+
+import org.bson.types.ObjectId;
+import org.mongodb.morphia.annotations.Entity;
+import org.mongodb.morphia.annotations.Id;
+
+import java.util.Date;
+
+@Entity
+public class Dates {
+
+    private @Id ObjectId id;
+
+    private Date date;
+
+    public ObjectId getId() {
+        return id;
+    }
+
+    public void setId(ObjectId id) {
+        this.id = id;
+    }
+
+    public Date getDate() {
+        return date;
+    }
+
+    public void setDate(Date date) {
+        this.date = date;
+    }
+}",Add test <issue_id>,"""Added support for querying dates in MongoDB, including a new Dates entity and a test case for date range queries.""",Added support for Dates entity in MongodbQueryTest and created a new Dates entity class.,"""Added Dates entity and test for Querydsl-Mongodb""

Explanation:

* The file `MongodbQueryTest.java` has been modified to include the import statement for `com.mysema.query.mongodb.domain.*` and a new test method `Dates()` has been added to test the querying of `Dates` entity.
* A new file `Dates.java` has been added under the package `com.mysema.query.mongodb.domain` which contains the definition of `Dates` entity with a single field `date` of type `Date`.

This commit appears to add a new entity `Dates` and a corresponding test case to the Querydsl-Mongodb project.","""Add Dates entity and test case for date range query in MongodbQueryTest"""
"diff --git a/grpc-server/build.gradle b/grpc-server/build.gradle
index 4efa7138e..3e4e89674 100644
--- a/grpc-server/build.gradle
+++ b/grpc-server/build.gradle
@@ -10,4 +10,8 @@ dependencies {
 
     compile ""io.grpc:grpc-netty:${revGrpc}""
     compile ""log4j:log4j:1.2.17""
+
+    testCompile ""io.grpc:grpc-testing:${revGrpc}""
+    testCompile ""org.mockito:mockito-all:${revMockito}""
+    testCompile 'org.testinfected.hamcrest-matchers:all-matchers:1.8'
 }
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCModule.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCModule.java
index acd53a1d9..55f948876 100644
--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCModule.java
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCModule.java
@@ -7,15 +7,20 @@ import com.netflix.conductor.grpc.MetadataServiceGrpc;
 import com.netflix.conductor.grpc.TaskServiceGrpc;
 import com.netflix.conductor.grpc.WorkflowServiceGrpc;
 import com.netflix.conductor.grpc.server.service.EventServiceImpl;
+import com.netflix.conductor.grpc.server.service.HealthServiceImpl;
 import com.netflix.conductor.grpc.server.service.MetadataServiceImpl;
 import com.netflix.conductor.grpc.server.service.TaskServiceImpl;
 import com.netflix.conductor.grpc.server.service.WorkflowServiceImpl;
 
+import io.grpc.health.v1.HealthGrpc;
+
 public class GRPCModule extends AbstractModule {
 
     @Override
     protected void configure() {
 
+        bind(HealthGrpc.HealthImplBase.class).to(HealthServiceImpl.class);
+
         bind(EventServiceGrpc.EventServiceImplBase.class).to(EventServiceImpl.class);
         bind(MetadataServiceGrpc.MetadataServiceImplBase.class).to(MetadataServiceImpl.class);
         bind(TaskServiceGrpc.TaskServiceImplBase.class).to(TaskServiceImpl.class);
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCServerProvider.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCServerProvider.java
index 83a80a0ce..be85c0a47 100644
--- a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCServerProvider.java
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/GRPCServerProvider.java
@@ -11,26 +11,31 @@ import javax.inject.Inject;
 import javax.inject.Provider;
 
 import io.grpc.BindableService;
+import io.grpc.health.v1.HealthGrpc;
 
 public class GRPCServerProvider implements Provider<Optional<GRPCServer>> {
 
     private final GRPCServerConfiguration configuration;
+    private final BindableService healthServiceImpl;
     private final BindableService eventServiceImpl;
-    private final BindableService metadataSercieImpl;
+    private final BindableService metadataServiceImpl;
     private final BindableService taskServiceImpl;
     private final BindableService workflowServiceImpl;
 
     @Inject
     public GRPCServerProvider(
             GRPCServerConfiguration conf,
+            HealthGrpc.HealthImplBase healthServiceImpl,
             EventServiceGrpc.EventServiceImplBase eventServiceImpl,
             MetadataServiceGrpc.MetadataServiceImplBase metadataServiceImpl,
             TaskServiceGrpc.TaskServiceImplBase taskServiceImpl,
             WorkflowServiceGrpc.WorkflowServiceImplBase workflowServiceImpl
     ) {
         this.configuration = conf;
+        this.healthServiceImpl = healthServiceImpl;
+
         this.eventServiceImpl = eventServiceImpl;
-        this.metadataSercieImpl = metadataServiceImpl;
+        this.metadataServiceImpl = metadataServiceImpl;
         this.taskServiceImpl = taskServiceImpl;
         this.workflowServiceImpl = workflowServiceImpl;
     }
@@ -41,8 +46,9 @@ public class GRPCServerProvider implements Provider<Optional<GRPCServer>> {
                 Optional.of(
                         new GRPCServer(
                                 configuration.getPort(),
+                                healthServiceImpl,
                                 eventServiceImpl,
-                                metadataSercieImpl,
+                                metadataServiceImpl,
                                 taskServiceImpl,
                                 workflowServiceImpl
                         ))
diff --git a/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/HealthServiceImpl.java b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/HealthServiceImpl.java
new file mode 100644
index 000000000..1aca1f878
--- /dev/null
+++ b/grpc-server/src/main/java/com/netflix/conductor/grpc/server/service/HealthServiceImpl.java
@@ -0,0 +1,44 @@
+package com.netflix.conductor.grpc.server.service;
+
+import com.netflix.runtime.health.api.HealthCheckAggregator;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.inject.Inject;
+
+import io.grpc.health.v1.HealthCheckRequest;
+import io.grpc.health.v1.HealthCheckResponse;
+import io.grpc.health.v1.HealthGrpc;
+import io.grpc.stub.StreamObserver;
+
+public class HealthServiceImpl extends HealthGrpc.HealthImplBase {
+    private static final Logger LOGGER = LoggerFactory.getLogger(HealthServiceImpl.class);
+    private static final GRPCHelper GRPC_HELPER = new GRPCHelper(LOGGER);
+
+    private final HealthCheckAggregator healthCheck;
+
+    @Inject
+    public HealthServiceImpl(HealthCheckAggregator healthCheck) {
+        this.healthCheck = healthCheck;
+    }
+
+    @Override
+    public void check(HealthCheckRequest request, StreamObserver<HealthCheckResponse> responseObserver) {
+        try {
+            if (healthCheck.check().get().isHealthy()) {
+                responseObserver.onNext(
+                        HealthCheckResponse.newBuilder().setStatus(HealthCheckResponse.ServingStatus.SERVING).build()
+                );
+            } else {
+                responseObserver.onNext(
+                        HealthCheckResponse.newBuilder().setStatus(HealthCheckResponse.ServingStatus.NOT_SERVING).build()
+                );
+            }
+        } catch (Exception ex) {
+            GRPC_HELPER.onError(responseObserver, ex);
+        } finally {
+            responseObserver.onCompleted();
+        }
+    }
+}
diff --git a/grpc-server/src/test/java/com/netflix/conductor/grpc/server/service/HealthServiceImplTest.java b/grpc-server/src/test/java/com/netflix/conductor/grpc/server/service/HealthServiceImplTest.java
new file mode 100644
index 000000000..8e320f6dd
--- /dev/null
+++ b/grpc-server/src/test/java/com/netflix/conductor/grpc/server/service/HealthServiceImplTest.java
@@ -0,0 +1,108 @@
+package com.netflix.conductor.grpc.server.service;
+
+import com.netflix.runtime.health.api.HealthCheckAggregator;
+import com.netflix.runtime.health.api.HealthCheckStatus;
+
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+import java.util.concurrent.CompletableFuture;
+
+import io.grpc.BindableService;
+import io.grpc.Status;
+import io.grpc.StatusRuntimeException;
+import io.grpc.health.v1.HealthCheckRequest;
+import io.grpc.health.v1.HealthCheckResponse;
+import io.grpc.health.v1.HealthGrpc;
+import io.grpc.inprocess.InProcessChannelBuilder;
+import io.grpc.inprocess.InProcessServerBuilder;
+import io.grpc.testing.GrpcCleanupRule;
+
+import static org.hamcrest.Matchers.hasProperty;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class HealthServiceImplTest {
+
+    @Rule
+    public final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    @Test
+    public void healthServing() throws Exception {
+        // Generate a unique in-process server name.
+        String serverName = InProcessServerBuilder.generateName();
+        HealthCheckAggregator hca = mock(HealthCheckAggregator.class);
+        CompletableFuture<HealthCheckStatus> hcsf = mock(CompletableFuture.class);
+        HealthCheckStatus hcs = mock(HealthCheckStatus.class);
+        when(hcs.isHealthy()).thenReturn(true);
+        when(hcsf.get()).thenReturn(hcs);
+        when(hca.check()).thenReturn(hcsf);
+        HealthServiceImpl healthyService = new HealthServiceImpl(hca);
+
+        addService(serverName, healthyService);
+        HealthGrpc.HealthBlockingStub blockingStub = HealthGrpc.newBlockingStub(
+                // Create a client channel and register for automatic graceful shutdown.
+                grpcCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));
+
+
+        HealthCheckResponse reply = blockingStub.check(HealthCheckRequest.newBuilder().build());
+
+        assertEquals(HealthCheckResponse.ServingStatus.SERVING, reply.getStatus());
+    }
+
+    @Test
+    public void healthNotServing() throws Exception {
+        // Generate a unique in-process server name.
+        String serverName = InProcessServerBuilder.generateName();
+        HealthCheckAggregator hca = mock(HealthCheckAggregator.class);
+        CompletableFuture<HealthCheckStatus> hcsf = mock(CompletableFuture.class);
+        HealthCheckStatus hcs = mock(HealthCheckStatus.class);
+        when(hcs.isHealthy()).thenReturn(false);
+        when(hcsf.get()).thenReturn(hcs);
+        when(hca.check()).thenReturn(hcsf);
+        HealthServiceImpl healthyService = new HealthServiceImpl(hca);
+
+        addService(serverName, healthyService);
+        HealthGrpc.HealthBlockingStub blockingStub = HealthGrpc.newBlockingStub(
+                // Create a client channel and register for automatic graceful shutdown.
+                grpcCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));
+
+
+        HealthCheckResponse reply = blockingStub.check(HealthCheckRequest.newBuilder().build());
+
+        assertEquals(HealthCheckResponse.ServingStatus.NOT_SERVING, reply.getStatus());
+    }
+
+    @Test
+    public void healthException() throws Exception {
+        // Generate a unique in-process server name.
+        String serverName = InProcessServerBuilder.generateName();
+        HealthCheckAggregator hca = mock(HealthCheckAggregator.class);
+        CompletableFuture<HealthCheckStatus> hcsf = mock(CompletableFuture.class);
+        when(hcsf.get()).thenThrow(InterruptedException.class);
+        when(hca.check()).thenReturn(hcsf);
+        HealthServiceImpl healthyService = new HealthServiceImpl(hca);
+
+        addService(serverName, healthyService);
+        HealthGrpc.HealthBlockingStub blockingStub = HealthGrpc.newBlockingStub(
+                // Create a client channel and register for automatic graceful shutdown.
+                grpcCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));
+
+        thrown.expect(StatusRuntimeException.class);
+        thrown.expect(hasProperty(""status"", is(Status.INTERNAL)));
+        blockingStub.check(HealthCheckRequest.newBuilder().build());
+
+    }
+
+    private void addService(String name, BindableService service) throws Exception {
+        // Create a server, add service, start, and register for automatic graceful shutdown.
+        grpcCleanup.register(InProcessServerBuilder
+                .forName(name).directExecutor().addService(service).build().start());
+    }
+}
diff --git a/grpc/build.gradle b/grpc/build.gradle
index ea63b793e..c653d82a1 100644
--- a/grpc/build.gradle
+++ b/grpc/build.gradle
@@ -10,13 +10,20 @@ plugins {
     id ""com.google.protobuf"" version ""0.8.5""
 }
 
+repositories{
+    maven { url ""https://dl.bintray.com/chaos-systems/mvn"" }
+}
+
 dependencies {
     compile project(':conductor-common')
     compile project(':conductor-core')
 
+    protobuf 'io.chaossystems.grpc:grpc-healthcheck:1.0.+:protos'
     compile ""com.google.api.grpc:proto-google-common-protos:1.0.0""
     compile ""io.grpc:grpc-protobuf:${revGrpc}""
     compile ""io.grpc:grpc-stub:${revGrpc}""
+
+    compile ""com.netflix.runtime:health-api:${revHealth}""
 }
 
 protobuf {
diff --git a/versionsOfDependencies.gradle b/versionsOfDependencies.gradle
index a738972d3..9e7a44574 100644
--- a/versionsOfDependencies.gradle
+++ b/versionsOfDependencies.gradle
@@ -13,7 +13,7 @@ ext {
     revElasticSearch5Client = '5.6.8'
     revEurekaClient = '1.8.7'
     revFlywayCore ='4.0.3'
-    revGrpc = '1.11.0'
+    revGrpc = '1.14.+'
     revGuavaRetrying = '2.0.0'
     revGuice = '4.1.0'
     revGuiceMultiBindings = '4.1.0'",Add basic / simple gRPC healthcheck based on the gRPC spec proto and the .,"""Added gRPC health check service and test""","Added health check service using gRPC health API

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of a health check service using the gRPC health API, which is the main change introduced in this commit.","""Add gRPC health checking to the server""

Explanation:

The commit adds the following changes to the codebase:

1. Adds the gRPC health checking library as a dependency in `build.gradle`.
2. Adds a new gRPC health service implementation in `HealthServiceImpl`.
3. Adds a new test for the health service implementation in `HealthServiceImplTest`.
4. Updates the `GRPCModule` to bind the health service implementation to the gRPC server.
5. Updates the `GRPCServerProvider` to include the health service implementation when creating a new gRPC server.
6. Updates the `versionsOfDependencies.gradle` to use a newer version of gRPC.

The commit message should reflect the main purpose of the commit, which is to add health checking to the gRPC server using the gRPC health checking library. The message should be concise yet informative, so ""Add gRPC health checking to the server"" is an appropriate commit message.","Add health check service to grpc server and tests. Update dependencies for gRPC, Mockito, and Hamcrest matchers."
"diff --git a/build.gradle b/build.gradle
index 6e573bfe..177d4025 100644
--- a/build.gradle
+++ b/build.gradle
@@ -10,6 +10,10 @@ buildscript {
     }
 }
 
+plugins {
+    id 'com.github.ben-manes.versions' version '0.17.0'
+}
+
 allprojects {
     repositories {
         jcenter()
@@ -17,6 +21,20 @@ allprojects {
         maven { url 'https://maven.google.com'  }
         maven { url 'https://maven.fabric.io/public' }
     }
+
+    // See: https://github.com/ben-manes/gradle-versions-plugin
+    dependencyUpdates.resolutionStrategy = {
+        componentSelection { rules ->
+            rules.all { selection ->
+                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
+                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
+                }
+                if (rejected) {
+                    selection.reject('Release candidate')
+                }
+            }
+        }
+",Add dependency version plugin and config ( <issue_id> ),"""Added Gradle Versions Plugin to manage dependency updates""","""Added Gradle versions plugin and configured dependency updates to reject release candidates""","""Added Gradle versions plugin and configured dependency updates resolution strategy""

This commit adds the 'com.github.ben-manes.versions' plugin to the build.gradle file and configures the dependency updates resolution strategy. The strategy is set to reject any candidate versions that contain alpha, beta, rc, cr, or m qualifiers in their version number. This is likely to ensure that only stable, non-preview versions of dependencies are used in the project.","Added dependency update plugin to build.gradle and configured to reject alpha, beta, and release candidate versions."
"diff --git a/core/src/main/java/io/undertow/server/protocol/http2/Http2UpgradeHandler.java b/core/src/main/java/io/undertow/server/protocol/http2/Http2UpgradeHandler.java
index 1931d2b06..5ea3d7f2f 100644
--- a/core/src/main/java/io/undertow/server/protocol/http2/Http2UpgradeHandler.java
+++ b/core/src/main/java/io/undertow/server/protocol/http2/Http2UpgradeHandler.java
@@ -19,6 +19,10 @@
 package io.undertow.server.protocol.http2;
 
 import java.nio.ByteBuffer;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.xnio.OptionMap;
 import org.xnio.StreamConnection;
@@ -42,14 +46,22 @@ public class Http2UpgradeHandler implements HttpHandler {
 
     private final HttpHandler next;
 
+    private final Set<String> upgradeStrings;
+
     public Http2UpgradeHandler(HttpHandler next) {
         this.next = next;
+        this.upgradeStrings = Collections.singleton(Http2Channel.CLEARTEXT_UPGRADE_STRING);
+    }
+
+    public Http2UpgradeHandler(HttpHandler next, String... upgradeStrings) {
+        this.next = next;
+        this.upgradeStrings = new HashSet<>(Arrays.asList(upgradeStrings));
     }
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         final String upgrade = exchange.getRequestHeaders().getFirst(Headers.UPGRADE);
-        if(upgrade != null && upgrade.equals(Http2Channel.CLEARTEXT_UPGRADE_STRING)) {
+        if(upgrade != null && upgradeStrings.contains(upgrade)) {
             String settings = exchange.getRequestHeaders().getFirst(""HTTP2-Settings"");
             if(settings != null) {
                 //required by spec",Allow upgrade handler to specify the upgrade string,"""Allow custom HTTP/2 upgrade strings in Http2UpgradeHandler""","""Allow custom HTTP/2 upgrade strings in Http2UpgradeHandler""","The commit message should be:

""Add support for custom HTTP/2 upgrade strings in Http2UpgradeHandler""

This commit introduces a new constructor for the Http2UpgradeHandler class that accepts a variable number of upgrade strings. It also modifies the handleRequest method to use the new set of upgrade strings when checking if the request should be upgraded to HTTP/2. This change allows for more flexibility in how HTTP/2 upgrades are handled, as it is no longer limited to the default cleartext upgrade string.","""Add support for multiple HTTP2 upgrade strings in Http2UpgradeHandler."""
"diff --git a/smalivm/src/test/resources/smali/object_init/class_with_default_constructor.smali b/smalivm/src/test/resources/smali/object_init/class_with_default_constructor.smali
new file mode 100644
index 00000000..f906b6b7
--- /dev/null
+++ b/smalivm/src/test/resources/smali/object_init/class_with_default_constructor.smali
@@ -0,0 +1,10 @@
+.class public Lclass_with_default_constructor;
+.super Ljava/lang/Object;
+
+.method public constructor <init>()V
+    .locals 0
+
+    invoke-direct {p0}, Ljava/lang/Object;-><init>()V
+
+    return-void
+.end method
diff --git a/smalivm/src/test/resources/smali/object_init/class_without_default_constructor.smali b/smalivm/src/test/resources/smali/object_init/class_without_default_constructor.smali
new file mode 100644
index 00000000..0b36a6af
--- /dev/null
+++ b/smalivm/src/test/resources/smali/object_init/class_without_default_constructor.smali
@@ -0,0 +1,10 @@
+.class public Lclass_without_default_constructor;
+.super Ljava/lang/Object;
+
+.method public constructor <init>([C)V
+    .locals 0
+
+    invoke-direct {p0}, Ljava/lang/Object;-><init>()V
+
+    return-void
+.end method
diff --git a/smalivm/src/test/resources/smali/object_init/class_without_default_constructor_checks_null.smali b/smalivm/src/test/resources/smali/object_init/class_without_default_constructor_checks_null.smali
new file mode 100644
index 00000000..feaca987
--- /dev/null
+++ b/smalivm/src/test/resources/smali/object_init/class_without_default_constructor_checks_null.smali
@@ -0,0 +1,18 @@
+.class public Lclass_without_default_constructor_checks_null;
+.super Ljava/lang/Object;
+
+.method public constructor <init>([C)V
+    .locals 2
+
+    invoke-direct {p0}, Ljava/lang/Object;-><init>()V
+
+    if-nez p1, :return
+
+    new-instance v0, Ljava/lang/NullPointerException;
+    const-string/jumbo v1, ""You'll never reach the Dark Tower!""
+    invoke-direct {v0, v1}, Ljava/lang/NullPointerException;-><init>(Ljava/lang/String;)V
+    throw v0
+
+    :return
+    return-void
+.end method",Add smali resources for invoke - direct tests,"""Add test classes for object initialization with and without default constructors""","Added test cases for object initialization with and without default constructors, including a test case for a class that checks for null initialization.","""Added Smali files for classes with and without default constructors""

Explanation:

The diff shows that three new Smali files have been added:

1. class_with_default_constructor.smali: This file contains a class definition with a public default constructor that takes no arguments. The constructor simply calls the superclass constructor and returns.

2. class_without_default_constructor.smali: This file contains a class definition with a public constructor that takes a character array as an argument. The constructor calls the superclass constructor and returns. This class does not have a default constructor.

3. class_without_default_constructor_checks_null.smali: This file contains a class definition with a public constructor that takes a character array as an argument. The constructor calls the superclass constructor, checks if the argument is null, and if it is, throws a NullPointerException. This class also does not have a default constructor.

Therefore, the commit message should reflect the addition of these files.","Add smali tests for classes with and without default constructors, including null check scenarios."
"diff --git a/src/main/java/thymeleafsandbox/stsm/web/controller/SeedStarterMngController.java b/src/main/java/thymeleafsandbox/stsm/web/controller/SeedStarterMngController.java
index 07832a190..370a09555 100644
--- a/src/main/java/thymeleafsandbox/stsm/web/controller/SeedStarterMngController.java
+++ b/src/main/java/thymeleafsandbox/stsm/web/controller/SeedStarterMngController.java
@@ -29,7 +29,8 @@
 import org.springframework.validation.BindingResult;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.server.ServerWebExchange;
+import reactor.core.publisher.Mono;
 import thymeleafsandbox.stsm.business.entities.Feature;
 import thymeleafsandbox.stsm.business.entities.Row;
 import thymeleafsandbox.stsm.business.entities.SeedStarter;
@@ -86,43 +87,76 @@ public List<Variety> populateVarieties() {
     public List<SeedStarter> populateSeedStarters() {
         return this.seedStarterService.findAll();
     }
-    
-    
-    
+
+
+    /*
+     * NOTE that in this reactive version of STSM we cannot select the controller method to be executed
+     * depending on the presence of a specific request parameter (using the ""param"" attribute of the
+     * @RequestMapping annotation) because WebFlux does not include as ""request parameters"" data
+     * coming from forms (see https://jira.spring.io/browse/SPR-15508 ). Doing so would mean blocking
+     * for the time the framework needs for reading the request payload, which goes against the
+     * general reactiveness of the architecture.
+     *
+     * So the ways to access data from form are, either include then as a part of form-backing bean
+     * (in this case SeedStarter), or using exchange.getFormData(). In this case, modifying a model entity
+     * like SeedStarter because of a very specific need of the user interface (adding the ""save"",
+     * ""addRow"" or ""removeRow"" parameters in order to modify the form's structure from the server) would
+     * not be very elegant, so instead we will read exchange.getFormData() and direct to a different
+     * inner (private) controller method depending on the presence of these fields in the form data
+     * coming from the client.
+     */
+
     @RequestMapping({""/"",""/seedstartermng""})
-    public String showSeedstarters(final SeedStarter seedStarter) {
+    public Mono<String> doSeedstarter(
+            final SeedStarter seedStarter, final BindingResult bindingResult, final ModelMap model,
+            final ServerWebExchange exchange) {
+
+        return exchange.getFormData().flatMap(
+                formData -> {
+                    if (formData.containsKey(""save"")) {
+                        return saveSeedstarter(seedStarter,  bindingResult, model);
+                    }
+                    if (formData.containsKey(""addRow"")) {
+                        return addRow(seedStarter, bindingResult);
+                    }
+                    if (formData.containsKey(""removeRow"")) {
+                        final int rowId = Integer.parseInt(formData.getFirst(""removeRow""));
+                        return removeRow(seedStarter, bindingResult, rowId);
+                    }
+                    return showSeedstarters(seedStarter);
+                });
+
+    }
+
+
+    private Mono<String> showSeedstarters(final SeedStarter seedStarter) {
         seedStarter.setDatePlanted(Calendar.getInstance().getTime());
-        return ""seedstartermng"";
+        return Mono.just(""seedstartermng"");
     }
-    
-    
-    
-    @RequestMapping(value=""/seedstartermng"", params={""save""})
-    public String saveSeedstarter(final SeedStarter seedStarter, final BindingResult bindingResult, final ModelMap model) {
+
+
+    private Mono<String> saveSeedstarter(final SeedStarter seedStarter, final BindingResult bindingResult, final ModelMap model) {
         if (bindingResult.hasErrors()) {
-            return ""seedstartermng"";
+            return Mono.just(""seedstartermng"");
         }
         this.seedStarterService.add(seedStarter);
         model.clear();
-        return ""redirect:/seedstartermng"";
+        return Mono.just(""redirect:/seedstartermng"");
     }
-    
 
-    
-    @RequestMapping(value=""/seedstartermng"", params={""addRow""})
-    public String addRow(final SeedStarter seedStarter, final BindingResult bindingResult) {
+
+    private Mono<String> addRow(final SeedStarter seedStarter, final BindingResult bindingResult) {
         seedStarter.getRows().add(new Row());
-        return ""seedstartermng"";
+        return Mono.just(""seedstartermng"");
     }
     
     
-    @RequestMapping(value=""/seedstartermng"", params={""removeRow""})
-    public String removeRow(
+    private Mono<String> removeRow(
             final SeedStarter seedStarter,
             final BindingResult bindingResult,
-            @RequestParam(value = ""removeRow"", required = false) Integer rowId) {
-        seedStarter.getRows().remove(rowId.intValue());
-        return ""seedstartermng"";
+            final int rowId) {
+        seedStarter.getRows().remove(rowId);
+        return Mono.just(""seedstartermng"");
     }
 
 ",Adapted controller methods to https : / / jira . spring . io / browse / SPR - 15508,"""Refactor SeedStarterMngController to use reactive WebFlux and handle form data dynamically""","Here's a possible commit message based on the provided diff:

`Migrate SeedStarterMngController to reactive WebFlux, replacing request parameter-based routing with form data access via ServerWebExchange`","""Refactor SeedStarterMngController to use reactive programming with WebFlux""

This commit appears to refactor the `SeedStarterMngController` class to use reactive programming with Spring WebFlux. The changes include:

1. Importing `ServerWebExchange` and `Mono` from the WebFlux framework.
2. Modifying the `doSeedstarter` method to return a `Mono<String>` instead of a `String`, and to accept a `ServerWebExchange` parameter.
3. Using `exchange.getFormData()` to access form data reactively, instead of using `@RequestParam`.
4. Refactoring the logic to handle different form actions (save, add row, remove row) using inner private methods that return a `Mono<String>`.
5. Modifying the return types of the inner private methods to return `Mono<String>` instead of `String`.

These changes are consistent with a refactor to use reactive programming with Spring WebFlux.",Migrated SeedStarterMngController to use reactive Mono responses and handle form data via ServerWebExchange in Spring WebFlux.
"diff --git a/appcompat/appcompat/src/main/java/androidx/appcompat/widget/SwitchCompat.java b/appcompat/appcompat/src/main/java/androidx/appcompat/widget/SwitchCompat.java
index 9480999c92f..fe65cc224a5 100644
--- a/appcompat/appcompat/src/main/java/androidx/appcompat/widget/SwitchCompat.java
+++ b/appcompat/appcompat/src/main/java/androidx/appcompat/widget/SwitchCompat.java
@@ -56,12 +56,16 @@ import androidx.core.view.ViewCompat;
 import androidx.core.widget.TextViewCompat;
 
 /**
- * SwitchCompat is a version of the Switch widget which on devices back to API v7. It does not
- * make any attempt to use the platform provided widget on those devices which it is available
- * normally.
+ * SwitchCompat is a complete backport of the core {@link android.widget.Switch} widget that
+ * brings the visuals and the functionality of that widget to older versions of the platform.
+ * Unlike other widgets in this package, SwitchCompat is <strong>not</strong> automatically used
+ * in layouts that use the <code>&lt;Switch&gt;</code> element. Instead, you need to explicitly
+ * use <code>&lt;androidx.appcompat.widget.SwitchCompat&gt;</code> and the matching attributes
+ * in your layouts.
+ *
  * <p>
- * A Switch is a two-state toggle switch widget that can select between two
- * options. The user may drag the ""thumb"" back and forth to choose the selected option,
+ * A Switch is a two-state toggle switch widget that can be used to select one of the two
+ * available options. The user may drag the ""thumb"" back and forth to choose the selected option,
  * or simply tap to toggle as if it were a checkbox. The {@link #setText(CharSequence) text}
  * property controls the text displayed in the label for the switch, whereas the
  * {@link #setTextOff(CharSequence) off} and {@link #setTextOn(CharSequence) on} text
@@ -71,6 +75,12 @@ import androidx.core.widget.TextViewCompat;
  * {@link #setSwitchTextAppearance(android.content.Context, int) switchTextAppearance} and
  * the related setSwitchTypeface() methods control that of the thumb.
  *
+ * <p>
+ * The thumb can be tinted with {@link #setThumbTintList(ColorStateList)} and
+ * {@link #setThumbTintMode(PorterDuff.Mode)} APIs, as well as with the matching XML attributes.
+ * The track can be tinted with {@link #setTrackTintList(ColorStateList)} and
+ * {@link #setTrackTintMode(PorterDuff.Mode)} APIs, as well as with the matching XML attributes.
+ *
  * <p>See the <a href=""{@docRoot}guide/topics/ui/controls/togglebutton.html"">Toggle Buttons</a>
  * guide.</p>
  *
@@ -82,6 +92,10 @@ import androidx.core.widget.TextViewCompat;
  * {@link android.R.attr#thumb}
  * {@link androidx.appcompat.R.attr#thumbTextPadding}
  * {@link androidx.appcompat.R.attr#track}
+ * {@link androidx.appcompat.R.attr#thumbTint}
+ * {@link androidx.appcompat.R.attr#thumbTintMode}
+ * {@link androidx.appcompat.R.attr#trackTint}
+ * {@link androidx.appcompat.R.attr#trackTintMode}
  */
 public class SwitchCompat extends CompoundButton {
     private static final int THUMB_ANIMATION_DURATION = 250;",Refresh the Javadocs of SwitchCompat .,"""Update SwitchCompat documentation to reflect its functionality and usage""","""Update SwitchCompat documentation to reflect its complete backport of the core Switch widget and added tinting APIs""","""Update SwitchCompat documentation and add tint attributes""

Explanation:
The given code snippet shows changes made to the SwitchCompat.java file in the appcompat library. The changes include updates to the documentation (comments) and the addition of tint attributes for the thumb and track of the SwitchCompat widget. Therefore, the commit message should reflect these changes.","""Update SwitchCompat documentation and add tinting capabilities for thumb and track."""
"diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index d097906e..f5b3cb8e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,13 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
+- Period
+  - add toStandardDuration()
+  - add toStandardWeeks(), toStandardDays(), toStandardHours(),
+    toStandardMinutes(), toStandardSeconds()
+  methods to convert a period to other types using the standard
+  conversions (7 day week, 24 hour day, ...)
+
 - LocalDate.toLocalDateTime
   - provide mechanism to create LocalDateTime from LocalDate and LocalTime
 
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index e4a6624e..d865db56 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -18,6 +18,7 @@ package org.joda.time;
 import java.io.Serializable;
 
 import org.joda.time.base.BasePeriod;
+import org.joda.time.field.FieldUtils;
 
 /**
  * An immutable time period specifying a set of duration field values.
@@ -1173,4 +1174,202 @@ public final class Period
         return plusMillis(-millis);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period to a period in weeks assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard weeks in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of weeks is too large to be represented
+     * @since 1.5
+     */
+    public Weeks toStandardWeeks() {
+        checkYearsAndMonths(""Weeks"");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
+        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;
+        return Weeks.weeks(FieldUtils.safeToInt(weeks));
+    }
+
+    /**
+     * Converts this period to a period in days assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard days in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of days is too large to be represented
+     * @since 1.5
+     */
+    public Days toStandardDays() {
+        checkYearsAndMonths(""Days"");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        long days = millis / DateTimeConstants.MILLIS_PER_DAY;
+        days = FieldUtils.safeAdd(days, getDays());
+        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));
+        return Days.days(FieldUtils.safeToInt(days));
+    }
+
+    /**
+     * Converts this period to a period in hours assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard hours in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of hours is too large to be represented
+     * @since 1.5
+     */
+    public Hours toStandardHours() {
+        checkYearsAndMonths(""Hours"");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;
+        hours = FieldUtils.safeAdd(hours, getHours());
+        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));
+        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));
+        return Hours.hours(FieldUtils.safeToInt(hours));
+    }
+
+    /**
+     * Converts this period to a period in minutes assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard minutes in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of minutes is too large to be represented
+     * @since 1.5
+     */
+    public Minutes toStandardMinutes() {
+        checkYearsAndMonths(""Minutes"");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;
+        minutes = FieldUtils.safeAdd(minutes, getMinutes());
+        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));
+        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));
+        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));
+        return Minutes.minutes(FieldUtils.safeToInt(minutes));
+    }
+
+    /**
+     * Converts this period to a period in seconds assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard seconds in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     * @since 1.5
+     */
+    public Seconds toStandardSeconds() {
+        checkYearsAndMonths(""Seconds"");
+        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;
+        seconds = FieldUtils.safeAdd(seconds, getSeconds());
+        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));
+        return Seconds.seconds(FieldUtils.safeToInt(seconds));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period to a duration assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a duration equivalent to this period
+     * @throws IllegalStateException if the period contains years or months
+     * @since 1.5
+     */
+    public Duration toStandardDuration() {
+        checkYearsAndMonths(""Duration"");
+        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        return new Duration(millis);
+    }
+
+    /**
+     * Check that there are no years or months in the period.
+     * 
+     * @param destintionType  the destination type, not null
+     */
+    private void checkYearsAndMonths(String destintionType) {
+        if (getMonths() != 0) {
+            throw new IllegalStateException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");
+        }
+        if (getYears() != 0) {
+            throw new IllegalStateException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");
+        }
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 29b376bf..154a06fd 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -19,6 +19,7 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.math.BigInteger;
 import java.util.Arrays;
 import java.util.Locale;
 import java.util.TimeZone;
@@ -39,7 +40,7 @@ public class TestPeriod_Basics extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");
     private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -786,4 +787,389 @@ public class TestPeriod_Basics extends TestCase {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);
+        assertEquals(3, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 3, 7, 0, 0, 0, 0);
+        assertEquals(4, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 0, 6, 23, 59, 59, 1000);
+        assertEquals(1, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardWeeks_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardWeeks().getWeeks());
+    }
+
+    public void testToStandardWeeks_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardWeeks().getWeeks());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardDays() {
+        Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);
+        assertEquals(4, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 1, 4, 0, 0, 0, 0);
+        assertEquals(11, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, 0, 23, 59, 59, 1000);
+        assertEquals(1, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardDays_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardDays().getDays());
+    }
+
+    public void testToStandardDays_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardDays().getDays());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardHours() {
+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);
+        assertEquals(5, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 1, 5, 0, 0, 0);
+        assertEquals(29, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, 0, 59, 59, 1000);
+        assertEquals(1, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardHours_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardHours().getHours());
+    }
+
+    public void testToStandardHours_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+   ",Add Period . toStandard * ( ) methods .,"""Added methods to Period class to convert to standard weeks, days, hours, minutes, seconds, and duration.""","""Added toStandardDuration(), toStandardWeeks(), toStandardDays(), toStandardHours(), toStandardMinutes(), and toStandardSeconds() methods to Period class, allowing conversion to standard durations and periods.""","The commit message should be:

Enhancements:

* Add toStandardDuration() method to Period class
* Add toStandardWeeks(), toStandardDays(), toStandardHours(), toStandardMinutes(), toStandardSeconds() methods to convert a period to other types using the standard conversions (7 day week, 24 hour day, ...)

The new methods allow you to convert between different types of period or from a period to a duration. However, to achieve this, they make the assumption that all weeks are 7 days, all days are 24 hours, all hours are 60 minutes, and all minutes are 60 seconds. This is not true when daylight savings time is considered, and may also not be true for some unusual chronologies. However, it is included as it is a useful operation for many applications and business rules. If the period contains years or months, an exception will be thrown.","""Added standard period conversion methods to Joda-Time Period class: toStandardWeeks(), toStandardDays(), toStandardHours(), toStandardMinutes(), toStandardSeconds(), and toStandardDuration()."""
"diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
index 1ca32334333..8c5422331e7 100644
--- a/src/main/resources/META-INF/plugin.xml
+++ b/src/main/resources/META-INF/plugin.xml
@@ -131,6 +131,7 @@
         <internalFileTemplate name=""Ballerina Main""/>
         <internalFileTemplate name=""Ballerina Service""/>
         <internalFileTemplate name=""Ballerina Connector""/>
+        <internalFileTemplate name=""Ballerina WebSocket""/>
 
         <defaultTemplatePropertiesProvider
                 implementation=""org.ballerinalang.plugins.idea.actions.BallerinaTemplatePropertiesProvider""/>
diff --git a/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.ft b/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.ft
new file mode 100644
index 00000000000..63279e881fc
--- /dev/null
+++ b/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.ft	
@@ -0,0 +1,60 @@
+#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != """")
+package ${PACKAGE_NAME};
+#end
+
+import ballerina.net.ws;
+
+@Description {value:""This example gives you the basic idea of WebSocket endpoint.""}
+@ws:configuration {
+    basePath: ""/basic/ws"",
+    subProtocols: [""xml"", ""json""],
+    idleTimeoutInSeconds: 120,
+    host: ""0.0.0.0"",
+    port: 9090,
+    wssPort: 9095,
+    keyStoreFile: ""${ballerina.home}/bre/security/ballerinaKeystore.p12"",
+    keyStorePassword: ""ballerina"",
+    certPassword: ""ballerina""
+}
+service<ws> SimpleSecureServer {
+
+    @Description {value:""This resource is responsible for handling user logic on handshake time. Note that the connection is not yet established while this code is running.""}
+    resource onHandshake(ws:HandshakeConnection conn) {
+
+    }
+
+    @Description {value:""This resource is triggered after a successful client connection.""}
+    resource onOpen(ws:Connection conn) {
+
+    }
+
+    @Description {value:""This resource is triggered when a new text frame is received from a client.""}
+    resource onTextMessage (ws:Connection conn, ws:TextFrame frame) {
+
+    }
+
+    @Description {value:""This resource is triggered when a new binary frame is received from a client.""}
+    resource onBinaryMessage(ws:Connection conn, ws:BinaryFrame frame) {
+
+    }
+
+    @Description {value:""This resource is triggered when a ping message is received from the client.""}
+    resource onPing(ws:Connection conn, ws:PingFrame frame) {
+
+    }
+
+    @Description {value:""This resource is triggered when a pong message is received""}
+    resource onPong(ws:Connection conn, ws:PongFrame frame) {
+
+    }
+
+    @Description {value:""This resource is triggered when a particular client reaches it's idle timeout defined in the ws:configuration annotation.""}
+    resource onIdleTimeout(ws:Connection conn) {
+
+    }
+
+    @Description {value:""This resource is triggered when a client connection is closed from the client side.""}
+    resource onClose(ws:Connection conn, ws:CloseFrame closeFrame) {
+
+    }
+}
diff --git a/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.html b/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.html
new file mode 100644
index 00000000000..49ce934626f
--- /dev/null
+++ b/src/main/resources/fileTemplates/internal/Ballerina WebSocket.bal.html	
@@ -0,0 +1,21 @@
+<!--
+  ~  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+  ~
+  ~  Licensed under the Apache License, Version 2.0 (the ""License"");
+  ~  you may not use this file except in compliance with the License.
+  ~  You may obtain a copy of the License at
+  ~
+  ~  http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~  Unless required by applicable law or agreed to in writing, software
+  ~  distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~  See the License for the specific language governing permissions and
+  ~  limitations under the License.
+  -->
+
+<html>
+    <body>
+        This is Ballerina websocket file template.
+    </body>
+</html>",Add WebSocket file template,"""Added Ballerina WebSocket file template""",Added Ballerina WebSocket file template and plugin.xml configuration for it.,"""Add Ballerina WebSocket file template""

This commit appears to add a new file template for creating a Ballerina WebSocket service. The template includes a basic WebSocket service definition with several resources for handling different types of messages and connection events. The template also includes a simple HTML file.",Add Ballerina WebSocket template to internal file templates and corresponding HTML description file.
"diff --git a/zookeeper-command-line-client/src/main/sh/vespa-zktxnlog b/zookeeper-command-line-client/src/main/sh/vespa-zktxnlog
new file mode 100755
index 00000000000..3a626524836
--- /dev/null
+++ b/zookeeper-command-line-client/src/main/sh/vespa-zktxnlog
@@ -0,0 +1,78 @@
+#!/bin/sh
+# Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
+
+# BEGIN environment bootstrap section
+# Do not edit between here and END as this section should stay identical in all scripts
+
+findpath () {
+    myname=${0}
+    mypath=${myname%/*}
+    myname=${myname##*/}
+    empty_if_start_slash=${mypath%%/*}
+    if [ ""${empty_if_start_slash}"" ]; then
+        mypath=$(pwd)/${mypath}
+    fi
+    if [ ""$mypath"" ] && [ -d ""$mypath"" ]; then
+        return
+    fi
+    mypath=$(pwd)
+    if [ -f ""${mypath}/${myname}"" ]; then
+        return
+    fi
+    echo ""FATAL: Could not figure out the path where $myname lives from $0""
+    exit 1
+}
+
+COMMON_ENV=libexec/vespa/common-env.sh
+
+source_common_env () {
+    if [ ""$VESPA_HOME"" ] && [ -d ""$VESPA_HOME"" ]; then
+        export VESPA_HOME
+        common_env=$VESPA_HOME/$COMMON_ENV
+        if [ -f ""$common_env"" ]; then
+            . $common_env
+            return
+        fi
+    fi
+    return 1
+}
+
+findroot () {
+    source_common_env && return
+    if [ ""$VESPA_HOME"" ]; then
+        echo ""FATAL: bad VESPA_HOME value '$VESPA_HOME'""
+        exit 1
+    fi
+    if [ ""$ROOT"" ] && [ -d ""$ROOT"" ]; then
+        VESPA_HOME=""$ROOT""
+        source_common_env && return
+    fi
+    findpath
+    while [ ""$mypath"" ]; do
+        VESPA_HOME=${mypath}
+        source_common_env && return
+        mypath=${mypath%/*}
+    done
+    echo ""FATAL: missing VESPA_HOME environment variable""
+    echo ""Could not locate $COMMON_ENV anywhere""
+    exit 1
+}
+
+findhost () {
+    if [ ""${VESPA_HOSTNAME}"" = """" ]; then
+        VESPA_HOSTNAME=$(vespa-detect-hostname || hostname -f || hostname || echo ""localhost"") || exit 1
+    fi
+    validate=""${VESPA_HOME}/bin/vespa-validate-hostname""
+    if [ -f ""$validate"" ]; then
+        ""$validate"" ""${VESPA_HOSTNAME}"" || exit 1
+    fi
+    export VESPA_HOSTNAME
+}
+
+findroot
+findhost
+
+# END environment bootstrap section
+
+java -cp $VESPA_HOME/lib/jars/zookeeper-command-line-client-jar-with-dependencies.jar \
+     org.apache.zookeeper.server.persistence.TxnLogToolkit ""$@""",Add script for inspection ZooKeeper transaction log,"""Added zookeeper-command-line-client script to interact with ZooKeeper transaction logs""","""Add environment bootstrap script for zookeeper command line client""","""Adding script vespa-zktxnlog for Zookeeper command line client""

This script is designed to be used with the Zookeeper command line client. It starts by setting up the environment, finding the root directory and hostname, and then it executes a Java command with the class org.apache.zookeeper.server.persistence.TxnLogToolkit, passing along any command line arguments that were provided.

The script first defines several functions for finding paths and setting up the environment, and then it calls these functions to set up the VESPA\_HOME and VESPA\_HOSTNAME environment variables. Finally, it runs the Java command with the class and arguments specified.

The script includes a copyright notice and is licensed under the Apache 2.0 license.",Add `vespa-zktxnlog` script for initializing environment and running TxnLogToolkit from Zookeeper command-line client.
"diff --git a/android/src/edu/sfsu/cs/orange/ocr/CaptureActivity.java b/android/src/edu/sfsu/cs/orange/ocr/CaptureActivity.java
index 72a1ac6..c812514 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/CaptureActivity.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/CaptureActivity.java
@@ -801,10 +801,11 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
                                                    ocrResult.getWordConfidences(),
                                                    ocrResult.getMeanConfidence(),
                                                    ocrResult.getBitmapDimensions(),
-                                                   ocrResult.getCharacterBoundingBoxes(),
-                                                   ocrResult.getWordBoundingBoxes(),
+                                                   ocrResult.getRegionBoundingBoxes(),
                                                    ocrResult.getTextlineBoundingBoxes(),
-                                                   ocrResult.getRegionBoundingBoxes()));
+                                                   ocrResult.getStripBoundingBoxes(),
+                                                   ocrResult.getWordBoundingBoxes(),
+                                                   ocrResult.getCharacterBoundingBoxes()));
 
     Integer meanConfidence = ocrResult.getMeanConfidence();
     
diff --git a/android/src/edu/sfsu/cs/orange/ocr/DecodeHandler.java b/android/src/edu/sfsu/cs/orange/ocr/DecodeHandler.java
index deb71f7..db4b08d 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/DecodeHandler.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/DecodeHandler.java
@@ -138,7 +138,8 @@ final class DecodeHandler extends Handler {
     }
   }
 
-  private OcrResult getOcrResult() {
+  @SuppressWarnings(""unused"")
+	private OcrResult getOcrResult() {
     OcrResult ocrResult;
     String textResult;
     long start = System.currentTimeMillis();
@@ -155,10 +156,24 @@ final class DecodeHandler extends Handler {
       ocrResult = new OcrResult();
       ocrResult.setWordConfidences(baseApi.wordConfidences());
       ocrResult.setMeanConfidence( baseApi.meanConfidence());
-      ocrResult.setRegionBoundingBoxes(baseApi.getRegions().getBoxRects());
-      ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
+      if (ViewfinderView.DRAW_REGION_BOXES) {
+        ocrResult.setRegionBoundingBoxes(baseApi.getRegions().getBoxRects());
+      }
+      if (ViewfinderView.DRAW_TEXTLINE_BOXES) {
+        ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
+      }
+      if (ViewfinderView.DRAW_STRIP_BOXES) {
+        ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());
+      }
+      
+      // Always get the word bounding boxes--we want it for annotating the bitmap after the user
+      // presses the shutter button, in addition to maybe wanting to draw boxes/words during the
+      // continuous mode recognition.
       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());
-      ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
+      
+      if (ViewfinderView.DRAW_CHARACTER_BOXES || ViewfinderView.DRAW_CHARACTER_TEXT) {
+        ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
+      }
     } catch (RuntimeException e) {
       Log.e(""OcrRecognizeAsyncTask"", ""Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED."");
       e.printStackTrace();
diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
index 2e14cf5..6ce051b 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrRecognizeAsyncTask.java
@@ -87,6 +87,7 @@ final class OcrRecognizeAsyncTask extends AsyncTask<Void, Void, Boolean> {
       ocrResult.setRegionBoundingBoxes(baseApi.getRegions().getBoxRects());
       ocrResult.setTextlineBoundingBoxes(baseApi.getTextlines().getBoxRects());
       ocrResult.setWordBoundingBoxes(baseApi.getWords().getBoxRects());
+      ocrResult.setStripBoundingBoxes(baseApi.getStrips().getBoxRects());
       ocrResult.setCharacterBoundingBoxes(baseApi.getCharacters().getBoxRects());
     } catch (RuntimeException e) {
       Log.e(""OcrRecognizeAsyncTask"", ""Caught RuntimeException in request to Tesseract. Setting state to CONTINUOUS_STOPPED."");
diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrResult.java b/android/src/edu/sfsu/cs/orange/ocr/OcrResult.java
index e7a467f..eec2d1a 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrResult.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrResult.java
@@ -33,12 +33,13 @@ public class OcrResult {
   
   private int[] wordConfidences;
   private int meanConfidence;
-  
+
+  private List<Rect> regionBoundingBoxes;
+  private List<Rect> textlineBoundingBoxes;
   private List<Rect> wordBoundingBoxes;
+  private List<Rect> stripBoundingBoxes;  
   private List<Rect> characterBoundingBoxes;
-  private List<Rect> textlineBoundingBoxes;
-  private List<Rect> regionBoundingBoxes;
-  
+
   private long timestamp;
   private long recognitionTimeRequired;
 
@@ -48,19 +49,21 @@ public class OcrResult {
                    String text,
                    int[] wordConfidences,
                    int meanConfidence,
-                   List<Rect> characterBoundingBoxes,
+                   List<Rect> regionBoundingBoxes,
                    List<Rect> textlineBoundingBoxes,
                    List<Rect> wordBoundingBoxes,
-                   List<Rect> regionBoxes, 
+                   List<Rect> stripBoundingBoxes,
+                   List<Rect> characterBoundingBoxes,
                    long recognitionTimeRequired) {
     this.bitmap = bitmap;
     this.text = text;
     this.wordConfidences = wordConfidences;
     this.meanConfidence = meanConfidence;
-    this.characterBoundingBoxes = characterBoundingBoxes;
+    this.regionBoundingBoxes = regionBoundingBoxes;
     this.textlineBoundingBoxes = textlineBoundingBoxes;
     this.wordBoundingBoxes = wordBoundingBoxes;
-    this.regionBoundingBoxes = regionBoxes;
+    this.stripBoundingBoxes = stripBoundingBoxes;
+    this.characterBoundingBoxes = characterBoundingBoxes;
     this.recognitionTimeRequired = recognitionTimeRequired;
     this.timestamp = System.currentTimeMillis();
     
@@ -73,11 +76,7 @@ public class OcrResult {
   }
 
   public Bitmap getBitmap() {
-    if (characterBoundingBoxes.isEmpty()) {
-      return bitmap;
-    } else {
-      return getAnnotatedBitmap();
-    }
+    return getAnnotatedBitmap();
   }
   
   private Bitmap getAnnotatedBitmap() {
@@ -85,10 +84,10 @@ public class OcrResult {
     
     // Draw bounding boxes around each word
     for (int i = 0; i < wordBoundingBoxes.size(); i++) {
-      paint.setAlpha(0xA0);
+      paint.setAlpha(0xFF);
       paint.setColor(0xFF00CCFF);
       paint.setStyle(Style.STROKE);
-      paint.setStrokeWidth(3);
+      paint.setStrokeWidth(2);
       Rect r = wordBoundingBoxes.get(i);
       canvas.drawRect(r, paint);
     }    
@@ -126,8 +125,8 @@ public class OcrResult {
     return new Point(bitmap.getWidth(), bitmap.getHeight()); 
   }
   
-  public List<Rect> getCharacterBoundingBoxes() {
-    return characterBoundingBoxes;
+  public List<Rect> getRegionBoundingBoxes() {
+    return regionBoundingBoxes;
   }
   
   public List<Rect> getTextlineBoundingBoxes() {
@@ -138,8 +137,12 @@ public class OcrResult {
     return wordBoundingBoxes;
   }
   
-  public List<Rect> getRegionBoundingBoxes() {
-    return regionBoundingBoxes;
+  public List<Rect> getStripBoundingBoxes() {
+  	return stripBoundingBoxes;
+  }
+  
+  public List<Rect> getCharacterBoundingBoxes() {
+    return characterBoundingBoxes;
   }
   
   public long getTimestamp() {
@@ -166,20 +169,24 @@ public class OcrResult {
     this.recognitionTimeRequired = recognitionTimeRequired;
   }
   
-  public void setCharacterBoundingBoxes(List<Rect> characterBoundingBoxes) {
-    this.characterBoundingBoxes = characterBoundingBoxes;
+  public void setRegionBoundingBoxes(List<Rect> regionBoundingBoxes) {
+    this.regionBoundingBoxes = regionBoundingBoxes;
   }
   
   public void setTextlineBoundingBoxes(List<Rect> textlineBoundingBoxes) {
     this.textlineBoundingBoxes = textlineBoundingBoxes;
   }
-  
+
   public void setWordBoundingBoxes(List<Rect> wordBoundingBoxes) {
     this.wordBoundingBoxes = wordBoundingBoxes;
   }
   
-  public void setRegionBoundingBoxes(List<Rect> regionBoundingBoxes) {
-    this.regionBoundingBoxes = regionBoundingBoxes;
+  public void setStripBoundingBoxes(List<Rect> stripBoundingBoxes) {
+  	this.stripBoundingBoxes = stripBoundingBoxes;
+  }
+
+  public void setCharacterBoundingBoxes(List<Rect> characterBoundingBoxes) {
+    this.characterBoundingBoxes = characterBoundingBoxes;
   }
   
   @Override
diff --git a/android/src/edu/sfsu/cs/orange/ocr/OcrResultText.java b/android/src/edu/sfsu/cs/orange/ocr/OcrResultText.java
index f94df40..f3e95e3 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/OcrResultText.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/OcrResultText.java
@@ -29,27 +29,30 @@ public final class OcrResultText {
   private final int[] wordConfidences;
   private final int meanConfidence;
   private final Point bitmapDimensions;
+  private final List<Rect> regionBoundingBoxes;
+  private final List<Rect> textlineBoundingBoxes;
+  private final List<Rect> stripBoundingBoxes;
   private final List<Rect> wordBoundingBoxes;
   private final List<Rect> characterBoundingBoxes;
-  private final List<Rect> textlineBoundingBoxes;
-  private final List<Rect> regionBoundingBoxes;
   
   public OcrResultText(String text,
                    int[] wordConfidences,
                    int meanConfidence,
                    Point bitmapDimensions,
-                   List<Rect> characterBoundingBoxes,
-                   List<Rect> wordBoundingBoxes,
+                   List<Rect> regionBoundingBoxes,
                    List<Rect> textlineBoundingBoxes,
-                   List<Rect> regionBoundingBoxes) {
+                   List<Rect> stripBoundingBoxes,
+                   List<Rect> wordBoundingBoxes,
+                   List<Rect> characterBoundingBoxes) {
     this.text = text;
     this.wordConfidences = wordConfidences;
     this.meanConfidence = meanConfidence;
     this.bitmapDimensions = bitmapDimensions;
-    this.characterBoundingBoxes = characterBoundingBoxes;
-    this.wordBoundingBoxes = wordBoundingBoxes;
-    this.textlineBoundingBoxes = textlineBoundingBoxes;
     this.regionBoundingBoxes = regionBoundingBoxes;
+    this.textlineBoundingBoxes = textlineBoundingBoxes;
+    this.stripBoundingBoxes = stripBoundingBoxes;
+    this.wordBoundingBoxes = wordBoundingBoxes;
+    this.characterBoundingBoxes = characterBoundingBoxes;
   }
 
   public String getText() {
@@ -67,21 +70,25 @@ public final class OcrResultText {
   public int getMeanConfidence() {
     return meanConfidence;
   }
-
-  public List<Rect> getCharacterBoundingBoxes() {
-    return characterBoundingBoxes;
+  
+  public List<Rect> getRegionBoundingBoxes() {
+    return regionBoundingBoxes;
   }
   
   public List<Rect> getTextlineBoundingBoxes() {
     return textlineBoundingBoxes;
   }
   
+  public List<Rect> getStripBoundingBoxes() {
+  	return stripBoundingBoxes;
+  }
+  
   public List<Rect> getWordBoundingBoxes() {
     return wordBoundingBoxes;
   }
   
-  public List<Rect> getRegionBoundingBoxes() {
-    return regionBoundingBoxes;
+  public List<Rect> getCharacterBoundingBoxes() {
+    return characterBoundingBoxes;
   }
   
   @Override
diff --git a/android/src/edu/sfsu/cs/orange/ocr/ViewfinderView.java b/android/src/edu/sfsu/cs/orange/ocr/ViewfinderView.java
index 8f09f70..3897321 100644
--- a/android/src/edu/sfsu/cs/orange/ocr/ViewfinderView.java
+++ b/android/src/edu/sfsu/cs/orange/ocr/ViewfinderView.java
@@ -43,25 +43,28 @@ public final class ViewfinderView extends View {
   //private static final long ANIMATION_DELAY = 80L;
 
   /** Flag to draw boxes representing the results from TessBaseAPI::GetRegions(). */
-  private static final boolean DRAW_REGION_BOXES = false;
+  static final boolean DRAW_REGION_BOXES = false;
 
   /** Flag to draw boxes representing the results from TessBaseAPI::GetTextlines(). */
-  private static final boolean DRAW_TEXTLINE_BOXES = true;
+  static final boolean DRAW_TEXTLINE_BOXES = true;
+
+  /** Flag to draw boxes representing the results from TessBaseAPI::GetStrips(). */
+  static final boolean DRAW_STRIP_BOXES = false;
 
   /** Flag to draw boxes representing the results from TessBaseAPI::GetWords(). */
-  private static final boolean DRAW_WORD_BOXES = true;
+  static final boolean DRAW_WORD_BOXES = true;
 
   /** Flag to draw word text with a background varying from transparent to opaque. */
-  private static final boolean DRAW_TRANSPARENT_WORD_BACKGROUNDS = false;
+  static final boolean DRAW_TRANSPARENT_WORD_BACKGROUNDS = false;
 
   /** Flag to draw boxes representing the results from TessBaseAPI::GetCharacters(). */
-  private static final boolean DRAW_CHARACTER_BOXES = false;
+  static final boolean DRAW_CHARACTER_BOXES = false;
 
   /** Flag to draw the text of words within their respective boxes from TessBaseAPI::GetWords(). */
-  private static final boolean DRAW_WORD_TEXT = false;
+  static final boolean DRAW_WORD_TEXT = false;
 
   /** Flag to draw each character in its respective box from TessBaseAPI::GetCharacters(). */
-  private static final boolean DRAW_CHARACTER_TEXT = false;
+  static final boolean DRAW_CHARACTER_TEXT = false;
 
   private CameraManager cameraManager;
   private final Paint paint;
@@ -70,10 +73,11 @@ public final class ViewfinderView extends View {
   private final int cornerColor;
   private OcrResultText resultText;
   private String[] words;
+  private List<Rect> regionBoundingBoxes;
+  private List<Rect> textlineBoundingBoxes;
+  private List<Rect> stripBoundingBoxes;
   private List<Rect> wordBoundingBoxes;
   private List<Rect> characterBoundingBoxes;
-  private List<Rect> textlineBoundingBoxes;
-  private List<Rect> regionBoundingBoxes;
   //  Rect bounds;
   private Rect previewFrame;
   private Rect rect;
@@ -158,6 +162,21 @@ public final class ViewfinderView extends View {
           }
         }
 
+        if (DRAW_STRIP_BOXES) {
+          stripBoundingBoxes = resultText.getStripBoundingBoxes();
+          paint.setAlpha(0xFF);
+          paint.setColor(Color.YELLOW);
+          paint.setStyle(Style.STROKE);
+          paint.setStrokeWidth(1);
+          for (int i = 0; i < stripBoundingBoxes.size(); i++) {
+            rect = stripBoundingBoxes.get(i);
+            canvas.drawRect(frame.left + rect.left * scaleX,
+                frame.top + rect.top * scaleY, 
+                frame.left + rect.right * scaleX, 
+                frame.top + rect.bottom * scaleY, paint);
+          }        	
+        }
+
         if (DRAW_WORD_BOXES || DRAW_WORD_TEXT) {
           // Split the text into words
           wordBoundingBoxes = resultText.getWordBoundingBoxes();
@@ -168,6 +187,22 @@ public final class ViewfinderView extends View {
           //Log.d(""ViewfinderView"", ""There are "" + wordBoundingBoxes.size() + "" words with bounding boxes."");
         }
 
+        if (DRAW_WORD_BOXES) {
+          paint.setAlpha(0xFF);
+          paint.setColor(0xFF00CCFF);
+          paint.setStyle(Style.STROKE);
+          paint.setStrokeWidth(1);
+          for (int i = 0; i < wordBoundingBoxes.size(); i++) {
+            // Draw a bounding box around the word
+            rect = wordBoundingBoxes.get(i);
+            canvas.drawRect(
+                frame.left + rect.left * scaleX,
+                frame.top + rect.top * scaleY, 
+                frame.left + rect.right * scaleX, 
+                frame.top + rect.bottom",add getStrips ( ),"""Added support for drawing strip bounding boxes and refactored bounding box drawing logic in ViewfinderView""","""Added support for drawing bounding boxes for regions, strips, and characters in the OCR result.""","""Updated OCR result to include strip and character bounding boxes, and made box drawing flags static in ViewfinderView.""

Explanation:

* In CaptureActivity.java, the method getOcrResult() was updated to include strip and character bounding boxes in the OcrResult object.
* In DecodeHandler.java, the method getOcrResult() was updated to include strip and character bounding boxes in the OcrResult object. The method was also marked as unused with a @SuppressWarnings annotation.
* In OcrRecognizeAsyncTask.java, the doInBackground() method was updated to include strip bounding boxes in the OcrResult object.
* In OcrResult.java, the constructor was updated to include strip and character bounding boxes. The getCharacterBoundingBoxes() method was moved up in the class, and the getStripBoundingBoxes() method was added.
* In OcrResultText.java, the constructor was updated to include strip and character bounding boxes. The getStripBoundingBoxes() method was added.
* In ViewfinderView.java, the DRAW\_STRIP\_BOXES flag was added, and the paint color for drawing strip boxes was set to yellow. The drawViewfinder() method was updated to draw strip boxes if the DRAW\_STRIP\_BOXES flag is true. The DRAW\_REGION\_BOXES, DRAW\_TEXTLINE\_BOXES, DRAW\_WORD\_BOXES, DRAW\_TRANSPARENT\_WORD\_BACKGROUNDS, DRAW\_CHARACTER\_BOXES, and DRAW\_CHARACTER\_TEXT flags were also made static.",Add support for OCR strip bounding boxes and refactor bounding box drawing configurations.
"diff --git a/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java b/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java
index 64639abc0..35e04300e 100644
--- a/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java
+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTakeUntil.java
@@ -13,103 +13,120 @@
 
 package io.reactivex.internal.operators.observable;
 
-import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.*;
 
 import io.reactivex.*;
 import io.reactivex.disposables.Disposable;
-import io.reactivex.internal.disposables.*;
-import io.reactivex.observers.SerializedObserver;
+import io.reactivex.internal.disposables.DisposableHelper;
+import io.reactivex.internal.util.*;
 
 public final class ObservableTakeUntil<T, U> extends AbstractObservableWithUpstream<T, T> {
+
     final ObservableSource<? extends U> other;
+
     public ObservableTakeUntil(ObservableSource<T> source, ObservableSource<? extends U> other) {
         super(source);
         this.other = other;
     }
     @Override
     public void subscribeActual(Observer<? super T> child) {
-        final SerializedObserver<T> serial = new SerializedObserver<T>(child);
+        TakeUntilMainObserver<T, U> parent = new TakeUntilMainObserver<T, U>(child);
+        child.onSubscribe(parent);
 
-        final ArrayCompositeDisposable frc = new ArrayCompositeDisposable(2);
+        other.subscribe(parent.otherObserver);
+        source.subscribe(parent);
+    }
 
-        final TakeUntilObserver<T> tus = new TakeUntilObserver<T>(serial, frc);
+    static final class TakeUntilMainObserver<T, U> extends AtomicInteger
+    implements Observer<T>, Disposable {
 
-        child.onSubscribe(frc);
+        private static final long serialVersionUID = 1418547743690811973L;
 
-        other.subscribe(new TakeUntil(frc, serial));
+        final Observer<? super T> downstream;
 
-        source.subscribe(tus);
-    }
+        final AtomicReference<Disposable> upstream;
 
-    static final class TakeUntilObserver<T> extends AtomicBoolean implements Observer<T> {
+        final OtherObserver otherObserver;
 
-        private static final long serialVersionUID = 3451719290311127173L;
-        final Observer<? super T> actual;
-        final ArrayCompositeDisposable frc;
+        final AtomicThrowable error;
 
-        Disposable s;
-
-        TakeUntilObserver(Observer<? super T> actual, ArrayCompositeDisposable frc) {
-            this.actual = actual;
-            this.frc = frc;
+        TakeUntilMainObserver(Observer<? super T> downstream) {
+            this.downstream = downstream;
+            this.upstream = new AtomicReference<Disposable>();
+            this.otherObserver = new OtherObserver();
+            this.error = new AtomicThrowable();
         }
 
         @Override
-        public void onSubscribe(Disposable s) {
-            if (DisposableHelper.validate(this.s, s)) {
-                this.s = s;
-                frc.setResource(0, s);
-            }
+        public void dispose() {
+            DisposableHelper.dispose(upstream);
+            DisposableHelper.dispose(otherObserver);
         }
 
         @Override
-        public void onNext(T t) {
-            actual.onNext(t);
+        public boolean isDisposed() {
+            return DisposableHelper.isDisposed(upstream.get());
         }
 
         @Override
-        public void onError(Throwable t) {
-            frc.dispose();
-            actual.onError(t);
+        public void onSubscribe(Disposable d) {
+            DisposableHelper.setOnce(upstream, d);
         }
 
         @Override
-        public void onComplete() {
-            frc.dispose();
-            actual.onComplete();
+        public void onNext(T t) {
+            HalfSerializer.onNext(downstream, t, this, error);
         }
-    }
-
-    final class TakeUntil implements Observer<U> {
-        private final ArrayCompositeDisposable frc;
-        private final SerializedObserver<T> serial;
 
-        TakeUntil(ArrayCompositeDisposable frc, SerializedObserver<T> serial) {
-            this.frc = frc;
-            this.serial = serial;
+        @Override
+        public void onError(Throwable e) {
+            DisposableHelper.dispose(otherObserver);
+            HalfSerializer.onError(downstream, e, this, error);
         }
 
         @Override
-        public void onSubscribe(Disposable s) {
-            frc.setResource(1, s);
+        public void onComplete() {
+            DisposableHelper.dispose(otherObserver);
+            HalfSerializer.onComplete(downstream, this, error);
         }
 
-        @Override
-        public void onNext(U t) {
-            frc.dispose();
-            serial.onComplete();
+        void otherError(Throwable e) {
+            DisposableHelper.dispose(upstream);
+            HalfSerializer.onError(downstream, e, this, error);
         }
 
-        @Override
-        public void onError(Throwable t) {
-            frc.dispose();
-            serial.onError(t);
+        void otherComplete() {
+            DisposableHelper.dispose(upstream);
+            HalfSerializer.onComplete(downstream, this, error);
         }
 
-        @Override
-        public void onComplete() {
-            frc.dispose();
-            serial.onComplete();
+        final class OtherObserver extends AtomicReference<Disposable>
+        implements Observer<U> {
+
+            private static final long serialVersionUID = -8693423678067375039L;
+
+            @Override
+            public void onSubscribe(Disposable d) {
+                DisposableHelper.setOnce(this, d);
+            }
+
+            @Override
+            public void onNext(U t) {
+                DisposableHelper.dispose(this);
+                otherComplete();
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                otherError(e);
+            }
+
+            @Override
+            public void onComplete() {
+                otherComplete();
+            }
+
         }
     }
+
 }
diff --git a/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java b/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java
index d42e5df38..4251fcc10 100644
--- a/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java
+++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableTakeUntilTest.java
@@ -70,7 +70,7 @@ public class ObservableTakeUntilTest {
 
         verify(result, times(1)).onNext(""one"");
         verify(result, times(1)).onNext(""two"");
-        verify(sSource, times(1)).dispose();
+        verify(sSource, never()).dispose(); // no longer disposing itself on terminal events
         verify(sOther, times(1)).dispose();
 
     }
@@ -95,7 +95,7 @@ public class ObservableTakeUntilTest {
         verify(result, times(1)).onNext(""two"");
         verify(result, times(0)).onNext(""three"");
         verify(result, times(1)).onError(error);
-        verify(sSource, times(1)).dispose();
+        verify(sSource, never()).dispose(); // no longer disposing itself on terminal events
         verify(sOther, times(1)).dispose();
 
     }
@@ -122,7 +122,7 @@ public class ObservableTakeUntilTest {
         verify(result, times(1)).onError(error);
         verify(result, times(0)).onComplete();
         verify(sSource, times(1)).dispose();
-        verify(sOther,",Improve Observable . takeUntil ( <issue_id> ),"""Refactor ObservableTakeUntil to use a single TakeUntilMainObserver and simplify disposal logic""","According to the diff, the commit message should be:

""Remove self-disposal on terminal events in ObservableTakeUntil""

This commit message accurately reflects the changes made in the code, which is the removal of self-disposal on terminal events in the `ObservableTakeUntil` class.","The commit message should describe the changes made in the code. Based on the diff, the commit message could be:

""Refactor ObservableTakeUntil to use HalfSerializer and AtomicInteger for state management""

Explanation:

* The `SerializedObserver` has been replaced with a custom `TakeUntilMainObserver` that extends `AtomicInteger` and uses `HalfSerializer` for emitting items, errors, and completions.
* The `ArrayCompositeDisposable` has been replaced with an `AtomicReference<Disposable>` for managing the upstream subscription.
* The `AtomicBoolean` has been removed since it is no longer needed.
* The `TakeUntil` inner class has been removed and its functionality has been integrated into the `OtherObserver` inner class.

Additionally, the test class `ObservableTakeUntilTest` has been modified to reflect the changes in the behavior of the `ObservableTakeUntil` operator. The changes include removing the verification of the dispose method call on the source observable since it is no longer disposed on terminal events.","""Refactored ObservableTakeUntil to ensure proper resource management and prevent self-disposal on terminal events."""
"diff --git a/guava-gwt/src-super/java/util/Util.gwt.xml b/guava-gwt/src-super/java/util/Util.gwt.xml
index bd7134fce2..1968a1e606 100644
--- a/guava-gwt/src-super/java/util/Util.gwt.xml
+++ b/guava-gwt/src-super/java/util/Util.gwt.xml
@@ -1 +1,6 @@
-<module><super-source path=""super""/></module>
\ No newline at end of file
+
+<module>
+ <super-source path=""super""/>
+ <inherits name=""java.lang.Lang""/>
+</module>
+",Include java . lang . Lang from java . util . Util . .,"""Inherit java.lang.Lang in Util.gwt.xml""","""Add java.lang.Lang inheritance to Util.gwt.xml""","""Added inheritance of java.lang.Lang and newline in Util.gwt.xml""",Added java.lang.Lang inheritance to Util.gwt.xml module for improved functionality.
"diff --git a/build.xml b/build.xml
index c491f5ed..b64b8b23 100644
--- a/build.xml
+++ b/build.xml
@@ -60,7 +60,7 @@
 
   <target name=""javadoc"">
     <mkdir dir=""docs/javadoc""/>
-    <javadoc destdir=""docs/javadoc"">
+    <javadoc destdir=""docs/javadoc"" footer=""&lt;script src=&quot;http://www.google-analytics.com/urchin.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;_uacct = &quot;UA-788492-4&quot;; urchinTracker();&lt;/script&gt;"">
       <sourcepath>
         <pathelement location=""core/src""/>
         <pathelement location=""core-ext/src""/>",Added Google Analytics .,"""Added Google Analytics tracking to Javadoc footer""",Added Google Analytics tracking to Javadoc footer.,"""Added Google Analytics tracking to javadoc footer in build.xml""","""Add Google Analytics tracking script to javadoc generation for user activity monitoring."""
"diff --git a/app/src/processing/app/syntax/Token.java b/app/src/processing/app/syntax/Token.java
index 28809fb9f..2ffad1ec2 100644
--- a/app/src/processing/app/syntax/Token.java
+++ b/app/src/processing/app/syntax/Token.java
@@ -51,33 +51,35 @@ public class Token {
         /** Processing variables (width, height, focused, etc.) */
         public static final byte KEYWORD3 = 8;
 
+        public static final byte KEYWORD4 = 9;
+        
+        public static final byte KEYWORD5 = 10;
+
         /** Functions */
-        public static final byte FUNCTION1 = 9;
+        public static final byte FUNCTION1 = 11;
 
         /** Methods (functions inside a class) */
-        public static final byte FUNCTION2 = 10;
+        public static final byte FUNCTION2 = 12;
 
         /** Loop/function-like blocks (for, while, etc.) */
-        public static final byte FUNCTION3 = 12;
+        public static final byte FUNCTION3 = 13;
 
         /**
          * Operator token id. This can be used to mark an
          * operator. (eg, SQL mode marks +, -, etc with this
          * token type)
          */
-        public static final byte OPERATOR = 13;
+        public static final byte OPERATOR = 14;
 
         /**
          * Invalid token id. This can be used to mark invalid
          * or incomplete tokens, so the user can easily spot
          * syntax errors.
          */
-       ",add KEYWORD4 and KEYWORD5,"""Added new keyword token types and updated existing token type values in Token.java""",Added new keyword and operator tokens to Token class.,"""Updated token IDs in Token.java""

Here are the changes made in the code:

1. A new keyword ID `KEYWORD4` was added with the value 9.
2. Another new keyword ID `KEYWORD5` was added with the value 10.
3. The ID for `FUNCTION1` was changed from 9 to 11.
4. The ID for `FUNCTION2` was changed from 10 to 12.
5. The ID for `FUNCTION3` was changed from 12 to 13.
6. The ID for `OPERATOR` was changed from 13 to 14.","""Added new token types KEYWORD4 and KEYWORD5, adjusted token IDs accordingly."""
"diff --git a/compiler/ballerina-compiler-api/src/main/java/io/ballerina/compiler/api/symbols/Deprecatable.java b/compiler/ballerina-compiler-api/src/main/java/io/ballerina/compiler/api/symbols/Deprecatable.java
new file mode 100644
index 00000000000..66d21914d11
--- /dev/null
+++ b/compiler/ballerina-compiler-api/src/main/java/io/ballerina/compiler/api/symbols/Deprecatable.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ * WSO2 Inc. licenses this file to you under the Apache License,
+ * Version 2.0 (the ""License""); you may not use this file except
+ * in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.ballerina.compiler.api.symbols;
+
+/**
+ * An interface for symbols which can be deprecated.
+ *
+ * @since 2.0.0
+ */
+public interface Deprecatable {
+
+    /**
+     * Checks whether the symbol is deprecated.
+     *
+     * @return True if the symbol is deprecated
+     */
+    boolean deprecated();
+}
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaAnnotationSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaAnnotationSymbol.java
index 11dc6d191e7..48c5edf536f 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaAnnotationSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaAnnotationSymbol.java
@@ -27,6 +27,7 @@ import org.wso2.ballerinalang.compiler.semantics.model.symbols.BAnnotationSymbol
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;
 import org.wso2.ballerinalang.util.AttachPoints;
+import org.wso2.ballerinalang.util.Flags;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -45,6 +46,7 @@ public class BallerinaAnnotationSymbol extends BallerinaSymbol implements Annota
     private final Set<Qualifier> qualifiers;
     private final BallerinaTypeDescriptor typeDescriptor;
     private final List<AnnotationAttachPoint> attachPoints;
+    private final boolean deprecated;
 
     private BallerinaAnnotationSymbol(String name, PackageID moduleID, Set<Qualifier> qualifiers,
                                       BallerinaTypeDescriptor typeDescriptor, List<AnnotationAttachPoint> attachPoints,
@@ -53,6 +55,7 @@ public class BallerinaAnnotationSymbol extends BallerinaSymbol implements Annota
         this.qualifiers = Collections.unmodifiableSet(qualifiers);
         this.typeDescriptor = typeDescriptor;
         this.attachPoints = Collections.unmodifiableList(attachPoints);
+        this.deprecated = Symbols.isFlagOn(bSymbol.flags, Flags.DEPRECATED);
     }
 
     /**
@@ -85,6 +88,11 @@ public class BallerinaAnnotationSymbol extends BallerinaSymbol implements Annota
         return attachPoints;
     }
 
+    @Override
+    public boolean deprecated() {
+        return this.deprecated;
+    }
+
     /**
      * Represents Ballerina Annotation Symbol Builder.
      *
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaFunctionSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaFunctionSymbol.java
index 411a654f8c3..f7b5a2a15f0 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaFunctionSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaFunctionSymbol.java
@@ -23,9 +23,9 @@ import io.ballerina.compiler.api.symbols.SymbolKind;
 import io.ballerina.compiler.api.types.BallerinaTypeDescriptor;
 import io.ballerina.compiler.api.types.FunctionTypeDescriptor;
 import org.ballerinalang.model.elements.PackageID;
-import org.ballerinalang.model.util.Flags;
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.BInvokableSymbol;
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;
+import org.wso2.ballerinalang.util.Flags;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -43,6 +43,7 @@ public class BallerinaFunctionSymbol extends BallerinaSymbol implements Function
     private final FunctionTypeDescriptor typeDescriptor;
     private final Set<Qualifier> qualifiers;
     private final boolean isExternal;
+    private final boolean deprecated;
 
     protected BallerinaFunctionSymbol(String name,
                                       PackageID moduleID,
@@ -53,6 +54,7 @@ public class BallerinaFunctionSymbol extends BallerinaSymbol implements Function
         this.qualifiers = Collections.unmodifiableSet(qualifiers);
         this.typeDescriptor = typeDescriptor;
         this.isExternal = Symbols.isFlagOn(invokableSymbol.flags, Flags.NATIVE);
+        this.deprecated = Symbols.isFlagOn(invokableSymbol.flags, Flags.DEPRECATED);
     }
 
     /**
@@ -75,6 +77,11 @@ public class BallerinaFunctionSymbol extends BallerinaSymbol implements Function
         return this.isExternal;
     }
 
+    @Override
+    public boolean deprecated() {
+        return this.deprecated;
+    }
+
     /**
      * Represents Ballerina XML Namespace Symbol Builder.
      */
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaMethodSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaMethodSymbol.java
index d1fb626b045..fd78d5bede2 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaMethodSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaMethodSymbol.java
@@ -77,6 +77,11 @@ public class BallerinaMethodSymbol implements MethodSymbol {
         return this.functionSymbol.external();
     }
 
+    @Override
+    public boolean deprecated() {
+        return this.functionSymbol.deprecated();
+    }
+
     @Override
     public Location location() {
         return this.functionSymbol.location();
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java
index c39cb03b6ac..b95a56157f2 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java
@@ -23,6 +23,8 @@ import io.ballerina.compiler.api.symbols.TypeSymbol;
 import io.ballerina.compiler.api.types.BallerinaTypeDescriptor;
 import org.ballerinalang.model.elements.PackageID;
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;
+import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;
+import org.wso2.ballerinalang.util.Flags;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -37,8 +39,8 @@ import java.util.Set;
 public class BallerinaTypeSymbol extends BallerinaSymbol implements TypeSymbol {
 
     private final Set<Qualifier> qualifiers;
-
     private final BallerinaTypeDescriptor typeDescriptor;
+    private final boolean deprecated;
 
     protected BallerinaTypeSymbol(String name,
                                   PackageID moduleID,
@@ -48,6 +50,7 @@ public class BallerinaTypeSymbol extends BallerinaSymbol implements TypeSymbol {
         super(name, moduleID, SymbolKind.TYPE, bSymbol);
         this.qualifiers = Collections.unmodifiableSet(qualifiers);
         this.typeDescriptor = typeDescriptor;
+        this.deprecated = Symbols.isFlagOn(bSymbol.flags, Flags.DEPRECATED);
     }
 
     @Override
@@ -65,6 +68,11 @@ public class BallerinaTypeSymbol extends BallerinaSymbol implements TypeSymbol {
         return Optional.ofNullable(typeDescriptor);
     }
 
+    @Override
+    public boolean deprecated() {
+        return this.deprecated;
+    }
+
     /**
      * Represents a type definition symbol builder.
      *
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaVariableSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaVariableSymbol.java
index 7d6af0e7c8b..a2f40cc0486 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaVariableSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaVariableSymbol.java
@@ -23,6 +23,8 @@ import io.ballerina.compiler.api.symbols.VariableSymbol;
 import io.ballerina.compiler.api.types.BallerinaTypeDescriptor;
 import org.ballerinalang.model.elements.PackageID;
 import org.wso2.ballerinalang.compiler.semantics.model.symbols.BSymbol;
+import org.wso2.ballerinalang.compiler.semantics.model.symbols.Symbols;
+import org.wso2.ballerinalang.util.Flags;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -39,6 +41,7 @@ public class BallerinaVariableSymbol extends BallerinaSymbol implements Variable
 
     private final Set<Qualifier> qualifiers;
     private final BallerinaTypeDescriptor typeDescriptorImpl;
+    private final boolean deprecated;
 
     protected BallerinaVariableSymbol(String name,
                                       PackageID moduleID,
@@ -49,6 +52,7 @@ public class BallerinaVariableSymbol extends BallerinaSymbol implements Variable
         super(name, moduleID, ballerinaSymbolKind, bSymbol);
         this.qualifiers = Collections.unmodifiableSet(qualifiers);
         this.typeDescriptorImpl = typeDescriptorImpl;
+        this.deprecated = Symbols.isFlagOn(bSymbol.flags, Flags.DEPRECATED);
     }
 
     /**
@@ -71,6 +75,11 @@ public class BallerinaVariableSymbol extends BallerinaSymbol implements Variable
         return Optional.ofNullable(typeDescriptorImpl);
     }
 
+    @Override
+    public boolean deprecated() {
+        return this.deprecated;
+    }
+
     /**
      * Represents Ballerina XML Namespace Symbol Builder.
      */
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/AnnotationSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/AnnotationSymbol.java
index 1e08a1398ae..5eb1d6fbe8f 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/AnnotationSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/AnnotationSymbol.java
@@ -27,7 +27,7 @@ import java.util.Optional;
  *
  * @since 2.0.0
  */
-public interface AnnotationSymbol extends Symbol, Qualifiable {
+public interface AnnotationSymbol extends Symbol, Qualifiable, Deprecatable {
 
     /**
      * Get the type descriptor.
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/FunctionSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/FunctionSymbol.java
index d6ff5cfbfbe..8ccdc60f3c9 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/FunctionSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/FunctionSymbol.java
@@ -26,7 +26,7 @@ import java.util.Optional;
  *
  * @since 2.0.0
  */
-public interface FunctionSymbol extends Symbol, Qualifiable {
+public interface FunctionSymbol extends Symbol, Qualifiable, Deprecatable {
 
     /**
      * Get the Function Type Descriptor.
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeSymbol.java
index 8c00699223f..8f6fd2dc2c9 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/TypeSymbol.java
@@ -26,7 +26,7 @@ import java.util.Optional;
  *
  * @since 2.0.0
  */
-public interface TypeSymbol extends Symbol, Qualifiable {
+public interface TypeSymbol extends Symbol, Qualifiable, Deprecatable {
 
     /**
      * Get the module qualified name.
diff --git a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/VariableSymbol.java b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/VariableSymbol.java
index 821add473a8..f72892d1224 100644
--- a/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/VariableSymbol.java
+++ b/compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/VariableSymbol.java
@@ -26,7 +26,7 @@ import java.util.Optional;
  *
  * @since 2.0.0
  */
-public interface VariableSymbol extends Symbol, Qualifiable {
+public interface VariableSymbol extends Symbol, Qualifiable, Deprecatable {
 
     /**
      * Get the Type of the variable.",Add an API to check if the symbol is deprecated,"""Added Deprecatable interface and implemented it for various symbol types""",Implement deprecation support for symbols.,"It appears that you have added a new interface `Deprecatable` to the Ballerina compiler API. This interface has a single method `deprecated()` that checks whether a symbol is deprecated. You have also implemented this interface in several classes, such as `BallerinaAnnotationSymbol`, `BallerinaFunctionSymbol`, `BallerinaMethodSymbol`, `BallerinaTypeSymbol`, and `BallerinaVariableSymbol`, and added a new boolean field `deprecated` to store the deprecation status of the symbol. Additionally, you have updated the corresponding symbol interfaces in the API to extend the `Deprecatable` interface.

The commit message for these changes could be: ""Add support for symbol deprecation in the compiler API"". This message indicates that the purpose of the changes is to allow the compiler API to represent and query whether symbols are deprecated.",Add support for deprecation checks in Ballerina symbols by implementing the Deprecatable interface across various symbol types.
"diff --git a/README.adoc b/README.adoc
index df13e497..50b47c55 100644
--- a/README.adoc
+++ b/README.adoc
@@ -8,6 +8,8 @@ NOTE: javaslang-circuitbreaker has been renamed to resilience4j. We are still mi
 The *groupId* has been changed from *io.github.robwin* to *io.github.resilience4j*
 
 This library is a lightweight, easy-to-use fault tolerance library inspired by https://github.com/Netflix/Hystrix[Netflix Hystrix], but designed for Java 8 and functional programming. Lightweight, because the library only uses https://github.com/javaslang/javaslang[Javaslang], https://github.com/ReactiveX/RxJava[RxJava] and SLF4J-API, which do no have any other external library dependencies. Netflix Hystrix, in contrast, has a compile dependency to https://github.com/Netflix/archaius[Archaius] which has many more external library dependencies such as Guava and Apache Commons Configuration.
+In Resilience4j you don't have to go all-in, can pick what you need.
+
 Resilience4j features are:
 
 * Circuit breaking",Updated README,"""Update README to highlight Resilience4j's modular design""","Here's a possible commit message based on the provided diff:

`Update README.adoc to reflect library name change and new features`

This commit message is concise and accurately reflects the changes made in the commit.","""Added note that Resilience4j allows picking only needed features, unlike Netflix Hystrix which requires going all-in""","Added note highlighting the modular nature of Resilience4j, allowing users to pick only the components they need."
"diff --git a/src/jvm/clojure/lang/AFn.java b/src/jvm/clojure/lang/AFn.java
index f2d530a3..ca4d39dc 100644
--- a/src/jvm/clojure/lang/AFn.java
+++ b/src/jvm/clojure/lang/AFn.java
@@ -25,7 +25,7 @@ public void run(){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
diff --git a/src/jvm/clojure/lang/AFunction.java b/src/jvm/clojure/lang/AFunction.java
index d797102d..2963d0eb 100644
--- a/src/jvm/clojure/lang/AFunction.java
+++ b/src/jvm/clojure/lang/AFunction.java
@@ -60,7 +60,7 @@ public int compare(Object o1, Object o2){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 }
diff --git a/src/jvm/clojure/lang/AMapEntry.java b/src/jvm/clojure/lang/AMapEntry.java
index f9e02467..41ae7563 100644
--- a/src/jvm/clojure/lang/AMapEntry.java
+++ b/src/jvm/clojure/lang/AMapEntry.java
@@ -78,7 +78,7 @@ public String toString(){
 	catch(Exception e)
 		{
 		//checked exceptions stink!
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 	return sw.toString();
 }
diff --git a/src/jvm/clojure/lang/ARef.java b/src/jvm/clojure/lang/ARef.java
index e9235c02..44dc2add 100644
--- a/src/jvm/clojure/lang/ARef.java
+++ b/src/jvm/clojure/lang/ARef.java
@@ -53,7 +53,7 @@ public void setValidator(IFn vf){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 	validator = vf;
 }
@@ -78,7 +78,7 @@ synchronized public IRef removeWatch(Object key){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 
 	return this;
@@ -99,7 +99,7 @@ public void notifyWatches(Object oldval, Object newval){
 				}
 			catch(Exception e1)
 				{
-				throw Util.runtimeException(e1);
+				throw Util.sneakyThrow(e1);
 				}
 			}
 		}
diff --git a/src/jvm/clojure/lang/Compiler.java b/src/jvm/clojure/lang/Compiler.java
index bfc8274e..4207e7b6 100644
--- a/src/jvm/clojure/lang/Compiler.java
+++ b/src/jvm/clojure/lang/Compiler.java
@@ -1140,7 +1140,7 @@ static class StaticFieldExpr extends FieldExpr implements AssignableExpr{
 			}
 		catch(NoSuchFieldException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		this.tag = tag;
 	}
@@ -1213,7 +1213,7 @@ static Class maybePrimitiveType(Expr e){
 		}
 	catch(Exception ex)
 		{
-		throw Util.runtimeException(ex);
+		throw Util.sneakyThrow(ex);
 		}
 	return null;
 }
@@ -2378,7 +2378,7 @@ public static class NewExpr implements Expr{
 				}
 			catch(Exception e)
 				{
-				throw Util.runtimeException(e);
+				throw Util.sneakyThrow(e);
 				}
 			}
 		return Reflector.invokeConstructor(c, argvals);
@@ -2536,7 +2536,7 @@ public static class IfExpr implements Expr, MaybePrimitiveExpr{
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		if(emitUnboxed)
 			((MaybePrimitiveExpr)thenExpr).emitUnboxed(context, objx, gen);
@@ -3174,7 +3174,7 @@ static class StaticInvokeExpr implements Expr, MaybePrimitiveExpr{
 					}
 				catch(Exception ex)
 					{
-					throw Util.runtimeException(ex);
+					throw Util.sneakyThrow(ex);
 					}
 				}
 			IPersistentVector restArgs = RT.subvec(args,paramclasses.length - 1,args.count());
@@ -3696,7 +3696,7 @@ static public class FnExpr extends ObjExpr{
 			}
 		catch(IOException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		fn.getCompiledClass();
 
@@ -4539,7 +4539,7 @@ static public class ObjExpr implements Expr{
 				}
 			catch(Exception e)
 				{
-				throw Util.runtimeException(e);
+				throw Util.sneakyThrow(e);
 				}
 		return compiledClass;
 	}
@@ -4553,7 +4553,7 @@ static public class ObjExpr implements Expr{
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 	}
 
@@ -5053,7 +5053,7 @@ public static class FnMethod extends ObjMethod{
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		finally
 			{
@@ -5117,7 +5117,7 @@ public static class FnMethod extends ObjMethod{
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		finally
 			{
@@ -6058,7 +6058,7 @@ public static class RecurExpr implements Expr{
 					}
 				catch(Exception e)
 					{
-					throw Util.runtimeException(e);
+					throw Util.sneakyThrow(e);
 					}
 				}
 			else
@@ -6477,7 +6477,7 @@ public static Object eval(Object form, boolean freshLoader) {
 		catch(Throwable e)
 			{
 			if(!(e instanceof RuntimeException))
-				throw Util.runtimeException(e);
+				throw Util.sneakyThrow(e);
 			throw (RuntimeException)e;
 			}
 		finally
@@ -6583,7 +6583,7 @@ static void addAnnotation(Object visitor, IPersistentMap meta){
 	}
 	catch (Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
@@ -6594,7 +6594,7 @@ static void addParameterAnnotation(Object visitor, IPersistentMap meta, int i){
 	}
 	catch (Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
@@ -7329,7 +7329,7 @@ static public class NewInstanceExpr extends ObjExpr{
 			}
 		catch(IOException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		ret.getCompiledClass();
 		return ret;
@@ -7839,7 +7839,7 @@ public static class NewInstanceMethod extends ObjMethod{
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		finally
 			{
diff --git a/src/jvm/clojure/lang/FnLoaderThunk.java b/src/jvm/clojure/lang/FnLoaderThunk.java
index 1c5f2b79..337ba255 100644
--- a/src/jvm/clojure/lang/FnLoaderThunk.java
+++ b/src/jvm/clojure/lang/FnLoaderThunk.java
@@ -55,7 +55,7 @@ private void load() {
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		v.root = fn;
 		}
diff --git a/src/jvm/clojure/lang/LazySeq.java b/src/jvm/clojure/lang/LazySeq.java
index 6e9e37c1..914cc52b 100644
--- a/src/jvm/clojure/lang/LazySeq.java
+++ b/src/jvm/clojure/lang/LazySeq.java
@@ -48,7 +48,7 @@ final synchronized Object sval(){
 			}
 		catch(Exception e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		}
 	if(sv != null)
diff --git a/src/jvm/clojure/lang/LispReader.java b/src/jvm/clojure/lang/LispReader.java
index b0eb8b8b..1a1df3ee 100644
--- a/src/jvm/clojure/lang/LispReader.java
+++ b/src/jvm/clojure/lang/LispReader.java
@@ -123,7 +123,7 @@ static void unread(PushbackReader r, int ch) {
 			}
 		catch(IOException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 }
 
@@ -143,7 +143,7 @@ static public int read1(Reader r){
 		}
 	catch(IOException e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
@@ -209,7 +209,7 @@ static public Object read(PushbackReader r, boolean eofIsError, Object eofValue,
 	catch(Exception e)
 		{
 		if(isRecursive || !(r instanceof LineNumberingPushbackReader))
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 		LineNumberingPushbackReader rdr = (LineNumberingPushbackReader) r;
 		//throw Util.runtimeException(String.format(""ReaderError:(%d,1) %s"", rdr.getLineNumber(), e.getMessage()), e);
 		throw new ReaderException(rdr.getLineNumber(), e);
diff --git a/src/jvm/clojure/lang/PersistentHashMap.java b/src/jvm/clojure/lang/PersistentHashMap.java
index 928b123d..82f4864b 100644
--- a/src/jvm/clojure/lang/PersistentHashMap.java
+++ b/src/jvm/clojure/lang/PersistentHashMap.java
@@ -1057,4 +1057,4 @@ static final class NodeSeq extends ASeq {
 	}
 }
 
-}
\ No newline at end of file
+}
diff --git a/src/jvm/clojure/lang/RT.java b/src/jvm/clojure/lang/RT.java
index 3f77ad24..90420771 100644
--- a/src/jvm/clojure/lang/RT.java
+++ b/src/jvm/clojure/lang/RT.java
@@ -308,7 +308,7 @@ static{
 				               }
 			               catch(IOException e)
 				               {
-				               throw Util.runtimeException(e);
+				               throw Util.sneakyThrow(e);
 				               }
 		               }
 	               });
@@ -318,7 +318,7 @@ static{
 		doInit();
 	}
 	catch(Exception e) {
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 	}
 }
 
@@ -1697,7 +1697,7 @@ static public String printString(Object x){
 		return sw.toString();
 	}
 	catch(Exception e) {
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 	}
 }
 
@@ -1707,7 +1707,7 @@ static public Object readString(String s){
 		return LispReader.read(r, true, null, false);
 	}
 	catch(Exception e) {
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 	}
 }
 
@@ -2040,7 +2040,7 @@ static public Class classForName(String name) {
 		}
 	catch(ClassNotFoundException e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
diff --git a/src/jvm/clojure/lang/Ref.java b/src/jvm/clojure/lang/Ref.java
index 92067853..cf7ffa7c 100644
--- a/src/jvm/clojure/lang/Ref.java
+++ b/src/jvm/clojure/lang/Ref.java
@@ -247,7 +247,7 @@ public void run(){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
diff --git a/src/jvm/clojure/lang/Reflector.java b/src/jvm/clojure/lang/Reflector.java
index e47c264d..fb56a7ec 100644
--- a/src/jvm/clojure/lang/Reflector.java
+++ b/src/jvm/clojure/lang/Reflector.java
@@ -31,14 +31,22 @@ public static Object invokeInstanceMethod(Object target, String methodName, Obje
 		}
 	catch(Exception e)
 		{
-		if(e.getCause() instanceof Exception)
-			throw Util.runtimeException(e.getCause());
-		else if(e.getCause() instanceof Error)
-			throw (Error) e.getCause();
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(getCauseOrElse(e));
 		}
 }
 
+private static Throwable getCauseOrElse(Exception e) {
+	if (e.getCause() != null)
+		return e.getCause();
+	return e;
+}
+
+private static RuntimeException throwCauseOrElseException(Exception e) {
+	if (e.getCause() != null)
+		throw Util.sneakyThrow(e.getCause());
+	throw Util.sneakyThrow(e);
+}
+
 private static String noMethodReport(String methodName, Object target){
 	 return ""No matching method found: "" + methodName
 			+ (target==null?"""":"" for "" + target.getClass());
@@ -93,11 +101,7 @@ static Object invokeMatchingMethod(String methodName, List methods, Object targe
 		}
 	catch(Exception e)
 		{
-		if(e.getCause() instanceof Exception)
-			throw Util.runtimeException(e.getCause());
-		else if(e.getCause() instanceof Error)
-			throw (Error) e.getCause();
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(getCauseOrElse(e));
 		}
 
 }
@@ -189,11 +193,7 @@ public static Object invokeConstructor(Class c, Object[] args) {
 		}
 	catch(Exception e)
 		{
-		if(e.getCause() instanceof Exception)
-			throw Util.runtimeException(e.getCause());
-		else if(e.getCause() instanceof Error)
-			throw (Error) e.getCause();
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(getCauseOrElse(e));
 		}
 }
 
@@ -210,11 +210,7 @@ public static Object invokeStaticMethod(String className, String methodName, Obj
 		}
 	catch(Exception e)
 		{
-		if(e.getCause() instanceof Exception)
-			throw Util.runtimeException(e.getCause());
-		else if(e.getCause() instanceof Error)
-			throw (Error) e.getCause();
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(getCauseOrElse(e));
 		}
 }
 
@@ -242,7 +238,7 @@ public static Object getStaticField(Class c, String fieldName) {
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		}
 	throw new IllegalArgumentException(""No matching field found: "" + fieldName
@@ -264,7 +260,7 @@ public static Object setStaticField(Class c, String fieldName, Object val) {
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		return val;
 		}
@@ -283,7 +279,7 @@ public static Object getInstanceField(Object target, String fieldName) {
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		}
 	throw new IllegalArgumentException(""No matching field found: "" + fieldName
@@ -301,7 +297,7 @@ public static Object setInstanceField(Object target, String fieldName, Object va
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		return val;
 		}
@@ -330,7 +326,7 @@ public static Object invokeInstanceMember(Object target, String name) {
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		}
 	return invokeInstanceMethod(target, name, RT.EMPTY_ARRAY);
@@ -348,7 +344,7 @@ public static Object invokeInstanceMember(String name, Object target, Object arg
 			}
 		catch(IllegalAccessException e)
 			{
-			throw Util.runtimeException(e);
+			throw Util.sneakyThrow(e);
 			}
 		return arg1;
 		}
diff --git a/src/jvm/clojure/lang/TransactionalHashMap.java b/src/jvm/clojure/lang/TransactionalHashMap.java
index ea3f9d71..c8e30801 100644
--- a/src/jvm/clojure/lang/TransactionalHashMap.java
+++ b/src/jvm/clojure/lang/TransactionalHashMap.java
@@ -93,7 +93,7 @@ public V remove(Object k){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 	return (V) ret;
 }
@@ -163,7 +163,7 @@ public boolean remove(Object k, Object v){
 			}
 		catch(Exception ex)
 			{
-			throw Util.runtimeException(ex);
+			throw Util.sneakyThrow(ex);
 			}
 		return true;
 		}
diff --git a/src/jvm/clojure/lang/Util.java b/src/jvm/clojure/lang/Util.java
index 92862876..02b5466f 100644
--- a/src/jvm/clojure/lang/Util.java
+++ b/src/jvm/clojure/lang/Util.java
@@ -169,16 +169,11 @@ static public <K,V> void clearCache(ReferenceQueue rq, ConcurrentHashMap<K, Refe
 static public RuntimeException runtimeException(String s){
 	return new RuntimeException(s);
 }
+
 static public RuntimeException runtimeException(String s, Throwable e){
 	return new RuntimeException(s, e);
 }
 
-static public RuntimeException runtimeException(Throwable e){
-	if(e instanceof RuntimeException)
-		return (RuntimeException)e;
-	return new RuntimeException(e);
-}
-
 /**
  * Throw even checked exceptions without being required
  * to declare them or catch them. Suggested idiom:
diff --git a/src/jvm/clojure/lang/Var.java b/src/jvm/clojure/lang/Var.java
index 799a153c..b67a4673 100644
--- a/src/jvm/clojure/lang/Var.java
+++ b/src/jvm/clojure/lang/Var.java
@@ -254,7 +254,7 @@ public void setMacro() {
         }
     catch (Exception e)
         {
-        throw Util.runtimeException(e);
+        throw Util.sneakyThrow(e);
         }
 }
 
@@ -285,7 +285,7 @@ public void setTag(Symbol tag) {
         }
     catch (Exception e)
         {
-        throw Util.runtimeException(e);
+        throw Util.sneakyThrow(e);
         }
 }
 
@@ -305,7 +305,7 @@ synchronized public void bindRoot(Object root){
         }
     catch (Exception e)
         {
-        throw Util.runtimeException(e);
+        throw Util.sneakyThrow(e);
         }
     notifyWatches(oldroot,this.root);
 }
@@ -403,7 +403,7 @@ public void run(){
 		}
 	catch(Exception e)
 		{
-		throw Util.runtimeException(e);
+		throw Util.sneakyThrow(e);
 		}
 }
 
@@ -547,7 +547,10 @@ static IFn dissoc = new AFn() {
 		    }
 	    catch(Exception e)
 		    {
-		    return Util.runtimeException(e);
+// TODO:CLJ-855 ""throw Util.sneakyThrow(e)"" instead?
+// I don't understand why we are *returing* the exception here instead
+// of just throwing it.
+			return e; 
 		    }
     }
 };",throw exceptions directly instead of wrapping them with RTE .,"""Replace Util.runtimeException with Util.sneakyThrow""","""Replace Util.runtimeException with Util.sneakyThrow in various places.""","This commit appears to replace calls to `Util.runtimeException(e)` with `Util.sneakyThrow(e)` throughout the Clojure codebase. The `Util.runtimeException` method is used to wrap a checked exception `e` into an unchecked `RuntimeException`, which can then be thrown in contexts where checked exceptions are not declared or caught. The `Util.sneakyThrow` method, on the other hand, uses a technique known as ""sneaky throws"" to throw `e` directly, even if it is a checked exception, without the need for explicit catching or declaring. This can be useful in certain situations, but it can also make it harder to reason about the code, as exceptions can seemingly ""disappear"" without being caught or declared. The change also includes a small refactoring in `Reflector.java` to extract a `getCauseOrElse` method, and adds a new `throwCauseOrElseException` method.","### Commit Message
Replace `Util.runtimeException` with `Util.sneakyThrow` to handle exceptions more flexibly across various classes."
"diff --git a/pom.xml b/pom.xml
index 78b88a397..c002bc740 100644
--- a/pom.xml
+++ b/pom.xml
@@ -16,10 +16,10 @@
     <dependencies>
         <!-- http -->
         <!--<dependency>-->
-            <!--<groupId>javax.servlet</groupId>-->
-            <!--<artifactId>servlet-api</artifactId>-->
-            <!--<version>3.0-alpha-1</version>-->
-            <!--<scope>provided</scope>-->
+        <!--<groupId>javax.servlet</groupId>-->
+        <!--<artifactId>servlet-api</artifactId>-->
+        <!--<version>3.0-alpha-1</version>-->
+        <!--<scope>provided</scope>-->
         <!--</dependency>-->
         <dependency>
             <groupId>org.eclipse.jetty</groupId>
@@ -71,9 +71,9 @@
             <version>3.1</version>
         </dependency>
         <dependency>
-        	<groupId>com.google.guava</groupId>
-        	<artifactId>guava</artifactId>
-        	<version>14.0-rc3</version>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>14.0-rc3</version>
         </dependency>
         <dependency>
             <groupId>commons-collections</groupId>
@@ -86,12 +86,27 @@
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
             <version>4.11</version>
+            <scope>test</scope>
         </dependency>
         <dependency>
-        	<groupId>org.mockito</groupId>
-        	<artifactId>mockito-all</artifactId>
-        	<version>1.8.4</version>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.8.4</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- logging -->
+        <dependency> <!-- will map to any underlying logging framework -->
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-api</artifactId>
+            <version>1.7.2</version>
+        </dependency>
+        <dependency> <!-- use logback in tests -->
+            <groupId>ch.qos.logback</groupId>
+            <artifactId>logback-classic</artifactId>
+            <version>1.0.9</version>
+            <scope>test</scope>
         </dependency>
     </dependencies>
-    
+
 </project>
\ No newline at end of file
diff --git a/src/main/java/org/jamesdbloom/mockserver/client/MockServerClient.java b/src/main/java/org/jamesdbloom/mockserver/client/MockServerClient.java
index 6158c6e34..fd242750c 100644
--- a/src/main/java/org/jamesdbloom/mockserver/client/MockServerClient.java
+++ b/src/main/java/org/jamesdbloom/mockserver/client/MockServerClient.java
@@ -7,11 +7,14 @@ import org.jamesdbloom.mockserver.client.serialization.ExpectationSerializer;
 import org.jamesdbloom.mockserver.matchers.Times;
 import org.jamesdbloom.mockserver.mock.Expectation;
 import org.jamesdbloom.mockserver.model.HttpRequest;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author jamesdbloom
  */
 public class MockServerClient {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
 
     private final String mockServerURI;
 
@@ -35,6 +38,7 @@ public class MockServerClient {
             httpClient.start();
             httpClient.newRequest(mockServerURI).method(HttpMethod.PUT).content(new StringContentProvider(expectationSerializer.serialize(expectation))).send();
         } catch (Exception e) {
+            logger.error(String.format(""Exception sending expectation to MockServer as %s"", expectation), e);
             throw new RuntimeException(String.format(""Exception sending expectation to MockServer as %s"", expectation), e);
         }
     }
diff --git a/src/main/java/org/jamesdbloom/mockserver/client/serialization/ExpectationSerializer.java b/src/main/java/org/jamesdbloom/mockserver/client/serialization/ExpectationSerializer.java
index 8ebe1e9a5..7e3434a38 100644
--- a/src/main/java/org/jamesdbloom/mockserver/client/serialization/ExpectationSerializer.java
+++ b/src/main/java/org/jamesdbloom/mockserver/client/serialization/ExpectationSerializer.java
@@ -3,6 +3,8 @@ package org.jamesdbloom.mockserver.client.serialization;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.jamesdbloom.mockserver.client.serialization.model.ExpectationDTO;
 import org.jamesdbloom.mockserver.mock.Expectation;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -11,6 +13,7 @@ import java.io.InputStream;
  * @author jamesdbloom
  */
 public class ExpectationSerializer {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
 
     private ObjectMapper objectMapper = new ObjectMapper();
 
@@ -18,9 +21,8 @@ public class ExpectationSerializer {
         try {
             return objectMapper.writeValueAsString(new ExpectationDTO(expectation));
         } catch (IOException ioe) {
-            RuntimeException runtimeException = new RuntimeException(String.format(""Exception while serializing expectation to JSON with value %s"", expectation), ioe);
-            runtimeException.printStackTrace();
-            throw runtimeException;
+            logger.error(String.format(""Exception while serializing expectation to JSON with value %s"", expectation), ioe);
+            throw new RuntimeException(String.format(""Exception while serializing expectation to JSON with value %s"", expectation), ioe);
         }
     }
 
@@ -32,9 +34,8 @@ public class ExpectationSerializer {
                 expectation = expectationDTO.buildObject();
             }
         } catch (IOException ioe) {
-            RuntimeException runtimeException = new RuntimeException(""Exception while parsing response for http response expectation with value of"", ioe);
-            runtimeException.printStackTrace();
-            throw runtimeException;
+            logger.error(""Exception while parsing response for http response expectation"", ioe);
+            throw new RuntimeException(""Exception while parsing response for http response expectation"", ioe);
         }
         return expectation;
     }
diff --git a/src/main/java/org/jamesdbloom/mockserver/client/serialization/model/ExpectationDTO.java b/src/main/java/org/jamesdbloom/mockserver/client/serialization/model/ExpectationDTO.java
index 5546d7240..59cac8b3b 100644
--- a/src/main/java/org/jamesdbloom/mockserver/client/serialization/model/ExpectationDTO.java
+++ b/src/main/java/org/jamesdbloom/mockserver/client/serialization/model/ExpectationDTO.java
@@ -37,11 +37,13 @@ public class ExpectationDTO extends ModelObject {
         if (this.httpRequest != null) {
             httpRequest = this.httpRequest.buildObject();
         } else {
+            logger.warn(""HttpRequest must be specified to create an Expectation"");
             throw new IllegalArgumentException(""HttpRequest must be specified to create an Expectation"");
         }
         if (this.httpResponse != null) {
             httpResponse = this.httpResponse.buildObject();
         } else {
+            logger.warn(""HttpResponse must be specified to create an Expectation"");
             throw new IllegalArgumentException(""HttpResponse must be specified to create an Expectation"");
         }
         if (this.times != null) {
diff --git a/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletRequestMapper.java b/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletRequestMapper.java
index 180510c74..d13f1817f 100644
--- a/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletRequestMapper.java
+++ b/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletRequestMapper.java
@@ -3,6 +3,8 @@ package org.jamesdbloom.mockserver.mappers;
 import org.jamesdbloom.mockserver.model.Cookie;
 import org.jamesdbloom.mockserver.model.Header;
 import org.jamesdbloom.mockserver.model.HttpRequest;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.servlet.http.HttpServletRequest;
 import java.io.IOException;
@@ -15,6 +17,7 @@ import java.util.List;
  * @author jamesdbloom
  */
 public class HttpServletRequestMapper {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
 
     public HttpRequest createHttpRequest(HttpServletRequest httpServletRequest) {
         HttpRequest httpRequest = new HttpRequest();
@@ -40,6 +43,7 @@ public class HttpServletRequestMapper {
                 httpRequest.withBody(new String(bodyBytes));
             }
         } catch (IOException ioe) {
+            logger.error(""IOException while reading HttpServletRequest input stream"", ioe);
             throw new RuntimeException(""IOException while reading HttpServletRequest input stream"", ioe);
         }
     }
diff --git a/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletResponseMapper.java b/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletResponseMapper.java
index 7cacc8e76..f83be1b92 100644
--- a/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletResponseMapper.java
+++ b/src/main/java/org/jamesdbloom/mockserver/mappers/HttpServletResponseMapper.java
@@ -3,6 +3,8 @@ package org.jamesdbloom.mockserver.mappers;
 import org.jamesdbloom.mockserver.model.Cookie;
 import org.jamesdbloom.mockserver.model.Header;
 import org.jamesdbloom.mockserver.model.HttpResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -11,6 +13,8 @@ import java.io.IOException;
  * @author jamesdbloom
  */
 public class HttpServletResponseMapper {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
+
     public void mapHttpServletResponse(HttpResponse httpResponse, HttpServletResponse httpServletResponse) {
         setStatusCode(httpResponse, httpServletResponse);
         setBody(httpResponse, httpServletResponse);
@@ -29,6 +33,7 @@ public class HttpServletResponseMapper {
             try {
                 httpServletResponse.getOutputStream().write(httpResponse.getBody().getBytes());
             } catch (IOException ioe) {
+                logger.error(String.format(""IOException while writing %s to HttpServletResponse output stream"", httpResponse.getBody()), ioe);
                 throw new RuntimeException(String.format(""IOException while writing %s to HttpServletResponse output stream"", httpResponse.getBody()), ioe);
             }
         }
diff --git a/src/main/java/org/jamesdbloom/mockserver/matchers/MapMatcher.java b/src/main/java/org/jamesdbloom/mockserver/matchers/MapMatcher.java
index d58642c63..0714d442d 100644
--- a/src/main/java/org/jamesdbloom/mockserver/matchers/MapMatcher.java
+++ b/src/main/java/org/jamesdbloom/mockserver/matchers/MapMatcher.java
@@ -21,6 +21,8 @@ public class MapMatcher<K, V> extends ModelObject implements Matcher<List<KeyToM
 
         if (containsAll(KeyToMultiValue.toMultiMap(values), this.multimap)) {
             result = true;
+        } else {
+            logger.trace(""Failed to match {} with {}"", values, multimap);
         }
 
         return result;
diff --git a/src/main/java/org/jamesdbloom/mockserver/matchers/StringMatcher.java b/src/main/java/org/jamesdbloom/mockserver/matchers/StringMatcher.java
index 751b484b4..331359b6a 100644
--- a/src/main/java/org/jamesdbloom/mockserver/matchers/StringMatcher.java
+++ b/src/main/java/org/jamesdbloom/mockserver/matchers/StringMatcher.java
@@ -2,11 +2,14 @@ package org.jamesdbloom.mockserver.matchers;
 
 import com.google.common.base.Strings;
 import org.jamesdbloom.mockserver.model.ModelObject;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author jamesdbloom
  */
 public class StringMatcher extends ModelObject implements Matcher<String> {
+
     private final String path;
 
     public StringMatcher(String path) {
@@ -20,6 +23,8 @@ public class StringMatcher extends ModelObject implements Matcher<String> {
             result = true;
         } else if (path != null && path.matches(this.path)) {
             result = true;
+        } else {
+            logger.trace(""Failed to match {} with {}"", path, this.path);
         }
 
         return result;
diff --git a/src/main/java/org/jamesdbloom/mockserver/matchers/Times.java b/src/main/java/org/jamesdbloom/mockserver/matchers/Times.java
index 7ff85c4dc..0e2f1be7f 100644
--- a/src/main/java/org/jamesdbloom/mockserver/matchers/Times.java
+++ b/src/main/java/org/jamesdbloom/mockserver/matchers/Times.java
@@ -16,11 +16,6 @@ public class Times extends ModelObject {
         this.unlimited = unlimited;
     }
 
-    public Times(TimesDTO timesDTO) {
-        this.remainingTimes = timesDTO.getRemainingTimes();
-        this.unlimited = timesDTO.isUnlimited();
-    }
-
     public int getRemainingTimes() {
         return remainingTimes;
     }
@@ -42,7 +37,12 @@ public class Times extends ModelObject {
     }
 
     public boolean greaterThenZero() {
-        return unlimited || remainingTimes > 0;
+        if(unlimited || remainingTimes > 0) {
+            return true;
+        } else {
+            logger.trace(""Remaining count is 0"");
+            return false;
+        }
     }
 
     public void decrement() {
diff --git a/src/main/java/org/jamesdbloom/mockserver/mock/Expectation.java b/src/main/java/org/jamesdbloom/mockserver/mock/Expectation.java
index 49c42025e..ee12c085b 100644
--- a/src/main/java/org/jamesdbloom/mockserver/mock/Expectation.java
+++ b/src/main/java/org/jamesdbloom/mockserver/mock/Expectation.java
@@ -11,6 +11,7 @@ import org.jamesdbloom.mockserver.model.ModelObject;
  */
 public class Expectation extends ModelObject {
 
+    public static final ExpectationMapper EXPECTATION_MAPPER = new ExpectationMapper();
     private final HttpRequest httpRequest;
     private final Times times;
     private HttpResponse httpResponse;
@@ -38,7 +39,7 @@ public class Expectation extends ModelObject {
     }
 
     public boolean matches(HttpRequest httpRequest) {
-        boolean matches = times.greaterThenZero() && new ExpectationMapper().transformsToMatcher(this.httpRequest).matches(httpRequest);
+        boolean matches = times.greaterThenZero() && EXPECTATION_MAPPER.transformsToMatcher(this.httpRequest).matches(httpRequest);
         if (matches) {
             times.decrement();
         }
diff --git a/src/main/java/org/jamesdbloom/mockserver/mock/MockServer.java b/src/main/java/org/jamesdbloom/mockserver/mock/MockServer.java
index 45a73f40a..af946419d 100644
--- a/src/main/java/org/jamesdbloom/mockserver/mock/MockServer.java
+++ b/src/main/java/org/jamesdbloom/mockserver/mock/MockServer.java
@@ -18,7 +18,6 @@ import java.util.List;
 public class MockServer extends ModelObject {
 
     protected final List<Expectation> expectations = new ArrayList<Expectation>();
-    private ExpectationMapper expectationMapper = new ExpectationMapper();
 
     public Expectation when(final HttpRequest httpRequest) {
         Collection<Expectation> existingExpectationsWithMatchingRequest = Collections2.filter(expectations, new Predicate<Expectation>() {
diff --git a/src/main/java/org/jamesdbloom/mockserver/model/Delay.java b/src/main/java/org/jamesdbloom/mockserver/model/Delay.java
index 72b615c79..52a251aec 100644
--- a/src/main/java/org/jamesdbloom/mockserver/model/Delay.java
+++ b/src/main/java/org/jamesdbloom/mockserver/model/Delay.java
@@ -26,8 +26,9 @@ public class Delay extends ModelObject {
     public void applyDelay() {
         try {
             timeUnit.sleep(value);
-        } catch (InterruptedException e) {
-            throw new RuntimeException(""InterruptedException while apply delay to response"", e);
+        } catch (InterruptedException ie) {
+            logger.error(""InterruptedException while apply delay to response"", ie);
+            throw new RuntimeException(""InterruptedException while apply delay to response"", ie);
         }
     }
 }
diff --git a/src/main/java/org/jamesdbloom/mockserver/model/ModelObject.java b/src/main/java/org/jamesdbloom/mockserver/model/ModelObject.java
index 2a3db8f77..19e9e225f 100644
--- a/src/main/java/org/jamesdbloom/mockserver/model/ModelObject.java
+++ b/src/main/java/org/jamesdbloom/mockserver/model/ModelObject.java
@@ -4,11 +4,14 @@ import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
 import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
 import org.apache.commons.lang3.builder.ToStringStyle;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author jamesdbloom
  */
 public abstract class ModelObject {
+    protected Logger logger = LoggerFactory.getLogger(this.getClass());
 
     @Override
     public String toString() {
diff --git a/src/main/java/org/jamesdbloom/mockserver/server/EmbeddedJettyRunner.java b/src/main/java/org/jamesdbloom/mockserver/server/EmbeddedJettyRunner.java
index 16bfed998..0c4268adb 100644
--- a/src/main/java/org/jamesdbloom/mockserver/server/EmbeddedJettyRunner.java
+++ b/src/main/java/org/jamesdbloom/mockserver/server/EmbeddedJettyRunner.java
@@ -2,11 +2,14 @@ package org.jamesdbloom.mockserver.server;
 
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.ServletHandler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * @author jamesdbloom
  */
 public class EmbeddedJettyRunner {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
 
     private final Server server;
 
@@ -25,6 +28,7 @@ public class EmbeddedJettyRunner {
         try {
             server.start();
         } catch (Exception e) {
+            logger.error(""Failed to start embedded jetty server"", e);
             throw new RuntimeException(""Failed to start embedded jetty server"", e);
         }
     }
diff --git a/src/main/java/org/jamesdbloom/mockserver/server/MockServerServlet.java b/src/main/java/org/jamesdbloom/mockserver/server/MockServerServlet.java
index b1f2bc230..30f5a4111 100644
--- a/src/main/java/org/jamesdbloom/mockserver/server/MockServerServlet.java
+++ b/src/main/java/org/jamesdbloom/mockserver/server/MockServerServlet.java
@@ -6,6 +6,8 @@ import org.jamesdbloom.mockserver.mappers.HttpServletResponseMapper;
 import org.jamesdbloom.mockserver.mock.MockServer;
 import org.jamesdbloom.mockserver.model.HttpRequest;
 import org.jamesdbloom.mockserver.model.HttpResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
@@ -16,6 +18,7 @@ import java.io.IOException;
  * @author jamesdbloom
  */
 public class MockServerServlet extends HttpServlet {
+    private Logger logger = LoggerFactory.getLogger(this.getClass());
 
     private MockServer mockServer = new MockServer();
     private HttpServletRequestMapper httpServletRequestMapper = new HttpServletRequestMapper();
diff --git a/src/test/java/org/jamesdbloom/mockserver/ClientServerTest.java b/src/test/java/org/jamesdbloom/mockserver/ClientServerTest.java
index d6828f499..263a0b78b 100644
--- a/src/test/java/org/jamesdbloom/mockserver/ClientServerTest.java
+++ b/src/test/java/org/jamesdbloom/mockserver/ClientServerTest.java
@@ -13,6 +13,8 @@ import org.jamesdbloom.mockserver.model.Header;
 import org.jamesdbloom.mockserver.model.HttpRequest;
 import org.jamesdbloom.mockserver.model.HttpResponse;
 import org.jamesdbloom.mockserver.server.EmbeddedJettyRunner;
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -25,28 +27,60 @@ import static org.junit.Assert.assertEquals;
  */
 public class ClientServerTest {
 
+    private EmbeddedJettyRunner embeddedJettyRunner;
+    private MockServerClient mockServerClient;
+
+    @Before
+    public void startServerAndCreateClient() {
+        embeddedJettyRunner = new EmbeddedJettyRunner(8080);
+        mockServerClient = new MockServerClient(""localhost"", 8080);
+    }
+
+    @After
+    public void stopServer() throws Exception {
+        embeddedJettyRunner.stop();
+    }
+
     @Test
     public void clientCanCallServer() throws Exception {
-        // given
-        EmbeddedJettyRunner embeddedJettyRunner = new EmbeddedJettyRunner(8080);
-        MockServerClient mockServerClient = new MockServerClient(""localhost"", 8080);
-
         // when
         mockServerClient.when(new HttpRequest()).respond(new HttpResponse().withBody(""somebody""));
 
         // then
-        HttpResponse server = new HttpResponse()
-                .withStatusCode(HttpStatus.OK_200)
-                .withHeaders(new Header(""Content-Length"", """" + ""somebody"".length()), new Header(""Server"", ""Jetty(9.0.0.RC0)""))
-                .withBody(""somebody"");
-        assertEquals(server, makeRequest(new HttpRequest()));
+        assertEquals(
+                new HttpResponse()
+                        .withStatusCode(HttpStatus.OK_200)
+                        .withHeaders(new Header(""Content-Length"", """" + ""somebody"".length()), new Header(""Server"", ""Jetty(9.0.0.RC0)""))
+                        .withBody(""somebody""),
+                makeRequest(new HttpRequest()));
+    }
+
+    @Test
+    public void clientCanCallServerMatchBody() throws Exception {
+        // when
+        mockServerClient.when(new HttpRequest().withPath(""/somepath1"")).respond(new HttpResponse().withBody(""somebody1""));
+        mockServerClient.when(new HttpRequest().withPath(""/somepath2"")).respond(new HttpResponse().withBody(""somebody2""));
+
+        // then
+        assertEquals(
+                new HttpResponse()
+                        .withStatusCode(HttpStatus.OK_200)
+                        .withHeaders(new Header(""Content-Length"", """" + ""somebody2"".length()), new Header(""Server"", ""Jetty(9.0.0.RC0)""))
+                        .withBody(""somebody2""),
+                makeRequest(new HttpRequest().withPath(""/somepath2"")));
+        assertEquals(
+                new HttpResponse()
+                        .withStatusCode(HttpStatus.OK_200)
+                        .withHeaders(new Header(""Content-Length"", """" + ""somebody1"".length()), new Header(""Server"", ""Jetty(9.0.0.RC0)""))
+                        .withBody(""somebody1""),
+                makeRequest(new HttpRequest().withPath(""/somepath1"")));
     }
 
-    public HttpResponse makeRequest(HttpRequest httpRequest) throws Exception {
+    private HttpResponse makeRequest(HttpRequest httpRequest) throws Exception {
         HttpResponse httpResponse;
         HttpClient httpClient = new HttpClient();
         httpClient.start();
-        Request request = httpClient.newRequest(""http://localhost:8080/"" + httpRequest.getPath()).method(HttpMethod.GET).content(new StringContentProvider(httpRequest.getBody()));
+        Request request = httpClient.newRequest(""http://localhost:8080"" + (httpRequest.getPath().startsWith(""/"") ? """" : ""/"") + httpRequest.getPath()).method(HttpMethod.GET).content(new StringContentProvider(httpRequest.getBody()));
         for (Header header : httpRequest.getHeaders()) {
             for (String value : header.getValues()) {
                 request.header(header.getName(), value);
diff --git a/src/test/resources/logback-test.xml b/src/test/resources/logback-test.xml
new file mode 100644
index 000000000..6d7753005
--- /dev/null
+++ b/src/test/resources/logback-test.xml
@@ -0,0 +1,13 @@
+<configuration>
+    <appender name=""STDOUT"" class=""ch.qos.logback.core.ConsoleAppender"">
+        <encoder>
+            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{35} - %msg%n</pattern>
+        </encoder>
+    </appender>
+
+    <logger name=""org.jamesdbloom"" level=""TRACE""/>
+
+    <root level=""warn"">
+        <appender-ref ref=""STDOUT""/>
+    </root>
+</configuration>
\ No newline at end of file",adding logback for tests and slf4j for non - tests,"""Added logging using SLF4J and Logback, and refactored test setup and teardown in ClientServerTest""",Added logging using SLF4J and Logback for better error handling and debugging.,"""Add logging using SLF4J and Logback, and update dependencies""

Explanation:

* The commit adds the SLF4J (Simple Logging Facade for Java) and Logback dependencies to the project's `pom.xml` file. This allows the project to use SLF4J for logging, with Logback as the backend implementation.
* The commit also updates the versions of some other dependencies in `pom.xml`.
* The commit adds `Logger` objects to several classes, and uses them to log messages at various levels (e.g. `trace`, `debug`, `info`, `warn`, `error`). This allows the project to log information about its execution, which can be helpful for debugging and monitoring.
* The commit adds a `logback-test.xml` file to the project's `src/test/resources` directory. This file configures Logback for use in tests, specifying that log messages should be output to the console using a specific format.

Overall, this commit adds logging to the project using SLF4J and Logback, and updates its dependencies. This can help with debugging and monitoring the project's execution.",Added SLF4J logging with logback for structured logging and improved test setup with minimal client-server setup methods in tests.
"diff --git a/truffle/src/com.oracle.truffle.tools.profiler/src/com/oracle/truffle/tools/profiler/CPUSampler.java b/truffle/src/com.oracle.truffle.tools.profiler/src/com/oracle/truffle/tools/profiler/CPUSampler.java
index 9ba02d02714..b5880d09afd 100644
--- a/truffle/src/com.oracle.truffle.tools.profiler/src/com/oracle/truffle/tools/profiler/CPUSampler.java
+++ b/truffle/src/com.oracle.truffle.tools.profiler/src/com/oracle/truffle/tools/profiler/CPUSampler.java
@@ -114,22 +114,6 @@ public final class CPUSampler implements Closeable {
             return selfInterpretedHitCount;
         }
 
-        /**
-         * @return When was the element first found on the stack
-         * @since 0.29
-         */
-        public long getFirstHitTime() {
-            return firstHitTime;
-        }
-
-        /**
-         * @return When was the element last found on the stack
-         * @since 0.29
-         */
-        public long getLastHitTime() {
-            return lastHitTime;
-        }
-
        ",Removed unused API .,"""Remove getFirstHitTime and getLastHitTime methods from CPUSampler""",Remove getFirstHitTime and getLastHitTime methods.,"""Remove getFirstHitTime() and getLastHitTime() methods from CPUSampler.java""

This commit message describes the change made in the code, which is the removal of two methods: getFirstHitTime() and getLastHitTime() from the CPUSampler.java file. These methods were previously used to return the first and last time an element was found on the stack, respectively. However, in the updated version of the code, these methods have been removed.",Removed getFirstHitTime() and getLastHitTime() methods from CPUSampler class.
"diff --git a/commons/src/main/java/com/orientechnologies/common/profiler/OAbstractProfiler.java b/commons/src/main/java/com/orientechnologies/common/profiler/OAbstractProfiler.java
index f4ae66ab08..75a97f80ca 100644
--- a/commons/src/main/java/com/orientechnologies/common/profiler/OAbstractProfiler.java
+++ b/commons/src/main/java/com/orientechnologies/common/profiler/OAbstractProfiler.java
@@ -179,6 +179,7 @@ public abstract class OAbstractProfiler extends OSharedResourceAbstract implemen
       hooks.remove(iName);
   }
 
+  @Override
   public String getSystemMetric(final String iMetricName) {
     final StringBuilder buffer = new StringBuilder();
     buffer.append(""system."");
@@ -186,6 +187,7 @@ public abstract class OAbstractProfiler extends OSharedResourceAbstract implemen
     return buffer.toString();
   }
 
+  @Override
   public String getProcessMetric(final String iMetricName) {
     final StringBuilder buffer = new StringBuilder();
     buffer.append(""process."");
@@ -193,6 +195,7 @@ public abstract class OAbstractProfiler extends OSharedResourceAbstract implemen
     return buffer.toString();
   }
 
+  @Override
   public String getDatabaseMetric(final String iDatabaseName, final String iMetricName) {
     final StringBuilder buffer = new StringBuilder();
     buffer.append(""db."");
diff --git a/commons/src/main/java/com/orientechnologies/common/profiler/OProfilerMBean.java b/commons/src/main/java/com/orientechnologies/common/profiler/OProfilerMBean.java
index 9657374440..4c0b43fe2c 100644
--- a/commons/src/main/java/com/orientechnologies/common/profiler/OProfilerMBean.java
+++ b/commons/src/main/java/com/orientechnologies/common/profiler/OProfilerMBean.java
@@ -76,6 +76,8 @@ public interface OProfilerMBean extends OService {
   public void registerHookValue(final String iName, final String iDescription, final METRIC_TYPE iType,
       final OProfilerHookValue iHookValue, final String iMetadataName);
 
+  public String getSystemMetric(String iMetricName);
+
   public String getProcessMetric(String iName);
 
   public String getDatabaseMetric(String databaseName, String iName);",added getSystemMetric ( ),"""Added missing override annotations and implemented getSystemMetric, getProcessMetric, and getDatabaseMetric methods in OAbstractProfiler and OProfilerMBean""","""Added system, process, and database metric retrieval methods to OAbstractProfiler and OProfilerMBean interfaces.""","Add @Override annotation to OAbstractProfiler methods and add new method getSystemMetric to OProfilerMBean interface.

Explanation:
The provided code snippets show that the `@Override` annotation has been added to the following methods in the `OAbstractProfiler` class:

* `getSystemMetric(final String iMetricName)`
* `getProcessMetric(final String iMetricName)`
* `getDatabaseMetric(final String iDatabaseName, final String iMetricName)`

Additionally, a new method `getSystemMetric(String iMetricName)` has been added to the `OProfilerMBean` interface.

Therefore, the commit message should reflect these changes. The suggested commit message is: ""Add @Override annotation to OAbstractProfiler methods and add new method getSystemMetric to OProfilerMBean interface.""",Added @Override annotations and implemented getSystemMetric in OAbstractProfiler; updated OProfilerMBean with getSystemMetric method.
"diff --git a/metrics-jersey/pom.xml b/metrics-jersey/pom.xml
new file mode 100644
index 00000000..405f51e3
--- /dev/null
+++ b/metrics-jersey/pom.xml
@@ -0,0 +1,38 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>com.yammer.metrics</groupId>
+        <artifactId>metrics-parent</artifactId>
+        <version>2.0.0-BETA19-SNAPSHOT</version>
+    </parent>
+
+    <groupId>com.yammer.metrics</groupId>
+    <artifactId>metrics-jersey</artifactId>
+    <name>Metrics Jersey Support</name>
+    <description>
+        A set of class providing Metrics integration for Jersey, the reference JAX-
+        implementation.
+    </description>
+
+    <dependencies>
+        <dependency>
+            <groupId>com.yammer.metrics</groupId>
+            <artifactId>metrics-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>com.yammer.metrics</groupId>
+            <artifactId>metrics-annotation</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.jersey</groupId>
+            <artifactId>jersey-server</artifactId>
+            <version>1.11</version>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/metrics-jersey/src/main/java/com/yammer/metrics/jersey/InstrumentedResourceMethodDispatchProvider.java b/metrics-jersey/src/main/java/com/yammer/metrics/jersey/InstrumentedResourceMethodDispatchProvider.java
new file mode 100644
index 00000000..da059c19
--- /dev/null
+++ b/metrics-jersey/src/main/java/com/yammer/metrics/jersey/InstrumentedResourceMethodDispatchProvider.java
@@ -0,0 +1,130 @@
+package com.yammer.metrics.jersey;
+
+import com.sun.jersey.api.core.HttpContext;
+import com.sun.jersey.api.model.AbstractResourceMethod;
+import com.sun.jersey.server.impl.model.method.dispatch.EntityParamDispatchProvider;
+import com.sun.jersey.spi.container.JavaMethodInvoker;
+import com.sun.jersey.spi.dispatch.RequestDispatcher;
+import com.yammer.metrics.Metrics;
+import com.yammer.metrics.annotation.ExceptionMetered;
+import com.yammer.metrics.annotation.Metered;
+import com.yammer.metrics.annotation.Timed;
+import com.yammer.metrics.core.MeterMetric;
+import com.yammer.metrics.core.TimerContext;
+import com.yammer.metrics.core.TimerMetric;
+import sun.misc.Unsafe;
+
+import javax.ws.rs.ext.Provider;
+import java.util.concurrent.TimeUnit;
+
+@Provider
+public class InstrumentedResourceMethodDispatchProvider extends EntityParamDispatchProvider {
+    private static class TimedRequestDispatcher implements RequestDispatcher {
+        private final RequestDispatcher underlying;
+        private final TimerMetric timer;
+
+        private TimedRequestDispatcher(RequestDispatcher underlying, TimerMetric timer) {
+            this.underlying = underlying;
+            this.timer = timer;
+        }
+
+        @Override
+        public void dispatch(Object resource, HttpContext httpContext) {
+            final TimerContext context = timer.time();
+            try {
+                underlying.dispatch(resource, httpContext);
+            } finally {
+                context.stop();
+            }
+        }
+    }
+
+    private static class MeteredRequestDispatcher implements RequestDispatcher {
+        private final RequestDispatcher underlying;
+        private final MeterMetric meter;
+
+        private MeteredRequestDispatcher(RequestDispatcher underlying, MeterMetric meter) {
+            this.underlying = underlying;
+            this.meter = meter;
+        }
+
+        @Override
+        public void dispatch(Object resource, HttpContext httpContext) {
+            meter.mark();
+            underlying.dispatch(resource, httpContext);
+        }
+    }
+
+    private static class ExceptionMeteredRequestDispatcher implements RequestDispatcher {
+        private final RequestDispatcher underlying;
+        private final MeterMetric meter;
+        private final Class<? extends Throwable> exceptionClass;
+
+        private ExceptionMeteredRequestDispatcher(RequestDispatcher underlying,
+                                                  MeterMetric meter,
+                                                  Class<? extends Throwable> exceptionClass) {
+            this.underlying = underlying;
+            this.meter = meter;
+            this.exceptionClass = exceptionClass;
+        }
+
+        @Override
+        public void dispatch(Object resource, HttpContext httpContext) {
+            try {
+                underlying.dispatch(resource, httpContext);
+            } catch (Throwable e) {
+                if (exceptionClass.isAssignableFrom(e.getClass())) {
+                    meter.mark();
+                }
+                Unsafe.getUnsafe().throwException(e);
+            }
+        }
+    }
+
+
+    @Override
+    public RequestDispatcher create(AbstractResourceMethod method, JavaMethodInvoker invoker) {
+        RequestDispatcher dispatcher = super.create(method, invoker);
+        if (dispatcher == null) {
+            return null;
+        }
+
+        if (method.getMethod().isAnnotationPresent(Timed.class)) {
+            final Timed annotation = method.getMethod().getAnnotation(Timed.class);
+            final TimerMetric timer = Metrics.newTimer(method.getDeclaringResource().getResourceClass(),
+                                                       annotation.name() == null ?
+                                                               method.getMethod().getName() : annotation.name(),
+                                                       annotation.durationUnit() == null ?
+                                                               TimeUnit.MILLISECONDS : annotation.durationUnit(),
+                                                       annotation.rateUnit() == null ?
+                                                               TimeUnit.SECONDS : annotation.rateUnit());
+            dispatcher = new TimedRequestDispatcher(dispatcher, timer);
+        }
+
+        if (method.getMethod().isAnnotationPresent(Metered.class)) {
+            final Metered annotation = method.getMethod().getAnnotation(Metered.class);
+            final MeterMetric meter = Metrics.newMeter(method.getDeclaringResource().getResourceClass(),
+                                                       annotation.name() == null ?
+                                                               method.getMethod().getName() : annotation.name(),
+                                               ",Added metrics - jersey .,"""Added Jersey support for Metrics, including instrumentation for resource methods""","Added Metrics Jersey Support with Instrumented Resource Method Dispatch Provider

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of Metrics Jersey Support and the Instrumented Resource Method Dispatch Provider, which is the main functionality added in this commit.","This commit appears to add a new module to the Metrics project, specifically for integrating with Jersey, the reference JAX-RS implementation. The module includes a POM file for building with Maven, and a Java class, `InstrumentedResourceMethodDispatchProvider`, which provides instrumented dispatchers for Jersey resource methods.

 The `InstrumentedResourceMethodDispatchProvider` class extends Jersey's `EntityParamDispatchProvider` and overrides its `create` method to return instrumented dispatchers for resource methods annotated with Metrics annotations (`@Timed`, `@Metered`, and `@ExceptionMetered`). The instrumented dispatchers record metrics for the execution of the resource methods, such as timing information and exception counts.

 Here's a possible commit message for this change:

 > Add Jersey support module
 >
 > This commit adds a new module to the Metrics project for integrating with Jersey, the reference JAX-RS implementation. The module includes a POM file for building with Maven, and a Java class, `InstrumentedResourceMethodDispatchProvider`, which provides instrumented dispatchers for Jersey resource methods annotated with Metrics annotations (`@Timed`, `@Metered`, and `@ExceptionMetered`). The instrumented dispatchers record metrics for the execution of the resource methods, such as timing information and exception counts.","Added `metrics-jersey` module for integrating Metrics with Jersey, including Timed, Metered, and ExceptionMetered annotations support."
"diff --git a/jaxp/.hgtags b/jaxp/.hgtags
index 69ba311a2e4..5fc2d696213 100644
--- a/jaxp/.hgtags
+++ b/jaxp/.hgtags
@@ -324,3 +324,4 @@ be357705874c4ba1a69c38fb211e5e31e35bf9cb jdk9-b77
 cf809edc840ff7546677d38b13ebd8b3cae2bbda jdk9-b79
 f464f9b2fb1178f6a957e5730b4b5252c6149ed9 jdk9-b80
 6a418934997fc4b56664b88f8417e2f0fe658091 jdk9-b81
+53fe3c103b6fdf48e2b2676c0c4818ef5a10fa21 jdk9-b82",Added tag jdk9 - b82 for changeset acf15a2d7492,"""Added tag for jdk9-b82""","""Update .hgtags to include JDK 9 b82""","Based on the diff you provided, it seems like you're looking for the commit message associated with the commit hash `53fe3c103b6fdf48e2b2676c0c4818ef5a10fa21`. However, the diff you provided doesn't contain any commit messages, it only shows changes in the `.hgtags` file in the `jaxp` directory.

To get the commit message for a specific commit, you would typically use a command like `git show <commit-hash>` in the terminal, replacing `<commit-hash>` with the actual hash of the commit. In your case, that would be `git show 53fe3c103b6fdf48e2b2676c0c4818ef5a10fa21`.

Please run this command in your local git repository to get the commit message. If you need further assistance, feel free to ask!",Added a new tag `jdk9-b82` with the identifier 53fe3c103b6fdf48e2b2676c0c4818ef5a10fa21 to the .hgtags file.
"diff --git a/Android/DevSample/buildSrc/src/main/groovy/net/wequick/gradle/aapt/AssetEditor.groovy b/Android/DevSample/buildSrc/src/main/groovy/net/wequick/gradle/aapt/AssetEditor.groovy
index c50c774..616b02b 100644
--- a/Android/DevSample/buildSrc/src/main/groovy/net/wequick/gradle/aapt/AssetEditor.groovy
+++ b/Android/DevSample/buildSrc/src/main/groovy/net/wequick/gradle/aapt/AssetEditor.groovy
@@ -115,7 +115,6 @@ public class AssetEditor extends CppHexEditor {
         s.styles = [] // {name, firstChar, lastChar}
         s.stringsSize = 0
         s.stringLens = []
-        s.styleLens = []
         s.isUtf8 = (s.flags & ResStringFlag.UTF8_FLAG) != 0
 
         // Read offsets
@@ -455,6 +454,10 @@ public class AssetEditor extends CppHexEditor {
             sp.styles = styles
             sp.styleOffsets = styleOffsets
             styleSizeDiff = sp.styleSize - styleOffset
+            if (styleCount == 0) {
+                styleSizeDiff += ResStringPoolSpan.END_SPAN.size()
+            }
+            sp.styleSize = styleOffset
         }
 
         entryDiff += sp.stringCount - stringCount
@@ -480,9 +483,12 @@ public class AssetEditor extends CppHexEditor {
         sp.stringPadding = newStringPadding
 
         // Adjust styles start position
+        d += styleSizeDiff
    ",Fix the stripping of span strings,"""Fix AssetEditor style size calculation and padding adjustment""","""Fixed style size calculation in AssetEditor""

This commit message is concise and accurately describes the change made in the code. It does not go into too much detail, but provides enough information for someone reviewing the commit to understand the purpose of the change.","""Add styleSizeDiff adjustment and handle case where styleCount is 0 in AssetEditor.groovy""

Explanation:
The commit includes the following changes:

1. An if-condition is added to check if styleCount is equal to 0. If it is, then styleSizeDiff is incremented by the size of ResStringPoolSpan.END\_SPAN. Additionally, sp.styleSize is set to styleOffset.
2. The variable d is incremented by styleSizeDiff.

These changes involve adjusting the size and position of styles in the AssetEditor class, as well as handling a special case where there are no styles present.","""Fix AssetEditor style size calculation and adjust styles start position properly."""
"diff --git a/searchcore/src/tests/proton/matching/same_element_builder/same_element_builder_test.cpp b/searchcore/src/tests/proton/matching/same_element_builder/same_element_builder_test.cpp
index 0fc84e26bba..6583f3bc00b 100644
--- a/searchcore/src/tests/proton/matching/same_element_builder/same_element_builder_test.cpp
+++ b/searchcore/src/tests/proton/matching/same_element_builder/same_element_builder_test.cpp
@@ -90,7 +90,7 @@ struct BuilderFixture {
     FakeRequestContext req_ctx;
     FakeSearchContext  ctx;
     SameElementBuilder builder;
-    BuilderFixture() : req_ctx(), ctx(), builder(req_ctx, ctx) {
+    BuilderFixture() : req_ctx(), ctx(), builder(req_ctx, ctx, false) {
         ctx.attr().tag(""attr"");
         ctx.addIdx(0).idx(0).getFake().tag(""idx"");
     }
diff --git a/searchcore/src/vespa/searchcore/proton/matching/blueprintbuilder.cpp b/searchcore/src/vespa/searchcore/proton/matching/blueprintbuilder.cpp
index 656e49d7569..380aeb82ad2 100644
--- a/searchcore/src/vespa/searchcore/proton/matching/blueprintbuilder.cpp
+++ b/searchcore/src/vespa/searchcore/proton/matching/blueprintbuilder.cpp
@@ -102,7 +102,7 @@ private:
     }
 
     void buildSameElement(ProtonSameElement &n) {
-        SameElementBuilder builder(_requestContext, _context);
+        SameElementBuilder builder(_requestContext, _context, n.is_expensive());
         for (search::query::Node *node : n.getChildren()) {
             builder.add_child(*node);
         }
diff --git a/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.cpp b/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.cpp
index 16c86e8a4f5..8e012c52b5f 100644
--- a/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.cpp
+++ b/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.cpp
@@ -71,10 +71,10 @@ public:
 
 } // namespace proton::matching::<unnamed>
 
-SameElementBuilder::SameElementBuilder(const search::queryeval::IRequestContext &requestContext, ISearchContext &context)
+SameElementBuilder::SameElementBuilder(const search::queryeval::IRequestContext &requestContext, ISearchContext &context, bool expensive)
     : _requestContext(requestContext),
       _context(context),
-      _result(std::make_unique<SameElementBlueprint>())
+      _result(std::make_unique<SameElementBlueprint>(expensive))
 {
 }
 
diff --git a/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.h b/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.h
index 945bb9a97f6..b9cfff8a9c0 100644
--- a/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.h
+++ b/searchcore/src/vespa/searchcore/proton/matching/same_element_builder.h
@@ -16,7 +16,7 @@ private:
     ISearchContext                                          &_context;
     std::unique_ptr<search::queryeval::SameElementBlueprint> _result;
 public:
-    SameElementBuilder(const search::queryeval::IRequestContext &requestContext, ISearchContext &context);
+    SameElementBuilder(const search::queryeval::IRequestContext &requestContext, ISearchContext &context, bool expensive);
     void add_child(search::query::Node &node);
     search::queryeval::Blueprint::UP build();
 };
diff --git a/searchlib/src/tests/queryeval/same_element/same_element_test.cpp b/searchlib/src/tests/queryeval/same_element/same_element_test.cpp
index 45ebdd78fb3..6ec379140c0 100644
--- a/searchlib/src/tests/queryeval/same_element/same_element_test.cpp
+++ b/searchlib/src/tests/queryeval/same_element/same_element_test.cpp
@@ -15,7 +15,7 @@ using namespace search::queryeval;
 using search::attribute::ElementIterator;
 
 std::unique_ptr<SameElementBlueprint> make_blueprint(const std::vector<FakeResult> &children, bool fake_attr = false) {
-    auto result = std::make_unique<SameElementBlueprint>();
+    auto result = std::make_unique<SameElementBlueprint>(false);
     for (size_t i = 0; i < children.size(); ++i) {
         uint32_t field_id = i;
         vespalib::string field_name = vespalib::make_string(""f%u"", field_id);
diff --git a/searchlib/src/tests/queryeval/simple_phrase/simple_phrase_test.cpp b/searchlib/src/tests/queryeval/simple_phrase/simple_phrase_test.cpp
index aad448f7fe1..f5ce8a9608b 100644
--- a/searchlib/src/tests/queryeval/simple_phrase/simple_phrase_test.cpp
+++ b/searchlib/src/tests/queryeval/simple_phrase/simple_phrase_test.cpp
@@ -173,7 +173,7 @@ PhraseSearchTest::PhraseSearchTest(bool expiredDoom)
     : _requestContext(nullptr, expiredDoom ? 0 : std::numeric_limits<int64_t>::max()),
       _index(),
       _phrase_fs(field, fieldId, phrase_handle),
-      _phrase(_phrase_fs, _requestContext),
+      _phrase(_phrase_fs, _requestContext, false),
       _children(),
       _md(MatchData::makeTestInstance(100, 10)),
       _order(),
@@ -301,7 +301,7 @@ Test::requireThatBlueprintExposesFieldWithEstimate()
 {
     FakeRequestContext requestContext;
     FieldSpec f(""foo"", 1, 1);
-    SimplePhraseBlueprint phrase(f, requestContext);
+    SimplePhraseBlueprint phrase(f, requestContext, false);
     ASSERT_TRUE(phrase.getState().numFields() == 1);
     EXPECT_EQUAL(f.getFieldId(), phrase.getState().field(0).getFieldId());
     EXPECT_EQUAL(f.getHandle(), phrase.getState().field(0).getHandle());
@@ -327,7 +327,7 @@ Test::requireThatBlueprintForcesPositionDataOnChildren()
 {
     FakeRequestContext requestContext;
     FieldSpec f(""foo"", 1, 1, true);
-    SimplePhraseBlueprint phrase(f, requestContext);
+    SimplePhraseBlueprint phrase(f, requestContext, false);
     EXPECT_TRUE(f.isFilter());
     EXPECT_TRUE(!phrase.getNextChildField(f).isFilter());
 }
diff --git a/searchlib/src/vespa/searchlib/query/tree/intermediatenodes.h b/searchlib/src/vespa/searchlib/query/tree/intermediatenodes.h
index 6d643d951f0..3bca4f041b3 100644
--- a/searchlib/src/vespa/searchlib/query/tree/intermediatenodes.h
+++ b/searchlib/src/vespa/searchlib/query/tree/intermediatenodes.h
@@ -99,17 +99,30 @@ class ONear : public QueryNodeMixin<ONear, Intermediate>
 class Phrase : public QueryNodeMixin<Phrase, Intermediate>, public Term {
 public:
     Phrase(const vespalib::string &view, int32_t id, Weight weight)
-        : Term(view, id, weight) {}
+        : Term(view, id, weight), _expensive(false) {}
     virtual ~Phrase() = 0;
+    Phrase &set_expensive(bool value) {
+        _expensive = value;
+        return *this;
+    }
+    bool is_expensive() const { return _expensive; }
+private:
+    bool _expensive;
 };
 
 class SameElement : public QueryNodeMixin<SameElement, Intermediate> {
 public:
-    SameElement(const vespalib::string &view) : _view(view) {}
+    SameElement(const vespalib::string &view) : _view(view), _expensive(false) {}
     virtual ~SameElement() = 0;
     const vespalib::string & getView() const { return _view; }
+    SameElement &set_expensive(bool value) {
+        _expensive = value;
+        return *this;
+    }
+    bool is_expensive() const { return _expensive; }
 private:
     vespalib::string _view;
+    bool _expensive;
 };
 
 class WeightedSetTerm : public QueryNodeMixin<WeightedSetTerm, Intermediate>, public Term {
diff --git a/searchlib/src/vespa/searchlib/query/tree/queryreplicator.h b/searchlib/src/vespa/searchlib/query/tree/queryreplicator.h
index 7bf6c17f136..e7c3fd8c73b 100644
--- a/searchlib/src/vespa/searchlib/query/tree/queryreplicator.h
+++ b/searchlib/src/vespa/searchlib/query/tree/queryreplicator.h
@@ -70,12 +70,12 @@ private:
 
     void visit(Phrase &node) override {
         replicate(node, _builder.addPhrase(node.getChildren().size(), node.getView(),
-                                           node.getId(), node.getWeight()));
+                                           node.getId(), node.getWeight()).set_expensive(node.is_expensive()));
         visitNodes(node.getChildren());
     }
 
     void visit(SameElement &node) override {
-        _builder.addSameElement(node.getChildren().size(), node.getView());
+        _builder.addSameElement(node.getChildren().size(), node.getView()).set_expensive(node.is_expensive());
         visitNodes(node.getChildren());
     }
 
@@ -107,8 +107,7 @@ private:
     }
 
     void replicate(const Term &original, Term &replica) {
-        replica.setTermIndex(original.getTermIndex());
-        replica.setRanked(original.isRanked());
+        replica.setStateFrom(original);
     }
 
     void visit(NumberTerm &node) override {
diff --git a/searchlib/src/vespa/searchlib/queryeval/create_blueprint_visitor_helper.cpp b/searchlib/src/vespa/searchlib/queryeval/create_blueprint_visitor_helper.cpp
index e3588d88ccb..3731b2ff6a8 100644
--- a/searchlib/src/vespa/searchlib/queryeval/create_blueprint_visitor_helper.cpp
+++ b/searchlib/src/vespa/searchlib/queryeval/create_blueprint_visitor_helper.cpp
@@ -31,7 +31,7 @@ CreateBlueprintVisitorHelper::getResult()
 
 void
 CreateBlueprintVisitorHelper::visitPhrase(query::Phrase &n) {
-    auto phrase = std::make_unique<SimplePhraseBlueprint>(_field, _requestContext);
+    auto phrase = std::make_unique<SimplePhraseBlueprint>(_field, _requestContext, n.is_expensive());
     for (const query::Node * child : n.getChildren()) {
         FieldSpecList fields;
         fields.add(phrase->getNextChildField(_field));
diff --git a/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.cpp b/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.cpp
index fa9cc82975f..2376b129fc1 100644
--- a/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.cpp
+++ b/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.cpp
@@ -10,12 +10,15 @@
 
 namespace search::queryeval {
 
-SameElementBlueprint::SameElementBlueprint()
+SameElementBlueprint::SameElementBlueprint(bool expensive)
     : ComplexLeafBlueprint(FieldSpecBaseList()),
       _estimate(),
       _layout(),
       _terms()
 {
+    if (expensive) {
+        set_cost_tier(State::COST_TIER_EXPENSIVE);
+    }
 }
 
 SameElementBlueprint::~SameElementBlueprint() = default;
diff --git a/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.h b/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.h
index decb518a7c9..3b29e518aa1 100644
--- a/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.h
+++ b/searchlib/src/vespa/searchlib/queryeval/same_element_blueprint.h
@@ -17,7 +17,7 @@ private:
     std::vector<Blueprint::UP> _terms;
 
 public:
-    SameElementBlueprint();
+    SameElementBlueprint(bool expensive);
     SameElementBlueprint(const SameElementBlueprint &) = delete;
     SameElementBlueprint &operator=(const SameElementBlueprint &) = delete;
     ~SameElementBlueprint();
diff --git a/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.cpp b/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.cpp
index ed7690f605f..7429553d889 100644
--- a/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.cpp
+++ b/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.cpp
@@ -9,7 +9,7 @@
 
 namespace search::queryeval {
 
-SimplePhraseBlueprint::SimplePhraseBlueprint(const FieldSpec &field, const IRequestContext & requestContext)
+SimplePhraseBlueprint::SimplePhraseBlueprint(const FieldSpec &field, const IRequestContext & requestContext, bool expensive)
     : ComplexLeafBlueprint(field),
       _doom(requestContext.getSoftDoom()),
       _field(field),
@@ -17,6 +17,9 @@ SimplePhraseBlueprint::SimplePhraseBlueprint(const FieldSpec &field, const IRequ
       _layout(),
       _terms()
 {
+    if (expensive) {
+        set_cost_tier(State::COST_TIER_EXPENSIVE);
+    }
 }
 
 SimplePhraseBlueprint::~SimplePhraseBlueprint()
diff --git a/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.h b/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.h
index 26668f85cb7..c313c0b38ad 100644
--- a/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.h
+++ b/searchlib/src/vespa/searchlib/queryeval/simple_phrase_blueprint.h
@@ -23,7 +23,7 @@ private:
     SimplePhraseBlueprint &operator=(const SimplePhraseBlueprint &); // disabled
 
 public:
-    SimplePhraseBlueprint(const FieldSpec &field, const IRequestContext & requestContext);
+    SimplePhraseBlueprint(const FieldSpec &field, const IRequestContext & requestContext, bool expensive);
     ~SimplePhraseBlueprint();
 
     // used by create visitor",add expensive flags to phrase / same element .,"""Added support for expensive queries in SameElement and SimplePhrase blueprints""","""Added expensive flag to SameElementBuilder and related classes""","The commit message could be: ""Add expensive flag to SameElementBuilder and SimplePhraseBlueprint constructors and set cost tier accordingly in SameElementBlueprint and SimplePhraseBlueprint""

Explanation:

* The commit adds a new boolean parameter `expensive` to the constructors of `SameElementBuilder` and `SimplePhraseBlueprint` classes.
* In `SameElementBuilder`, the `expensive` parameter is passed to the constructor of `SameElementBlueprint`.
* In `SimplePhraseBlueprint`, the `expensive` parameter is used to set the cost tier of the blueprint.
* The `SameElementBlueprint` class now has a new constructor that takes a boolean parameter `expensive`. If `expensive` is true, the cost tier of the blueprint is set to `State::COST_TIER_EXPENSIVE`.
* The `SimplePhraseBlueprint` class now has a new constructor that takes a boolean parameter `expensive`. If `expensive` is true, the cost tier of the blueprint is set to `State::COST_TIER_EXPENSIVE`.
* In `BlueprintBuilder`, the `buildSameElement` method now creates a `SameElementBuilder` with the `expensive` parameter set to the value of `n.is_expensive()`.
* In `queryreplicator.h`, the `visit` method for `SameElement` nodes now sets the `expensive` parameter of the replicated node to the value of `node.is_expensive()`.
* In `create_blueprint_visitor_helper.cpp`, the `visitPhrase` method now creates a `SimplePhraseBlueprint` with the `expensive` parameter set to the value of `n.is_expensive()`.
* In `same_element_test.cpp` and `simple_phrase_test.cpp`, the `make_blueprint` and `PhraseSearchTest` functions now create `SameElementBlueprint` and `SimplePhraseBlueprint` objects with the `expensive` parameter set to `false`.
* In `simple_phrase_test.cpp`, the `Test::requireThatBlueprintExposesFieldWithEstimate` and `Test::requireThatBlueprintForcesPositionDataOnChildren` methods now create `SimplePhraseBlueprint` objects with the `expensive` parameter set to `false`.

Overall, the commit adds a new `expensive` flag to `SameElementBuilder` and `SimplePhraseBlueprint` constructors, and uses this flag to set the cost tier of the blueprint accordingly. This allows for more fine-grained control over the cost tier of these blueprints, depending on whether they are expected to be expensive or not.",The commit introduces an 'expensive' flag to identify and handle costly query constructs like Phrase and SameElement in the search functionality.
"diff --git a/graal/com.oracle.graal.api.meta.test/src/com/oracle/graal/api/meta/test/TestResolvedJavaMethod.java b/graal/com.oracle.graal.api.meta.test/src/com/oracle/graal/api/meta/test/TestResolvedJavaMethod.java
index 537885902b1..2b4370188fa 100644
--- a/graal/com.oracle.graal.api.meta.test/src/com/oracle/graal/api/meta/test/TestResolvedJavaMethod.java
+++ b/graal/com.oracle.graal.api.meta.test/src/com/oracle/graal/api/meta/test/TestResolvedJavaMethod.java
@@ -127,6 +127,18 @@ public class TestResolvedJavaMethod extends MethodUniverse {
         }
     }
 
+    @Test
+    public void isSynchronizedTest() {
+        for (Map.Entry<Method, ResolvedJavaMethod> e : methods.entrySet()) {
+            ResolvedJavaMethod m = e.getValue();
+            assertEquals(Modifier.isSynchronized(e.getKey().getModifiers()), m.isSynchronized());
+        }
+        for (Map.Entry<Constructor<?>, ResolvedJavaMethod> e : constructors.entrySet()) {
+            ResolvedJavaMethod m = e.getValue();
+            assertEquals(Modifier.isSynchronized(e.getKey().getModifiers()), m.isSynchronized());
+        }
+    }
+
     @Test
     public void canBeStaticallyBoundTest() {
         for (Map.Entry<Method, ResolvedJavaMethod> e : methods.entrySet()) {
diff --git a/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/ResolvedJavaMethod.java b/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/ResolvedJavaMethod.java
index 77497796ca0..4f3fd34308d 100644
--- a/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/ResolvedJavaMethod.java
+++ b/graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/ResolvedJavaMethod.java
@@ -115,6 +115,8 @@ public interface ResolvedJavaMethod extends JavaMethod, InvokeTarget {
      */
     boolean canBeStaticallyBound();
 
+    boolean isSynchronized();
+
     /**
      * Returns the list of exception handlers for this method.
      */
diff --git a/graal/com.oracle.graal.baseline/src/com/oracle/graal/baseline/BaselineBytecodeParser.java b/graal/com.oracle.graal.baseline/src/com/oracle/graal/baseline/BaselineBytecodeParser.java
index ae85ab093eb..5c30f46a9c0 100644
--- a/graal/com.oracle.graal.baseline/src/com/oracle/graal/baseline/BaselineBytecodeParser.java
+++ b/graal/com.oracle.graal.baseline/src/com/oracle/graal/baseline/BaselineBytecodeParser.java
@@ -23,7 +23,6 @@
 package com.oracle.graal.baseline;
 
 import static com.oracle.graal.compiler.common.GraalOptions.*;
-import static java.lang.reflect.Modifier.*;
 
 import java.util.*;
 
@@ -106,7 +105,7 @@ public class BaselineBytecodeParser extends AbstractBytecodeParser<Value, LIRFra
                 }
             }
 
-            if (isSynchronized(method.getModifiers())) {
+            if (method.isSynchronized()) {
                 throw GraalInternalError.unimplemented(""Handle synchronized methods"");
             }
 
diff --git a/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotResolvedJavaMethod.java b/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotResolvedJavaMethod.java
index 4e338469873..44905496d3c 100644
--- a/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotResolvedJavaMethod.java
+++ b/graal/com.oracle.graal.hotspot/src/com/oracle/graal/hotspot/meta/HotSpotResolvedJavaMethod.java
@@ -487,6 +487,10 @@ public final class HotSpotResolvedJavaMethod extends HotSpotMethod implements Re
         return ((getModifiers() & mask) == Modifier.PUBLIC) && getDeclaringClass().isInterface();
     }
 
+    public boolean isSynchronized() {
+        return Modifier.isSynchronized(getModifiers());
+    }
+
     @Override
     public Type[] getGenericParameterTypes() {
         if (isConstructor()) {
diff --git a/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java b/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
index e833f16694f..c5e6bb02624 100644
--- a/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
+++ b/graal/com.oracle.graal.java/src/com/oracle/graal/java/GraphBuilderPhase.java
@@ -28,7 +28,6 @@ import static com.oracle.graal.bytecode.Bytecodes.*;
 import static com.oracle.graal.compiler.common.GraalOptions.*;
 import static java.lang.reflect.Modifier.*;
 
-import java.lang.reflect.*;
 import java.util.*;
 
 import com.oracle.graal.api.code.*;
@@ -220,7 +219,7 @@ public class GraphBuilderPhase extends BasePhase<HighTierContext> {
                     liveness = blockMap.liveness;
 
                     lastInstr = currentGraph.start();
-                    if (isSynchronized(method.getModifiers())) {
+                    if (method.isSynchronized()) {
                         // add a monitor enter to the start block
                         currentGraph.start().setStateAfter(frameState.create(BytecodeFrame.BEFORE_BCI));
                         methodSynchronizedObject = synchronizedObject(frameState, method);
@@ -290,7 +289,7 @@ public class GraphBuilderPhase extends BasePhase<HighTierContext> {
                     unwindBlock = new ExceptionDispatchBlock();
                     unwindBlock.startBci = -1;
                     unwindBlock.endBci = -1;
-                    unwindBlock.deoptBci = Modifier.isSynchronized(method.getModifiers()) ? BytecodeFrame.UNWIND_BCI : BytecodeFrame.AFTER_EXCEPTION_BCI;
+                    unwindBlock.deoptBci = method.isSynchronized() ? BytecodeFrame.UNWIND_BCI : BytecodeFrame.AFTER_EXCEPTION_BCI;
                     unwindBlock.setId(Integer.MAX_VALUE);
                 }
                 return unwindBlock;
@@ -1162,7 +1161,7 @@ public class GraphBuilderPhase extends BasePhase<HighTierContext> {
             }
 
             private void synchronizedEpilogue(int bci, ValueNode returnValue) {
-                if (Modifier.isSynchronized(method.getModifiers())) {
+                if (method.isSynchronized()) {
                     MonitorExitNode monitorExit = genMonitorExit(methodSynchronizedObject, returnValue);
                     if (returnValue != null) {
                         frameState.push(returnValue.getKind(), returnValue);",Add ResolvedJavaMethod . isSynchronized,"""Add isSynchronized method to ResolvedJavaMethod interface and implement it in HotSpotResolvedJavaMethod""","""Add isSynchronized() method to ResolvedJavaMethod and implement it in various classes""","""Add isSynchronized method to ResolvedJavaMethod and update tests""

This commit adds a new method `isSynchronized()` to the `ResolvedJavaMethod` interface in the Graal API for meta data. The method checks if a Java method is synchronized.

Additionally, the commit updates the `TestResolvedJavaMethod` class to include a new test `isSynchronizedTest()` that checks the accuracy of the `isSynchronized()` method. It also updates the `BaselineBytecodeParser` class and the `GraphBuilderPhase` class to use the new `isSynchronized()` method instead of the previous way of checking if a method is synchronized using the `Modifier.isSynchronized(method.getModifiers())` code.

Furthermore, the commit updates the `HotSpotResolvedJavaMethod` class to provide an implementation for the new `isSynchronized()` method.","""Add isSynchronized method to ResolvedJavaMethod and update relevant usages and tests."""

diff,label,llama-70b-output,llama3.1-8b-output,mistral-large-output,gpt-4o-output
"diff --git a/build.xml b/build.xml
index 55dde1aec..516ed7bc3 100644
--- a/build.xml
+++ b/build.xml
@@ -705,6 +705,12 @@
         </antcall>
     </target>
 
+    <target name=""run-v4"" description=""Starts SC with a preference for IPv4."">
+        <ant target=""run"">
+          <property name=""java.net.preferIPv6Addresses"" value=""false""/>
+        </ant>
+    </target>
+
     <!--PROFILE-SIP-COMMUNICATOR-IN-NETBEANS-IDE -->
     <target name=""profile"" depends=""bundle-plugin-profiler4j,deploy-os-specific-bundles""
         description=""Profile Project"">
@@ -812,7 +818,7 @@
         bundle-argdelegation,bundle-zrtp4j,
         bundle-filehistory,bundle-metahistory,bundle-metahistory-slick,
         bundle-facebook,bundle-plugin-facebookaccregwizz,
-		bundle-bouncycastle,bundle-plugin-otr""/>
+        bundle-bouncycastle,bundle-plugin-otr""/>
 
     <!--BUNDLE-SC-LAUNCHER-->
     <target name=""bundle-sc-launcher"">
@@ -1142,7 +1148,7 @@ javax.swing.event, javax.swing.border""/>
                 <include name=""protocol/jabber/**/*""/>
                 <include name=""protocol/msn/**/*""/>
                 <include name=""protocol/yahoo/**/*""/>
-            </zipfileset> 
+            </zipfileset>
         </jar>
     </target>
 
@@ -1467,7 +1473,7 @@ javax.swing.event, javax.swing.border""/>
              Wizard.-->
         <jar compress=""false"" destfile=""${bundles.dest}/facebookaccregwizz.jar""
                 manifest=""${src}/net/java/sip/communicator/plugin/facebookaccregwizz/facebookaccregwizz.manifest.mf"">
-            <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/facebookaccregwizz"" 
+            <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/facebookaccregwizz""
                     prefix=""net/java/sip/communicator/plugin/facebookaccregwizz"" />
         </jar>
     </target>
@@ -2032,16 +2038,16 @@ org.apache.http.util""/>
             <zipfileset src=""${lib.noinst}/zrtp4j-light.jar"" prefix=""""/>
             <manifest>
                 <attribute name=""Export-Package"" value=""
-                	gnu.java.zrtp,
-                	gnu.java.zrtp.packets,
-                	gnu.java.zrtp.utils,
-                	gnu.java.zrtp.zidfile""/>
-    	        <attribute name=""Import-Package"" value=""org.bouncycastle.crypto,
-    	        	org.bouncycastle.crypto.digests,
-    	        	org.bouncycastle.crypto.macs,
-    	        	org.bouncycastle.crypto.params,
-    	        	org.bouncycastle.crypto.engines,
-    	        	org.bouncycastle.crypto.modes""/>
+                    gnu.java.zrtp,
+                    gnu.java.zrtp.packets,
+                    gnu.java.zrtp.utils,
+                    gnu.java.zrtp.zidfile""/>
+                <attribute name=""Import-Package"" value=""org.bouncycastle.crypto,
+                    org.bouncycastle.crypto.digests,
+                    org.bouncycastle.crypto.macs,
+                    org.bouncycastle.crypto.params,
+                    org.bouncycastle.crypto.engines,
+                    org.bouncycastle.crypto.modes""/>
                 <attribute name=""Bundle-Name"" value=""ZRTP4J""/>
                 <attribute name=""Bundle-Description"" value=""ZRTP for Java library.""/>
                 <attribute name=""Bundle-Version"" value=""1.4.5""/>
@@ -2072,33 +2078,33 @@ org.apache.http.util""/>
                 prefix=""net/java/sip/communicator/impl/metahistory"" />
         </jar>
     </target>
-	<!--BUNDLE-BOUNCYCASTLE -->
+    <!--BUNDLE-BOUNCYCASTLE -->
     <target name=""bundle-bouncycastle"">
-    	<jar compress=""true"" destfile=""${bundles.dest}/bouncycastle.jar"">
-    		<zipfileset src=""${lib.noinst}/lcrypto-jdk16-143.jar""/>
-    		<manifest>
-    		    <attribute name=""Export-Package"" value=""org.bouncycastle.crypto,
-    	        	org.bouncycastle.crypto.digests,
-    	        	org.bouncycastle.crypto.macs,
-    	        	org.bouncycastle.crypto.params,
-    	        	org.bouncycastle.crypto.engines,
-    	        	org.bouncycastle.crypto.modes,
-    		    	org.bouncycastle.crypto.generators,
-    		    	org.bouncycastle.crypto.signers,
-    		    	org.bouncycastle.util.encoders,
-    		    	org.bouncycastle.util""/>
-    		    <attribute name=""Bundle-Name"" value=""BouncyCastle""/>
-    		    <attribute name=""Bundle-Version"" value=""1.4.3.1""/>
-    		    <attribute name=""System-Bundle"" value=""yes""/>
+        <jar compress=""true"" destfile=""${bundles.dest}/bouncycastle.jar"">
+            <zipfileset src=""${lib.noinst}/lcrypto-jdk16-143.jar""/>
+            <manifest>
+                <attribute name=""Export-Package"" value=""org.bouncycastle.crypto,
+                    org.bouncycastle.crypto.digests,
+                    org.bouncycastle.crypto.macs,
+                    org.bouncycastle.crypto.params,
+                    org.bouncycastle.crypto.engines,
+                    org.bouncycastle.crypto.modes,
+                    org.bouncycastle.crypto.generators,
+                    org.bouncycastle.crypto.signers,
+                    org.bouncycastle.util.encoders,
+                    org.bouncycastle.util""/>
+                <attribute name=""Bundle-Name"" value=""BouncyCastle""/>
+                <attribute name=""Bundle-Version"" value=""1.4.3.1""/>
+                <attribute name=""System-Bundle"" value=""yes""/>
             </manifest>
-    	</jar>
+        </jar>
     </target>
-	<!--BUNDLE-PLUGIN-OTR -->
+    <!--BUNDLE-PLUGIN-OTR -->
     <target name=""bundle-plugin-otr"">
         <jar compress=""false"" destfile=""${bundles.dest}/otr.jar"" manifest=""${src}/net/java/sip/communicator/plugin/otr/otr.manifest.mf"">
             <zipfileset dir=""${dest}/net/java/sip/communicator/plugin/otr""
                 prefix=""net/java/sip/communicator/plugin/otr""/>
-        	<zipfileset src=""${lib.noinst}/otr4j.jar""/>
+            <zipfileset src=""${lib.noinst}/otr4j.jar""/>
         </jar>
     </target>
     <!--BUNDLE-METAHISTORY-SLICK-->",adds a utility target ( run - v4 ) for running SC with a preference for IPv4 rather than the default IPv6,"""Added IPv4 preference target and fixed formatting in build.xml""","The commit message should be:

""Added IPv4 preference and updated BouncyCastle and OTR bundles""

However, a more descriptive and conventional commit message would be:

""Added IPv4 preference and updated BouncyCastle and OTR bundles for improved compatibility and functionality""

This commit message clearly describes the changes made in the commit, making it easier for others to understand the purpose and impact of the changes.","The commit message could be:

""Added new target 'run-v4' to start SIP Communicator with a preference for IPv4. Also, fixed some indentation issues and added missing spaces in the build.xml file.""","```plaintext
Added run-v4 target to build.xml and corrected indentation and whitespace issues.
```"
"diff --git a/vm/benchmarks/agentscript/sieve-filter1.js b/vm/benchmarks/agentscript/sieve-filter1.js
index 168e65a0fc9..6aec8202ff9 100644
--- a/vm/benchmarks/agentscript/sieve-filter1.js
+++ b/vm/benchmarks/agentscript/sieve-filter1.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 /* global agent */
 
 var sum = 0;
diff --git a/vm/benchmarks/agentscript/sieve-filter2.js b/vm/benchmarks/agentscript/sieve-filter2.js
index 1a40cfcbf5a..62112543e95 100644
--- a/vm/benchmarks/agentscript/sieve-filter2.js
+++ b/vm/benchmarks/agentscript/sieve-filter2.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 /* global agent */
 
 var sum = 0;
diff --git a/vm/benchmarks/agentscript/sieve.js b/vm/benchmarks/agentscript/sieve.js
index 57646999de7..d38366ce811 100644
--- a/vm/benchmarks/agentscript/sieve.js
+++ b/vm/benchmarks/agentscript/sieve.js
@@ -1,3 +1,28 @@
+/*
+ * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
 function Natural() {
     this.x = 2;
 };",Add copyright headers .,"""Add copyright notice to AgentScript benchmarks""","The commit message should be:

""Add copyright notices to sieve-filter1.js, sieve-filter2.js, and sieve.js""

However, a more concise and conventional commit message would be:

""Add copyright notices to sieve benchmarks""

This commit message clearly conveys the changes made in the commit, which is adding copyright notices to three files.","Added Oracle license header to AgentScript files sieve-filter1.js, sieve-filter2.js, and sieve.js

The provided diff shows that the Oracle license header has been added to the beginning of three JavaScript files: sieve-filter1.js, sieve-filter2.js, and sieve.js. The added header includes a copyright notice, information about the GNU General Public License version 2, and contact information for Oracle.","Added Oracle copyright and licensing notice to sieve-filter1.js, sieve-filter2.js, and sieve.js files."
"diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
new file mode 100644
index 000000000..b299b2fd7
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/AbstractRetryTask.java
@@ -0,0 +1,112 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.Constants;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.logger.Logger;
+import org.apache.dubbo.common.logger.LoggerFactory;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.common.timer.Timer;
+import org.apache.dubbo.common.timer.TimerTask;
+import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * AbstractRetryTask
+ */
+public abstract class AbstractRetryTask implements TimerTask {
+
+    protected final Logger logger = LoggerFactory.getLogger(getClass());
+
+    /**
+     * url for retry task
+     */
+    protected final URL url;
+
+    /**
+     * registry for this task
+     */
+    protected final FailbackRegistry registry;
+
+    /**
+     * retry period
+     */
+    protected final long retryPeriod;
+
+    /**
+     * task name for this task
+     */
+    protected final String taskName;
+
+    private volatile boolean cancel;
+
+    AbstractRetryTask(URL url, FailbackRegistry registry, String taskName) {
+        if (url == null || StringUtils.isBlank(taskName)) {
+            throw new IllegalArgumentException();
+        }
+        this.url = url;
+        this.registry = registry;
+        this.taskName = taskName;
+        cancel = false;
+        this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);
+    }
+
+    public void cancel() {
+        cancel = true;
+    }
+
+    public boolean isCancel() {
+        return cancel;
+    }
+
+    protected void reput(Timeout timeout, long tick) {
+        if (timeout == null) {
+            throw new IllegalArgumentException();
+        }
+
+        Timer timer = timeout.timer();
+        if (timer.isStop() || timeout.isCancelled() || isCancel()) {
+            return;
+        }
+
+        timer.newTimeout(timeout.task(), tick, TimeUnit.MILLISECONDS);
+    }
+
+    @Override
+    public void run(Timeout timeout) throws Exception {
+        if (timeout.isCancelled() || timeout.timer().isStop() || isCancel()) {
+            // other thread cancel this timeout or stop the timer.
+            return;
+        }
+        if (logger.isInfoEnabled()) {
+            logger.info(taskName + "" : "" + url);
+        }
+        try {
+            doRetry(url, registry, timeout);
+        } catch (Throwable t) { // Ignore all the exceptions and wait for the next retry
+            logger.warn(""Failed to execute task "" + taskName + "", url: "" + url + "", waiting for again, cause:"" + t.getMessage(), t);
+            // reput this task when catch exception.
+            reput(timeout, retryPeriod);
+        }
+    }
+
+    protected abstract void doRetry(URL url, FailbackRegistry registry, Timeout timeout);
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java
new file mode 100644
index 000000000..9ccb67301
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedNotifiedTask.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+/**
+ * FailedNotifiedTask
+ */
+public final class FailedNotifiedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry subscribe"";
+
+    private final NotifyListener listener;
+
+    private final List<URL> urls = new CopyOnWriteArrayList<>();
+
+    public FailedNotifiedTask(URL url, NotifyListener listener) {
+        super(url, null, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    public void addUrlToRetry(List<URL> urls) {
+        if (CollectionUtils.isEmpty(urls)) {
+            return;
+        }
+        this.urls.addAll(urls);
+    }
+
+    public void removeRetryUrl(List<URL> urls) {
+        this.urls.removeAll(urls);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        if (CollectionUtils.isNotEmpty(urls)) {
+            listener.notify(urls);
+            urls.clear();
+        }
+        reput(timeout, retryPeriod);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java
new file mode 100644
index 000000000..c4d9cc6f0
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedRegisteredTask.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedRegisteredTask
+ */
+public final class FailedRegisteredTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry register"";
+
+    public FailedRegisteredTask(URL url, FailbackRegistry registry) {
+        super(url, registry, NAME);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doRegister(url);
+        registry.removeFailedRegisteredTask(url);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java
new file mode 100644
index 000000000..06d1ec315
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedSubscribedTask.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedSubscribedTask
+ */
+public final class FailedSubscribedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry subscribe"";
+
+    private final NotifyListener listener;
+
+    public FailedSubscribedTask(URL url, FailbackRegistry registry, NotifyListener listener) {
+        super(url, registry, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doSubscribe(url, listener);
+        registry.removeFailedSubscribedTask(url, listener);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java
new file mode 100644
index 000000000..4cf3aa4eb
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnregisteredTask.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedUnregisteredTask
+ */
+public final class FailedUnregisteredTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry unregister"";
+
+    public FailedUnregisteredTask(URL url, FailbackRegistry registry) {
+        super(url, registry, NAME);
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.doUnregister(url);
+        registry.removeFailedUnregisteredTask(url);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
new file mode 100644
index 000000000..6814583df
--- /dev/null
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/retry/FailedUnsubscribedTask.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.registry.retry;
+
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.common.timer.Timeout;
+import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.support.FailbackRegistry;
+
+/**
+ * FailedUnsubscribedTask
+ */
+public final class FailedUnsubscribedTask extends AbstractRetryTask {
+
+    private static final String NAME = ""retry unsubscribe"";
+
+    private final NotifyListener listener;
+
+    public FailedUnsubscribedTask(URL url, FailbackRegistry registry, NotifyListener listener) {
+        super(url, registry, NAME);
+        if (listener == null) {
+            throw new IllegalArgumentException();
+        }
+        this.listener = listener;
+    }
+
+    @Override
+    protected void doRetry(URL url, FailbackRegistry registry, Timeout timeout) {
+        registry.unsubscribe(url, listener);
+        registry.removeFailedUnsubscribedTask(url, listener);
+    }
+}
diff --git a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
index 5c456d528..5d2d2f041 100644
--- a/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
+++ b/dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java
@@ -18,10 +18,14 @@ package org.apache.dubbo.registry.support;
 
 import org.apache.dubbo.common.Constants;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.utils.ConcurrentHashSet;
-import org.apache.dubbo.common.utils.ExecutorUtil;
+import org.apache.dubbo.common.timer.HashedWheelTimer;
 import org.apache.dubbo.common.utils.NamedThreadFactory;
 import org.apache.dubbo.registry.NotifyListener;
+import org.apache.dubbo.registry.retry.FailedNotifiedTask;
+import org.apache.dubbo.registry.retry.FailedRegisteredTask;
+import org.apache.dubbo.registry.retry.FailedSubscribedTask;
+import org.apache.dubbo.registry.retry.FailedUnregisteredTask;
+import org.apache.dubbo.registry.retry.FailedUnsubscribedTask;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -30,108 +34,197 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
 /**
  * FailbackRegistry. (SPI, Prototype, ThreadSafe)
- *
  */
 public abstract class FailbackRegistry extends AbstractRegistry {
 
-    // Scheduled executor service
-    private final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(""DubboRegistryFailedRetryTimer"", true));
-
-    // Timer for failure retry, regular check if there is a request for failure, and if there is, an unlimited retry
-    private final ScheduledFuture<?> retryFuture;
+    /*  retry task map */
 
-    private final Set<URL> failedRegistered = new ConcurrentHashSet<URL>();
+    private final ConcurrentMap<URL, FailedRegisteredTask> failedRegistered = new ConcurrentHashMap<URL, FailedRegisteredTask>();
 
-    private final Set<URL> failedUnregistered = new ConcurrentHashSet<URL>();
+    private final ConcurrentMap<URL, FailedUnregisteredTask> failedUnregistered = new ConcurrentHashMap<URL, FailedUnregisteredTask>();
 
-    private final ConcurrentMap<URL, Set<NotifyListener>> failedSubscribed = new ConcurrentHashMap<URL, Set<NotifyListener>>();
+    private final ConcurrentMap<Holder, FailedSubscribedTask> failedSubscribed = new ConcurrentHashMap<Holder, FailedSubscribedTask>();
 
-    private final ConcurrentMap<URL, Set<NotifyListener>> failedUnsubscribed = new ConcurrentHashMap<URL, Set<NotifyListener>>();
+    private final ConcurrentMap<Holder, FailedUnsubscribedTask> failedUnsubscribed = new ConcurrentHashMap<Holder, FailedUnsubscribedTask>();
 
-    private final ConcurrentMap<URL, Map<NotifyListener, List<URL>>> failedNotified = new ConcurrentHashMap<URL, Map<NotifyListener, List<URL>>>();
+    private final ConcurrentMap<Holder, FailedNotifiedTask> failedNotified = new ConcurrentHashMap<Holder, FailedNotifiedTask>();
 
     /**
      * The time in milliseconds the retryExecutor will wait
      */
     private final int retryPeriod;
 
+    // Timer for failure retry, regular check if there is a request for failure, and if there is, an unlimited retry
+    private final HashedWheelTimer retryTimer;
+
     public FailbackRegistry(URL url) {
         super(url);
         this.retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);
-        this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {
-            @Override
-            public void run() {
-                // Check and connect to the registry
-                try {
-                    retry();
-                } catch (Throwable t) { // Defensive fault tolerance
-                    logger.error(""Unexpected error occur at failed retry, cause: "" + t.getMessage(), t);
-                }
-            }
-        }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);
+
+        // since the retry task will not be very much. 128 ticks is enough.
+        retryTimer = new HashedWheelTimer(new NamedThreadFactory(""DubboRegistryRetryTimer"", true), retryPeriod, TimeUnit.MILLISECONDS, 128);
     }
 
-    public Future<?> getRetryFuture() {
-        return retryFuture;
+    public void removeFailedRegisteredTask(URL url) {
+        failedRegistered.remove(url);
     }
 
-    public Set<URL> getFailedRegistered() {
-        return failedRegistered;
+    public void removeFailedUnregisteredTask(URL url) {
+        failedUnregistered.remove(url);
     }
 
-    public Set<URL> getFailedUnregistered() {
-        return failedUnregistered;
+    public void removeFailedSubscribedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedSubscribed.remove(h);
     }
 
-    public Map<URL, Set<NotifyListener>> getFailedSubscribed() {
-        return failedSubscribed;
+    public void removeFailedUnsubscribedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedUnsubscribed.remove(h);
     }
 
-    public Map<URL, Set<NotifyListener>> getFailedUnsubscribed() {
-        return failedUnsubscribed;
+    public void removeFailedNotifiedTask(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        failedNotified.remove(h);
     }
 
-    public Map<URL, Map<NotifyListener, List<URL>>> getFailedNotified() {
-        return failedNotified;
+    private void addFailedRegistered(URL url) {
+        FailedRegisteredTask oldOne = failedRegistered.get(url);
+        if (oldOne != null) {
+            return;
+        }
+        FailedRegisteredTask newTask = new FailedRegisteredTask(url, this);
+        oldOne = failedRegistered.putIfAbsent(url, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedRegistered(URL url) {
+        FailedRegisteredTask f = failedRegistered.remove(url);
+        if (f != null) {
+            f.cancel();
+        }
+    }
+
+    private void addFailedUnregistered(URL url) {
+        FailedUnregisteredTask oldOne = failedUnregistered.get(url);
+        if (oldOne != null) {
+            return;
+        }
+        FailedUnregisteredTask newTask = new FailedUnregisteredTask(url, this);
+        oldOne = failedUnregistered.putIfAbsent(url, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedUnregistered(URL url) {
+        FailedUnregisteredTask f = failedUnregistered.remove(url);
+        if (f != null) {
+            f.cancel();
+        }
     }
 
     private void addFailedSubscribed(URL url, NotifyListener listener) {
-        Set<NotifyListener> listeners = failedSubscribed.get(url);
-        if (listeners == null) {
-            failedSubscribed.putIfAbsent(url, new ConcurrentHashSet<NotifyListener>());
-            listeners = failedSubscribed.get(url);
+        Holder h = new Holder(url, listener);
+        FailedSubscribedTask oldOne = failedSubscribed.get(h);
+        if (oldOne != null) {
+            return;
+        }
+        FailedSubscribedTask newTask = new FailedSubscribedTask(url, this, listener);
+        oldOne = failedSubscribed.putIfAbsent(h, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
         }
-        listeners.add(listener);
     }
 
     private void removeFailedSubscribed(URL url, NotifyListener listener) {
-        Set<NotifyListener> listeners = failedSubscribed.get(url);
-        if (listeners != null) {
-            listeners.remove(listener);
+        Holder h = new Holder(url, listener);
+        FailedSubscribedTask f = failedSubscribed.remove(h);
+        if (f != null) {
+            f.cancel();
+        }
+        removeFailedUnsubscribed(url, listener);
+        removeFailedNotified(url, listener);
+    }
+
+    private void addFailedUnsubscribed(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedUnsubscribedTask oldOne = failedUnsubscribed.get(h);
+        if (oldOne != null) {
+            return;
+        }
+        FailedUnsubscribedTask newTask = new FailedUnsubscribedTask(url, this, listener);
+        oldOne = failedUnsubscribed.putIfAbsent(h, newTask);
+        if (oldOne == null) {
+            // never has a retry task. then start a new task for retry.
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        }
+    }
+
+    private void removeFailedUnsubscribed(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedUnsubscribedTask f = failedUnsubscribed.remove(h);
+        if (f != null) {
+            f.cancel();
         }
-        listeners = failedUnsubscribed.get(url);
-        if (listeners != null) {
-            listeners.remove(listener);
+    }
+
+    private void addFailedNotified(URL url, NotifyListener listener, List<URL> urls) {
+        Holder h = new Holder(url, listener);
+        FailedNotifiedTask newTask = new FailedNotifiedTask(url, listener);
+        FailedNotifiedTask f = failedNotified.putIfAbsent(h, newTask);
+        if (f == null) {
+            // never has a retry task. then start a new task for retry.
+            newTask.addUrlToRetry(urls);
+            retryTimer.newTimeout(newTask, retryPeriod, TimeUnit.MILLISECONDS);
+        } else {
+            // just add urls which needs retry.
+            newTask.addUrlToRetry(urls);
         }
-        Map<NotifyListener, List<URL>> notified = failedNotified.get(url);
-        if (notified != null) {
-            notified.remove(listener);
+    }
+
+    private void removeFailedNotified(URL url, NotifyListener listener) {
+        Holder h = new Holder(url, listener);
+        FailedNotifiedTask f = failedNotified.remove(h);
+        if (f != null) {
+            f.cancel();
         }
     }
 
+    public ConcurrentMap<URL, FailedRegisteredTask> getFailedRegistered() {
+        return failedRegistered;
+    }
+
+    public ConcurrentMap<URL, FailedUnregisteredTask> getFailedUnregistered() {
+        return failedUnregistered;
+    }
+
+    public ConcurrentMap<Holder, FailedSubscribedTask> getFailedSubscribed() {
+        return failedSubscribed;
+    }
+
+    public ConcurrentMap<Holder, FailedUnsubscribedTask> getFailedUnsubscribed() {
+        return failedUnsubscribed;
+    }
+
+    public ConcurrentMap<Holder, FailedNotifiedTask> getFailedNotified() {
+        return failedNotified;
+    }
+
     @Override
     public void register(URL url) {
         super.register(url);
-        failedRegistered.remove(url);
-        failedUnregistered.remove(url);
+        removeFailedRegistered(url);
+        removeFailedUnregistered(url);
         try {
             // Sending a registration request to the server side
             doRegister(url);
@@ -153,15 +246,15 @@ public abstract class FailbackRegistry extends AbstractRegistry {
     ",Optimize retry for FailbackRegistry .,"""Introduce retry mechanism for registry operations""","According to the diff, the commit message should be:

""Implement retry mechanism for failed registry operations""

This commit message accurately reflects the changes made in the code, which include the introduction of a retry mechanism for failed registry operations, including registration, unregistration, subscription, and unsubscription.","Refactor FailbackRegistry to use HashedWheelTimer for failure retry

 This commit refactors the FailbackRegistry class to use a HashedWheelTimer for failure retry instead of a ScheduledExecutorService. The retry tasks are now stored in ConcurrentMaps and the Holder class is used to hold the URL and NotifyListener. The changes also include adding methods to remove failed tasks, adding URLs to the failed notified task, and cancelling the tasks. The diff shows that the changes are extensive and involve many parts of the class, including the constructor, fields, and methods.","""Introduce retry tasks for registry operations to handle failures robustly in Dubbo."""
"diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
index 5fe7d6b868f..772cbd6d81d 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParser.java
@@ -80,8 +80,8 @@ public class BallerinaParser extends Parser {
 		RULE_objectFunctionDefinition = 23, RULE_annotationDefinition = 24, RULE_constantDefinition = 25, 
 		RULE_globalVariableDefinition = 26, RULE_channelType = 27, RULE_attachmentPoint = 28, 
 		RULE_workerDeclaration = 29, RULE_workerDefinition = 30, RULE_finiteType = 31, 
-		RULE_finiteTypeUnit = 32, RULE_typeName = 33, RULE_openRecordTypeDescriptor = 34, 
-		RULE_closedRecordTypeDescriptor = 35, RULE_fieldDescriptor = 36, RULE_simpleTypeName = 37, 
+		RULE_finiteTypeUnit = 32, RULE_typeName = 33, RULE_inclusiveRecordTypeDescriptor = 34, 
+		RULE_exclusiveRecordTypeDescriptor = 35, RULE_fieldDescriptor = 36, RULE_simpleTypeName = 37, 
 		RULE_referenceTypeName = 38, RULE_userDefineTypeName = 39, RULE_valueTypeName = 40, 
 		RULE_builtInReferenceTypeName = 41, RULE_functionTypeName = 42, RULE_errorTypeName = 43, 
 		RULE_xmlNamespaceName = 44, RULE_xmlLocalName = 45, RULE_annotationAttachment = 46, 
@@ -157,18 +157,18 @@ public class BallerinaParser extends Parser {
 		""sealedLiteral"", ""restDescriptorPredicate"", ""objectFunctionDefinition"", 
 		""annotationDefinition"", ""constantDefinition"", ""globalVariableDefinition"", 
 		""channelType"", ""attachmentPoint"", ""workerDeclaration"", ""workerDefinition"", 
-		""finiteType"", ""finiteTypeUnit"", ""typeName"", ""openRecordTypeDescriptor"", 
-		""closedRecordTypeDescriptor"", ""fieldDescriptor"", ""simpleTypeName"", ""referenceTypeName"", 
-		""userDefineTypeName"", ""valueTypeName"", ""builtInReferenceTypeName"", ""functionTypeName"", 
-		""errorTypeName"", ""xmlNamespaceName"", ""xmlLocalName"", ""annotationAttachment"", 
-		""statement"", ""variableDefinitionStatement"", ""recordLiteral"", ""staticMatchLiterals"", 
-		""tupleLiteral"", ""recordKeyValue"", ""recordKey"", ""tableLiteral"", ""tableColumnDefinition"", 
-		""tableColumn"", ""tableDataArray"", ""tableDataList"", ""tableData"", ""arrayLiteral"", 
-		""assignmentStatement"", ""tupleDestructuringStatement"", ""recordDestructuringStatement"", 
-		""errorDestructuringStatement"", ""compoundAssignmentStatement"", ""compoundOperator"", 
-		""variableReferenceList"", ""ifElseStatement"", ""ifClause"", ""elseIfClause"", 
-		""elseClause"", ""matchStatement"", ""matchPatternClause"", ""bindingPattern"", 
-		""structuredBindingPattern"", ""errorBindingPattern"", ""tupleBindingPattern"", 
+		""finiteType"", ""finiteTypeUnit"", ""typeName"", ""inclusiveRecordTypeDescriptor"", 
+		""exclusiveRecordTypeDescriptor"", ""fieldDescriptor"", ""simpleTypeName"", 
+		""referenceTypeName"", ""userDefineTypeName"", ""valueTypeName"", ""builtInReferenceTypeName"", 
+		""functionTypeName"", ""errorTypeName"", ""xmlNamespaceName"", ""xmlLocalName"", 
+		""annotationAttachment"", ""statement"", ""variableDefinitionStatement"", ""recordLiteral"", 
+		""staticMatchLiterals"", ""tupleLiteral"", ""recordKeyValue"", ""recordKey"", 
+		""tableLiteral"", ""tableColumnDefinition"", ""tableColumn"", ""tableDataArray"", 
+		""tableDataList"", ""tableData"", ""arrayLiteral"", ""assignmentStatement"", ""tupleDestructuringStatement"", 
+		""recordDestructuringStatement"", ""errorDestructuringStatement"", ""compoundAssignmentStatement"", 
+		""compoundOperator"", ""variableReferenceList"", ""ifElseStatement"", ""ifClause"", 
+		""elseIfClause"", ""elseClause"", ""matchStatement"", ""matchPatternClause"", 
+		""bindingPattern"", ""structuredBindingPattern"", ""errorBindingPattern"", ""tupleBindingPattern"", 
 		""recordBindingPattern"", ""openRecordBindingPattern"", ""closedRecordBindingPattern"", 
 		""entryBindingPattern"", ""fieldBindingPattern"", ""restBindingPattern"", ""bindingRefPattern"", 
 		""structuredRefBindingPattern"", ""tupleRefBindingPattern"", ""recordRefBindingPattern"", 
@@ -2845,20 +2845,6 @@ public class BallerinaParser extends Parser {
 			super.copyFrom(ctx);
 		}
 	}
-	public static class OpenRecordTypeNameLabelContext extends TypeNameContext {
-		public OpenRecordTypeDescriptorContext openRecordTypeDescriptor() {
-			return getRuleContext(OpenRecordTypeDescriptorContext.class,0);
-		}
-		public OpenRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
-		@Override
-		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterOpenRecordTypeNameLabel(this);
-		}
-		@Override
-		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitOpenRecordTypeNameLabel(this);
-		}
-	}
 	public static class TupleTypeNameLabelContext extends TypeNameContext {
 		public TerminalNode LEFT_PARENTHESIS() { return getToken(BallerinaParser.LEFT_PARENTHESIS, 0); }
 		public List<TypeNameContext> typeName() {
@@ -2903,6 +2889,20 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitUnionTypeNameLabel(this);
 		}
 	}
+	public static class ExclusiveRecordTypeNameLabelContext extends TypeNameContext {
+		public ExclusiveRecordTypeDescriptorContext exclusiveRecordTypeDescriptor() {
+			return getRuleContext(ExclusiveRecordTypeDescriptorContext.class,0);
+		}
+		public ExclusiveRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterExclusiveRecordTypeNameLabel(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitExclusiveRecordTypeNameLabel(this);
+		}
+	}
 	public static class SimpleTypeNameLabelContext extends TypeNameContext {
 		public SimpleTypeNameContext simpleTypeName() {
 			return getRuleContext(SimpleTypeNameContext.class,0);
@@ -2932,20 +2932,6 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitNullableTypeNameLabel(this);
 		}
 	}
-	public static class ClosedRecordTypeNameLabelContext extends TypeNameContext {
-		public ClosedRecordTypeDescriptorContext closedRecordTypeDescriptor() {
-			return getRuleContext(ClosedRecordTypeDescriptorContext.class,0);
-		}
-		public ClosedRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
-		@Override
-		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterClosedRecordTypeNameLabel(this);
-		}
-		@Override
-		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitClosedRecordTypeNameLabel(this);
-		}
-	}
 	public static class ArrayTypeNameLabelContext extends TypeNameContext {
 		public TypeNameContext typeName() {
 			return getRuleContext(TypeNameContext.class,0);
@@ -3013,6 +2999,20 @@ public class BallerinaParser extends Parser {
 			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitGroupTypeNameLabel(this);
 		}
 	}
+	public static class InclusiveRecordTypeNameLabelContext extends TypeNameContext {
+		public InclusiveRecordTypeDescriptorContext inclusiveRecordTypeDescriptor() {
+			return getRuleContext(InclusiveRecordTypeDescriptorContext.class,0);
+		}
+		public InclusiveRecordTypeNameLabelContext(TypeNameContext ctx) { copyFrom(ctx); }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterInclusiveRecordTypeNameLabel(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitInclusiveRecordTypeNameLabel(this);
+		}
+	}
 
 	public final TypeNameContext typeName() throws RecognitionException {
 		return typeName(0);
@@ -3147,20 +3147,20 @@ public class BallerinaParser extends Parser {
 				break;
 			case 5:
 				{
-				_localctx = new OpenRecordTypeNameLabelContext(_localctx);
+				_localctx = new InclusiveRecordTypeNameLabelContext(_localctx);
 				_ctx = _localctx;
 				_prevctx = _localctx;
 				setState(847);
-				openRecordTypeDescriptor();
+				inclusiveRecordTypeDescriptor();
 				}
 				break;
 			case 6:
 				{
-				_localctx = new ClosedRecordTypeNameLabelContext(_localctx);
+				_localctx = new ExclusiveRecordTypeNameLabelContext(_localctx);
 				_ctx = _localctx;
 				_prevctx = _localctx;
 				setState(848);
-				closedRecordTypeDescriptor();
+				exclusiveRecordTypeDescriptor();
 				}
 				break;
 			}
@@ -3286,7 +3286,7 @@ public class BallerinaParser extends Parser {
 		return _localctx;
 	}
 
-	public static class OpenRecordTypeDescriptorContext extends ParserRuleContext {
+	public static class InclusiveRecordTypeDescriptorContext extends ParserRuleContext {
 		public TerminalNode RECORD() { return getToken(BallerinaParser.RECORD, 0); }
 		public TerminalNode LEFT_BRACE() { return getToken(BallerinaParser.LEFT_BRACE, 0); }
 		public TerminalNode RIGHT_BRACE() { return getToken(BallerinaParser.RIGHT_BRACE, 0); }
@@ -3296,29 +3296,25 @@ public class BallerinaParser extends Parser {
 		public FieldDescriptorContext fieldDescriptor(int i) {
 			return getRuleContext(FieldDescriptorContext.class,i);
 		}
-		public RecordRestFieldDefinitionContext recordRestFieldDefinition() {
-			return getRuleContext(RecordRestFieldDefinitionContext.class,0);
-		}
-		public OpenRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
+		public InclusiveRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
 			super(parent, invokingState);
 		}
-		@Override public int getRuleIndex() { return RULE_openRecordTypeDescriptor; }
+		@Override public int getRuleIndex() { return RULE_inclusiveRecordTypeDescriptor; }
 		@Override
 		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterOpenRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterInclusiveRecordTypeDescriptor(this);
 		}
 		@Override
 		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitOpenRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitInclusiveRecordTypeDescriptor(this);
 		}
 	}
 
-	public final OpenRecordTypeDescriptorContext openRecordTypeDescriptor() throws RecognitionException {
-		OpenRecordTypeDescriptorContext _localctx = new OpenRecordTypeDescriptorContext(_ctx, getState());
-		enterRule(_localctx, 68, RULE_openRecordTypeDescriptor);
+	public final InclusiveRecordTypeDescriptorContext inclusiveRecordTypeDescriptor() throws RecognitionException {
+		InclusiveRecordTypeDescriptorContext _localctx = new InclusiveRecordTypeDescriptorContext(_ctx, getState());
+		enterRule(_localctx, 68, RULE_inclusiveRecordTypeDescriptor);
 		int _la;
 		try {
-			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
 			setState(876);
@@ -3327,30 +3323,19 @@ public class BallerinaParser extends Parser {
 			match(LEFT_BRACE);
 			setState(881);
 			_errHandler.sync(this);
-			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
-			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
-				if ( _alt==1 ) {
-					{
-					{
-					setState(878);
-					fieldDescriptor();
-					}
-					} 
-				}
-				setState(883);
-				_errHandler.sync(this);
-				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
-			}
-			setState(885);
 			_la = _input.LA(1);
-			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || _la==LEFT_PARENTHESIS || _la==Identifier) {
+			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LEFT_PARENTHESIS - 129)) | (1L << (MUL - 129)) | (1L << (AT - 129)) | (1L << (Identifier - 129)))) != 0)) {
 				{
-				setState(884);
-				recordRestFieldDefinition();
+				{
+				setState(878);
+				fieldDescriptor();
 				}
+				}
+				setState(883);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
 			}
-
-			setState(887);
+			setState(884);
 			match(RIGHT_BRACE);
 			}
 		}
@@ -3365,7 +3350,7 @@ public class BallerinaParser extends Parser {
 		return _localctx;
 	}
 
-	public static class ClosedRecordTypeDescriptorContext extends ParserRuleContext {
+	public static class ExclusiveRecordTypeDescriptorContext extends ParserRuleContext {
 		public TerminalNode RECORD() { return getToken(BallerinaParser.RECORD, 0); }
 		public TerminalNode LEFT_CLOSED_RECORD_DELIMITER() { return getToken(BallerinaParser.LEFT_CLOSED_RECORD_DELIMITER, 0); }
 		public TerminalNode RIGHT_CLOSED_RECORD_DELIMITER() { return getToken(BallerinaParser.RIGHT_CLOSED_RECORD_DELIMITER, 0); }
@@ -3375,45 +3360,60 @@ public class BallerinaParser extends Parser {
 		public FieldDescriptorContext fieldDescriptor(int i) {
 			return getRuleContext(FieldDescriptorContext.class,i);
 		}
-		public ClosedRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
+		public RecordRestFieldDefinitionContext recordRestFieldDefinition() {
+			return getRuleContext(RecordRestFieldDefinitionContext.class,0);
+		}
+		public ExclusiveRecordTypeDescriptorContext(ParserRuleContext parent, int invokingState) {
 			super(parent, invokingState);
 		}
-		@Override public int getRuleIndex() { return RULE_closedRecordTypeDescriptor; }
+		@Override public int getRuleIndex() { return RULE_exclusiveRecordTypeDescriptor; }
 		@Override
 		public void enterRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterClosedRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).enterExclusiveRecordTypeDescriptor(this);
 		}
 		@Override
 		public void exitRule(ParseTreeListener listener) {
-			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitClosedRecordTypeDescriptor(this);
+			if ( listener instanceof BallerinaParserListener ) ((BallerinaParserListener)listener).exitExclusiveRecordTypeDescriptor(this);
 		}
 	}
 
-	public final ClosedRecordTypeDescriptorContext closedRecordTypeDescriptor() throws RecognitionException {
-		ClosedRecordTypeDescriptorContext _localctx = new ClosedRecordTypeDescriptorContext(_ctx, getState());
-		enterRule(_localctx, 70, RULE_closedRecordTypeDescriptor);
+	public final ExclusiveRecordTypeDescriptorContext exclusiveRecordTypeDescriptor() throws RecognitionException {
+		ExclusiveRecordTypeDescriptorContext _localctx = new ExclusiveRecordTypeDescriptorContext(_ctx, getState());
+		enterRule(_localctx, 70, RULE_exclusiveRecordTypeDescriptor);
 		int _la;
 		try {
+			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(889);
+			setState(886);
 			match(RECORD);
-			setState(890);
+			setState(887);
 			match(LEFT_CLOSED_RECORD_DELIMITER);
-			setState(894);
+			setState(891);
 			_errHandler.sync(this);
+			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
+			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
+				if ( _alt==1 ) {
+					{
+					{
+					setState(888);
+					fieldDescriptor();
+					}
+					} 
+				}
+				setState(893);
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
+			}
+			setState(895);
 			_la = _input.LA(1);
-			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LEFT_PARENTHESIS - 129)) | (1L << (MUL - 129)) | (1L << (AT - 129)) | (1L << (Identifier - 129)))) != 0)) {
-				{
+			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SERVICE) | (1L << FUNCTION) | (1L << OBJECT) | (1L << RECORD) | (1L << ABSTRACT) | (1L << CLIENT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (TYPE_INT - 65)) | (1L << (TYPE_BYTE - 65)) | (1L << (TYPE_FLOAT - 65)) | (1L << (TYPE_DECIMAL - 65)) | (1L << (TYPE_BOOL - 65)) | (1L << (TYPE_STRING - 65)) | (1L << (TYPE_ERROR - 65)) | (1L << (TYPE_MAP - 65)) | (1L << (TYPE_JSON - 65)) | (1L << (TYPE_XML - 65)) | (1L << (TYPE_TABLE - 65)) | (1L << (TYPE_STREAM - 65)) | (1L << (TYPE_ANY - 65)) | (1L << (TYPE_DESC - 65)) | (1L << (TYPE_FUTURE - 65)) | (1L << (TYPE_ANYDATA - 65)))) != 0) || _la==LEFT_PARENTHESIS || _la==Identifier) {
 				{
-				setState(891);
-				fieldDescriptor();
-				}
+				setState(894);
+				recordRestFieldDefinition();
 				}
-				setState(896);
-				_errHandler.sync(this);
-				_la = _input.LA(1);
 			}
+
 			setState(897);
 			match(RIGHT_CLOSED_RECORD_DELIMITER);
 			}
@@ -17659,7 +17659,7 @@ public class BallerinaParser extends Parser {
 		""\5#\u0348\n#\3#\5#\u034b\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0354\n#\3#\3#\3#""+
 		""\3#\5#\u035a\n#\3#\6#\u035d\n#\r#\16#\u035e\3#\3#\3#\6#\u0364\n#\r#\16""+
 		""#\u0365\3#\3#\7#\u036a\n#\f#\16#\u036d\13#\3$\3$\3$\7$\u0372\n$\f$\16""+
-		""$\u0375\13$\3$\5$\u0378\n$\3$\3$\3%\3%\3%\7%\u037f\n%\f%\16%\u0382\13""+
+		""$\u0375\13$\3$\3$\3%\3%\3%\7%\u037c\n%\f%\16%\u037f\13%\3%\5%\u0382\n""+
 		""%\3%\3%\3&\3&\5&\u0388\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0390\n\'\3(\3(""+
 		""\5(\u0394\n(\3)\3)\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+""+
 		""\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u03b3\n+\3,\3,\3,\3,\5,\u03b9\n,\3,""+
@@ -17853,7 +17853,7 @@ public class BallerinaParser extends Parser {
 		""\2\2\2.\u02b1\3\2\2\2\60\u02b4\3\2\2\2\62\u02cd\3\2\2\2\64\u02e4\3\2\2""+
 		""\2\66\u030b\3\2\2\28\u030d\3\2\2\2:\u0312\3\2\2\2<\u0314\3\2\2\2>\u031e""+
 		""\3\2\2\2@\u0323\3\2\2\2B\u032d\3\2\2\2D\u0353\3\2\2\2F\u036e\3\2\2\2H""+
-		""\u037b\3\2\2\2J\u0387\3\2\2\2L\u038f\3\2\2\2N\u0393\3\2\2\2P\u0395\3\2""+
+		""\u0378\3\2\2\2J\u0387\3\2\2\2L\u038f\3\2\2\2N\u0393\3\2\2\2P\u0395\3\2""+
 		""\2\2R\u0397\3\2\2\2T\u03b2\3\2\2\2V\u03b4\3\2\2\2X\u03be\3\2\2\2Z\u03c9""+
 		""\3\2\2\2\\\u03cb\3\2\2\2^\u03cd\3\2\2\2`\u03ec\3\2\2\2b\u03fe\3\2\2\2""+
 		""d\u0400\3\2\2\2f\u0412\3\2\2\2h\u041c\3\2\2\2j\u0427\3\2\2\2l\u042d\3""+
@@ -18052,12 +18052,12 @@ public class BallerinaParser extends Parser {
 		""\3\2\2\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b""+
 		""\u036c\3\2\2\2\u036cE\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7\r\2\2""+
 		""\u036f\u0373\7\u0081\2\2\u0370\u0372\5J&\2\u0371\u0370\3\2\2\2\u0372\u0375""+
-		""\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0377\3\2\2\2\u0375""+
-		""\u0373\3\2\2\2\u0376\u0378\5*\26\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2""+
-		""\2\2\u0378\u0379\3\2\2\2\u0379\u037a\7\u0082\2\2\u037aG\3\2\2\2\u037b""+
-		""\u037c\7\r\2\2\u037c\u0380\7\u0088\2\2\u037d\u037f\5J&\2\u037e\u037d\3""+
-		""\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2\u0381""+
-		""\u0383\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0384\7\u0089\2\2\u0384I\3\2""+
+		""\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2\2\u0375""+
+		""\u0373\3\2\2\2\u0376\u0377\7\u0082\2\2\u0377G\3\2\2\2\u0378\u0379\7\r""+
+		""\2\2\u0379\u037d\7\u0088\2\2\u037a\u037c\5J&\2\u037b\u037a\3\2\2\2\u037c""+
+		""\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0381\3\2""+
+		""\2\2\u037f\u037d\3\2\2\2\u0380\u0382\5*\26\2\u0381\u0380\3\2\2\2\u0381""+
+		""\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\7\u0089\2\2\u0384I\3\2""+
 		""\2\2\u0385\u0388\5(\25\2\u0386\u0388\5$\23\2\u0387\u0385\3\2\2\2\u0387""+
 		""\u0386\3\2\2\2\u0388K\3\2\2\2\u0389\u0390\7O\2\2\u038a\u0390\7S\2\2\u038b""+
 		""\u0390\7P\2\2\u038c\u0390\5R*\2\u038d\u0390\5N(\2\u038e\u0390\5\u0144""+
@@ -18657,7 +18657,7 @@ public class BallerinaParser extends Parser {
 		""\u025d\u0260\u0265\u026c\u0270\u0273\u027d\u027f\u0289\u028d\u0293\u029a""+
 		""\u02a0\u02a4\u02b4\u02b9\u02bd\u02c0\u02c7\u02ca\u02cd\u02d6\u02db\u02df""+
 		""\u02e4\u02e8\u02f0\u02fa\u02fe\u030b\u0319\u0321\u0328\u032d\u033b\u0341""+
-		""\u0344\u0347\u034a\u0353\u0359\u035e\u0365\u0369\u036b\u0373\u0377\u0380""+
+		""\u0344\u0347\u034a\u0353\u0359\u035e\u0365\u0369\u036b\u0373\u037d\u0381""+
 		""\u0387\u038f\u0393\u03b2\u03b8\u03bc\u03c3\u03c7\u03d0\u03ec\u03f3\u03f7""+
 		""\u03fe\u0406\u0409\u0412\u0419\u0422\u042d\u0432\u0436\u0440\u0443\u0448""+
 		""\u044e\u0457\u045b\u0463\u0487\u048e\u0492\u049a\u04a6\u04b0\u04bb\u04c6""+
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
index 3aa83943773..f81874ba341 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserBaseListener.java
@@ -412,37 +412,37 @@ public class BallerinaParserBaseListener implements BallerinaParserListener {
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx) { }
+	@Override public void enterTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx) { }
+	@Override public void exitTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
+	@Override public void enterUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitTupleTypeNameLabel(BallerinaParser.TupleTypeNameLabelContext ctx) { }
+	@Override public void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
+	@Override public void enterExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx) { }
+	@Override public void exitExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
@@ -472,73 +472,73 @@ public class BallerinaParserBaseListener implements BallerinaParserListener {
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx) { }
+	@Override public void enterArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx) { }
+	@Override public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
+	@Override public void enterObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx) { }
+	@Override public void exitObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
+	@Override public void enterGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitObjectTypeNameLabel(BallerinaParser.ObjectTypeNameLabelContext ctx) { }
+	@Override public void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
+	@Override public void enterInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx) { }
+	@Override public void exitInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx) { }
+	@Override public void enterInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx) { }
+	@Override public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void enterClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx) { }
+	@Override public void enterExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
 	 * <p>The default implementation does nothing.</p>
 	 */
-	@Override public void exitClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx) { }
+	@Override public void exitExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx) { }
 	/**
 	 * {@inheritDoc}
 	 *
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
index c34d997f40f..51bd71975d7 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/antlr4/BallerinaParserListener.java
@@ -337,18 +337,6 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 * @param ctx the parse tree
 	 */
 	void exitFiniteTypeUnit(BallerinaParser.FiniteTypeUnitContext ctx);
-	/**
-	 * Enter a parse tree produced by the {@code openRecordTypeNameLabel}
-	 * labeled alternative in {@link BallerinaParser#typeName}.
-	 * @param ctx the parse tree
-	 */
-	void enterOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx);
-	/**
-	 * Exit a parse tree produced by the {@code openRecordTypeNameLabel}
-	 * labeled alternative in {@link BallerinaParser#typeName}.
-	 * @param ctx the parse tree
-	 */
-	void exitOpenRecordTypeNameLabel(BallerinaParser.OpenRecordTypeNameLabelContext ctx);
 	/**
 	 * Enter a parse tree produced by the {@code tupleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
@@ -374,41 +362,41 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 */
 	void exitUnionTypeNameLabel(BallerinaParser.UnionTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code simpleTypeNameLabel}
+	 * Enter a parse tree produced by the {@code exclusiveRecordTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
+	void enterExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code simpleTypeNameLabel}
+	 * Exit a parse tree produced by the {@code exclusiveRecordTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
+	void exitExclusiveRecordTypeNameLabel(BallerinaParser.ExclusiveRecordTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code nullableTypeNameLabel}
+	 * Enter a parse tree produced by the {@code simpleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
+	void enterSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code nullableTypeNameLabel}
+	 * Exit a parse tree produced by the {@code simpleTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
+	void exitSimpleTypeNameLabel(BallerinaParser.SimpleTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by the {@code closedRecordTypeNameLabel}
+	 * Enter a parse tree produced by the {@code nullableTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void enterClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx);
+	void enterNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
 	/**
-	 * Exit a parse tree produced by the {@code closedRecordTypeNameLabel}
+	 * Exit a parse tree produced by the {@code nullableTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
 	 * @param ctx the parse tree
 	 */
-	void exitClosedRecordTypeNameLabel(BallerinaParser.ClosedRecordTypeNameLabelContext ctx);
+	void exitNullableTypeNameLabel(BallerinaParser.NullableTypeNameLabelContext ctx);
 	/**
 	 * Enter a parse tree produced by the {@code arrayTypeNameLabel}
 	 * labeled alternative in {@link BallerinaParser#typeName}.
@@ -446,25 +434,37 @@ public interface BallerinaParserListener extends ParseTreeListener {
 	 */
 	void exitGroupTypeNameLabel(BallerinaParser.GroupTypeNameLabelContext ctx);
 	/**
-	 * Enter a parse tree produced by {@link BallerinaParser#openRecordTypeDescriptor}.
+	 * Enter a parse tree produced by the {@code inclusiveRecordTypeNameLabel}
+	 * labeled alternative in {@link BallerinaParser#typeName}.
+	 * @param ctx the parse tree
+	 */
+	void enterInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx);
+	/**
+	 * Exit a parse tree produced by the {@code inclusiveRecordTypeNameLabel}
+	 * labeled alternative in {@link BallerinaParser#typeName}.
+	 * @param ctx the parse tree
+	 */
+	void exitInclusiveRecordTypeNameLabel(BallerinaParser.InclusiveRecordTypeNameLabelContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link BallerinaParser#inclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void enterOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx);
+	void enterInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Exit a parse tree produced by {@link BallerinaParser#openRecordTypeDescriptor}.
+	 * Exit a parse tree produced by {@link BallerinaParser#inclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void exitOpenRecordTypeDescriptor(BallerinaParser.OpenRecordTypeDescriptorContext ctx);
+	void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Enter a parse tree produced by {@link BallerinaParser#closedRecordTypeDescriptor}.
+	 * Enter a parse tree produced by {@link BallerinaParser#exclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void enterClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx);
+	void enterExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx);
 	/**
-	 * Exit a parse tree produced by {@link BallerinaParser#closedRecordTypeDescriptor}.
+	 * Exit a parse tree produced by {@link BallerinaParser#exclusiveRecordTypeDescriptor}.
 	 * @param ctx the parse tree
 	 */
-	void exitClosedRecordTypeDescriptor(BallerinaParser.ClosedRecordTypeDescriptorContext ctx);
+	void exitExclusiveRecordTypeDescriptor(BallerinaParser.ExclusiveRecordTypeDescriptorContext ctx);
 	/**
 	 * Enter a parse tree produced by {@link BallerinaParser#fieldDescriptor}.
 	 * @param ctx the parse tree",Regenerate the parser,"""Refactor record type descriptors in Ballerina parser""",Added support for inclusive and exclusive record types in Ballerina language.,"This commit updates the ANTLR4 generated parser code for Ballerina language to replace open record type descriptors with inclusive record type descriptors and closed record type descriptors with exclusive record type descriptors. It also updates the corresponding listener and base listener interfaces. The changes involve renaming classes, methods, and updating rule indices.","Refactor `openRecordTypeDescriptor` and `closedRecordTypeDescriptor` to `inclusiveRecordTypeDescriptor` and `exclusiveRecordTypeDescriptor`, respectively, in BallerinaParser."
"diff --git a/appclient/pom.xml b/appclient/pom.xml
index 42a8fd0612..131a7df34d 100644
--- a/appclient/pom.xml
+++ b/appclient/pom.xml
@@ -130,6 +130,11 @@
             <artifactId>jboss-marshalling-river</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.jboss.metadata</groupId>
+            <artifactId>jboss-metadata-appclient</artifactId>
+        </dependency>
+
         <dependency>
             <groupId>org.jboss.spec.javax.jms</groupId>
             <artifactId>jboss-jms-api_1.1_spec</artifactId>
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
index 043e24c885..51bd6f1108 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/AppClientAttachments.java
@@ -22,6 +22,7 @@
 package org.jboss.as.appclient.deployment;
 
 import org.jboss.as.server.deployment.AttachmentKey;
+import org.jboss.metadata.appclient.spec.ApplicationClientMetaData;
 
 /**
  * @author Stuart Douglas
@@ -32,6 +33,8 @@ public class AppClientAttachments {
 
     public static final AttachmentKey<Boolean> START_APP_CLIENT = AttachmentKey.create(Boolean.class);
 
+    public static final AttachmentKey<ApplicationClientMetaData> APPLICATION_CLIENT_META_DATA = AttachmentKey.create(ApplicationClientMetaData.class);
+
     private AppClientAttachments() {
     }
 }
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java
new file mode 100644
index 0000000000..1ee3f65ba0
--- /dev/null
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientParsingDeploymentProcessor.java
@@ -0,0 +1,90 @@
+/*
+ * JBoss, Home of Professional Open Source
+ * Copyright 2010, Red Hat Inc., and individual contributors as indicated
+ * by the @authors tag. See the copyright.txt in the distribution for a
+ * full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.jboss.as.appclient.deployment;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.jboss.as.ee.component.DeploymentDescriptorEnvironment;
+import org.jboss.as.ee.structure.DeploymentType;
+import org.jboss.as.ee.structure.DeploymentTypeMarker;
+import org.jboss.as.server.deployment.Attachments;
+import org.jboss.as.server.deployment.DeploymentPhaseContext;
+import org.jboss.as.server.deployment.DeploymentUnit;
+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;
+import org.jboss.as.server.deployment.DeploymentUnitProcessor;
+import org.jboss.metadata.appclient.parser.spec.ApplicationClientMetaDataParser;
+import org.jboss.metadata.appclient.spec.ApplicationClientMetaData;
+import org.jboss.metadata.parser.util.NoopXmlResolver;
+import org.jboss.vfs.VirtualFile;
+
+/**
+ * @author Stuart Douglas
+ */
+public class ApplicationClientParsingDeploymentProcessor implements DeploymentUnitProcessor {
+
+    private static final String APP_XML = ""META-INF/application-client.xml"";
+
+    @Override
+    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
+        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();
+        if (!DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) {
+            return;
+        }
+        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();
+        final VirtualFile appXml = deploymentRoot.getChild(APP_XML);
+        if (appXml.exists()) {
+            InputStream is = null;
+            try {
+                is = appXml.openStream();
+                final XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+                inputFactory.setXMLResolver(NoopXmlResolver.create());
+                XMLStreamReader xmlReader = inputFactory.createXMLStreamReader(is);
+                ApplicationClientMetaData data = new ApplicationClientMetaDataParser().parse(xmlReader);
+                deploymentUnit.putAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA, data);
+                DeploymentDescriptorEnvironment environment = new DeploymentDescriptorEnvironment(""java:module/env"",data.getEnvironmentRefsGroupMetaData() );
+                deploymentUnit.putAttachment(org.jboss.as.ee.component.Attachments.MODULE_DEPLOYMENT_DESCRIPTOR_ENVIRONMENT, environment);
+
+            } catch (XMLStreamException e) {
+                throw new DeploymentUnitProcessingException(""Failed to parse "" + appXml + "" at ["" + e.getLocation().getLineNumber() + "","" +  e.getLocation().getColumnNumber() + ""]"");
+            } catch (IOException e) {
+                throw new DeploymentUnitProcessingException(""Failed to parse "" + appXml, e);
+            } finally {
+                try {
+                    if (is != null) {
+                        is.close();
+                    }
+                } catch (IOException e) {
+                    // Ignore
+                }
+            }
+        }
+    }
+
+    @Override
+    public void undeploy(DeploymentUnit context) {
+    }
+}
diff --git a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
index 55e9dc1c56..3f7111fa6b 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/deployment/ApplicationClientStartProcessor.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Method;
 
 import org.jboss.as.appclient.service.ApplicationClientDeploymentService;
 import org.jboss.as.appclient.service.ApplicationClientStartService;
+import org.jboss.as.ee.component.EEModuleDescription;
 import org.jboss.as.server.deployment.Attachments;
 import org.jboss.as.server.deployment.DeploymentPhaseContext;
 import org.jboss.as.server.deployment.DeploymentUnit;
@@ -35,6 +36,7 @@ import org.jboss.as.server.deployment.reflect.DeploymentReflectionIndex;
 
 /**
  * Processor that starts an application client deployment
+ *
  * @author Stuart Douglas
  */
 public class ApplicationClientStartProcessor implements DeploymentUnitProcessor {
@@ -48,7 +50,7 @@ public class ApplicationClientStartProcessor implements DeploymentUnitProcessor
     @Override
     public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {
         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();
-        final DeploymentUnit topLevel = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();
+        final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);
 
         final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX);
         Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT);
@@ -65,10 +67,10 @@ public class ApplicationClientStartProcessor implements DeploymentUnitProcessor
         if (method == null) {
             throw new RuntimeException(""Could not start app client "" + deploymentUnit.getName() + "" as no main main was found on main class "" + mainClass);
         }
-        final ApplicationClientStartService startService = new ApplicationClientStartService(method, parameters);
+        final ApplicationClientStartService startService = new ApplicationClientStartService(method, parameters, moduleDescription.getNamespaceContextSelector());
         phaseContext.getServiceTarget()
                 .addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService)
-                .addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class,  startService.getApplicationClientDeploymentServiceInjectedValue())
+                .addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue())
                 .install();
     }
 
diff --git a/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java b/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
index 6c7a185326..81cdea761e 100644
--- a/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
+++ b/appclient/src/main/java/org/jboss/as/appclient/service/ApplicationClientStartService.java
@@ -24,6 +24,8 @@ package org.jboss.as.appclient.service;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import org.jboss.as.ee.naming.InjectedEENamespaceContextSelector;
+import org.jboss.as.naming.context.NamespaceContextSelector;
 import org.jboss.as.server.CurrentServiceContainer;
 import org.jboss.logging.Logger;
 import org.jboss.msc.service.Service;
@@ -46,6 +48,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
     public static final ServiceName SERVICE_NAME = ServiceName.of(""appClientStart"");
 
     private final InjectedValue<ApplicationClientDeploymentService> applicationClientDeploymentServiceInjectedValue = new InjectedValue<ApplicationClientDeploymentService>();
+    private final InjectedEENamespaceContextSelector namespaceContextSelectorInjectedValue;
     private final Method mainMethod;
     private final String[] parameters;
 
@@ -53,9 +56,10 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
 
     private final Logger logger = Logger.getLogger(ApplicationClientStartService.class);
 
-    public ApplicationClientStartService(final Method mainMethod, final String[] parameters) {
+    public ApplicationClientStartService(final Method mainMethod, final String[] parameters, final InjectedEENamespaceContextSelector namespaceContextSelectorInjectedValue) {
         this.mainMethod = mainMethod;
         this.parameters = parameters;
+        this.namespaceContextSelectorInjectedValue = namespaceContextSelectorInjectedValue;
     }
 
     @Override
@@ -66,6 +70,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
             public void run() {
                 try {
                     applicationClientDeploymentServiceInjectedValue.getValue().getDeploymentCompleteLatch().await();
+                    NamespaceContextSelector.pushCurrentSelector(namespaceContextSelectorInjectedValue);
                     mainMethod.invoke(null,new Object[] { parameters});
                 } catch (InvocationTargetException e) {
                     logger.error(e.getTargetException(), e.getTargetException());
@@ -74,6 +79,7 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
                 } catch (InterruptedException e) {
                     logger.error(e);
                 } finally {
+                    NamespaceContextSelector.popCurrentSelector();
                     CurrentServiceContainer.getServiceContainer().shutdown();
                 }
             }
@@ -95,4 +101,5 @@ public class ApplicationClientStartService implements Service<ApplicationClientS
     public InjectedValue<ApplicationClientDeploymentService> getApplicationClientDeploymentServiceInjectedValue() {
         return applicationClientDeploymentServiceInjectedValue;
     }
+
 }
diff --git a/build/build.xml b/build/build.xml
index c266fb3c08..1671fc285a 100644
--- a/build/build.xml
+++ b/build/build.xml
@@ -752,6 +752,7 @@
 
         <module-def name=""org.jboss.metadata"">
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-common""/>
+            <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-appclient""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-ejb""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-web""/>
             <maven-resource group=""org.jboss.metadata"" artifact=""jboss-metadata-ear""/>
diff --git a/build/pom.xml b/build/pom.xml
index 9905f1b83a..f294c9b340 100644
--- a/build/pom.xml
+++ b/build/pom.xml
@@ -53,7 +53,7 @@
                         <phase>package</phase>
                         <configuration>
                             <target>
-                                <ant antfile=""build.xml""  inheritRefs=""true"">
+                                <ant antfile=""build.xml"" inheritRefs=""true"">
                                     <target name=""all""/>
                                 </ant>
                             </target>
@@ -611,45 +611,45 @@
             <groupId>org.jboss.as</groupId>
             <artifactId>jboss-as-appclient</artifactId>
         </dependency>
-        
+
         <dependency>
             <groupId>org.jboss.as</groupId>
             <artifactId>jboss-as-cli</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-api</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-api</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-common</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-common</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-impl</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-impl</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-infinispan</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-infinispan</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-jgroups</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-jgroups</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-web-infinispan</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-web-infinispan</artifactId>
         </dependency>
 
         <dependency>
-           <groupId>org.jboss.as</groupId>
-           <artifactId>jboss-as-clustering-web-spi</artifactId>
+            <groupId>org.jboss.as</groupId>
+            <artifactId>jboss-as-clustering-web-spi</artifactId>
         </dependency>
 
         <dependency>
@@ -1008,6 +1008,11 @@
             <artifactId>jboss-marshalling-river</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.jboss.metadata</groupId>
+            <artifactId>jboss-metadata-appclient</artifactId>
+        </dependency>
+
         <dependency>
             <groupId>org.jboss.metadata</groupId>
             <artifactId>jboss-metadata-common</artifactId>
@@ -1543,8 +1548,12 @@
                                 </goals>
                                 <phase>package</phase>
                                 <configuration>
-                                    <licensesOutputDirectory>${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses</licensesOutputDirectory>
-                                    <licensesOutputFile>${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses/licenses.xml</licensesOutputFile>
+                                    <licensesOutputDirectory>
+                                        ${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses
+                                    </licensesOutputDirectory>
+                                    <licensesOutputFile>
+                                        ${project.build.directory}/jboss-as-${jboss.as.release.version}/docs/licenses/licenses.xml
+                                    </licensesOutputFile>
                                 </configuration>
                             </execution>
                         </executions>
diff --git a/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml b/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
index 6fba0a1d16..859710e2ae 100644
--- a/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
+++ b/build/src/main/resources/modules/org/jboss/as/appclient/main/module.xml
@@ -44,6 +44,7 @@
         <module name=""org.jboss.stdio""/>
         <module name=""org.jboss.threads""/>
         <module name=""org.jboss.vfs""/>
+        <module name=""org.jboss.as.naming""/>
         <module name=""org.jboss.as.controller""/>
         <module name=""org.jboss.as.deployment-repository""/>
         <module name=""org.jboss.as.domain-http-api""/>
@@ -55,5 +56,6 @@
         <module name=""org.jboss.as.process-controller""/>
         <module name=""org.jboss.as.protocol""/>
         <module name=""org.jboss.as.remoting""/>
+        <module name=""org.jboss.metadata""/>
     </dependencies>
 </module>
diff --git a/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java b/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
index ff7301d2f3..e7f25178a3 100644
--- a/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
+++ b/ee/src/main/java/org/jboss/as/ee/component/DeploymentDescriptorEnvironment.java
@@ -21,7 +21,7 @@
  */
 package org.jboss.as.ee.component;
 
-import org.jboss.metadata.javaee.spec.Environment;
+import org.jboss.metadata.javaee.spec.RemoteEnvironment;
 
 /**
  * The environment as read from a deployment descriptor
@@ -32,9 +32,9 @@ public class DeploymentDescriptorEnvironment {
 
     private final String defaultContext;
 
-    private final Environment environment;
+    private final RemoteEnvironment environment;
 
-    public DeploymentDescriptorEnvironment(String defaultContext, Environment environment) {
+    public DeploymentDescriptorEnvironment(String defaultContext, RemoteEnvironment environment) {
         this.defaultContext = defaultContext;
         this.environment = environment;
     }
@@ -43,7 +43,7 @@ public class DeploymentDescriptorEnvironment {
         return defaultContext;
     }
 
-    public Environment getEnvironment() {
+    public RemoteEnvironment getEnvironment() {
         return environment;
     }
 }
diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java b/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
index 4b0c545cc7..36fb450f70 100644
--- a/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
+++ b/ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/EjbRefProcessor.java
@@ -22,6 +22,9 @@
 
 package org.jboss.as.ejb3.deployment.processors;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import org.jboss.as.ee.component.BindingConfiguration;
 import org.jboss.as.ee.component.ComponentDescription;
 import org.jboss.as.ee.component.DeploymentDescriptorEnvironment;
@@ -35,9 +38,10 @@ import org.jboss.as.server.deployment.DeploymentUnitProcessingException;
 import org.jboss.as.server.deployment.reflect.DeploymentReflectionIndex;
 import org.jboss.metadata.javaee.spec.EJBLocalReferenceMetaData;
 import org.jboss.metadata.javaee.spec.EJBLocalReferencesMetaData;
-
-import java.util.ArrayList;
-import java.util.List;
+import org.jboss.metadata.javaee.spec.EJBReferenceMetaData;
+import org.jboss.metadata.javaee.spec.EJBReferencesMetaData;
+import org.jboss.metadata.javaee.spec.Environment;
+import org.jboss.metadata.javaee.spec.RemoteEnvironment;
 
 /**
  * Deployment processor responsible for processing ejb references from deployment descriptors
@@ -57,22 +61,23 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
      * @return The bindings for the environment entries
      */
     protected List<BindingConfiguration> processDescriptorEntries(DeploymentUnit deploymentUnit, DeploymentDescriptorEnvironment environment, EEModuleDescription moduleDescription, ComponentDescription componentDescription, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {
-        EJBLocalReferencesMetaData ejbLocalRefs = environment.getEnvironment().getEjbLocalReferences();
+        final RemoteEnvironment remoteEnvironment = environment.getEnvironment();
         List<BindingConfiguration> bindingDescriptions = new ArrayList<BindingConfiguration>();
-        //TODO: this needs a lot more work
-        if (ejbLocalRefs != null) {
-            for (EJBLocalReferenceMetaData ejbRef : ejbLocalRefs) {
+
+        EJBReferencesMetaData ejbRefs = remoteEnvironment.getEjbReferences();
+        if (ejbRefs != null) {
+            for (EJBReferenceMetaData ejbRef : ejbRefs) {
                 String name = ejbRef.getEjbRefName();
                 String ejbName = ejbRef.getLink();
                 String lookup = ejbRef.getLookupName();
-                String localInterface = ejbRef.getLocal();
-                Class<?> localInterfaceType = null;
+                String remoteInterface = ejbRef.getRemote();
+                Class<?> remoteInterfaceType = null;
 
-                if (!isEmpty(localInterface)) {
+                if (!isEmpty(remoteInterface)) {
                     try {
-                        localInterfaceType = classLoader.loadClass(localInterface);
+                        remoteInterfaceType = classLoader.loadClass(remoteInterface);
                     } catch (ClassNotFoundException e) {
-                        throw new DeploymentUnitProcessingException(""Could not load local interface type "" + localInterface, e);
+                        throw new DeploymentUnitProcessingException(""Could not load local interface type "" + remoteInterface, e);
                     }
                 }
 
@@ -84,10 +89,10 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
                 LookupInjectionSource injectionSource = new LookupInjectionSource(name);
 
                 //add any injection targets
-                localInterfaceType = processInjectionTargets(moduleDescription, applicationClasses, injectionSource, classLoader, deploymentReflectionIndex, ejbRef, localInterfaceType);
+                remoteInterfaceType = processInjectionTargets(moduleDescription, applicationClasses, injectionSource, classLoader, deploymentReflectionIndex, ejbRef, remoteInterfaceType);
 
-                if (localInterfaceType == null) {
-                    throw new DeploymentUnitProcessingException(""Could not determine type of ejb-local-ref "" + name + "" for component "" + componentDescription);
+                if (remoteInterfaceType == null) {
+                    throw new DeploymentUnitProcessingException(""Could not determine type of ejb-ref "" + name + "" for component "" + componentDescription);
                 }
                 final BindingConfiguration bindingConfiguration;
                 EjbInjectionSource ejbInjectionSource = null;
@@ -99,9 +104,9 @@ public class EjbRefProcessor extends AbstractDeploymentDescriptorBindingsProcess
                         bindingConfiguration = new BindingConfiguration(name, new LookupInjectionSource(lookup));
                     }
              ",Set up application - client . xml parsing,"""Added support for application client deployment descriptors""","""Added support for application client deployments, including parsing of application-client.xml and injection of environment entries.""","This commit appears to add support for parsing application-client.xml files in the JBoss Application Server. The new class `ApplicationClientParsingDeploymentProcessor` is responsible for parsing the XML file and extracting the `ApplicationClientMetaData` object. The `ApplicationClientStartProcessor` class has also been updated to use the `ApplicationClientMetaData` object to start the application client. Additionally, the `ApplicationClientStartService` class has been updated to use the `InjectedEENamespaceContextSelector` object to push the current namespace context selector before invoking the main method of the application client. The `DeploymentDescriptorEnvironment` class has been updated to use the `RemoteEnvironment` object instead of the `Environment` object. The `EjbRefProcessor` class has been updated to process `EJBReferenceMetaData` objects instead of `EJBLocalReferenceMetaData` objects. Finally, the `org.jboss.metadata` module has been updated to include the `jboss-metadata-appclient` resource.","""Added support for application client metadata processing and updated dependencies and processors."""
"diff --git a/smalidea/META-INF/plugin.xml b/smalidea/META-INF/plugin.xml
index 82cf8dd0..1229db1f 100644
--- a/smalidea/META-INF/plugin.xml
+++ b/smalidea/META-INF/plugin.xml
@@ -21,6 +21,9 @@
       <lang.parserDefinition language=""smali"" implementationClass=""org.jf.smalidea.SmaliParserDefinition""/>
       <java.elementFinder implementation=""org.jf.smalidea.psi.index.SmaliClassFinder""/>
       <stubIndex implementation=""org.jf.smalidea.psi.index.SmaliClassNameIndex""/>
+      <debugger.positionManagerFactory implementation=""org.jf.smalidea.debugging.SmaliPositionManagerFactory""/>
+      <xdebugger.debuggerSupport id=""SmaliDebuggerSupport"" order=""first,before XDebuggerSupport""
+                                 implementation=""org.jf.smalidea.debugging.SmaliDebuggerSupport""/>
   </extensions>
 
   <application-components>
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java
new file mode 100644
index 00000000..a5105fee
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliDebuggerSupport.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.actions.StepOverActionHandler;
+import com.intellij.debugger.impl.DebuggerSession;
+import com.intellij.debugger.ui.JavaDebuggerSupport;
+import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.intellij.openapi.project.Project;
+import com.intellij.xdebugger.impl.actions.DebuggerActionHandler;
+import com.sun.jdi.request.StepRequest;
+import org.jetbrains.annotations.NotNull;
+
+import java.lang.reflect.Method;
+
+public class SmaliDebuggerSupport extends JavaDebuggerSupport {
+    private static boolean useModifiedMethod;
+
+    {
+        try {
+            Method method = DebuggerSession.class.getMethod(""stepOver"", boolean.class, int.class);
+            useModifiedMethod = true;
+        } catch (NoSuchMethodException ex) {
+        }
+    }
+
+    private final StepOverActionHandler myStepOverActionHandler = new StepOverActionHandler() {
+        @Override
+        public void perform(@NotNull final Project project, AnActionEvent e) {
+            final DebuggerSession session = getSession(project);
+
+            if (session != null) {
+                if (useModifiedMethod) {
+                    session.stepOver(false, StepRequest.STEP_MIN);
+                } else {
+                    session.stepOver(false);
+                }
+            }
+        }
+
+        @Override public boolean isEnabled(@NotNull Project project, AnActionEvent event) {
+            // TODO: check if we're currently in a smali file?
+            return super.isEnabled(project, event);
+        }
+    };
+
+    @NotNull
+    @Override
+    public DebuggerActionHandler getStepOverHandler() {
+        return myStepOverActionHandler;
+    }
+
+}
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java
new file mode 100644
index 00000000..97423bc8
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManager.java
@@ -0,0 +1,157 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.NoDataException;
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.SourcePosition;
+import com.intellij.debugger.engine.DebugProcess;
+import com.intellij.debugger.requests.ClassPrepareRequestor;
+import com.intellij.openapi.application.ApplicationManager;
+import com.intellij.openapi.util.Computable;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.sun.jdi.Location;
+import com.sun.jdi.ReferenceType;
+import com.sun.jdi.request.ClassPrepareRequest;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.jf.smalidea.psi.impl.SmaliClass;
+import org.jf.smalidea.psi.impl.SmaliFile;
+import org.jf.smalidea.psi.impl.SmaliMethod;
+import org.jf.smalidea.psi.index.SmaliClassNameIndex;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+public class SmaliPositionManager implements PositionManager {
+    private final DebugProcess debugProcess;
+
+    public SmaliPositionManager(DebugProcess debugProcess) {
+        this.debugProcess = debugProcess;
+    }
+
+    public SourcePosition getSourcePosition(String declaringType, String methodName, String methodSignature,
+                                            int codeIndex) throws NoDataException {
+        Collection<SmaliClass> classes = SmaliClassNameIndex.INSTANCE.get(declaringType,
+                debugProcess.getProject(), GlobalSearchScope.projectScope(debugProcess.getProject()));
+
+        if (classes.size() > 0) {
+            SmaliClass smaliClass = classes.iterator().next();
+
+            // TODO: make an index for this?
+            for (SmaliMethod smaliMethod: smaliClass.getMethods()) {
+                if (smaliMethod.getName().equals(methodName) &&
+                        smaliMethod.getMethodPrototype().getText().equals(methodSignature)) {
+                    return smaliMethod.getSourcePositionForCodeOffset(codeIndex * 2);
+                }
+            }
+        }
+
+        throw NoDataException.INSTANCE;
+    }
+
+    @Override
+    public SourcePosition getSourcePosition(@Nullable Location location) throws NoDataException {
+        if (location == null) {
+            throw NoDataException.INSTANCE;
+        }
+
+        return getSourcePosition(location.declaringType().name(), location.method().name(),
+                location.method().signature(), (int)location.codeIndex());
+    }
+
+    @Override @NotNull
+    public List<ReferenceType> getAllClasses(@NotNull SourcePosition classPosition) throws NoDataException {
+        if (!(classPosition.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        String className = getClassFromPosition(classPosition);
+        return debugProcess.getVirtualMachineProxy().classesByName(className);
+    }
+
+    @NotNull
+    private String getClassFromPosition(@NotNull final SourcePosition position) {
+        return ApplicationManager.getApplication().runReadAction(new Computable<String>() {
+            @Override public String compute() {
+                return ((SmaliClass)position.getElementAt().getContainingFile().getFirstChild()).getQualifiedName();
+            }
+        });
+    }
+
+    @Override @NotNull
+    public List<Location> locationsOfLine(@NotNull final ReferenceType type,
+                                          @NotNull final SourcePosition position) throws NoDataException {
+        if (!(position.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        final ArrayList<Location> locations = new ArrayList<Location>(1);
+
+        ApplicationManager.getApplication().runReadAction(new Runnable() {
+            @Override
+            public void run() {
+                String typeName = type.name();
+                Collection<SmaliClass> classes = SmaliClassNameIndex.INSTANCE.get(typeName, debugProcess.getProject(),
+                        GlobalSearchScope.projectScope(debugProcess.getProject()));
+
+                if (classes.size() > 0) {
+                    final SmaliClass smaliClass = classes.iterator().next();
+
+                    Location location = smaliClass.getLocationForSourcePosition(type, position);
+
+                    if (location != null) {
+                        locations.add(location);
+                    }
+                }
+            }
+        });
+        return locations;
+    }
+
+    @Override
+    public ClassPrepareRequest createPrepareRequest(@NotNull final ClassPrepareRequestor requestor,
+                                                    @NotNull final SourcePosition position) throws NoDataException {
+        if (!(position.getElementAt().getContainingFile() instanceof SmaliFile)) {
+            throw NoDataException.INSTANCE;
+        }
+
+        String className = getClassFromPosition(position);
+        return debugProcess.getRequestsManager().createClassPrepareRequest(new ClassPrepareRequestor() {
+            @Override
+            public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {
+                requestor.processClassPrepare(debuggerProcess, referenceType);
+            }
+        }, className);
+    }
+}
\ No newline at end of file
diff --git a/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java
new file mode 100644
index 00000000..3d261096
--- /dev/null
+++ b/smalidea/src/main/java/org/jf/smalidea/debugging/SmaliPositionManagerFactory.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2012, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea.debugging;
+
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.PositionManagerFactory;
+import com.intellij.debugger.engine.DebugProcess;
+
+public class SmaliPositionManagerFactory extends PositionManagerFactory {
+    @Override
+    public PositionManager createPositionManager(DebugProcess process) {
+        return new SmaliPositionManager(process);
+    }
+}
diff --git a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
index 274098a6..d390dfab 100644
--- a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
+++ b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliClass.java
@@ -31,6 +31,7 @@
 
 package org.jf.smalidea.psi.impl;
 
+import com.intellij.debugger.SourcePosition;
 import com.intellij.lang.ASTNode;
 import com.intellij.openapi.util.Pair;
 import com.intellij.psi.*;
@@ -39,6 +40,9 @@ import com.intellij.psi.impl.PsiClassImplUtil;
 import com.intellij.psi.impl.PsiImplUtil;
 import com.intellij.psi.javadoc.PsiDocComment;
 import com.intellij.util.IncorrectOperationException;
+import com.sun.jdi.Location;
+import com.sun.jdi.Method;
+import com.sun.jdi.ReferenceType;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -307,4 +311,23 @@ public class SmaliClass extends SmaliStubBasedPsiElement<SmaliClassStub> impleme
         // TODO: implement this
         return null;
     }
+
+    @Nullable public Location getLocationForSourcePosition(@Nonnull ReferenceType type,
+                                                           @Nonnull SourcePosition position) {
+
+        SmaliMethod[] smaliMethods = findChildrenByType(SmaliElementTypes.METHOD, SmaliMethod.class);
+
+        for (SmaliMethod smaliMethod: smaliMethods) {
+            //TODO: check the start line+end line of the method
+            int offset = smaliMethod.getOffsetForLine(position.getLine());
+            if (offset != -1) {
+                List<Method> methods = type.methodsByName(smaliMethod.getName(),
+                        smaliMethod.getMethodPrototype().getText());
+                if (methods.size() > 0) {
+                    return methods.get(0).locationOfCodeIndex(offset/2);
+                }
+            }
+        }
+        return null;
+    }
 }
\ No newline at end of file
diff --git a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
index 72c30c68..0a33abad 100644
--- a/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
+++ b/smalidea/src/main/java/org/jf/smalidea/psi/impl/SmaliMethod.java
@@ -33,6 +33,7 @@ package org.jf.smalidea.psi.impl;
 
 import com.intellij.debugger.SourcePosition;
 import com.intellij.lang.ASTNode;
+import com.intellij.openapi.editor.Document;
 import com.intellij.psi.*;
 import com.intellij.psi.PsiModifier.ModifierConstant;
 import com.intellij.psi.impl.PsiImplUtil;
@@ -119,6 +120,22 @@ public class SmaliMethod extends SmaliStubBasedPsiElement<SmaliMethodStub>
         return null;
     }
 
+    public int getOffsetForLine(int line) {
+        PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject());
+        final Document document = documentManager.getDocument(getContainingFile());
+        if (document == null) {
+            return -1;
+        }
+
+        for (final SmaliInstruction instruction: getInstructions()) {
+            int curLine = document.getLineNumber(instruction.getTextOffset());
+            if (curLine >= line) {
+                return instruction.getOffset();
+            }
+        }
+        return -1;
+    }
+
     public int getRegisterCount() {
         SmaliRegistersStatement registersStatement = findChildByClass(SmaliRegistersStatement.class);
         if (registersStatement == null) {
diff --git a/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java b/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java
new file mode 100644
index 00000000..7104b96e
--- /dev/null
+++ b/smalidea/src/test/java/org/jf/smalidea/SmaliPositionManagerTest.java
@@ -0,0 +1,237 @@
+/*
+ * Copyright 2014, Google Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *     * Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above
+ * copyright notice, this list of conditions and the following disclaimer
+ * in the documentation and/or other materials provided with the
+ * distribution.
+ *     * Neither the name of Google Inc. nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package org.jf.smalidea;
+
+import com.google.common.collect.Lists;
+import com.intellij.debugger.NoDataException;
+import com.intellij.debugger.PositionManager;
+import com.intellij.debugger.SourcePosition;
+import com.intellij.debugger.engine.DebugProcess;
+import com.intellij.debugger.engine.DebugProcessListener;
+import com.intellij.debugger.engine.evaluation.EvaluateException;
+import com.intellij.debugger.engine.evaluation.EvaluationContext;
+import com.intellij.debugger.engine.jdi.VirtualMachineProxy;
+import com.intellij.debugger.engine.managerThread.DebuggerManagerThread;
+import com.intellij.debugger.requests.RequestManager;
+import com.intellij.execution.ExecutionResult;
+import com.intellij.execution.process.ProcessHandler;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.util.Key;
+import com.intellij.psi.search.GlobalSearchScope;
+import com.intellij.testFramework.fixtures.LightCodeInsightFixtureTestCase;
+import com.sun.jdi.*;
+import org.jetbrains.annotations.NotNull;
+import org.jf.dexlib2.Opcode;
+import org.jf.smalidea.debugging.SmaliPositionManager;
+import org.jf.smalidea.psi.impl.SmaliInstruction;
+import org.junit.Assert;
+
+import java.util.List;
+import java.util.Map;
+
+public class SmaliPositionManagerTest extends LightCodeInsightFixtureTestCase {
+    private static final String testClass =
+            "".class public Lmy/pkg/blah; .super Ljava/lang/Object;\n"" +
+                    "".method public getRandomParentType(I)I\n"" +
+                    ""    .registers 4\n"" +
+                    ""    .param p1, \""edge\""    # I\n"" +
+                    ""\n"" +
+                    ""    .prologue\n"" +
+                    ""    const/4 v1, 0x2\n"" +
+                    ""\n"" +
+                    ""    .line 179\n"" +
+                    ""    if-nez p1, :cond_5\n"" +
+                    ""\n"" +
+                    ""    move v0, v1\n"" +
+                    ""\n"" +
+                    ""    .line 185\n"" +
+                    ""    :goto_4\n"" +
+                    ""    return v0\n"" +
+                    ""\n"" +
+                    ""    .line 182\n"" +
+                    ""    :cond_5\n"" +
+                    ""    if-ne p1, v1, :cond_f\n"" +
+                    ""\n"" +
+                    ""    .line 183\n"" +
+                    ""    sget-object v0, Lorg/jf/Penroser/PenroserApp;->random:Ljava/util/Random;\n"" +
+                    ""\n"" +
+                    ""    const/4 v1, 0x3\n"" +
+                    ""\n"" +
+                    ""    invoke-virtual {v0, v1}, Ljava/util/Random;->nextInt(I)I\n"" +
+                    ""\n"" +
+                    ""    move-result v0\n"" +
+                    ""\n"" +
+                    ""    goto :goto_4\n"" +
+                    ""\n"" +
+                    ""    .line 185\n"" +
+                    ""    :cond_f\n"" +
+                    ""    sget-object v0, Lorg/jf/Penroser/PenroserApp;->random:Ljava/util/Random;\n"" +
+                    ""\n"" +
+                    ""    invoke-virtual {v0, v1}, Ljava/util/Random;->nextInt(I)I\n"" +
+                    ""\n"" +
+                    ""    move-result v0\n"" +
+                    ""\n"" +
+                    ""    goto :goto_4\n"" +
+                    "".end method"";
+
+    public void testGetSourcePosition() throws NoDataException {
+        myFixture.addFileToProject(""my/pkg/blah.smali"", testClass);
+
+        SmaliPositionManager positionManager = new SmaliPositionManager(new MockDebugProcess());
+
+        SourcePosition sourcePosition = positionManager.getSourcePosition(
+                ""my.pkg.blah"", ""getRandomParentType"", ""(I)I"", 0);
+        Assert.assertEquals(Opcode.CONST_4, ((SmaliInstruction)sourcePosition.getElementAt()).getOpcode());
+        Assert.assertEquals(0, ((SmaliInstruction)sourcePosition.getElementAt()).getOffset());
+
+        sourcePosition = positionManager.getSourcePosition(""my.pkg.blah"", ""getRandomParentType"", ""(I)I"", 10);
+        Assert.assertEquals(Opcode.INVOKE_VIRTUAL, ((SmaliInstruction)sourcePosition.getElementAt()).getOpcode());
+  ",Implement initial debugging support,"""Added Smali debugger support""","Added Smali debugger support

This commit adds support for debugging Smali code in IntelliJ IDEA. It includes the following changes:

* Added a new `SmaliDebuggerSupport` class that provides a custom debugger support for Smali code.
* Added a new `SmaliPositionManager` class that provides a custom position manager for Smali code.
* Added a new `SmaliPositionManagerFactory` class that creates instances of the `SmaliPositionManager` class.
* Updated the `SmaliClass` class to include a method for getting the location of a Smali method in the source code.
* Updated the `SmaliMethod` class to include a method for getting the offset of a line in the source code.
* Added a new test class `SmaliPositionManagerTest` that tests the `SmaliPositionManager` class.","""Added support for debugging Smali code""

This commit adds several new files and makes modifications to existing ones in order to add support for debugging Smali code in IntelliJ IDEA.

The new files include:

* SmaliDebuggerSupport: This class extends JavaDebuggerSupport and provides a custom StepOverActionHandler that allows stepping over Smali code.
* SmaliPositionManager: This class implements PositionManager and provides methods for getting the source position for a given location in the code, as well as getting all classes and locations of a line for a given reference type and source position.
* SmaliPositionManagerFactory: This class extends PositionManagerFactory and creates instances of SmaliPositionManager.

The existing file that has been modified is SmaliClass, which now includes a new method getLocationForSourcePosition that returns the location for a given source position in the Smali code.

Overall, these changes enable debugging of Smali code in IntelliJ IDEA, allowing developers to step through the code and inspect variables at runtime.","""Add SmaliDebuggerSupport, SmaliPositionManager, and SmaliPositionManagerFactory for enhanced debugging support."""
"diff --git a/docs/en/Running-Alluxio-on-GCE.md b/docs/en/Running-Alluxio-on-GCE.md
index 7ae517bca1..054df65158 100644
--- a/docs/en/Running-Alluxio-on-GCE.md
+++ b/docs/en/Running-Alluxio-on-GCE.md
@@ -33,14 +33,14 @@ Download Alluxio to your local machine, and unzip it:
 
 Install [python>=2.7](https://www.python.org/), not python3.
 
-Under `deploy/vagrant` directory in your home directory, run:
+If you already have [pip](https://pip.pypa.io/en/latest/installing/) installed, you can directly
+install the dependencies by running the following in the `deploy/vagrant` of the Alluxio install:
 
-{% include Running-Alluxio-on-GCE/install-vagrant.md %}
+{% include Running-Alluxio-on-GCE/install-pip.md %}
 
-Alternatively, you can manually install [pip](https://pip.pypa.io/en/latest/installing/), and then
-in `deploy/vagrant` run:
+If you do not have `pip` installed, in the `deploy/vagrant` directory of the Alluxio install, run:
 
-{% include Running-Alluxio-on-GCE/install-pip.md %}
+{% include Running-Alluxio-on-GCE/install-vagrant.md %}
 
 ## Launch a Cluster
 
@@ -48,9 +48,16 @@ To run an Alluxio cluster on GCE, you need a [Google Cloud](https://cloud.google
 
 If you are new to Google Cloud, create a billing account and project at the [free trial signup page](https://console.cloud.google.com/billing/freetrial). Also, If you are not familiar with Google Compute Engine, you may want to review the [documentation](https://cloud.google.com/compute/docs) first.
 
-Next, new and existing Google Cloud users need to choose or create a service account within the [Console](https://console.google.com) on the [Permissions](https://console.cloud.google.com/permissions) page, under the [Service Accounts](https://console.cloud.google.com/permissions) tab.
-If creating a new service account, check ""Furnish a new private key."" from the account creation dialog box. Download and store the JSON key in a safe location.
-If reusing a service account, you'll need to have saved JSON keys for the account or download new keys. To download keys for an existing service account, while still in the [Service Accounts](https://console.cloud.google.com/permissions) tab, find the menu for the account under the 3 dots at the right of the service account list and select ""create key."" Save the JSON key in a safe location.
+Next, you will need your JSON keys for your GCE project. Go to the
+[Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) section of the
+[IAM & Admin](https://console.cloud.google.com/projectselector/iam-admin) page in the Console.
+
+If you are creating a new service account, make sure to check the option ""Furnish a new private key""
+and the ""JSON"" key type, and the JSON key will be downloaded. Save the JSON key in a safe location.
+
+If you are using an existing service account, you should have already downloaded the JSON keys.
+If not, you can create a new JSON key for the existing service account (click on the 3 dots to the
+right, then ""create key""), which will download the JSON key. Save the JSON key in a safe location.
 
 Using the [gcloud sdk](https://console.cloud.google.com) configure keys for ssh:
 
@@ -62,13 +69,14 @@ Copy `deploy/vagrant/conf/gce.yml.template` to `deploy/vagrant/conf/gce.yml` by:
 
 In the configuration file `deploy/vagrant/conf/gce.yml`, set the project id, service account, location to JSON key and ssh username you've just created.
 
-For GCE, the default underfs is Google Cloud Storage (GCS). You need to sign into your
-[Google Cloud console](https://console.cloud.google.com), create a GCS bucket and write
-the bucket's name to the field `GCS:Bucket` in `conf/ufs.yml`. To use other under storage systems,
-configure the field `Type` and the corresponding configurations in `conf/ufs.yml`.
+For GCE, the default underfs is Google Cloud Storage (GCS). Visit the
+[Storage](https://console.cloud.google.com/storage/)  of the Google Cloud console, create a GCS
+bucket, and fill in the bucket's name to the field `GCS:Bucket` in `conf/ufs.yml`. To use other
+under storage systems, configure the field `Type` and the corresponding configurations in
+`conf/ufs.yml`.
 
-To access GCS with access keys, you need to create [developer keys](https://cloud.google.com/storage/docs/migrating#keys)
-in GCS console [Interoperability setting](https://console.cloud.google.com/storage/settings)
+To access GCS, you need to create [developer keys](https://cloud.google.com/storage/docs/migrating#keys)
+in the [Interoperability tab](https://console.cloud.google.com/storage/settings) of the GCS console,
 and set shell environment variables `GCS_ACCESS_KEY_ID` and `GCS_SECRET_ACCESS_KEY` by:
 
 {% include Running-Alluxio-on-GCE/access-key.md %}
@@ -97,15 +105,14 @@ following, which assumes a network named 'default'.
 
 {% include Running-Alluxio-on-GCE/add-firewall-rule.md %}
 
-Visit `http://{MASTER_IP}:{PORT}` in the browser to access the Web UIs.
+Visit `http://{MASTER_IP}:{PORT}` in the browser to access the Alluxio Web UI.
 
 You can also monitor the instances state through
 [Google Cloud console](https://console.cloud.google.com).
 
 Here are some scenarios when you may want to check the console:
  - When the cluster creation fails, check GCE instances status/logs.
- - After the cluster is destroyed, confirm GCE instances are terminated.
- - When you no longer need the cluster, make sure GCE instances are NOT costing you extra money.
+ - After the cluster is destroyed, confirm GCE instances are terminated (to avoid unexpected costs).
 
 **Access with ssh**
 
@@ -121,21 +128,20 @@ For example, you can ssh into `AlluxioMaster` with:
 
 All software is installed under the root directory, e.g. Alluxio is installed in `/alluxio`.
 
-On the `AlluxioMaster` node, you can run tests against Alluxio to check its health:
+On the `AlluxioMaster` node, you can run sample tests on Alluxio to check its health:
 
 {% include Running-Alluxio-on-GCE/runTests.md %}
 
 After the tests finish, visit Alluxio web UI at `http://{MASTER_IP}:19999` again. Click `Browse
-File System` in the navigation bar, and you should see the files written to Alluxio by the above
-tests.
+File System` in the navigation bar, and you should see the files written to Alluxio by the tests.
 
-From a node in the cluster, you can ssh to other nodes in the cluster without password with:
+From a node in the cluster, you can ssh to other nodes in the cluster with:
 
 {% include Running-Alluxio-on-GCE/ssh-other-node.md %}
 
 ## Destroy the cluster
 
-Under `deploy/vagrant` directory, you can run:
+In the `deploy/vagrant` directory, you can run:
 
 {% include Running-Alluxio-on-GCE/destroy.md %}
 ",Clarify GCE documentation,"""Update Running-Alluxio-on-GCE documentation for improved clarity and accuracy""","""Update documentation for running Alluxio on GCE to reflect changes in installing dependencies and accessing GCS""","The commit message could be:

 ""Update Running-Alluxio-on-GCE.md: Add instructions for installing pip and updating GCE configuration""

This commit message reflects the changes made in the diff, which include adding instructions for installing pip and updating the instructions for configuring GCE.","""Updated instructions for installing dependencies, setting up service accounts, accessing GCS, and running tests on GCE."""
"diff --git a/third-party/py/scandir/.gitattributes b/third-party/py/scandir/.gitattributes
new file mode 100755
index 0000000000..176a458f94
--- /dev/null
+++ b/third-party/py/scandir/.gitattributes
@@ -0,0 +1 @@
+* text=auto
diff --git a/third-party/py/scandir/.gitignore b/third-party/py/scandir/.gitignore
new file mode 100755
index 0000000000..0b5c2d88ec
--- /dev/null
+++ b/third-party/py/scandir/.gitignore
@@ -0,0 +1,14 @@
+*.pyc
+*.pyd
+*.so
+*.sublime-project
+*.sublime-workspace
+benchtree
+build
+dist
+build.bat
+upload.bat
+MANIFEST
+test/*.log
+test/testdir
+__pycache__
diff --git a/third-party/py/scandir/LICENSE.txt b/third-party/py/scandir/LICENSE.txt
new file mode 100755
index 0000000000..0759f503f2
--- /dev/null
+++ b/third-party/py/scandir/LICENSE.txt
@@ -0,0 +1,27 @@
+Copyright (c) 2012, Ben Hoyt
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+* Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer.
+
+* Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution.
+
+* Neither the name of Ben Hoyt nor the names of its contributors may be used
+to endorse or promote products derived from this software without specific
+prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/third-party/py/scandir/MANIFEST.in b/third-party/py/scandir/MANIFEST.in
new file mode 100755
index 0000000000..91d586c9a9
--- /dev/null
+++ b/third-party/py/scandir/MANIFEST.in
@@ -0,0 +1,7 @@
+include *.py
+include *.c
+include *.h
+include *.txt
+include README.md
+recursive-include test *.py
+recursive-include test *.txt
diff --git a/third-party/py/scandir/README.facebook b/third-party/py/scandir/README.facebook
new file mode 100644
index 0000000000..8091d9585a
--- /dev/null
+++ b/third-party/py/scandir/README.facebook
@@ -0,0 +1,6 @@
+Project URL:
+Git repo to clone: https://github.com/benhoyt/scandir
+Git revision: 03d8b14b9c25543cbf26e0351935c83f658f701d
+License: BSD
+Local modifications:
+  - None
diff --git a/third-party/py/scandir/README.rst b/third-party/py/scandir/README.rst
new file mode 100755
index 0000000000..9c6c885743
--- /dev/null
+++ b/third-party/py/scandir/README.rst
@@ -0,0 +1,193 @@
+scandir, a better directory iterator and faster os.walk()
+=========================================================
+
+``scandir()`` is a directory iteration function like ``os.listdir()``,
+except that instead of returning a list of bare filenames, it yields
+``DirEntry`` objects that include file type and stat information along
+with the name. Using ``scandir()`` increases the speed of ``os.walk()``
+by 2-20 times (depending on the platform and file system) by avoiding
+unnecessary calls to ``os.stat()`` in most cases.
+
+
+Now included in a Python near you!
+----------------------------------
+
+``scandir`` has been included in the Python 3.5 standard library as
+``os.scandir()``, and the related performance improvements to
+``os.walk()`` have also been included. So if you're lucky enough to be
+using Python 3.5 (release date September 13, 2015) you get the benefit
+immediately, otherwise just
+`download this module from PyPI <https://pypi.python.org/pypi/scandir>`_,
+install it with ``pip install scandir``, and then do something like
+this in your code::
+
+    # Use the built-in version of scandir/walk if possible, otherwise
+    # use the scandir module version
+    try:
+        from os import scandir, walk
+    except ImportError:
+        from scandir import scandir, walk
+
+`PEP 471 <https://www.python.org/dev/peps/pep-0471/>`_, which is the
+PEP that proposes including ``scandir`` in the Python standard library,
+was `accepted <https://mail.python.org/pipermail/python-dev/2014-July/135561.html>`_
+in July 2014 by Victor Stinner, the BDFL-delegate for the PEP.
+
+This ``scandir`` module is intended to work on Python 2.6+ and Python
+3.2+ (and it has been tested on those versions).
+
+
+Background
+----------
+
+Python's built-in ``os.walk()`` is significantly slower than it needs to be,
+because -- in addition to calling ``listdir()`` on each directory -- it calls
+``stat()`` on each file to determine whether the filename is a directory or not.
+But both ``FindFirstFile`` / ``FindNextFile`` on Windows and ``readdir`` on Linux/OS
+X already tell you whether the files returned are directories or not, so
+no further ``stat`` system calls are needed. In short, you can reduce the number
+of system calls from about 2N to N, where N is the total number of files and
+directories in the tree.
+
+In practice, removing all those extra system calls makes ``os.walk()`` about
+**7-50 times as fast on Windows, and about 3-10 times as fast on Linux and Mac OS
+X.** So we're not talking about micro-optimizations. See more benchmarks
+in the ""Benchmarks"" section below.
+
+Somewhat relatedly, many people have also asked for a version of
+``os.listdir()`` that yields filenames as it iterates instead of returning them
+as one big list. This improves memory efficiency for iterating very large
+directories.
+
+So as well as a faster ``walk()``, scandir adds a new ``scandir()`` function.
+They're pretty easy to use, but see ""The API"" below for the full docs.
+
+
+Benchmarks
+----------
+
+Below are results showing how many times as fast ``scandir.walk()`` is than
+``os.walk()`` on various systems, found by running ``benchmark.py`` with no
+arguments:
+
+====================   ==============   =============
+System version         Python version   Times as fast
+====================   ==============   =============
+Windows 7 64-bit       2.7.7 64-bit     10.4
+Windows 7 64-bit SSD   2.7.7 64-bit     10.3
+Windows 7 64-bit NFS   2.7.6 64-bit     36.8
+Windows 7 64-bit SSD   3.4.1 64-bit     9.9
+Windows 7 64-bit SSD   3.5.0 64-bit     9.5
+CentOS 6.2 64-bit      2.6.6 64-bit     3.9
+Ubuntu 14.04 64-bit    2.7.6 64-bit     5.8
+Mac OS X 10.9.3        2.7.5 64-bit     3.8
+====================   ==============   =============
+
+All of the above tests were done using the fast C version of scandir
+(source code in ``_scandir.c``).
+
+Note that the gains are less than the above on smaller directories and greater
+on larger directories. This is why ``benchmark.py`` creates a test directory
+tree with a standardized size.
+
+
+The API
+-------
+
+walk()
+~~~~~~
+
+The API for ``scandir.walk()`` is exactly the same as ``os.walk()``, so just
+`read the Python docs <https://docs.python.org/3.5/library/os.html#os.walk>`_.
+
+scandir()
+~~~~~~~~~
+
+The full docs for ``scandir()`` and the ``DirEntry`` objects it yields are
+available in the `Python documentation here <https://docs.python.org/3.5/library/os.html#os.scandir>`_. 
+But below is a brief summary as well.
+
+    scandir(path='.') -> iterator of DirEntry objects for given path
+
+Like ``listdir``, ``scandir`` calls the operating system's directory
+iteration system calls to get the names of the files in the given
+``path``, but it's different from ``listdir`` in two ways:
+
+* Instead of returning bare filename strings, it returns lightweight
+  ``DirEntry`` objects that hold the filename string and provide
+  simple methods that allow access to the additional data the
+  operating system may have returned.
+
+* It returns a generator instead of a list, so that ``scandir`` acts
+  as a true iterator instead of returning the full list immediately.
+
+``scandir()`` yields a ``DirEntry`` object for each file and
+sub-directory in ``path``. Just like ``listdir``, the ``'.'``
+and ``'..'`` pseudo-directories are skipped, and the entries are
+yielded in system-dependent order. Each ``DirEntry`` object has the
+following attributes and methods:
+
+* ``name``: the entry's filename, relative to the scandir ``path``
+  argument (corresponds to the return values of ``os.listdir``)
+
+* ``path``: the entry's full path name (not necessarily an absolute
+  path) -- the equivalent of ``os.path.join(scandir_path, entry.name)``
+
+* ``is_dir(*, follow_symlinks=True)``: similar to
+  ``pathlib.Path.is_dir()``, but the return value is cached on the
+  ``DirEntry`` object; doesn't require a system call in most cases;
+  don't follow symbolic links if ``follow_symlinks`` is False
+
+* ``is_file(*, follow_symlinks=True)``: similar to
+  ``pathlib.Path.is_file()``, but the return value is cached on the
+  ``DirEntry`` object; doesn't require a system call in most cases; 
+  don't follow symbolic links if ``follow_symlinks`` is False
+
+* ``is_symlink()``: similar to ``pathlib.Path.is_symlink()``, but the
+  return value is cached on the ``DirEntry`` object; doesn't require a
+  system call in most cases
+
+* ``stat(*, follow_symlinks=True)``: like ``os.stat()``, but the
+  return value is cached on the ``DirEntry`` object; does not require a
+  system call on Windows (except for symlinks); don't follow symbolic links
+  (like ``os.lstat()``) if ``follow_symlinks`` is False
+
+* ``inode()``: return the inode number of the entry; the return value
+  is cached on the ``DirEntry`` object
+
+Here's a very simple example of ``scandir()`` showing use of the
+``DirEntry.name`` attribute and the ``DirEntry.is_dir()`` method::
+
+    def subdirs(path):
+        """"""Yield directory names not starting with '.' under given path.""""""
+        for entry in os.scandir(path):
+            if not entry.name.startswith('.') and entry.is_dir():
+                yield entry.name
+
+This ``subdirs()`` function will be significantly faster with scandir
+than ``os.listdir()`` and ``os.path.isdir()`` on both Windows and POSIX
+systems, especially on medium-sized or large directories.
+
+
+Further reading
+---------------
+
+* `The Python docs for scandir <https://docs.python.org/3.5/library/os.html#os.scandir>`_
+* `PEP 471 <https://www.python.org/dev/peps/pep-0471/>`_, the
+  (now-accepted) Python Enhancement Proposal that proposed adding
+  ``scandir`` to the standard library -- a lot of details here,
+  including rejected ideas and previous discussion
+
+
+Flames, comments, bug reports
+-----------------------------
+
+Please send flames, comments, and questions about scandir to Ben Hoyt:
+
+http://benhoyt.com/
+
+File bug reports for the version in the Python 3.5 standard library
+`here <https://docs.python.org/3.5/bugs.html>`_, or file bug reports
+or feature requests for this module at the GitHub project page:
+
+https://github.com/benhoyt/scandir
diff --git a/third-party/py/scandir/_scandir.c b/third-party/py/scandir/_scandir.c
new file mode 100755
index 0000000000..12a6706f67
--- /dev/null
+++ b/third-party/py/scandir/_scandir.c
@@ -0,0 +1,1818 @@
+/* C speedups for scandir module
+
+This is divided into four sections (each prefixed with a ""SECTION:""
+comment):
+
+1) Python 2/3 compatibility
+2) Helper utilities from posixmodule.c, fileutils.h, etc
+3) SECTION: Main DirEntry and scandir implementation, taken from
+   Python 3.5's posixmodule.c
+4) Module and method definitions and initialization code
+
+*/
+
+#include <Python.h>
+#include <structseq.h>
+#include <structmember.h>
+#include ""osdefs.h""
+
+#ifdef MS_WINDOWS
+#include <windows.h>
+#include ""winreparse.h""
+#else
+#include <dirent.h>
+#ifndef HAVE_DIRENT_H
+#define HAVE_DIRENT_H 1
+#endif
+#endif
+
+#define MODNAME ""scandir""
+
+
+/* SECTION: Python 2/3 compatibility */
+
+#if PY_MAJOR_VERSION >= 3
+#define INIT_ERROR return NULL
+#else
+#define INIT_ERROR return
+#endif
+
+#if PY_MAJOR_VERSION < 3 || PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION <= 2
+#define _Py_IDENTIFIER(name) static char * PyId_##name = #name;
+#define _PyObject_GetAttrId(obj, pyid_name) PyObject_GetAttrString((obj), *(pyid_name))
+#define PyExc_FileNotFoundError PyExc_OSError
+#define PyUnicode_AsUnicodeAndSize(unicode, addr_length) \
+    PyUnicode_AsUnicode(unicode); *(addr_length) = PyUnicode_GetSize(unicode)
+#endif
+
+
+/* SECTION: Helper utilities from posixmodule.c, fileutils.h, etc */
+
+#if !defined(MS_WINDOWS) && defined(DT_UNKNOWN)
+#define HAVE_DIRENT_D_TYPE 1
+#endif
+
+#ifdef HAVE_DIRENT_H
+#include <dirent.h>
+#define NAMLEN(dirent) strlen((dirent)->d_name)
+#else
+#if defined(__WATCOMC__) && !defined(__QNX__)
+#include <direct.h>
+#define NAMLEN(dirent) strlen((dirent)->d_name)
+#else
+#define dirent direct
+#define NAMLEN(dirent) (dirent)->d_namlen
+#endif
+#ifdef HAVE_SYS_NDIR_H
+#include <sys/ndir.h>
+#endif
+#ifdef HAVE_SYS_DIR_H
+#include <sys/dir.h>
+#endif
+#ifdef HAVE_NDIR_H
+#include <ndir.h>
+#endif
+#endif
+
+#ifndef Py_CLEANUP_SUPPORTED
+#define Py_CLEANUP_SUPPORTED 0x20000
+#endif
+
+#ifndef S_IFLNK
+/* Windows doesn't define S_IFLNK but posixmodule.c maps
+ * IO_REPARSE_TAG_SYMLINK to S_IFLNK */
+#  define S_IFLNK 0120000
+#endif
+
+// _Py_stat_struct is already defined in fileutils.h on Python 3.5+
+#if PY_MAJOR_VERSION < 3 || (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION < 5)
+#ifdef MS_WINDOWS
+struct _Py_stat_struct {
+    unsigned long st_dev;
+    __int64 st_ino;
+    unsigned short st_mode;
+    int st_nlink;
+    int st_uid;
+    int st_gid;
+    unsigned long st_rdev;
+    __int64 st_size;
+    time_t st_atime;
+    int st_atime_nsec;
+    time_t st_mtime;
+    int st_mtime_nsec;
+    time_t st_ctime;
+    int st_ctime_nsec;
+    unsigned long st_file_attributes;
+};
+#else
+#  define _Py_stat_struct stat
+#endif
+#endif
+
+/* choose the appropriate stat and fstat functions and return structs */
+#undef STAT
+#undef FSTAT
+#undef STRUCT_STAT
+#ifdef MS_WINDOWS
+#       define STAT win32_stat
+#       define LSTAT win32_lstat
+#       define FSTAT _Py_fstat_noraise
+#       define STRUCT_STAT struct _Py_stat_struct
+#else
+#       define STAT stat
+#       define LSTAT lstat
+#       define FSTAT fstat
+#       define STRUCT_STAT struct stat
+#endif
+
+#ifdef MS_WINDOWS
+
+static __int64 secs_between_epochs = 11644473600; /* Seconds between 1.1.1601 and 1.1.1970 */
+
+static void
+FILE_TIME_to_time_t_nsec(FILETIME *in_ptr, time_t *time_out, int* nsec_out)
+{
+    /* XXX endianness. Shouldn't matter, as all Windows implementations are little-endian */
+    /* Cannot simply cast and dereference in_ptr,
+       since it might not be aligned properly */
+    __int64 in;
+    memcpy(&in, in_ptr, sizeof(in));
+    *nsec_out = (int)(in % 10000000) * 100; /* FILETIME is in units of 100 nsec. */
+    *time_out = Py_SAFE_DOWNCAST((in / 10000000) - secs_between_epochs, __int64, time_t);
+}
+
+/* Below, we *know* that ugo+r is 0444 */
+#if _S_IREAD != 0400
+#error Unsupported C library
+#endif
+static int
+attributes_to_mode(DWORD attr)
+{
+    int m = 0;
+    if (attr & FILE_ATTRIBUTE_DIRECTORY)
+        m |= _S_IFDIR | 0111; /* IFEXEC for user,group,other */
+    else
+        m |= _S_IFREG;
+    if (attr & FILE_ATTRIBUTE_READONLY)
+        m |= 0444;
+    else
+        m |= 0666;
+    return m;
+}
+
+void
+_Py_attribute_data_to_stat(BY_HANDLE_FILE_INFORMATION *info, ULONG reparse_tag,
+                           struct _Py_stat_struct *result)
+{
+    memset(result, 0, sizeof(*result));
+    result->st_mode = attributes_to_mode(info->dwFileAttributes);
+    result->st_size = (((__int64)info->nFileSizeHigh)<<32) + info->nFileSizeLow;
+    result->st_dev = info->dwVolumeSerialNumber;
+    result->st_rdev = result->st_dev;
+    FILE_TIME_to_time_t_nsec(&info->ftCreationTime, &result->st_ctime, &result->st_ctime_nsec);
+    FILE_TIME_to_time_t_nsec(&info->ftLastWriteTime, &result->st_mtime, &result->st_mtime_nsec);
+    FILE_TIME_to_time_t_nsec(&info->ftLastAccessTime, &result->st_atime, &result->st_atime_nsec);
+    result->st_nlink = info->nNumberOfLinks;
+    result->st_ino = (((__int64)info->nFileIndexHigh)<<32) + info->nFileIndexLow;
+    if (reparse_tag == IO_REPARSE_TAG_SYMLINK) {
+        /* first clear the S_IFMT bits */
+        result->st_mode ^= (result->st_mode & S_IFMT);
+        /* now set the bits that make this a symlink */
+        result->st_mode |= S_IFLNK;
+    }
+    result->st_file_attributes = info->dwFileAttributes;
+}
+
+static BOOL
+get_target_path(HANDLE hdl, wchar_t **target_path)
+{
+    int buf_size, result_length;
+    wchar_t *buf;
+
+    /* We have a good handle to the target, use it to determine
+       the target path name (then we'll call lstat on it). */
+    buf_size = GetFinalPathNameByHandleW(hdl, 0, 0,
+                                         VOLUME_NAME_DOS);
+    if(!buf_size)
+        return FALSE;
+
+    buf = PyMem_New(wchar_t, buf_size+1);
+    if (!buf) {
+        SetLastError(ERROR_OUTOFMEMORY);
+        return FALSE;
+    }
+
+    result_length = GetFinalPathNameByHandleW(hdl,
+                       buf, buf_size, VOLUME_NAME_DOS);
+
+    if(!result_length) {
+        PyMem_Free(buf);
+        return FALSE;
+    }
+
+    if(!CloseHandle(hdl)) {
+        PyMem_Free(buf);
+        return FALSE;
+    }
+
+    buf[result_length] = 0;
+
+    *target_path = buf;
+    return TRUE;
+}
+
+static int
+win32_get_reparse_tag(HANDLE reparse_point_handle, ULONG *reparse_tag)
+{
+    char target_buffer[MAXIMUM_REPARSE_DATA_BUFFER_SIZE];
+    REPARSE_DATA_BUFFER *rdb = (REPARSE_DATA_BUFFER *)target_buffer;
+    DWORD n_bytes_returned;
+
+    if (0 == DeviceIoControl(
+        reparse_point_handle,
+        FSCTL_GET_REPARSE_POINT,
+        NULL, 0, /* in buffer */
+        target_buffer, sizeof(target_buffer),
+        &n_bytes_returned,
+        NULL)) /* we're not using OVERLAPPED_IO */
+        return FALSE;
+
+    if (reparse_tag)
+        *reparse_tag = rdb->ReparseTag;
+
+    return TRUE;
+}
+
+static void
+find_data_to_file_info_w(WIN32_FIND_DATAW *pFileData,
+                         BY_HANDLE_FILE_INFORMATION *info,
+                         ULONG *reparse_tag)
+{
+    memset(info, 0, sizeof(*info));
+    info->dwFileAttributes = pFileData->dwFileAttributes;
+    info->ftCreationTime   = pFileData->ftCreationTime;
+    info->ftLastAccessTime = pFileData->ftLastAccessTime;
+    info->ftLastWriteTime  = pFileData->ftLastWriteTime;
+    info->nFileSizeHigh    = pFileData->nFileSizeHigh;
+    info->nFileSizeLow     = pFileData->nFileSizeLow;
+/*  info->nNumberOfLinks   = 1; */
+    if (pFileData->dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
+        *reparse_tag = pFileData->dwReserved0;
+    else
+        *reparse_tag = 0;
+}
+
+static BOOL
+attributes_from_dir_w(LPCWSTR pszFile, BY_HANDLE_FILE_INFORMATION *info, ULONG *reparse_tag)
+{
+    HANDLE hFindFile;
+    WIN32_FIND_DATAW FileData;
+    hFindFile = FindFirstFileW(pszFile, &FileData);
+    if (hFindFile == INVALID_HANDLE_VALUE)
+        return FALSE;
+    FindClose(hFindFile);
+    find_data_to_file_info_w(&FileData, info, reparse_tag);
+    return TRUE;
+}
+
+static int
+win32_xstat_impl_w(const wchar_t *path, struct _Py_stat_struct *result,
+                   BOOL traverse)
+{
+    int code;
+    HANDLE hFile, hFile2;
+    BY_HANDLE_FILE_INFORMATION info;
+    ULONG reparse_tag = 0;
+    wchar_t *target_path;
+    const wchar_t *dot;
+
+    hFile = CreateFileW(
+        path,
+        FILE_READ_ATTRIBUTES, /* desired access */
+        0, /* share mode */
+        NULL, /* security attributes */
+        OPEN_EXISTING,
+        /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
+        /* FILE_FLAG_OPEN_REPARSE_POINT does not follow the symlink.
+           Because of this, calls like GetFinalPathNameByHandle will return
+           the symlink path again and not the actual final path. */
+        FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS|
+            FILE_FLAG_OPEN_REPARSE_POINT,
+        NULL);
+
+    if (hFile == INVALID_HANDLE_VALUE) {
+        /* Either the target doesn't exist, or we don't have access to
+           get a handle to it. If the former, we need to return an error.
+           If the latter, we can use attributes_from_dir. */
+        if (GetLastError() != ERROR_SHARING_VIOLATION)
+            return -1;
+        /* Could not get attributes on open file. Fall back to
+           reading the directory. */
+        if (!attributes_from_dir_w(path, &info, &reparse_tag))
+            /* Very strange. This should not fail now */
+            return -1;
+        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
+            if (traverse) {
+                /* Should traverse, but could not open reparse point handle */
+                SetLastError(ERROR_SHARING_VIOLATION);
+                return -1;
+            }
+        }
+    } else {
+        if (!GetFileInformationByHandle(hFile, &info)) {
+            CloseHandle(hFile);
+            return -1;
+        }
+        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
+            if (!win32_get_reparse_tag(hFile, &reparse_tag))
+                return -1;
+
+            /* Close the outer open file handle now that we're about to
+               reopen it with different flags. */
+            if (!CloseHandle(hFile))
+                return -1;
+
+            if (traverse) {
+                /* In order to call GetFinalPathNameByHandle we need to open
+                   the file without the reparse handling flag set. */
+                hFile2 = CreateFileW(
+                           path, FILE_READ_ATTRIBUTES, FILE_SHARE_READ,
+                           NULL, OPEN_EXISTING,
+                           FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS,
+                           NULL);
+                if (hFile2 == INVALID_HANDLE_VALUE)
+                    return -1;
+
+                if (!get_target_path(hFile2, &target_path))
+                    return -1;
+
+                code = win32_xstat_impl_w(target_path, result, FALSE);
+                PyMem_Free(target_path);
+                return code;
+            }
+        } else
+            CloseHandle(hFile);
+    }
+    _Py_attribute_data_to_stat(&info, reparse_tag, result);
+
+    /* Set S_IEXEC if it is an .exe, .bat, ... */
+    dot = wcsrchr(path, '.');
+    if (dot) {
+        if (_wcsicmp(dot, L"".bat"") == 0 || _wcsicmp(dot, L"".cmd"") == 0 ||
+            _wcsicmp(dot, L"".exe"") == 0 || _wcsicmp(dot, L"".com"") == 0)
+            result->st_mode |= 0111;
+    }
+    return 0;
+}
+
+static int
+win32_xstat_w(const wchar_t *path, struct _Py_stat_struct *result, BOOL traverse)
+{
+    /* Protocol violation: we explicitly clear errno, instead of
+       setting it to a POSIX error. Callers should use GetLastError. */
+    int code = win32_xstat_impl_w(path, result, traverse);
+    errno = 0;
+    return code;
+}
+
+static int
+win32_lstat_w(const wchar_t* path, struct _Py_stat_struct *result)
+{
+    return win32_xstat_w(path, result, FALSE);
+}
+
+static int
+win32_stat_w(const wchar_t* path, struct _Py_stat_struct *result)
+{
+    return win32_xstat_w(path, result, TRUE);
+}
+
+#endif /* MS_WINDOWS */
+
+static PyTypeObject StatResultType;
+
+static PyObject *billion = NULL;
+
+static newfunc structseq_new;
+
+static PyObject *
+statresult_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
+{
+    PyStructSequence *result;
+    int i;
+
+    result = (PyStructSequence*)structseq_new(type, args, kwds);
+    if (!result)
+        return NULL;
+    /* If we have been initialized from a tuple,
+       st_?time might be set to None. Initialize it
+       from the int slots.  */
+    for (i = 7; i <= 9; i++) {
+        if (result->ob_item[i+3] == Py_None) {
+            Py_DECREF(Py_None);
+            Py_INCREF(result->ob_item[i]);
+            result->ob_item[i+3] = result->ob_item[i];
+        }
+    }
+    return (PyObject*)result;
+}
+
+/* If true, st_?time is float. */
+static int _stat_float_times = 1;
+
+static void
+fill_time(PyObject *v, int index, time_t sec, unsigned long nsec)
+{
+#if SIZEOF_TIME_T > SIZEOF_LONG
+    PyObject *s = PyLong_FromLongLong((PY_LONG_LONG)sec);
+#else
+#if PY_MAJOR_VERSION >= 3
+    PyObject *s = PyLong_FromLong((long)sec);
+#else
+    PyObject *s = PyInt_FromLong((long)sec);
+#endif
+#endif
+    PyObject *ns_fractional = PyLong_FromUnsignedLong(nsec);
+    PyObject *s_in_ns = NULL;
+    PyObject *ns_total = NULL;
+    PyObject *float_s = NULL;
+
+    if (!(s && ns_fractional))
+        goto exit;
+
+    s_in_ns = PyNumber_Multiply(s, billion);
+    if (!s_in_ns)
+        goto exit;
+
+    ns_total = PyNumber_Add(s_in_ns, ns_fractional);
+    if (!ns_total)
+        goto exit;
+
+    if (_stat_float_times) {
+        float_s = PyFloat_FromDouble(sec + 1e-9*nsec);
+        if (!float_s)
+            goto exit;
+    }
+    else {
+        float_s = s;
+        Py_INCREF(float_s);
+    }
+
+    PyStructSequence_SET_ITEM(v, index, s);
+    PyStructSequence_SET_ITEM(v, index+3, float_s);
+    PyStructSequence_SET_ITEM(v, index+6, ns_total);
+    s = NULL;
+    float_s = NULL;
+    ns_total = NULL;
+exit:
+    Py_XDECREF(s);
+    Py_XDECREF(ns_fractional);
+    Py_XDECREF(s_in_ns);
+    Py_XDECREF(ns_total);
+    Py_XDECREF(float_s);
+}
+
+#ifdef MS_WINDOWS
+#define HAVE_STAT_NSEC 1
+#define HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES 1
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BLKSIZE
+#define ST_BLKSIZE_IDX 16
+#else
+#define ST_BLKSIZE_IDX 15
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BLOCKS
+#define ST_BLOCKS_IDX (ST_BLKSIZE_IDX+1)
+#else
+#define ST_BLOCKS_IDX ST_BLKSIZE_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_RDEV
+#define ST_RDEV_IDX (ST_BLOCKS_IDX+1)
+#else
+#define ST_RDEV_IDX ST_BLOCKS_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_FLAGS
+#define ST_FLAGS_IDX (ST_RDEV_IDX+1)
+#else
+#define ST_FLAGS_IDX ST_RDEV_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_GEN
+#define ST_GEN_IDX (ST_FLAGS_IDX+1)
+#else
+#define ST_GEN_IDX ST_FLAGS_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_BIRTHTIME
+#define ST_BIRTHTIME_IDX (ST_GEN_IDX+1)
+#else
+#define ST_BIRTHTIME_IDX ST_GEN_IDX
+#endif
+
+#ifdef HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES
+#define ST_FILE_ATTRIBUTES_IDX (ST_BIRTHTIME_IDX+1)
+#else
+#define ST_FILE_ATTRIBUTES_IDX ST_BIRTHTIME_IDX
+#endif
+
+#ifdef HAVE_LONG_LONG
+#  define _PyLong_FromDev PyLong_FromLongLong
+#else
+#  define _PyLong_FromDev PyLong_FromLong
+#endif
+
+#ifndef MS_WINDOWS
+PyObject *
+_PyLong_FromUid(uid_t uid)
+{
+    if (uid == (uid_t)-1)
+        return PyLong_FromLong(-1);
+    return PyLong_FromUnsignedLong(uid);
+}
+
+PyObject *
+_PyLong_FromGid(gid_t gid)
+{
+    if (gid == (gid_t)-1)
+        return PyLong_FromLong(-1);
+    return PyLong_FromUnsignedLong(gid);
+}
+#endif
+
+/* pack a system stat C structure into the Python stat tuple
+   (used by posix_stat() and posix_fstat()) */
+static PyObject*
+_pystat_fromstructstat(STRUCT_STAT *st)
+{
+    unsigned long ansec, mnsec, cnsec;
+    PyObject *v = PyStructSequence_New(&StatResultType);
+    if (v == NULL)
+     ",Adding scandir to third - party .,"""Add third-party py/scandir module""",Added scandir module for improved directory iteration and os.walk() performance.,"The commit message should provide a brief summary of the changes made in the commit. Based on the diff, it appears that the commit adds a new module called 'scandir' which provides a faster and more memory-efficient way to iterate over directories and files. The commit message could be something like:
+
+'Add scandir module for faster and more memory-efficient directory iteration'
+
+If the commit includes any other changes or fixes, those should also be mentioned in the commit message. It's also a good practice to include a more detailed explanation of the changes in the commit message, especially if the changes are complex or have a significant impact on the codebase.","Added scandir directory iteration function for efficient filesystem traversal. Includes LICENSE, README, and initial implementation with C extensions."
"diff --git a/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java b/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
index 52604c00cb6..480fd627c66 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/projectanalysis/ws/EventValidator.java
@@ -32,6 +32,10 @@ class EventValidator {
   private static final Set<String> AUTHORIZED_CATEGORIES = ImmutableSet.of(""Version"", ""Other"");
   private static final String AUTHORIZED_CATEGORIES_INLINED = Joiner.on("", "").join(AUTHORIZED_CATEGORIES);
 
+  private EventValidator() {
+    // prevent instantiation
+  }
+
   static Consumer<EventDto> checkModifiable() {
     return event -> checkArgument(AUTHORIZED_CATEGORIES.contains(event.getCategory()),
       ""Event of category '%s' cannot be modified. Authorized categories: %s"",
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
index baea3587c53..482c5ee554d 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/ResetAction.java
@@ -98,7 +98,7 @@ public class ResetAction implements SettingsWsAction {
       resetRequest.getKeys().forEach(key -> {
         SettingData data = new SettingData(key, emptyList(), component.orElse(null));
         ImmutableList.of(validations.scope(), validations.qualifier())
-          .forEach(validation -> validation.validate(data));
+          .forEach(validation -> validation.accept(data));
       });
 
       List<String> keys = getKeys(resetRequest);
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
index 38fbb074e17..7036a0572f1 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SetAction.java
@@ -206,10 +206,10 @@ public class SetAction implements SettingsWsAction {
     checkValueIsSet(request);
     SettingData settingData = new SettingData(request.getKey(), valuesFromRequest(request), component.orElse(null));
     ImmutableList.of(validations.scope(), validations.qualifier(), validations.valueType())
-      .forEach(validation -> validation.validate(settingData));
+      .forEach(validation -> validation.accept(settingData));
   }
 
-  private void validatePropertySet(SetRequest request, @Nullable PropertyDefinition definition) {
+  private static void validatePropertySet(SetRequest request, @Nullable PropertyDefinition definition) {
     checkRequest(definition != null, ""Setting '%s' is undefined"", request.getKey());
     checkRequest(PropertyType.PROPERTY_SET.equals(definition.type()), ""Parameter '%s' is used for setting of property set type only"", PARAM_FIELD_VALUES);
 
diff --git a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
index 89291bbc97b..c5b905d8b02 100644
--- a/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
+++ b/server/sonar-server/src/main/java/org/sonar/server/setting/ws/SettingValidations.java
@@ -22,6 +22,7 @@ package org.sonar.server.setting.ws;
 
 import java.util.List;
 import java.util.Locale;
+import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nullable;
@@ -51,7 +52,7 @@ public class SettingValidations {
     this.i18n = i18n;
   }
 
-  public SettingValidation scope() {
+  public Consumer<SettingData> scope() {
     return data -> {
       PropertyDefinition definition = definitions.get(data.key);
       checkRequest(data.component != null || definition == null || definition.global() || isGlobal(definition),
@@ -59,7 +60,7 @@ public class SettingValidations {
     };
   }
 
-  public SettingValidation qualifier() {
+  public Consumer<SettingData> qualifier() {
     return data -> {
       String qualifier = data.component == null ? """" : data.component.qualifier();
       PropertyDefinition definition = definitions.get(data.key);
@@ -68,7 +69,7 @@ public class SettingValidations {
     };
   }
 
-  public SettingValidation valueType() {
+  public Consumer<SettingData> valueType() {
     return new ValueTypeValidation();
   }
 
@@ -76,11 +77,6 @@ public class SettingValidations {
     return !definition.global() && definition.qualifiers().isEmpty();
   }
 
-  @FunctionalInterface
-  public interface SettingValidation {
-    void validate(SettingData data);
-  }
-
   public static class SettingData {
     private final String key;
     private final List<String> values;
@@ -94,10 +90,9 @@ public class SettingValidations {
     }
   }
 
-  private class ValueTypeValidation implements SettingValidation {
-
+  private class ValueTypeValidation implements Consumer<SettingData> {
     @Override
-    public void validate(SettingData data) {
+    public void accept(SettingData data) {
       PropertyDefinition definition = definitions.get(data.key);
       if (definition == null) {
         return;
diff --git a/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java b/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java
new file mode 100644
index 00000000000..9b7cf2aeb0c
--- /dev/null
+++ b/sonar-ws/src/main/java/org/sonarqube/ws/client/license/package-info.java
@@ -0,0 +1,25 @@
+/*
+ * SonarQube
+ * Copyright (C) 2009-2016 SonarSource SA
+ * mailto:contact AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+@ParametersAreNonnullByDefault
+package org.sonarqube.ws.client.license;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+
diff --git a/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java b/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
index 75586393422..1d07f29b1ce 100644
--- a/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
+++ b/sonar-ws/src/test/java/org/sonarqube/ws/client/projectanalysis/CreateEventRequestTest.java
@@ -49,7 +49,7 @@ public class CreateEventRequestTest {
   public void other_category_by_default() {
     CreateEventRequest result = underTest.setAnalysis(""P1"").setName(""name"").build();
 
-    assertThat(OTHER.equals(result.getCategory()));
+    assertThat(OTHER).isEqualTo(result.getCategory());
   }
 
   @Test",Fix quality flaws,"""Refactor SettingValidations to use Consumer interface and make EventValidator non-instantiable""","""Refactor validation logic to use Consumer instead of custom interfaces""","The commit message could be:

```bash
Refactor EventValidator to prevent instantiation
Refactor SettingValidations to use Consumer instead of SettingValidation
Refactor ResetAction to use Consumer instead of SettingValidation
Refactor SetAction to make validatePropertySet static
Add package-info.java for org.sonarqube.ws.client.license
Update CreateEventRequestTest to use isEqualTo instead of equals
```

This commit message summarizes the changes made in the provided diffs. It includes refactoring `EventValidator` to prevent instantiation, refactoring `SettingValidations` to use `Consumer` instead of `SettingValidation`, refactoring `ResetAction` to use `Consumer` instead of `SettingValidation`, making `validatePropertySet` in `SetAction` static, adding `package-info.java` for `org.sonarqube.ws.client.license`, and updating `CreateEventRequestTest` to use `isEqualTo` instead of `equals`.","Refactor validation logic by using `Consumer<SettingData>`, enforce non-instantiability of `EventValidator`, and add package-info.java for license package."
"diff --git a/app/schemas/eu.faircode.email.DB/174.json b/app/schemas/eu.faircode.email.DB/174.json
new file mode 100644
index 0000000000..5f2a12f36e
--- /dev/null
+++ b/app/schemas/eu.faircode.email.DB/174.json
@@ -0,0 +1,2298 @@
+{
+  ""formatVersion"": 1,
+  ""database"": {
+    ""version"": 174,
+    ""identityHash"": ""48657efe9bc7d6c7a844ec83604d6f9a"",
+    ""entities"": [
+      {
+        ""tableName"": ""identity"",
+        ""createSql"": ""CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` TEXT NOT NULL, `email` TEXT NOT NULL, `account` INTEGER NOT NULL, `display` TEXT, `color` INTEGER, `signature` TEXT, `host` TEXT NOT NULL, `starttls` INTEGER NOT NULL, `insecure` INTEGER NOT NULL, `port` INTEGER NOT NULL, `auth_type` INTEGER NOT NULL, `provider` TEXT, `user` TEXT NOT NULL, `password` TEXT NOT NULL, `certificate` INTEGER NOT NULL, `certificate_alias` TEXT, `realm` TEXT, `fingerprint` TEXT, `use_ip` INTEGER NOT NULL, `ehlo` TEXT, `synchronize` INTEGER NOT NULL, `primary` INTEGER NOT NULL, `self` INTEGER NOT NULL, `sender_extra` INTEGER NOT NULL, `sender_extra_regex` TEXT, `replyto` TEXT, `cc` TEXT, `bcc` TEXT, `unicode` INTEGER NOT NULL, `plain_only` INTEGER NOT NULL, `encrypt` INTEGER NOT NULL, `delivery_receipt` INTEGER NOT NULL, `read_receipt` INTEGER NOT NULL, `store_sent` INTEGER NOT NULL, `sent_folder` INTEGER, `sign_key` INTEGER, `sign_key_alias` TEXT, `tbd` INTEGER, `state` TEXT, `error` TEXT, `last_connected` INTEGER, `max_size` INTEGER, FOREIGN KEY(`account`) REFERENCES `account`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )"",
+        ""fields"": [
+          {
+            ""fieldPath"": ""id"",
+            ""columnName"": ""id"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""name"",
+            ""columnName"": ""name"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""email"",
+            ""columnName"": ""email"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""account"",
+            ""columnName"": ""account"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""display"",
+            ""columnName"": ""display"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""color"",
+            ""columnName"": ""color"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""signature"",
+            ""columnName"": ""signature"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""host"",
+            ""columnName"": ""host"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encryption"",
+            ""columnName"": ""starttls"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""insecure"",
+            ""columnName"": ""insecure"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""port"",
+            ""columnName"": ""port"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""auth_type"",
+            ""columnName"": ""auth_type"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""provider"",
+            ""columnName"": ""provider"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""user"",
+            ""columnName"": ""user"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""password"",
+            ""columnName"": ""password"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""certificate"",
+            ""columnName"": ""certificate"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""certificate_alias"",
+            ""columnName"": ""certificate_alias"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""realm"",
+            ""columnName"": ""realm"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""fingerprint"",
+            ""columnName"": ""fingerprint"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""use_ip"",
+            ""columnName"": ""use_ip"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""ehlo"",
+            ""columnName"": ""ehlo"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""synchronize"",
+            ""columnName"": ""synchronize"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""primary"",
+            ""columnName"": ""primary"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""self"",
+            ""columnName"": ""self"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sender_extra"",
+            ""columnName"": ""sender_extra"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sender_extra_regex"",
+            ""columnName"": ""sender_extra_regex"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""replyto"",
+            ""columnName"": ""replyto"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""cc"",
+            ""columnName"": ""cc"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""bcc"",
+            ""columnName"": ""bcc"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""unicode"",
+            ""columnName"": ""unicode"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""plain_only"",
+            ""columnName"": ""plain_only"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encrypt"",
+            ""columnName"": ""encrypt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""delivery_receipt"",
+            ""columnName"": ""delivery_receipt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""read_receipt"",
+            ""columnName"": ""read_receipt"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""store_sent"",
+            ""columnName"": ""store_sent"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""sent_folder"",
+            ""columnName"": ""sent_folder"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""sign_key"",
+            ""columnName"": ""sign_key"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""sign_key_alias"",
+            ""columnName"": ""sign_key_alias"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""tbd"",
+            ""columnName"": ""tbd"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""state"",
+            ""columnName"": ""state"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""error"",
+            ""columnName"": ""error"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""last_connected"",
+            ""columnName"": ""last_connected"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""max_size"",
+            ""columnName"": ""max_size"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          }
+        ],
+        ""primaryKey"": {
+          ""columnNames"": [
+            ""id""
+          ],
+          ""autoGenerate"": true
+        },
+        ""indices"": [
+          {
+            ""name"": ""index_identity_account"",
+            ""unique"": false,
+            ""columnNames"": [
+              ""account""
+            ],
+            ""createSql"": ""CREATE INDEX IF NOT EXISTS `index_identity_account` ON `${TABLE_NAME}` (`account`)""
+          },
+          {
+            ""name"": ""index_identity_account_email"",
+            ""unique"": false,
+            ""columnNames"": [
+              ""account"",
+              ""email""
+            ],
+            ""createSql"": ""CREATE INDEX IF NOT EXISTS `index_identity_account_email` ON `${TABLE_NAME}` (`account`, `email`)""
+          }
+        ],
+        ""foreignKeys"": [
+          {
+            ""table"": ""account"",
+            ""onDelete"": ""CASCADE"",
+            ""onUpdate"": ""NO ACTION"",
+            ""columns"": [
+              ""account""
+            ],
+            ""referencedColumns"": [
+              ""id""
+            ]
+          }
+        ]
+      },
+      {
+        ""tableName"": ""account"",
+        ""createSql"": ""CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`order` INTEGER, `id` INTEGER PRIMARY KEY AUTOINCREMENT, `pop` INTEGER NOT NULL, `host` TEXT NOT NULL, `starttls` INTEGER NOT NULL, `insecure` INTEGER NOT NULL, `port` INTEGER NOT NULL, `auth_type` INTEGER NOT NULL, `provider` TEXT, `user` TEXT NOT NULL, `password` TEXT NOT NULL, `certificate` INTEGER NOT NULL, `certificate_alias` TEXT, `realm` TEXT, `fingerprint` TEXT, `name` TEXT, `signature` TEXT, `color` INTEGER, `synchronize` INTEGER NOT NULL, `ondemand` INTEGER NOT NULL, `poll_exempted` INTEGER NOT NULL, `primary` INTEGER NOT NULL, `notify` INTEGER NOT NULL, `browse` INTEGER NOT NULL, `leave_on_server` INTEGER NOT NULL, `leave_deleted` INTEGER NOT NULL, `leave_on_device` INTEGER NOT NULL, `max_messages` INTEGER, `auto_seen` INTEGER NOT NULL, `separator` INTEGER, `swipe_left` INTEGER, `swipe_right` INTEGER, `move_to` INTEGER, `poll_interval` INTEGER NOT NULL, `keep_alive_ok` INTEGER NOT NULL, `keep_alive_failed` INTEGER NOT NULL, `keep_alive_succeeded` INTEGER NOT NULL, `partial_fetch` INTEGER NOT NULL, `ignore_size` INTEGER NOT NULL, `use_date` INTEGER NOT NULL, `use_received` INTEGER NOT NULL, `prefix` TEXT, `quota_usage` INTEGER, `quota_limit` INTEGER, `created` INTEGER, `tbd` INTEGER, `thread` INTEGER, `state` TEXT, `warning` TEXT, `error` TEXT, `last_connected` INTEGER, `max_size` INTEGER)"",
+        ""fields"": [
+          {
+            ""fieldPath"": ""order"",
+            ""columnName"": ""order"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""id"",
+            ""columnName"": ""id"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": false
+          },
+          {
+            ""fieldPath"": ""protocol"",
+            ""columnName"": ""pop"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""host"",
+            ""columnName"": ""host"",
+            ""affinity"": ""TEXT"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""encryption"",
+            ""columnName"": ""starttls"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""insecure"",
+            ""columnName"": ""insecure"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+            ""fieldPath"": ""port"",
+            ""columnName"": ""port"",
+            ""affinity"": ""INTEGER"",
+            ""notNull"": true
+          },
+          {
+",Added template groups,"""Added database schema for identity and account tables""",Added database schema for email identities and accounts in version 174.,"This is a new file that contains a database schema for an email application. The schema includes two tables, ""identity"" and ""account"", with multiple fields and indices defined for each table. The ""identity"" table seems to store information about email identities, including SMTP settings and signature preferences, while the ""account"" table stores information about email accounts, including POP3/IMAP settings and synchronization preferences. The schema also includes foreign key constraints and default values for certain fields.","""Add schema version 174 for accounts and identities including fields and indices for email database structure."""
"diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 3d76f7204..2e7244413 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -191,12 +191,12 @@ public class GraphHopperWeb implements GraphHopperAPI
         if (pathWrapper.hasErrors())
             return pathWrapper;
 
-        double distance = path.getDouble(""distance"");
-        long time = path.getLong(""time"");
-
-        String snappedPointStr = path.getString(""points"");
-        PointList snappedPoints = WebHelper.decodePolyline(snappedPointStr, 5, tmpElevation);
-        pathWrapper.setWaypoints(snappedPoints);
+        if (path.has(""snapped_waypoints""))
+        {
+            String snappedPointStr = path.getString(""snapped_waypoints"");
+            PointList snappedPoints = WebHelper.decodePolyline(snappedPointStr, 5, tmpElevation);
+            pathWrapper.setWaypoints(snappedPoints);
+        }
 
         if (tmpCalcPoints)
         {
@@ -275,6 +275,9 @@ public class GraphHopperWeb implements GraphHopperAPI
                 pathWrapper.setInstructions(il);
             }
         }
+
+        double distance = path.getDouble(""distance"");
+        long time = path.getLong(""time"");
         pathWrapper.setDistance(distance).setTime(time);
         return pathWrapper;
     }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
index 479050e8c..423b0e142 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
@@ -58,10 +58,10 @@ public class GraphHopperWebTest
         assertEquals(5, arsp.getInstructions().getSize());
         assertEquals(""(0,Geradeaus auf A 100,1268.519329705091,65237)"", arsp.getInstructions().get(0).toString());
         assertEquals(11, arsp.getInstructions().get(0).getPoints().size());
-        
-        assertEquals(52.47384, arsp.getWaypoints().getLat(0), 1e-4);
-        assertEquals(13.36285, arsp.getWaypoints().getLon(0), 1e-4);
-        assertEquals(52.47361, arsp.getWaypoints().getLat(1), 1e-4);
+
+        assertEquals(43.73595, arsp.getWaypoints().getLat(0), 1e-4);
+        assertEquals(7.42015, arsp.getWaypoints().getLon(0), 1e-4);
+        assertEquals(43.73761, arsp.getWaypoints().getLat(1), 1e-4);
     }
 
     @Test",fix bug in web client related to snapped_waypoints <issue_id>,"""Fix snapped waypoints handling and update test case with correct coordinates""","According to the diff, the commit message should be:

""Fix snapped waypoints and distance/time calculation in GraphHopperWeb API""

This commit message accurately reflects the changes made in the code, which include:

1. Fixing the snapped waypoints calculation by checking for the ""snapped_waypoints"" key in the path object.
2. Moving the distance and time calculation to after the snapped waypoints calculation.
3. Updating the test cases to reflect the changes in the snapped waypoints and distance/time calculation.","""Update GraphHopperWeb to handle snapped_waypoints and adjust test lat/lon values""

Explanation: The change in the first file (GraphHopperWeb.java) adds a condition to check if ""snapped_waypoints"" exists in the path object before extracting and decoding the snapped points. The change in the second file (GraphHopperWebTest.java) modifies the expected latitude and longitude values for the waypoints in a test case. Therefore, the commit message should reflect both the update in the main code and the adjustment in the test values.",Update GraphHopperWeb to conditionally handle `snapped_waypoints` and adjust GraphHopperWebTest waypoints assertions accordingly.
"diff --git a/Makefile.am b/Makefile.am
index 12cf6330..2d7888be 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -203,6 +203,7 @@ test_SRC := \
 	test/tsd/TestTreeRpc.java	\
 	test/tsd/TestUniqueIdRpc.java	\
 	test/uid/TestNoSuchUniqueId.java	\
+	test/uid/TestRandomUniqueId.java	\
 	test/uid/TestUniqueId.java \
 	test/utils/TestByteArrayPair.java \
 	test/utils/TestConfig.java \
diff --git a/test/uid/TestRandomUniqueId.java b/test/uid/TestRandomUniqueId.java
new file mode 100644
index 00000000..079938c7
--- /dev/null
+++ b/test/uid/TestRandomUniqueId.java
@@ -0,0 +1,92 @@
+// This file is part of OpenTSDB.
+// Copyright (C) 2015  The OpenTSDB Authors.
+//
+// This program is free software: you can redistribute it and/or modify it
+// under the terms of the GNU Lesser General Public License as published by
+// the Free Software Foundation, either version 2.1 of the License, or (at your
+// option) any later version.  This program is distributed in the hope that it
+// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
+// General Public License for more details.  You should have received a copy
+// of the GNU Lesser General Public License along with this program.  If not,
+// see <http://www.gnu.org/licenses/>.
+package net.opentsdb.uid;
+
+import static org.junit.Assert.assertTrue;
+import net.opentsdb.core.TSDB;
+
+import org.hbase.async.Bytes;
+import org.junit.Test;
+
+public final class TestRandomUniqueId {
+
+  @Test
+  public void getRandomUIDMetricWidth() throws Exception {
+    generateAndTestUID(TSDB.metrics_width(), 100);
+  }
+  
+  @Test
+  public void getRandomUID1Byte() throws Exception {
+    generateAndTestUID(1, 100);
+  }
+  
+  @Test
+  public void getRandomUID2Byte() throws Exception {
+    generateAndTestUID(2, 100);
+  }
+  
+  @Test
+  public void getRandomUID3Byte() throws Exception {
+    generateAndTestUID(3, 100);
+  }
+  
+  @Test
+  public void getRandomUID4Byte() throws Exception {
+    generateAndTestUID(4, 100);
+  }
+  
+  @Test
+  public void getRandomUID5Byte() throws Exception {
+    generateAndTestUID(5, 100);
+  }
+  
+  @Test
+  public void getRandomUID6Byte() throws Exception {
+    generateAndTestUID(6, 100);
+  }
+  
+  @Test
+  public void getRandomUID7Byte() throws Exception {
+    generateAndTestUID(7, 100);
+  }
+  /**
+   * Runs the test n times and makes sure it's greater than 0 and less than or
+   * equal to the max value on {@link width} bytes.
+   * @param width The number of bytes to generate a UID for
+   * @param n How many times to run the tests
+   */
+  private void generateAndTestUID(final int width, final int n) {
+    final long max_value = getMax(width);
+    for (int i = 0; i < n; i++) {
+      long uid = RandomUniqueId.getRandomUID(width);
+      assertTrue(uid > 0 && uid <= max_value);
+    }
+  }
+  
+  /**
+   * Simple helper to calculate the max value for any width of long
+   * @param width The width of the byte array we're comparing
+   * @return The maximum integer value on {@link width} bytes.
+   */
+  private long getMax(final int width) {
+    if (width > 7) {
+      throw new IllegalArgumentException(""Can't use a width of ["" + width + 
+          ""] in this unit test"");
+    }
+    final byte[] value = new byte[8];
+    for (int i = 0; i < width; i++) {
+      value[8 - (i + 1)] = (byte) 0xFF;
+    }
+    return Bytes.getLong(value);
+  }
+}",Add unit tests for RandomUniqueId .,"""Added test for RandomUniqueId generation with varying byte widths""","""Added test for RandomUniqueId generation with varying widths""","""Added TestRandomUniqueId.java and updated Makefile.am to include it""

This commit adds a new Java file `TestRandomUniqueId.java` to the `test/uid` directory and updates the `Makefile.am` to include this new file in the build process.

The `TestRandomUniqueId.java` file contains a series of tests for the `RandomUniqueId` class, specifically testing the `getRandomUIDMetricWidth()` method and the `getRandomUID()` method with different byte widths.

The `Makefile.am` file has been updated to include `TestRandomUniqueId.java` in the list of source files for the tests. This ensures that the new tests will be compiled and run when the tests are built.",Added TestRandomUniqueId.java to validate UID generation for various byte widths in OpenTSDB. Updated Makefile.am.
"diff --git a/pulsar-functions/conf/function_worker.yml b/pulsar-functions/conf/function_worker.yml
index 895614c1ab..e636e8b7f2 100644
--- a/pulsar-functions/conf/function_worker.yml
+++ b/pulsar-functions/conf/function_worker.yml
@@ -48,3 +48,5 @@ processContainerFactory:
 
 schedulerClassName: ""org.apache.pulsar.functions.worker.scheduler.RoundRobinScheduler""
 functionAssignmentTopicName: ""assignments""
+failureCheckFreqMs: 30000
+rescheduleTimeoutMs: 60000
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/ClusterServiceCoordinator.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/ClusterServiceCoordinator.java
index e7e6b95814..71371b08b9 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/ClusterServiceCoordinator.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/ClusterServiceCoordinator.java
@@ -73,7 +73,7 @@ public class ClusterServiceCoordinator implements AutoCloseable {
                     try {
                         isLeader = membershipManager.becomeLeader().get(30, TimeUnit.SECONDS);
                     } catch (InterruptedException | ExecutionException | TimeoutException e) {
-                        log.warn(""Failed to attempt becoming leader"", e);
+                        log.debug(""Failed to attempt becoming leader"", e);
                     }
 
                     if (isLeader) {
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataManager.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataManager.java
index 88e745f225..1b57f0beac 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataManager.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionMetaDataManager.java
@@ -128,7 +128,7 @@ public class FunctionMetaDataManager implements AutoCloseable {
         return getFunctionMetaData(functionMetaData.getFunctionConfig());
     }
 
-    List<FunctionMetaData> getAllFunctionMetaData() {
+    public List<FunctionMetaData> getAllFunctionMetaData() {
         List<FunctionMetaData> ret = new LinkedList<>();
         for (Map<String, Map<String, FunctionMetaData>> i : this.functionMetaDataMap.values()) {
             for (Map<String, FunctionMetaData> j : i.values()) {
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java
index 82bbc0d198..cd198ce144 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionRuntimeManager.java
@@ -132,10 +132,18 @@ public class FunctionRuntimeManager implements AutoCloseable{
         return this.functionRuntimeInfoMap.get(fullyQualifiedName);
     }
 
+    public synchronized Assignment findFunctionAssignment(String tenant, String namespace, String functionName) {
+        return this.findAssignment(tenant, namespace, functionName);
+    }
+
     public synchronized long getCurrentAssignmentVersion() {
         return this.currentAssignmentVersion;
     }
 
+    public synchronized void removeAssignment(Assignment assignment) {
+        this.deleteAssignment(assignment);
+    }
+
     public void start() {
         log.info(""/** Starting Function Runtime Manager **/"");
         log.info(""Initialize metrics sink..."");
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java
index 580a7bc4e3..f190c24fc4 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/MembershipManager.java
@@ -18,10 +18,18 @@
  */
 package org.apache.pulsar.functions.worker;
 
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
+import com.google.common.annotations.VisibleForTesting;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
@@ -38,6 +46,8 @@ import org.apache.pulsar.client.api.SubscriptionType;
 import org.apache.pulsar.client.impl.MessageIdImpl;
 import org.apache.pulsar.common.policies.data.ConsumerStats;
 import org.apache.pulsar.common.policies.data.PersistentTopicStats;
+import org.apache.pulsar.functions.proto.Function;
+import org.apache.pulsar.functions.utils.FunctionConfigUtils;
 
 /**
  * A simple implementation of leader election using a pulsar topic.
@@ -120,7 +130,7 @@ public class MembershipManager implements AutoCloseable {
             persistentTopicStats = pulsarAdmin.persistentTopics().getStats(
                     this.workerConfig.getClusterCoordinationTopic());
         } catch (PulsarAdminException e) {
-            log.error(""Failled to get status of coordinate topic {}"",
+            log.error(""Failed to get status of coordinate topic {}"",
                     this.workerConfig.getClusterCoordinationTopic(), e);
             throw new RuntimeException(e);
         }
@@ -157,6 +167,10 @@ public class MembershipManager implements AutoCloseable {
         private String workerHostname;
         private int port;
 
+        public static WorkerInfo of (String workerId, String workerHostname, int port) {
+            return new WorkerInfo(workerId, workerHostname, port);
+        }
+
         public static WorkerInfo parseFrom(String str) {
             String[] tokens = str.split("":"");
             if (tokens.length != 3) {
@@ -171,4 +185,86 @@ public class MembershipManager implements AutoCloseable {
         }
     }
 
-}
\ No newline at end of file
+    @VisibleForTesting
+    Map<String, Long> unsignedFunctionDurations = new HashMap<>();
+    public void checkFailures(FunctionMetaDataManager functionMetaDataManager,
+                              FunctionRuntimeManager functionRuntimeManager,
+                              SchedulerManager schedulerManager) {
+
+        Set<String> currentMembership = this.getCurrentMembership().stream()
+                .map(entry -> entry.getWorkerId()).collect(Collectors.toSet());
+        List<Function.FunctionMetaData> functionMetaDataList = functionMetaDataManager.getAllFunctionMetaData();
+        Map<String, Map<String, Function.Assignment>> currentAssignments = functionRuntimeManager.getCurrentAssignments();
+        Map<String, Function.Assignment> assignmentMap = new HashMap<>();
+        for (Map<String, Function.Assignment> entry : currentAssignments.values()) {
+            assignmentMap.putAll(entry);
+        }
+        long currentTimeMs = System.currentTimeMillis();
+
+        //remove functions that have been scheduled
+        Iterator<Map.Entry<String, Long>> it = unsignedFunctionDurations.entrySet().iterator();
+        while (it.hasNext()) {
+            Map.Entry<String, Long> entry = it.next();
+            String fullyQualifiedName = entry.getKey();
+            Function.Assignment assignment = assignmentMap.get(fullyQualifiedName);
+            if (assignment != null) {
+                String assignedWorkerId = assignment.getWorkerId();
+                // check if assigned to worker that has failed
+                if (currentMembership.contains(assignedWorkerId)) {
+                    it.remove();
+                }
+            }
+        }
+
+        // check for functions that haven't been assigned
+        for (Function.FunctionMetaData functionMetaData : functionMetaDataList) {
+            Function.Assignment assignment
+                    = functionRuntimeManager.findFunctionAssignment(functionMetaData.getFunctionConfig().getTenant(),
+                    functionMetaData.getFunctionConfig().getNamespace(),
+                    functionMetaData.getFunctionConfig().getName());
+
+            String fullyQualifiedName = FunctionConfigUtils.getFullyQualifiedName(functionMetaData.getFunctionConfig());
+            // Function is unassigned
+            if (assignment == null && !this.unsignedFunctionDurations.containsKey(fullyQualifiedName)) {
+                this.unsignedFunctionDurations.put(fullyQualifiedName, currentTimeMs);
+            }
+        }
+
+        // check failed nodes
+        for (Map.Entry<String, Map<String, Function.Assignment>> entry : currentAssignments.entrySet()) {
+            String workerId = entry.getKey();
+            Map<String, Function.Assignment> assignmentEntries = entry.getValue();
+            if (!currentMembership.contains(workerId)) {
+                for (Function.Assignment assignmentEntry : assignmentEntries.values()) {
+                    String fullyQualifiedName = FunctionConfigUtils.getFullyQualifiedName(
+                            assignmentEntry.getFunctionMetaData().getFunctionConfig());
+                    if (!this.unsignedFunctionDurations.containsKey(fullyQualifiedName)) {
+                        this.unsignedFunctionDurations.put(FunctionConfigUtils.getFullyQualifiedName(
+                                assignmentEntry.getFunctionMetaData().getFunctionConfig()), currentTimeMs);
+                    }
+                }
+            }
+        }
+
+        boolean triggerScheduler = false;
+        // check unassigned
+        Collection<String>  needSchedule = new LinkedList<>();
+        for (Map.Entry<String, Long> entry : this.unsignedFunctionDurations.entrySet()) {
+            String fullyQualifiedName = entry.getKey();
+            long unassignedDurationMs = entry.getValue();
+            if (currentTimeMs - unassignedDurationMs > this.workerConfig.getRescheduleTimeoutMs()) {
+                needSchedule.add(fullyQualifiedName);
+                // remove assignment from failed node
+                Function.Assignment assignment = assignmentMap.get(fullyQualifiedName);
+                if (assignment != null) {
+                    functionRuntimeManager.removeAssignment(assignment);
+                }
+                triggerScheduler = true;
+            }
+        }
+        if (triggerScheduler) {
+            log.info(""Functions that need scheduling/rescheduling: {}"", needSchedule);
+            schedulerManager.schedule();
+        }
+    }
+}
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java
index 523e908a0d..9680cb1401 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/SchedulerManager.java
@@ -35,6 +35,7 @@ import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -89,7 +90,7 @@ public class SchedulerManager implements AutoCloseable {
                 try {
                     isLeader = membershipManager.becomeLeader().get(30, TimeUnit.SECONDS);
                 } catch (InterruptedException | ExecutionException | TimeoutException e) {
-                    log.warn(""Failed to attempt becoming leader"", e);
+                    log.debug(""Failed to attempt becoming leader"", e);
                 }
 
                 if (isLeader) {
@@ -99,14 +100,33 @@ public class SchedulerManager implements AutoCloseable {
         });
     }
 
-    public void invokeScheduler() {
+    private void invokeScheduler() {
         List<String> currentMembership = this.membershipManager.getCurrentMembership()
                 .stream().map(workerInfo -> workerInfo.getWorkerId()).collect(Collectors.toList());
 
         List<FunctionMetaData> allFunctions = this.functionMetaDataManager.getAllFunctionMetaData();
+        Set<String> fullyQualifiedNames = allFunctions.stream()
+                .map(functionMetaData -> FunctionConfigUtils.getFullyQualifiedName(functionMetaData.getFunctionConfig()))
+                .collect(Collectors.toSet());
 
         Map<String, Map<String, Assignment>> workerIdToAssignments = this.functionRuntimeManager.getCurrentAssignments();
 
+        //delete assignments of functions that don't exist anymore
+        List<Assignment> invalidAssignments = new LinkedList<>();
+        for (Map<String, Assignment> entryMap : workerIdToAssignments.values()) {
+            for (Map.Entry<String, Assignment> entry : entryMap.entrySet()) {
+                String fullyQualifiedName = entry.getKey();
+                Assignment assignment = entry.getValue();
+                if (!fullyQualifiedNames.contains(fullyQualifiedName)) {
+                    invalidAssignments.add(assignment);
+                }
+            }
+        }
+
+        for (Assignment assignment : invalidAssignments) {
+            this.functionRuntimeManager.removeAssignment(assignment);
+        }
+
         List<Assignment> currentAssignments = workerIdToAssignments
                 .entrySet().stream()
                 .flatMap(stringMapEntry -> stringMapEntry.getValue().values().stream()).collect(Collectors.toList());
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java
index e084b381c8..a0337f43e1 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/Worker.java
@@ -158,6 +158,12 @@ public class Worker extends AbstractService {
                     ""snapshot"",
                     this.workerConfig.getSnapshotFreqMs(),
                     () -> functionMetaDataManager.snapshot());
+
+            this.clusterServiceCoordinator.addTask(""membership-monitor"",
+                    this.workerConfig.getFailureCheckFreqMs(),
+                    () -> membershipManager.checkFailures(
+                            functionMetaDataManager, functionRuntimeManager, schedulerManager));
+
             this.clusterServiceCoordinator.start();
 
             // Start function runtime manager
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
index 86d1c9ffd5..63badb5a8f 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
@@ -60,6 +60,8 @@ public class WorkerConfig implements Serializable {
     private String stateStorageServiceUrl;
     private String functionAssignmentTopicName;
     private String schedulerClassName;
+    private long failureCheckFreqMs;
+    private long rescheduleTimeoutMs;
 
     @Data
     @Setter
diff --git a/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/MembershipManagerTest.java b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/MembershipManagerTest.java
new file mode 100644
index 0000000000..c9be576770
--- /dev/null
+++ b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/MembershipManagerTest.java
@@ -0,0 +1,238 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.functions.worker;
+
+import org.apache.distributedlog.api.namespace.Namespace;
+import org.apache.pulsar.client.api.PulsarClient;
+import org.apache.pulsar.functions.fs.LimitsConfig;
+import org.apache.pulsar.functions.fs.MetricsConfig;
+import org.apache.pulsar.functions.proto.Function;
+import org.mockito.ArgumentMatcher;
+import org.mockito.Mockito;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+import java.util.LinkedList;
+import java.util.List;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+public class MembershipManagerTest {
+
+    @Test
+    public void testCheckFailuresNoFailures() throws Exception {
+        WorkerConfig workerConfig = new WorkerConfig();
+        workerConfig.setWorkerId(""worker-1"");
+        workerConfig.setThreadContainerFactory(new WorkerConfig.ThreadContainerFactory().setThreadGroupName(""test""));
+        workerConfig.setLimitsConfig(new LimitsConfig().setMaxBufferedTuples(10));
+        workerConfig.setPulsarServiceUrl(""pulsar://localhost:6650"");
+        workerConfig.setStateStorageServiceUrl(""foo"");
+        workerConfig.setMetricsConfig(new MetricsConfig().setMetricsSinkClassName(FunctionRuntimeManagerTest.TestSink.class.getName()));
+        SchedulerManager schedulerManager = mock(SchedulerManager.class);
+        FunctionRuntimeManager functionRuntimeManager = spy(new FunctionRuntimeManager(
+                workerConfig,
+                mock(PulsarClient.class),
+                mock(Namespace.class),
+                mock(MembershipManager.class)
+        ));        FunctionMetaDataManager functionMetaDataManager = mock(FunctionMetaDataManager.class);
+        MembershipManager membershipManager = spy(new MembershipManager(workerConfig, schedulerManager, mock(PulsarClient.class)));
+
+        List<MembershipManager.WorkerInfo> workerInfoList = new LinkedList<>();
+        workerInfoList.add(MembershipManager.WorkerInfo.of(""worker-1"", ""host-1"", 8000));
+        workerInfoList.add(MembershipManager.WorkerInfo.of(""worker-2"", ""host-2"", 8001));
+
+        Mockito.doReturn(workerInfoList).when(membershipManager).getCurrentMembership();
+
+        Function.FunctionMetaData function1 = Function.FunctionMetaData.newBuilder().setFunctionConfig(
+                Function.FunctionConfig.newBuilder()
+                        .setTenant(""test-tenant"").setNamespace(""test-namespace"").setName(""func-1"")).build();
+
+        Function.FunctionMetaData function2 = Function.FunctionMetaData.newBuilder().setFunctionConfig(
+                Function.FunctionConfig.newBuilder()
+                        .setTenant(""test-tenant"").setNamespace(""test-namespace"").setName(""func-2"")).build();
+
+        List<Function.FunctionMetaData> metaDataList = new LinkedList<>();
+        metaDataList.add(function1);
+        metaDataList.add(function2);
+
+        Mockito.doReturn(metaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
+        Function.Assignment assignment1 = Function.Assignment.newBuilder()
+                .setWorkerId(""worker-1"")
+                .setFunctionMetaData(function1).build();
+        Function.Assignment assignment2 = Function.Assignment.newBuilder()
+                .setWorkerId(""worker-2"")
+                .setFunctionMetaData(function2).build();
+
+        // add existing assignments
+        functionRuntimeManager.setAssignment(assignment1);
+        functionRuntimeManager.setAssignment(assignment2);
+
+
+        membershipManager.checkFailures(functionMetaDataManager, functionRuntimeManager, schedulerManager);
+
+        verify(schedulerManager, times(0)).schedule();
+        verify(functionRuntimeManager, times(0)).removeAssignment(any(Function.Assignment.class));
+        Assert.assertEquals(membershipManager.unsignedFunctionDurations.size(), 0);
+    }
+
+    @Test
+    public void testCheckFailuresSomeFailures() throws Exception {
+        WorkerConfig workerConfig = new WorkerConfig();
+        workerConfig.setWorkerId(""worker-1"");
+        workerConfig.setThreadContainerFactory(new WorkerConfig.ThreadContainerFactory().setThreadGroupName(""test""));
+        workerConfig.setLimitsConfig(new LimitsConfig().setMaxBufferedTuples(10));
+        workerConfig.setPulsarServiceUrl(""pulsar://localhost:6650"");
+        workerConfig.setStateStorageServiceUrl(""foo"");
+        workerConfig.setMetricsConfig(new MetricsConfig().setMetricsSinkClassName(FunctionRuntimeManagerTest.TestSink.class.getName()));
+        workerConfig.setRescheduleTimeoutMs(30000);
+        SchedulerManager schedulerManager = mock(SchedulerManager.class);
+        FunctionRuntimeManager functionRuntimeManager = spy(new FunctionRuntimeManager(
+                workerConfig,
+                mock(PulsarClient.class),
+                mock(Namespace.class),
+                mock(MembershipManager.class)
+        ));        FunctionMetaDataManager functionMetaDataManager = mock(FunctionMetaDataManager.class);
+        MembershipManager membershipManager = spy(new MembershipManager(workerConfig, schedulerManager, mock(PulsarClient.class)));
+
+        List<MembershipManager.WorkerInfo> workerInfoList = new LinkedList<>();
+        workerInfoList.add(MembershipManager.WorkerInfo.of(""worker-1"", ""host-1"", 8000));
+
+        Mockito.doReturn(workerInfoList).when(membershipManager).getCurrentMembership();
+
+        Function.FunctionMetaData function1 = Function.FunctionMetaData.newBuilder().setFunctionConfig(
+                Function.FunctionConfig.newBuilder()
+                        .setTenant(""test-tenant"").setNamespace(""test-namespace"").setName(""func-1"")).build();
+
+        Function.FunctionMetaData function2 = Function.FunctionMetaData.newBuilder().setFunctionConfig(
+                Function.FunctionConfig.newBuilder()
+                        .setTenant(""test-tenant"").setNamespace(""test-namespace"").setName(""func-2"")).build();
+
+        List<Function.FunctionMetaData> metaDataList = new LinkedList<>();
+        metaDataList.add(function1);
+        metaDataList.add(function2);
+
+        Mockito.doReturn(metaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
+        Function.Assignment assignment1 = Function.Assignment.newBuilder()
+                .setWorkerId(""worker-1"")
+                .setFunctionMetaData(function1).build();
+        Function.Assignment assignment2 = Function.Assignment.newBuilder()
+                .setWorkerId(""worker-2"")
+                .setFunctionMetaData(function2).build();
+
+        // add existing assignments
+        functionRuntimeManager.setAssignment(assignment1);
+        functionRuntimeManager.setAssignment(assignment2);
+
+        membershipManager.checkFailures(functionMetaDataManager, functionRuntimeManager, schedulerManager);
+
+        verify(schedulerManager, times(0)).schedule();
+        verify(functionRuntimeManager, times(0)).removeAssignment(any(Function.Assignment.class));
+        Assert.assertEquals(membershipManager.unsignedFunctionDurations.size(), 1);
+        Assert.assertTrue(membershipManager.unsignedFunctionDurations.get(""test-tenant/test-namespace/func-2"") != null);
+
+        membershipManager.unsignedFunctionDurations.put(""test-tenant/test-namespace/func-2"",
+                membershipManager.unsignedFunctionDurations.get(""test-tenant/test-namespace/func-2"") - 30001);
+
+        membershipManager.checkFailures(functionMetaDataManager, functionRuntimeManager, schedulerManager);
+
+        verify(functionRuntimeManager, times(1)).removeAssignment(
+                argThat(new ArgumentMatcher<Function.Assignment>() {
+            @Override
+            public boolean matches(Object o) {
+                if (o instanceof Function.Assignment) {
+                    Function.Assignment assignment = (Function.Assignment) o;
+
+                    if (!assignment.equals(assignment2)) {
+                        return false;
+                    }
+                    return true;
+                }
+                return false;
+            }
+        }));
+
+        verify(schedulerManager, times(1)).schedule();
+    }
+
+    @Test
+    public void testCheckFailuresSomeUnassigned() throws Exception {
+        WorkerConfig workerConfig = new WorkerConfig();
+        workerConfig.setWorkerId(""worker-1"");
+        workerConfig.setThreadContainerFactory(new WorkerConfig.ThreadContainerFactory().setThreadGroupName(""test""));
+        workerConfig.setLimitsConfig(new LimitsConfig().setMaxBufferedTuples(10));
+        workerConfig.setPulsarServiceUrl(""pulsar://localhost:6650"");
+        workerConfig.setStateStorageServiceUrl(""foo"");
+        workerConfig.setMetricsConfig(new MetricsConfig().setMetricsSinkClassName(FunctionRuntimeManagerTest.TestSink.class.getName()));
+        workerConfig.setRescheduleTimeoutMs(30000);
+        SchedulerManager schedulerManager = mock(SchedulerManager.class);
+        FunctionRuntimeManager functionRuntimeManager = spy(new FunctionRuntimeManager(
+                workerConfig,
+                mock(PulsarClient.class),
+                mock(Namespace.class),
+         ",adding check for failures subroutine and fixing worker delete bug ( <issue_id> ) .,"""Added failure detection and rescheduling for Pulsar Functions""","""Implement leader election failure detection and rescheduling of functions""","""Add failure check and rescheduling for Pulsar Functions worker""

This commit adds the following changes to the Pulsar Functions worker:

1. Adds a new configuration option `failureCheckFreqMs` to control how often the worker checks for failures.
2. Adds a new configuration option `rescheduleTimeoutMs` to control how long the worker waits before rescheduling a failed function.
3. Modifies the `ClusterServiceCoordinator` class to check for failures and reschedule failed functions.
4. Modifies the `FunctionMetaDataManager` class to make the `getAllFunctionMetaData` method public.
5. Modifies the `FunctionRuntimeManager` class to add a new public method `findFunctionAssignment` and make the `deleteAssignment` method public.
6. Modifies the `MembershipManager` class to add a new static method `of` for creating `WorkerInfo` objects.

The changes in this commit are related to improving the fault tolerance of the Pulsar Functions worker by periodically checking for failures and rescheduling failed functions.","""Add failure detection and rescheduling mechanism for Pulsar functions with new configurations and tests."""
"diff --git a/docs/reference/upgrade/rolling_upgrade.asciidoc b/docs/reference/upgrade/rolling_upgrade.asciidoc
index 37be4d8cf8b..b29aaaf5e12 100644
--- a/docs/reference/upgrade/rolling_upgrade.asciidoc
+++ b/docs/reference/upgrade/rolling_upgrade.asciidoc
@@ -7,6 +7,12 @@ a time so upgrading does not interrupt service. Running multiple versions of
 not supported, as shards cannot be replicated from upgraded nodes to nodes
 running the older version.
 
+It is best to upgrade the master-ineligible nodes in your cluster first and then
+upgrade the master-eligible nodes. Once enough of the master-eligible nodes have
+been upgraded they may form a cluster that nodes of older versions cannot join.
+If you upgrade the master-eligible nodes last then all the other nodes will not
+be running an older version and so they will be able to join the cluster.
+
 Rolling upgrades are supported:
 
 * Between minor versions
@@ -53,6 +59,11 @@ include::shut-down-node.asciidoc[]
 --
 include::upgrade-node.asciidoc[]
 include::set-paths-tip.asciidoc[]
+
+[[rolling-upgrades-bootstrapping]]
+NOTE: You should leave `cluster.initial_master_nodes` unset while performing a
+rolling upgrade. Each upgraded node is joining an existing cluster so there is
+no need for <<modules-discovery-bootstrap-cluster,cluster bootstrapping>>.
 --
 
 . *Upgrade any plugins.*",Clarify rolling - upgrade docs ( <issue_id> ) .,"""Update rolling upgrade documentation with best practices and bootstrapping note""","""Improved rolling upgrade documentation: clarified upgrade order, supported versions, and bootstrapping considerations""","It seems like you're working on a document related to rolling upgrades in a cluster environment, possibly for a database or a distributed system. You've made some changes to the document, including:

1. Adding a recommendation to upgrade master-ineligible nodes first, followed by master-eligible nodes. This is to ensure that all nodes can join the cluster after the upgrade.

2. Including a note to leave `cluster.initial_master_nodes` unset while performing a rolling upgrade. This is because each upgraded node is joining an existing cluster, so there's no need for cluster bootstrapping.

As for the last line, it seems like you're trying to include a commit message in the document, but the commit message is not provided. If you need help with writing a commit message, it should briefly summarize the changes you've made. For example: ""Updated rolling upgrade instructions and added note about cluster bootstrapping"".",Update rolling upgrade procedure to upgrade master-ineligible nodes first and leave `cluster.initial_master_nodes` unset
"diff --git a/website/src/documentation/io/built-in.md b/website/src/documentation/io/built-in.md
index 580f3ed73e..6a73f6b2f0 100644
--- a/website/src/documentation/io/built-in.md
+++ b/website/src/documentation/io/built-in.md
@@ -24,7 +24,7 @@ Consult the [Programming Guide I/O section]({{site.baseurl }}/documentation/prog
   <td>Java</td>
   <td>
     <p><a href=""https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/AvroIO.java"">AvroIO</a></p>
-    <p><a href=""https://github.com/apache/beam/tree/master/sdks/java/io/hdfs"">Apache Hadoop HDFS</a></p>
+    <p><a href=""https://github.com/apache/beam/tree/master/sdks/java/io/hadoop-file-system"">Apache Hadoop File System</a></p>
     <p><a href=""https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TextIO.java"">TextIO</a></p>
     <p><a href=""https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/"">XML</a></p>
   </td>",Fix broken HDFS link on built - in IO page,"""Update link to Apache Hadoop File System in built-in I/O documentation""","""Update Java I/O section in documentation to use 'Apache Hadoop File System' instead of 'Apache Hadoop HDFS'.""","""Update link to Apache Hadoop File System in IO built-in documentation""",Update HDFS link to Hadoop File System in built-in I/O documentation.
"diff --git a/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/LabelScanStoreTxApplyRaceIT.java b/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/LabelScanStoreTxApplyRaceIT.java
index a0ef5ef5d1d..933974e4bf5 100644
--- a/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/LabelScanStoreTxApplyRaceIT.java
+++ b/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/LabelScanStoreTxApplyRaceIT.java
@@ -19,8 +19,8 @@
  */
 package org.neo4j.consistency;
 
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import java.util.Arrays;
 import java.util.concurrent.ThreadLocalRandom;
@@ -28,6 +28,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReferenceArray;
 
 import org.neo4j.consistency.checking.full.ConsistencyFlags;
+import org.neo4j.dbms.api.DatabaseManagementService;
 import org.neo4j.graphdb.Label;
 import org.neo4j.graphdb.Node;
 import org.neo4j.graphdb.NotFoundException;
@@ -35,16 +36,18 @@ import org.neo4j.graphdb.Transaction;
 import org.neo4j.internal.index.label.LabelScanStore;
 import org.neo4j.internal.recordstorage.RecordStorageEngine;
 import org.neo4j.io.layout.DatabaseLayout;
+import org.neo4j.kernel.internal.GraphDatabaseAPI;
 import org.neo4j.storageengine.api.CommandsToApply;
 import org.neo4j.storageengine.api.TransactionApplicationMode;
 import org.neo4j.test.Race;
 import org.neo4j.test.TestLabels;
-import org.neo4j.test.rule.EmbeddedDbmsRule;
-import org.neo4j.test.rule.SuppressOutput;
+import org.neo4j.test.extension.DbmsExtension;
+import org.neo4j.test.extension.Inject;
+import org.neo4j.test.extension.SuppressOutputExtension;
 
 import static java.lang.Integer.max;
 import static java.util.UUID.randomUUID;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.neo4j.configuration.Config.defaults;
 import static org.neo4j.internal.helpers.progress.ProgressMonitorFactory.NONE;
 import static org.neo4j.logging.FormattedLogProvider.toOutputStream;
@@ -54,7 +57,9 @@ import static org.neo4j.logging.FormattedLogProvider.toOutputStream;
  * where e.g. a transaction A which did CREATE NODE N and transaction B which did DELETE NODE N would have a chance to be applied to the
  * {@link LabelScanStore} in the reverse order, i.e. transaction B before transaction A, resulting in outdated label data remaining in the label index.
  */
-public class LabelScanStoreTxApplyRaceIT
+@DbmsExtension
+@ExtendWith( SuppressOutputExtension.class )
+class LabelScanStoreTxApplyRaceIT
 {
     // === CONTROL PANEL ===
     private static final int NUMBER_OF_DELETORS = 2;
@@ -65,18 +70,17 @@ public class LabelScanStoreTxApplyRaceIT
 
     private static final Label[] LABELS = TestLabels.values();
 
-    @Rule
-    public final EmbeddedDbmsRule db = new EmbeddedDbmsRule();
-
-    @Rule
-    public final SuppressOutput suppressOutput = SuppressOutput.suppressAll();
+    @Inject
+    private GraphDatabaseAPI db;
+    @Inject
+    private DatabaseManagementService managementService;
 
     /**
      * The test case is basically loads of concurrent CREATE/DELETE NODE or sometimes just CREATE, keeping the created node in an array
      * for dedicated deleter threads to pick up and delete as fast as they can see them. This concurrently with large creation transactions.
      */
     @Test
-    public void shouldStressIt() throws Throwable
+    void shouldStressIt() throws Throwable
     {
         // given
         Race race = new Race().withMaxDuration( 5, TimeUnit.SECONDS );
@@ -92,7 +96,8 @@ public class LabelScanStoreTxApplyRaceIT
 
         // then
         DatabaseLayout dbLayout = db.databaseLayout();
-        db.shutdownAndKeepStore();
+        managementService.shutdown();
+
         assertTrue( new ConsistencyCheckService().runFullConsistencyCheck( dbLayout, defaults(), NONE,
                 toOutputStream( System.out ), false, new ConsistencyFlags( true, true, true, false ) ).isSuccessful() );
     }
diff --git a/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/checking/IndexConsistencyIT.java b/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/checking/IndexConsistencyIT.java
index f46d1e113d2..90bccd8625d 100644
--- a/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/checking/IndexConsistencyIT.java
+++ b/community/community-it/consistency-it/src/test/java/org/neo4j/consistency/checking/IndexConsistencyIT.java
@@ -19,8 +19,8 @@
  */
 package org.neo4j.consistency.checking;
 
-import org.junit.Rule;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
 
 import java.io.File;
 import java.io.FileFilter;
@@ -34,6 +34,7 @@ import org.neo4j.configuration.Config;
 import org.neo4j.consistency.ConsistencyCheckService;
 import org.neo4j.consistency.checking.full.ConsistencyCheckIncompleteException;
 import org.neo4j.consistency.checking.full.ConsistencyFlags;
+import org.neo4j.dbms.api.DatabaseManagementService;
 import org.neo4j.graphdb.Label;
 import org.neo4j.graphdb.Node;
 import org.neo4j.graphdb.Transaction;
@@ -44,27 +45,34 @@ import org.neo4j.io.layout.DatabaseLayout;
 import org.neo4j.kernel.impl.transaction.log.checkpoint.CheckPointer;
 import org.neo4j.kernel.impl.transaction.log.checkpoint.SimpleTriggerInfo;
 import org.neo4j.kernel.impl.transaction.state.DefaultIndexProviderMap;
+import org.neo4j.kernel.internal.GraphDatabaseAPI;
 import org.neo4j.logging.AssertableLogProvider;
-import org.neo4j.test.rule.EmbeddedDbmsRule;
+import org.neo4j.test.extension.DbmsExtension;
+import org.neo4j.test.extension.Inject;
+import org.neo4j.test.extension.RandomExtension;
 import org.neo4j.test.rule.RandomRule;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.neo4j.internal.helpers.progress.ProgressMonitorFactory.NONE;
 import static org.neo4j.io.fs.FileUtils.copyRecursively;
 import static org.neo4j.test.TestLabels.LABEL_ONE;
 import static org.neo4j.test.TestLabels.LABEL_THREE;
 import static org.neo4j.test.TestLabels.LABEL_TWO;
 
-public class IndexConsistencyIT
+@DbmsExtension
+@ExtendWith( RandomExtension.class )
+class IndexConsistencyIT
 {
-    @Rule
-    public final EmbeddedDbmsRule db = new EmbeddedDbmsRule();
+    @Inject
+    private GraphDatabaseAPI db;
+    @Inject
+    private DatabaseManagementService managementService;
 
-    @Rule
-    public final RandomRule random = new RandomRule();
+    @Inject
+    private RandomRule random;
 
     private final AssertableLogProvider log = new AssertableLogProvider();
     private static final Label[] LABELS = new Label[]{LABEL_ONE, LABEL_TWO, LABEL_THREE};
@@ -75,7 +83,7 @@ public class IndexConsistencyIT
     private final FileFilter SOURCE_COPY_FILE_FILTER = file -> file.isDirectory() || file.getName().startsWith( ""index"" );
 
     @Test
-    public void reportNotCleanNativeIndex() throws IOException, ConsistencyCheckIncompleteException
+    void reportNotCleanNativeIndex() throws IOException, ConsistencyCheckIncompleteException
     {
         DatabaseLayout databaseLayout = db.databaseLayout();
         someData();
@@ -90,17 +98,17 @@ public class IndexConsistencyIT
             tx.success();
         }
 
-        db.shutdownAndKeepStore();
+        managementService.shutdown();
 
         copyRecursively( indexesCopy, indexSources );
 
         ConsistencyCheckService.Result result = fullConsistencyCheck();
-        assertFalse( ""Expected consistency check to fail"", result.isSuccessful() );
+        assertFalse( result.isSuccessful(), ""Expected consistency check to fail"" );
         assertThat( readReport( result ), containsString(""WARN : Index was not properly shutdown and rebuild is required."") );
     }
 
     @Test
-    public void reportNotCleanNativeIndexWithCorrectData() throws IOException, ConsistencyCheckIncompleteException
+    void reportNotCleanNativeIndexWithCorrectData() throws IOException, ConsistencyCheckIncompleteException
     {
         DatabaseLayout databaseLayout = db.databaseLayout();
         someData();
@@ -109,18 +117,18 @@ public class IndexConsistencyIT
         File indexSources = resolveComponent( DefaultIndexProviderMap.class ).getDefaultProvider().directoryStructure().rootDirectory();
         copyRecursively( indexSources, indexesCopy, SOURCE_COPY_FILE_FILTER );
 
-        db.shutdownAndKeepStore();
+        managementService.shutdown();
 
         copyRecursively( indexesCopy, indexSources );
 
         ConsistencyCheckService.Result result = fullConsistencyCheck();
-        assertTrue( ""Expected consistency check to fail"", result.isSuccessful() );
+        assertTrue( result.isSuccessful(), ""Expected consistency check to fail"" );
         assertThat( readReport( result ), containsString(""WARN : Index was not properly shutdown and rebuild is required."") );
     }
 
     private <T> T resolveComponent( Class<T> clazz )
     {
-        return db.resolveDependency( clazz );
+        return db.getDependencyResolver().resolveDependency( clazz );
     }
 
     private String readReport( ConsistencyCheckService.Result result ) throws IOException
@@ -128,12 +136,12 @@ public class IndexConsistencyIT
         return Files.readString( result.reportFile().toPath() );
     }
 
-    List<Pair<Long,Label[]>> someData()
+    void someData()
     {
-        return someData( 50 );
+        someData( 50 );
     }
 
-    List<Pair<Long,Label[]>> someData( int numberOfModifications )
+    void someData( int numberOfModifications )
     {
         List<Pair<Long,Label[]>> existingNodes;
         existingNodes = new ArrayList<>();
@@ -152,10 +160,9 @@ public class IndexConsistencyIT
             db.schema().awaitIndexesOnline( 1, TimeUnit.MINUTES );
             tx.success();
         }
-        return existingNodes;
     }
 
-    private List<Pair<Long,Label[]>> randomModifications( List<Pair<Long,Label[]>> existingNodes,
+    private void randomModifications( List<Pair<Long,Label[]>> existingNodes,
             int numberOfModifications )
     {
         for ( int i = 0; i < numberOfModifications; i++ )
@@ -174,7 +181,6 @@ public class IndexConsistencyIT
                 modifyLabelsOnExistingNode( existingNodes );
             }
         }
-        return existingNodes;
     }
 
     private void createNewNode( List<Pair<Long,Label[]>> existingNodes )",Migrate 2 CC tests to junit 5,"""Upgrade test framework from JUnit 4 to JUnit 5 in consistency-it module""","Here are two possible commit messages, one for each file:

1. For `LabelScanStoreTxApplyRaceIT.java`:
```markdown
Migrate test to use DbmsExtension and SuppressOutputExtension
```

2. For `IndexConsistencyIT.java`:
```markdown
Migrate test to use DbmsExtension, RandomExtension and SuppressOutputExtension
```","""Update LabelScanStoreTxApplyRaceIT and IndexConsistencyIT to use JUnit 5 and DbmsExtension""

Explanation:
The changes in the provided diff involve updating the import statements from JUnit 4 to JUnit 5, replacing the `@Rule` annotation with `@ExtendWith`, and injecting the `GraphDatabaseAPI` and `DatabaseManagementService` dependencies using the `@Inject` annotation in conjunction with the `DbmsExtension`. Additionally, the `EmbeddedDbmsRule` has been removed, and the `SuppressOutput` rule has been replaced with the `SuppressOutputExtension`.","""Refactored consistency tests to use JUnit 5 and updated relevant dependency injections and method assertions."""
"diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
index f6a3b7d7c0..87cb5cc4c5 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java
@@ -14,7 +14,7 @@
 package com.facebook.presto.sql.analyzer;
 
 import com.facebook.presto.metadata.Metadata;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
@@ -196,7 +196,7 @@ public class AggregationAnalyzer
         }
 
         @Override
-        protected Boolean visitArithmeticExpression(ArithmeticExpression node, Void context)
+        protected Boolean visitArithmeticBinary(ArithmeticBinaryExpression node, Void context)
         {
             return process(node.getLeft(), context) && process(node.getRight(), context);
         }
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
index fef0bf7b5e..ab57dee8ae 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java
@@ -24,7 +24,7 @@ import com.facebook.presto.spi.type.TypeSignature;
 import com.facebook.presto.sql.parser.SqlParser;
 import com.facebook.presto.sql.planner.DependencyExtractor;
 import com.facebook.presto.sql.planner.Symbol;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
@@ -443,7 +443,7 @@ public class ExpressionAnalyzer
         }
 
         @Override
-        protected Type visitArithmeticExpression(ArithmeticExpression node, AnalysisContext context)
+        protected Type visitArithmeticBinary(ArithmeticBinaryExpression node, AnalysisContext context)
         {
             return getOperator(context, node, OperatorType.valueOf(node.getType().name()), node.getLeft(), node.getRight());
         }
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
index b077f97acf..192fc1a40d 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java
@@ -23,7 +23,7 @@ import com.facebook.presto.spi.PrestoException;
 import com.facebook.presto.spi.RecordCursor;
 import com.facebook.presto.spi.block.Block;
 import com.facebook.presto.spi.type.Type;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
@@ -433,7 +433,7 @@ public class ExpressionInterpreter
         }
 
         @Override
-        protected Object visitArithmeticExpression(ArithmeticExpression node, Object context)
+        protected Object visitArithmeticBinary(ArithmeticBinaryExpression node, Object context)
         {
             Object left = process(node.getLeft(), context);
             if (left == null) {
@@ -445,7 +445,7 @@ public class ExpressionInterpreter
             }
 
             if (hasUnresolvedValue(left, right)) {
-                return new ArithmeticExpression(node.getType(), toExpression(left, expressionTypes.get(node.getLeft())), toExpression(right, expressionTypes.get(node.getRight())));
+                return new ArithmeticBinaryExpression(node.getType(), toExpression(left, expressionTypes.get(node.getLeft())), toExpression(right, expressionTypes.get(node.getRight())));
             }
 
             return invokeOperator(OperatorType.valueOf(node.getType().name()), types(node.getLeft(), node.getRight()), ImmutableList.of(left, right));
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java
index 2b02a36e4e..c1b34b6e8f 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java
@@ -39,7 +39,7 @@ import com.facebook.presto.sql.planner.plan.UnionNode;
 import com.facebook.presto.sql.planner.plan.UnnestNode;
 import com.facebook.presto.sql.planner.plan.ValuesNode;
 import com.facebook.presto.sql.tree.AliasedRelation;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.BooleanLiteral;
 import com.facebook.presto.sql.tree.CoalesceExpression;
 import com.facebook.presto.sql.tree.ComparisonExpression;
@@ -307,7 +307,7 @@ class RelationPlanner
         }
         Optional<Symbol> sampleWeight = Optional.empty();
         if (leftPlanBuilder.getSampleWeight().isPresent() || rightPlanBuilder.getSampleWeight().isPresent()) {
-            Expression expression = new ArithmeticExpression(ArithmeticExpression.Type.MULTIPLY, oneIfNull(leftPlanBuilder.getSampleWeight()), oneIfNull(rightPlanBuilder.getSampleWeight()));
+            Expression expression = new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY, oneIfNull(leftPlanBuilder.getSampleWeight()), oneIfNull(rightPlanBuilder.getSampleWeight()));
             sampleWeight = Optional.of(symbolAllocator.newSymbol(expression, BIGINT));
             ImmutableMap.Builder<Symbol, Expression> projections = ImmutableMap.builder();
             projections.put(sampleWeight.get(), expression);
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
index f057776c1d..e124212980 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/Signatures.java
@@ -18,7 +18,7 @@ import com.facebook.presto.metadata.Signature;
 import com.facebook.presto.spi.type.StandardTypes;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.spi.type.TypeSignature;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ComparisonExpression;
 import com.facebook.presto.sql.tree.LogicalBinaryExpression;
 import com.facebook.presto.type.LikePatternType;
@@ -91,7 +91,7 @@ public final class Signatures
         return internalOperator(""NEGATION"", returnType.getTypeSignature(), valueType.getTypeSignature());
     }
 
-    public static Signature arithmeticExpressionSignature(ArithmeticExpression.Type expressionType, Type returnType, Type leftType, Type rightType)
+    public static Signature arithmeticExpressionSignature(ArithmeticBinaryExpression.Type expressionType, Type returnType, Type leftType, Type rightType)
     {
         return internalOperator(expressionType.name(), returnType.getTypeSignature(), leftType.getTypeSignature(), rightType.getTypeSignature());
     }
diff --git a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
index 23bacfaaa7..8fe60e6dfe 100644
--- a/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
+++ b/presto-main/src/main/java/com/facebook/presto/sql/relational/SqlToRowExpressionTranslator.java
@@ -20,7 +20,7 @@ import com.facebook.presto.spi.type.TimeZoneKey;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.spi.type.TypeSignature;
 import com.facebook.presto.sql.relational.optimizer.ExpressionOptimizer;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
@@ -269,7 +269,7 @@ public final class SqlToRowExpressionTranslator
         }
 
         @Override
-        protected RowExpression visitArithmeticExpression(ArithmeticExpression node, Void context)
+        protected RowExpression visitArithmeticBinary(ArithmeticBinaryExpression node, Void context)
         {
             RowExpression left = process(node.getLeft(), context);
             RowExpression right = process(node.getRight(), context);
diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestEqualityInference.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestEqualityInference.java
index f0f81f4964..37b36c4119 100644
--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestEqualityInference.java
+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestEqualityInference.java
@@ -14,7 +14,7 @@
 package com.facebook.presto.sql.planner;
 
 import com.facebook.presto.sql.ExpressionUtils;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ComparisonExpression;
 import com.facebook.presto.sql.tree.Expression;
 import com.facebook.presto.sql.tree.LongLiteral;
@@ -336,7 +336,7 @@ public class TestEqualityInference
 
     private static Expression add(Expression expression1, Expression expression2)
     {
-        return new ArithmeticExpression(ArithmeticExpression.Type.ADD, expression1, expression2);
+        return new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD, expression1, expression2);
     }
 
     private static Expression multiply(String symbol1, String symbol2)
@@ -346,7 +346,7 @@ public class TestEqualityInference
 
     private static Expression multiply(Expression expression1, Expression expression2)
     {
-        return new ArithmeticExpression(ArithmeticExpression.Type.MULTIPLY, expression1, expression2);
+        return new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY, expression1, expression2);
     }
 
     private static Expression equals(String symbol1, String symbol2)
diff --git a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java
index bfe6c53835..2104143f8a 100644
--- a/presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java
+++ b/presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java
@@ -22,7 +22,7 @@ import com.facebook.presto.spi.block.BlockBuilder;
 import com.facebook.presto.spi.block.BlockBuilderStatus;
 import com.facebook.presto.spi.type.Type;
 import com.facebook.presto.sql.parser.SqlParser;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.google.common.collect.ImmutableMap;
 import org.testng.annotations.Test;
 
@@ -80,7 +80,7 @@ public class TestInterpretedProjectionFunction
     @Test
     public void testArithmeticExpressionWithNulls()
     {
-        for (ArithmeticExpression.Type type : ArithmeticExpression.Type.values()) {
+        for (ArithmeticBinaryExpression.Type type : ArithmeticBinaryExpression.Type.values()) {
             assertProjection(""NULL "" + type.getValue() + "" NULL"", null);
 
             assertProjection(""42 "" + type.getValue() + "" NULL"", null);
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java b/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
index 43c0fd0463..712a2e6ae6 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java
@@ -14,7 +14,7 @@
 package com.facebook.presto.sql;
 
 import com.facebook.presto.sql.tree.AllColumns;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
@@ -317,7 +317,7 @@ public final class ExpressionFormatter
         }
 
         @Override
-        protected String visitArithmeticExpression(ArithmeticExpression node, Void context)
+        protected String visitArithmeticBinary(ArithmeticBinaryExpression node, Void context)
         {
             return formatBinaryExpression(node.getType().getValue(), node.getLeft(), node.getRight());
         }
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/TreePrinter.java b/presto-parser/src/main/java/com/facebook/presto/sql/TreePrinter.java
index 1ea5586a31..491c233a69 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/TreePrinter.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/TreePrinter.java
@@ -15,7 +15,7 @@ package com.facebook.presto.sql;
 
 import com.facebook.presto.sql.tree.AliasedRelation;
 import com.facebook.presto.sql.tree.AllColumns;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.AstVisitor;
 import com.facebook.presto.sql.tree.BooleanLiteral;
 import com.facebook.presto.sql.tree.ComparisonExpression;
@@ -189,11 +189,11 @@ public class TreePrinter
             }
 
             @Override
-            protected Void visitArithmeticExpression(ArithmeticExpression node, Integer indentLevel)
+            protected Void visitArithmeticBinary(ArithmeticBinaryExpression node, Integer indentLevel)
             {
                 print(indentLevel, node.getType().toString());
 
-                super.visitArithmeticExpression(node, indentLevel + 1);
+                super.visitArithmeticBinary(node, indentLevel + 1);
 
                 return null;
             }
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java b/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
index c7880d5a88..6f6bc16efe 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java
@@ -16,7 +16,7 @@ package com.facebook.presto.sql.parser;
 import com.facebook.presto.sql.tree.AliasedRelation;
 import com.facebook.presto.sql.tree.AllColumns;
 import com.facebook.presto.sql.tree.Approximate;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.BetweenPredicate;
 import com.facebook.presto.sql.tree.BooleanLiteral;
@@ -676,7 +676,7 @@ class AstBuilder
     @Override
     public Node visitArithmeticBinary(@NotNull SqlBaseParser.ArithmeticBinaryContext context)
     {
-        return new ArithmeticExpression(
+        return new ArithmeticBinaryExpression(
                 getArithmeticBinaryOperator(context.operator),
                 (Expression) visit(context.left),
                 (Expression) visit(context.right));
@@ -1042,22 +1042,22 @@ class AstBuilder
                 .collect(Collectors.toList());
     }
 
-    private static ArithmeticExpression.Type getArithmeticBinaryOperator(Token operator)
+    private static ArithmeticBinaryExpression.Type getArithmeticBinaryOperator(Token operator)
     {
         switch (operator.getType()) {
             case SqlBaseLexer.PLUS:
-                return ArithmeticExpression.Type.ADD;
+                return ArithmeticBinaryExpression.Type.ADD;
             case SqlBaseLexer.MINUS:
-                return ArithmeticExpression.Type.SUBTRACT;
+                return ArithmeticBinaryExpression.Type.SUBTRACT;
             case SqlBaseLexer.ASTERISK:
-                return ArithmeticExpression.Type.MULTIPLY;
+                return ArithmeticBinaryExpression.Type.MULTIPLY;
             case SqlBaseLexer.SLASH:
-                return ArithmeticExpression.Type.DIVIDE;
+                return ArithmeticBinaryExpression.Type.DIVIDE;
             case SqlBaseLexer.PERCENT:
-                return ArithmeticExpression.Type.MODULUS;
+                return ArithmeticBinaryExpression.Type.MODULUS;
         }
 
-        throw new IllegalArgumentException(""Unsupported operator: "" + operator.getText());
+        throw new UnsupportedOperationException(""Unsupported operator: "" + operator.getText());
     }
 
     private static ComparisonExpression.Type getComparisonOperator(Token symbol)
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticBinaryExpression.java
similarity index 89%
rename from presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java
rename to presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticBinaryExpression.java
index 69189df47c..e915e92aba 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticBinaryExpression.java
@@ -13,7 +13,7 @@
  */
 package com.facebook.presto.sql.tree;
 
-public class ArithmeticExpression
+public class ArithmeticBinaryExpression
         extends Expression
 {
     public enum Type
@@ -40,7 +40,7 @@ public class ArithmeticExpression
     private final Expression left;
     private final Expression right;
 
-    public ArithmeticExpression(Type type, Expression left, Expression right)
+    public ArithmeticBinaryExpression(Type type, Expression left, Expression right)
     {
         this.type = type;
         this.left = left;
@@ -65,7 +65,7 @@ public class ArithmeticExpression
     @Override
     public <R, C> R accept(AstVisitor<R, C> visitor, C context)
     {
-        return visitor.visitArithmeticExpression(this, context);
+        return visitor.visitArithmeticBinary(this, context);
     }
 
     @Override
@@ -78,7 +78,7 @@ public class ArithmeticExpression
             return false;
         }
 
-        ArithmeticExpression that = (ArithmeticExpression) o;
+        ArithmeticBinaryExpression that = (ArithmeticBinaryExpression) o;
 
         if (!left.equals(that.left)) {
             return false;
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java
index 28175dbcaf..ccc2d806aa 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java
@@ -42,7 +42,7 @@ public abstract class AstVisitor<R, C>
         return visitExpression(node, context);
     }
 
-    protected R visitArithmeticExpression(ArithmeticExpression node, C context)
+    protected R visitArithmeticBinary(ArithmeticBinaryExpression node, C context)
     {
         return visitExpression(node, context);
     }
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java
index c48448d4f0..35e6ed3454 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java
@@ -29,7 +29,7 @@ public abstract class DefaultTraversalVisitor<R, C>
     }
 
     @Override
-    protected R visitArithmeticExpression(ArithmeticExpression node, C context)
+    protected R visitArithmeticBinary(ArithmeticBinaryExpression node, C context)
     {
         process(node.getLeft(), context);
         process(node.getRight(), context);
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionRewriter.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionRewriter.java
index ae0750329e..664aab517a 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionRewriter.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionRewriter.java
@@ -25,7 +25,7 @@ public class ExpressionRewriter<C>
         return rewriteExpression(node, context, treeRewriter);
     }
 
-    public Expression rewriteArithmeticExpression(ArithmeticExpression node, C context, ExpressionTreeRewriter<C> treeRewriter)
+    public Expression rewriteArithmeticBinary(ArithmeticBinaryExpression node, C context, ExpressionTreeRewriter<C> treeRewriter)
     {
         return rewriteExpression(node, context, treeRewriter);
     }
diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionTreeRewriter.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionTreeRewriter.java
index c5d345e6e4..ff9bc6af11 100644
--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionTreeRewriter.java
+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/ExpressionTreeRewriter.java
@@ -87,10 +87,10 @@ public final class ExpressionTreeRewriter<C>
         }
 
         @Override
-        public Expression visitArithmeticExpression(ArithmeticExpression node, Context<C> context)
+        public Expression visitArithmeticBinary(ArithmeticBinaryExpression node, Context<C> context)
         {
             if (!context.isDefaultRewrite()) {
-                Expression result = rewriter.rewriteArithmeticExpression(node, context.get(), ExpressionTreeRewriter.this);
+                Expression result = rewriter.rewriteArithmeticBinary(node, context.get(), ExpressionTreeRewriter.this);
                 if (result != null) {
                     return result;
                 }
@@ -100,7 +100,7 @@ public final class ExpressionTreeRewriter<C>
             Expression right = rewrite(node.getRight(), context.get());
 
             if (left != node.getLeft() || right != node.getRight()) {
-                return new ArithmeticExpression(node.getType(), left, right);
+                return new ArithmeticBinaryExpression(node.getType(), left, right);
             }
 
             return node;
diff --git a/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java b/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java
index 6d81836c7f..e2d90e458e 100644
--- a/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java
+++ b/presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java
@@ -14,7 +14,7 @@
 package com.facebook.presto.sql.parser;
 
 import com.facebook.presto.sql.tree.AllColumns;
-import com.facebook.presto.sql.tree.ArithmeticExpression;
+import com.facebook.presto.sql.tree.ArithmeticBinaryExpression;
 import com.facebook.presto.sql.tree.ArrayConstructor;
 import com.facebook.presto.sql.tree.Cast;
 import com.facebook.presto.sql.tree.CurrentTime;
@@ -320,25 +320,25 @@ public class TestSqlParser
                 new NotExpression(new LongLiteral(""1"")),
                 new LongLiteral(""2"")));
 
-        assertExpression(""-1 + 2"", new ArithmeticExpression(ArithmeticExpression.Type.ADD,
+        assertExpression(""-1 + 2"", new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD,
                 new NegativeExpression(new LongLiteral(""1"")),
                 new LongLiteral(""2"")));
 
-        assertExpression(""1 - 2 - 3"", new ArithmeticExpression(ArithmeticExpression.Type.SUBTRACT,
-                new ArithmeticExpression(ArithmeticExpression.Type.SUBTRACT,
+        assertExpression(""1 - 2 - 3"", new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.SUBTRACT,
+                new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.SUBTRACT,
                         new LongLiteral(""1""),
                         new LongLiteral(""2"")),
                 new LongLiteral(""3"")));
 
-        assertExpression(""1 / 2 / 3"", new ArithmeticExpression(ArithmeticExpression.Type.DIVIDE,
-                new ArithmeticExpression(ArithmeticExpression.Type.DIVIDE,
+        assertExpression(""1 / 2 / 3"", new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.DIVIDE,
+                new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.DIVIDE,
                         new LongLiteral(""1""),
                         new LongLiteral(""2"")),
                 new LongLiteral(""3"")));
 
-        assertExpression(""1 + 2 * 3"", new ArithmeticExpression(ArithmeticExpression.Type.ADD,
+        assertExpression(""1 + 2 * 3"", new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.ADD,
                 new LongLiteral(""1""),
-                new ArithmeticExpression(ArithmeticExpression.Type.MULTIPLY,
+                new ArithmeticBinaryExpression(ArithmeticBinaryExpression.Type.MULTIPLY,
                         new LongLiteral(""2""),
                         new LongLiteral(""3""))));
 ",Rename ArithmeticExpression to ArithmeticBinaryExpression,"""Rename ArithmeticExpression to ArithmeticBinaryExpression""","Rename ArithmeticExpression to ArithmeticBinaryExpression

This commit message accurately reflects the changes made in the code. The diff shows that the class `ArithmeticExpression` has been renamed to `ArithmeticBinaryExpression` in multiple places throughout the codebase. This change is likely to reflect the fact that arithmetic expressions in the Presto SQL parser are now binary expressions, rather than general arithmetic expressions.","Refactor ArithmeticExpression to ArithmeticBinaryExpression

 This commit renames the class ArithmeticExpression to ArithmeticBinaryExpression and updates all relevant references in the codebase. The class represents a binary arithmetic expression and has two operands: left and right. The class also defines an enum Type which represents the type of arithmetic operation (ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULUS).

 The renaming is done to better reflect the purpose of the class, as it only represents binary arithmetic expressions. The refactoring includes updating all references to the class in the codebase, including in tests and documentation. The changes do not affect the functionality of the code.",Refactor: Rename `ArithmeticExpression` to `ArithmeticBinaryExpression` for consistency and clarity across the codebase.
"diff --git a/dex-dumper/pom.xml b/dex-dumper/pom.xml
index 8c64c39..256b88f 100644
--- a/dex-dumper/pom.xml
+++ b/dex-dumper/pom.xml
@@ -1,10 +1,17 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.googlecode.dex2jar</groupId>
+		<artifactId>dex2jar</artifactId>
+		<version>1.0</version>
+	</parent>
+
 	<groupId>com.googlecode.dex2jar</groupId>
 	<artifactId>dex-dumper</artifactId>
-	<name>dex2jar</name>
 	<version>1.0</version>
+	<name>Dex Dumper</name>
 	<description>A tool for converting Android's .dex format to Java's .class format</description>
 	<url>http://code.google.como/p/dex2jar/</url>
 	<dependencies>
diff --git a/dex-reader/pom.xml b/dex-reader/pom.xml
index e1b87cb..f33b5d1 100644
--- a/dex-reader/pom.xml
+++ b/dex-reader/pom.xml
@@ -1,10 +1,17 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.googlecode.dex2jar</groupId>
+		<artifactId>dex2jar</artifactId>
+		<version>1.0</version>
+	</parent>
+
 	<groupId>com.googlecode.dex2jar</groupId>
 	<artifactId>dex-reader</artifactId>
-	<name>dex2jar-Dex file reader</name>
 	<version>1.0</version>
+	<name>Dex Reader</name>
 	<description>A tool for converting Android's .dex format to Java's .class format</description>
 	<url>http://code.google.como/p/dex2jar/</url>
 	<dependencies>
diff --git a/dex-translator/pom.xml b/dex-translator/pom.xml
index 4ba7bef..1417508 100644
--- a/dex-translator/pom.xml
+++ b/dex-translator/pom.xml
@@ -1,10 +1,17 @@
 <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
 	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>com.googlecode.dex2jar</groupId>
+		<artifactId>dex2jar</artifactId>
+		<version>1.0</version>
+	</parent>
+
 	<groupId>com.googlecode.dex2jar</groupId>
 	<artifactId>dex-translator</artifactId>
-	<name>dex2jar</name>
 	<version>0.0.9.0-SNAPSHOT</version>
+	<name>Dex Translator</name>
 	<description>A tool for converting Android's .dex format to Java's .class format</description>
 	<url>http://code.google.como/p/dex2jar/</url>
 	<dependencies>
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..2733dd2
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,53 @@
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>com.googlecode.dex2jar</groupId>
+	<artifactId>dex2jar</artifactId>
+	<packaging>pom</packaging>
+	<name>dex2jar</name>
+	<version>1.0</version>
+	<description>A tool for converting Android's .dex format to Java's .class format</description>
+	<url>http://code.google.como/p/dex2jar/</url>
+
+	<modules>
+		<module>dex-reader</module>
+		<module>dex-dumper</module>
+		<module>dex-translator</module>
+	</modules>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<source>1.6</source>
+					<target>1.6</target>
+					<encoding>${project.build.sourceEncoding}</encoding>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-source-plugin</artifactId>
+				<executions>
+					<execution>
+						<id>attach-sources</id>
+						<goals>
+							<goal>jar</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-resources-plugin</artifactId>
+				<configuration>
+					<encoding>${project.build.sourceEncoding}</encoding>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+	<properties>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
+</project>
\ No newline at end of file",1 . add pom . xml .,"""Added Maven parent POM and updated module POMs for dex-reader, dex-dumper, and dex-translator""","""Added parent POM and module configuration for dex2jar project""","""Add parent pom and update names and descriptions in module poms""

This commit adds a parent pom.xml file to the dex2jar project and updates the names and descriptions in the module pom.xml files (dex-dumper, dex-reader, and dex-translator). The parent pom.xml file includes build configurations and properties that are inherited by the module pom.xml files. It also specifies the modules that make up the project. The names and descriptions of the modules have been updated to be more descriptive and consistent.","Added parent POM for dex2jar project; updated child projects (dex-dumper, dex-reader, dex-translator) to use it."
"diff --git a/src/test/shell/bazel/test-setup.sh b/src/test/shell/bazel/test-setup.sh
index b9cc243ee7..b4ae28f051 100755
--- a/src/test/shell/bazel/test-setup.sh
+++ b/src/test/shell/bazel/test-setup.sh
@@ -36,6 +36,7 @@ function setup_bazelrc() {
   cat >$TEST_TMPDIR/bazelrc <<EOF
 startup --output_user_root=${bazel_root}
 startup --host_javabase=${bazel_javabase}
+build -j 8
 ${EXTRA_BAZELRC:-}
 EOF
 }",Limit the number of parallel jobs in test Bazel instances so that running the tests ( which spawn multiple tests in the outside Bazel instance with each its own inner Bazel instance which in turn have their own thread pool ) doesn \' t grind the machine t,"""Set default parallelism to 8 in bazel test setup""","""Add build option to bazelrc setup""

This commit message is concise and accurately describes the change made in the commit. It mentions the addition of a new option to the bazelrc setup, which is the build option with a specified number of jobs (-j 8).","""Added 'build -j 8' to bazelrc in test-setup.sh""",Added parameter to Bazel configuration to set maximum build parallelism to 8 in the test setup script.
"diff --git a/compiler/src/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/CheckGraalIntrinsics.java b/compiler/src/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/CheckGraalIntrinsics.java
index 9b1dd1c80b9..8c2cba0bfae 100644
--- a/compiler/src/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/CheckGraalIntrinsics.java
+++ b/compiler/src/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/CheckGraalIntrinsics.java
@@ -277,8 +277,6 @@ public class CheckGraalIntrinsics extends GraalTest {
                             ""java/lang/Math.fma(FFF)F"",
                             // Just check if the argument is a compile time constant
                             ""java/lang/invoke/MethodHandleImpl.isCompileConstant(Ljava/lang/Object;)Z"",
-                            // Some logic and a runtime call
-                            ""java/util/ArraysSupport.vectorizedMismatch(Ljava/lang/Object;JLjava/lang/Object;JII)I"",
                             // Only used as a marker for vectorization?
                             ""java/util/stream/Streams$RangeIntSpliterator.forEachRemaining(Ljava/util/function/IntConsumer;)V"",
                             // Only implemented on non-AMD64 platforms (some logic and runtime call)
@@ -365,8 +363,7 @@ public class CheckGraalIntrinsics extends GraalTest {
 
         if (isJDK10OrHigher()) {
             add(toBeInvestigated,
-                            ""java/lang/Math.multiplyHigh(JJ)J"",
-                            ""jdk/internal/util/ArraysSupport.vectorizedMismatch(Ljava/lang/Object;JLjava/lang/Object;JII)I"");
+                            ""java/lang/Math.multiplyHigh(JJ)J"");
         }
 
         if (isJDK11OrHigher()) {
@@ -443,6 +440,7 @@ public class CheckGraalIntrinsics extends GraalTest {
                 add(toBeInvestigated,
                                 ""com/sun/crypto/provider/CounterMode.implCrypt([BII[BI)I"",
                                 ""java/lang/Thread.onSpinWait()V"",
+                                ""java/util/ArraysSupport.vectorizedMismatch(Ljava/lang/Object;JLjava/lang/Object;JII)I"",
                                 ""jdk/internal/misc/Unsafe.getCharUnaligned(Ljava/lang/Object;J)C"",
                                 ""jdk/internal/misc/Unsafe.getIntUnaligned(Ljava/lang/Object;J)I"",
                                 ""jdk/internal/misc/Unsafe.getLongUnaligned(Ljava/lang/Object;J)J"",
@@ -452,6 +450,10 @@ public class CheckGraalIntrinsics extends GraalTest {
                                 ""jdk/internal/misc/Unsafe.putLongUnaligned(Ljava/lang/Object;JJ)V"",
                                 ""jdk/internal/misc/Unsafe.putShortUnaligned(Ljava/lang/Object;JS)V"");
             }
+            if (isJDK10OrHigher()) {
+                add(toBeInvestigated,
+                                ""jdk/internal/util/ArraysSupport.vectorizedMismatch(Ljava/lang/Object;JLjava/lang/Object;JII)I"");
+            }
         }
 
         /*
diff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java
index 13a53554e6d..e637f48dad0 100644
--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java
+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java
@@ -106,6 +106,7 @@ public class GraalHotSpotVMConfig extends GraalHotSpotVMConfigBase {
     private final boolean useMontgomerySquareIntrinsic = getFlag(""UseMontgomerySquareIntrinsic"", Boolean.class, false);
     private final boolean useMulAddIntrinsic = getFlag(""UseMulAddIntrinsic"", Boolean.class, false);
     private final boolean useSquareToLenIntrinsic = getFlag(""UseSquareToLenIntrinsic"", Boolean.class, false);
+    public final boolean useVectorizedMismatchIntrinsic = getFlag(""UseVectorizedMismatchIntrinsic"", Boolean.class, false);
 
     /*
      * These are methods because in some JDKs the flags are visible but the stubs themselves haven't
diff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotBackend.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotBackend.java
index 9e74903b0f3..716cfce524d 100644
--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotBackend.java
+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotBackend.java
@@ -288,6 +288,18 @@ public abstract class HotSpotBackend extends Backend implements FrameMap.Referen
     private static native int counterModeAESCrypt(@ConstantNodeParameter ForeignCallDescriptor descriptor, Word srcAddr, Word dstAddr, Word kPtr, Word cntPtr, int len, Word encCntPtr,
                     Word used);
 
+    /**
+     * Descriptor for {@code StubRoutines::_vectorizedMismatch}.
+     */
+    public static final ForeignCallDescriptor VECTORIZED_MISMATCHED = new ForeignCallDescriptor(""vectorizedMismatch"", int.class, Word.class, Word.class, int.class, int.class);
+
+    public static int vectorizedMismatch(Word aAddr, Word bAddr, int length, int log2ArrayIndexScale) {
+        return vectorizedMismatchStub(VECTORIZED_MISMATCHED, aAddr, bAddr, length, log2ArrayIndexScale);
+    }
+
+    @NodeIntrinsic(ForeignCallNode.class)
+    private static native int vectorizedMismatchStub(@ConstantNodeParameter ForeignCallDescriptor descriptor, Word aAddr, Word bAddr, int length, int log2ArrayIndexScale);
+
     /**
      * @see VMErrorNode
      */
diff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotGraphBuilderPlugins.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotGraphBuilderPlugins.java
index 57405753ebc..2d616dcf7ef 100644
--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotGraphBuilderPlugins.java
+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotGraphBuilderPlugins.java
@@ -47,6 +47,7 @@ import org.graalvm.compiler.core.common.type.TypeReference;
 import org.graalvm.compiler.hotspot.GraalHotSpotVMConfig;
 import org.graalvm.compiler.hotspot.nodes.CurrentJavaThreadNode;
 import org.graalvm.compiler.hotspot.replacements.AESCryptSubstitutions;
+import org.graalvm.compiler.hotspot.replacements.ArraysSupportSubstitutions;
 import org.graalvm.compiler.hotspot.replacements.BigIntegerSubstitutions;
 import org.graalvm.compiler.hotspot.replacements.CounterModeSubstitutions;
 import org.graalvm.compiler.hotspot.replacements.CRC32CSubstitutions;
@@ -174,6 +175,7 @@ public class HotSpotGraphBuilderPlugins {
                 StandardGraphBuilderPlugins.registerInvocationPlugins(metaAccess, snippetReflection, invocationPlugins, replacementBytecodeProvider, true, false);
                 registerArrayPlugins(invocationPlugins, replacementBytecodeProvider);
                 registerStringPlugins(invocationPlugins, replacementBytecodeProvider);
+                registerArraysSupportPlugins(invocationPlugins, config, replacementBytecodeProvider);
 
                 for (NodeIntrinsicPluginFactory factory : GraalServices.load(NodeIntrinsicPluginFactory.class)) {
                     factory.registerPlugins(invocationPlugins, nodeIntrinsificationProvider);
@@ -572,4 +574,11 @@ public class HotSpotGraphBuilderPlugins {
             r.registerMethodSubstitution(CRC32CSubstitutions.class, ""updateDirectByteBuffer"", int.class, long.class, int.class, int.class);
         }
     }
+
+    private static void registerArraysSupportPlugins(InvocationPlugins plugins, GraalHotSpotVMConfig config, BytecodeProvider bytecodeProvider) {
+        if (config.useVectorizedMismatchIntrinsic) {
+            Registration r = new Registration(plugins, ""jdk.internal.util.ArraysSupport"", bytecodeProvider);
+            r.registerMethodSubstitution(ArraysSupportSubstitutions.class, ""vectorizedMismatch"", Object.class, long.class, Object.class, long.class, int.class, int.class);
+        }
+    }
 }
diff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotHostForeignCallsProvider.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotHostForeignCallsProvider.java
index 476dbeeefb0..85229b261f9 100644
--- a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotHostForeignCallsProvider.java
+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotHostForeignCallsProvider.java
@@ -60,6 +60,7 @@ import static org.graalvm.compiler.hotspot.HotSpotBackend.SHA5_IMPL_COMPRESS;
 import static org.graalvm.compiler.hotspot.HotSpotBackend.SHA_IMPL_COMPRESS;
 import static org.graalvm.compiler.hotspot.HotSpotBackend.SQUARE_TO_LEN;
 import static org.graalvm.compiler.hotspot.HotSpotBackend.UNWIND_EXCEPTION_TO_CALLER;
+import static org.graalvm.compiler.hotspot.HotSpotBackend.VECTORIZED_MISMATCHED;
 import static org.graalvm.compiler.hotspot.HotSpotBackend.VM_ERROR;
 import static org.graalvm.compiler.hotspot.HotSpotBackend.WRONG_METHOD_HANDLER;
 import static org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage.Reexecutability.NOT_REEXECUTABLE;
@@ -444,6 +445,13 @@ public abstract class HotSpotHostForeignCallsProvider extends HotSpotForeignCall
             registerForeignCall(COUNTERMODE_IMPL_CRYPT, c.counterModeAESCrypt, NativeCall, PRESERVES_REGISTERS, LEAF, REEXECUTABLE_ONLY_AFTER_EXCEPTION,
                             NamedLocationIdentity.any());
         }
+
+        if (c.useVectorizedMismatchIntrinsic) {
+            assert (c.vectorizedMismatch != 0L);
+            registerForeignCall(VECTORIZED_MISMATCHED, c.vectorizedMismatch, NativeCall, PRESERVES_REGISTERS, LEAF, REEXECUTABLE_ONLY_AFTER_EXCEPTION,
+                            NamedLocationIdentity.any());
+
+        }
     }
 
     public HotSpotForeignCallLinkage getForeignCall(ForeignCallDescriptor descriptor) {
diff --git a/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/replacements/ArraysSupportSubstitutions.java b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/replacements/ArraysSupportSubstitutions.java
new file mode 100644
index 00000000000..24aa3976c88
--- /dev/null
+++ b/compiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/replacements/ArraysSupportSubstitutions.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, Red Hat Inc. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the ""Classpath"" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package org.graalvm.compiler.hotspot.replacements;
+
+import org.graalvm.compiler.api.replacements.ClassSubstitution;
+import org.graalvm.compiler.api.replacements.MethodSubstitution;
+import org.graalvm.compiler.hotspot.HotSpotBackend;
+import org.graalvm.compiler.nodes.ComputeObjectAddressNode;
+import org.graalvm.compiler.word.Word;
+import org.graalvm.word.WordFactory;
+
+@ClassSubstitution(className = ""jdk.internal.util.ArraysSupport"", optional = true)
+public class ArraysSupportSubstitutions {
+
+    @SuppressWarnings(""unused"")
+    @MethodSubstitution(isStatic = true)
+    static int vectorizedMismatch(Object a, long aOffset, Object b, long bOffset, int length, int log2ArrayIndexScale) {
+        Word aAddr = WordFactory.unsigned(ComputeObjectAddressNode.get(a, aOffset));
+        Word bAddr = WordFactory.unsigned(ComputeObjectAddressNode.get(b, bOffset));
+
+        return HotSpotBackend.vectorizedMismatch(aAddr, bAddr, length, log2ArrayIndexScale);
+    }
+}
diff --git a/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java b/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
index 5331f79e34d..d36efef4a50 100644
--- a/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
+++ b/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
@@ -1336,6 +1336,19 @@ public class SLInspectDebugTest {
         tester.sendMessage(""{\""id\"":6,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":11,\""columnNumber\"":0},\""end\"":{\""scriptId\"":\""1\"",\""lineNumber\"":11,\""columnNumber\"":37},\""restrictToFunction\"":false}}"");
         assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":13,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":24,\""lineNumber\"":11}]},\""id\"":6}"", tester.getMessages(true).trim());
 
+        // When only start location is provided:
+        tester.sendMessage(""{\""id\"":3,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":5,\""columnNumber\"":0},\""restrictToFunction\"":false}}"");
+        assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":6}]},\""id\"":3}"", tester.getMessages(true).trim());
+        // Provides statement location when only beginning is included
+        tester.sendMessage(""{\""id\"":4,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":8,\""columnNumber\"":2},\""restrictToFunction\"":false}}"");
+        assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":8}]},\""id\"":4}"", tester.getMessages(true).trim());
+        // Provides statement location when only end is included
+        tester.sendMessage(""{\""id\"":5,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":9,\""columnNumber\"":8},\""restrictToFunction\"":false}}"");
+        assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":8}]},\""id\"":5}"", tester.getMessages(true).trim());
+        // Provides all statement locations on a line
+        tester.sendMessage(""{\""id\"":6,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":11,\""columnNumber\"":0},\""restrictToFunction\"":false}}"");
+        assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":13,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":24,\""lineNumber\"":11}]},\""id\"":6}"", tester.getMessages(true).trim());
+
         // Resume to finish:
         tester.sendMessage(""{\""id\"":20,\""method\"":\""Debugger.resume\""}"");
         assertTrue(tester.compareReceivedMessages(
diff --git a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
index 7b217291104..40e534b6e97 100644
--- a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
+++ b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
@@ -204,8 +204,11 @@ public final class InspectorDebugger extends DebuggerDomain {
 
     @Override
     public Params getPossibleBreakpoints(Location start, Location end, boolean restrictToFunction) throws CommandProcessException {
+        if (start == null) {
+            throw new CommandProcessException(""Start location required."");
+        }
         int scriptId = start.getScriptId();
-        if (scriptId != end.getScriptId()) {
+        if (end != null && scriptId != end.getScriptId()) {
             throw new CommandProcessException(""Different location scripts: "" + scriptId + "", "" + end.getScriptId());
         }
         Script script = slh.getScript(scriptId);
@@ -219,19 +222,31 @@ public final class InspectorDebugger extends DebuggerDomain {
             c1 = -1;
         }
         int l2;
-        if (source.hasCharacters()) {
-            int lc = source.getLineCount();
-            if (end.getLine() > lc) {
-                l2 = lc;
+        int c2;
+        if (end != null) {
+            if (source.hasCharacters()) {
+                int lc = source.getLineCount();
+                if (end.getLine() > lc) {
+                    l2 = lc;
+                } else {
+                    l2 = end.getLine();
+                }
             } else {
                 l2 = end.getLine();
             }
+            c2 = end.getColumn();
+            if (c2 <= 0) {
+                c2 = -1;
+            }
         } else {
-            l2 = end.getLine();
-        }
-        int c2 = end.getColumn();
-        if (c2 <= 0) {
-            c2 = -1;
+            l2 = l1;
+            if (c1 == -1) {
+                c2 = -1;
+            } else if (source.hasCharacters()) {
+                c2 = source.getLineLength(l2);
+            } else {
+                c2 = c1 + 1;
+            }
         }
         SourceSection range = source.createSection(l1, c1, l2, c2);
         Iterable<SourceSection> locations = SuspendableLocationFinder.findSuspendableLocations(range, restrictToFunction, ds, context.getEnv());
diff --git a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/server/InspectServerSession.java b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/server/InspectServerSession.java
index ba92d1f0403..c2986c32406 100644
--- a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/server/InspectServerSession.java
+++ b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/server/InspectServerSession.java
@@ -195,8 +195,8 @@ public final class InspectServerSession implements MessageEndpoint {
             case ""Debugger.getPossibleBreakpoints"":
                 json = cmd.getParams().getJSONObject();
                 resultParams = debugger.getPossibleBreakpoints(
-                                Location.create(json.getJSONObject(""start"")),
-                                Location.create(json.getJSONObject(""end"")),
+                                Location.create(json.optJSONObject(""start"")),
+                                Location.create(json.optJSONObject(""end"")),
                                 json.optBoolean(""restrictToFunction""));
                 break;
             case ""Debugger.getScriptSource"":",Build libffi on windows . . PullRequest : graal / 2822,"""Add support for vectorized mismatch intrinsic""","""Added support for vectorized mismatch intrinsic and updated debugger to handle start and end locations in possible breakpoints request.""","The commit message should be:

```bash
Add support for jdk.internal.util.ArraysSupport.vectorizedMismatch intrinsic

This patch adds support for the intrinsic method jdk.internal.util.ArraysSupport.vectorizedMismatch in the Graal HotSpot VM. The method is used for vectorized mismatch comparison of arrays.

The intrinsic is enabled by the VM flag UseVectorizedMismatchIntrinsic.

The patch includes the following changes:
- Added a new field useVectorizedMismatchIntrinsic to GraalHotSpotVMConfig
- Added a new foreign call descriptor VECTORIZED_MISMATCHED to HotSpotBackend
- Added a new static method vectorizedMismatch to HotSpotBackend
- Added a new method ArraysSupportSubstitutions.vectorizedMismatch to handle the intrinsic
- Registered the method substitution for ArraysSupport.vectorizedMismatch in HotSpotGraphBuilderPlugins
- Added a new foreign call for VECTORIZED_MISMATCHED in HotSpotHostForeignCallsProvider

This patch is a contribution to the Graal project.
```

The changes in the file `CheckGraalIntrinsics.java` seems to be unrelated and should be in a separate commit.

Regarding the changes in the files related to the Chrome inspector, it seems like they are adding more test cases for the `Debugger.getPossibleBreakpoints` method and handling cases where only the start location is provided. The commit message for these changes could be:

```bash
Add more test cases for Debugger.getPossibleBreakpoints method

This patch adds more test cases for the Debugger.getPossibleBreakpoints method in the Chrome inspector. It also handles cases where only the start location is provided.

This patch is a contribution to the Truffle project.
```","""Add support for vectorized mismatch intrinsic and enhance breakpoint handling in InspectorDebugger"""
"diff --git a/dev-tools/travis/travis-script.sh b/dev-tools/travis/travis-script.sh
index a4610426e..ac09f5b18 100755
--- a/dev-tools/travis/travis-script.sh
+++ b/dev-tools/travis/travis-script.sh
@@ -25,7 +25,7 @@ cd ${STORM_SRC_ROOT_DIR}
 # We should be concerned that Travis CI could be very slow because it uses VM
 export STORM_TEST_TIMEOUT_MS=150000
 
-mvn --batch-mode test -fae -Pnative -pl $2
+mvn --batch-mode test -fae -Pnative,all-tests -pl $2
 BUILD_RET_VAL=$?
 
 for dir in `find . -type d -and -wholename \*/target/\*-reports`;",Add Maven \' all - tests \' Profile to Travis Script,"""Update Travis script to run all tests in native profile""","""Update Travis CI script to include all tests""

This commit message is concise and accurately reflects the changes made in the commit, which is to modify the Travis CI script to include all tests by adding ""all-tests"" to the Maven command.","""Updated Travis script to include all tests in Maven command""

Explanation: The change in the code is the addition of the ""-Pall-tests"" option in the Maven command. This option is used to include all tests in the build process. The ""-pl"" option is used to specify the project to build. The ""$2"" is a placeholder for the project name which will be passed as an argument when running the script.",Enable all tests profile in Travis CI build configuration
"diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 0f16875..4048cb5 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -5,6 +5,7 @@
     <uses-permission android:name=""android.permission.INTERNET"" />
     <uses-permission android:name=""android.permission.CAMERA"" />
     <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" />
+    <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>
 
     <application
         android:name="".IgniterApplication""
@@ -13,11 +14,16 @@
         android:label=""@string/app_name""
         android:roundIcon=""@mipmap/ic_launcher_round""
         android:supportsRtl=""true""
+        xmlns:tools=""http://schemas.android.com/tools""
         android:theme=""@style/AppTheme"">
-        <activity android:name="".exempt.activity.ExemptAppActivity"" android:theme=""@style/AppThemeNoTitle""></activity>
+        <activity
+            android:name="".exempt.activity.ExemptAppActivity""
+            android:theme=""@style/AppThemeNoTitle"" />
         <activity android:name="".qrcode.ScanQRCodeActivity"" />
         <activity android:name="".servers.activity.ServerListActivity"" />
-        <activity android:name="".MainActivity"">
+        <activity
+            android:name="".MainActivity""
+            android:launchMode=""singleTop"">
             <intent-filter>
                 <action android:name=""android.intent.action.MAIN"" />
 
@@ -27,11 +33,40 @@
 
         <service
             android:name="".ProxyService""
-            android:permission=""android.permission.BIND_VPN_SERVICE"">
+            android:permission=""android.permission.BIND_VPN_SERVICE""
+            android:directBootAware=""true""
+            android:exported=""false""
+            tools:targetApi=""N""
+            android:process="":tools"">
             <intent-filter>
                 <action android:name=""android.net.VpnService"" />
+                <action android:name=""io.github.trojan_gfw.igniter.STOP_SERVICE"" />
+                <action android:name=""io.github.trojan_gfw.igniter.BIND_SERVICE"" />
             </intent-filter>
         </service>
+        <service
+            android:name="".tile.IgniterTileService""
+            android:enabled=""true""
+            tools:targetApi=""N""
+            android:directBootAware=""true""
+            android:icon=""@drawable/ic_launcher_foreground""
+            android:label=""@string/app_name""
+            android:permission=""android.permission.BIND_QUICK_SETTINGS_TILE""
+            android:process="":tools"">
+            <intent-filter>
+                <action android:name=""android.service.quicksettings.action.QS_TILE"" />
+            </intent-filter>
+        </service>
+
+        <activity
+            android:name="".tile.ProxyControlActivity""
+            android:launchMode=""singleInstance""
+            android:process="":tools""
+            android:theme=""@style/Theme.AppCompat.Translucent"">
+            <intent-filter>
+                <action android:name=""android.service.quicksettings.action.QS_TILE_PREFERENCES"" />
+            </intent-filter>
+        </activity>
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanService.aidl b/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanService.aidl
new file mode 100644
index 0000000..ddf64fc
--- /dev/null
+++ b/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanService.aidl
@@ -0,0 +1,11 @@
+// ITrojanService.aidl
+package io.github.trojan_gfw.igniter.proxy.aidl;
+import io.github.trojan_gfw.igniter.proxy.aidl.ITrojanServiceCallback;
+// Declare any non-default types here with import statements
+
+interface ITrojanService {
+    int getState();
+    void testConnection(String testUrl);
+    oneway void registerCallback(in ITrojanServiceCallback callback);
+    oneway void unregisterCallback(in ITrojanServiceCallback callback);
+}
diff --git a/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanServiceCallback.aidl b/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanServiceCallback.aidl
new file mode 100644
index 0000000..583c8ae
--- /dev/null
+++ b/app/src/main/aidl/io/github/trojan_gfw/igniter/proxy/aidl/ITrojanServiceCallback.aidl
@@ -0,0 +1,9 @@
+// ITrojanServiceCallback.aidl
+package io.github.trojan_gfw.igniter.proxy.aidl;
+
+// Declare any non-default types here with import statements
+
+interface ITrojanServiceCallback {
+    void onStateChanged(int state, String msg);
+    void onTestResult(String testUrl, boolean connected, long delay, String error);
+}
diff --git a/app/src/main/java/io/github/trojan_gfw/igniter/IgniterApplication.java b/app/src/main/java/io/github/trojan_gfw/igniter/IgniterApplication.java
index 2e6db19..6841831 100644
--- a/app/src/main/java/io/github/trojan_gfw/igniter/IgniterApplication.java
+++ b/app/src/main/java/io/github/trojan_gfw/igniter/IgniterApplication.java
@@ -2,13 +2,12 @@ package io.github.trojan_gfw.igniter;
 
 import android.app.Application;
 
-import io.github.trojan_gfw.igniter.common.os.CommonSP;
+import io.github.trojan_gfw.igniter.initializer.InitializerHelper;
 
 public class IgniterApplication extends Application {
-
     @Override
     public void onCreate() {
         super.onCreate();
-        CommonSP.init(this);
+        InitializerHelper.runInit(this);
     }
 }
diff --git a/app/src/main/java/io/github/trojan_gfw/igniter/MainActivity.java b/app/src/main/java/io/github/trojan_gfw/igniter/MainActivity.java
index 74dd09e..754d2ac 100644
--- a/app/src/main/java/io/github/trojan_gfw/igniter/MainActivity.java
+++ b/app/src/main/java/io/github/trojan_gfw/igniter/MainActivity.java
@@ -2,17 +2,11 @@ package io.github.trojan_gfw.igniter;
 
 
 import android.app.Activity;
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
-import android.content.BroadcastReceiver;
-import android.content.Context;
 import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.VpnService;
-import android.os.Build;
 import android.os.Bundle;
+import android.os.RemoteException;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.content.LocalBroadcastManager;
 import android.support.v7.app.AppCompatActivity;
 import android.text.method.LinkMovementMethod;
 import android.view.Menu;
@@ -32,20 +26,23 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 
+import io.github.trojan_gfw.igniter.common.os.MultiProcessSP;
 import io.github.trojan_gfw.igniter.common.os.Task;
 import io.github.trojan_gfw.igniter.common.os.Threads;
 import io.github.trojan_gfw.igniter.common.utils.SnackbarUtils;
+import io.github.trojan_gfw.igniter.connection.TrojanConnection;
 import io.github.trojan_gfw.igniter.exempt.activity.ExemptAppActivity;
+import io.github.trojan_gfw.igniter.proxy.aidl.ITrojanService;
 import io.github.trojan_gfw.igniter.servers.activity.ServerListActivity;
 import io.github.trojan_gfw.igniter.servers.data.ServerListDataManager;
 import io.github.trojan_gfw.igniter.servers.data.ServerListDataSource;
+import io.github.trojan_gfw.igniter.tile.ProxyControlActivity;
 
 
-public class MainActivity extends AppCompatActivity {
+public class MainActivity extends AppCompatActivity implements TrojanConnection.Callback {
     private static final String TAG = ""MainActivity"";
     private static final int SERVER_LIST_CHOOSE_REQUEST_CODE = 1024;
     private static final int EXEMPT_APP_CONFIGURE_REQUEST_CODE = 2077;
-    private static final int VPN_REQUEST_CODE = 0;
     private static final String CONNECTION_TEST_URL = ""https://www.google.com"";
 
     private ViewGroup rootViewGroup;
@@ -58,8 +55,10 @@ public class MainActivity extends AppCompatActivity {
     private TextView clashLink;
     private Button startStopButton;
     private EditText trojanURLText;
-
-    private BroadcastReceiver serviceStateReceiver;
+    private @ProxyService.ProxyState
+    int proxyState = ProxyService.STATE_NONE;
+    private final TrojanConnection connection = new TrojanConnection(false);
+    private ITrojanService trojanService;
     private ServerListDataSource serverListDataManager;
     private TextViewListener remoteAddrTextListener = new TextViewListener() {
         @Override
@@ -105,33 +104,6 @@ public class MainActivity extends AppCompatActivity {
         }
     };
 
-    private void createNotificationChannel(String channelId) {
-        // Create the NotificationChannel, but only on API 26+ because
-        // the NotificationChannel class is new and not in the support library
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            CharSequence name = getString(R.string.notification_channel_name);
-            String description = getString(R.string.notification_channel_description);
-            int importance = NotificationManager.IMPORTANCE_HIGH;
-            NotificationChannel channel = new NotificationChannel(channelId, name, importance);
-            channel.setDescription(description);
-            // Register the channel with the system; you can't change the importance
-            // or other notification behaviors after this
-            NotificationManager notificationManager = getSystemService(NotificationManager.class);
-            notificationManager.createNotificationChannel(channel);
-        }
-    }
-
-    private void destoryNotificationChannel(String channelId) {
-        // Create the NotificationChannel, but only on API 26+ because
-        // the NotificationChannel class is new and not in the support library
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            // Register the channel with the system; you can't change the importance
-            // or other notification behaviors after this
-            NotificationManager notificationManager = getSystemService(NotificationManager.class);
-            notificationManager.deleteNotificationChannel(channelId);
-        }
-    }
-
     private void copyRawResourceToDir(int resId, String destPathName, boolean override) {
         File file = new File(destPathName);
         if (override || !file.exists()) {
@@ -151,6 +123,7 @@ public class MainActivity extends AppCompatActivity {
     }
 
     private void updateViews(int state) {
+        proxyState = state;
         boolean inputEnabled;
         switch (state) {
             case ProxyService.STARTING: {
@@ -205,9 +178,6 @@ public class MainActivity extends AppCompatActivity {
         clashLink.setMovementMethod(LinkMovementMethod.getInstance());
         startStopButton = findViewById(R.id.startStopButton);
 
-        Globals.Init(this);
-        createNotificationChannel(getString(R.string.notification_channel_id));
-
         copyRawResourceToDir(R.raw.cacert, Globals.getCaCertPath(), true);
         copyRawResourceToDir(R.raw.country, Globals.getCountryMmdbPath(), true);
         copyRawResourceToDir(R.raw.clash_config, Globals.getClashConfigPath(), false);
@@ -229,6 +199,14 @@ public class MainActivity extends AppCompatActivity {
             }
         });
 
+        clashSwitch.setChecked(MultiProcessSP.getEnableClash(true));
+        clashSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                MultiProcessSP.setEnableClash(isChecked);
+            }
+        });
+
         passwordText.addTextChangedListener(passwordTextListener);
 
         ipv6Switch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
@@ -305,43 +283,26 @@ public class MainActivity extends AppCompatActivity {
 
         startStopButton.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
-
                 if (!Globals.getTrojanConfigInstance().isValidRunningConfig()) {
                     Toast.makeText(MainActivity.this,
                             R.string.invalid_configuration,
                             Toast.LENGTH_LONG).show();
                     return;
                 }
-
-                ProxyService serviceInstance = ProxyService.getInstance();
-                if (serviceInstance == null) {
+                if (proxyState == ProxyService.STATE_NONE || proxyState == ProxyService.STOPPED) {
                     TrojanHelper.WriteTrojanConfig(
                             Globals.getTrojanConfigInstance(),
                             Globals.getTrojanConfigPath()
                     );
                     TrojanHelper.ShowConfig(Globals.getTrojanConfigPath());
-
-                    Intent i = VpnService.prepare(getApplicationContext());
-                    if (i != null) {
-                        startActivityForResult(i, VPN_REQUEST_CODE);
-                    } else {
-                        onActivityResult(VPN_REQUEST_CODE, Activity.RESULT_OK, null);
-                    }
-                } else {
-                    serviceInstance.stop();
+                    // start ProxyService
+                    startActivity(ProxyControlActivity.startOrStopProxy(MainActivity.this, true, true));
+                } else if (proxyState == ProxyService.STARTED) {
+                    // stop ProxyService
+                    startActivity(ProxyControlActivity.startOrStopProxy(MainActivity.this, false, true));
                 }
-
             }
         });
-
-        serviceStateReceiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                int state = intent.getIntExtra(ProxyService.STATUS_EXTRA_NAME, ProxyService.STARTED);
-                updateViews(state);
-            }
-        };
-
         saveServerIb.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -352,13 +313,100 @@ public class MainActivity extends AppCompatActivity {
                 Threads.instance().runOnWorkThread(new Task() {
                     @Override
                     public void onRun() {
-                        serverListDataManager.saveServerConfig(Globals.getTrojanConfigInstance());
+                        TrojanConfig config = Globals.getTrojanConfigInstance();
+                        TrojanHelper.WriteTrojanConfig(config, Globals.getTrojanConfigPath());
+                        serverListDataManager.saveServerConfig(config);
                         showSaveConfigResult(true);
                     }
                 });
             }
         });
         serverListDataManager = new ServerListDataManager(Globals.getTrojanConfigListPath());
+        connection.connect(this, this);
+    }
+
+    @Override
+    public void onServiceConnected(final ITrojanService service) {
+        LogHelper.i(TAG, ""onServiceConnected"");
+        trojanService = service;
+        Threads.instance().runOnWorkThread(new Task() {
+            @Override
+            public void onRun() {
+                try {
+                    final int state = service.getState();
+                    runOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            updateViews(state);
+                        }
+                    });
+                } catch (RemoteException e) {
+                    e.printStackTrace();
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onServiceDisconnected() {
+        LogHelper.i(TAG, ""onServiceConnected"");
+        trojanService = null;
+    }
+
+    @Override
+    public void onStateChanged(int state, String msg) {
+        LogHelper.i(TAG, ""onStateChanged# state: "" + state + "" msg: "" + msg);
+        updateViews(state);
+    }
+
+    @Override
+    public void onTestResult(final String testUrl, final boolean connected, final long delay, @NonNull final String error) {
+        runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                showTestConnectionResult(testUrl, connected, delay, error);
+            }
+        });
+    }
+
+    private void showTestConnectionResult(String testUrl, boolean connected, long delay, @NonNull String error) {
+        if (connected) {
+            Toast.makeText(getApplicationContext(), getString(R.string.connected_to__in__ms,
+                    testUrl, String.valueOf(delay)), Toast.LENGTH_LONG).show();
+        } else {
+            LogHelper.e(TAG, ""TestError: "" + error);
+            Toast.makeText(getApplicationContext(),
+                    getString(R.string.failed_to_connect_to__,
+                            testUrl, ""Please start igniter before testing""),
+                    Toast.LENGTH_LONG).show();
+        }
+    }
+
+    @Override
+    public void onBinderDied() {
+        LogHelper.i(TAG, ""onBinderDied"");
+        connection.disconnect(this);
+        // connect the new binder
+        connection.connect(this, this);
+    }
+
+    /**
+     * Test connection by invoking {@link ITrojanService#testConnection(String)}. Since {@link ITrojanService}
+     * is from remote process, a {@link RemoteException} might be thrown. Test result will be delivered
+     * to {@link #onTestResult(String, boolean, long, String)} by {@link TrojanConnection}.
+     */
+    private void testConnection() {
+        ITrojanService service = trojanService;
+        if (service == null) {
+            showTestConnectionResult(CONNECTION_TEST_URL, false, 0L, ""Trojan service is not available."");
+        } else {
+            try {
+                service.testConnection(CONNECTION_TEST_URL);
+            } catch (RemoteException e) {
+                showTestConnectionResult(CONNECTION_TEST_URL, false, 0L, ""Trojan service throws RemoteException."");
+                e.printStackTrace();
+            }
+        }
     }
 
     private void clearEditTextFocus() {
@@ -382,11 +430,7 @@ public class MainActivity extends AppCompatActivity {
     @Override
     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        if (requestCode == VPN_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
-            Intent intent = new Intent(this, ProxyService.class);
-            intent.putExtra(ProxyService.CLASH_EXTRA_NAME, clashSwitch.isChecked());
-            startService(intent);
-        } else if (SERVER_LIST_CHOOSE_REQUEST_CODE == requestCode && resultCode == Activity.RESULT_OK && data != null) {
+        if (SERVER_LIST_CHOOSE_REQUEST_CODE == requestCode && resultCode == Activity.RESULT_OK && data != null) {
             trojanURLText.setText("""");
             final TrojanConfig config = data.getParcelableExtra(ServerListActivity.KEY_TROJAN_CONFIG);
             if (config != null) {
@@ -405,16 +449,12 @@ public class MainActivity extends AppCompatActivity {
                 verifySwitch.setChecked(config.getVerifyCert());
             }
         } else if (EXEMPT_APP_CONFIGURE_REQUEST_CODE == requestCode && Activity.RESULT_OK == resultCode) {
-            if (isProxyRunning()) {
+            if (ProxyService.STARTED == proxyState) {
                 SnackbarUtils.showTextLong(rootViewGroup, R.string.main_restart_proxy_service_tip);
             }
         }
     }
 
-    private boolean isProxyRunning() {
-        return ProxyService.getInstance() != null;
-    }
-
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         // Inflate the menu; this adds items to the action bar if it is present.
@@ -427,7 +467,7 @@ public class MainActivity extends AppCompatActivity {
         // Bind menu items to their relative actions
         switch (item.getItemId()) {
             case R.id.action_test_connection:
-                new TestConnection(MainActivity.this).execute(CONNECTION_TEST_URL);
+                testConnection();
                 return true;
             case R.id.action_show_develop_info_logcat:
                 util.Util.logGoRoutineCount();
@@ -472,28 +512,8 @@ public class MainActivity extends AppCompatActivity {
     }
 
     @Override
-    protected void onResume() {
-        super.onResume();
-        ProxyService serviceInstance = ProxyService.getInstance();
-        if (serviceInstance == null) {
-            updateViews(ProxyService.STOPPED);
-        } else {
-            updateViews(serviceInstance.getState());
-           ",Add quick switch tile feature .,"""Refactor Trojan service to use AIDL for IPC, add foreground service permission, and improve MainActivity functionality""","Added support for tile service and remote proxy service

This commit message is concise and accurately describes the changes made in the commit. It highlights the key feature added, which is the support for tile service and remote proxy service.","""Add ITrojanService and ITrojanServiceCallback aidl files, modify IgniterApplication and MainActivity, add FOREGROUND\_SERVICE permission and Quick Settings Tile for ProxyService""

This commit includes the following changes:

* Adds two new aidl files: ITrojanService.aidl and ITrojanServiceCallback.aidl, which define the interface for communication between the Igniter app and the Trojan proxy service.
* Modifies IgniterApplication to use InitializerHelper for initialization instead of CommonSP.
* Modifies MainActivity to implement TrojanConnection.Callback and handle Trojan service state changes, test results, and binder death. It also adds a switch for enabling/disabling Clash and updates the UI based on the proxy state.
* Adds FOREGROUND\_SERVICE permission to the AndroidManifest.xml file.
* Adds a Quick Settings Tile for the ProxyService, which allows the user to start or stop the proxy service from the notification shade. It also includes a ProxyControlActivity for handling tile clicks.
* Modifies the ProxyService to include actions for stopping and binding the service, and to handle quick settings tile clicks. It also sets the service to be directBootAware and exported false, and moves it to a separate process.
* The commit message should reflect these changes.","""Add Foreground Service Permission, Update ProxyService Integration and Introduce AIDL Trojan Service"""
"diff --git a/pom.xml b/pom.xml
index 234937cbd6..784c5c7727 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <parent>
     <groupId>org.camunda</groupId>
     <artifactId>camunda-release-parent</artifactId>
-    <version>3.1</version>
+    <version>3.2</version>
     <!-- do not remove empty tag - http://jira.codehaus.org/browse/MNG-4687 -->
     <relativePath />
   </parent>",update release - parent version in root pom .,"""Update Camunda release parent version to 3.2""","""Update Camunda parent version to 3.2""","""Updated parent version from 3.1 to 3.2 in pom.xml""",Update parent version in `pom.xml` from 3.1 to 3.2 for camunda-release-parent dependency.
"diff --git a/pom.xml b/pom.xml
index 7acc215ab37..25b4790f75c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1318,7 +1318,7 @@
         <equinox.osgi.version>3.10.2.v20150203-1939</equinox.osgi.version>
         <equinox.osgi.services.version>3.4.0.v20140312-2051</equinox.osgi.services.version>
         <carbon.kernel.version>5.1.0</carbon.kernel.version>
-        <transport.http.version>6.0.114</transport.http.version>
+        <transport.http.version>6.0.116</transport.http.version>
         <carbon.messaging.version>2.3.7</carbon.messaging.version>
         <carbon.deployment.version>5.0.0</carbon.deployment.version>
         <carbon.config.version>2.1.2</carbon.config.version>",Bump transport version,"""Update transport.http.version to 6.0.116""","""Update transport.http.version to 6.0.116""",Updating transport.http.version from 6.0.114 to 6.0.116 in pom.xml,Update transport.http.version dependency from 6.0.114 to 6.0.116 in pom.xml for improved performance and bug fixes.
"diff --git a/src/com/facebook/buck/cxx/BUCK b/src/com/facebook/buck/cxx/BUCK
index 7d0327ea41..8b71f16a7b 100644
--- a/src/com/facebook/buck/cxx/BUCK
+++ b/src/com/facebook/buck/cxx/BUCK
@@ -11,7 +11,7 @@ PLATFORM_SRCS = [
   'SourcePathTool.java',
   'VersionedTool.java',
 ]
-java_library(
+java_immutables_library(
   name = 'platform',
   srcs = PLATFORM_SRCS,
   deps = [
diff --git a/src/com/facebook/buck/cxx/CxxPlatform.java b/src/com/facebook/buck/cxx/CxxPlatform.java
index 228125b304..64b6b8e1d9 100644
--- a/src/com/facebook/buck/cxx/CxxPlatform.java
+++ b/src/com/facebook/buck/cxx/CxxPlatform.java
@@ -18,50 +18,56 @@ package com.facebook.buck.cxx;
 
 import com.facebook.buck.model.Flavor;
 import com.facebook.buck.rules.SourcePath;
+import com.facebook.buck.util.immutables.BuckStyleImmutable;
 import com.google.common.base.Optional;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMultimap;
+import com.google.common.collect.Multimap;
+
+import org.immutables.value.Value;
+
+import java.util.List;
 
 /**
  * Interface describing a C/C++ toolchain and platform to build for.
  */
+@Value.Immutable
+@BuckStyleImmutable
 public interface CxxPlatform {
 
   Flavor getFlavor();
 
   Tool getAs();
-  ImmutableList<String> getAsflags();
+  List<String> getAsflags();
 
   Tool getAspp();
-  ImmutableList<String> getAsppflags();
+  List<String> getAsppflags();
 
   Tool getCc();
-  ImmutableList<String> getCflags();
+  List<String> getCflags();
 
   Tool getCxx();
-  ImmutableList<String> getCxxflags();
+  List<String> getCxxflags();
 
   Tool getCpp();
-  ImmutableList<String> getCppflags();
+  List<String> getCppflags();
 
   Tool getCxxpp();
-  ImmutableList<String> getCxxppflags();
+  List<String> getCxxppflags();
 
   Tool getCxxld();
-  ImmutableList<String> getCxxldflags();
+  List<String> getCxxldflags();
 
   Linker getLd();
-  ImmutableList<String> getLdflags();
-  ImmutableMultimap<Linker.LinkableDepType, String> getRuntimeLdflags();
+  List<String> getLdflags();
+  Multimap<Linker.LinkableDepType, String> getRuntimeLdflags();
 
   Tool getAr();
-  ImmutableList<String> getArflags();
+  List<String> getArflags();
 
   SourcePath getLex();
-  ImmutableList<String> getLexFlags();
+  List<String> getLexFlags();
 
   SourcePath getYacc();
-  ImmutableList<String> getYaccFlags();
+  List<String> getYaccFlags();
 
   String getSharedLibraryExtension();
 
diff --git a/src/com/facebook/buck/ocaml/OCamlBuckConfig.java b/src/com/facebook/buck/ocaml/OCamlBuckConfig.java
index 3a0c1cfa18..169cb734ab 100644
--- a/src/com/facebook/buck/ocaml/OCamlBuckConfig.java
+++ b/src/com/facebook/buck/ocaml/OCamlBuckConfig.java
@@ -23,9 +23,9 @@ import com.facebook.buck.cxx.Linker;
 import com.facebook.buck.cxx.Tool;
 import com.facebook.buck.util.environment.Platform;
 import com.google.common.base.Optional;
-import com.google.common.collect.ImmutableList;
 
 import java.nio.file.Path;
+import java.util.List;
 
 public class OCamlBuckConfig {
 
@@ -69,15 +69,15 @@ public class OCamlBuckConfig {
     return cxxPlatform.getCxx();
   }
 
-  public ImmutableList<String> getCFlags() {
+  public List<String> getCFlags() {
     return cxxPlatform.getCppflags();
   }
 
-  public ImmutableList<String> getCLinkerFlags() {
+  public List<String> getCLinkerFlags() {
     return cxxPlatform.getCxxldflags();
   }
 
-  public ImmutableList<String> getLdFlags() {
+  public List<String> getLdFlags() {
     return cxxPlatform.getLdflags();
   }
 ",Annotate interface to make it Immutable .,"""Replace ImmutableList with List and ImmutableMultimap with Multimap in CxxPlatform and OCamlBuckConfig""",Migrate CxxPlatform to use immutables and update dependent code to use List instead of ImmutableList.,"""Convert CxxPlatform to use immutables and update OCamlBuckConfig accordingly""

Explanation:
The diff shows that the `CxxPlatform` interface has been updated to use the `@Value.Immutable` and `@BuckStyleImmutable` annotations from the `org.immutables.value` library. This change allows the interface to generate immutable implementations of the `CxxPlatform` interface using the Immutables library.

Additionally, the `OCamlBuckConfig` class has been updated to use the new `List` return type for the `get*Flags()` methods instead of the `ImmutableList` return type. This change is likely necessary because the `CxxPlatform` interface now uses `List` instead of `ImmutableList` for its flag fields.

Therefore, the commit message should reflect these changes and mention both the update to `CxxPlatform` and the corresponding changes to `OCamlBuckConfig`.","""Refactor CxxPlatform to use Java Immutables and change collection types to java.util.List and Multimap."""
"diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectExecutionContext.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectExecutionContext.java
deleted file mode 100644
index c27c762a8e..0000000000
--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectExecutionContext.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * ""License""); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.beam.runners.direct.portable;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
-import org.apache.beam.runners.core.StepContext;
-import org.apache.beam.runners.core.TimerInternals;
-import org.apache.beam.runners.direct.Clock;
-import org.apache.beam.runners.direct.WatermarkManager.TimerUpdate;
-import org.apache.beam.runners.direct.WatermarkManager.TransformWatermarks;
-import org.apache.beam.runners.local.StructuralKey;
-
-/**
- * Execution Context for the {@code DirectRunner}.
- *
- * <p>This implementation is not thread safe. A new {@link DirectExecutionContext} must be created
- * for each thread that requires it.
- */
-class DirectExecutionContext {
-  private final Clock clock;
-  private final StructuralKey<?> key;
-  private final CopyOnAccessInMemoryStateInternals existingState;
-  private final TransformWatermarks watermarks;
-  private Map<String, DirectStepContext> cachedStepContexts = new LinkedHashMap<>();
-
-  public DirectExecutionContext(
-      Clock clock,
-      StructuralKey<?> key,
-      CopyOnAccessInMemoryStateInternals existingState,
-      TransformWatermarks watermarks) {
-    this.clock = clock;
-    this.key = key;
-    this.existingState = existingState;
-    this.watermarks = watermarks;
-  }
-
-  private DirectStepContext createStepContext() {
-    return new DirectStepContext();
-  }
-
-  /**
-   * Returns the {@link StepContext} associated with the given step.
-   */
-  public DirectStepContext getStepContext(String stepName) {
-    return cachedStepContexts.computeIfAbsent(stepName, k -> createStepContext());
-  }
-
-  /**
-   * Step Context for the {@code DirectRunner}.
-   */
-  public class DirectStepContext implements StepContext {
-    private CopyOnAccessInMemoryStateInternals<?> stateInternals;
-    private DirectTimerInternals timerInternals;
-
-    public DirectStepContext() { }
-
-    @Override
-    public CopyOnAccessInMemoryStateInternals<?> stateInternals() {
-      if (stateInternals == null) {
-        stateInternals = CopyOnAccessInMemoryStateInternals.withUnderlying(key, existingState);
-      }
-      return stateInternals;
-    }
-
-    @Override
-    public DirectTimerInternals timerInternals() {
-      if (timerInternals == null) {
-        timerInternals =
-            DirectTimerInternals.create(clock, watermarks, TimerUpdate.builder(key));
-      }
-      return timerInternals;
-    }
-
-    /**
-     * Commits the state of this step, and returns the committed state. If the step has not
-     * accessed any state, return null.
-     */
-    public CopyOnAccessInMemoryStateInternals commitState() {
-      if (stateInternals != null) {
-        return stateInternals.commit();
-      }
-      return null;
-    }
-
-    /**
-     * Gets the timer update of the {@link TimerInternals} of this {@link DirectStepContext},
-     * which is empty if the {@link TimerInternals} were never accessed.
-     */
-    public TimerUpdate getTimerUpdate() {
-      if (timerInternals == null) {
-        return TimerUpdate.empty();
-      }
-      return timerInternals.getTimerUpdate();
-    }
-  }
-}
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectStateAndTimers.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectStateAndTimers.java
new file mode 100644
index 0000000000..11969165b1
--- /dev/null
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/DirectStateAndTimers.java
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.beam.runners.direct.portable;
+
+import org.apache.beam.runners.direct.Clock;
+import org.apache.beam.runners.direct.WatermarkManager.TimerUpdate;
+import org.apache.beam.runners.direct.WatermarkManager.TransformWatermarks;
+import org.apache.beam.runners.local.StructuralKey;
+
+/**
+ * Execution Context for the {@code DirectRunner}.
+ *
+ * <p>This implementation is not thread safe. A new {@link DirectStateAndTimers} must be created for
+ * each thread that requires it.
+ */
+class DirectStateAndTimers<K> implements StepStateAndTimers<K> {
+  private final StructuralKey<K> key;
+  private final CopyOnAccessInMemoryStateInternals existingState;
+
+  private final Clock clock;
+  private final TransformWatermarks watermarks;
+
+  private CopyOnAccessInMemoryStateInternals<K> stateInternals;
+  private DirectTimerInternals timerInternals;
+
+  DirectStateAndTimers(
+      StructuralKey<K> key,
+      CopyOnAccessInMemoryStateInternals existingState,
+      Clock clock,
+      TransformWatermarks watermarks) {
+    this.key = key;
+    this.existingState = existingState;
+    this.clock = clock;
+    this.watermarks = watermarks;
+  }
+
+  @Override
+  public CopyOnAccessInMemoryStateInternals<K> stateInternals() {
+    if (stateInternals == null) {
+      stateInternals = CopyOnAccessInMemoryStateInternals.withUnderlying(key, existingState);
+    }
+    return stateInternals;
+  }
+
+  @Override
+  public DirectTimerInternals timerInternals() {
+    if (timerInternals == null) {
+      timerInternals = DirectTimerInternals.create(clock, watermarks, TimerUpdate.builder(key));
+    }
+    return timerInternals;
+  }
+}
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContext.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContext.java
index e387272e9a..b4ed030609 100644
--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContext.java
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContext.java
@@ -57,9 +57,9 @@ import org.joda.time.Instant;
  * <p>{@link EvaluationContext} contains shared state for an execution of the {@code DirectRunner}
  * that can be used while evaluating a {@link PTransform}. This consists of views into underlying
  * state and watermark implementations, access to read and write {@link PCollectionView
- * PCollectionViews}, and managing the {@link DirectExecutionContext ExecutionContexts}. This
- * includes executing callbacks asynchronously when state changes to the appropriate point (e.g.
- * when a {@link PCollectionView} is requested and known to be empty).
+ * PCollectionViews}, and managing the {@link DirectStateAndTimers ExecutionContexts}. This includes
+ * executing callbacks asynchronously when state changes to the appropriate point (e.g. when a
+ * {@link PCollectionView} is requested and known to be empty).
  *
  * <p>{@link EvaluationContext} also handles results by committing finalizing bundles based on the
  * current global state and updating the global state appropriately. This includes updating the
@@ -271,47 +271,22 @@ class EvaluationContext {
       WindowingStrategy<?, ?> windowingStrategy,
       Runnable runnable) {
     PTransformNode producing = graph.getProducer(value);
-    callbackExecutor.callOnGuaranteedFiring(producing, window, windowingStrategy, runnable);
-
-    fireAvailableCallbacks(producing);
-  }
-
-  /**
-   * Schedule a callback to be executed after the given window is expired.
-   *
-   * <p>For example, upstream state associated with the window may be cleared.
-   */
-  public void scheduleAfterWindowExpiration(
-      PTransformNode producing,
-      BoundedWindow window,
-      WindowingStrategy<?, ?> windowingStrategy,
-      Runnable runnable) {
     callbackExecutor.callOnWindowExpiration(producing, window, windowingStrategy, runnable);
 
     fireAvailableCallbacks(producing);
   }
 
-  /**
-   * Get a {@link DirectExecutionContext} for the provided {@link PTransformNode} and key.
-   */
-  public DirectExecutionContext getExecutionContext(
-      PTransformNode application, StructuralKey<?> key) {
+  /** Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key. */
+  public <K> StepStateAndTimers<K> getStateAndTimers(
+      PTransformNode application, StructuralKey<K> key) {
     StepAndKey stepAndKey = StepAndKey.of(application, key);
-    return new DirectExecutionContext(
-        clock,
+    return new DirectStateAndTimers<>(
         key,
         applicationStateInternals.get(stepAndKey),
+        clock,
         watermarkManager.getWatermarks(application));
   }
 
-
-  /**
-   * Get the Step Name for the provided application.
-   */
-  String getStepName(PTransformNode application) {
-    throw new UnsupportedOperationException(""getStepName Unsupported"");
-  }
-
   /** Returns all of the steps in this {@link Pipeline}. */
   Collection<PTransformNode> getSteps() {
     return graph.getExecutables();
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContextStepStateAndTimersProvider.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContextStepStateAndTimersProvider.java
new file mode 100644
index 0000000000..f6ef49c2c3
--- /dev/null
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/EvaluationContextStepStateAndTimersProvider.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * ""License""); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.runners.direct.portable;
+
+import org.apache.beam.runners.core.construction.graph.PipelineNode.PTransformNode;
+import org.apache.beam.runners.local.StructuralKey;
+
+/** A {@link StepStateAndTimers.Provider} that uses an {@link EvaluationContext}. */
+class EvaluationContextStepStateAndTimersProvider implements StepStateAndTimers.Provider {
+  public static StepStateAndTimers.Provider forContext(EvaluationContext context) {
+    return new EvaluationContextStepStateAndTimersProvider(context);
+  }
+
+  private final EvaluationContext context;
+
+  private EvaluationContextStepStateAndTimersProvider(EvaluationContext context) {
+    this.context = context;
+  }
+
+  @Override
+  public <K> StepStateAndTimers<K> forStepAndKey(PTransformNode transform, StructuralKey<K> key) {
+    return context.getStateAndTimers(transform, key);
+  }
+}
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/GroupAlsoByWindowEvaluatorFactory.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/GroupAlsoByWindowEvaluatorFactory.java
index 2e67c8a2e0..b8737b34d0 100644
--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/GroupAlsoByWindowEvaluatorFactory.java
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/GroupAlsoByWindowEvaluatorFactory.java
@@ -68,13 +68,13 @@ class GroupAlsoByWindowEvaluatorFactory implements TransformEvaluatorFactory {
   private final BundleFactory bundleFactory;
   private final ExecutableGraph<PTransformNode, PCollectionNode> graph;
   private final Components components;
-  private final StateAndTimerProvider stp;
+  private final StepStateAndTimers.Provider stp;
 
   GroupAlsoByWindowEvaluatorFactory(
       ExecutableGraph<PTransformNode, PCollectionNode> graph,
       Components components,
       BundleFactory bundleFactory,
-      StateAndTimerProvider stp) {
+      StepStateAndTimers.Provider stp) {
     this.bundleFactory = bundleFactory;
     this.graph = graph;
     this.components = components;
@@ -98,7 +98,7 @@ class GroupAlsoByWindowEvaluatorFactory implements TransformEvaluatorFactory {
     @SuppressWarnings(""unchecked"")
     StructuralKey<K> key = (StructuralKey<K>) inputBundle.getKey();
     return new GroupAlsoByWindowEvaluator<>(
-        bundleFactory, key, application, graph, components, stp);
+        bundleFactory, key, application, graph, components, stp.forStepAndKey(application, key));
   }
 
   /**
@@ -132,14 +132,14 @@ class GroupAlsoByWindowEvaluatorFactory implements TransformEvaluatorFactory {
         PTransformNode application,
         ExecutableGraph<PTransformNode, PCollectionNode> graph,
         Components components,
-        StateAndTimerProvider stp) {
+        StepStateAndTimers<K> stp) {
       this.bundleFactory = bundleFactory;
       this.application = application;
       this.outputCollection = getOnlyElement(graph.getProduced(application));
       this.key = key;
 
-      this.stateInternals = stp.stateInternals(application, key);
-      this.timerInternals = stp.timerInternals(application, key);
+      this.stateInternals = stp.stateInternals();
+      this.timerInternals = stp.timerInternals();
 
       PCollectionNode inputCollection = getOnlyElement(graph.getPerElementInputs(application));
       try {
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StateAndTimerProvider.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StepStateAndTimers.java
similarity index 82%
rename from runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StateAndTimerProvider.java
rename to runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StepStateAndTimers.java
index d7fa6bd6c4..9126eb470a 100644
--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StateAndTimerProvider.java
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/StepStateAndTimers.java
@@ -24,9 +24,12 @@ import org.apache.beam.runners.core.construction.graph.PipelineNode.PTransformNo
 import org.apache.beam.runners.local.StructuralKey;
 
 /** A provider of {@link StateInternals} and {@link TimerInternals}. */
-interface StateAndTimerProvider {
-  <K> CopyOnAccessInMemoryStateInternals<K> stateInternals(
-      PTransformNode transform, StructuralKey<K> key);
+interface StepStateAndTimers<K> {
+  interface Provider {
+    <K> StepStateAndTimers<K> forStepAndKey(PTransformNode transform, StructuralKey<K> key);
+  }
 
-  DirectTimerInternals timerInternals(PTransformNode transform, StructuralKey<?> key);
+  CopyOnAccessInMemoryStateInternals<K> stateInternals();
+
+  DirectTimerInternals timerInternals();
 }
diff --git a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/TransformEvaluatorRegistry.java b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/TransformEvaluatorRegistry.java
index 08123d3b87..0a919e406f 100644
--- a/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/TransformEvaluatorRegistry.java
+++ b/runners/direct-java/src/main/java/org/apache/beam/runners/direct/portable/TransformEvaluatorRegistry.java
@@ -48,7 +48,7 @@ class TransformEvaluatorRegistry {
       Components components,
       BundleFactory bundleFactory,
       JobBundleFactory jobBundleFactory,
-      StateAndTimerProvider stateAndTimerProvider) {
+      StepStateAndTimers.Provider stepStateAndTimers) {
     return new TransformEvaluatorRegistry(
         ImmutableMap.<String, TransformEvaluatorFactory>builder()
             .put(
@@ -63,7 +63,7 @@ class TransformEvaluatorRegistry {
             .put(
                 DirectGroupByKey.DIRECT_GABW_URN,
                 new GroupAlsoByWindowEvaluatorFactory(
-                    graph, components, bundleFactory, stateAndTimerProvider))
+                    graph, components, bundleFactory, stepStateAndTimers))
             .put(
                 ExecutableStage.URN,
                 new RemoteStageEvaluatorFactory(bundleFactory, jobBundleFactory))
@@ -90,6 +90,7 @@ class TransformEvaluatorRegistry {
 
     TransformEvaluatorFactory factory =
         checkNotNull(factories.get(urn), ""No evaluator for PTransform \""%s\"""", urn);
+    LOG.warn(""Evaluator Factory {} for PTransform {}"", factory, application);
     return factory.forApplication(application, inputBundle);
   }
 
diff --git a/runners/direct-java/src/test/java/org/apache/beam/runners/direct/portable/EvaluationContextTest.java b/runners/direct-java/src/test/java/org/apache/beam/runners/direct/portable/EvaluationContextTest.java
index 9809c481db..6ce38b53f1 100644
--- a/runners/direct-java/src/test/java/org/apache/beam/runners/direct/portable/EvaluationContextTest.java
+++ b/runners/direct-java/src/test/java/org/apache/beam/runners/direct/portable/EvaluationContextTest.java
@@ -39,7 +39,6 @@ import org.apache.beam.runners.core.construction.graph.PipelineNode.PTransformNo
 import org.apache.beam.runners.direct.ExecutableGraph;
 import org.apache.beam.runners.direct.WatermarkManager.FiredTimers;
 import org.apache.beam.runners.direct.WatermarkManager.TimerUpdate;
-import org.apache.beam.runners.direct.portable.DirectExecutionContext.DirectStepContext;
 import org.apache.beam.runners.local.StructuralKey;
 import org.apache.beam.sdk.coders.ByteArrayCoder;
 import org.apache.beam.sdk.coders.StringUtf8Coder;
@@ -93,13 +92,12 @@ public class EvaluationContextTest {
 
   @Test
   public void getExecutionContextSameStepSameKeyState() {
-    DirectExecutionContext fooContext =
-        context.getExecutionContext(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
+    StepStateAndTimers<String> fooContext =
+        context.getStateAndTimers(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
 
     StateTag<BagState<Integer>> intBag = StateTags.bag(""myBag"", VarIntCoder.of());
 
-    DirectStepContext stepContext = fooContext.getStepContext(""s1"");
-    stepContext.stateInternals().state(StateNamespaces.global(), intBag).add(1);
+    fooContext.stateInternals().state(StateNamespaces.global(), intBag).add(1);
 
     context.handleResult(
         ImmutableListBundleFactory.create()
@@ -107,68 +105,56 @@ public class EvaluationContextTest {
             .commit(Instant.now()),
         ImmutableList.of(),
         StepTransformResult.withoutHold(createdProducer)
-            .withState(stepContext.commitState())
+            .withState(fooContext.stateInternals().commit())
             .build());
 
-    DirectExecutionContext secondFooContext =
-        context.getExecutionContext(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
+    StepStateAndTimers secondFooContext =
+        context.getStateAndTimers(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
     assertThat(
-        secondFooContext
-            .getStepContext(""s1"")
-            .stateInternals()
-            .state(StateNamespaces.global(), intBag)
-            .read(),
+        secondFooContext.stateInternals().state(StateNamespaces.global(), intBag).read(),
         contains(1));
   }
 
   @Test
   public void getExecutionContextDifferentKeysIndependentState() {
-    DirectExecutionContext fooContext =
-        context.getExecutionContext(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
+    StepStateAndTimers fooContext =
+        context.getStateAndTimers(createdProducer, StructuralKey.of(""foo"", StringUtf8Coder.of()));
 
     StateTag<BagState<Integer>> intBag = StateTags.bag(""myBag"", VarIntCoder.of());
 
-    fooContext.getStepContext(""s1"").stateInternals().state(StateNamespaces.global(), intBag).add(1);
+    fooContext.stateInternals().state(StateNamespaces.global(), intBag).add(1);
 
-    DirectExecutionContext barContext =
-        context.getExecutionContext(createdProducer, StructuralKey.of(""bar"", StringUtf8Coder.of()));
+    StepStateAndTimers barContext =
+        context.getStateAndTimers(createdProducer, StructuralKey.of(""bar"", StringUtf8Coder.of()));
     assertThat(barContext, not(equalTo(fooContext)));
     assertThat(
-        barContext
-            .getStepContext(""s1"")
-            .stateInternals()
-            .state(StateNamespaces.global(), intBag)
-            .read(),
+        barContext.stateInternals().state(StateNamespaces.global(), intBag).read(),
         emptyIterable());
   }
 
   @Test
   public void getExecutionContextDifferentStepsIndependentState() {
     StructuralKey<?> myKey = StructuralKey.of(""foo"", StringUtf8Coder.of());
-    DirectExecutionContext fooContext = context.getExecutionContext(createdProducer, myKey);
+    StepStateAndTimers fooContext = context.getStateAndTimers(createdProducer, myKey);
 
     StateTag<BagState<Integer>> intBag = StateTags.bag(""myBag"", VarIntCoder.of());
 
-    fooContext.getStepContext(""s1"").stateInternals().state(StateNamespaces.global(), intBag).add(1);
+    fooContext.stateInternals().state(StateNamespaces.global(), intBag).add(1);
 
-    DirectExecutionContext barContext = context.getExecutionContext(downstreamProducer, myKey);
+    StepStateAndTimers barContext = context.getStateAndTimers(downstreamProducer, myKey);
     assertThat(
-        barContext
-            .getStepContext(""s1"")
-            .stateInternals()
-            .state(StateNamespaces.global(), intBag)
-            .read(),
+        barContext.stateInternals().state(StateNamespaces.global(), intBag).read(),
         emptyIterable());
   }
 
   @Test
   public void handleResultStoresState() {
     StructuralKey<?> myKey = StructuralKey.of(""foo"".getBytes(), ByteArrayCoder.of());
-    DirectExecutionContext fooContext = context.getExecutionContext(downstreamProducer, myKey);
+    StepStateAndTimers fooContext = context.getStateAndTimers(downstreamProducer, myKey);
 
     StateTag<BagState<Integer>> intBag = StateTags.bag(""myBag"", VarIntCoder.of());
 
-    CopyOnAccessInMemoryStateInternals<?> state = fooContext.getStepContext(""s1"").stateInternals();
+    CopyOnAccessInMemoryStateInternals<?> state = fooContext.stateInternals();
     BagState<Integer> bag = state.state(StateNamespaces.global(), intBag);
     bag.add(1);
     bag.add(2);
@@ -182,11 +168,9 @@ public class EvaluationContextTest {
         ImmutableList.of(),
         stateResult);
 
-    DirectExecutionContext afterResultContext =
-        context.getExecutionContext(downstreamProducer, myKey);
+    StepStateAndTimers afterResultContext = context.getStateAndTimers(downstreamProducer, myKey);
 
-    CopyOnAccessInMemoryStateInternals<?> afterResultState =
-        afterResultContext.getStepContext(""s1"").stateInternals();
+    CopyOnAccessInMemoryStateInternals<?> afterResultState = afterResultContext.stateInternals();
     assertThat(afterResultState.state(StateNamespaces.global(), intBag).read(), contains(1, 2, 4));
   }
 ",Add an abstraction for State and Timers .,Refactor DirectExecutionContext to DirectStateAndTimers and introduce StepStateAndTimers interface.,"Refactor DirectExecutionContext to use DirectStateAndTimers

This commit message is concise and accurately describes the changes made in the commit. It mentions the specific class that was refactored (DirectExecutionContext) and the new class that it now uses (DirectStateAndTimers).","This commit removes the `DirectExecutionContext` class and replaces it with `DirectStateAndTimers`. The `EvaluationContext` class now has a method `getStateAndTimers` that returns an instance of `DirectStateAndTimers`. The `DirectStateAndTimers` class provides methods for accessing state and timers for a specific key in a thread-safe manner. The `StepStateAndTimers.Provider` interface and `EvaluationContextStepStateAndTimersProvider` class have also been added to provide a way to obtain `StepStateAndTimers` instances from an `EvaluationContext`. Additionally, the `GroupAlsoByWindowEvaluatorFactory` class has been updated to use `StepStateAndTimers` instead of `DirectExecutionContext`.",Refactor DirectExecutionContext to DirectStateAndTimers and update related classes for better context-separated state and timer handling.
"diff --git a/driver/src/test/functional/org/mongodb/operation/UpdateOperationSpecification.groovy b/driver/src/test/functional/org/mongodb/operation/UpdateOperationSpecification.groovy
index 6e728f231..c674e8083 100644
--- a/driver/src/test/functional/org/mongodb/operation/UpdateOperationSpecification.groovy
+++ b/driver/src/test/functional/org/mongodb/operation/UpdateOperationSpecification.groovy
@@ -14,33 +14,47 @@
  * limitations under the License.
  */
 
-
-
-
-
 package org.mongodb.operation
-
 import org.bson.types.ObjectId
 import org.mongodb.Document
+import org.mongodb.Fixture
 import org.mongodb.FunctionalSpecification
 import org.mongodb.codecs.DocumentCodec
 
 import static java.util.Arrays.asList
+import static org.junit.Assume.assumeTrue
 import static org.mongodb.Fixture.getSession
 import static org.mongodb.WriteConcern.ACKNOWLEDGED
 
 class UpdateOperationSpecification extends FunctionalSpecification {
     def 'should return correct result for update'() {
         given:
-        new InsertOperation<Document>(getNamespace(), true, ACKNOWLEDGED, asList(new InsertRequest<Document>(new Document('_id', 1))),
-                                      new DocumentCodec()).execute(session)
-        def op = new UpdateOperation(getNamespace(), true, ACKNOWLEDGED, asList(new UpdateRequest(new Document('_id', 1),
-                                                                                                  new Document('$set',
-                                                                                                               new Document('x', 1)))),
+        getCollectionHelper().insertDocuments(new Document('_id', 1))
+        def op = new UpdateOperation(getNamespace(), true, ACKNOWLEDGED,
+                                     asList(new UpdateRequest(new Document('_id', 1), new Document('$set', new Document('x', 1)))),
+                                     new DocumentCodec())
+
+        when:
+        def result = op.execute(getSession())
+
+        then:
+        result.wasAcknowledged()
+        result.count == 1
+        result.upsertedId == null
+        result.isUpdateOfExisting()
+    }
+
+    def 'should return correct result for update asynchronously'() {
+        assumeTrue(Fixture.mongoClientURI.options.isAsyncEnabled())
+
+        given:
+        getCollectionHelper().insertDocuments(new Document('_id', 1))
+        def op = new UpdateOperation(getNamespace(), true, ACKNOWLEDGED,
+                                     asList(new UpdateRequest(new Document('_id', 1), new Document('$set', new Document('x', 1)))),
                                      new DocumentCodec())
 
         when:
-        def result = op.execute(getSession());
+        def result = op.executeAsync(getSession()).get()
 
         then:
         result.wasAcknowledged()
@@ -50,15 +64,35 @@ class UpdateOperationSpecification extends FunctionalSpecification {
     }
 
     def 'should return correct result for upsert'() {
+        given:
         def id = new ObjectId()
+        def op = new UpdateOperation(getNamespace(), true, ACKNOWLEDGED,
+                                     asList(new UpdateRequest(new Document('_id', id),
+                                                              new Document('$set', new Document('x', 1))).upsert(true)),
+                                     new DocumentCodec())
+
+        when:
+ ",Updated UpdateOperationSpecification to use helper and test async,"""Update UpdateOperationSpecification to use CollectionHelper for document insertion and add tests for asynchronous update and upsert operations""","According to the diff, the commit message should be:

""Update tests for UpdateOperation to use new insertDocuments method and async execution""","""Refactor UpdateOperationSpecification to use getCollectionHelper and assumeTrue for async tests""

The changes made in this commit include:

1. Importing `org.mongodb.Fixture` and `org.junit.Assume.assumeTrue`
2. Replacing the insert operation with `getCollectionHelper().insertDocuments(new Document('_id', 1))`
3. Adding a new test case for asynchronous updates using `assumeTrue(Fixture.mongoClientURI.options.isAsyncEnabled())`
4. Moving the execution of the update operation and assertions to separate `when` and `then` blocks for better readability.

The commit message suggests that the code has been refactored to use the `getCollectionHelper` method for inserting documents, and that a new test case has been added for asynchronous updates using `assumeTrue` for better handling of async tests.",Refactor UpdateOperationSpecification to improve readability and add async update tests.
"diff --git a/advanced/CHANGES.txt b/advanced/CHANGES.txt
index ce19385fa16..8d4380a44e1 100644
--- a/advanced/CHANGES.txt
+++ b/advanced/CHANGES.txt
@@ -1,3 +1,8 @@
+1.2-1.2.M03 (2010-11-04)
+------------------------
+
+No changes.
+
 0.1-1.2.M02 (2010-10-21)
 ------------------------
 ",Updated changelog . . git - svn - id : https : / / svn . neo4j . org / components / udc / trunk @ 6690 0b971d98 - bb2f - 0410 - 8247 - b05b2b5feb2a,"""Update CHANGES.txt to include 1.2-1.2.M03 release notes""",Added release notes for 1.2-1.2.M03.,"It seems like you're working with git and you're looking at a diff of a CHANGES.txt file. The commit message should reflect the changes made in this diff. However, the diff you've posted doesn't show any actual changes to the file content, only the addition of a new version section. So, a suitable commit message could be:

""Add version section for 1.2-1.2.M03 in CHANGES.txt""",Added release notes for version 1.2-1.2.M03 dated 2010-11-04 with a note indicating no changes were made.
"diff --git a/play-services-core/src/main/java/com/google/android/gms/chimera/container/DynamiteLoaderImpl.java b/play-services-core/src/main/java/com/google/android/gms/chimera/container/DynamiteLoaderImpl.java
index 5a8a2c50..43bd5caf 100644
--- a/play-services-core/src/main/java/com/google/android/gms/chimera/container/DynamiteLoaderImpl.java
+++ b/play-services-core/src/main/java/com/google/android/gms/chimera/container/DynamiteLoaderImpl.java
@@ -59,6 +59,9 @@ public class DynamiteLoaderImpl extends IDynamiteLoader.Stub {
             Log.d(TAG, ""returning temp fix module version for "" + moduleId + "". Firebase Database will not be functional!"");
             return com.google.android.gms.dynamite.descriptors.com.google.android.gms.firebase_database.ModuleDescriptor.MODULE_VERSION;
         }
+        if (moduleId.equals(""com.google.android.gms.googlecertificates"")) {
+            return com.google.android.gms.dynamite.descriptors.com.google.android.gms.googlecertificates.ModuleDescriptor.MODULE_VERSION;
+        }
         if (moduleId.equals(""com.google.android.gms.cast.framework.dynamite"")) {
             Log.d(TAG, ""returning temp fix module version for "" + moduleId + "". Cast API wil not be functional!"");
             return 1;
diff --git a/play-services-core/src/main/java/com/google/android/gms/common/GoogleCertificatesImpl.java b/play-services-core/src/main/java/com/google/android/gms/common/GoogleCertificatesImpl.java
new file mode 100644
index 00000000..bb9c6df2
--- /dev/null
+++ b/play-services-core/src/main/java/com/google/android/gms/common/GoogleCertificatesImpl.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2019 microG Project Team
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.android.gms.common;
+
+import android.os.RemoteException;
+import android.support.annotation.Keep;
+import android.util.Log;
+
+import com.google.android.gms.common.internal.GoogleCertificatesQuery;
+import com.google.android.gms.common.internal.IGoogleCertificatesApi;
+import com.google.android.gms.dynamic.IObjectWrapper;
+import com.google.android.gms.dynamic.ObjectWrapper;
+
+import org.microg.gms.common.PackageUtils;
+
+@Keep
+public class GoogleCertificatesImpl extends IGoogleCertificatesApi.Stub  {
+    private static final String TAG = ""GmsCertImpl"";
+
+    @Override
+    public IObjectWrapper getGoogleCertficates() throws RemoteException {
+        Log.d(TAG, ""unimplemented Method: getGoogleCertficates"");
+        return null;
+    }
+
+    @Override
+    public IObjectWrapper getGoogleReleaseCertificates() throws RemoteException {
+        Log.d(TAG, ""unimplemented Method: getGoogleReleaseCertificates"");
+        return null;
+    }
+
+    @Override
+    public boolean isGoogleReleaseSigned(String packageName, IObjectWrapper certData) throws RemoteException {
+        return PackageUtils.isGooglePackage(packageName, ObjectWrapper.unwrapTyped(certData, byte[].class));
+    }
+
+    @Override
+    public boolean isGoogleSigned(String packageName, IObjectWrapper certData) throws RemoteException {
+        return PackageUtils.isGooglePackage(packageName, ObjectWrapper.unwrapTyped(certData, byte[].class));
+    }
+
+    @Override
+    public boolean isGoogleOrPlatformSigned(GoogleCertificatesQuery query, IObjectWrapper packageManager) throws RemoteException {
+        return PackageUtils.isGooglePackage(query.getPackageName(), query.getCertData().getBytes());
+    }
+}
diff --git a/play-services-core/src/main/java/com/google/android/gms/dynamite/descriptors/com/google/android/gms/googlecertificates/ModuleDescriptor.java b/play-services-core/src/main/java/com/google/android/gms/dynamite/descriptors/com/google/android/gms/googlecertificates/ModuleDescriptor.java
new file mode 100644
index 00000000..36de33ae
--- /dev/null
+++ b/play-services-core/src/main/java/com/google/android/gms/dynamite/descriptors/com/google/android/gms/googlecertificates/ModuleDescriptor.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (C) 2019 microG Project Team
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.android.gms.dynamite.descriptors.com.google.android.gms.googlecertificates;
+
+public class ModuleDescriptor {
+    public static final String MODULE_ID = ""com.google.android.gms.googlecertificates"";
+    public static final int MODULE_VERSION = 1;
+}
diff --git a/play-services-core/src/main/java/org/microg/gms/common/PackageUtils.java b/play-services-core/src/main/java/org/microg/gms/common/PackageUtils.java
index 2cab68bc..27ae292f 100644
--- a/play-services-core/src/main/java/org/microg/gms/common/PackageUtils.java
+++ b/play-services-core/src/main/java/org/microg/gms/common/PackageUtils.java
@@ -64,6 +64,14 @@ public class PackageUtils {
 
     public static boolean isGooglePackage(Context context, String packageName) {
         String signatureDigest = firstSignatureDigest(context, packageName);
+        return isGooglePackage(packageName, signatureDigest);
+    }
+
+    public static boolean isGooglePackage(String packageName, byte[] bytes) {
+        return isGooglePackage(packageName, sha1sum(bytes));
+    }
+
+    public static boolean isGooglePackage(String packageName, String signatureDigest) {
         if (signatureDigest == null) return false;
         if (Arrays.asList(GOOGLE_PRIMARY_KEYS).contains(signatureDigest)) return true;
         if (!KNOWN_GOOGLE_PACKAGES.containsKey(packageName)) return false;
@@ -162,13 +170,13 @@ public class PackageUtils {
                     packageName = packagesForUid[0];
                 } else if (Arrays.asList(packagesForUid).contains(suggestedPackageName)) {
                     packageName = suggestedPackageName;
-                } else if (suggestedPackageName == null) {
+                } else {
                     packageName = packagesForUid[0];
                 }
             }
         }
         if (packageName != null && suggestedPackageName != null && !packageName.equals(suggestedPackageName)) {
-            throw new SecurityException(""UID ["" + callingUid + ""] is not related to packageName ["" + packageName + ""]"");
+            throw new SecurityException(""UID ["" + callingUid + ""] is not related to packageName ["" + suggestedPackageName + ""] (seems to be "" + packageName + "")"");
         }
         return packageName;
     }
diff --git a/play-services-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java b/play-services-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
index 0569e167..97b03570 100644
--- a/play-services-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
+++ b/play-services-core/src/main/java/org/microg/gms/location/GoogleLocationManagerServiceImpl.java
@@ -306,7 +306,7 @@ public class GoogleLocationManagerServiceImpl extends IGoogleLocationManagerServ
     @Override
     public void requestLocationSettingsDialog(LocationSettingsRequest settingsRequest, ISettingsCallbacks callback, String packageName) throws RemoteException {
         Log.d(TAG, ""requestLocationSettingsDialog: "" + settingsRequest);
-        PackageUtils.checkPackageUid(context, packageName, Binder.getCallingUid());
+        PackageUtils.getAndCheckCallingPackage(context, packageName);
         callback.onLocationSettingsResult(new LocationSettingsResult(new LocationSettingsStates(true, true, false, true, true, false), Status.CANCELED));
     }
 ",Add Google Certficate service,"""Added support for Google Certificates module and fixed package UID checks""","""Add GoogleCertificates API implementation and related dependencies for microG""","This commit adds support for the Google Certificates API in microG, including a new GoogleCertificatesImpl class and a corresponding ModuleDescriptor. It also modifies the DynamiteLoaderImpl class to return the correct module version for the Google Certificates API. Additionally, it updates the PackageUtils class to include new methods for checking if a package is signed by Google, and modifies the GoogleLocationManagerServiceImpl class to use the new PackageUtils method for checking the calling package.",Added GoogleCertificates module support and implemented basic methods for Google certificate validation.
"diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElement.java b/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElement.java
index 32cf78b67b..914180322a 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElement.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElement.java
@@ -26,14 +26,16 @@
 
 import java.util.Map;
 
-public class FindChildElement extends WebElementHandler<Map<String, String>> implements JsonParametersAware {
+public class FindChildElement extends WebElementHandler<Map<String, String>> {
   private volatile By by;
 
   public FindChildElement(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     by = newBySelector().pickFromJsonParameters(allParameters);
   }
 
diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElements.java b/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElements.java
index fd95ba3cd4..14e0f1e08d 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElements.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/FindChildElements.java
@@ -30,15 +30,16 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-public class FindChildElements extends WebElementHandler<Set<Map<String, String>>>
-    implements JsonParametersAware {
+public class FindChildElements extends WebElementHandler<Set<Map<String, String>>> {
   private volatile By by;
 
   public FindChildElements(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     by = newBySelector().pickFromJsonParameters(allParameters);
   }
 
diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/GetCssProperty.java b/java/server/src/org/openqa/selenium/remote/server/handler/GetCssProperty.java
index 3e7f70433a..b48d714ace 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/GetCssProperty.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/GetCssProperty.java
@@ -20,6 +20,8 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.remote.server.Session;
 
+import java.util.Map;
+
 public class GetCssProperty extends WebElementHandler<String> {
   private volatile String propertyName;
 
@@ -27,8 +29,10 @@ public GetCssProperty(Session session) {
     super(session);
   }
 
-  public void setPropertyName(String propertyName) {
-    this.propertyName = propertyName;
+  @Override
+  public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
+    propertyName = (String) allParameters.get(""propertyName"");
   }
 
   @Override
diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/GetElementAttribute.java b/java/server/src/org/openqa/selenium/remote/server/handler/GetElementAttribute.java
index 0690e8dd89..52ed1da602 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/GetElementAttribute.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/GetElementAttribute.java
@@ -19,6 +19,8 @@
 
 import org.openqa.selenium.remote.server.Session;
 
+import java.util.Map;
+
 public class GetElementAttribute extends WebElementHandler<String> {
 
   private volatile String name;
@@ -27,8 +29,10 @@ public GetElementAttribute(Session session) {
     super(session);
   }
 
-  public void setName(String name) {
-    this.name = name;
+  @Override
+  public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
+    name = (String) allParameters.get(""name"");
   }
 
   @Override
diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java b/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
index 0b9a20005a..a7f85594c9 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
@@ -17,14 +17,13 @@
 
 package org.openqa.selenium.remote.server.handler;
 
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
-public class SendKeys extends WebElementHandler<Void> implements JsonParametersAware {
+public class SendKeys extends WebElementHandler<Void> {
 
   private final List<String> keys = new ArrayList<>();
 
@@ -33,7 +32,9 @@ public SendKeys(Session session) {
   }
 
   @SuppressWarnings({""unchecked""})
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     List<String> rawKeys = (List<String>) allParameters.get(""value"");
     keys.addAll(rawKeys);
   }
diff --git a/java/server/src/org/openqa/selenium/remote/server/handler/WebElementHandler.java b/java/server/src/org/openqa/selenium/remote/server/handler/WebElementHandler.java
index 01e21526b3..981c8e4cd2 100644
--- a/java/server/src/org/openqa/selenium/remote/server/handler/WebElementHandler.java
+++ b/java/server/src/org/openqa/selenium/remote/server/handler/WebElementHandler.java
@@ -18,17 +18,21 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebElement;
+import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
-public abstract class WebElementHandler<T> extends WebDriverHandler<T> {
+import java.util.Map;
+
+public abstract class WebElementHandler<T> extends WebDriverHandler<T> implements JsonParametersAware {
   private volatile String elementId;
 
   protected WebElementHandler(Session session) {
     super(session);
   }
 
-  public void setId(String elementId) {
-    this.elementId = elementId;
+  @Override
+  public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    elementId = (String) allParameters.get(""id"");
   }
 
   protected WebElement getElement() {
diff --git a/java/server/src/org/openqa/selenium/remote/server/rest/PropertyMunger.java b/java/server/src/org/openqa/selenium/remote/server/rest/PropertyMunger.java
deleted file mode 100644
index b954e1424d..0000000000
--- a/java/server/src/org/openqa/selenium/remote/server/rest/PropertyMunger.java
+++ /dev/null
@@ -1,60 +0,0 @@
-// Licensed to the Software Freedom Conservancy (SFC) under one
-// or more contributor license agreements.  See the NOTICE file
-// distributed with this work for additional information
-// regarding copyright ownership.  The SFC licenses this file
-// to you under the Apache License, Version 2.0 (the
-// ""License""); you may not use this file except in compliance
-// with the License.  You may obtain a copy of the License at
-//
-//   http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing,
-// software distributed under the License is distributed on an
-// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-// KIND, either express or implied.  See the License for the
-// specific language governing permissions and limitations
-// under the License.
-
-package org.openqa.selenium.remote.server.rest;
-
-import org.openqa.selenium.json.SimplePropertyDescriptor;
-
-import java.lang.reflect.Method;
-
-class PropertyMunger {
-
-  public static Object get(String name, Object on) {
-    SimplePropertyDescriptor[] properties =
-        SimplePropertyDescriptor.getPropertyDescriptors(on.getClass());
-    for (SimplePropertyDescriptor property : properties) {
-      if (property.getName().equals(name) && property.getReadMethod() != null) {
-        Object result = property.getReadMethod().apply(on);
-        return String.valueOf(result);
-      }
-    }
-
-    return null;
-  }
-
-  public static void set(String name, Object on, Object value) throws Exception {
-    SimplePropertyDescriptor[] properties =
-        SimplePropertyDescriptor.getPropertyDescriptors(on.getClass());
-    for (SimplePropertyDescriptor property : properties) {
-      if (property.getName().equals(name)) {
-        Method writeMethod = property.getWriteMethod();
-        if (writeMethod == null) {
-          return;
-        }
-
-        Class<?>[] types = writeMethod.getParameterTypes();
-        if (types.length != 1) {
-          return;
-        }
-
-        if (String.class.equals(types[0])) {
-          writeMethod.invoke(on, value);
-        }
-      }
-    }
-  }
-}
diff --git a/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java b/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
index fd8dce873e..e3c47814e6 100644
--- a/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
+++ b/java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
@@ -20,7 +20,6 @@
 import com.google.common.collect.Lists;
 
 import org.openqa.selenium.NoSuchSessionException;
-import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.DriverCommand;
 import org.openqa.selenium.remote.ErrorCodes;
@@ -71,17 +70,6 @@ interface HandlerFactory {
     RestishHandler<?> createHandler(SessionId sessionId) throws Exception;
   }
 
-  protected RestishHandler<?> populate(RestishHandler<?> handler, Command command) {
-    for (Map.Entry<String, ?> entry : command.getParameters().entrySet()) {
-      try {
-        PropertyMunger.set(entry.getKey(), handler, entry.getValue());
-      } catch (Exception e) {
-        throw new WebDriverException(e);
-      }
-    }
-    return handler;
-  }
-
   public Response handle(Command command) throws Exception {
     Response response = new Response();
     SessionId sessionId = command.getSessionId();
@@ -91,7 +79,6 @@ public Response handle(Command command) throws Exception {
 
     throwUpIfSessionTerminated(sessionId);
     final RestishHandler<?> handler = handlerFactory.createHandler(sessionId);
-    populate(handler, command);
 
     try {
       if (handler instanceof JsonParametersAware) {
diff --git a/java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java b/java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
index bdbaa1aa94..79112eb0ca 100644
--- a/java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
+++ b/java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
@@ -17,17 +17,13 @@
 
 package org.openqa.selenium.remote.server.rest;
 
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-import com.google.common.collect.ImmutableMap;
-
 import org.junit.Test;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.StubHandler;
 
@@ -52,17 +48,6 @@ public void testShouldNotAllowNullToBeUsedForTheHandler() {
         .isThrownBy(() -> new ResultConfig(""/cheese"", null, null, logger));
   }
 
-  @Test
-  public void testShouldSetNamedParametersOnHandler() {
-    ResultConfig config = new ResultConfig(""/foo/:bar"", NamedParameterHandler.class, null, logger
-    );
-    Command command = new Command(dummySessionId, ""foo"", ImmutableMap.of(""bar"", ""fishy""));
-    NamedParameterHandler handler = new NamedParameterHandler();
-    config.populate(handler, command);
-
-    assertThat(handler.getBar()).isEqualTo(""fishy"");
-  }
-
   @SuppressWarnings({""ThrowableResultOfMethodCallIgnored""})
   @Test
   public void testShouldGracefullyHandleNullInputs() {
@@ -102,23 +87,4 @@ public void testDoesNotPeelTooManyLayersFromNestedExceptions() {
     assertEquals(noElement, toClient);
   }
 
-  public static class NamedParameterHandler implements RestishHandler<Void> {
-
-    private String bar;
-
-    public String getBar() {
-      return bar;
-    }
-
-    @SuppressWarnings({""UnusedDeclaration""})
-    public void setBar(String bar) {
-      this.bar = bar;
-    }
-
-    @Override
-    public Void handle() {
-      return null;
-    }
-  }
-
 }","Removing some reflection - based magic out of InMemory session handlers , making parameter passing more explicit ( using JsonParametersAware interface )","""Remove PropertyMunger and replace with JsonParametersAware interface""","""Remove PropertyMunger and simplify parameter handling in ResultConfig and handlers""","""Refactor WebElementHandler to implement JsonParametersAware and remove PropertyMunger""

This commit refactors the `WebElementHandler` class to implement the `JsonParametersAware` interface and sets the `elementId` field using the `setJsonParameters` method. Additionally, it removes the `PropertyMunger` class and updates the `SendKeys`, `GetCssProperty`, and `GetElementAttribute` classes to use the `setJsonParameters` method to set their respective fields. The `FindChildElement` and `FindChildElements` classes are also updated to extend `WebElementHandler` and implement the `setJsonParameters` method. Finally, the import for `JsonParametersAware` is removed from the `SendKeys` class.","""Refactor handlers to use setJsonParameters, remove PropertyMunger, update tests for named parameters handling."""
"diff --git a/pom.xml b/pom.xml
index a0f2db2ba..4f8a4dd7c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -94,6 +94,7 @@
 
     <scr.annotations.version>1.9.12</scr.annotations.version>
     <sundrio.version>0.3.12</sundrio.version>
+    <validation.api.version>1.1.0.Final</validation.api.version>
 
     <maven.bundle.plugin.version>2.5.4</maven.bundle.plugin.version>
     <maven.buildhelper.plugin.version>1.10</maven.buildhelper.plugin.version>
@@ -128,6 +129,7 @@
     <module>kubernetes-examples</module>
     <module>platforms</module>
     <module>kubernetes-tests</module>
+    <module>uberjar</module>
   </modules>
 
   <build>
@@ -245,6 +247,20 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+        <version>${maven.buildhelper.plugin.version}</version>
+        <inherited>true</inherited>
+        <executions>
+          <execution>
+            <id>parse-version</id>
+            <goals>
+              <goal>parse-version</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
     </plugins>
   </build>
 
diff --git a/uberjar/pom.xml b/uberjar/pom.xml
new file mode 100644
index 000000000..314c79d7d
--- /dev/null
+++ b/uberjar/pom.xml
@@ -0,0 +1,203 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Copyright (C) 2015 Red Hat, Inc.
+
+    Licensed under the Apache License, Version 2.0 (the ""License"");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+            http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+  <parent>
+    <artifactId>kubernetes-client-project</artifactId>
+    <groupId>io.fabric8</groupId>
+    <version>2.2-SNAPSHOT</version>
+  </parent>
+  <modelVersion>4.0.0</modelVersion>
+
+  <groupId>io.fabric8</groupId>
+  <artifactId>kubernetes-openshift-uberjar</artifactId>
+  <name>Fabric8 :: Kubernetes and Openshift :: UberJar</name>
+  <packaging>jar</packaging>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-shade-plugin</artifactId>
+        <version>3.0.0</version>
+        <executions>
+          <execution>
+            <id>uberjar</id>
+            <phase>package</phase>
+            <goals>
+              <goal>shade</goal>
+            </goals>
+            <configuration>
+              <artifactSet>
+                <includes>
+                  <include>io.fabric8:kubernetes-model</include>
+                  <include>io.fabric8:kubernetes-client</include>
+                  <include>io.fabric8:kubernetes-server-mock</include>
+                  <include>io.fabric8:openshift-client</include>
+                  <include>io.fabric8:openshift-server-mock</include>
+                </includes>
+              </artifactSet>
+            </configuration>
+          </execution>
+          <execution>
+            <id>relocation</id>
+            <phase>package</phase>
+            <goals>
+              <goal>shade</goal>
+            </goals>
+            <configuration>
+              <shadedArtifactAttached>true</shadedArtifactAttached>
+              <shadedClassifierName>versioned</shadedClassifierName>
+              <artifactSet>
+                <includes>
+                  <include>io.fabric8:kubernetes-model</include>
+                  <include>io.fabric8:kubernetes-client</include>
+                  <include>io.fabric8:kubernetes-server-mock</include>
+                  <include>io.fabric8:openshift-client</include>
+                  <include>io.fabric8:openshift-server-mock</include>
+                </includes>
+              </artifactSet>
+              <relocations>
+                <!--
+                  Let's relocate all user facing packages under:
+                    - io.fabric8.kubernetes.api.model.vMAJOR_MINOR
+                    - io.fabric8.kubernetes.client/vMAJOR_MINOR
+                -->
+                <relocation>
+                  <pattern>io.fabric8.kubernetes.api.model</pattern>
+                  <shadedPattern>io.fabric8.kubernetes.api.model.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}</shadedPattern>
+                </relocation>
+                <relocation>
+                  <pattern>io.fabric8.kubernetes.api.builder</pattern>
+                  <shadedPattern>io.fabric8.kubernetes.api.builder.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}</shadedPattern>
+                </relocation>
+                <relocation>
+                  <pattern>io.fabric8.openshift.api.model</pattern>
+                  <shadedPattern>io.fabric8.openshift.api.model.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}</shadedPattern>
+                </relocation>
+                <relocation>
+                  <pattern>io.fabric8.kubernetes.client</pattern>
+                  <!-- workaround for the duplicate relocation -->
+                  <shadedPattern>io.fabric8.kubernetes.clnt.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}</shadedPattern>
+                </relocation>
+                <relocation>
+                  <pattern>io.fabric8.openshift.client</pattern>
+                  <!-- workaround for the duplicate relocation -->
+                  <shadedPattern>io.fabric8.openshift.clnt.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}</shadedPattern>
+                </relocation>
+                <relocation>
+                  <pattern>io.fabric8.kubernetes.internal</pattern>
+                  <shadedPattern>io.fabric8.kubernetes.clnt.v${parsedVersion.majorVersion}_${parsedVersion.minorVersion}.internal</shadedPattern>
+                </relocation>
+              </relocations>
+              <transformers>
+                <transformer implementation=""org.apache.maven.plugins.shade.resource.ServicesResourceTransformer""/>
+              </transformers>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+  </build>
+
+  <dependencies>
+    <!-- For inclusion -->
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>kubernetes-model</artifactId>
+      <version>${kubernetes.model.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>kubernetes-client</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>kubernetes-server-mock</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>openshift-client</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>openshift-server-mock</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <!-- Legal Transitives -->
+    <dependency>
+      <groupId>javax.validation</groupId>
+      <artifactId>validation-api</artifactId>
+      <version>${validation.api.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup.okhttp3</groupId>
+      <artifactId>okhttp</artifactId>
+      <version>${okhttp.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup.okhttp3</groupId>
+      <artifactId>logging-interceptor</artifactId>
+      <version>${okhttp.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>slf4j-api</artifactId>
+      <version>${slf4j.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.dataformat</groupId>
+      <artifactId>jackson-dataformat-yaml</artifactId>
+      <version>${jackson.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+      <version>${jackson.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-core</artifactId>
+      <version>${jackson.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>io.fabric8</groupId>
+      <artifactId>zjsonpatch</artifactId>
+      <version>${zjsonpatch.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>com.github.mifmif</groupId>
+      <artifactId>generex</artifactId>
+      <version>${generex.version}</version>
+    </dependency>
+
+  </dependencies>
+</project>
+",Add an uberjar and an uberjar with versioned packages ( majro / minor ) .,"""Add uberjar module for creating a shaded jar of Kubernetes and Openshift clients""",Added support for creating an UberJar and included dependencies for it.,"""Added uberjar module and updated pom.xml""

The commit message should reflect the changes made in the diff. In this case, the main changes are the addition of a new module called ""uberjar"" and some updates to the pom.xml file. The new module seems to be related to building an uber jar, which is a jar file that contains all the dependencies of a project. The updates to the pom.xml file include new properties, plugins, and dependencies. The new properties define versions for some of the dependencies, while the new plugins are used to parse the version of the project and to build the uber jar. The new dependencies include modules and legal transitive dependencies for the project.","Add validation-api dependency, include uberjar module and build-helper-maven-plugin for additional parsing/relocations in the build process."
"diff --git a/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java
index 8bd3b634d69..d0163054e66 100644
--- a/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java
+++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java
@@ -417,7 +417,7 @@ public final class ObjectParser<Value, Context extends ParseFieldMatcherSupplier
         }
 
         public void assertSupports(String parserName, XContentParser.Token token, String currentFieldName, ParseFieldMatcher matcher) {
-            if (matcher.match(currentFieldName, parseField) == false) {
+            if (parseField.match(currentFieldName) == false) {
                 throw new IllegalStateException(""["" + parserName  + ""] parsefield doesn't accept: "" + currentFieldName);
             }
             if (supportedTokens.contains(token) == false) {
diff --git a/core/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java
index c499c30c607..3855489efe3 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java
@@ -19,7 +19,6 @@
 package org.elasticsearch.index.mapper;
 
 import org.apache.lucene.codecs.PostingsFormat;
-import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.suggest.document.Completion50PostingsFormat;
@@ -125,22 +124,22 @@ public class CompletionFieldMapper extends FieldMapper implements ArrayValueMapp
                 if (fieldName.equals(""type"")) {
                     continue;
                 }
-                if (parserContext.parseFieldMatcher().match(fieldName, Fields.ANALYZER)) {
+                if (Fields.ANALYZER.match(fieldName)) {
                     indexAnalyzer = getNamedAnalyzer(parserContext, fieldNode.toString());
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, Fields.SEARCH_ANALYZER)) {
+                } else if (Fields.SEARCH_ANALYZER.match(fieldName)) {
                     searchAnalyzer = getNamedAnalyzer(parserContext, fieldNode.toString());
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, Fields.PRESERVE_SEPARATORS)) {
+                } else if (Fields.PRESERVE_SEPARATORS.match(fieldName)) {
                     builder.preserveSeparators(Boolean.parseBoolean(fieldNode.toString()));
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, Fields.PRESERVE_POSITION_INCREMENTS)) {
+                } else if (Fields.PRESERVE_POSITION_INCREMENTS.match(fieldName)) {
                     builder.preservePositionIncrements(Boolean.parseBoolean(fieldNode.toString()));
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, Fields.MAX_INPUT_LENGTH)) {
+                } else if (Fields.MAX_INPUT_LENGTH.match(fieldName)) {
                     builder.maxInputLength(Integer.parseInt(fieldNode.toString()));
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, Fields.CONTEXTS)) {
+                } else if (Fields.CONTEXTS.match(fieldName)) {
                     builder.contextMappings(ContextMappings.load(fieldNode, parserContext.indexVersionCreated()));
                     iterator.remove();
                 } else if (parseMultiField(builder, name, parserContext, fieldName, fieldNode)) {
diff --git a/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
index d3f9eb22b72..6b4133fd33a 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
@@ -114,7 +114,7 @@ public class ParentFieldMapper extends MetadataFieldMapper {
                 if (fieldName.equals(""type"")) {
                     builder.type(fieldNode.toString());
                     iterator.remove();
-                } else if (parserContext.parseFieldMatcher().match(fieldName, FIELDDATA)) {
+                } else if (FIELDDATA.match(fieldName)) {
                     // for bw compat only
                     Map<String, String> fieldDataSettings = SettingsLoader.Helper.loadNestedFromMap(nodeMapValue(fieldNode, ""fielddata""));
                     if (fieldDataSettings.containsKey(""loading"")) {
diff --git a/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java
index b265124e78a..1b06c953a15 100644
--- a/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java
@@ -43,7 +43,6 @@ import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.TreeMap;
 
 /**
@@ -152,7 +151,7 @@ public class MultiMatchQueryBuilder extends AbstractQueryBuilder<MultiMatchQuery
             MultiMatchQueryBuilder.Type[] values = MultiMatchQueryBuilder.Type.values();
             Type type = null;
             for (MultiMatchQueryBuilder.Type t : values) {
-                if (parseFieldMatcher.match(value, t.parseField())) {
+                if (t.parseField().match(value)) {
                     type = t;
                     break;
                 }
diff --git a/core/src/main/java/org/elasticsearch/index/query/support/QueryParsers.java b/core/src/main/java/org/elasticsearch/index/query/support/QueryParsers.java
index 56cea478a2c..e7b980cb16a 100644
--- a/core/src/main/java/org/elasticsearch/index/query/support/QueryParsers.java
+++ b/core/src/main/java/org/elasticsearch/index/query/support/QueryParsers.java
@@ -59,13 +59,13 @@ public final class QueryParsers {
         if (rewriteMethod == null) {
             return defaultRewriteMethod;
         }
-        if (matcher.match(rewriteMethod, CONSTANT_SCORE)) {
+        if (CONSTANT_SCORE.match(rewriteMethod)) {
             return MultiTermQuery.CONSTANT_SCORE_REWRITE;
         }
-        if (matcher.match(rewriteMethod, SCORING_BOOLEAN)) {
+        if (SCORING_BOOLEAN.match(rewriteMethod)) {
             return MultiTermQuery.SCORING_BOOLEAN_REWRITE;
         }
-        if (matcher.match(rewriteMethod, CONSTANT_SCORE_BOOLEAN)) {
+        if (CONSTANT_SCORE_BOOLEAN.match(rewriteMethod)) {
             return MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE;
         }
 
@@ -81,13 +81,13 @@ public final class QueryParsers {
             final int size = Integer.parseInt(rewriteMethod.substring(firstDigit));
             String rewriteMethodName = rewriteMethod.substring(0, firstDigit);
 
-            if (matcher.match(rewriteMethodName, TOP_TERMS)) {
+            if (TOP_TERMS.match(rewriteMethodName)) {
                 return new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(size);
             }
-            if (matcher.match(rewriteMethodName, TOP_TERMS_BOOST)) {
+            if (TOP_TERMS_BOOST.match(rewriteMethodName)) {
                 return new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(size);
             }
-            if (matcher.match(rewriteMethodName, TOP_TERMS_BLENDED_FREQS)) {
+            if (TOP_TERMS_BLENDED_FREQS.match(rewriteMethodName)) {
                 return new MultiTermQuery.TopTermsBlendedFreqScoringRewrite(size);
             }
         }
diff --git a/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestClearIndicesCacheAction.java b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestClearIndicesCacheAction.java
index 942da1f092e..d40e7759c24 100644
--- a/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestClearIndicesCacheAction.java
+++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestClearIndicesCacheAction.java
@@ -83,19 +83,19 @@ public class RestClearIndicesCacheAction extends BaseRestHandler {
             ParseFieldMatcher parseFieldMatcher) {
 
         for (Map.Entry<String, String> entry : request.params().entrySet()) {
-            if (parseFieldMatcher.match(entry.getKey(), Fields.QUERY)) {
+            if (Fields.QUERY.match(entry.getKey())) {
                 clearIndicesCacheRequest.queryCache(request.paramAsBoolean(entry.getKey(), clearIndicesCacheRequest.queryCache()));
             }
-            if (parseFieldMatcher.match(entry.getKey(), Fields.REQUEST_CACHE)) {
+            if (Fields.REQUEST_CACHE.match(entry.getKey())) {
                 clearIndicesCacheRequest.requestCache(request.paramAsBoolean(entry.getKey(), clearIndicesCacheRequest.requestCache()));
             }
-            if (parseFieldMatcher.match(entry.getKey(), Fields.FIELD_DATA)) {
+            if (Fields.FIELD_DATA.match(entry.getKey())) {
                 clearIndicesCacheRequest.fieldDataCache(request.paramAsBoolean(entry.getKey(), clearIndicesCacheRequest.fieldDataCache()));
             }
-            if (parseFieldMatcher.match(entry.getKey(), Fields.RECYCLER)) {
+            if (Fields.RECYCLER.match(entry.getKey())) {
                 clearIndicesCacheRequest.recycler(request.paramAsBoolean(entry.getKey(), clearIndicesCacheRequest.recycler()));
             }
-            if (parseFieldMatcher.match(entry.getKey(), Fields.FIELDS)) {
+            if (Fields.FIELDS.match(entry.getKey())) {
                 clearIndicesCacheRequest.fields(request.paramAsStringArray(entry.getKey(), clearIndicesCacheRequest.fields()));
             }
         }
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/ip/IpRangeAggregationBuilder.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/ip/IpRangeAggregationBuilder.java
index 507f1961d62..5612743db61 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/ip/IpRangeAggregationBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/ip/IpRangeAggregationBuilder.java
@@ -94,13 +94,13 @@ public final class IpRangeAggregationBuilder
             if (parser.currentToken() == Token.FIELD_NAME) {
                 continue;
             }
-            if (parseFieldMatcher.match(parser.currentName(), RangeAggregator.Range.KEY_FIELD)) {
+            if (RangeAggregator.Range.KEY_FIELD.match(parser.currentName())) {
                 key = parser.text();
-            } else if (parseFieldMatcher.match(parser.currentName(), RangeAggregator.Range.FROM_FIELD)) {
+            } else if (RangeAggregator.Range.FROM_FIELD.match(parser.currentName())) {
                 from = parser.textOrNull();
-            } else if (parseFieldMatcher.match(parser.currentName(), RangeAggregator.Range.TO_FIELD)) {
+            } else if (RangeAggregator.Range.TO_FIELD.match(parser.currentName())) {
                 to = parser.textOrNull();
-            } else if (parseFieldMatcher.match(parser.currentName(), MASK_FIELD)) {
+            } else if (MASK_FIELD.match(parser.currentName())) {
                 mask = parser.text();
             } else {
                 throw new ParsingException(parser.getTokenLocation(), ""Unexpected ip range parameter: ["" + parser.currentName() + ""]"");
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java
index 6c392f0f283..5968f42211e 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java
@@ -119,7 +119,7 @@ public class GND extends NXYSignificanceHeuristic {
             boolean backgroundIsSuperset = true;
             XContentParser.Token token = parser.nextToken();
             while (!token.equals(XContentParser.Token.END_OBJECT)) {
-                if (context.getParseFieldMatcher().match(parser.currentName(), BACKGROUND_IS_SUPERSET)) {
+                if (BACKGROUND_IS_SUPERSET.match(parser.currentName())) {
                     parser.nextToken();
                     backgroundIsSuperset = parser.booleanValue();
                 } else {
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
index 69a759a77fd..5f92b5b40e6 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
@@ -160,10 +160,10 @@ public abstract class NXYSignificanceHeuristic extends SignificanceHeuristic {
             boolean backgroundIsSuperset = true;
             XContentParser.Token token = parser.nextToken();
             while (!token.equals(XContentParser.Token.END_OBJECT)) {
-                if (context.getParseFieldMatcher().match(parser.currentName(), INCLUDE_NEGATIVES_FIELD)) {
+                if (INCLUDE_NEGATIVES_FIELD.match(parser.currentName())) {
                     parser.nextToken();
                     includeNegatives = parser.booleanValue();
-                } else if (context.getParseFieldMatcher().match(parser.currentName(), BACKGROUND_IS_SUPERSET)) {
+                } else if (BACKGROUND_IS_SUPERSET.match(parser.currentName())) {
                     parser.nextToken();
                     backgroundIsSuperset = parser.booleanValue();
                 } else {
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregationBuilder.java b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregationBuilder.java
index 33da060ba7d..7cfc0cf61c1 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregationBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregationBuilder.java
@@ -643,8 +643,7 @@ public class TopHitsAggregationBuilder extends AbstractAggregationBuilder<TopHit
                                 } else if (token.isValue()) {
                                     if (SearchSourceBuilder.SCRIPT_FIELD.match(currentFieldName)) {
                                         script = Script.parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());
-                                    } else if (context.getParseFieldMatcher().match(currentFieldName,
-                                            SearchSourceBuilder.IGNORE_FAILURE_FIELD)) {
+                                    } else if (SearchSourceBuilder.IGNORE_FAILURE_FIELD.match(currentFieldName)) {
                                         ignoreFailure = parser.booleanValue();
                                     } else {
                                         throw new ParsingException(parser.getTokenLocation(),
diff --git a/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java
index 0028767c36f..5f99cb43646 100644
--- a/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java
@@ -269,11 +269,11 @@ public abstract class SuggestionBuilder<T extends SuggestionBuilder<T>> implemen
             if (token == XContentParser.Token.FIELD_NAME) {
                 currentFieldName = parser.currentName();
             } else if (token.isValue()) {
-                if (parsefieldMatcher.match(currentFieldName, TEXT_FIELD)) {
+                if (TEXT_FIELD.match(currentFieldName)) {
                     suggestText = parser.text();
-                } else if (parsefieldMatcher.match(currentFieldName, PREFIX_FIELD)) {
+                } else if (PREFIX_FIELD.match(currentFieldName)) {
                     prefix = parser.text();
-                } else if (parsefieldMatcher.match(currentFieldName, REGEX_FIELD)) {
+                } else if (PREFIX_FIELD.match(currentFieldName)) {
                     regex = parser.text();
                 } else {
                     throw new ParsingException(parser.getTokenLocation(), ""suggestion does not support ["" + currentFieldName + ""]"");
diff --git a/core/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpolation.java b/core/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpolation.java
index 72802e66eaa..e76868b5b3f 100644
--- a/core/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpolation.java
+++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpolation.java
@@ -143,17 +143,17 @@ public final class LinearInterpolation extends SmoothingModel {
             if (token == XContentParser.Token.FIELD_NAME) {
                 fieldName = parser.currentName();
             } else if (token.isValue()) {
-                if (matcher.match(fieldName, TRIGRAM_FIELD)) {
+                if (TRIGRAM_FIELD.match(fieldName)) {
                     trigramLambda = parser.doubleValue();
                     if (trigramLambda < 0) {
                         throw new IllegalArgumentException(""trigram_lambda must be positive"");
                     }
-                } else if (matcher.match(fieldName, BIGRAM_FIELD)) {
+                } else if (BIGRAM_FIELD.match(fieldName)) {
                     bigramLambda = parser.doubleValue();
                     if (bigramLambda < 0) {
                         throw new IllegalArgumentException(""bigram_lambda must be positive"");
                     }
-                } else if (matcher.match(fieldName, UNIGRAM_FIELD)) {
+                } else if (UNIGRAM_FIELD.match(fieldName)) {
                     unigramLambda = parser.doubleValue();
   ",Remove some usages of ParseFieldMatcher in favour of using ParseField directly .,"""Remove unnecessary parseFieldMatcher usage and directly use match method on ParseField instances""","""Refactor parseFieldMatcher usage to use match method directly on ParseField instances""","""Update ObjectParser to use parseField directly and remove unnecessary ParseFieldMatcher arguments""

Explanation:
The changes made in the provided diff are related to the usage of `parseField` and `ParseFieldMatcher` in the `ObjectParser` class and its related classes. The `parseField` is now being used directly instead of passing it as an argument to the `ParseFieldMatcher` methods. Additionally, some unnecessary `ParseFieldMatcher` arguments have been removed from method signatures. This commit message suggests that these changes are being made to simplify the code and improve its readability.",Refactor match method calls to directly use ParseField method instead of ParseFieldMatcher for cleaner code.
"diff --git a/robotium-solo/src/main/java/com/jayway/android/robotium/solo/Solo.java b/robotium-solo/src/main/java/com/jayway/android/robotium/solo/Solo.java
index e6454c7..7b03189 100755
--- a/robotium-solo/src/main/java/com/jayway/android/robotium/solo/Solo.java
+++ b/robotium-solo/src/main/java/com/jayway/android/robotium/solo/Solo.java
@@ -152,7 +152,7 @@ public class Solo {
 	}
 	
 	/**
-	 * Returns the absolute top parent {@code View} in for a given {@code View}.
+	 * Returns the absolute top parent {@code View} for a given {@code View}.
 	 *
 	 * @param view the {@code View} whose top parent is requested
 	 * @return the top parent {@code View}
@@ -201,7 +201,7 @@ public class Solo {
     /**
 	 * Waits for a text to be shown. Default timeout is 20 seconds. 
 	 * 
-	 * @param text the text that is expected to be shown
+	 * @param text the text to wait for
 	 * @return {@code true} if text is shown and {@code false} if it is not shown before the timeout
 	 * 
 	 */
@@ -215,7 +215,7 @@ public class Solo {
 	 /**
 	 * Waits for a text to be shown. 
 	 * 
-	 * @param text the text that needs to be shown
+	 * @param text the text to wait for
 	 * @param minimumNumberOfMatches the minimum number of matches that are expected to be shown. {@code 0} means any number of matches
 	 * @param timeout the the amount of time in milliseconds to wait 
 	 * @return {@code true} if text is shown and {@code false} if it is not shown before the timeout
@@ -229,7 +229,7 @@ public class Solo {
 	 /**
 	 * Waits for a text to be shown. 
 	 * 
-	 * @param text the text that needs to be shown
+	 * @param text the text to wait for
 	 * @param minimumNumberOfMatches the minimum number of matches that are expected to be shown. {@code 0} means any number of matches
 	 * @param timeout the the amount of time in milliseconds to wait
 	 * @param scroll {@code true} if scrolling should be performed
@@ -589,7 +589,7 @@ public class Solo {
 	
 
 	/**
-	 * Waits for a {@link android.app.Dialog} to close.
+	 * Waits for an {@link android.app.Dialog} to close.
 	 * 
 	 * @param timeout the amount of time in milliseconds to wait
 	 * @return {@code true} if the {@code Dialog} is closed before the timeout and {@code false} if it is not closed
@@ -710,7 +710,7 @@ public class Solo {
 	}
 	
 	/**
-	 * Presses a {@link android.view.MenuItem} with a given index. Index {@code 0} is the first item in the
+	 * Presses an {@link android.view.MenuItem} with a given index. Index {@code 0} is the first item in the
 	 * first row, Index {@code 3} is the first item in the second row and
 	 * index {@code 6} is the first item in the third row.
 	 * 
@@ -723,7 +723,7 @@ public class Solo {
 	}
 	
 	/**
-	 * Presses a {@link android.view.MenuItem} with a given index. Supports three rows with a given amount
+	 * Presses an {@link android.view.MenuItem} with a given index. Supports three rows with a given amount
 	 * of items. If itemsPerRow equals 5 then index 0 is the first item in the first row, 
 	 * index 5 is the first item in the second row and index 10 is the first item in the third row.
 	 * 
@@ -960,13 +960,13 @@ public class Solo {
 	 * returns an {@code ArrayList} of the {@link TextView}s that the list line is showing.
 	 * 
 	 * @param line the line that should be clicked
-	 * @param listIndex the index of the list. 1 if two lists are available
+	 * @param index the index of the list. 1 if two lists are available
 	 * @return an {@code ArrayList} of the {@code TextView} objects located in the list line
 	 *
 	 */
 	
-	public ArrayList<TextView> clickInList(int line, int listIndex) {
-		return clicker.clickInList(line, listIndex);
+	public ArrayList<TextView> clickInList(int line, int index) {
+		return clicker.clickInList(line, index);
 	}
 
 	 /**
@@ -1015,27 +1015,27 @@ public class Solo {
 	}
 	
 	/**
-	 * Scrolls down a list with a given {@code listIndex}.
+	 * Scrolls down a list with a given {@code index}.
 	 * 
-	 * @param listIndex the {@link ListView} to be scrolled. {@code 0} if only one list is available
+	 * @param index the {@link ListView} to be scrolled. {@code 0} if only one list is available
 	 * @return {@code true} if more scrolling can be done
 	 * 
 	 */
 	
-	public boolean scrollDownList(int listIndex) {
-		return scroller.scrollList(listIndex, Scroller.DOWN, null);
+	public boolean scrollDownList(int index) {
+		return scroller.scrollList(index, Scroller.DOWN, null);
 	}
 	
 	/**
-	 * Scrolls up a list with a given {@code listIndex}.
+	 * Scrolls up a list with a given {@code index}.
 	 * 
-	 * @param listIndex the {@link ListView} to be scrolled. {@code 0} if only one list is available
+	 * @param index the {@link ListView} to be scrolled. {@code 0} if only one list is available
 	 * @return {@code true} if more scrolling can be done
 	 * 
 	 */
 	
-	public boolean scrollUpList(int listIndex) {
-		return scroller.scrollList(listIndex, Scroller.UP, null);
+	public boolean scrollUpList(int index) {
+		return scroller.scrollList(index, Scroller.UP, null);
 	}
 	
 	/**
@@ -1658,7 +1658,7 @@ public class Solo {
 	}
 
 	/**
-	 * Tells Robotium to send a key: Right, Left, Up, Down, Enter, Menu, Delete, Call or End Call.
+	 * Sends a key: Right, Left, Up, Down, Enter, Menu, Delete, Call or End Call.
 	 * 
 	 * @param key the key to be sent. Use {@code Solo.}{@link #RIGHT}, {@link #LEFT}, {@link #UP}, {@link #DOWN}, {@link #ENTER}, {@link #MENU}, {@link #DELETE}, {@link #CALL}, {@link #ENDCALL}
 	 * ",Updated Solo . java Javadoc,"""Update method parameter names and descriptions for clarity and consistency""","According to the diff, the commit message should be:

""Improved Solo class documentation and method parameter names for clarity and consistency.""","""Updated method comments for clarity in Solo.java""

This commit appears to update the method comments in the Solo.java file for clarity. For example, the comment for the method `getTopParent(View view)` was changed from ""Returns the absolute top parent `View` in for a given `View`."" to ""Returns the absolute top parent `View` for a given `View`."". This change makes the comment more clear and concise. Similarly, other method comments were also updated for clarity.","Refactored comments in Solo.java for clarity and consistency, corrected parameter names, and fixed minor grammatical errors."
"diff --git a/src/main/java/org/apache/ibatis/executor/BaseExecutor.java b/src/main/java/org/apache/ibatis/executor/BaseExecutor.java
index c450bd70cb..d3bfa37932 100644
--- a/src/main/java/org/apache/ibatis/executor/BaseExecutor.java
+++ b/src/main/java/org/apache/ibatis/executor/BaseExecutor.java
@@ -159,10 +159,13 @@ public abstract class BaseExecutor implements Executor {
 
   public void rollback(boolean required) throws SQLException {
     if (!closed) {
-      clearLocalCache();
-      flushStatements();
-      if (required) {
-        transaction.rollback();
+      try {
+        clearLocalCache();
+        flushStatements();
+      } finally {
+        if (required) {
+          transaction.rollback();
+        }
       }
     }
   }",added a try / finally block for added safety during rollback,"""Ensure transaction rollback is executed even if clearLocalCache or flushStatements fail in BaseExecutor""","""Improve rollback logic in BaseExecutor to ensure transaction rollback is always executed""","""Refactor rollback method to use try-finally block for clearLocalCache and flushStatements in BaseExecutor class""

Explanation: The code change involves refactoring the rollback method in the BaseExecutor class. The clearLocalCache and flushStatements methods are now enclosed in a try block, and the transaction rollback is placed inside a finally block. This ensures that the transaction is rolled back even if an exception occurs during the execution of clearLocalCache or flushStatements methods.",Add try-finally block around rollback to ensure cache clearing and statement flushing before transaction rollback.
"diff --git a/Bukkit-Patches/0001-POM-Changes.patch b/Bukkit-Patches/0001-POM-Changes.patch
index 9508a12c1..d0770aea7 100644
--- a/Bukkit-Patches/0001-POM-Changes.patch
+++ b/Bukkit-Patches/0001-POM-Changes.patch
@@ -1,4 +1,4 @@
-From 92ffae9c8707c17a643cb877d92f3e0fa9d23bcc Mon Sep 17 00:00:00 2001
+From 0ab1f6df9fbd63d6057dd0939c3e1b537297ee85 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 10:36:24 +1000
 Subject: [PATCH] POM Changes
@@ -65,5 +65,5 @@ index 50f9bae..fb303e2 100644
          <plugins>
              <plugin>
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0002-Measure-Timings-Duration.patch b/Bukkit-Patches/0002-Measure-Timings-Duration.patch
index 5320dffb2..fbbfa1a84 100644
--- a/Bukkit-Patches/0002-Measure-Timings-Duration.patch
+++ b/Bukkit-Patches/0002-Measure-Timings-Duration.patch
@@ -1,4 +1,4 @@
-From 2674d1cc80c1aba22c182561dd5da0b048a33b7c Mon Sep 17 00:00:00 2001
+From febc38ac8c7a2acfef1892d6aede6b8f3515bb11 Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Sun, 2 Jun 2013 10:42:57 +1000
 Subject: [PATCH] Measure Timings Duration
@@ -49,5 +49,5 @@ index 787dcfe..b870ecd 100644
      }
  
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0003-Timings-Paste-Command.patch b/Bukkit-Patches/0003-Timings-Paste-Command.patch
index 8d986631d..37c79677e 100644
--- a/Bukkit-Patches/0003-Timings-Paste-Command.patch
+++ b/Bukkit-Patches/0003-Timings-Paste-Command.patch
@@ -1,4 +1,4 @@
-From 72fa7c7524692663a48d20459360b4dd2d8f6127 Mon Sep 17 00:00:00 2001
+From 7d888e10bd2282fadffab90e213be2b412655b04 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 10:55:20 +1000
 Subject: [PATCH] Timings Paste Command
diff --git a/Bukkit-Patches/0004-Enchanced-Timings.patch b/Bukkit-Patches/0004-Enchanced-Timings.patch
index 4360b7991..c4254f553 100644
--- a/Bukkit-Patches/0004-Enchanced-Timings.patch
+++ b/Bukkit-Patches/0004-Enchanced-Timings.patch
@@ -1,4 +1,4 @@
-From 5788df3c533911bb1c4d9764c3d08e37f866f279 Mon Sep 17 00:00:00 2001
+From 1a874bc9cc0a9f5802e8b410ee6cf188794e4967 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 11:17:05 +1000
 Subject: [PATCH] Enchanced Timings
diff --git a/Bukkit-Patches/0005-Add-PlayerItemDamageEvent.patch b/Bukkit-Patches/0005-Add-PlayerItemDamageEvent.patch
index 725b450c3..2854833e0 100644
--- a/Bukkit-Patches/0005-Add-PlayerItemDamageEvent.patch
+++ b/Bukkit-Patches/0005-Add-PlayerItemDamageEvent.patch
@@ -1,4 +1,4 @@
-From 22694aef996c25381c7c276d4d46885c82dc7447 Mon Sep 17 00:00:00 2001
+From eaceb28e82b974d618828104f86074e74529b2e9 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Mon, 4 Mar 2013 18:31:20 +1100
 Subject: [PATCH] Add PlayerItemDamageEvent
diff --git a/Bukkit-Patches/0006-BungeeCord-Support.patch b/Bukkit-Patches/0006-BungeeCord-Support.patch
index dafd2d4be..022dd01a5 100644
--- a/Bukkit-Patches/0006-BungeeCord-Support.patch
+++ b/Bukkit-Patches/0006-BungeeCord-Support.patch
@@ -1,11 +1,11 @@
-From 0338bcb97d3daff6160d8ee94e6b8a90e8ee42d0 Mon Sep 17 00:00:00 2001
+From 13bf0b8e141d290ef4be6a0b75e8aa82e5d5fd1a Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 15:20:49 +1000
 Subject: [PATCH] BungeeCord Support
 
 
 diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
-index 3c096f5..234a82d 100644
+index 44c9b5a..21f348b 100644
 --- a/src/main/java/org/bukkit/entity/Player.java
 +++ b/src/main/java/org/bukkit/entity/Player.java
 @@ -1018,4 +1018,23 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
diff --git a/Bukkit-Patches/0007-Add-Arrow-API.patch b/Bukkit-Patches/0007-Add-Arrow-API.patch
index b493a1986..1820476a1 100644
--- a/Bukkit-Patches/0007-Add-Arrow-API.patch
+++ b/Bukkit-Patches/0007-Add-Arrow-API.patch
@@ -1,4 +1,4 @@
-From 3368da5f94185d954c7937a2cf3df8f53adeb118 Mon Sep 17 00:00:00 2001
+From cbf63431431dd4051330fae4332ab3c8344632be Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 15:08:24 +1000
 Subject: [PATCH] Add Arrow API
@@ -30,5 +30,5 @@ index e49eef0..e7a32f7 100644
 +    Spigot spigot();
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0008-Add-Particle-API.patch b/Bukkit-Patches/0008-Add-Particle-API.patch
index 97557e03a..32aefe416 100644
--- a/Bukkit-Patches/0008-Add-Particle-API.patch
+++ b/Bukkit-Patches/0008-Add-Particle-API.patch
@@ -1,4 +1,4 @@
-From 52f16d9f47956b8295dfaccb85cd4738201156cc Mon Sep 17 00:00:00 2001
+From 855a6da4ddb7bcb75cd4c45e2dcb2b9a42c4f6f4 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 15:57:09 +1000
 Subject: [PATCH] Add Particle API
@@ -327,7 +327,7 @@ index f02bfb7..a58eb05 100644
       * Represents various map environment types that a world may be
       */
 diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
-index 234a82d..bcfe0f9 100644
+index 21f348b..a2ac7a6 100644
 --- a/src/main/java/org/bukkit/entity/Player.java
 +++ b/src/main/java/org/bukkit/entity/Player.java
 @@ -1033,6 +1033,11 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
diff --git a/Bukkit-Patches/0009-Define-EntitySpawnEvent-and-SpawnerSpawnEvent.patch b/Bukkit-Patches/0009-Define-EntitySpawnEvent-and-SpawnerSpawnEvent.patch
index e8c8e8dd5..7cf2b7b80 100644
--- a/Bukkit-Patches/0009-Define-EntitySpawnEvent-and-SpawnerSpawnEvent.patch
+++ b/Bukkit-Patches/0009-Define-EntitySpawnEvent-and-SpawnerSpawnEvent.patch
@@ -1,4 +1,4 @@
-From 6380f957a4917616cfb36fcb299b8f8fe9a5ad7e Mon Sep 17 00:00:00 2001
+From 8aa02378d120ed69b1ec15830c150205580ef74b Mon Sep 17 00:00:00 2001
 From: Andy Shulman <andy.shulman@hotmail.com>
 Date: Mon, 15 Apr 2013 20:06:01 -0500
 Subject: [PATCH] Define EntitySpawnEvent and SpawnerSpawnEvent
@@ -6,7 +6,7 @@ Subject: [PATCH] Define EntitySpawnEvent and SpawnerSpawnEvent
 Defines EntitySpawnEvent and SpawnerSpawnEvent. Adds BUKKIT-267 and BUKKIT-1559
 
 diff --git a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
-index 3055ea7..6bde0fe 100644
+index 46b8262..182f634 100644
 --- a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
 +++ b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
 @@ -4,17 +4,13 @@ import org.bukkit.Location;
diff --git a/Bukkit-Patches/0010-Entity-Mount-and-Dismount-Events.patch b/Bukkit-Patches/0010-Entity-Mount-and-Dismount-Events.patch
index 07b71485a..46e5dbeee 100644
--- a/Bukkit-Patches/0010-Entity-Mount-and-Dismount-Events.patch
+++ b/Bukkit-Patches/0010-Entity-Mount-and-Dismount-Events.patch
@@ -1,4 +1,4 @@
-From 8afee7fae3fb6e5906f7116c705a7b2933cc61cc Mon Sep 17 00:00:00 2001
+From 58be738382c873e893de43f6c04c4d32d896c4d1 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 2 Jul 2013 20:32:53 +1000
 Subject: [PATCH] Entity Mount and Dismount Events
diff --git a/Bukkit-Patches/0011-Update-Depends.patch b/Bukkit-Patches/0011-Update-Depends.patch
index a7478ee08..adca87646 100644
--- a/Bukkit-Patches/0011-Update-Depends.patch
+++ b/Bukkit-Patches/0011-Update-Depends.patch
@@ -1,4 +1,4 @@
-From 18fe53680a58716ef7a2f0b8ef7da0d6a903e584 Mon Sep 17 00:00:00 2001
+From e8da0323d4163ef96b9be72eabe3d5b730834efd Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Thu, 4 Jul 2013 20:05:19 +1000
 Subject: [PATCH] Update Depends
@@ -6,7 +6,7 @@ Subject: [PATCH] Update Depends
 - All of these changes have been reviewed to be binary compatible and in general contract compatible with previous versions of the libraries.
 
 diff --git a/pom.xml b/pom.xml
-index efb3262..f6ee82d 100644
+index fb303e2..5187a99 100644
 --- a/pom.xml
 +++ b/pom.xml
 @@ -77,21 +77,21 @@
diff --git a/Bukkit-Patches/0012-InventoryClickEvent-getClickedInventory.patch b/Bukkit-Patches/0012-InventoryClickEvent-getClickedInventory.patch
index 5fd3b3790..0d3eed7ed 100644
--- a/Bukkit-Patches/0012-InventoryClickEvent-getClickedInventory.patch
+++ b/Bukkit-Patches/0012-InventoryClickEvent-getClickedInventory.patch
@@ -1,4 +1,4 @@
-From 6175899bf3eb1db85f088bdd5765b39cafe7cfbe Mon Sep 17 00:00:00 2001
+From e8c2741c4a8f6c5080bebca67e88220ede5419ef Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Sun, 7 Jul 2013 10:32:05 -0400
 Subject: [PATCH] InventoryClickEvent getClickedInventory
diff --git a/Bukkit-Patches/0013-Added-getAllSessionData-to-the-Conversation-API.patch b/Bukkit-Patches/0013-Added-getAllSessionData-to-the-Conversation-API.patch
index 0fc796aa5..707506dbd 100644
--- a/Bukkit-Patches/0013-Added-getAllSessionData-to-the-Conversation-API.patch
+++ b/Bukkit-Patches/0013-Added-getAllSessionData-to-the-Conversation-API.patch
@@ -1,4 +1,4 @@
-From f555fa83917fc1b8b3f04d17474e9f3dd77e83aa Mon Sep 17 00:00:00 2001
+From 70ce792e4a61366ea17987ebf1ad1d90cb4df908 Mon Sep 17 00:00:00 2001
 From: Alex Bennett <alex.eugene.bennett@gmail.com>
 Date: Thu, 11 Jul 2013 15:31:32 -0500
 Subject: [PATCH] Added getAllSessionData() to the Conversation API.
diff --git a/Bukkit-Patches/0014-Catch-Conversation-API-Errors.patch b/Bukkit-Patches/0014-Catch-Conversation-API-Errors.patch
index 0f73b0057..91a38eb8c 100644
--- a/Bukkit-Patches/0014-Catch-Conversation-API-Errors.patch
+++ b/Bukkit-Patches/0014-Catch-Conversation-API-Errors.patch
@@ -1,4 +1,4 @@
-From d802b950620698530d09f1bbf4cead0875514acc Mon Sep 17 00:00:00 2001
+From a0feb888a9a0017132f70f0fdce1b99e587c1735 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Mon, 22 Jul 2013 19:09:43 +1000
 Subject: [PATCH] Catch Conversation API Errors
diff --git a/Bukkit-Patches/0015-Player-Collision-API.patch b/Bukkit-Patches/0015-Player-Collision-API.patch
index 6b70ad7bc..109472ca5 100644
--- a/Bukkit-Patches/0015-Player-Collision-API.patch
+++ b/Bukkit-Patches/0015-Player-Collision-API.patch
@@ -1,11 +1,11 @@
-From a786683923823eafeba4fac99c6da728b9795450 Mon Sep 17 00:00:00 2001
+From 240fc02a1e8cc6aa73258b81e2721b03328ad450 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 3 Aug 2013 19:20:50 +1000
 Subject: [PATCH] Player Collision API
 
 
 diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
-index bcfe0f9..1c80bd2 100644
+index a2ac7a6..55681ff 100644
 --- a/src/main/java/org/bukkit/entity/Player.java
 +++ b/src/main/java/org/bukkit/entity/Player.java
 @@ -1038,6 +1038,27 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
diff --git a/Bukkit-Patches/0016-Expand-Boolean-Prompt-Values.patch b/Bukkit-Patches/0016-Expand-Boolean-Prompt-Values.patch
index 2319494fd..07b5b72ae 100644
--- a/Bukkit-Patches/0016-Expand-Boolean-Prompt-Values.patch
+++ b/Bukkit-Patches/0016-Expand-Boolean-Prompt-Values.patch
@@ -1,4 +1,4 @@
-From f0bae7b84e09f60501778e6c42ebaa948c384619 Mon Sep 17 00:00:00 2001
+From bf0593497a0cf78104fdec4b477bf18528ab6d60 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 3 Aug 2013 19:42:16 +1000
 Subject: [PATCH] Expand Boolean Prompt Values
diff --git a/Bukkit-Patches/0017-Add-Getter-for-Entity-Invulnerability.patch b/Bukkit-Patches/0017-Add-Getter-for-Entity-Invulnerability.patch
index bd835bb2e..0f49fd981 100644
--- a/Bukkit-Patches/0017-Add-Getter-for-Entity-Invulnerability.patch
+++ b/Bukkit-Patches/0017-Add-Getter-for-Entity-Invulnerability.patch
@@ -1,4 +1,4 @@
-From 237b0b740120484e05de4a45066e83235f158db7 Mon Sep 17 00:00:00 2001
+From 084c77ae158c6f4a05ed31f39d1fed72a113378a Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 3 Aug 2013 19:49:36 +1000
 Subject: [PATCH] Add Getter for Entity Invulnerability
diff --git a/Bukkit-Patches/0018-Add-respawn-API.patch b/Bukkit-Patches/0018-Add-respawn-API.patch
index 19219ce58..494285ffe 100644
--- a/Bukkit-Patches/0018-Add-respawn-API.patch
+++ b/Bukkit-Patches/0018-Add-respawn-API.patch
@@ -1,11 +1,11 @@
-From 0404f576113f57a2c7f605935b5c9296f9a5b0a9 Mon Sep 17 00:00:00 2001
+From 69c9fcf3b9cf8b0130d1deda78b36aaded807720 Mon Sep 17 00:00:00 2001
 From: ninja- <xninja@openmailbox.org>
 Date: Tue, 8 Oct 2013 14:35:58 +0200
 Subject: [PATCH] Add respawn API.
 
 
 diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
-index 1c80bd2..adef230 100644
+index 55681ff..5a8c13e 100644
 --- a/src/main/java/org/bukkit/entity/Player.java
 +++ b/src/main/java/org/bukkit/entity/Player.java
 @@ -1059,6 +1059,14 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
diff --git a/Bukkit-Patches/0019-Fix-Plugin-Message-API-Disconnects.patch b/Bukkit-Patches/0019-Fix-Plugin-Message-API-Disconnects.patch
index 5362dd3f1..ba7da4481 100644
--- a/Bukkit-Patches/0019-Fix-Plugin-Message-API-Disconnects.patch
+++ b/Bukkit-Patches/0019-Fix-Plugin-Message-API-Disconnects.patch
@@ -1,4 +1,4 @@
-From 8e6a3caa62c4b17bdc9d2994201a51af8f3b7026 Mon Sep 17 00:00:00 2001
+From eef94addd975a73d35545f162b33c192290c15b7 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 19 Oct 2013 12:59:42 +1100
 Subject: [PATCH] Fix Plugin Message API Disconnects
diff --git a/Bukkit-Patches/0020-Fix-Tab-Completion-for-Some-Commands.patch b/Bukkit-Patches/0020-Fix-Tab-Completion-for-Some-Commands.patch
index ddf980dbd..b73beac00 100644
--- a/Bukkit-Patches/0020-Fix-Tab-Completion-for-Some-Commands.patch
+++ b/Bukkit-Patches/0020-Fix-Tab-Completion-for-Some-Commands.patch
@@ -1,4 +1,4 @@
-From 600904b4ab7510e3a9915305e720122073b7064b Mon Sep 17 00:00:00 2001
+From 7962f8977790ecd6de241dff015c3d105984ff14 Mon Sep 17 00:00:00 2001
 From: md_5 <git@md-5.net>
 Date: Tue, 24 Dec 2013 10:14:25 +1100
 Subject: [PATCH] Fix Tab Completion for Some Commands
@@ -81,5 +81,5 @@ index c9ac1ce..a687fef 100644
 +    // Spigot End
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0021-Add-Spigot-Links.patch b/Bukkit-Patches/0021-Add-Spigot-Links.patch
index d4526f02e..116074ace 100644
--- a/Bukkit-Patches/0021-Add-Spigot-Links.patch
+++ b/Bukkit-Patches/0021-Add-Spigot-Links.patch
@@ -1,4 +1,4 @@
-From 250fe28a27eff40f1725c1cf1384f06551e76dea Mon Sep 17 00:00:00 2001
+From a4659b2634e53721ab1f46d0539415c1bbf290e4 Mon Sep 17 00:00:00 2001
 From: md_5 <git@md-5.net>
 Date: Thu, 23 Jan 2014 13:17:38 +1100
 Subject: [PATCH] Add Spigot Links
@@ -25,5 +25,5 @@ index a51766e..1905b8d 100644
  Compilation
  -----------
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0022-Implement-Locale-Getter-for-Players.patch b/Bukkit-Patches/0022-Implement-Locale-Getter-for-Players.patch
index 2f9d7c565..d48776123 100644
--- a/Bukkit-Patches/0022-Implement-Locale-Getter-for-Players.patch
+++ b/Bukkit-Patches/0022-Implement-Locale-Getter-for-Players.patch
@@ -1,4 +1,4 @@
-From 84f288a09f1bd1e57582a8cdab93a413a0cef7e0 Mon Sep 17 00:00:00 2001
+From 2994d06fa87fd2535a7b464b7a041e2c5c8e9dab Mon Sep 17 00:00:00 2001
 From: Smove <jan@lavasurvival.net>
 Date: Sat, 1 Feb 2014 18:10:49 +1100
 Subject: [PATCH] Implement Locale Getter for Players
@@ -26,5 +26,5 @@ index 5a8c13e..204c4b2 100644
  
      Spigot spigot();
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0023-Add-support-for-fetching-hidden-players.patch b/Bukkit-Patches/0023-Add-support-for-fetching-hidden-players.patch
index 20ed7ad3e..33055aba2 100644
--- a/Bukkit-Patches/0023-Add-support-for-fetching-hidden-players.patch
+++ b/Bukkit-Patches/0023-Add-support-for-fetching-hidden-players.patch
@@ -1,4 +1,4 @@
-From 874417c9a73472f62a4ba3bfbeac8db77d0831eb Mon Sep 17 00:00:00 2001
+From 4a752151018a3b7fe29c65482b3dff42776c0155 Mon Sep 17 00:00:00 2001
 From: Tux <write@imaginarycode.com>
 Date: Sun, 9 Feb 2014 14:02:11 -0500
 Subject: [PATCH] Add support for fetching hidden players
@@ -26,5 +26,5 @@ index 204c4b2..6237663 100644
  
      Spigot spigot();
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/Bukkit-Patches/0024-Silenceable-Lightning-API.patch b/Bukkit-Patches/0024-Silenceable-Lightning-API.patch
index ede65e3ba..186f2c586 100644
--- a/Bukkit-Patches/0024-Silenceable-Lightning-API.patch
+++ b/Bukkit-Patches/0024-Silenceable-Lightning-API.patch
@@ -1,4 +1,4 @@
-From e296443703879cb13a4523119a24d123d6116f90 Mon Sep 17 00:00:00 2001
+From ee7e81c4564a2917dbf3432275366f1e0a0d5eba Mon Sep 17 00:00:00 2001
 From: drXor <mcyoungsota@gmail.com>
 Date: Sun, 23 Feb 2014 16:16:29 -0400
 Subject: [PATCH] Silenceable Lightning API
@@ -66,5 +66,5 @@ index c8b5154..1ed4ac9 100644
 +    Spigot spigot();
  }
 -- 
-1.8.5.2.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0001-POM-Changes.patch b/CraftBukkit-Patches/0001-POM-Changes.patch
index ca4f51c30..92d7784db 100644
--- a/CraftBukkit-Patches/0001-POM-Changes.patch
+++ b/CraftBukkit-Patches/0001-POM-Changes.patch
@@ -1,4 +1,4 @@
-From 7b88347fa436856bff54d6f6a10bbad8e4941e5e Mon Sep 17 00:00:00 2001
+From 068c237f30a7efb3a384d5f9d74de9f11066d9b7 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 2 Jul 2013 13:07:39 +1000
 Subject: [PATCH] POM Changes
@@ -168,5 +168,5 @@ index f905d17..9304637 100644
  
          if (stream != null) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0002-mc-dev-imports.patch b/CraftBukkit-Patches/0002-mc-dev-imports.patch
index 2f1e17a39..0ec142da4 100644
--- a/CraftBukkit-Patches/0002-mc-dev-imports.patch
+++ b/CraftBukkit-Patches/0002-mc-dev-imports.patch
@@ -1,4 +1,4 @@
-From 944e2150034a80c046ca0651cdf53d7cdf7e0b7f Mon Sep 17 00:00:00 2001
+From a7f103fcbb778d58ff85a1897bfa9ea3f1b01405 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 1 Dec 2013 15:10:48 +1100
 Subject: [PATCH] mc-dev imports
diff --git a/CraftBukkit-Patches/0003-Skeleton-API-Implementations.patch b/CraftBukkit-Patches/0003-Skeleton-API-Implementations.patch
index 743393137..6435dc202 100644
--- a/CraftBukkit-Patches/0003-Skeleton-API-Implementations.patch
+++ b/CraftBukkit-Patches/0003-Skeleton-API-Implementations.patch
@@ -1,4 +1,4 @@
-From ec47c27cbee89a54bc68d4fa7b25b86653034326 Mon Sep 17 00:00:00 2001
+From f0d4c7aafa4fd50151977532530e35b70a88d2fe Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 15:10:56 +1000
 Subject: [PATCH] Skeleton API Implementations
@@ -84,5 +84,5 @@ index 60b0435..573f9a5 100644
 +    // Spigot end
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0004-Spigot-Configuration.patch b/CraftBukkit-Patches/0004-Spigot-Configuration.patch
index 9b453ee60..e56a1fd11 100644
--- a/CraftBukkit-Patches/0004-Spigot-Configuration.patch
+++ b/CraftBukkit-Patches/0004-Spigot-Configuration.patch
@@ -1,4 +1,4 @@
-From 1c7ef189534ecaf5de7bdcc9db234088c7dc172e Mon Sep 17 00:00:00 2001
+From e93ba24d7e89f1a942518b90ae962db720e0a48b Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 7 Jul 2013 09:32:53 +1000
 Subject: [PATCH] Spigot Configuration
@@ -297,5 +297,5 @@ index 0000000..961ddb4
 +    }
 +}
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0005-Better-Chunk-Tick-Selection.patch b/CraftBukkit-Patches/0005-Better-Chunk-Tick-Selection.patch
index c420ad067..7765f6013 100644
--- a/CraftBukkit-Patches/0005-Better-Chunk-Tick-Selection.patch
+++ b/CraftBukkit-Patches/0005-Better-Chunk-Tick-Selection.patch
@@ -1,4 +1,4 @@
-From fbc8819e3a23876e68abe0c2d8e225a8d1ea2657 Mon Sep 17 00:00:00 2001
+From 7ef1e71a186d42b87ba3245cbf5199604594ebc7 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 11 Jun 2013 12:56:02 +1000
 Subject: [PATCH] Better Chunk Tick Selection
@@ -165,7 +165,7 @@ index b9b967f..3a8856d 100644
  
      public boolean a(int i, int j, int k, Block block) {
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 961ddb4..6ba7f5c 100644
+index 961ddb4..90a227f 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -68,4 +68,15 @@ public class SpigotWorldConfig
@@ -185,5 +185,5 @@ index 961ddb4..6ba7f5c 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0006-Crop-Growth-Rates.patch b/CraftBukkit-Patches/0006-Crop-Growth-Rates.patch
index 47dc9e9ab..99a2e510d 100644
--- a/CraftBukkit-Patches/0006-Crop-Growth-Rates.patch
+++ b/CraftBukkit-Patches/0006-Crop-Growth-Rates.patch
@@ -1,4 +1,4 @@
-From 9191ae50b72b0425168cc5e4a011533fa8e35a85 Mon Sep 17 00:00:00 2001
+From dea7b29300a40eb45392df388b7e7c2c49e098ce Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 17:17:20 +1000
 Subject: [PATCH] Crop Growth Rates
diff --git a/CraftBukkit-Patches/0007-More-Efficient-Chunk-Save-Queue.patch b/CraftBukkit-Patches/0007-More-Efficient-Chunk-Save-Queue.patch
index d045786b9..5f023a998 100644
--- a/CraftBukkit-Patches/0007-More-Efficient-Chunk-Save-Queue.patch
+++ b/CraftBukkit-Patches/0007-More-Efficient-Chunk-Save-Queue.patch
@@ -1,4 +1,4 @@
-From 3b7ea48f1ad5cdd184fd718356141793eb7409f4 Mon Sep 17 00:00:00 2001
+From 7411c0dc59ef739de9b28c5d526962c65f39692c Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 11 Jun 2013 12:09:45 +1000
 Subject: [PATCH] More Efficient Chunk Save Queue
diff --git a/CraftBukkit-Patches/0008-Merge-tweaks-and-configuration.patch b/CraftBukkit-Patches/0008-Merge-tweaks-and-configuration.patch
index 6a8ea2ce4..a7265553b 100644
--- a/CraftBukkit-Patches/0008-Merge-tweaks-and-configuration.patch
+++ b/CraftBukkit-Patches/0008-Merge-tweaks-and-configuration.patch
@@ -1,4 +1,4 @@
-From 3499d77354a84df9ce6e49d5dba39a0a471b3ff8 Mon Sep 17 00:00:00 2001
+From d5dbd54e27e10e47e7efa1537a9e90d322d79762 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 23 Mar 2013 09:46:33 +1100
 Subject: [PATCH] Merge tweaks and configuration
@@ -41,7 +41,7 @@ index bbcf674..08b9ac8 100644
              }
          } else {
 diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
-index 53ab411..d90d5a4 100644
+index 069db6a..164d268 100644
 --- a/src/main/java/net/minecraft/server/World.java
 +++ b/src/main/java/net/minecraft/server/World.java
 @@ -934,6 +934,23 @@ public abstract class World implements IBlockAccess {
@@ -69,7 +69,7 @@ index 53ab411..d90d5a4 100644
          if (event != null && (event.isCancelled() || entity.dead)) {
              entity.dead = true;
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index ddca7c3..185442a 100644
+index 7e79ba5..1545a61 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -110,4 +110,18 @@ public class SpigotWorldConfig
diff --git a/CraftBukkit-Patches/0009-LongHash-Tweaks.patch b/CraftBukkit-Patches/0009-LongHash-Tweaks.patch
index d56b16f3a..ca442af2b 100644
--- a/CraftBukkit-Patches/0009-LongHash-Tweaks.patch
+++ b/CraftBukkit-Patches/0009-LongHash-Tweaks.patch
@@ -1,4 +1,4 @@
-From 47bd527ed32a447831c4fe2feeaf11e28f00e960 Mon Sep 17 00:00:00 2001
+From 3f339b0dcd3c969217de62f35d7f2c3cdf8dd7a2 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 17:13:47 +1000
 Subject: [PATCH] LongHash Tweaks
diff --git a/CraftBukkit-Patches/0010-Async-Operation-Catching.patch b/CraftBukkit-Patches/0010-Async-Operation-Catching.patch
index d758f8c25..056fd2285 100644
--- a/CraftBukkit-Patches/0010-Async-Operation-Catching.patch
+++ b/CraftBukkit-Patches/0010-Async-Operation-Catching.patch
@@ -1,4 +1,4 @@
-From 6becf979e8c6efa451679528a63a9416a44ac337 Mon Sep 17 00:00:00 2001
+From ac2e43846d8af2209154832a747057ea92c06360 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Thu, 7 Mar 2013 20:12:46 +1100
 Subject: [PATCH] Async Operation Catching
@@ -146,5 +146,5 @@ index 84091a4..2f30d66 100644
          scoreboards.add(scoreboard);
          return scoreboard;
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0011-View-Distance.patch b/CraftBukkit-Patches/0011-View-Distance.patch
index 87cd55f27..e32952b4b 100644
--- a/CraftBukkit-Patches/0011-View-Distance.patch
+++ b/CraftBukkit-Patches/0011-View-Distance.patch
@@ -1,4 +1,4 @@
-From 6a5b7f6ba565726739616f685d89593fa5862aa6 Mon Sep 17 00:00:00 2001
+From 6a58e4e8573a8e73b0e8e729aeefa77d45e40460 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 23 Mar 2013 09:52:41 +1100
 Subject: [PATCH] View Distance
@@ -32,7 +32,7 @@ index 3a8856d..a0e4ade 100644
              this.entitiesById = new IntHashMap();
          }
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 185442a..15b2ac8 100644
+index 1545a61..6cc3a91 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -124,4 +124,11 @@ public class SpigotWorldConfig
diff --git a/CraftBukkit-Patches/0012-Compressed-Nibble-Arrays.patch b/CraftBukkit-Patches/0012-Compressed-Nibble-Arrays.patch
index ba822d04a..387d1b6bc 100644
--- a/CraftBukkit-Patches/0012-Compressed-Nibble-Arrays.patch
+++ b/CraftBukkit-Patches/0012-Compressed-Nibble-Arrays.patch
@@ -1,4 +1,4 @@
-From 4017c1c6dcc7eff0b93bec0de5f21279ebc29471 Mon Sep 17 00:00:00 2001
+From 0a13c4fb7028e62e617345314f93e3c2f06e4971 Mon Sep 17 00:00:00 2001
 From: Mike Primm <mike@primmhome.com>
 Date: Sun, 13 Jan 2013 03:49:07 -0800
 Subject: [PATCH] Compressed Nibble Arrays
diff --git a/CraftBukkit-Patches/0013-Sync-Free-Chunk-Reference-Cache.patch b/CraftBukkit-Patches/0013-Sync-Free-Chunk-Reference-Cache.patch
index 9bbd69c10..524fc1015 100644
--- a/CraftBukkit-Patches/0013-Sync-Free-Chunk-Reference-Cache.patch
+++ b/CraftBukkit-Patches/0013-Sync-Free-Chunk-Reference-Cache.patch
@@ -1,11 +1,11 @@
-From 78a32c982fa003401ef5b2bd3c0746786d6dec3b Mon Sep 17 00:00:00 2001
+From 169447a7a0e925513abad8881724e627b6e0f4a1 Mon Sep 17 00:00:00 2001
 From: Mike Primm <mike@primmhome.com>
 Date: Wed, 16 Jan 2013 15:27:22 -0600
 Subject: [PATCH] Sync Free Chunk Reference Cache
 
 
 diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
-index 1381660..00c2a18 100644
+index e26ba96..3d7aa71 100644
 --- a/src/main/java/net/minecraft/server/World.java
 +++ b/src/main/java/net/minecraft/server/World.java
 @@ -292,20 +292,18 @@ public abstract class World implements IBlockAccess {
diff --git a/CraftBukkit-Patches/0014-Improved-Timings-System.patch b/CraftBukkit-Patches/0014-Improved-Timings-System.patch
index ead1c3ec3..c2ff2056d 100644
--- a/CraftBukkit-Patches/0014-Improved-Timings-System.patch
+++ b/CraftBukkit-Patches/0014-Improved-Timings-System.patch
@@ -1,4 +1,4 @@
-From 6e61672fd09bf2cd90e4d3a7cd3f185dddd64b09 Mon Sep 17 00:00:00 2001
+From 83cc70ebbad10d6e03feab85177ce37e5dda3ff0 Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Thu, 10 Jan 2013 00:18:11 -0500
 Subject: [PATCH] Improved Timings System
@@ -547,5 +547,5 @@ index 55db3ff..7d294c0 100644
      }
  
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0015-Fix-Mob-Spawning-Relative-to-View-Distance.patch b/CraftBukkit-Patches/0015-Fix-Mob-Spawning-Relative-to-View-Distance.patch
index 88ba54420..76faa9050 100644
--- a/CraftBukkit-Patches/0015-Fix-Mob-Spawning-Relative-to-View-Distance.patch
+++ b/CraftBukkit-Patches/0015-Fix-Mob-Spawning-Relative-to-View-Distance.patch
@@ -1,4 +1,4 @@
-From 443ccbbd5642797eb7374259c740e6ba2c417001 Mon Sep 17 00:00:00 2001
+From 612cd6c0fdb1c4a0a7e1e3ad04b099554eecda7c Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 17:29:54 +1000
 Subject: [PATCH] Fix Mob Spawning Relative to View Distance
@@ -135,7 +135,7 @@ index f514b78..3f0dd70 100644
                                                                      continue label110;
                                                                  }
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 15b2ac8..49a5b7a 100644
+index 6cc3a91..46249d7 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -131,4 +131,11 @@ public class SpigotWorldConfig
diff --git a/CraftBukkit-Patches/0016-Handle-Null-Tile-Entities.patch b/CraftBukkit-Patches/0016-Handle-Null-Tile-Entities.patch
index ffa06adfc..ccfec56c2 100644
--- a/CraftBukkit-Patches/0016-Handle-Null-Tile-Entities.patch
+++ b/CraftBukkit-Patches/0016-Handle-Null-Tile-Entities.patch
@@ -1,4 +1,4 @@
-From f4eb04cc282a3a666f4e86bf088ba98aa0597eca Mon Sep 17 00:00:00 2001
+From fe83054f2999951673b07d23e2b94f468999e801 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 3 Feb 2013 09:20:19 +1100
 Subject: [PATCH] Handle Null Tile Entities
@@ -23,5 +23,5 @@ index e64658d..99345a1 100644
              ChunkProviderServer chunkProviderServer = ((WorldServer) this).chunkProviderServer;
              if (chunkProviderServer.unloadQueue.contains(tileentity.x >> 4, tileentity.z >> 4)) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0017-Entity-Activation-Range.patch b/CraftBukkit-Patches/0017-Entity-Activation-Range.patch
index 8184acd15..f91184392 100644
--- a/CraftBukkit-Patches/0017-Entity-Activation-Range.patch
+++ b/CraftBukkit-Patches/0017-Entity-Activation-Range.patch
@@ -1,4 +1,4 @@
-From 77e202f4ea13d8ed1ce371a310ed4c6ca8ad6bb0 Mon Sep 17 00:00:00 2001
+From 58c5ce437abf82cbde87209dc095c6574c9e6d9c Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Sun, 3 Feb 2013 05:10:21 -0500
 Subject: [PATCH] Entity Activation Range
@@ -457,7 +457,7 @@ index 0000000..db4c927
 +    }
 +}
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 49a5b7a..1d95207 100644
+index 46249d7..ed2836a 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -138,4 +138,15 @@ public class SpigotWorldConfig
@@ -477,5 +477,5 @@ index 49a5b7a..1d95207 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0018-Metrics.patch b/CraftBukkit-Patches/0018-Metrics.patch
index 5777b96bb..56b1067ba 100644
--- a/CraftBukkit-Patches/0018-Metrics.patch
+++ b/CraftBukkit-Patches/0018-Metrics.patch
@@ -1,4 +1,4 @@
-From def224a4cb38f7e7d7bdfd97a09b0c3c66aaafca Mon Sep 17 00:00:00 2001
+From a0e2332af7b542884f88ddf99de0c70a192cf6f8 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 23 Feb 2013 08:58:35 +1100
 Subject: [PATCH] Metrics
diff --git a/CraftBukkit-Patches/0019-PlayerItemDamageEvent.patch b/CraftBukkit-Patches/0019-PlayerItemDamageEvent.patch
index e2233f12e..d66995e4d 100644
--- a/CraftBukkit-Patches/0019-PlayerItemDamageEvent.patch
+++ b/CraftBukkit-Patches/0019-PlayerItemDamageEvent.patch
@@ -1,4 +1,4 @@
-From a1d3c98851e0b823ed74e25dd5b587bdbd5f36eb Mon Sep 17 00:00:00 2001
+From 5f0a6329491a0166813080c81bbb90ddfe99d6c7 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Mon, 4 Mar 2013 18:45:52 +1100
 Subject: [PATCH] PlayerItemDamageEvent
diff --git a/CraftBukkit-Patches/0020-Faster-UUID-for-entities.patch b/CraftBukkit-Patches/0020-Faster-UUID-for-entities.patch
index aaf56f57a..c132abcea 100644
--- a/CraftBukkit-Patches/0020-Faster-UUID-for-entities.patch
+++ b/CraftBukkit-Patches/0020-Faster-UUID-for-entities.patch
@@ -1,4 +1,4 @@
-From 1bb989ea03ed1de28c3350d7a19e5695f62b5915 Mon Sep 17 00:00:00 2001
+From 2607242de7af3f5c8bcc3f643c7817c8b4c41683 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 17 Mar 2013 19:02:50 +1100
 Subject: [PATCH] Faster UUID for entities
@@ -19,5 +19,5 @@ index adf20d9..43fee78 100644
          this.world = world;
          this.setPosition(0.0D, 0.0D, 0.0D);
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0021-Prevent-NPE-in-CraftSign.patch b/CraftBukkit-Patches/0021-Prevent-NPE-in-CraftSign.patch
index 0c45b368b..5a0c63f55 100644
--- a/CraftBukkit-Patches/0021-Prevent-NPE-in-CraftSign.patch
+++ b/CraftBukkit-Patches/0021-Prevent-NPE-in-CraftSign.patch
@@ -1,4 +1,4 @@
-From b39026df75e6dfd9e8f3110088c438babad87931 Mon Sep 17 00:00:00 2001
+From 33587a89e702d0898fbdc810a883aefa6fb7d321 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Mon, 18 Mar 2013 20:01:44 +1100
 Subject: [PATCH] Prevent NPE in CraftSign
diff --git a/CraftBukkit-Patches/0022-Entity-Tracking-Ranges.patch b/CraftBukkit-Patches/0022-Entity-Tracking-Ranges.patch
index d16f6ce42..d958cc147 100644
--- a/CraftBukkit-Patches/0022-Entity-Tracking-Ranges.patch
+++ b/CraftBukkit-Patches/0022-Entity-Tracking-Ranges.patch
@@ -1,4 +1,4 @@
-From 6dffe591a8463b5525a743b97af91e479e4b2e47 Mon Sep 17 00:00:00 2001
+From 8b7fcf347ebe03ae3ed45d5335bff52a713c0022 Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Wed, 20 Feb 2013 11:58:47 -0500
 Subject: [PATCH] Entity Tracking Ranges
@@ -24,7 +24,7 @@ index 97d0bbb..fc679ae 100644
              i = this.e;
          }
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 1d95207..de221d9 100644
+index ed2836a..6421bf2 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -149,4 +149,19 @@ public class SpigotWorldConfig
@@ -105,5 +105,5 @@ index 0000000..4bf4d2a
 +    }
 +}
 -- 
-1.8.5.2.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0023-Limit-Custom-Map-Rendering.patch b/CraftBukkit-Patches/0023-Limit-Custom-Map-Rendering.patch
index f96d82812..6c4a7d491 100644
--- a/CraftBukkit-Patches/0023-Limit-Custom-Map-Rendering.patch
+++ b/CraftBukkit-Patches/0023-Limit-Custom-Map-Rendering.patch
@@ -1,4 +1,4 @@
-From 47d180eac9a5d06287a2cad611a6c586a2a707df Mon Sep 17 00:00:00 2001
+From bceef7be7c61e117d00e935f7ef2c7b62a88cdfa Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 23 Mar 2013 19:08:41 +1100
 Subject: [PATCH] Limit Custom Map Rendering
diff --git a/CraftBukkit-Patches/0024-Enable-Improved-Ping-Sending.patch b/CraftBukkit-Patches/0024-Enable-Improved-Ping-Sending.patch
index 910085428..b2de73b9a 100644
--- a/CraftBukkit-Patches/0024-Enable-Improved-Ping-Sending.patch
+++ b/CraftBukkit-Patches/0024-Enable-Improved-Ping-Sending.patch
@@ -1,4 +1,4 @@
-From 9423d32845eb0479a9049335fb2157dcbf4a6210 Mon Sep 17 00:00:00 2001
+From a73d0e968d95897084264e10a5b57e20226b88c0 Mon Sep 17 00:00:00 2001
 From: Aikar <aikar@aikar.co>
 Date: Sun, 24 Feb 2013 20:45:20 +1100
 Subject: [PATCH] Enable Improved Ping Sending
@@ -47,5 +47,5 @@ index 4383275..fa3e65c 100644
  
      public void sendAll(Packet packet) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0025-Thread-Naming-and-Tweaks.patch b/CraftBukkit-Patches/0025-Thread-Naming-and-Tweaks.patch
index e20e7c74c..5892d480d 100644
--- a/CraftBukkit-Patches/0025-Thread-Naming-and-Tweaks.patch
+++ b/CraftBukkit-Patches/0025-Thread-Naming-and-Tweaks.patch
@@ -1,4 +1,4 @@
-From a62448bf0ffb755f40a58adc1f6263d9d105b524 Mon Sep 17 00:00:00 2001
+From 989b6eb61364f84235201eeba8e6530b04cd957d Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 23 Apr 2013 11:50:27 +1000
 Subject: [PATCH] Thread Naming and Tweaks
diff --git a/CraftBukkit-Patches/0026-Close-Unloaded-Save-Files.patch b/CraftBukkit-Patches/0026-Close-Unloaded-Save-Files.patch
index 4b76730ee..2dd0632f5 100644
--- a/CraftBukkit-Patches/0026-Close-Unloaded-Save-Files.patch
+++ b/CraftBukkit-Patches/0026-Close-Unloaded-Save-Files.patch
@@ -1,4 +1,4 @@
-From 0682f59ec48b7d41a006eaa45c87a34fc93b12a4 Mon Sep 17 00:00:00 2001
+From 44507e4be847adb34ed737e42b870c86dac70706 Mon Sep 17 00:00:00 2001
 From: Antony Riley <antony@cyberiantiger.org>
 Date: Wed, 27 Mar 2013 01:41:54 +0200
 Subject: [PATCH] Close Unloaded Save Files
@@ -62,5 +62,5 @@ index 4d46178..2d46aca 100644
      }
  
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0027-Remove-o-Option.patch b/CraftBukkit-Patches/0027-Remove-o-Option.patch
index eefd17255..6432b9474 100644
--- a/CraftBukkit-Patches/0027-Remove-o-Option.patch
+++ b/CraftBukkit-Patches/0027-Remove-o-Option.patch
@@ -1,4 +1,4 @@
-From f06705bc41d4f4406c29bbed39ce22439ded5b7c Mon Sep 17 00:00:00 2001
+From 0d7baac82b5fcb65c088dcc8d094a65c709c1c2a Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 19 May 2013 18:29:48 +1000
 Subject: [PATCH] Remove -o Option
diff --git a/CraftBukkit-Patches/0028-Recipe-Deconstruction.patch b/CraftBukkit-Patches/0028-Recipe-Deconstruction.patch
index 0505ec842..782009e84 100644
--- a/CraftBukkit-Patches/0028-Recipe-Deconstruction.patch
+++ b/CraftBukkit-Patches/0028-Recipe-Deconstruction.patch
@@ -1,4 +1,4 @@
-From 1a282beb73506a12021b477ce5b9edf58f410474 Mon Sep 17 00:00:00 2001
+From a7301b6b770eacc5acc9a0d84ca2ec414668fae2 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 1 Jun 2013 16:34:38 +1000
 Subject: [PATCH] Recipe Deconstruction
diff --git a/CraftBukkit-Patches/0029-Implement-Arrow-API.patch b/CraftBukkit-Patches/0029-Implement-Arrow-API.patch
index 6b60a88ca..aa67aed85 100644
--- a/CraftBukkit-Patches/0029-Implement-Arrow-API.patch
+++ b/CraftBukkit-Patches/0029-Implement-Arrow-API.patch
@@ -1,4 +1,4 @@
-From a20bd8901bb291e21f5dbb4f64b3f34267c00baa Mon Sep 17 00:00:00 2001
+From 600bca74eebc7d90ec9c9e4e8424618ae498ae36 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 2 Jun 2013 15:16:05 +1000
 Subject: [PATCH] Implement Arrow API
@@ -27,5 +27,5 @@ index 328c73f..839b88e 100644
  
      public Arrow.Spigot spigot()
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0030-Hopper-Cooldowns.patch b/CraftBukkit-Patches/0030-Hopper-Cooldowns.patch
index bbcf3194a..011ee700a 100644
--- a/CraftBukkit-Patches/0030-Hopper-Cooldowns.patch
+++ b/CraftBukkit-Patches/0030-Hopper-Cooldowns.patch
@@ -1,4 +1,4 @@
-From 3e8d2dd58e10a6f8c1b2f0651b5de5a8a12b023b Mon Sep 17 00:00:00 2001
+From 6fb97ec7f1afb39d11913faae8462d268e2542ff Mon Sep 17 00:00:00 2001
 From: erocs <github@erocs.org>
 Date: Sun, 8 Sep 2013 12:06:15 -0700
 Subject: [PATCH] Hopper Cooldowns
@@ -59,7 +59,7 @@ index 730eb78..a68b748 100644
                  }
  
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index de221d9..19f4afd 100644
+index 6421bf2..827e6f9 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -164,4 +164,17 @@ public class SpigotWorldConfig
@@ -81,5 +81,5 @@ index de221d9..19f4afd 100644
 +    }
  }
 -- 
-1.8.5.2.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0031-Prevent-Shutdown-Hang.patch b/CraftBukkit-Patches/0031-Prevent-Shutdown-Hang.patch
index e3b4ff190..ec85846a3 100644
--- a/CraftBukkit-Patches/0031-Prevent-Shutdown-Hang.patch
+++ b/CraftBukkit-Patches/0031-Prevent-Shutdown-Hang.patch
@@ -1,4 +1,4 @@
-From 4bf71722086d0436e249d4bd1db5fb205860a99f Mon Sep 17 00:00:00 2001
+From 73b525dd39781dca706193081dc4abd689c59ba9 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 11 Jun 2013 11:54:32 +1000
 Subject: [PATCH] Prevent Shutdown Hang
@@ -28,5 +28,5 @@ index fa3e65c..b6a3d2b 100644
      }
  
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0032-Implement-SpawnerSpawnEvent.patch b/CraftBukkit-Patches/0032-Implement-SpawnerSpawnEvent.patch
index eeb33874d..bdacd8391 100644
--- a/CraftBukkit-Patches/0032-Implement-SpawnerSpawnEvent.patch
+++ b/CraftBukkit-Patches/0032-Implement-SpawnerSpawnEvent.patch
@@ -1,4 +1,4 @@
-From 887954f469d99c0dd5f8b7c5bb71f0ba1216f820 Mon Sep 17 00:00:00 2001
+From 7ccd533bb222ab768011597b908ee3184242a99d Mon Sep 17 00:00:00 2001
 From: Andy Shulman <andy.shulman@hotmail.com>
 Date: Mon, 15 Apr 2013 20:06:37 -0500
 Subject: [PATCH] Implement SpawnerSpawnEvent.
diff --git a/CraftBukkit-Patches/0033-Firework-Meta-Crash-Fix.patch b/CraftBukkit-Patches/0033-Firework-Meta-Crash-Fix.patch
index 78f44b8f8..e4b1a2f50 100644
--- a/CraftBukkit-Patches/0033-Firework-Meta-Crash-Fix.patch
+++ b/CraftBukkit-Patches/0033-Firework-Meta-Crash-Fix.patch
@@ -1,4 +1,4 @@
-From a323a8c99f24a6eb9e7be9fafed35d373384d557 Mon Sep 17 00:00:00 2001
+From 6fd6fe221af342ea5ca043a5c2ff8f4122e5b5e4 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 15 Jun 2013 21:34:48 +1000
 Subject: [PATCH] Firework Meta Crash Fix
diff --git a/CraftBukkit-Patches/0034-Do-Not-Search-for-Offline-Players.patch b/CraftBukkit-Patches/0034-Do-Not-Search-for-Offline-Players.patch
index 7d636926d..a485e85e7 100644
--- a/CraftBukkit-Patches/0034-Do-Not-Search-for-Offline-Players.patch
+++ b/CraftBukkit-Patches/0034-Do-Not-Search-for-Offline-Players.patch
@@ -1,4 +1,4 @@
-From 3b83e492c658d49603312c630335769cfc5fd5f4 Mon Sep 17 00:00:00 2001
+From 22adabeeb54ee7a3b3a635d14119c7f3fbd6c47a Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 16 Jun 2013 08:20:26 +1000
 Subject: [PATCH] Do Not Search for Offline Players
@@ -19,5 +19,5 @@ index 2d46aca..c3e6f82 100644
  
      public OfflinePlayer getOfflinePlayer(String name, boolean search) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0035-Allow-Disabling-of-Command-Logging.patch b/CraftBukkit-Patches/0035-Allow-Disabling-of-Command-Logging.patch
index 6b4b6796a..742211a1e 100644
--- a/CraftBukkit-Patches/0035-Allow-Disabling-of-Command-Logging.patch
+++ b/CraftBukkit-Patches/0035-Allow-Disabling-of-Command-Logging.patch
@@ -1,4 +1,4 @@
-From f05c8b683f86064c210af98667e2450558c768cd Mon Sep 17 00:00:00 2001
+From 65a0ce134a86a9d9212ebe55910cd1bc52e974bd Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 18:01:29 +1000
 Subject: [PATCH] Allow Disabling of Command Logging
@@ -38,5 +38,5 @@ index 9aaa09a..4d15f8b 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0036-Allow-Disabling-of-Command-TabComplete.patch b/CraftBukkit-Patches/0036-Allow-Disabling-of-Command-TabComplete.patch
index 12388a133..985753091 100644
--- a/CraftBukkit-Patches/0036-Allow-Disabling-of-Command-TabComplete.patch
+++ b/CraftBukkit-Patches/0036-Allow-Disabling-of-Command-TabComplete.patch
@@ -1,4 +1,4 @@
-From a5a90003a05ff5e0c9bd9dae34573a41eee96394 Mon Sep 17 00:00:00 2001
+From 0f3df2d03d8f697bc2899cb2eb048622589b997f Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 18:05:54 +1000
 Subject: [PATCH] Allow Disabling of Command TabComplete
@@ -38,5 +38,5 @@ index 4d15f8b..8764045 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0037-Configurable-Messages.patch b/CraftBukkit-Patches/0037-Configurable-Messages.patch
index fc0a1d91e..e2ff074a6 100644
--- a/CraftBukkit-Patches/0037-Configurable-Messages.patch
+++ b/CraftBukkit-Patches/0037-Configurable-Messages.patch
@@ -1,4 +1,4 @@
-From c050f22c6fca20680f43cb66f90efffc00bebd3b Mon Sep 17 00:00:00 2001
+From 1826349b5c9ab932a73f386e92645fab326e5f2b Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 21 Jun 2013 19:21:58 +1000
 Subject: [PATCH] Configurable Messages
@@ -103,5 +103,5 @@ index 8764045..0ab2ec3 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0038-Allow-Disabling-of-Random-Lighting-Updates.patch b/CraftBukkit-Patches/0038-Allow-Disabling-of-Random-Lighting-Updates.patch
index ef6ef6cc0..758f464fc 100644
--- a/CraftBukkit-Patches/0038-Allow-Disabling-of-Random-Lighting-Updates.patch
+++ b/CraftBukkit-Patches/0038-Allow-Disabling-of-Random-Lighting-Updates.patch
@@ -1,4 +1,4 @@
-From 774ed3fecda98d3dedd42b5116461eb47ecae721 Mon Sep 17 00:00:00 2001
+From cbea036f18bb91b2a39867c7cac7aa37115d69a2 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 22 Jun 2013 16:12:02 +1000
 Subject: [PATCH] Allow Disabling of Random Lighting Updates
@@ -31,7 +31,7 @@ index 58eacd2..0eeed14 100644
              entityhuman = (EntityHuman) this.players.get(i);
              j = MathHelper.floor(entityhuman.locX) + this.random.nextInt(11) - 5;
 diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
-index 87eac1b..aa639fe 100644
+index 827e6f9..adebd03 100644
 --- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
 +++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
 @@ -177,4 +177,11 @@ public class SpigotWorldConfig
@@ -47,5 +47,5 @@ index 87eac1b..aa639fe 100644
 +    }
  }
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0039-Make-AnvilInventory.getItem-use-both-containers.-Fix.patch b/CraftBukkit-Patches/0039-Make-AnvilInventory.getItem-use-both-containers.-Fix.patch
index fafb15e2a..e28b3fd4f 100644
--- a/CraftBukkit-Patches/0039-Make-AnvilInventory.getItem-use-both-containers.-Fix.patch
+++ b/CraftBukkit-Patches/0039-Make-AnvilInventory.getItem-use-both-containers.-Fix.patch
@@ -1,4 +1,4 @@
-From 3dae5e1925743d9ebbb0594f53997193fd433561 Mon Sep 17 00:00:00 2001
+From 0eba7ee76ad5e85588a62176a3d8125e1a3c6b1f Mon Sep 17 00:00:00 2001
 From: Andre LeBlanc <andre@norcode.com>
 Date: Sat, 6 Apr 2013 12:00:31 -0400
 Subject: [PATCH] Make AnvilInventory.getItem() use both containers. Fixes
diff --git a/CraftBukkit-Patches/0040-Properly-Close-Inventories.patch b/CraftBukkit-Patches/0040-Properly-Close-Inventories.patch
index 5e5cbde2c..2582d7d8b 100644
--- a/CraftBukkit-Patches/0040-Properly-Close-Inventories.patch
+++ b/CraftBukkit-Patches/0040-Properly-Close-Inventories.patch
@@ -1,4 +1,4 @@
-From 531c8827e96bda948b68adfbd99bac2356acd6e1 Mon Sep 17 00:00:00 2001
+From 7165eeb678b33e35a3e0fa682598a47ccbcfa4ca Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Thu, 27 Jun 2013 17:26:09 +1000
 Subject: [PATCH] Properly Close Inventories
diff --git a/CraftBukkit-Patches/0041-Disallow-Interaction-With-Self.patch b/CraftBukkit-Patches/0041-Disallow-Interaction-With-Self.patch
index 3c9f14d89..8776cc448 100644
--- a/CraftBukkit-Patches/0041-Disallow-Interaction-With-Self.patch
+++ b/CraftBukkit-Patches/0041-Disallow-Interaction-With-Self.patch
@@ -1,4 +1,4 @@
-From 26013a2fda72d27a2a23707b8146d0a0ccb87ab6 Mon Sep 17 00:00:00 2001
+From 39e2b5b8545a4774bef3fcbc716a95b97dd6a6ae Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Fri, 28 Jun 2013 19:52:54 +1000
 Subject: [PATCH] Disallow Interaction With Self
@@ -23,5 +23,5 @@ index b281201..e9652a5 100644
          this.player.w();
          if (entity != null) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0042-Lower-Chunk-Compression.patch b/CraftBukkit-Patches/0042-Lower-Chunk-Compression.patch
index 56fcde365..24718b79f 100644
--- a/CraftBukkit-Patches/0042-Lower-Chunk-Compression.patch
+++ b/CraftBukkit-Patches/0042-Lower-Chunk-Compression.patch
@@ -1,4 +1,4 @@
-From 907223885134524c827404ec8db98e5d0fde28d1 Mon Sep 17 00:00:00 2001
+From 31d89c1e7d81fcd70a22b062b9f22a0e2ef15179 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 2 Jul 2013 09:07:54 +1000
 Subject: [PATCH] Lower Chunk Compression
diff --git a/CraftBukkit-Patches/0043-Entity-Mount-and-Dismount-Events.patch b/CraftBukkit-Patches/0043-Entity-Mount-and-Dismount-Events.patch
index 3391b5d17..f14b5ff52 100644
--- a/CraftBukkit-Patches/0043-Entity-Mount-and-Dismount-Events.patch
+++ b/CraftBukkit-Patches/0043-Entity-Mount-and-Dismount-Events.patch
@@ -1,4 +1,4 @@
-From ba520c2a1112cd05f754cb7d3d0cc7c4339db980 Mon Sep 17 00:00:00 2001
+From feff41762ea09e7227d8bb4561621a88321424b0 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Tue, 2 Jul 2013 20:32:49 +1000
 Subject: [PATCH] Entity Mount and Dismount Events
@@ -47,5 +47,5 @@ index c12a08f..7442943 100644
              Entity originalVehicle = this.vehicle;
              // First statement moved down, second statement handled in parent method.
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0044-Prevent-Ghost-Players-Caused-by-Plugins.patch b/CraftBukkit-Patches/0044-Prevent-Ghost-Players-Caused-by-Plugins.patch
index aa69e1b6b..99067efef 100644
--- a/CraftBukkit-Patches/0044-Prevent-Ghost-Players-Caused-by-Plugins.patch
+++ b/CraftBukkit-Patches/0044-Prevent-Ghost-Players-Caused-by-Plugins.patch
@@ -1,4 +1,4 @@
-From 9ce8641a0d9005a3c9df8267ca3bec62b804b01b Mon Sep 17 00:00:00 2001
+From 0c86513c681cea01a8130302d9836f82eaeb7038 Mon Sep 17 00:00:00 2001
 From: Alex Ciuba <alexciuba@gmail.com>
 Date: Tue, 11 Jun 2013 15:23:03 -0400
 Subject: [PATCH] Prevent Ghost Players Caused by Plugins
@@ -6,7 +6,7 @@ Subject: [PATCH] Prevent Ghost Players Caused by Plugins
 Check if the player is still connected after firing event. Fixes BUKKIT-4327
 
 diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
-index 5174602..9a6e997 100644
+index 9d116e5..2ff1e19 100644
 --- a/src/main/java/net/minecraft/server/PlayerList.java
 +++ b/src/main/java/net/minecraft/server/PlayerList.java
 @@ -467,6 +467,11 @@ public abstract class PlayerList {
diff --git a/CraftBukkit-Patches/0045-Entity-ticking-chunk-caching.patch b/CraftBukkit-Patches/0045-Entity-ticking-chunk-caching.patch
index 3965c4ec6..202610b61 100644
--- a/CraftBukkit-Patches/0045-Entity-ticking-chunk-caching.patch
+++ b/CraftBukkit-Patches/0045-Entity-ticking-chunk-caching.patch
@@ -1,4 +1,4 @@
-From 705f008f7e07131dba5f94e2002fb49be167a485 Mon Sep 17 00:00:00 2001
+From 74ec77bc8eb2e4ed29c5fddf1038eb1815b4e657 Mon Sep 17 00:00:00 2001
 From: Ammar Askar <ammar@ammaraskar.com>
 Date: Tue, 16 Jul 2013 03:32:32 +0500
 Subject: [PATCH] Entity ticking chunk caching
@@ -62,5 +62,5 @@ index 0eeed14..5fb3fbf 100644
              if (entity.vehicle != null) {
                  if (!entity.vehicle.dead && entity.vehicle.passenger == entity) {
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0046-Plug-World-Unload-Memory-Leak.patch b/CraftBukkit-Patches/0046-Plug-World-Unload-Memory-Leak.patch
index 3a2ef838a..7c92f385d 100644
--- a/CraftBukkit-Patches/0046-Plug-World-Unload-Memory-Leak.patch
+++ b/CraftBukkit-Patches/0046-Plug-World-Unload-Memory-Leak.patch
@@ -1,4 +1,4 @@
-From 8be7e50e9473293a72fa651cd323d93342b49ac9 Mon Sep 17 00:00:00 2001
+From 2798f4c21987ee36b27c8435bd29afa412146793 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 3 Aug 2013 19:02:59 +1000
 Subject: [PATCH] Plug World Unload Memory Leak
diff --git a/CraftBukkit-Patches/0047-Player-Collision-API.patch b/CraftBukkit-Patches/0047-Player-Collision-API.patch
index ddb7eeb94..cf292611a 100644
--- a/CraftBukkit-Patches/0047-Player-Collision-API.patch
+++ b/CraftBukkit-Patches/0047-Player-Collision-API.patch
@@ -1,4 +1,4 @@
-From dcba3bd4d498eca5b5833f67dc38eef0e87dbd12 Mon Sep 17 00:00:00 2001
+From 066b4360e37e5c8378666d381bcec559c4a2cb34 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 3 Aug 2013 19:27:07 +1000
 Subject: [PATCH] Player Collision API
@@ -81,5 +81,5 @@ index bf3c9db..afbc3d8 100644
  
      public Player.Spigot spigot()
 -- 
-1.8.4.msysgit.0
+1.8.3.2
 
diff --git a/CraftBukkit-Patches/0048-Fully-Disable-Snooper-When-Not-Required.patch b/CraftBukkit-Patches/0048-Fully-Disable-Snooper-When-Not-Required.patch
index 3cf031c27..3279de05c 100644
--- a/CraftBukkit-Patches/0048-Fully-Disable-Snooper-When-Not-Required.patch
+++ b/CraftBukkit-Patches/0048-Fully-Disable-Snooper-When-Not-Required.patch
@@ -1,4 +1,4 @@
-From 6ab5656c1a121d61481d6fd9ed9b9fe4ed1e3397 Mon Sep 17 00:00:00 2001
+From d04d999897b38e9b3304ba3b14fe82709c09225b Mon Sep 17 00:00:00 2001
 From: agentk20 <agentkid20@gmail.com>
 Date: Sat, 3 Aug 2013 19:28:48 +1000
 Subject: [PATCH] Fully Disable Snooper When Not Required
diff --git a/CraftBukkit-Patches/0049-Add-Getter-for-Entity-Invulnerability.patch b/CraftBukkit-Patches/0049-Add-Getter-for-Entity-Invulnerability.patch
index a605c5ddb..063d3c279 100644
--- a/CraftBukkit-Patches/0049-Add-Getter-for-Entity-Invulnerability.patch
+++ b/CraftBukkit-Patches/0049-Add-Getter-for-Entity-Invulnerability.patch
@@ -1,4 +1,4 @@
-From b366c0e45babd58ac6166a557a519bb367eb900e Mon Sep 17 00:00:00 2001
+From e6e9d61786cc38e70aa1bb70d19cbe0d2676eaa6 Mon Sep 17 00:00:00 2001
 From: DerFlash <bte@freenet.de>
 Date: Sat, 3 Aug 2013 19:53:48 +1000
 Subject: [PATCH] Add Getter for Entity Invulnerability
diff --git a/CraftBukkit-Patches/0050-Cap-Minimum-Player-Speed.patch b/CraftBukkit-Patches/0050-Cap-Minimum-Player-Speed.patch
index 4f888a18b..a92b6bd64 100644
--- a/CraftBukkit-Patches/0050-Cap-Minimum-Player-Speed.patch
+++ b/CraftBukkit-Patches/0050-Cap-Minimum-Player-Speed.patch
@@ -1,4 +1,4 @@
-From ca506b151bc56955adad102c6d1bd0d7ab9adc3c Mon Sep 17 00:00:00 2001
+From 28ef2cdb94058e48e2ed7fad2c34224e9fad1042 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Mon, 5 Aug 2013 20:17:20 +1000
 Subject: [PATCH] Cap Minimum Player Speed
diff --git a/CraftBukkit-Patches/0051-Update-Inventory-and-Health-for-PlayerConsumeItemEve.patch b/CraftBukkit-Patches/0051-Update-Inventory-and-Health-for-PlayerConsumeItemEve.patch
index cbd5b6e4f..b70e45047 100644
--- a/CraftBukkit-Patches/0051-Update-Inventory-and-Health-for-PlayerConsumeItemEve.patch
+++ b/CraftBukkit-Patches/0051-Update-Inventory-and-Health-for-PlayerConsumeItemEve.patch
@@ -1,4 +1,4 @@
-From 023511a96c130a73fa0bbf06394510977d626f31 Mon Sep 17 00:00:00 2001
+From 53aeb97c002764d012a245aae52cd5771d706f7b Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 14 Sep 2013 10:16:38 +1000
 Subject: [PATCH] Update Inventory and Health for PlayerConsumeItemEvent
diff --git a/CraftBukkit-Patches/0052-Call-EntityChangeBlockEvent-for-Fire-Arrows-hitting-.patch b/CraftBukkit-Patches/0052-Call-EntityChangeBlockEvent-for-Fire-Arrows-hitting-.patch
index 410398eb7..b866c0a18 100644
--- a/CraftBukkit-Patches/0052-Call-EntityChangeBlockEvent-for-Fire-Arrows-hitting-.patch
+++ b/CraftBukkit-Patches/0052-Call-EntityChangeBlockEvent-for-Fire-Arrows-hitting-.patch
@@ -1,4 +1,4 @@
-From a1a4be40548d338d08bca93ac5baabdb1d02c657 Mon Sep 17 00:00:00 2001
+From f98053858adbb802d61d1705dbf8fca9eccd2c13 Mon Sep 17 00:00:00 2001
 From: BlackHole <black-hole@live.com>
 Date: Tue, 16 Jul 2013 22:34:50 +0200
 Subject: [PATCH] Call EntityChangeBlockEvent for Fire Arrows hitting TNT
diff --git a/CraftBukkit-Patches/0053-Allow-Disabling-of-1.6.3-Structure-Saving.patch b/CraftBukkit-Patches/0053-Allow-Disabling-of-1.6.3-Structure-Saving.patch
index d68b479c3..f64e49864 100644
--- a/CraftBukkit-Patches/0053-Allow-Disabling-of-1.6.3-Structure-Saving.patch
+++ b/CraftBukkit-Patches/0053-Allow-Disabling-of-1.6.3-Structure-Saving.patch
@@ -1,4 +1,4 @@
-From 06d62caeded766646822c23ff318825cabf570d9 Mon Sep 17 00:00:00 2001
+From 42e1cff41c516c789077c3a088326b9f6c0d5961 Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sat, 21 Sep 2013 12:33:09 +1000
 Subject: [PATCH] Allow Disabling of 1.6.3 Structure Saving
diff --git a/CraftBukkit-Patches/0054-Item-Despawn-Rate.patch b/CraftBukkit-Patches/0054-Item-Despawn-Rate.patch
index 1a4679e74..71fc59e4f 100644
--- a/CraftBukkit-Patches/0054-Item-Despawn-Rate.patch
+++ b/CraftBukkit-Patches/0054-Item-Despawn-Rate.patch
@@ -1,4 +1,4 @@
-From c15a3f4eace7c5a135261ae3a7376b3457c0b9c4 Mon Sep 17 00:00:00 2001
+From e5bbed4570854ea51ac8d114fe16320e314ebeee Mon Sep 17 00:00:00 2001
 From: md_5 <md_5@live.com.au>
 Date: Sun, 22","Rebuild patch hashes , fix build .",Update Spigot Patches to 1.8.3.2,"Based on the provided diff, the commit message should be:

""Spigot Patches: Various bug fixes and feature additions""

This commit message is a summary of the changes made in the patches, which include bug fixes, feature additions, and improvements to the Spigot API.","It seems like you have provided a patch file, which is a text file that contains the differences between two versions of a file or set of files. This is typically used in version control systems to show the changes made between different versions.

The first line of each patch starts with a '-' or '+' sign, indicating whether a line has been removed or added, respectively. The following lines starting with '+' show the content that has been added, while lines starting with '-' show the content that has been removed.

If you want to apply this patch, you would typically use a command like `git apply [patchfile]` or `patch < [patchfile]`, depending on your system and the version control system you are using.

If you want to understand the changes made in the patch, you would read through the lines that start with '+' and '-' to see what has been added and removed, respectively. The context lines (the lines that don't start with '+' or '-') can help you understand where in the file the changes have been made.",Update patch author information and adjust POM and patch versions for consistency. Ensure all patches reflect accurate metadata.
"diff --git a/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java b/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
index 67da246090d..2f5e65a9330 100644
--- a/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
+++ b/tools/src/com.oracle.truffle.tools.chromeinspector.test/src/com/oracle/truffle/tools/chromeinspector/test/SLInspectDebugTest.java
@@ -1509,6 +1509,10 @@ public class SLInspectDebugTest {
         tester.sendMessage(""{\""id\"":6,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":11,\""columnNumber\"":0},\""restrictToFunction\"":false}}"");
         assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":2,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":13,\""lineNumber\"":11},{\""scriptId\"":\""1\"",\""columnNumber\"":24,\""lineNumber\"":11}]},\""id\"":6}"", tester.getMessages(true).trim());
 
+        // Test location after file length:
+        tester.sendMessage(""{\""id\"":7,\""method\"":\""Debugger.getPossibleBreakpoints\"",\""params\"":{\""start\"":{\""scriptId\"":\""1\"",\""lineNumber\"":14,\""columnNumber\"":0},\""end\"":{\""scriptId\"":\""1\"",\""lineNumber\"":14,\""columnNumber\"":0},\""restrictToFunction\"":false}}"");
+        assertEquals(""{\""result\"":{\""locations\"":[{\""scriptId\"":\""1\"",\""columnNumber\"":24,\""lineNumber\"":11}]},\""id\"":7}"", tester.getMessages(true).trim());
+
         // Resume to finish:
         tester.sendMessage(""{\""id\"":20,\""method\"":\""Debugger.resume\""}"");
         assertTrue(tester.compareReceivedMessages(
diff --git a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
index 4ba90e14c78..7ad7701e859 100644
--- a/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
+++ b/tools/src/com.oracle.truffle.tools.chromeinspector/src/com/oracle/truffle/tools/chromeinspector/InspectorDebugger.java
@@ -241,6 +241,9 @@ public final class InspectorDebugger extends DebuggerDomain {
                 if (c2 <= 0) {
                     c2 = -1;
                 }
+                if (l1 > l2) {
+                    l1 = l2;
+                }
             } else {
                 l2 = l1;
                 if (c1 == -1) {",Assure that end line is not smaller than the start line . . PullRequest : graal / 3461,"""Fix Debugger.getPossibleBreakpoints for locations beyond file length""","""Add support for getting possible breakpoints after file length and fix edge cases in InspectorDebugger""","""Add test for breakpoint location after file length and fix end line calculation in InspectorDebugger""

Explanation:

The first part of the commit adds a new test case in the SLInspectDebugTest.java file to check the behavior of the Debugger.getPossibleBreakpoints method when the start position is after the file length. The expected result is that the method returns the last possible breakpoint location in the file.

The second part of the commit modifies the InspectorDebugger.java file to fix an issue with the calculation of the end line number. The change ensures that the end line number (l2) is not greater than the start line number (l1) when the start and end positions are the same. This fix is necessary to avoid incorrect behavior when setting breakpoints or performing other debugging operations.",Added test for breakpoint location after file end and adjusted InspectorDebugger to handle line number limits.
"diff --git a/src/main/java/com/google/devtools/build/lib/analysis/Whitelist.java b/src/main/java/com/google/devtools/build/lib/analysis/Whitelist.java
index 5e70ec832c..2c35feefd7 100644
--- a/src/main/java/com/google/devtools/build/lib/analysis/Whitelist.java
+++ b/src/main/java/com/google/devtools/build/lib/analysis/Whitelist.java
@@ -69,6 +69,18 @@ public final class Whitelist {
         .anyMatch(p -> p.containsPackage(label.getPackageIdentifier()));
   }
 
+  /**
+   * Returns whether the rule from the given rule context has a whitelist by the given name.
+   *
+   * @param ruleContext The rule context to check
+   * @param whitelistName The name of the whitelist to check for.
+   * @return True if the given rule context has the given whitelist.
+   */
+  public static boolean hasWhitelist(RuleContext ruleContext, String whitelistName) {
+    String attributeName = getAttributeNameFromWhitelistName(whitelistName);
+    return ruleContext.isAttrDefined(attributeName, LABEL);
+  }
+
   private static String getAttributeNameFromWhitelistName(String whitelistName) {
     return String.format(""$whitelist_%s"", whitelistName);
   }
diff --git a/src/main/java/com/google/devtools/build/lib/rules/android/AndroidLocalTestBase.java b/src/main/java/com/google/devtools/build/lib/rules/android/AndroidLocalTestBase.java
index 2640ed2aa7..e2478c1d78 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/android/AndroidLocalTestBase.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/android/AndroidLocalTestBase.java
@@ -28,6 +28,7 @@ import com.google.devtools.build.lib.analysis.Runfiles;
 import com.google.devtools.build.lib.analysis.RunfilesProvider;
 import com.google.devtools.build.lib.analysis.RunfilesSupport;
 import com.google.devtools.build.lib.analysis.TransitiveInfoCollection;
+import com.google.devtools.build.lib.analysis.Whitelist;
 import com.google.devtools.build.lib.analysis.actions.Substitution;
 import com.google.devtools.build.lib.analysis.actions.Template;
 import com.google.devtools.build.lib.analysis.actions.TemplateExpansionAction;
@@ -157,9 +158,13 @@ public abstract class AndroidLocalTestBase implements RuleConfiguredTargetFactor
     String testClass =
         getAndCheckTestClass(ruleContext, ImmutableList.copyOf(attributesBuilder.getSourceFiles()));
     getAndCheckTestSupport(ruleContext);
-    javaSemantics.checkForProtoLibraryAndJavaProtoLibraryOnSameProto(ruleContext, javaCommon);
-    if (ruleContext.hasErrors()) {
-      return null;
+
+    if (Whitelist.hasWhitelist(ruleContext, ""multiple_proto_rule_types_in_deps_whitelist"")
+        && !Whitelist.isAvailable(ruleContext, ""multiple_proto_rule_types_in_deps_whitelist"")) {
+      javaSemantics.checkForProtoLibraryAndJavaProtoLibraryOnSameProto(ruleContext, javaCommon);
+      if (ruleContext.hasErrors()) {
+        return null;
+      }
     }
 
     JavaCompilationHelper helper =",Add a whitelist for allowing or disallowing multiple versions of proto library .,"""Added Whitelist.hasWhitelist method and updated AndroidLocalTestBase to check for whitelist before checking for proto library and Java proto library on same proto""","""Add whitelist support for multiple proto rule types in dependencies""","""Added method to check if a rule context has a whitelist by the given name in Whitelist.java and added a check for the presence of a specific whitelist before performing a proto library check in AndroidLocalTestBase.java.""",Added hasWhitelist method to check for specific whitelists in RuleContext and used it in AndroidLocalTestBase.
"diff --git a/hellocharts-library/src/lecho/lib/hellocharts/LineChart.java b/hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
index 00ebacc..4451aa1 100644
--- a/hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
+++ b/hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
@@ -1,5 +1,6 @@
 package lecho.lib.hellocharts;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
 
@@ -170,12 +171,33 @@ public class LineChart extends View {
 		}
 	}
 
+	// Automatically calculates Y axis values.
+	private Axis calculateYAxis(int numberOfSteps) {
+		if (numberOfSteps < 2) {
+			throw new IllegalArgumentException(""Number or steps have to be grater or equal 2"");
+		}
+		List<Float> values = new ArrayList<Float>();
+		final float range = mData.getMaxYValue() - mData.getMinYValue();
+		final float tickRange = range / (numberOfSteps - 1);
+		final float x = (float) Math.ceil(Math.log10(tickRange) - 1);
+		final float pow10x = (float) Math.pow(10, x);
+		final float roundedTickRange = (float) Math.ceil(tickRange / pow10x) * pow10x;
+		float value = mData.getMinYValue();
+		while (value <= mData.getMaxYValue()) {
+			values.add(value);
+			value += roundedTickRange;
+		}
+		Axis yAxis = new Axis();
+		yAxis.setValues(values);
+		return yAxis;
+	}
+
 	@Override
 	protected void onDraw(Canvas canvas) {
 		long time = System.nanoTime();
 		if (mAxesOn) {
-			drawYAxis(canvas);
 			drawXAxis(canvas);
+			drawYAxis(canvas);
 		}
 		if (mLinesOn) {
 			drawLines(canvas);
@@ -367,7 +389,7 @@ public class LineChart extends View {
 			mLinePath.moveTo(currentPointX, currentPointY);
 			mLinePath.cubicTo(firstControlPointX, firstControlPointY, secondControlPointX, secondControlPointY,
 					nextPointX, nextPointY);
-			// Shift values to prevent recalculation of values that where already calculated.
+			// Shift values to prevent recalculation of values that have been already calculated.
 			previousPointX = currentPointX;
 			previousPointY = currentPointY;
 			currentPointX = nextPointX;",Added method for automatically calculation of Y axis .,"""Added automatic Y-axis value calculation and fixed minor typos in comments""","""Added automatic Y axis calculation and improved performance by reducing redundant calculations.""","""Add method to automatically calculate Y axis values in LineChart.java""

Explanation: The commit message should summarize the changes made in the code. In this case, a new method named `calculateYAxis` has been added to the `LineChart` class, which automatically calculates Y axis values based on the number of steps provided. The method calculates the range, tick range, and rounded tick range, and then generates a list of values for the Y axis. Finally, an `Axis` object is created and set with these values. This method helps in automatically generating the Y axis values instead of manually providing them.","""Add method to auto-calculate Y axis values; update onDraw method to improve axis drawing order."""
"diff --git a/FreeFlow/src/com/comcast/freeflow/core/FreeFlowContainer.java b/FreeFlow/src/com/comcast/freeflow/core/FreeFlowContainer.java
index b2f1843..a193642 100644
--- a/FreeFlow/src/com/comcast/freeflow/core/FreeFlowContainer.java
+++ b/FreeFlow/src/com/comcast/freeflow/core/FreeFlowContainer.java
@@ -1025,7 +1025,6 @@ public class FreeFlowContainer extends AbsLayoutContainer {
 
 		if (mTouchMode == TOUCH_MODE_SCROLL) {
 			moveViewportBy(event.getX() - deltaX, event.getY() - deltaY, false);
-			invokeOnItemScrollListeners();
 			deltaX = event.getX();
 			deltaY = event.getY();
 		}
@@ -1300,7 +1299,7 @@ public class FreeFlowContainer extends AbsLayoutContainer {
 		}
 
 		invalidate();
-
+		invokeOnItemScrollListeners();
 	}
 
 	protected boolean mEdgeEffectsEnabled = true;
@@ -1883,7 +1882,6 @@ public class FreeFlowContainer extends AbsLayoutContainer {
 			post(flingRunnable);
 		} else {
 			moveViewportBy((viewPortX - newVPX), (viewPortY - newVPY), false);
-			invokeOnItemScrollListeners();
 		}
 	}
 ",Invoking Scroll Listeners inside moveViewport,"""Refactor: Move invokeOnItemScrollListeners() to after invalidate() in FreeFlowContainer""","The commit message should be: 

""Invoke onItemScrollListeners in scroll and fling events""

This message accurately describes the changes made in the commit, which involve invoking the `invokeOnItemScrollListeners` method in the scroll and fling events.","""Removed invokeOnItemScrollListeners() from touch event handling and added it to moveViewportBy() method in FreeFlowContainer.java""",Refactored `invokeOnItemScrollListeners` call to improve performance during scrolling and fling actions.
"diff --git a/frameworks/Scala/finagle/build.sbt b/frameworks/Scala/finagle/build.sbt
index 6694b8dfd..7c475227c 100644
--- a/frameworks/Scala/finagle/build.sbt
+++ b/frameworks/Scala/finagle/build.sbt
@@ -1,4 +1,4 @@
-lazy val finagleVersion = ""19.10.0""
+lazy val finagleVersion = ""19.11.0""
 
 name := ""finagle-benchmark""
 scalaVersion := ""2.12.8""
diff --git a/frameworks/Scala/finatra/build.sbt b/frameworks/Scala/finatra/build.sbt
index 679615c6a..95900986d 100644
--- a/frameworks/Scala/finatra/build.sbt
+++ b/frameworks/Scala/finatra/build.sbt
@@ -1,4 +1,4 @@
-lazy val finatraVersion = ""19.10.0""
+lazy val finatraVersion = ""19.11.0""
 
 name := ""techempower-benchmarks-finatra""
 organization := ""com.twitter""
@@ -18,7 +18,8 @@ assemblyMergeStrategy in assembly := {
 }
 
 libraryDependencies ++= Seq(
-  ""com.twitter"" %% ""finatra-http"" % finatraVersion,
+  (""com.twitter"" %% ""finatra-http"" % finatraVersion).
+    exclude(""com.sun.activation"", ""javax.activation""),
   ""org.slf4j"" % ""slf4j-nop"" % ""1.7.25"",
   ""com.fasterxml.jackson.module"" %% ""jackson-module-scala"" % ""2.9.9"",
 )",update finagle and finatra versions ( <issue_id> ) .,"""Update Finagle and Finatra versions to 19.11.0 and exclude javax.activation from Finatra-http dependency""","""Update Finagle and Finatra versions to 19.11.0""","""Update Finagle and Finatra versions to 19.11.0 and exclude com.sun.activation:javax.activation in Finatra""

Explanation:

* In the file `frameworks/Scala/finagle/build.sbt`, the version of Finagle is updated from 19.10.0 to 19.11.0.
* In the file `frameworks/Scala/finatra/build.sbt`, the version of Finatra is updated from 19.10.0 to 19.11.0. Additionally, the library dependency `com.sun.activation:javax.activation` is excluded from the Finatra HTTP library. This exclusion ensures that the Activation API, which is part of Java SE and should not be included as a separate library, is not accidentally bundled with the application.",Update Finagle and Finatra versions to 19.11.0 and exclude 'javax.activation' from 'finatra-http' dependencies in the build files.
"diff --git a/sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/OrchestrationFacade.java b/sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/OrchestrationFacade.java
index f3a055fc65f..4f0254fada8 100644
--- a/sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/OrchestrationFacade.java
+++ b/sharding-orchestration/sharding-orchestration-core/src/main/java/io/shardingsphere/orchestration/internal/OrchestrationFacade.java
@@ -24,6 +24,7 @@ import io.shardingsphere.core.rule.DataSourceParameter;
 import io.shardingsphere.core.yaml.YamlRuleConfiguration;
 import io.shardingsphere.core.yaml.other.YamlServerConfiguration;
 import io.shardingsphere.orchestration.config.OrchestrationConfiguration;
+import io.shardingsphere.orchestration.config.OrchestrationType;
 import io.shardingsphere.orchestration.internal.config.ConfigurationService;
 import io.shardingsphere.orchestration.internal.listener.ListenerFactory;
 import io.shardingsphere.orchestration.internal.state.datasource.DataSourceService;
@@ -141,8 +142,18 @@ public final class OrchestrationFacade implements AutoCloseable {
      * Initialize for proxy orchestration.
      *
      */
-    public void init() {
-        listenerManager.initProxyListeners();
+    public void init(final OrchestrationType orchestrationType) {
+        switch (orchestrationType) {
+            case MASTER_SLAVE:
+                listenerManager.initMasterSlaveListeners();
+                break;
+            case SHARDING:
+                listenerManager.initShardingListeners();
+                break;
+            default:
+                listenerManager.initProxyListeners();
+                break;
+        }
     }
     
     private void reviseShardingRuleConfigurationForMasterSlave(final Map<String, DataSource> dataSourceMap, final ShardingRuleConfiguration shardingRuleConfig) {",modify init ( ),"""Enhance OrchestrationFacade to support different orchestration types""","""Add support for different orchestration types in OrchestrationFacade""","""Add switch case for OrchestrationType in OrchestrationFacade.init() method""

Explanation: The commit adds a new parameter `OrchestrationType orchestrationType` to the `OrchestrationFacade.init()` method and uses a switch case to initialize different types of listeners based on the `orchestrationType` parameter. The `MASTER_SLAVE` type initializes the `MasterSlaveListeners`, the `SHARDING` type initializes the `ShardingListeners`, and the default case initializes the `ProxyListeners`. Additionally, the commit removes the previous implementation of directly initializing the `ProxyListeners` without any condition.",Add orchestration type handling to OrchestrationFacade initialization method.
"diff --git a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java
index 44b65c7f8c9..9b9a56dee32 100644
--- a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java
@@ -113,49 +113,10 @@ public class MetaDataIndexUpgradeService extends AbstractComponent {
         IndexMetaData newMetaData = upgradeLegacyRoutingSettings(indexMetaData);
         newMetaData = addDefaultUnitsIfNeeded(newMetaData);
         checkMappingsCompatibility(newMetaData);
-        newMetaData = upgradeSettings(newMetaData);
         newMetaData = markAsUpgraded(newMetaData);
         return newMetaData;
     }
 
-    IndexMetaData upgradeSettings(IndexMetaData indexMetaData) {
-        final String storeType = indexMetaData.getSettings().get(IndexStoreModule.STORE_TYPE);
-        if (storeType != null) {
-            final String upgradeStoreType;
-            switch (storeType.toLowerCase(Locale.ROOT)) {
-                case ""nio_fs"":
-                case ""niofs"":
-                    upgradeStoreType = ""niofs"";
-                    break;
-                case ""mmap_fs"":
-                case ""mmapfs"":
-                    upgradeStoreType = ""mmapfs"";
-                    break;
-                case ""simple_fs"":
-                case ""simplefs"":
-                    upgradeStoreType = ""simplefs"";
-                    break;
-                case ""default"":
-                    upgradeStoreType = ""default"";
-                    break;
-                case ""fs"":
-                    upgradeStoreType = ""fs"";
-                    break;
-                default:
-                    upgradeStoreType = storeType;
-            }
-            if (storeType.equals(upgradeStoreType) == false) {
-                Settings indexSettings = Settings.builder().put(indexMetaData.settings())
-                        .put(IndexStoreModule.STORE_TYPE, upgradeStoreType)
-                        .build();
-                return IndexMetaData.builder(indexMetaData)
-                        .version(indexMetaData.version())
-                        .settings(indexSettings)
-                        .build();
-            }
-        }
-        return indexMetaData;
-    }
 
     /**
      * Checks if the index was already opened by this version of Elasticsearch and doesn't require any additional checks.
diff --git a/core/src/test/java/org/elasticsearch/index/store/IndexStoreBWCTests.java b/core/src/test/java/org/elasticsearch/index/store/IndexStoreBWCTests.java
deleted file mode 100644
index e53358c6631..00000000000
--- a/core/src/test/java/org/elasticsearch/index/store/IndexStoreBWCTests.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the ""License""); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.elasticsearch.index.store;
-
-import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-import org.apache.lucene.store.*;
-import org.apache.lucene.util.Constants;
-import org.elasticsearch.Version;
-import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
-import org.elasticsearch.cluster.metadata.IndexMetaData;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.index.shard.ShardId;
-import org.elasticsearch.index.shard.ShardPath;
-import org.elasticsearch.test.ESSingleNodeTestCase;
-import org.elasticsearch.test.ESTestCase;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.util.Arrays;
-import java.util.Locale;
-
-/**
- */
-public class IndexStoreBWCTests extends ESSingleNodeTestCase {
-
-
-    public void testOldCoreTypesFail() {
-        try {
-            createIndex(""test"", Settings.builder().put(IndexStoreModule.STORE_TYPE, ""nio_fs"").build());
-            fail();
-        } catch (Exception ex) {
-        }
-        try {
-            createIndex(""test"", Settings.builder().put(IndexStoreModule.STORE_TYPE, ""mmap_fs"").build());
-            fail();
-        } catch (Exception ex) {
-        }
-        try {
-            createIndex(""test"", Settings.builder().put(IndexStoreModule.STORE_TYPE, ""simple_fs"").build());
-            fail();
-        } catch (Exception ex) {
-        }
-    }
-
-    public void testUpgradeCoreTypes() throws IOException {
-        String type = RandomPicks.randomFrom(random(), Arrays.asList(""nio"", ""mmap"", ""simple""));
-        createIndex(""test"", Settings.builder()
-                .put(IndexStoreModule.STORE_TYPE, type+""fs"")
-                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_7_0)
-                .build());
-
-        client().admin().indices().prepareClose(""test"").get();
-        client().admin().indices().prepareUpdateSettings(""test"").setSettings(Settings.builder()
-                .put(IndexStoreModule.STORE_TYPE, type + ""_fs"").build()).get();
-        GetSettingsResponse getSettingsResponse = client().admin().indices().prepareGetSettings(""test"").get();
-        String actualType = getSettingsResponse.getSetting(""test"", IndexStoreModule.STORE_TYPE);
-        assertEquals(type + ""_fs"", actualType);
-
-        // now reopen and upgrade
-        client().admin().indices().prepareOpen(""test"").get();
-
-        getSettingsResponse = client().admin().indices().prepareGetSettings(""test"").get();
-        actualType = getSettingsResponse.getSetting(""test"", IndexStoreModule.STORE_TYPE);
-        assertEquals(type+""fs"", actualType);
-    }
-
-}",remove unnecessary bwc tests,"""Remove legacy store type upgrade and associated test""","The commit message should be:

""Remove legacy store type upgrade and test""

This message accurately reflects the changes made in the commit, which include removing the `upgradeSettings` method from `MetaDataIndexUpgradeService` and deleting the `IndexStoreBWCTests` class, which was testing the legacy store type upgrade functionality.","""Remove deprecated store type upgrade logic from MetaDataIndexUpgradeService and IndexStoreBWCTests""

Explanation:

The removed code in MetaDataIndexUpgradeService.java is related to upgrading deprecated store types such as ""nio_fs"", ""mmap_fs"", and ""simple_fs"" to their new counterparts ""niofs"", ""mmapfs"", and ""simplefs"" respectively. This logic seems to have been removed because these store types are no longer supported or have been standardized.

The deleted file IndexStoreBWCTests.java contains tests for the old core types failing and upgrading core types. Since the logic for upgrading the store types has been removed, these tests are no longer necessary and have been deleted.",Remove upgradeSettings method from MetaDataIndexUpgradeService and delete IndexStoreBWCTests.
"diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java
index b5bc5347011..6095ae0c9a2 100644
--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java
+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java
@@ -27,6 +27,7 @@ import org.apache.camel.component.jms.requestor.Requestor;
 import org.apache.camel.impl.DefaultComponent;
 import org.apache.camel.spi.HeaderFilterStrategy;
 import org.apache.camel.spi.HeaderFilterStrategyAware;
+import org.apache.camel.util.EndpointHelper;
 import org.apache.camel.util.ObjectHelper;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -426,7 +427,7 @@ public class JmsComponent extends DefaultComponent implements ApplicationContext
         // jms header strategy
         String strategy = getAndRemoveParameter(parameters, ""jmsKeyFormatStrategy"", String.class);
         if (strategy != null) {
-            if (isReferenceParameter(strategy)) {
+            if (EndpointHelper.isReferenceParameter(strategy)) {
                 String key = strategy.substring(1);
                 endpoint.setJmsKeyFormatStrategy(lookup(key, JmsKeyFormatStrategy.class));
             } else {
@@ -445,7 +446,7 @@ public class JmsComponent extends DefaultComponent implements ApplicationContext
         endpoint.setHeaderFilterStrategy(getHeaderFilterStrategy());
 
         return endpoint;
-    }
+    }   
 
     /**
      * A strategy method allowing the URI destination to be translated into the",Fixed the build error of JmsComponet .,"""Replace isReferenceParameter with EndpointHelper.isReferenceParameter in JmsComponent""","The commit message should be:

""Add EndpointHelper import and use it in isReferenceParameter check""

However, a more concise and conventional commit message would be:

""Use EndpointHelper in isReferenceParameter check""

This commit message clearly conveys the change made in the commit, which is the addition of EndpointHelper and its usage in the isReferenceParameter check.","""Updated JmsComponent to use EndpointHelper.isReferenceParameter() instead of isReferenceParameter()""

This change replaces the usage of the deprecated method `isReferenceParameter()` with the static method `EndpointHelper.isReferenceParameter()` in the class `org.apache.camel.component.jms.JmsComponent`. The change affects the code within an `if` statement that checks whether a JMS key format strategy is a reference parameter or not. The functionality of the code remains the same.","""Refactor isReferenceParameter check to use EndpointHelper for jmsKeyFormatStrategy in JmsComponent"""
"diff --git a/src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/AntXmlResultWriter.java b/src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/AntXmlResultWriter.java
index 11870ae3f1..8ee4ba3a64 100644
--- a/src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/AntXmlResultWriter.java
+++ b/src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/AntXmlResultWriter.java
@@ -49,7 +49,6 @@ public final class AntXmlResultWriter implements XmlResultWriter {
   private static final String JUNIT_ATTR_PROPERTY_VALUE = ""value"";
   private static final String JUNIT_ELEMENT_TESTCASE = ""testcase"";
   private static final String JUNIT_ELEMENT_FAILURE = ""failure"";
-  private static final String JUNIT_ELEMENT_STATUS = ""status"";
   private static final String JUNIT_ATTR_FAILURE_MESSAGE = ""message"";
   private static final String JUNIT_ATTR_FAILURE_TYPE = ""type"";
   private static final String JUNIT_ATTR_TESTCASE_NAME = ""name"";
@@ -163,7 +162,6 @@ public final class AntXmlResultWriter implements XmlResultWriter {
     writer.writeAttribute(JUNIT_ATTR_TESTCASE_CLASSNAME, result.getClassName());
     writer.writeAttribute(JUNIT_ATTR_TESTCASE_TIME, getFormattedRunTime(
             result.getRunTimeInterval()));
-    writer.writeAttribute(JUNIT_ELEMENT_STATUS, result.getStatus().toString());
 
     for (Throwable failure : parentFailures) {
       writeThrowableToXmlWriter(writer, failure);
diff --git a/src/java_tools/junitrunner/javatests/com/google/testing/junit/runner/testbed/XmlOutputExercises.ant.xml b/src/java_tools/junitrunner/javatests/com/google/testing/junit/runner/testbed/XmlOutputExercises.ant.xml
index a8e0cbcc18..beb241992b 100644
--- a/src/java_tools/junitrunner/javatests/com/google/testing/junit/runner/testbed/XmlOutputExercises.ant.xml
+++ b/src/java_tools/junitrunner/javatests/com/google/testing/junit/runner/testbed/XmlOutputExercises.ant.xml
@@ -7,7 +7,7 @@
     </testsuite>
     <testsuite name='com.google.testing.junit.runner.testbed.XmlOutputExercises$FailureTest' timestamp='' hostname='localhost' tests='1' failures='1' errors='0' time='' package='' id='1'>
       <properties />
-      <testcase name='testFail' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$FailureTest' time='' status='COMPLETED'>
+      <testcase name='testFail' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$FailureTest' time=''>
         <failure message='This is an expected error. The test is supposed to fail.' type='java.lang.AssertionError'>java.lang.AssertionError: This is an expected error. The test is supposed to fail.
 
         </failure>
@@ -17,22 +17,22 @@
     </testsuite>
     <testsuite name='com.google.testing.junit.runner.testbed.XmlOutputExercises$OtherTests' timestamp='' hostname='localhost' tests='1' failures='0' errors='0' time='' package='' id='2'>
         <properties />
-        <testcase name='testToString' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$OtherTests' time='' status='COMPLETED' />
+        <testcase name='testToString' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$OtherTests' time='' />
         <system-out />
         <system-err />
     </testsuite>
     <testsuite name='com.google.testing.junit.runner.testbed.XmlOutputExercises$EqualsHashCodeTest' timestamp='' hostname='localhost' tests='2' failures='0' errors='0' time='' package='' id='3'>
         <properties />
-        <testcase name='testHashCode' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$EqualsHashCodeTest' time='' status='COMPLETED' />
-        <testcase name='testEquals' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$EqualsHashCodeTest' time='' status='COMPLETED' />
+        <testcase name='testHashCode' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$EqualsHashCodeTest' time='' />
+        <testcase name='testEquals' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$EqualsHashCodeTest' time='' />
         <system-out />
         <system-err />
     </testsuite>
     <testsuite name='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' timestamp='' hostname='localhost' tests='3' failures='0' errors='0' time='' package='' id='4'>
         <properties />
-        <testcase name='compareToEqualInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' status='COMPLETED' />
-        <testcase name='compareToGreaterInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' status='COMPLETED' />
-        <testcase name='compareToLessInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' status='COMPLETED' />
+        <testcase name='compareToEqualInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' />
+        <testcase name='compareToGreaterInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' />
+        <testcase name='compareToLessInstance' classname='com.google.testing.junit.runner.testbed.XmlOutputExercises$ComparabilityTest' time='' />
         <system-out />
         <system-err />
     </testsuite>
diff --git a/src/test/shell/bazel/bazel_java_test.sh b/src/test/shell/bazel/bazel_java_test.sh
index c79d640303..3418fc14fd 100755
--- a/src/test/shell/bazel/bazel_java_test.sh
+++ b/src/test/shell/bazel/bazel_java_test.sh
@@ -1424,8 +1424,6 @@ EOF
   [[ -s $xml_log ]] || fail ""$xml_log was not present after test""
   cat ""$xml_log"" > ""$TEST_log""
   expect_log ""failures='2'""
-  expect_log ""status='INTERRUPTED""
-  expect_log ""status='CANCELLED'""
   expect_log ""<failure message='Test cancelled' type='java.lang.Exception'>java.lang.Exception: Test cancelled""
   expect_log ""<failure message='Test interrupted' type='java.lang.Exception'>java.lang.Exception: Test interrupted""
 }",Remove the status xml attribute from AntXmlResultWriter .,"""Remove 'status' attribute from JUnit XML output""","""Remove unused 'status' attribute from AntXmlResultWriter and test XML output.""","""Remove JUNIT_ELEMENT_STATUS from AntXmlResultWriter and related tests""

Explanation: The commit removes the usage of JUNIT_ELEMENT_STATUS from AntXmlResultWriter.java and updates the related tests in XmlOutputExercises.ant.xml accordingly. The status attribute is no longer written to the testcase element in the generated XML output.",Removed the 'status' attribute from the Ant XML result writer and updated related tests to reflect this change.
"diff --git a/truffle/com.oracle.truffle.api.vm/src/com/oracle/truffle/api/vm/PolyglotEngine.java b/truffle/com.oracle.truffle.api.vm/src/com/oracle/truffle/api/vm/PolyglotEngine.java
index 59f86ede66f..19cefb2c50d 100644
--- a/truffle/com.oracle.truffle.api.vm/src/com/oracle/truffle/api/vm/PolyglotEngine.java
+++ b/truffle/com.oracle.truffle.api.vm/src/com/oracle/truffle/api/vm/PolyglotEngine.java
@@ -560,7 +560,7 @@ public class PolyglotEngine {
         Object res;
         CompilerAsserts.neverPartOfCompilation();
         if (executor == null) {
-            ContextStore prev = executionStarted();
+            ContextStore prev = ExecutionImpl.executionStarted(context);
             try {
                 Access.DEBUG.executionStarted(PolyglotEngine.this);
                 final Object[] args = ForeignAccess.getArguments(frame).toArray();
@@ -589,7 +589,7 @@ public class PolyglotEngine {
             @SuppressWarnings(""try"")
             @Override
             protected Object compute() {
-                ContextStore prev = executionStarted();
+                ContextStore prev = ExecutionImpl.executionStarted(context);
                 try {
                     Access.DEBUG.executionStarted(PolyglotEngine.this);
                     final Object[] args = ForeignAccess.getArguments(materialized).toArray();
@@ -604,11 +604,6 @@ public class PolyglotEngine {
         return compute.get();
     }
 
-    final ContextStore executionStarted() {
-        ContextStore prev = ExecutionImpl.executionStarted(context);
-        return prev;
-    }
-
     /**
      * Looks global symbol provided by one of initialized languages up. First of all execute your
      * program via one of your {@link #eval(com.oracle.truffle.api.source.Source)} and then look
@@ -1186,7 +1181,7 @@ public class PolyglotEngine {
      ",Keeping original ExcuctionImpl . executionStarted calls,"""Remove redundant executionStarted method in PolyglotEngine""","The commit message should be: 

""Refactor executionStarted() to use ExecutionImpl.executionStarted(context) instead of context directly.""","""Refactor executionStarted method in PolyglotEngine class""

 Explanation: The code change involves removing the `executionStarted` method in the `PolyglotEngine` class and replacing its usage with a direct call to `ExecutionImpl.executionStarted(context)`. This change is a refactoring as it does not change the behavior of the code but modifies its structure to improve its internal design.",Refactored `executionStarted` method calls in `PolyglotEngine` to use `ExecutionImpl.executionStarted(context)` directly.
"diff --git a/util/src/main/java/org/camunda/tngp/util/buffer/BufferUtil.java b/util/src/main/java/org/camunda/tngp/util/buffer/BufferUtil.java
new file mode 100644
index 0000000000..5ad2fc3a54
--- /dev/null
+++ b/util/src/main/java/org/camunda/tngp/util/buffer/BufferUtil.java
@@ -0,0 +1,36 @@
+/* Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.camunda.tngp.util.buffer;
+
+import java.nio.charset.Charset;
+
+import org.agrona.DirectBuffer;
+
+public final class BufferUtil
+{
+    public static final Charset UTF_8_CHARSET = Charset.forName(""utf-8"");
+
+    private BufferUtil()
+    { // avoid instantiation of util class
+    }
+
+    public static String bufferAsString(final DirectBuffer buffer)
+    {
+        final byte[] bytes = new byte[buffer.capacity()];
+
+        buffer.getBytes(0, bytes);
+
+        return new String(bytes, UTF_8_CHARSET);
+    }
+
+}",add buffer util for toString method,"""Added BufferUtil class for converting DirectBuffer to String""","""Add BufferUtil class for converting DirectBuffer to String""","The commit message could be:

""Add BufferUtil class with bufferAsString method""

Explanation: The diff shows the addition of a new class named BufferUtil with a static method bufferAsString. This method takes a DirectBuffer as an argument and returns a String representation of the buffer's contents using the UTF-8 charset. The class also contains a constant for the UTF-8 charset. The class has a private constructor to prevent instantiation.",Added BufferUtil class with bufferAsString utility method to convert DirectBuffer to a UTF-8 encoded string.
"diff --git a/.travis.yml b/.travis.yml
index 581f88f6b..dfdb51b4f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -218,4 +218,4 @@ before_script:
     - export REDIS_VERSION=""$(redis-cli INFO SERVER | sed -n 2p)""
     - echo $REDIS_VERSION
     - redis-cli SHUTDOWN NOSAVE
-script: mvn -Dtest=$REDISSON_TEST -Dsurefire.rerunFailingTestsCount=5 -DargLine=""-DredisBinary=$REDIS_BIN/redis-server -DtravisEnv=true"" -Punit-test test
+script: mvn -Dtest=$REDISSON_TEST -Dsurefire.rerunFailingTestsCount=5 -DargLine=""-DredisBinary=$REDIS_BIN/redis-server -DtravisEnv=true -DredisVersion=$REDIS_VERSION"" -Punit-test test",added Redis version property,"""Add Redis version to Maven test arguments""","""Add Redis version to Travis CI test arguments""","""Added Redis version to argLine in .travis.yml""

Explanation:
The diff shows that the change was made in the .travis.yml file. In the 'script' section, the -DargLine parameter was updated to include ""-DredisVersion=$REDIS_VERSION"". This means that the Redis version is now being passed as a parameter to the argLine.",Add redisVersion to argLine in Travis script for passing REDIS_VERSION to Maven Surefire.
"diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java
index 31849f6140..20310d54c1 100644
--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java
+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java
@@ -2380,11 +2380,16 @@ public final class PropertyKey implements Comparable<PropertyKey> {
   public static final PropertyKey WORKER_MANAGEMENT_BACKOFF_STRATEGY =
       new Builder(Name.WORKER_MANAGEMENT_BACKOFF_STRATEGY)
           .setDefaultValue(""ANY"")
-          .setDescription(""Defines the backoff strategy used by background tasks. ""
+          .setDescription(""Defines the backoff scope respected by background tasks. ""
               + ""Supported values are ANY / DIRECTORY. ""
-              + ""ANY: Background tasks will backoff when there is any load on worker, ""
-              + ""regardless of which tier/dir/medium the load is in. ""
-              + ""DIRECTORY: Background tasks will backoff only on directories with load."")
+              + ""ANY: Management tasks will backoff from worker when there is any user I/O.""
+              + ""This mode will ensure low management task overhead in order to favor ""
+              + ""immediate user I/O performance. However, making progress on management tasks ""
+              + ""will require quite periods on the worker.""
+              + ""DIRECTORY: Management tasks will backoff from directories with ongoing user I/O.""
+              + ""This mode will give better chance of making progress on management tasks.""
+              + ""However, immediate user I/O throughput might be reduced due to ""
+              + ""increased management task activity."")
           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)
           .setScope(Scope.WORKER)
           .build();
@@ -2877,15 +2882,6 @@ public final class PropertyKey implements Comparable<PropertyKey> {
           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)
           .setScope(Scope.WORKER)
           .build();
-  public static final PropertyKey WORKER_TIERED_STORE_RESERVER_INTERVAL_MS =
-      new Builder(Name.WORKER_TIERED_STORE_RESERVER_INTERVAL_MS)
-          .setAlias(""alluxio.worker.tieredstore.reserver.interval.ms"")
-          .setDefaultValue(""1sec"")
-          .setDescription(""The time period of space reserver service, which ""
-              + ""keeps certain portion of available space on each layer."")
-          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)
-          .setScope(Scope.WORKER)
-          .build();
   public static final PropertyKey WORKER_WEB_BIND_HOST =
       new Builder(Name.WORKER_WEB_BIND_HOST)
           .setDefaultValue(""0.0.0.0"")
@@ -5097,8 +5093,6 @@ public final class PropertyKey implements Comparable<PropertyKey> {
     public static final String WORKER_TIERED_STORE_FREE_AHEAD_BYTES =
         ""alluxio.worker.tieredstore.free.ahead.bytes"";
     public static final String WORKER_TIERED_STORE_LEVELS = ""alluxio.worker.tieredstore.levels"";
-    public static final String WORKER_TIERED_STORE_RESERVER_INTERVAL_MS =
-        ""alluxio.worker.tieredstore.reserver.interval"";
     public static final String WORKER_WEB_BIND_HOST = ""alluxio.worker.web.bind.host"";
     public static final String WORKER_WEB_HOSTNAME = ""alluxio.worker.web.hostname"";
     public static final String WORKER_WEB_PORT = ""alluxio.worker.web.port"";
diff --git a/core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferExecutor.java b/core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferExecutor.java
index 3e4d59844e..af28e0e0d6 100644
--- a/core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferExecutor.java
+++ b/core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferExecutor.java
@@ -225,7 +225,7 @@ public class BlockTransferExecutor {
       try {
         if (mLoadTracker.loadDetected(transferInfo.getSrcLocation(),
             transferInfo.getDstLocation())) {
-          LOG.warn(""Skipping transfer-order: {} due to user activity."", transferInfo);
+          LOG.debug(""Skipping transfer-order: {} due to user activity."", transferInfo);
           continue;
         }
 
diff --git a/core/server/worker/src/main/java/alluxio/worker/block/management/ManagementTaskCoordinator.java b/core/server/worker/src/main/java/alluxio/worker/block/management/ManagementTaskCoordinator.java
index fc360605cb..1be1b9700c 100644
--- a/core/server/worker/src/main/java/alluxio/worker/block/management/ManagementTaskCoordinator.java
+++ b/core/server/worker/src/main/java/alluxio/worker/block/management/ManagementTaskCoordinator.java
@@ -38,7 +38,7 @@ public class ManagementTaskCoordinator implements Closeable {
   private static final Logger LOG = LoggerFactory.getLogger(ManagementTaskCoordinator.class);
   /** Duration to sleep when a) load detected on worker. b) no work to do. */
   private final long mLoadDetectionCoolDownMs;
-  /** How to back-off when there is user activity. */
+  /** The back-off strategy. */
   private BackoffStrategy mBackoffStrategy;
 
   /** Runner thread for launching management tasks. */
@@ -160,11 +160,10 @@ public class ManagementTaskCoordinator implements Closeable {
 
       BlockManagementTask currentTask;
       try {
-        // Back off if any load detected.
+        // Back off from worker if configured so.
         if (mBackoffStrategy == BackoffStrategy.ANY
             && mLoadTracker.loadDetected(BlockStoreLocation.anyTier())) {
-          LOG.debug(""Load detected. Sleeping {}ms."",
-              mLoadDetectionCoolDownMs);
+          LOG.debug(""Load detected. Sleeping {}ms."", mLoadDetectionCoolDownMs);
           Thread.sleep(mLoadDetectionCoolDownMs);
           continue;
         }
@@ -199,7 +198,7 @@ public class ManagementTaskCoordinator implements Closeable {
   }
 
   /**
-   * Used to specify how to back-off.
+   * Used to specify from where to back-off.
    */
   enum BackoffStrategy {
     ANY, DIRECTORY
diff --git a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java
index 6b4167393f..e3fabdb338 100644
--- a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java
+++ b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java
@@ -60,8 +60,8 @@ public class AlignTask extends AbstractBlockManagementTask {
    * @param executor the executor
    */
   public AlignTask(BlockStore blockStore, BlockMetadataManager metadataManager,
-                   BlockMetadataEvictorView evictorView, StoreLoadTracker loadTracker,
-                   ExecutorService executor) {
+      BlockMetadataEvictorView evictorView, StoreLoadTracker loadTracker,
+      ExecutorService executor) {
     super(blockStore, metadataManager, evictorView, loadTracker, executor);
   }
 
diff --git a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/PromoteTask.java b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/PromoteTask.java
index 211b098328..b216216af5 100644
--- a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/PromoteTask.java
+++ b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/PromoteTask.java
@@ -124,8 +124,8 @@ public class PromoteTask extends AbstractBlockManagementTask {
         continue;
       }
     }
-    LOG.debug(""Generated {} transfer to promote blocks from {} to {}"", transferInfos.size(),
-        tierUpLocation, tierDownLocation);
+    LOG.debug(""Generated {} promotions from {} to {}"", transferInfos.size(),
+        tierUpLocation.tierAlias(), tierDownLocation.tierAlias());
     return transferInfos;
   }
 }
diff --git a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/TierManagementTaskProvider.java b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/TierManagementTaskProvider.java
index f9833c38e6..233fac3486 100644
--- a/core/server/worker/src/main/java/alluxio/worker/block/management/tier/TierManagementTaskProvider.java
+++ b/core/server/worker/src/main/java/alluxio/worker/block/management/tier/TierManagementTaskProvider.java
@@ -114,6 +114,7 @@ public class TierManagementTaskProvider implements ManagementTaskProvider {
     // Return swap-restore task if marked.
     if (swapRestoreEnabled && sSwapRestoreRequired) {
       setSwapRestoreRequired(false);
+      LOG.debug(""Swap-restore needed."");
       return TierManagementTaskType.SWAP_RESTORE;
     }
 
@@ -127,8 +128,8 @@ public class TierManagementTaskProvider implements ManagementTaskProvider {
       if (alignEnabled && !mMetadataManager.getBlockIterator().aligned(intersection.getFirst(),
           intersection.getSecond(), BlockOrder.Natural,
           (blockId) -> !evictorView.isBlockEvictable(blockId))) {
-        LOG.debug(""Need alignment between: {} - {}"",
-            intersection.getFirst(), intersection.getSecond());
+        LOG.debug(""Alignment needed between: {} - {}"", intersection.getFirst().tierAlias(),
+            intersection.getSecond().tierAlias());
         return TierManagementTaskType.ALIGN;
       }
 
@@ -148,8 +149,8 @@ public class TierManagementTaskProvider implements ManagementTaskProvider {
               .getIterator(intersection.getSecond(), BlockOrder.Reverse);
           while (lowBlocks.hasNext()) {
             if (evictorView.isBlockEvictable(lowBlocks.next())) {
-              LOG.debug(""Promotions allowed between {} - {}"", intersection.getSecond(),
-                  intersection.getFirst());
+              LOG.debug(""Promotions needed from {} to {}"", intersection.getSecond().tierAlias(),
+                  intersection.getFirst().tierAlias());
               return TierManagementTaskType.PROMOTE;
             }
           }
diff --git a/tests/src/test/java/alluxio/server/ft/MultiWorkerIntegrationTest.java b/tests/src/test/java/alluxio/server/ft/MultiWorkerIntegrationTest.java
index c4e54aa9c8..182e415bc4 100644
--- a/tests/src/test/java/alluxio/server/ft/MultiWorkerIntegrationTest.java
+++ b/tests/src/test/java/alluxio/server/ft/MultiWorkerIntegrationTest.java
@@ -88,8 +88,6 @@ public final class MultiWorkerIntegrationTest extends BaseIntegrationTest {
   @LocalAlluxioClusterResource.Config(confParams = {
       PropertyKey.Name.USER_BLOCK_WRITE_LOCATION_POLICY,
       ""alluxio.client.block.policy.RoundRobinPolicy"",
-      // don't let the reserver run, because the test writes 100% of the capacity.
-      PropertyKey.Name.WORKER_TIERED_STORE_RESERVER_INTERVAL_MS, ""1h""
       })
   public void writeLargeFile() throws Exception {
     int fileSize = NUM_WORKERS * WORKER_MEMORY_SIZE_BYTES;",Do minor refactoring for tier - management .,"""Refactor worker management backoff strategy and remove space reserver service""","""Refactor backoff strategy to improve management task performance and logging clarity""","""Update PropertyKey descriptions and remove WORKER_TIERED_STORE_RESERVER_INTERVAL_MS property""

This commit updates the descriptions of the WORKER_MANAGEMENT_BACKOFF_STRATEGY and WORKER_TIERED_STORE_FREE_AHEAD_BYTES properties in the PropertyKey class. It also removes the WORKER_TIERED_STORE_RESERVER_INTERVAL_MS property and its corresponding string constant.

In addition, it changes the log level of a message in BlockTransferExecutor from WARN to DEBUG, and updates some log messages in AlignTask, PromoteTask, and TierManagementTaskProvider to provide more context.

Finally, it removes some configuration parameters from the @LocalAlluxioClusterResource.Config annotation in the MultiWorkerIntegrationTest class.","Updated management task strategy descriptions, adjusted log levels, and removed unused reserver interval property."
"diff --git a/apps/actor-ios/ActorApp.xcodeproj/project.pbxproj b/apps/actor-ios/ActorApp.xcodeproj/project.pbxproj
index 96abf168f..ad1757c5e 100644
--- a/apps/actor-ios/ActorApp.xcodeproj/project.pbxproj
+++ b/apps/actor-ios/ActorApp.xcodeproj/project.pbxproj
@@ -5460,6 +5460,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
@@ -5556,6 +5557,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
@@ -5652,6 +5654,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
@@ -5748,6 +5751,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
@@ -5844,6 +5848,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
@@ -5985,6 +5990,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = """";
 				ONLY_ACTIVE_ARCH = YES;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
@@ -6028,6 +6034,7 @@
 				INFOPLIST_FILE = ActorClient/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
 				LD_RUNPATH_SEARCH_PATHS = ""$(inherited) @executable_path/Frameworks"";
+				MINT_API_KEY = 8721303f;
 				PRODUCT_MODULE_NAME = ActorApp;
 				PRODUCT_NAME = ActorApp;
 				PROVISIONING_PROFILE = """";
diff --git a/apps/actor-ios/ActorClient/AppDelegate.swift b/apps/actor-ios/ActorClient/AppDelegate.swift
index 1036af069..23e96c7c8 100644
--- a/apps/actor-ios/ActorClient/AppDelegate.swift
+++ b/apps/actor-ios/ActorClient/AppDelegate.swift
@@ -22,10 +22,16 @@ import Foundation
             }
         }
         
-        // Apply styles
-        MainAppTheme.navigation.applyAppearance(application)
-        MainAppTheme.tab.applyAppearance(application)
-        MainAppTheme.search.applyAppearance(application)
+        // Register hockey app
+        if let hockey = NSBundle.mainBundle().infoDictionary?[""HOCKEY""] as? String {
+            if (hockey.trim().size() > 0) {
+                BITHockeyManager.sharedHockeyManager().configureWithIdentifier(hockey)
+                BITHockeyManager.sharedHockeyManager().disableCrashManager = true
+                BITHockeyManager.sharedHockeyManager().updateManager.checkForUpdateOnLaunch = true
+                BITHockeyManager.sharedHockeyManager().startManager()
+                BITHockeyManager.sharedHockeyManager().authenticator.authenticateInstallation()
+            }
+        }
         
         // Register notifications
         if application.respondsToSelector(""registerUserNotificationSettings:"") {
@@ -37,19 +43,12 @@ import Foundation
             application.registerForRemoteNotificationTypes(.Alert | .Badge | .Sound)
         }
         
-        // Register hockey app
-        if let hockey = NSBundle.mainBundle().infoDictionary?[""HOCKEY""] as? String {
-            if (hockey.trim().size() > 0) {
-                BITHockeyManager.sharedHockeyManager().configureWithIdentifier(hockey)
-                BITHockeyManager.sharedHockeyManager().disableCrashManager = true
-                BITHockeyManager.sharedHockeyManager().updateManager.checkForUpdateOnLaunch = true
-                BITHockeyManager.sharedHockeyManager().startManager()
-                BITHockeyManager.sharedHockeyManager().authenticator.authenticateInstallation()
-            }
-        }
+        // Apply styles
+        MainAppTheme.navigation.applyAppearance(application)
+        MainAppTheme.tab.applyAppearance(application)
+        MainAppTheme.search.applyAppearance(application)
         
         // Creating main window
-        
         window = UIWindow(frame: UIScreen.mainScreen().bounds);
         window?.backgroundColor = UIColor.whiteColor()
         
diff --git a/apps/actor-ios/ActorClient/Screens/Settings/AASettingsController.swift b/apps/actor-ios/ActorClient/Screens/Settings/AASettingsController.swift
index 6b3696d59..8f88d527c 100644
--- a/apps/actor-ios/ActorClient/Screens/Settings/AASettingsController.swift
+++ b/apps/actor-ios/ActorClient/Screens/Settings/AASettingsController.swift
@@ -328,9 +328,10 @@ class AASettingsController: AATableViewController {
     }
     
     private func navigateToPrivacySettings() {
-        let privacySettingsController = AASettingsPrivacyController(user: user)
-        privacySettingsController.hidesBottomBarWhenPushed = true
-        navigationController?.pushViewController(privacySettingsController, animated: true)
+//        let privacySettingsController = AASettingsPrivacyController(user: user)
+//        privacySettingsController.hidesBottomBarWhenPushed = true
+//        navigationController?.pushViewController(privacySettingsController, animated: true)
+        fatalError(""Test Error"")
     }
     
 }
diff --git a/apps/actor-ios/Podfile b/apps/actor-ios/Podfile
index 89659adc9..9a48213f5 100644
--- a/apps/actor-ios/Podfile
+++ b/apps/actor-ios/Podfile
@@ -28,4 +28,5 @@ target 'ActorApp' do
     
     # Tracking
     pod 'SplunkMint-iOS'
+    pod 'Mixpanel'
 end
\ No newline at end of file",Added crash collecting,"""Integrate Mixpanel and configure HockeyApp for crash reporting and updates""","According to the diff, the commit message should be:

""Added Mixpanel tracking and removed HockeyApp integration""

This commit message accurately reflects the changes made in the code, including the addition of Mixpanel tracking and the removal of HockeyApp integration.","""Add MINT_API_KEY to project build settings and integrate Mixpanel SDK""

This commit appears to add a new build setting `MINT_API_KEY` to the Xcode project for the ActorApp target, and also adds the Mixpanel SDK to the project using Cocoapods. Additionally, there seems to be some code changes related to applying app themes and registering HockeyApp for crash reporting. The code change in `AASettingsController` seems to be a test error and should be removed before pushing to production.","Added MINT API key, registered hockey app, modified privacy settings controller, and added Mixpanel pod."
"diff --git a/vespa-athenz/src/main/java/com/yahoo/vespa/athenz/identityprovider/api/bindings/SignedIdentityDocumentEntity.java b/vespa-athenz/src/main/java/com/yahoo/vespa/athenz/identityprovider/api/bindings/SignedIdentityDocumentEntity.java
index 3d4872549d6..6f773d51df3 100644
--- a/vespa-athenz/src/main/java/com/yahoo/vespa/athenz/identityprovider/api/bindings/SignedIdentityDocumentEntity.java
+++ b/vespa-athenz/src/main/java/com/yahoo/vespa/athenz/identityprovider/api/bindings/SignedIdentityDocumentEntity.java
@@ -54,7 +54,7 @@ public class SignedIdentityDocumentEntity {
                                         @JsonProperty(""ip-addresses"") Set<String> ipAddresses,
                                         @JsonProperty(""identity-type"") String identityType) {
         this.rawIdentityDocument = rawIdentityDocument;
-        this.identityDocument = parseIdentityDocument(rawIdentityDocument);
+        this.identityDocument = rawIdentityDocument != null ? parseIdentityDocument(rawIdentityDocument) : null;
         this.signature = signature;
   ",Allow signed identity document without wrapped document,"""Fix SignedIdentityDocumentEntity constructor to handle null rawIdentityDocument""","""Add null check for rawIdentityDocument before parsing identity document""","The commit message could be: ""Added null check for rawIdentityDocument before parsing in SignedIdentityDocumentEntity constructor""",Add null check for rawIdentityDocument before parsing in SignedIdentityDocumentEntity constructor.
"diff --git a/webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/demo/InvoiceDemoDataGenerator.java b/webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/demo/InvoiceDemoDataGenerator.java
index 8e302434bd..3f6e1166ab 100644
--- a/webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/demo/InvoiceDemoDataGenerator.java
+++ b/webapps/webapp/src/main/runtime/develop/java/org/camunda/bpm/pa/demo/InvoiceDemoDataGenerator.java
@@ -1,16 +1,24 @@
 package org.camunda.bpm.pa.demo;
 
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
 import java.util.logging.Logger;
 
 import org.camunda.bpm.engine.AuthorizationService;
+import org.camunda.bpm.engine.FilterService;
 import org.camunda.bpm.engine.ProcessEngine;
 import static org.camunda.bpm.engine.authorization.Authorization.*;
 import static org.camunda.bpm.engine.authorization.Permissions.*;
 import static org.camunda.bpm.engine.authorization.Resources.*;
 
+import org.camunda.bpm.engine.TaskService;
 import org.camunda.bpm.engine.authorization.Authorization;
 import org.camunda.bpm.engine.identity.Group;
 import org.camunda.bpm.engine.identity.User;
+import org.camunda.bpm.engine.task.TaskQuery;
+
+import org.camunda.bpm.engine.filter.Filter;
 
 /**
  * @author drobisch
@@ -148,5 +156,30 @@ public class InvoiceDemoDataGenerator {
       accMaryAuth.setResourceId(""mary"");
       accMaryAuth.addPermission(READ);
       authorizationService.saveAuthorization(accMaryAuth);
+
+      // Filter
+      FilterService filterService = engine.getFilterService();
+      Map<String, Object> properties = new HashMap<String, Object>();
+      properties.put(""description"", ""Unfiltered Tasks"");
+      properties.put(""priority"", 1);
+      Filter filter = filterService.newTaskFilter().setName(""All Tasks"").setProperties(properties);
+      filterService.saveFilter(filter);
+
+      TaskService taskService = engine.getTaskService();
+      TaskQuery query = taskService.createTaskQuery().taskAssignee(""jonny1"");
+      properties.clear();
+      properties.put(""description"", ""Tasks assigned to me"");
+      properties.put(""priority"", -10);
+      filter = filterService.newTaskFilter().setName(""My Tasks"").setProperties(properties).setQuery(query);
+      filterService.saveFilter(filter);
+
+      query = taskService.createTaskQuery().taskCandidateGroup(""accounting"");
+      properties.clear();
+      properties.put(""description"", ""Tasks assigned to group accounting"");
+      properties.put(""priority"", 5);
+      properties.put(""color"", ""#3e4d2f"");
+      filter = filterService.newTaskFilter().setName(""Accounting Tasks"").setProperties(properties).setQuery(query);
+      filterService.saveFilter(filter);
+
     }
 }",add filter demo data .,"""Added task filters for demo data in InvoiceDemoDataGenerator""","""Added filter functionality to InvoiceDemoDataGenerator""","""Added user authorization and task filters for the Invoice Demo Data Generator in Camunda BPM""

Explanation:

* The code added a new section for creating task filters using the FilterService of Camunda BPM engine.
* It also added a new import statement for FilterService and TaskService classes.
* The changes seem to be related to managing user authorizations and task filters for the Invoice Demo Data Generator in Camunda BPM.","""Add task filters for unfiltered tasks, tasks assigned to user, and tasks assigned to accounting group."""
"diff --git a/src/cpp/session/modules/rmarkdown/RMarkdownInstall.cpp b/src/cpp/session/modules/rmarkdown/RMarkdownInstall.cpp
index 30ae42b39b..e5320a58dc 100644
--- a/src/cpp/session/modules/rmarkdown/RMarkdownInstall.cpp
+++ b/src/cpp/session/modules/rmarkdown/RMarkdownInstall.cpp
@@ -24,6 +24,7 @@
 #include <core/system/Process.hpp>
 
 #include <r/RExec.hpp>
+#include <r/session/RSessionUtils.hpp>
 
 #include <session/SessionUserSettings.hpp>
 #include <session/SessionModuleContext.hpp>
@@ -191,6 +192,9 @@ Error installWithProgress(
 // perform a silent upgrade
 Error silentUpdate()
 {
+   // suppress output which occurs during silent update
+   r::session::utils::SuppressOutputInScope suppressOutput;
+
    return r::exec::RFunction("".rs.updateRMarkdownPackage"",
                              rmarkdownPackageArchive()).call();
 }",suppress output during rmarkdown package update,"""Suppress output during silent RMarkdown package update""","""Added silent update functionality for RMarkdown package installation""

This commit message accurately reflects the changes made in the diff, which include adding a silent update function and suppressing output during the silent update process.","""Added suppression of output during silent update in RMarkdownInstall.cpp""",Add output suppression during the silent update of RMarkdown package.
"diff --git a/app/src/processing/app/Base.java b/app/src/processing/app/Base.java
index 4ff1cee5a..ba95406e3 100644
--- a/app/src/processing/app/Base.java
+++ b/app/src/processing/app/Base.java
@@ -118,6 +118,7 @@ public class Base {
   // actually used are determined by the preferences, which are shared)
   private List<JMenu> boardsCustomMenus;
   private volatile Action openBoardsManager;
+  private List<JMenuItem> programmerMenus;
 
   private final PdeKeywords pdeKeywords;
   private final List<JMenuItem> recentSketchesMenuItems;
@@ -299,6 +300,7 @@ public class Base {
     BaseNoGui.initPackages();
     splashScreenHelper.splashText(_(""Preparing boards...""));
     rebuildBoardsMenu();
+    rebuildProgrammerMenu();
 
     // Setup board-dependent variables.
     onBoardOrPortChange();
@@ -1275,6 +1277,7 @@ public class Base {
       protected void onIndexesUpdated() throws Exception {
         BaseNoGui.initPackages();
         rebuildBoardsMenu();
+        rebuildProgrammerMenu();
         onBoardOrPortChange();
         setIndexer(BaseNoGui.librariesIndexer);
       }
@@ -1298,6 +1301,7 @@ public class Base {
       protected void onIndexesUpdated() throws Exception {
         BaseNoGui.initPackages();
         rebuildBoardsMenu();
+        rebuildProgrammerMenu();
         setIndexer(BaseNoGui.indexer);
         if (StringUtils.isNotEmpty(filterText)) {
           setFilterText(filterText);
@@ -1313,6 +1317,7 @@ public class Base {
     // Reload all boards (that may have been installed/updated/removed)
     BaseNoGui.initPackages();
     rebuildBoardsMenu();
+    rebuildProgrammerMenu();
     onBoardOrPortChange();
   }
 
@@ -1515,6 +1520,10 @@ public class Base {
     throw new Exception(""Custom menu not found!"");
   }
 
+  public List<JMenuItem> getProgrammerMenus() {
+    return programmerMenus;
+  }
+
   private static JMenuItem selectVisibleSelectedOrFirstMenuItem(JMenu menu) {
     JMenuItem firstVisible = null;
     for (int i = 0; i < menu.getItemCount(); i++) {
@@ -1546,8 +1555,9 @@ public class Base {
     throw new IllegalStateException(""Menu has no enabled items"");
   }
 
-  public void rebuildProgrammerMenu(JMenu menu) {
-    menu.removeAll();
+  public void rebuildProgrammerMenu() {
+    programmerMenus = new LinkedList<>();
+
     ButtonGroup group = new ButtonGroup();
     for (TargetPackage targetPackage : BaseNoGui.packages.values()) {
       for (TargetPlatform targetPlatform : targetPackage.platforms()) {
@@ -1555,18 +1565,18 @@ public class Base {
           String id = targetPackage.getId() + "":"" + programmer;
 
           @SuppressWarnings(""serial"")
-          AbstractAction action = new AbstractAction(targetPlatform
-                  .getProgrammer(programmer).get(""name"")) {
+          AbstractAction action = new AbstractAction(targetPlatform.getProgrammer(programmer).get(""name"")) {
             public void actionPerformed(ActionEvent actionevent) {
               PreferencesData.set(""programmer"", """" + getValue(""id""));
             }
           };
           action.putValue(""id"", id);
           JMenuItem item = new JRadioButtonMenuItem(action);
-          if (PreferencesData.get(""programmer"").equals(id))
+          if (PreferencesData.get(""programmer"").equals(id)) {
             item.setSelected(true);
+          }
           group.add(item);
-          menu.add(item);
+          programmerMenus.add(item);
         }
       }
     }
diff --git a/app/src/processing/app/Editor.java b/app/src/processing/app/Editor.java
index 2ad4a37fa..1eb3b6a8f 100644
--- a/app/src/processing/app/Editor.java
+++ b/app/src/processing/app/Editor.java
@@ -74,6 +74,7 @@ public class Editor extends JFrame implements RunnerListener {
 
   private final Platform platform;
   private JMenu recentSketchesMenu;
+  private JMenu programmersMenu;
 
   private static class ShouldSaveIfModified implements Predicate<Sketch> {
 
@@ -563,6 +564,8 @@ public class Editor extends JFrame implements RunnerListener {
         if (!components.contains(portMenu)) {
           toolsMenu.insert(portMenu, numTools + offset);
         }
+        programmersMenu.removeAll();
+        base.getProgrammerMenus().forEach(programmersMenu::add);
         toolsMenu.revalidate();
         validate();
       }
@@ -802,9 +805,10 @@ public class Editor extends JFrame implements RunnerListener {
     toolsMenu.add(portMenu);
     toolsMenu.addSeparator();
 
-    JMenu programmerMenu = new JMenu(_(""Programmer""));
-    base.rebuildProgrammerMenu(programmerMenu);
-    toolsMenu.add(programmerMenu);
+    base.rebuildProgrammerMenu();
+    programmersMenu = new JMenu(_(""Programmer""));
+    base.getProgrammerMenus().stream().forEach(programmersMenu::add);
+    toolsMenu.add(programmersMenu);
 
     item = new JMenuItem(_(""Burn Bootloader""));
     item.addActionListener(e -> handleBurnBootloader());",Rebuilding programmers menu after installing additional package with boards manager .,"""Refactor programmer menu to use a centralized list of menu items""","""Added programmer menu functionality and refactored code to improve maintainability""","""Refactor Base and Editor classes to rebuild programmer menu and add it to the tools menu""

Explanation:
The commit changes the implementation of the programmer menu in the Base and Editor classes. The rebuildProgrammerMenu method in the Base class is modified to return a list of JMenuItem objects, and a new method getProgrammerMenus is added to retrieve this list. In the Editor class, the programmer menu is created using the stream API and the new getProgrammerMenus method. The commit also adds a new instance variable programmersMenu to the Editor class to store the programmer menu. The changes seem to be a refactoring effort to improve the code organization and make it more modular.",Refactored programmer menu to dynamically rebuild and update based on board or port changes in the Arduino IDE.
"diff --git a/app/src/main/java/com/example/bottombar/sample/ThreeTabsActivity.java b/app/src/main/java/com/example/bottombar/sample/ThreeTabsActivity.java
index fe8fbab..b83334c 100644
--- a/app/src/main/java/com/example/bottombar/sample/ThreeTabsActivity.java
+++ b/app/src/main/java/com/example/bottombar/sample/ThreeTabsActivity.java
@@ -30,7 +30,7 @@ public class ThreeTabsActivity extends Activity {
             public void onTabSelected(@IdRes int tabId) {
                 messageView.setText(TabMessage.get(tabId, false));
             }
-        }, false);
+        });
 
         bottomBar.setOnTabReselectListener(new OnTabReselectListener() {
           ",Removed the debugging code .,"""Remove unnecessary boolean parameter in OnTabSelectListener""",Removed unnecessary lambda argument in OnTabSelectListener and OnTabReselectListener.,"""Removed unnecessary boolean parameter in OnTabSelectListener initialization""

This change removes the unnecessary boolean parameter ""false"" in the initialization of the OnTabSelectListener for the bottomBar. The corrected code now simply uses an empty parameter list ""{}"" to initialize the listener. This change may have been made to fix a compilation error or to update the code to match a new API that no longer requires the boolean parameter.",Removed `false` parameter from OnTabSelectListener setup in ThreeTabsActivity.java.
"diff --git a/src/com/xtremelabs/droidsugar/fakes/FakeApplication.java b/src/com/xtremelabs/droidsugar/fakes/FakeApplication.java
index b247293a5..e6a338956 100644
--- a/src/com/xtremelabs/droidsugar/fakes/FakeApplication.java
+++ b/src/com/xtremelabs/droidsugar/fakes/FakeApplication.java
@@ -1,21 +1,54 @@
 package com.xtremelabs.droidsugar.fakes;
 
+import android.app.AlarmManager;
 import android.app.Application;
 import android.content.ContentResolver;
+import android.content.Context;
 import android.content.ContextWrapper;
+import android.location.LocationManager;
+import android.net.wifi.WifiManager;
 import android.test.mock.MockContentResolver;
+import com.xtremelabs.droidsugar.util.FakeHelper;
 import com.xtremelabs.droidsugar.util.Implements;
 
+import static org.mockito.Mockito.mock;
+
 @SuppressWarnings({""UnusedDeclaration""})
 @Implements(Application.class)
 public class FakeApplication extends ContextWrapper {
     private MockContentResolver contentResolver = new MockContentResolver();
+    private LocationManager locationManager;
+    private WifiManager wifiManager;
 
     public FakeApplication(Application base) {
         super(base);
     }
 
-    public ContentResolver getContentResolver() {
+    @Override public ContentResolver getContentResolver() {
         return contentResolver;
     }
+
+    @Override public Object getSystemService(String name) {
+        if (name.equals(Context.LAYOUT_INFLATER_SERVICE)) {
+            return getFakeLayoutInflater();
+        } else if (name.equals(Context.ALARM_SERVICE)) {
+            return mock(AlarmManager.class);
+        } else if (name.equals(Context.LOCATION_SERVICE)) {
+            if (locationManager == null) {
+                locationManager = mock(LocationManager.class);
+            }
+            return locationManager;
+        } else if (name.equals(Context.WIFI_SERVICE)) {
+            if (wifiManager == null) {
+                wifiManager = FakeHelper.newInstanceOf(WifiManager.class);
+            }
+            return wifiManager;
+        }
+        return null;
+    }
+
+    public FakeContextWrapper.FakeLayoutInflater getFakeLayoutInflater() {
+        return new FakeContextWrapper.FakeLayoutInflater(FakeContextWrapper.resourceLoader.viewLoader);
+    }
+
 }
diff --git a/src/com/xtremelabs/droidsugar/fakes/FakeContextWrapper.java b/src/com/xtremelabs/droidsugar/fakes/FakeContextWrapper.java
index 27596e288..be24746c0 100644
--- a/src/com/xtremelabs/droidsugar/fakes/FakeContextWrapper.java
+++ b/src/com/xtremelabs/droidsugar/fakes/FakeContextWrapper.java
@@ -1,11 +1,11 @@
 package com.xtremelabs.droidsugar.fakes;
 
-import android.app.AlarmManager;
 import android.content.*;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.res.Resources;
 import android.location.LocationManager;
+import android.net.wifi.WifiManager;
 import android.test.mock.MockPackageManager;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -18,8 +18,6 @@ import com.xtremelabs.droidsugar.view.TestSharedPreferences;
 
 import java.util.*;
 
-import static org.mockito.Mockito.mock;
-
 @SuppressWarnings({""UnusedDeclaration""})
 @Implements(ContextWrapper.class)
 public class FakeContextWrapper {
@@ -36,6 +34,7 @@ public class FakeContextWrapper {
     public Intent startedIntent;
 
     public Map<String, BroadcastReceiver> registeredReceivers = new HashMap<String, BroadcastReceiver>();
+    private WifiManager wifiManager;
 
     public FakeContextWrapper(ContextWrapper realContextWrapper) {
         this.realContextWrapper = realContextWrapper;
@@ -53,6 +52,10 @@ public class FakeContextWrapper {
         return getApplicationContext().getContentResolver();
     }
 
+    public Object getSystemService(String name) {
+        return getApplicationContext().getSystemService(name);
+    }
+
     public void sendBroadcast(Intent intent) {
         BroadcastReceiver broadcastReceiver = registeredReceivers.get(intent.getAction());
         if (broadcastReceiver != null) {
@@ -97,24 +100,6 @@ public class FakeContextWrapper {
         return packageManager;
     }
 
-    public Object getSystemService(String name) {
-        if (name.equals(Context.LAYOUT_INFLATER_SERVICE)) {
-            return getFakeLayoutInflater();
-        } else if (name.equals(Context.ALARM_SERVICE)) {
-            return mock(AlarmManager.class);
-        } else if (name.equals(Context.LOCATION_SERVICE)) {
-            if (locationManager == null) {
-                locationManager = mock(LocationManager.class);
-            }
-            return locationManager;
-        }
-        return null;
-    }
-
-    public FakeLayoutInflater getFakeLayoutInflater() {
-        return new FakeLayoutInflater(resourceLoader.viewLoader);
-    }
-
     public ComponentName startService(Intent service) {
         startedServices.add(service);
         return new ComponentName(""some.service.package"", ""SomeServiceName"");
diff --git a/src/com/xtremelabs/droidsugar/fakes/FakeSettings.java b/src/com/xtremelabs/droidsugar/fakes/FakeSettings.java
index 3b4b17cb8..d9341db0a 100644
--- a/src/com/xtremelabs/droidsugar/fakes/FakeSettings.java
+++ b/src/com/xtremelabs/droidsugar/fakes/FakeSettings.java
@@ -45,7 +45,6 @@ public class FakeSettings {
 
     public static void setAirplaneMode(boolean isAirplaneMode) {
         Settings.System.putInt(FakeHelper.application.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, isAirplaneMode ? 1 : 0);
-        setWifiOn(!isAirplaneMode);
     }
 
     public static void setWifiOn(boolean isOn) {
diff --git a/src/com/xtremelabs/droidsugar/fakes/FakeWifiManager.java b/src/com/xtremelabs/droidsugar/fakes/FakeWifiManager.java
new file mode 100644
index 000000000..3a17e13c8
--- /dev/null
+++ b/src/com/xtremelabs/droidsugar/fakes/FakeWifiManager.java
@@ -0,0 +1,20 @@
+package com.xtremelabs.droidsugar.fakes;
+
+import android.net.wifi.WifiManager;
+import com.xtremelabs.droidsugar.util.Implements;
+
+@SuppressWarnings({""UnusedDeclaration""})
+@Implements(WifiManager.class)
+public class FakeWifiManager {
+    private boolean wifiEnabled = true;
+
+    public boolean setWifiEnabled(boolean wifiEnabled) {
+        this.wifiEnabled = wifiEnabled;
+        return true;
+    }
+
+    public boolean isWifiEnabled() {
+        return wifiEnabled;
+    }
+
+}
diff --git a/src/com/xtremelabs/droidsugar/util/FakeHelper.java b/src/com/xtremelabs/droidsugar/util/FakeHelper.java
index e3bae3d21..1ed8d645b 100644
--- a/src/com/xtremelabs/droidsugar/util/FakeHelper.java
+++ b/src/com/xtremelabs/droidsugar/util/FakeHelper.java
@@ -66,6 +66,7 @@ public class FakeHelper {
                 FakeToast.class,
                 FakeView.class,
                 FakeViewGroup.class,
+                FakeWifiManager.class,
                 FakeZoomButtonsController.class
                 );
     }
diff --git a/test/com/xtremelabs/droidsugar/fakes/ContextWrapperTest.java b/test/com/xtremelabs/droidsugar/fakes/ContextWrapperTest.java
index 9c2245df7..bb448b02a 100644
--- a/test/com/xtremelabs/droidsugar/fakes/ContextWrapperTest.java
+++ b/test/com/xtremelabs/droidsugar/fakes/ContextWrapperTest.java
@@ -70,4 +70,20 @@ public class ContextWrapperTest {
 
         assertThat(activity.getContentResolver(), sameInstance(new Activity().getContentResolver()));
     }
+
+    @Test
+    public void shouldReturnSameLocationManagerEveryTime() throws Exception {
+        Activity activity = new Activity();
+        assertThat(activity.getSystemService(Context.LOCATION_SERVICE), sameInstance(activity.getSystemService(Context.LOCATION_SERVICE)));
+
+        assertThat(activity.getSystemService(Context.LOCATION_SERVICE), sameInstance(new Activity().getSystemService(Context.LOCATION_SERVICE)));
+    }
+
+    @Test
+    public void shouldReturnSameWifiManagerEveryTime() throws Exception {
+        Activity activity = new Activity();
+        assertThat(activity.getSystemService(Context.WIFI_SERVICE), sameInstance(activity.getSystemService(Context.WIFI_SERVICE)));
+
+        assertThat(activity.getSystemService(Context.WIFI_SERVICE), sameInstance(new Activity().getSystemService(Context.WIFI_SERVICE)));
+    }
 }",added support for WifiManager,"""Extracted getSystemService logic from FakeContextWrapper to FakeApplication and added FakeWifiManager""","""Added support for mocking AlarmManager, LocationManager, and WifiManager in FakeApplication and FakeContextWrapper, and created a FakeWifiManager class for testing purposes.""","""Added FakeWifiManager and updated FakeApplication, FakeContextWrapper, and FakeSettings to use it. Also, added tests for LocationManager and WifiManager in ContextWrapperTest.""

Explanation:

* FakeWifiManager class has been added.
* FakeApplication, FakeContextWrapper, and FakeSettings have been updated to use FakeWifiManager.
* ContextWrapperTest now includes tests for LocationManager and WifiManager.
* The changes in FakeApplication, FakeContextWrapper, FakeSettings, and ContextWrapperTest suggest that they have been updated to properly handle FakeWifiManager and the tests have been added to ensure the correct behavior of LocationManager and WifiManager in the context wrapper.","""Add WifiManager mock and refactor system services in FakeApplication and FakeContextWrapper for improved testing."""
"diff --git a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java
index 51e3084f12d..8f225dfc4ab 100644
--- a/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java
+++ b/compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java
@@ -50,6 +50,7 @@ public enum DiagnosticCode {
     UNDEFINED_STRUCTURE_FIELD_WITH_TYPE(""undefined.field.in.structure.with.type""), // TODO: remove Maryam
     UNDEFINED_STRUCTURE_FIELD(""undefined.field.in.structure""),
     TYPE_NOT_ALLOWED_WITH_NEW(""type.not.allowed.with.new""),
+    STREAM_INVALID_CONSTRAINT(""stream.invalid.constraint""),
     STREAM_INIT_NOT_ALLOWED_HERE(""stream.initialization.not.allowed.here""),
     CANNOT_INFER_OBJECT_TYPE_FROM_LHS(""cannot.infer.object.type.from.lhs""),
     OBJECT_UNINITIALIZED_FIELD(""object.uninitialized.field""),
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java
index 8b9ab6cf3ce..d3dce5ade6b 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java
@@ -241,8 +241,6 @@ public class SymbolEnter extends BLangNodeVisitor {
         pkgNode.typeDefinitions.forEach(typDef -> typDefs.add(typDef));
         defineTypeNodes(typDefs, pkgEnv);
 
-        pkgNode.globalVars.forEach(var -> defineNode(var, pkgEnv));
-
         // Enabled logging errors after type def visit.
         // TODO: Do this in a cleaner way
         pkgEnv.logErrors = true;
@@ -268,6 +266,8 @@ public class SymbolEnter extends BLangNodeVisitor {
         // Define annotation nodes.
         pkgNode.annotations.forEach(annot -> defineNode(annot, pkgEnv));
 
+        pkgNode.globalVars.forEach(var -> defineNode(var, pkgEnv));
+
         // Update globalVar for endpoints.
         pkgNode.globalVars.stream().filter(var -> var.symbol.type.tsymbol != null && Symbols
                 .isFlagOn(var.symbol.type.tsymbol.flags, Flags.CLIENT)).map(varNode -> varNode.symbol)
diff --git a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java
index bcd632de433..00d67341604 100644
--- a/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java
+++ b/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java
@@ -1098,6 +1098,12 @@ public class SymbolResolver extends BLangNodeVisitor {
             resultType = new BTableType(TypeTags.TABLE, constraintType, type.tsymbol);
             return;
         } else if (type.tag == TypeTags.STREAM) {
+            if (!types.isPureType(constraintType)) {
+                dlog.error(constrainedTypeNode.constraint.pos, DiagnosticCode.STREAM_INVALID_CONSTRAINT,
+                           constraintType);
+                resultType = symTable.semanticError;
+                return;
+            }
             constrainedType = new BStreamType(TypeTags.STREAM, constraintType, null);
         } else if (type.tag == TypeTags.FUTURE) {
             constrainedType = new BFutureType(TypeTags.FUTURE, constraintType, null);
diff --git a/compiler/ballerina-lang/src/main/resources/compiler.properties b/compiler/ballerina-lang/src/main/resources/compiler.properties
index 6110354d6a8..1c438c6b53d 100644
--- a/compiler/ballerina-lang/src/main/resources/compiler.properties
+++ b/compiler/ballerina-lang/src/main/resources/compiler.properties
@@ -56,6 +56,9 @@ error.undefined.field.in.structure=\
 error.type.not.allowed.with.new=\
   type not allowed with new for type ''{0}''
 
+error.stream.invalid.constraint=\
+  invalid constraint type ''{0}'', expected a subtype of ''anydata|error''
+
 error.stream.initialization.not.allowed.here=\
   'stream' initialization not allowed here
 ",Restrict stream constraint to pure type,"""Added validation for stream constraint type and fixed global variable definition order""","""Added support for invalid stream constraints and updated error messages.""","The commit message could be:

""Add new diagnostic code for invalid stream constraint and adjust symbol entering process in package nodes""

Explanation:

1. A new diagnostic code `STREAM_INVALID_CONSTRAINT` has been added in `DiagnosticCode.java` to handle cases where an invalid constraint is provided for a stream.

2. In `SymbolEnter.java`, the process of entering symbols for global variables in package nodes has been adjusted. The global variables are now defined after defining type nodes, instead of before.

3. In `SymbolResolver.java`, a new check has been added to ensure that the constraint type for a stream is a pure type. If not, an error is logged using the newly added diagnostic code.

4. A new error message has been added to `compiler.properties` for the case when an invalid constraint type is provided for a stream.",Add validation for stream constraint types and reorder global variable definition in SymbolEnter.
"diff --git a/pmd/regress/test/net/sourceforge/pmd/stat/StatisticalRuleTest.java b/pmd/regress/test/net/sourceforge/pmd/stat/StatisticalRuleTest.java
index 40e4cc4566..d65b114a9f 100644
--- a/pmd/regress/test/net/sourceforge/pmd/stat/StatisticalRuleTest.java
+++ b/pmd/regress/test/net/sourceforge/pmd/stat/StatisticalRuleTest.java
@@ -62,7 +62,9 @@ public class StatisticalRuleTest
 		
 	public static final double MEAN = 499.5;
 	public static final double SIGMA = 288.6750;
-	public static final int NUM_TESTS = 32;
+	public static final int NUM_TESTS = 512;
+	
+	public static final double DELTA = 0.005;
 	
     public StatisticalRuleTest(String name) 
     {
@@ -155,12 +157,21 @@ public class StatisticalRuleTest
 	
 	/**
 	 * This returns the expected number of reports.
+	 * 
+	 * If the Minimum comes in at 521.569 then we expect
+	 * 522, 523, ... 999 will pass.
 	 */
 	public int expectedMinimum(double minimum) {
-		int RC = 999 - ((int) Math.round(minimum - 0.5) + 1);
-		if (RC >= 0) return RC; else return 0;
+		Double d = new Double( minimum );
+		return 999 - d.intValue();
 	}
 	
+	public void testExpectedMinimum() {
+		for (int i = 0; i < 999; i++) {
+			assertEquals(""Integer Min"", 999 - i, expectedMinimum( i * 1.0 ));
+			assertEquals(""Double Min"", 999 - i, expectedMinimum( (i * 1.0) + 0.5 ));
+		}	
+	}
 	/**
 	 * This returns a random value for Top Score.
 	 */
@@ -173,6 +184,8 @@ public class StatisticalRuleTest
 	 * which will return more than the minimum provided.
 	 */
 	public int randomTopScore(double target) {
+		if (target < 0) return 0;
+		
 		return random.nextInt( (new Double(target)).intValue() );
 	}
 	
diff --git a/pmd/src/net/sourceforge/pmd/stat/StatisticalRule.java b/pmd/src/net/sourceforge/pmd/stat/StatisticalRule.java
index caae18c91a..771d538ce5 100644
--- a/pmd/src/net/sourceforge/pmd/stat/StatisticalRule.java
+++ b/pmd/src/net/sourceforge/pmd/stat/StatisticalRule.java
@@ -96,7 +96,7 @@ public abstract class StatisticalRule extends AbstractRule {
 		while (points.hasNext()) {
             DataPoint point = (DataPoint) points.next();
 
-            if (point.getScore() >= (minValue - DELTA)) {
+            if (point.getScore() > (minValue - DELTA)) {
                 RC.add(point);
             }
 		}",Fixed the problems .,"""Enhance StatisticalRuleTest and StatisticalRule for improved accuracy and robustness""","""Improved StatisticalRuleTest with increased test cases and additional functionality""

However, a more concise and descriptive commit message would be:

""Enhance StatisticalRuleTest with more robust testing and edge cases""

Or, if you want to follow the conventional commit message format:

""feat: Enhance StatisticalRuleTest with more robust testing and edge cases""

This format indicates that the commit is a feature addition, and provides a brief description of the changes made.","""Increased number of tests, added expected minimum test, and fixed minimum value check in StatisticalRule""

Explanation:

* The number of tests has been increased from 32 to 512 in `StatisticalRuleTest.java`.
* A new constant `DELTA` has been added to `StatisticalRuleTest.java`.
* A new test method `testExpectedMinimum()` has been added to `StatisticalRuleTest.java`.
* The implementation of `expectedMinimum(double minimum)` has been changed in `StatisticalRuleTest.java`.
* The minimum value check has been changed from `>=` to `>` in `StatisticalRule.java`.
* Also, added a check for negative target in `randomTopScore(double target)` method of `StatisticalRuleTest.java`.","Update minimum score comparison, adjust constants, and add test cases for expected minimum and random top score handling."
"diff --git a/src/main/java/com/google/devtools/build/lib/profiler/TraceEvent.java b/src/main/java/com/google/devtools/build/lib/profiler/TraceEvent.java
index c2558c1aaa..00c66cdceb 100644
--- a/src/main/java/com/google/devtools/build/lib/profiler/TraceEvent.java
+++ b/src/main/java/com/google/devtools/build/lib/profiler/TraceEvent.java
@@ -41,16 +41,6 @@ public abstract class TraceEvent {
         category, name, timestamp, duration, threadId, primaryOutputPath);
   }
 
-  public static TraceEvent create(
-      @Nullable String category,
-      String name,
-      @Nullable Duration timestamp,
-      @Nullable Duration duration,
-      long threadId) {
-    return new AutoValue_TraceEvent(
-        category, name, timestamp, duration, threadId, /* primaryOutputPath= */ null);
-  }
-
   @Nullable
   public abstract String category();
 ",Delete unused code . . RELNOTES : None .,"""Remove deprecated TraceEvent.create() method""","The commit message should be: 

""Removed deprecated create method from TraceEvent""

This message accurately reflects the change made in the commit, which is the removal of the `create` method.","""Removed static method create(String, String, Duration, Duration, long) in TraceEvent.java""","""Removed deprecated TraceEvent.create method with redundant parameters, retaining the method with the primaryOutputPath parameter."""
"diff --git a/test-manual/src/main/java/de/plushnikov/builder/issue127/Issue127.java b/test-manual/src/main/java/de/plushnikov/builder/issue127/Issue127.java
new file mode 100644
index 00000000..727ed431
--- /dev/null
+++ b/test-manual/src/main/java/de/plushnikov/builder/issue127/Issue127.java
@@ -0,0 +1,8 @@
+package de.plushnikov.builder.issue127;
+
+import lombok.Builder;
+
+@Builder
+public class Issue127<T> {
+  private T body;
+}
diff --git a/test-manual/src/main/java/de/plushnikov/builder/issue249/Issue249.java b/test-manual/src/main/java/de/plushnikov/builder/issue249/Issue249.java
new file mode 100644
index 00000000..f35ecbe0
--- /dev/null
+++ b/test-manual/src/main/java/de/plushnikov/builder/issue249/Issue249.java
@@ -0,0 +1,15 @@
+package de.plushnikov.builder.issue249;
+
+import lombok.Builder;
+import lombok.Value;
+
+@Builder
+@Value
+public class Issue249<T> {
+    T value;
+
+    public static void main(String[] args) {
+        final Issue249Builder<String> b = Issue249.<String>builder().value(""a"");
+        final Issue249<String> t = b.build();
+    }
+}",added some manual test classes,"""Add test cases for Lombok Builder issues 127 and 249""",Added Issue127 and Issue249 test classes for builder issues 127 and 249.,"""Added new Java classes for Issue127 and Issue249""

This commit adds two new Java classes, `Issue127` and `Issue249`, both of which are generic classes with a single private field `body` and `value` respectively. The `Issue127` class is annotated with `@Builder` and the `Issue249` class is annotated with both `@Builder` and `@Value`. The `Issue249` class also includes a `main` method that demonstrates how to use the builder to create an instance of the class.",Added new test cases for Lombok builder issues: generic type handling in Issue127 and value class builder in Issue249.
"diff --git a/src/net/java/sip/communicator/impl/certificate/CertificateVerificationActivator.java b/src/net/java/sip/communicator/impl/certificate/CertificateVerificationActivator.java
index 40067d692..2c5bffaa9 100644
--- a/src/net/java/sip/communicator/impl/certificate/CertificateVerificationActivator.java
+++ b/src/net/java/sip/communicator/impl/certificate/CertificateVerificationActivator.java
@@ -9,7 +9,6 @@
 import net.java.sip.communicator.service.certificate.*;
 import net.java.sip.communicator.service.configuration.*;
 import net.java.sip.communicator.service.credentialsstorage.*;
-import net.java.sip.communicator.service.fileaccess.*;
 import net.java.sip.communicator.service.resources.*;
 import net.java.sip.communicator.util.*;
 
@@ -33,11 +32,6 @@ public class CertificateVerificationActivator
      */
     private static ConfigurationService configService;
 
-    /**
-     * The service giving access to files.
-     */
-    private static FileAccessService fileAccessService;
-
     /**
      * The service giving access to all resources.
      */
@@ -77,7 +71,6 @@ public void start(BundleContext bc) throws Exception
     public void stop(BundleContext bc) throws Exception
     {
         configService = null;
-        fileAccessService = null;
         resourcesService = null;
         credService = null;
     }
@@ -100,23 +93,6 @@ public static ConfigurationService getConfigurationService()
         return configService;
     }
 
-    /**
-     * Returns the <tt>FileAccessService</tt> obtained from the bundle context.
-     *
-     * @return the <tt>FileAccessService</tt> obtained from the bundle context
-     */
-    public static FileAccessService getFileAccessService()
-    {
-        if (fileAccessService == null)
-        {
-            fileAccessService
-                = ServiceUtils.getService(
-                        bundleContext,
-                        FileAccessService.class);
-        }
-        return fileAccessService;
-    }
-
     /**
      * Returns the <tt>ResourceManagementService</tt>, through which we will
      * access all resources.
diff --git a/src/net/java/sip/communicator/impl/certificate/certificate.manifest.mf b/src/net/java/sip/communicator/impl/certificate/certificate.manifest.mf
index 84d9a25c2..7e3f074a6 100644
--- a/src/net/java/sip/communicator/impl/certificate/certificate.manifest.mf
+++ b/src/net/java/sip/communicator/impl/certificate/certificate.manifest.mf
@@ -10,7 +10,6 @@ Import-Package: org.osgi.framework,
  net.java.sip.communicator.util.swing,
  net.java.sip.communicator.service.configuration,
  net.java.sip.communicator.service.credentialsstorage,
- net.java.sip.communicator.service.fileaccess,
  net.java.sip.communicator.service.httputil,
  net.java.sip.communicator.service.resources,
  javax.net.ssl,",Remove unneeded reference to FileAccessService,"""Remove unused FileAccessService dependency and references""","""Removed unused import and service references to FileAccessService.""","""Removed unused FileAccessService and its related imports in CertificateVerificationActivator.java""",Removed FileAccessService references and imports from CertificateVerificationActivator.java for code optimization.
"diff --git a/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 1ea154d436..494f7a8acb 100644
--- a/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -374,19 +374,19 @@ public class    DatabaseDescriptor
         }
         catch (UnknownHostException e)
         {
-            logger.error(""Fatal error: "" + e.getMessage());
+            logger.error(""Fatal configuration error "", e);
             System.err.println(""Unable to start with unknown hosts configured.  Use IP addresses instead of hostnames."");
             System.exit(2);
         }
         catch (ConfigurationException e)
         {
-            logger.error(""Fatal error: "" + e.getMessage());
+            logger.error(""Fatal configuration error"", e);
             System.err.println(""Bad configuration; unable to start server"");
             System.exit(1);
         }
         catch (YAMLException e)
         {
-            logger.error(""Fatal error: "" + e.getMessage());
+         ",include stacktrace for configuration errors in system log .,"""Improve error logging in DatabaseDescriptor by including exception details""","""Improved error logging in DatabaseDescriptor to include exception details""","""Update error messages in DatabaseDescriptor.java""

The change itself replaces the error messages in the catch blocks for UnknownHostException, ConfigurationException, and YAMLException in the DatabaseDescriptor.java file. The new messages provide more context and include the exception itself, which can help with debugging.","""Improve error logging for UnknownHostException and ConfigurationException in DatabaseDescriptor.java"""
"diff --git a/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyCachedTest.java b/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyCachedTest.java
new file mode 100644
index 0000000000..6bde31694a
--- /dev/null
+++ b/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyCachedTest.java
@@ -0,0 +1,435 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
+ */
+package org.hibernate.test.component.empty;
+
+import java.io.Serializable;
+import javax.persistence.Cacheable;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+import javax.persistence.SharedCacheMode;
+
+import org.hibernate.cache.spi.access.AccessType;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.cfg.Environment;
+import org.hibernate.stat.QueryStatistics;
+import org.hibernate.stat.SecondLevelCacheStatistics;
+
+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
+import org.junit.Test;
+
+import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author Gail Badner
+ */
+public class EmptyCompositeManyToOneKeyCachedTest extends BaseCoreFunctionalTestCase {
+
+	@Override
+	protected Class<?>[] getAnnotatedClasses() {
+		return new Class[] {
+				AnEntity.class,
+				OtherEntity.class
+		};
+	}
+
+	@Override
+	protected void configure(Configuration configuration) {
+		super.configure( configuration );
+		configuration.getProperties().put( Environment.CREATE_EMPTY_COMPOSITES_ENABLED, ""true"" );
+		configuration.getProperties().put( Environment.USE_SECOND_LEVEL_CACHE, ""true"" );
+		configuration.getProperties().put( Environment.DEFAULT_CACHE_CONCURRENCY_STRATEGY, AccessType.READ_WRITE.getExternalName() );
+		configuration.getProperties().put( Environment.USE_QUERY_CACHE, ""true"" );
+		configuration.getProperties().put( Environment.GENERATE_STATISTICS, ""true"" );
+		configuration.getProperties().put( Environment.CACHE_REGION_PREFIX, """" );
+		configuration.getProperties().put( ""javax.persistence.sharedCache.mode"", SharedCacheMode.ALL );
+	}
+
+	@Test
+	public void testGetEntityWithNullManyToOne() {
+
+		sessionFactory().getCache().evictAllRegions();
+		sessionFactory().getStatistics().clear();
+
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.find( AnEntity.class, id );
+					assertNotNull( anEntity );
+					assertNull( anEntity.otherEntity );
+				}
+		);
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+	}
+
+	@Test
+	public void testQueryEntityWithNullManyToOne() {
+
+		sessionFactory().getCache().evictAllRegions();
+		sessionFactory().getStatistics().clear();
+
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		final String queryString = ""from AnEntity where id = "" + id;
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+	}
+
+	@Test
+	public void testQueryEntityJoinFetchNullManyToOne() {
+
+		sessionFactory().getCache().evictAllRegions();
+		sessionFactory().getStatistics().clear();
+
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		final String queryString = ""from AnEntity e join fetch e.otherEntity where e.id = "" + id;
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity );
+				}
+		);
+
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity );
+				}
+		);
+
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+	}
+
+	@Test
+	public void testQueryEntityLeftJoinFetchNullManyToOne() {
+
+		sessionFactory().getCache().evictAllRegions();
+		sessionFactory().getStatistics().clear();
+
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		final String queryString = ""from AnEntity e left join fetch e.otherEntity where e.id = "" + id;
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							queryString,
+							AnEntity.class
+					).setCacheable( true ).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+	}
+
+	@Test
+	public void testQueryEntityAndNullManyToOne() {
+
+		sessionFactory().getCache().evictAllRegions();
+		sessionFactory().getStatistics().clear();
+
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		final String queryString = ""select e, e.otherEntity from AnEntity e left join e.otherEntity where e.id = "" + id;
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final Object[] result = session.createQuery(
+							queryString,
+							Object[].class
+					).setCacheable( true ).uniqueResult();
+					assertEquals( 2, result.length );
+					assertTrue( AnEntity.class.isInstance( result[0] ) );
+					assertNull( result[1] );
+				}
+		);
+
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 1, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+
+		sessionFactory().getStatistics().clear();
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final Object[] result = session.createQuery(
+							queryString,
+							Object[].class
+					).setCacheable( true ).uniqueResult();
+					assertEquals( 2, result.length );
+					assertTrue( AnEntity.class.isInstance( result[0] ) );
+					assertNull( result[1] );
+				}
+		);
+
+		assertEquals( 1, getQueryStatistics( queryString ).getCacheHitCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCacheMissCount() );
+		assertEquals( 0, getQueryStatistics( queryString ).getCachePutCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getPutCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getPutCount() );
+
+		assertEquals( 1, getEntity2LCStatistics( AnEntity.class ).getHitCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getHitCount() );
+
+		assertEquals( 0, getEntity2LCStatistics( AnEntity.class ).getMissCount() );
+		assertEquals( 0, getEntity2LCStatistics( OtherEntity.class ).getMissCount() );
+	}
+
+
+	@Override
+	protected boolean isCleanupTestDataRequired() {
+		return true;
+	}
+
+	private SecondLevelCacheStatistics getEntity2LCStatistics(Class<?> className) {
+		return sessionFactory().getStatistics()
+				.getSecondLevelCacheStatistics( className.getName() );
+	}
+
+	private QueryStatistics getQueryStatistics(String queryString) {
+		return sessionFactory().getStatistics().getQueryStatistics( queryString );
+	}
+	@Entity(name = ""AnEntity"")
+	@Cacheable
+	public static class AnEntity {
+		@Id
+		private int id;
+
+		@ManyToOne
+		private OtherEntity otherEntity;
+	}
+
+	@Entity(name = ""OtherEntity"")
+	@Cacheable
+	public static class OtherEntity implements Serializable {
+		@Id
+		private String firstName;
+
+		@Id
+		private String lastName;
+
+		private String description;
+
+
+		@Override
+		public String toString() {
+			return ""OtherEntity{"" +
+					""firstName='"" + firstName + '\'' +
+					"", lastName='"" + lastName + '\'' +
+					"", description='"" + description + '\'' +
+					'}';
+		}
+	}
+}
diff --git a/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyTest.java b/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyTest.java
new file mode 100644
index 0000000000..deba42c7aa
--- /dev/null
+++ b/hibernate-core/src/test/java/org/hibernate/test/component/empty/EmptyCompositeManyToOneKeyTest.java
@@ -0,0 +1,202 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
+ */
+package org.hibernate.test.component.empty;
+
+import java.io.Serializable;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+
+import org.hibernate.cfg.Configuration;
+import org.hibernate.cfg.Environment;
+
+import org.hibernate.testing.TestForIssue;
+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
+import org.junit.Test;
+
+import static org.hibernate.testing.transaction.TransactionUtil.doInHibernate;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author Gail Badner
+ */
+public class EmptyCompositeManyToOneKeyTest extends BaseCoreFunctionalTestCase {
+
+	@Override
+	protected Class<?>[] getAnnotatedClasses() {
+		return new Class[] {
+				AnEntity.class,
+				OtherEntity.class
+		};
+	}
+
+	@Override
+	protected void configure(Configuration configuration) {
+		super.configure( configuration );
+		configuration.getProperties().put( Environment.CREATE_EMPTY_COMPOSITES_ENABLED, ""true"" );
+		configuration.getProperties().put( Environment.USE_SECOND_LEVEL_CACHE, ""false"" );
+	}
+
+	@Test
+	@TestForIssue( jiraKey = ""HHH-11922"" )
+	public void testGetEntityWithNullManyToOne() {
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.find( AnEntity.class, id );
+					assertNotNull( anEntity );
+					assertNull( anEntity.otherEntity );
+				}
+		);
+	}
+
+	@Test
+	@TestForIssue( jiraKey = ""HHH-11922"" )
+	public void testQueryEntityWithNullManyToOne() {
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							""from AnEntity where id = "" + id,
+							AnEntity.class
+					).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+	}
+
+	@Test
+	@TestForIssue( jiraKey = ""HHH-11922"" )
+	public void testQueryEntityJoinFetchNullManyToOne() {
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							""from AnEntity e join fetch e.otherEntity where e.id = "" + id,
+							AnEntity.class
+					).uniqueResult();
+					assertNull( anEntity );
+				}
+		);
+	}
+
+	@Test
+	@TestForIssue( jiraKey = ""HHH-11922"" )
+	public void testQueryEntityLeftJoinFetchNullManyToOne() {
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = session.createQuery(
+							""from AnEntity e left join fetch e.otherEntity where e.id = "" + id,
+							AnEntity.class
+					).uniqueResult();
+					assertNull( anEntity.otherEntity );
+				}
+		);
+	}
+
+	@Test
+	@TestForIssue( jiraKey = ""HHH-11922"" )
+	public void testQueryEntityAndNullManyToOne() {
+		int id = doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final AnEntity anEntity = new AnEntity();
+					session.persist( anEntity );
+					return anEntity.id;
+				}
+		);
+
+		doInHibernate(
+				this::sessionFactory,
+				session -> {
+					final Object[] result = session.createQuery(
+							""select e, e.otherEntity from AnEntity e left join e.otherEntity where e.id = "" + id,
+							Object[].class
+					).uniqueResult();
+					assertEquals( 2, result.length );
+					assertTrue( AnEntity.class.isInstance( result[0] ) );
+					assertNull( result[1] );
+				}
+		);
+	}
+
+
+	@Override
+	protected boolean isCleanupTestDataRequired() {
+		return true;
+	}
+
+	@Entity(name  = ""AnEntity"")
+	public static class AnEntity {
+		@Id
+		private int id;
+
+		@ManyToOne
+		private OtherEntity otherEntity;
+	}
+
+	@Entity
+	public static class OtherEntity implements Serializable {
+		@Id
+		private String firstName;
+
+		@Id
+		private String lastName;
+
+		private String description;
+
+
+		@Override
+		public String toString() {
+			return ""OtherEntity{"" +
+					""firstName='"" + firstName + '\'' +
+					"", lastName='"" + lastName + '\'' +
+					"", description='"" + description + '\'' +
+					'}';
+		}
+	}
+}",Added test cases,"""Add tests for handling empty composite many-to-one keys with and without second-level caching""","Added tests for empty composite many-to-one key with cache enabled and disabled.

This commit message accurately reflects the changes made in the diff, which includes the addition of new test classes (`EmptyCompositeManyToOneKeyCachedTest` and `EmptyCompositeManyToOneKeyTest`) to test the behavior of empty composite many-to-one keys with cache enabled and disabled, respectively.","This commit appears to add a new Java class named `EmptyCompositeManyToOneKeyCachedTest` to the Hibernate project. The class contains several test methods for testing the caching behavior of Hibernate when dealing with entities that have composite keys and many-to-one relationships where the many-to-one side is null.

The class extends `BaseCoreFunctionalTestCase` and overrides several methods to configure the Hibernate `Configuration` object with properties to enable caching and specify the caching strategy. The `getAnnotatedClasses()` method returns an array of classes that are used in the tests.

The test methods use the `doInHibernate()` method from the `BaseCoreFunctionalTestCase` class to execute code within a Hibernate session. The code within the `doInHibernate()` method typically involves creating or retrieving entities, and then asserting that the entities are cached or not cached as expected.

Additionally, this commit also modifies the `EmptyCompositeManyToOneKeyTest` class by adding the `@TestForIssue` annotation to several test methods, indicating that these tests are related to a specific Hibernate issue (HHH-11922).

Here's a possible commit message:
```vbnet
Add EmptyCompositeManyToOneKeyCachedTest class

This commit adds a new test class to the Hibernate project for testing
the caching behavior of entities with composite keys and many-to-one
relationships where the many-to-one side is null. The tests cover various
scenarios, including getting an entity with a null many-to-one side,
querying for an entity with a null many-to-one side, and querying for
an entity and its null many-to-one side. The tests also use different
caching strategies and query options.

Additionally, this commit adds the @TestForIssue annotation to several
test methods in the EmptyCompositeManyToOneKeyTest class to indicate
that these tests are related to a specific Hibernate issue (HHH-11922).
```","""Add tests for empty composite many-to-one key: with and without second-level caching."""
"diff --git a/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/TruffleStackTrace.java b/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/TruffleStackTrace.java
index 388f9b0aca1..9349db13140 100644
--- a/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/TruffleStackTrace.java
+++ b/truffle/src/com.oracle.truffle.api/src/com/oracle/truffle/api/TruffleStackTrace.java
@@ -72,6 +72,7 @@ import com.oracle.truffle.api.nodes.Node;
  * {@link CallTarget call target}, or that the stack trace will not be used.
  *
  * @see #getStackTrace() getStackTrace() to retrieve the stacktrace from a {@link Throwable}.
+ * @since 1.0
  */
 @SuppressWarnings(""serial"")
 public final class TruffleStackTrace extends Exception {
@@ -102,6 +103,9 @@ public final class TruffleStackTrace extends Exception {
         }
     }
 
+    /**
+     * @since 1.0
+     */
     @SuppressWarnings(""sync-override"")
     @Override
     public Throwable fillInStackTrace() {
@@ -123,6 +127,9 @@ public final class TruffleStackTrace extends Exception {
         }
     }
 
+    /**
+     * @since 1.0
+     */
     @Override
     public String toString() {
         return ""Attached Guest Language Frames ("" + frames.size() + "")"";
@@ -137,11 +144,11 @@ public final class TruffleStackTrace extends Exception {
      * {@link TruffleException#getStackTraceElementLimit()}.
      *
      * @param throwable the throwable instance to look for guest language frames
-     * @since 0.27
+     * @since 1.0
      */
     @TruffleBoundary
-    public static List<TruffleStackTraceElement> getStacktrace(Throwable t) {
-        TruffleStackTrace stack = fillIn(t);
+    public static List<TruffleStackTraceElement> getStacktrace(Throwable throwable) {
+        TruffleStackTrace stack = fillIn(throwable);
         if (stack != null) {
             return stack.frames;
         }
@@ -203,14 +210,14 @@ public final class TruffleStackTrace extends Exception {
      * @since 1.0
      */
     @TruffleBoundary
-    public static TruffleStackTrace fillIn(Throwable t) {
-        if (t instanceof ControlFlowException) {
+    public static TruffleStackTrace fillIn(Throwable throwable) {
+        if (throwable instanceof ControlFlowException) {
             return EMPTY;
         }
 
-        LazyStackTrace lazy = findImpl(t);
+        LazyStackTrace lazy = findImpl(throwable);
         if (lazy == null) {
-            Throwable insertCause = findInsertCause(t);
+            Throwable insertCause = findInsertCause(throwable);
             if (insertCause == null) {
                 return null;
             }
@@ -223,8 +230,8 @@ public final class TruffleStackTrace extends Exception {
 
         int stackFrameLimit;
         Node topCallSite;
-        if (t instanceof TruffleException) {
-     ",Add @ since tags and fix name of arguments to match JavaDoc,"""Update TruffleStackTrace to version 1.0 and fix method parameter naming consistency""","According to the diff, the commit message should be:

""Update TruffleStackTrace to match API version 1.0""

However, a more detailed and descriptive commit message would be:

""Update TruffleStackTrace to match API version 1.0 by adding @since tags and updating method signatures to reflect the new API version.""","The commit message should be:

```
Update TruffleStackTrace.java for API version 1.0

- Add @since 1.0 tags to the class, methods, and constructor.
- Rename the 't' parameter to 'throwable' in the 'getStacktrace' and 'fillIn' methods for clarity.
```",Added @since version annotations and renamed 't' to 'throwable' in TruffleStackTrace methods for clarity.
"diff --git a/src/main/java/me/coley/recaf/command/impl/Assemble.java b/src/main/java/me/coley/recaf/command/impl/Assemble.java
index f0ae658e..10258706 100644
--- a/src/main/java/me/coley/recaf/command/impl/Assemble.java
+++ b/src/main/java/me/coley/recaf/command/impl/Assemble.java
@@ -80,14 +80,7 @@ public class Assemble extends WorkspaceCommand implements Callable<Assemble.Resu
 		MethodNode generated = assembler.compile(result);
 		// Replace method
 		MethodNode old = node.methods.get(methodIndex);
-		generated.invisibleAnnotations = old.invisibleAnnotations;
-		generated.visibleAnnotations = old.visibleAnnotations;
-		generated.invisibleParameterAnnotations = old.invisibleParameterAnnotations;
-		generated.visibleParameterAnnotations = old.visibleParameterAnnotations;
-		generated.invisibleTypeAnnotations = old.invisibleTypeAnnotations;
-		generated.visibleTypeAnnotations = old.visibleTypeAnnotations;
-		generated.invisibleLocalVariableAnnotations = old.invisibleLocalVariableAnnotations;
-		generated.visibleLocalVariableAnnotations = old.visibleLocalVariableAnnotations;
+		ClassUtil.copyMethodMetadata(old, generated);
 		node.methods.set(methodIndex, generated);
 		// Return wrapper
 		return new Result(node, method);
diff --git a/src/main/java/me/coley/recaf/control/headless/JLineEditor.java b/src/main/java/me/coley/recaf/control/headless/JLineEditor.java
index 9ece305e..62364c0a 100644
--- a/src/main/java/me/coley/recaf/control/headless/JLineEditor.java
+++ b/src/main/java/me/coley/recaf/control/headless/JLineEditor.java
@@ -4,6 +4,7 @@ import me.coley.recaf.Recaf;
 import me.coley.recaf.command.impl.Disassemble;
 import me.coley.recaf.parse.bytecode.*;
 import me.coley.recaf.parse.bytecode.ast.RootAST;
+import me.coley.recaf.util.ClassUtil;
 import me.coley.recaf.workspace.Workspace;
 import me.coley.recaf.workspace.WorkspaceClassWriter;
 import org.apache.commons.io.FileUtils;
@@ -84,14 +85,7 @@ public class JLineEditor {
 			int index = cn.methods.indexOf(mn);
 			if(index >= 0) {
 				MethodNode old = cn.methods.get(index);
-				generated.invisibleAnnotations = old.invisibleAnnotations;
-				generated.visibleAnnotations = old.visibleAnnotations;
-				generated.invisibleParameterAnnotations = old.invisibleParameterAnnotations;
-				generated.visibleParameterAnnotations = old.visibleParameterAnnotations;
-				generated.invisibleTypeAnnotations = old.invisibleTypeAnnotations;
-				generated.visibleTypeAnnotations = old.visibleTypeAnnotations;
-				generated.invisibleLocalVariableAnnotations = old.invisibleLocalVariableAnnotations;
-				generated.visibleLocalVariableAnnotations = old.visibleLocalVariableAnnotations;
+				ClassUtil.copyMethodMetadata(old, generated);
 				cn.methods.set(index, generated);
 			}
 			else
diff --git a/src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java b/src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
index 71060bdd..b2f8f318 100644
--- a/src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
+++ b/src/main/java/me/coley/recaf/ui/controls/text/BytecodePane.java
@@ -122,14 +122,7 @@ public class BytecodePane extends TextPane {
 		for(int i = 0; i < node.methods.size(); i++) {
 			MethodNode mn = node.methods.get(i);
 			if(mn.name.equals(methodName) && mn.desc.equals(methodDesc)) {
-				current.invisibleAnnotations = mn.invisibleAnnotations;
-				current.visibleAnnotations = mn.visibleAnnotations;
-				current.invisibleParameterAnnotations = mn.invisibleParameterAnnotations;
-				current.visibleParameterAnnotations = mn.visibleParameterAnnotations;
-				current.invisibleTypeAnnotations = mn.invisibleTypeAnnotations;
-				current.visibleTypeAnnotations = mn.visibleTypeAnnotations;
-				current.invisibleLocalVariableAnnotations = mn.invisibleLocalVariableAnnotations;
-				current.visibleLocalVariableAnnotations = mn.visibleLocalVariableAnnotations;
+				ClassUtil.copyMethodMetadata(current, mn);
 				node.methods.set(i, current);
 				found = true;
 				break;
diff --git a/src/main/java/me/coley/recaf/util/ClassUtil.java b/src/main/java/me/coley/recaf/util/ClassUtil.java
index c38e7d71..27726111 100644
--- a/src/main/java/me/coley/recaf/util/ClassUtil.java
+++ b/src/main/java/me/coley/recaf/util/ClassUtil.java
@@ -206,4 +206,21 @@ public class ClassUtil {
 			return (((code[6] & 0xFF) << 8) | (code[7] & 0xFF));
 		} catch(Exception ex) { /* Bad class file? */ return Opcodes.V1_8;}
 	}
+
+	/**
+	 * Copies method metadata
+	 *
+	 * @param from method to copy from
+	 * @param to method to copy to
+	 */
+	public static void copyMethodMetadata(MethodNode from, MethodNode to) {
+		to.invisibleAnnotations = from.invisibleAnnotations;
+		to.visibleAnnotations = from.visibleAnnotations;
+		to.invisibleParameterAnnotations = from.invisibleParameterAnnotations;
+		to.visibleParameterAnnotations = from.visibleParameterAnnotations;
+		to.invisibleTypeAnnotations = from.invisibleTypeAnnotations;
+		to.visibleTypeAnnotations = from.visibleTypeAnnotations;
+		to.invisibleLocalVariableAnnotations = from.invisibleLocalVariableAnnotations;
+		to.visibleLocalVariableAnnotations = from.visibleLocalVariableAnnotations;
+	}
 }",Remove code duplicates,"""Extracted method metadata copying into ClassUtil.copyMethodMetadata""","""Refactor method metadata copying to use ClassUtil.copyMethodMetadata""","""Added new utility method to copy method metadata in ClassUtil""

This commit introduces a new static method `copyMethodMetadata(MethodNode from, MethodNode to)` in the `ClassUtil` class. This method is used to copy metadata from one `MethodNode` object to another. The metadata includes invisible and visible annotations, parameter annotations, type annotations, and local variable annotations.

This change seems to be a refactoring to avoid code duplication, as the same lines of code for copying metadata were removed from three other classes (`Assemble`, `JLineEditor`, and `BytecodePane`) and replaced with a call to the new `copyMethodMetadata()` method.","Refactored to use `ClassUtil.copyMethodMetadata` for copying method annotations, reducing code duplication in several classes."
"diff --git a/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStub.java b/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStub.java
index 1b8f7865..7461cc57 100644
--- a/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStub.java
+++ b/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStub.java
@@ -60,13 +60,12 @@ public class ExampleUsingGeneratedStub
 
         final ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4096);
         final UnsafeBuffer directBuffer = new UnsafeBuffer(byteBuffer);
-        final short messageTemplateVersion = 0;
         int bufferOffset = 0;
         int encodingLength = 0;
 
         // Setup for encoding a message
 
-        MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion)
+        MESSAGE_HEADER.wrap(directBuffer, bufferOffset)
                       .blockLength(CAR_ENCODER.sbeBlockLength())
                       .templateId(CAR_ENCODER.sbeTemplateId())
                       .schemaId(CAR_ENCODER.sbeSchemaId())
@@ -91,7 +90,7 @@ public class ExampleUsingGeneratedStub
         // Decode the encoded message
 
         bufferOffset = 0;
-        READ_ONLY_MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion);
+        READ_ONLY_MESSAGE_HEADER.wrap(directBuffer, bufferOffset);
 
         // Lookup the applicable flyweight to decode this type of message based on templateId and version.
         final int templateId = READ_ONLY_MESSAGE_HEADER.templateId();
diff --git a/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStubExtension.java b/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStubExtension.java
index 297c9fa0..73eb2c24 100644
--- a/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStubExtension.java
+++ b/examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStubExtension.java
@@ -65,13 +65,12 @@ public class ExampleUsingGeneratedStubExtension
 
         final ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4096);
         final UnsafeBuffer directBuffer = new UnsafeBuffer(byteBuffer);
-        final short messageTemplateVersion = 0;
         int bufferOffset = 0;
         int encodingLength = 0;
 
         // Setup for encoding a message
 
-        MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion)
+        MESSAGE_HEADER.wrap(directBuffer, bufferOffset)
                       .blockLength(CAR_ENCODER_0.sbeBlockLength())
                       .templateId(CAR_ENCODER_0.sbeTemplateId())
                       .schemaId(CAR_ENCODER_0.sbeSchemaId())
@@ -96,7 +95,7 @@ public class ExampleUsingGeneratedStubExtension
         // Decode the encoded message
 
         bufferOffset = 0;
-        READ_ONLY_MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion);
+        READ_ONLY_MESSAGE_HEADER.wrap(directBuffer, bufferOffset);
 
         // Lookup the applicable flyweight to decode this type of message based on templateId and version.
         final int templateId = READ_ONLY_MESSAGE_HEADER.templateId();
diff --git a/examples/java/uk/co/real_logic/sbe/examples/OtfExample.java b/examples/java/uk/co/real_logic/sbe/examples/OtfExample.java
index a03791cc..c7cbc9af 100644
--- a/examples/java/uk/co/real_logic/sbe/examples/OtfExample.java
+++ b/examples/java/uk/co/real_logic/sbe/examples/OtfExample.java
@@ -40,7 +40,6 @@ public class OtfExample
 {
     private static final MessageHeaderEncoder MESSAGE_HEADER = new MessageHeaderEncoder();
     private static final CarEncoder CAR_ENCODER = new CarEncoder();
-    private static final int ACTING_VERSION = 0;
     private static final int MSG_BUFFER_CAPACITY = 4 * 1024;
     private static final int SCHEMA_BUFFER_CAPACITY = 16 * 1024;
 
@@ -111,7 +110,7 @@ public class OtfExample
         final UnsafeBuffer directBuffer = new UnsafeBuffer(buffer);
 
         int bufferOffset = 0;
-        MESSAGE_HEADER.wrap(directBuffer, bufferOffset, ACTING_VERSION)
+        MESSAGE_HEADER.wrap(directBuffer, bufferOffset)
                       .blockLength(CAR_ENCODER.sbeBlockLength())
                       .templateId(CAR_ENCODER.sbeTemplateId())
                       .schemaId(CAR_ENCODER.sbeSchemaId())
diff --git a/main/java/uk/co/real_logic/sbe/generation/java/JavaGenerator.java b/main/java/uk/co/real_logic/sbe/generation/java/JavaGenerator.java
index b05311e9..e2f8ee5b 100644
--- a/main/java/uk/co/real_logic/sbe/generation/java/JavaGenerator.java
+++ b/main/java/uk/co/real_logic/sbe/generation/java/JavaGenerator.java
@@ -313,14 +313,13 @@ public class JavaGenerator implements CodeGenerator
 
         sb.append(String.format(
             indent + ""    public void wrap(\n"" +
-            indent + ""        final %s parentMessage, final %s buffer, final int actingVersion)\n"" +
+            indent + ""        final %s parentMessage, final %s buffer)\n"" +
             indent + ""    {\n"" +
             indent + ""        this.parentMessage = parentMessage;\n"" +
             indent + ""        this.buffer = buffer;\n"" +
-            indent + ""        dimensions.wrap(buffer, parentMessage.limit(), actingVersion);\n"" +
+            indent + ""        dimensions.wrap(buffer, parentMessage.limit());\n"" +
             indent + ""        blockLength = dimensions.blockLength();\n"" +
             indent + ""        count = dimensions.numInGroup();\n"" +
-            indent + ""        this.actingVersion = actingVersion;\n"" +
             indent + ""        index = -1;\n"" +
             indent + ""        parentMessage.limit(parentMessage.limit() + HEADER_SIZE);\n"" +
             indent + ""    }\n\n"",
@@ -410,7 +409,7 @@ public class JavaGenerator implements CodeGenerator
             indent + ""        this.parentMessage = parentMessage;\n"" +
             indent + ""        this.buffer = buffer;\n"" +
             indent + ""        actingVersion = SCHEMA_VERSION;\n"" +
-            indent + ""        dimensions.wrap(buffer, parentMessage.limit(), actingVersion);\n"" +
+            indent + ""        dimensions.wrap(buffer, parentMessage.limit());\n"" +
             indent + ""        dimensions.blockLength((%2$s)%3$d);\n"" +
             indent + ""        dimensions.numInGroup((%4$s)count);\n"" +
             indent + ""        index = -1;\n"" +
@@ -546,7 +545,7 @@ public class JavaGenerator implements CodeGenerator
             ""\n"" +
             indent + ""    public %1$s %2$s()\n"" +
             indent + ""    {\n"" +
-            indent + ""        %2$s.wrap(parentMessage, buffer, actingVersion);\n"" +
+            indent + ""        %2$s.wrap(parentMessage, buffer);\n"" +
             indent + ""        return %2$s;\n"" +
             indent + ""    }\n"",
             className,
@@ -1646,18 +1645,16 @@ public class JavaGenerator implements CodeGenerator
         final boolean callsSuper,
         final String bufferImplementation)
     {
-        final String body = callsSuper ? ""        super.wrap(buffer, offset, actingVersion);\n"" : """";
+        final String body = callsSuper ? ""        super.wrap(buffer, offset);\n"" : """";
 
         return String.format(
             ""    private %3$s buffer;\n"" +
             ""    private int offset;\n"" +
-            ""    private int actingVersion;\n\n"" +
-            ""    public %1$s wrap(final %3$s buffer, final int offset, final int actingVersion)\n"" +
+            ""    public %1$s wrap(final %3$s buffer, final int offset)\n"" +
             ""    {\n"" +
             ""        this.buffer = buffer;\n"" +
             ""%4$s"" +
             ""        this.offset = offset;\n"" +
-            ""        this.actingVersion = actingVersion;\n"" +
             ""        return this;\n"" +
             ""    }\n\n"" +
             ""    public int size()\n"" +
@@ -1974,7 +1971,7 @@ public class JavaGenerator implements CodeGenerator
             indent + ""    public %s %s()\n"" +
             indent + ""    {\n"" +
             ""%s"" +
-            indent + ""        %s.wrap(buffer, offset + %d, actingVersion);\n"" +
+            indent + ""        %s.wrap(buffer, offset + %d);\n"" +
             indent + ""        return %s;\n"" +
             indent + ""    }\n"",
             bitSetName,
@@ -2011,7 +2008,7 @@ public class JavaGenerator implements CodeGenerator
             indent + ""    public %s %s()\n"" +
             indent + ""    {\n"" +
             ""%s"" +
-            indent + ""        %s.wrap(buffer, offset + %d, actingVersion);\n"" +
+            indent + ""        %s.wrap(buffer, offset + %d);\n"" +
             indent + ""        return %s;\n"" +
             indent + ""    }\n"",
             compositeName,
diff --git a/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java b/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java
index 486f7751..101ea470 100644
--- a/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java
+++ b/test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java
@@ -86,8 +86,8 @@ public class JavaGeneratorTest
         assertNotNull(clazz);
 
         final Object flyweight = clazz.newInstance();
-        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", BUFFER_CLASS, int.class, int.class);
-        method.invoke(flyweight, mockBuffer, bufferOffset, actingVersion);
+        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", BUFFER_CLASS, int.class);
+        method.invoke(flyweight, mockBuffer, bufferOffset);
 
         clazz.getDeclaredMethod(""blockLength"", int.class).invoke(flyweight, blockLength);
 
@@ -111,8 +111,8 @@ public class JavaGeneratorTest
         assertNotNull(clazz);
 
         final Object flyweight = clazz.newInstance();
-        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", READ_ONLY_BUFFER_CLASS, int.class, int.class);
-        method.invoke(flyweight, mockBuffer, bufferOffset, actingVersion);
+        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", READ_ONLY_BUFFER_CLASS, int.class);
+        method.invoke(flyweight, mockBuffer, bufferOffset);
 
         final Integer result = (Integer)clazz.getDeclaredMethod(""templateId"").invoke(flyweight);
         assertThat(result, is((int)templateId));
@@ -164,8 +164,8 @@ public class JavaGeneratorTest
         assertNotNull(clazz);
 
         final Object flyweight = clazz.newInstance();
-        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", READ_ONLY_BUFFER_CLASS, int.class, int.class);
-        method.invoke(flyweight, mockBuffer, bufferOffset, actingVersion);
+        final Method method = flyweight.getClass().getDeclaredMethod(""wrap"", READ_ONLY_BUFFER_CLASS, int.class);
+        method.invoke(flyweight, mockBuffer, bufferOffset);
 
         final Object result = get(flyweight, ""cruiseControl"");
 
@@ -175,7 +175,6 @@ public class JavaGeneratorTest
     @Test
     public void shouldGenerateCompositeEncoder() throws Exception
     {
-        final int actingVersion = 0;
         final int bufferOffset = 64;
         final int capacityFieldOffset = bufferOffset;
         final int numCylindersOffset =",remove unnecessary use of actingVersion,Remove actingVersion parameter from MessageHeaderEncoder and other generated classes.,"According to the diff, the commit message should be:

""Remove actingVersion parameter from wrap methods""

This commit message accurately reflects the changes made in the code, which involve removing the `actingVersion` parameter from various `wrap` methods throughout the codebase.","""Remove actingVersion from wrap method in SBE generated stubs and examples""

This commit removes the `actingVersion` parameter from the `wrap` method in the generated SBE (Simple Binary Encoding) stubs and examples. The `wrap` method is used to wrap a message or component around a buffer for encoding or decoding. The `actingVersion` parameter was used to specify the version of the message or component being wrapped, but it has been removed in this commit.

The changes affect the following files:

* `examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStub.java`
* `examples/java/uk/co/real_logic/sbe/examples/ExampleUsingGeneratedStubExtension.java`
* `examples/java/uk/co/real_logic/sbe/examples/OtfExample.java`
* `main/java/uk/co/real_logic/sbe/generation/java/JavaGenerator.java`
* `test/java/uk/co/real_logic/sbe/generation/java/JavaGeneratorTest.java`

In each file, the `actingVersion` parameter is removed from the `wrap` method and any references to it are also removed. For example, in `ExampleUsingGeneratedStub.java`, the following line is changed from:
```
MESSAGE_HEADER.wrap(directBuffer, bufferOffset, messageTemplateVersion)
```
to:
```
MESSAGE_HEADER.wrap(directBuffer, bufferOffset)
```
Similar changes are made in the other files.

This commit also updates the tests in `JavaGeneratorTest.java` to reflect the changes to the `wrap` method. The tests no longer pass an `actingVersion` parameter to the `wrap` method and any references to it are removed.

Overall, this commit simplifies the SBE generated stubs and examples by removing the unnecessary `actingVersion` parameter from the `wrap` method. It also ensures that the tests are updated to reflect these changes.",Remove `actingVersion` parameter from `wrap` methods in code and tests for simplicity.
"diff --git a/vespalib/src/tests/net/tls/openssl_impl/openssl_impl_test.cpp b/vespalib/src/tests/net/tls/openssl_impl/openssl_impl_test.cpp
index 4586beef910..7dacbd89503 100644
--- a/vespalib/src/tests/net/tls/openssl_impl/openssl_impl_test.cpp
+++ b/vespalib/src/tests/net/tls/openssl_impl/openssl_impl_test.cpp
@@ -583,10 +583,11 @@ TEST_F(""Exception during verification callback processing breaks handshake"", Cer
     EXPECT_FALSE(f.handshake());
 }
 
-TEST_F(""Certificate verification callback observes CN and DNS SANs"", CertFixture) {
+TEST_F(""Certificate verification callback observes CN, DNS SANs and URI SANs"", CertFixture) {
     auto ck = f.create_ca_issued_peer_cert(
             {{""rockets.wile.example.com""}},
-            {{""DNS:crash.wile.example.com""}, {""DNS:burn.wile.example.com""}});
+            {{""DNS:crash.wile.example.com""}, {""DNS:burn.wile.example.com""},
+             {""URI:foo://bar.baz/zoid""}});
 
     fprintf(stderr, ""certs:\n%s%s\n"", f.root_ca.cert->to_pem().c_str(), ck.cert->to_pem().c_str());
 
@@ -600,6 +601,8 @@ TEST_F(""Certificate verification callback observes CN and DNS SANs"", CertFixture
     ASSERT_EQUAL(2u, creds.dns_sans.size());
     EXPECT_EQUAL(""crash.wile.example.com"", creds.dns_sans[0]);
     EXPECT_EQUAL(""burn.wile.example.com"", creds.dns_sans[1]);
+    ASSERT_EQUAL(1u, server_cb->creds.uri_sans.size());
+    EXPECT_EQUAL(""foo://bar.baz/zoid"", server_cb->creds.uri_sans[0]);
 }
 
 TEST_F(""Last occurring CN is given to verification callback if multiple CNs are present"", CertFixture) {
@@ -616,7 +619,7 @@ TEST_F(""Last occurring CN is given to verification callback if multiple CNs are
 }
 
 // TODO we are likely to want IPADDR SANs at some point
-TEST_F(""Only DNS SANs are enumerated"", CertFixture) {
+TEST_F(""Only DNS and URI SANs are enumerated"", CertFixture) {
     auto ck = f.create_ca_issued_peer_cert({}, {""IP:127.0.0.1""});
 
     f.reset_client_with_cert_opts(ck, std::make_shared<PrintingCertificateCallback>());
@@ -624,6 +627,7 @@ TEST_F(""Only DNS SANs are enumerated"", CertFixture) {
     f.reset_server_with_cert_opts(ck, server_cb);
     ASSERT_TRUE(f.handshake());
     EXPECT_EQUAL(0u, server_cb->creds.dns_sans.size());
+    EXPECT_EQUAL(0u, server_cb->creds.uri_sans.size());
 }
 
 // We don't test too many combinations of peer policies here, only that
diff --git a/vespalib/src/tests/net/tls/policy_checking_certificate_verifier/policy_checking_certificate_verifier_test.cpp b/vespalib/src/tests/net/tls/policy_checking_certificate_verifier/policy_checking_certificate_verifier_test.cpp
index a9e823bf3ab..9a7e1b1b585 100644
--- a/vespalib/src/tests/net/tls/policy_checking_certificate_verifier/policy_checking_certificate_verifier_test.cpp
+++ b/vespalib/src/tests/net/tls/policy_checking_certificate_verifier/policy_checking_certificate_verifier_test.cpp
@@ -8,7 +8,7 @@ using namespace vespalib;
 using namespace vespalib::net::tls;
 
 bool glob_matches(vespalib::stringref pattern, vespalib::stringref string_to_check) {
-    auto glob = HostGlobPattern::create_from_glob(pattern);
+    auto glob = CredentialMatchPattern::create_from_glob(pattern);
     return glob->matches(string_to_check);
 }
 
@@ -61,12 +61,25 @@ TEST(""special extended regex characters are ignored"") {
 }
 
 // TODO CN + SANs
+PeerCredentials creds_with_sans(std::vector<vespalib::string> dns_sans, std::vector<vespalib::string> uri_sans) {
+    PeerCredentials creds;
+    creds.dns_sans = std::move(dns_sans);
+    creds.uri_sans = std::move(uri_sans);
+    return creds;
+}
+
 PeerCredentials creds_with_dns_sans(std::vector<vespalib::string> dns_sans) {
     PeerCredentials creds;
     creds.dns_sans = std::move(dns_sans);
     return creds;
 }
 
+PeerCredentials creds_with_uri_sans(std::vector<vespalib::string> uri_sans) {
+    PeerCredentials creds;
+    creds.uri_sans = std::move(uri_sans);
+    return creds;
+}
+
 PeerCredentials creds_with_cn(vespalib::stringref cn) {
     PeerCredentials creds;
     creds.common_name = cn;
@@ -93,7 +106,7 @@ TEST(""Non-empty policies do not allow all authenticated peers"") {
     EXPECT_FALSE(allow_not_all.allows_all_authenticated());
 }
 
-TEST(""SAN requirement without glob pattern is matched as exact string"") {
+TEST(""DNS SAN requirement without glob pattern is matched as exact string"") {
     auto authorized = authorized_peers({policy_with({required_san_dns(""hello.world"")})});
     EXPECT_TRUE(verify(authorized,  creds_with_dns_sans({{""hello.world""}})));
     EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""foo.bar""}})));
@@ -103,7 +116,7 @@ TEST(""SAN requirement without glob pattern is matched as exact string"") {
     EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""hello.world.bar""}})));
 }
 
-TEST(""SAN requirement can include glob wildcards"") {
+TEST(""DNS SAN requirement can include glob wildcards"") {
     auto authorized = authorized_peers({policy_with({required_san_dns(""*.w?rld"")})});
     EXPECT_TRUE(verify(authorized,  creds_with_dns_sans({{""hello.world""}})));
     EXPECT_TRUE(verify(authorized,  creds_with_dns_sans({{""greetings.w0rld""}})));
@@ -111,23 +124,40 @@ TEST(""SAN requirement can include glob wildcards"") {
     EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""world""}})));
 }
 
+// FIXME make this RFC 2459-compliant with subdomain matching, case insensitity for host etc
+TEST(""URI SAN requirement is matched as exact string in cheeky, pragmatic violation of RFC 2459"") {
+    auto authorized = authorized_peers({policy_with({required_san_uri(""foo://bar.baz/zoid"")})});
+    EXPECT_TRUE(verify(authorized,  creds_with_uri_sans({{""foo://bar.baz/zoid""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""foo://bar.baz/zoi""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""oo://bar.baz/zoid""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""bar://bar.baz/zoid""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""foo://bar.baz""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""foo://.baz/zoid""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_uri_sans({{""foo://BAR.baz/zoid""}})));
+}
+
 TEST(""multi-SAN policy requires all SANs to be present in certificate"") {
     auto authorized = authorized_peers({policy_with({required_san_dns(""hello.world""),
-                                                     required_san_dns(""foo.bar"")})});
-    EXPECT_TRUE(verify(authorized,  creds_with_dns_sans({{""hello.world""}, {""foo.bar""}})));
-    // Need both
-    EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""hello.world""}})));
-    EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""foo.bar""}})));
+                                                     required_san_dns(""foo.bar""),
+                                                     required_san_uri(""foo://bar/baz"")})});
+    EXPECT_TRUE(verify(authorized, creds_with_sans({{""hello.world""}, {""foo.bar""}}, {{""foo://bar/baz""}})));
+    // Need all
+    EXPECT_FALSE(verify(authorized, creds_with_sans({{""hello.world""}, {""foo.bar""}}, {})));
+    EXPECT_FALSE(verify(authorized, creds_with_sans({{""hello.world""}}, {{""foo://bar/baz""}})));
+    EXPECT_FALSE(verify(authorized, creds_with_sans({{""hello.world""}}, {})));
+    EXPECT_FALSE(verify(authorized, creds_with_sans({{""foo.bar""}}, {})));
+    EXPECT_FALSE(verify(authorized, creds_with_sans({}, {{""foo://bar/baz""}})));
     // OK with more SANs that strictly required
-    EXPECT_TRUE(verify(authorized,  creds_with_dns_sans({{""hello.world""}, {""foo.bar""}, {""baz.blorg""}})));
+    EXPECT_TRUE(verify(authorized,  creds_with_sans({{""hello.world""}, {""foo.bar""}, {""baz.blorg""}},
+                                                    {{""foo://bar/baz""}, {""hello://world/""}})));
 }
 
-TEST(""wildcard SAN in certificate is not treated as a wildcard match by policy"") {
+TEST(""wildcard DNS SAN in certificate is not treated as a wildcard match by policy"") {
     auto authorized = authorized_peers({policy_with({required_san_dns(""hello.world"")})});
     EXPECT_FALSE(verify(authorized, creds_with_dns_sans({{""*.world""}})));
 }
 
-TEST(""wildcard SAN in certificate is still matched by wildcard policy SAN"") {
+TEST(""wildcard DNS SAN in certificate is still matched by wildcard policy SAN"") {
     auto authorized = authorized_peers({policy_with({required_san_dns(""*.world"")})});
     EXPECT_TRUE(verify(authorized, creds_with_dns_sans({{""*.world""}})));
 }
@@ -141,7 +171,8 @@ struct MultiPolicyMatchFixture {
 MultiPolicyMatchFixture::MultiPolicyMatchFixture()
     : authorized(authorized_peers({policy_with({required_san_dns(""hello.world"")}),
                                    policy_with({required_san_dns(""foo.bar"")}),
-                                   policy_with({required_san_dns(""zoid.berg"")})}))
+                                   policy_with({required_san_dns(""zoid.berg"")}),
+                                   policy_with({required_san_uri(""zoid://be.rg/"")})}))
 {}
 
 MultiPolicyMatchFixture::~MultiPolicyMatchFixture() = default;
@@ -150,6 +181,7 @@ TEST_F(""peer verifies if it matches at least 1 policy of multiple"", MultiPolicyM
     EXPECT_TRUE(verify(f.authorized, creds_with_dns_sans({{""hello.world""}})));
     EXPECT_TRUE(verify(f.authorized, creds_with_dns_sans({{""foo.bar""}})));
     EXPECT_TRUE(verify(f.authorized, creds_with_dns_sans({{""zoid.berg""}})));
+    EXPECT_TRUE(verify(f.authorized, creds_with_uri_sans({{""zoid://be.rg/""}})));
 }
 
 TEST_F(""peer verifies if it matches multiple policies"", MultiPolicyMatchFixture) {
diff --git a/vespalib/src/tests/net/tls/transport_options/transport_options_reading_test.cpp b/vespalib/src/tests/net/tls/transport_options/transport_options_reading_test.cpp
index 00459a4e69c..a2bced3f7b4 100644
--- a/vespalib/src/tests/net/tls/transport_options/transport_options_reading_test.cpp
+++ b/vespalib/src/tests/net/tls/transport_options/transport_options_reading_test.cpp
@@ -111,10 +111,12 @@ TEST(""can parse single peer policy with multiple requirements"") {
     const char* json = R""({
       ""required-credentials"":[
          {""field"": ""SAN_DNS"", ""must-match"": ""hello.world""},
+         {""field"": ""SAN_URI"", ""must-match"": ""foo://bar/baz""},
          {""field"": ""CN"", ""must-match"": ""goodbye.moon""}
       ]
     })"";
     EXPECT_EQUAL(authorized_peers({policy_with({required_san_dns(""hello.world""),
+                                                required_san_uri(""foo://bar/baz""),
                                                 required_cn(""goodbye.moon"")})}),
                  parse_policies(json).authorized_peers());
 }
diff --git a/vespalib/src/vespa/vespalib/net/tls/impl/openssl_tls_context_impl.cpp b/vespalib/src/vespa/vespalib/net/tls/impl/openssl_tls_context_impl.cpp
index e66baf87999..d4d2f394782 100644
--- a/vespalib/src/vespa/vespalib/net/tls/impl/openssl_tls_context_impl.cpp
+++ b/vespalib/src/vespa/vespalib/net/tls/impl/openssl_tls_context_impl.cpp
@@ -374,6 +374,24 @@ struct GeneralNamesDeleter {
     }
 };
 
+// Returns empty string if unsupported type or bad content.
+vespalib::string get_ia5_string(const ASN1_IA5STRING* ia5_str) {
+    if ((ia5_str->type == V_ASN1_IA5STRING) && (ia5_str->data != nullptr) && (ia5_str->length > 0)) {
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+        const char* data  = reinterpret_cast<const char*>(::ASN1_STRING_get0_data(ia5_str));
+#else
+        const char* data  = reinterpret_cast<const char*>(::ASN1_STRING_data(ia5_str));
+#endif
+        const auto length = static_cast<size_t>(::ASN1_STRING_length(ia5_str));
+        if (has_embedded_nulls(data, length)) {
+            LOG(warning, ""Got X509 peer certificate with embedded nulls in SAN field"");
+            return {};
+        }
+        return {data, length};
+    }
+    return {};
+}
+
 using GeneralNamesPtr = std::unique_ptr<::GENERAL_NAMES, GeneralNamesDeleter>;
 
 bool fill_certificate_subject_alternate_names(::X509* cert, PeerCredentials& creds) {
@@ -383,21 +401,19 @@ bool fill_certificate_subject_alternate_names(::X509* cert, PeerCredentials& cre
         for (int i = 0; i < sk_GENERAL_NAME_num(san_names.get()); ++i) {
             auto* value = sk_GENERAL_NAME_value(san_names.get(), i);
             if (value->type == GEN_DNS) {
-                auto* dns_name = value->d.dNSName; // const or non-const depending on version...
-                if ((dns_name->type == V_ASN1_IA5STRING) && (dns_name->data != nullptr) && (dns_name->length > 0)) {
-#if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
-                    const char* data  = reinterpret_cast<const char*>(::ASN1_STRING_get0_data(dns_name));
-#else
-                    const char* data  = reinterpret_cast<const char*>(::ASN1_STRING_data(dns_name));
-#endif
-                    const auto length = static_cast<size_t>(::ASN1_STRING_length(dns_name));
-                    if (has_embedded_nulls(data, length)) {
-                        LOG(warning, ""Got X509 peer certificate with embedded nulls in SAN field"");
-                        return false;
-                    }
-                    creds.dns_sans.emplace_back(data, length);
+                auto content = get_ia5_string(value->d.dNSName); // arg is const or non-const depending on version...
+                if (content.empty()) {
+                    return false; // We assume there's something fishy with certs containing empty SANs
+                }
+                creds.dns_sans.emplace_back(std::move(content));
+            } else if (value->type == GEN_URI) {
+                auto content = get_ia5_string(value->d.uniformResourceIdentifier);
+                if (content.empty()) {
+                    return false;
                 }
-            } // TODO support GEN_IPADD SAN?
+                creds.uri_sans.emplace_back(std::move(content));
+            }
+            // TODO support GEN_IPADD SAN?
         }
     }
     return true;
diff --git a/vespalib/src/vespa/vespalib/net/tls/peer_credentials.h b/vespalib/src/vespa/vespalib/net/tls/peer_credentials.h
index 93e5554a86e..fb43796052e 100644
--- a/vespalib/src/vespa/vespalib/net/tls/peer_credentials.h
+++ b/vespalib/src/vespa/vespalib/net/tls/peer_credentials.h
@@ -14,6 +14,8 @@ struct PeerCredentials {
     vespalib::string common_name;
     // 0-n DNS SAN entries. Note: ""DNS:"" prefix is not present in strings.
     std::vector<vespalib::string> dns_sans;
+    // 0-n DNS URI entries. Note: ""URI:"" prefix is not present in strings.
+    std::vector<vespalib::string> uri_sans;
 
     PeerCredentials();
     ~PeerCredentials();
diff --git a/vespalib/src/vespa/vespalib/net/tls/peer_policies.cpp b/vespalib/src/vespa/vespalib/net/tls/peer_policies.cpp
index 27a11b3f0f1..3a136b8147d 100644
--- a/vespalib/src/vespa/vespalib/net/tls/peer_policies.cpp
+++ b/vespalib/src/vespa/vespalib/net/tls/peer_policies.cpp
@@ -50,7 +50,7 @@ std::string dot_separated_glob_to_regex(vespalib::stringref glob) {
     return ret;
 }
 
-class RegexHostMatchPattern : public HostGlobPattern {
+class RegexHostMatchPattern : public CredentialMatchPattern {
     Regex _pattern_as_regex;
 public:
     explicit RegexHostMatchPattern(vespalib::stringref glob_pattern)
@@ -64,16 +64,36 @@ public:
     }
 };
 
+class ExactMatchPattern : public CredentialMatchPattern {
+    vespalib::string _must_match_exactly;
+public:
+    explicit ExactMatchPattern(vespalib::stringref str_to_match) noexcept // vespalib::string ctors marked noexcept
+        : _must_match_exactly(str_to_match)
+    {
+    }
+    ~ExactMatchPattern() override = default;
+
+    [[nodiscard]] bool matches(vespalib::stringref str) const override {
+        return (str == _must_match_exactly);
+    }
+};
+
 } // anon ns
 
-std::shared_ptr<const HostGlobPattern> HostGlobPattern::create_from_glob(vespalib::stringref glob_pattern) {
+std::shared_ptr<const CredentialMatchPattern> CredentialMatchPattern::create_from_glob(vespalib::stringref glob_pattern) {
     return std::make_shared<const RegexHostMatchPattern>(glob_pattern);
 }
 
+std::shared_ptr<const CredentialMatchPattern> CredentialMatchPattern::create_exact_match(vespalib::stringref str) {
+    return std::make_shared<const ExactMatchPattern>(str);
+}
+
 RequiredPeerCredential::RequiredPeerCredential(Field field, vespalib::string must_match_pattern)
     : _field(field),
       _original_pattern(std::move(must_match_pattern)),
-      _match_pattern(HostGlobPattern::create_from_glob(_original_pattern))
+      // FIXME it's not RFC 2459-compliant to use exact-matching for URIs, but that's all we currently need.
+      _match_pattern(field == Field::SAN_URI ? CredentialMatchPattern::create_exact_match(_original_pattern)
+                                             : CredentialMatchPattern::create_from_glob(_original_pattern))
 {
 }
 
diff --git a/vespalib/src/vespa/vespalib/net/tls/peer_policies.h b/vespalib/src/vespa/vespalib/net/tls/peer_policies.h
index 9d34b62415f..aeb8dd17f64 100644
--- a/vespalib/src/vespa/vespalib/net/tls/peer_policies.h
+++ b/vespalib/src/vespa/vespalib/net/tls/peer_policies.h
@@ -8,22 +8,23 @@
 
 namespace vespalib::net::tls {
 
-struct HostGlobPattern {
-    virtual ~HostGlobPattern() = default;
+struct CredentialMatchPattern {
+    virtual ~CredentialMatchPattern() = default;
     [[nodiscard]] virtual bool matches(vespalib::stringref str) const = 0;
 
-    static std::shared_ptr<const HostGlobPattern> create_from_glob(vespalib::stringref pattern);
+    static std::shared_ptr<const CredentialMatchPattern> create_from_glob(vespalib::stringref pattern);
+    static std::shared_ptr<const CredentialMatchPattern> create_exact_match(vespalib::stringref pattern);
 };
 
 class RequiredPeerCredential {
 public:
     enum class Field {
-        CN, SAN_DNS
+        CN, SAN_DNS, SAN_URI
     };
 private:
     Field _field = Field::SAN_DNS;
     vespalib::string _original_pattern;
-    std::shared_ptr<const HostGlobPattern> _match_pattern;
+    std::shared_ptr<const CredentialMatchPattern> _match_pattern;
 public:
     RequiredPeerCredential() = default;
     RequiredPeerCredential(Field field, vespalib::string must_match_pattern);
diff --git a/vespalib/src/vespa/vespalib/net/tls/policy_checking_certificate_verifier.cpp b/vespalib/src/vespa/vespalib/net/tls/policy_checking_certificate_verifier.cpp
index b8398746d38..0a06a36c074 100644
--- a/vespalib/src/vespa/vespalib/net/tls/policy_checking_certificate_verifier.cpp
+++ b/vespalib/src/vespa/vespalib/net/tls/policy_checking_certificate_verifier.cpp
@@ -6,7 +6,7 @@ namespace vespalib::net::tls {
 
 namespace {
 
-bool matches_single_san_requirement(const PeerCredentials& peer_creds, const RequiredPeerCredential& requirement) {
+bool matches_single_san_dns_requirement(const PeerCredentials& peer_creds, const RequiredPeerCredential& requirement) {
     for (const auto& provided_cred : peer_creds.dns_sans) {
         if (requirement.matches(provided_cred)) {
             return true;
@@ -15,6 +15,15 @@ bool matches_single_san_requirement(const PeerCredentials& peer_creds, const Req
     return false;
 }
 
+bool matches_single_san_uri_requirement(const PeerCredentials& peer_creds, const RequiredPeerCredential& requirement) {
+    for (const auto& provided_cred : peer_creds.uri_sans) {
+        if (requirement.matches(provided_cred)) {
+            return true;
+        }
+    }
+    return false;
+}
+
 bool matches_cn_requirement(const PeerCredentials& peer_creds, const RequiredPeerCredential& requirement) {
     return requirement.matches(peer_creds.common_name);
 }
@@ -23,7 +32,12 @@ bool matches_all_policy_requirements(const PeerCredentials& peer_creds, const Pe
     for (const auto& required_cred : policy.required_peer_credentials()) {
         switch (required_cred.field()) {
         case RequiredPeerCredential::Field::SAN_DNS:
-            if (!matches_single_san_requirement(peer_creds, required_cred)) {
+            if (!matches_single_san_dns_requirement(peer_creds, required_cred)) {
+                return false;
+            }
+            continue;
+        case RequiredPeerCredential::Field::SAN_URI:
+            if (!matches_single_san_uri_requirement(peer_creds, required_cred)) {
                 return false;
             }
             continue;
diff --git a/vespalib/src/vespa/vespalib/net/tls/transport_security_options_reading.cpp b/vespalib/src/vespa/vespalib/net/tls/transport_security_options_reading.cpp
index 80caa15e8b2..2c10b3838af 100644
--- a/vespalib/src/vespa/vespalib/net/tls/transport_security_options_reading.cpp
+++ b/vespalib/src/vespa/vespalib/net/tls/transport_security_options_reading.cpp
@@ -57,6 +57,8 @@ RequiredPeerCredential parse_peer_credential(const Inspector& req_entry) {
         field = RequiredPeerCredential::Field::CN;
     } else if (field_string == ""SAN_DNS"") {
         field = RequiredPeerCredential::Field::SAN_DNS;
+    } else if (field_string == ""SAN_URI"") {
+        field = RequiredPeerCredential::Field::SAN_URI;
     } else {
         throw IllegalArgumentException(make_string(
                 ""Unsupported credential field type: '%s'. Supported are: CN, SAN_DNS"",
diff --git a/vespalib/src/vespa/vespalib/test/peer_policy_utils.cpp b/vespalib/src/vespa/vespalib/test/peer_policy_utils.cpp
index 981ebd0c18d..0520db6a93c 100644
--- a/vespalib/src/vespa/vespalib/test/peer_policy_utils.cpp
+++ b/vespalib/src/vespa/vespalib/test/peer_policy_utils.cpp
@@ -12,6 +12,10 @@ RequiredPeerCredential required_san_dns(vespalib::stringref pattern) {
     return {RequiredPeerCredential::Field::SAN_DNS, pattern};
 }
 
+RequiredPeerCredential required_san_uri(vespalib::stringref pattern) {
+    return {RequiredPeerCredential::Field::SAN_URI, pattern};
+}
+
 PeerPolicy policy_with(std::vector<RequiredPeerCredential> creds) {
     return PeerPolicy(std::move(creds));
 }
diff --git a/vespalib/src/vespa/vespalib/test/peer_policy_utils.h b/vespalib/src/vespa/vespalib/test/peer_policy_utils.h
index 1a720330e7d..4ff0f828b0d 100644
--- a/vespalib/src/vespa/vespalib/test/peer_policy_utils.h
+++ b/vespalib/src/vespa/vespalib/test/peer_policy_utils.h
@@ -7,6 +7,7 @@ namespace vespalib::net::tls {
 
 RequiredPeerCredential required_cn(vespalib::stringref pattern);
 RequiredPeerCredential required_san_dns(vespalib::stringref pattern);
+RequiredPeerCredential required_san_uri(vespalib::stringref pattern);
 PeerPolicy policy_with(std::vector<RequiredPeerCredential> creds);
 AuthorizedPeers authorized_peers(std::vector<PeerPolicy> peer_policies);
 ",Add basic exact matching support for X509 URI SANs .,"""Added support for URI SANs in TLS peer verification""","""Added support for URI SANs in peer credentials and policies""","The commit message could be: ""Add support for URI SANs in TLS certificate verification""

Explanation: The changes in the code suggest that the TLS certificate verification process has been modified to include support for URI SANs (Subject Alternative Names) in addition to the existing support for DNS SANs. The changes affect multiple files related to TLS implementation, certificate verification, and policy checking. The changes also include updates to the tests to ensure that the new functionality works as expected.","Add support for URI SANs in TLS certificate verification, including test updates and credential matching logic enhancements."
"diff --git a/core/src/main/java/de/jetsli/graph/geohash/SpatialKeyHashtable.java b/core/src/main/java/de/jetsli/graph/geohash/SpatialKeyHashtable.java
index da91c4d2d..c7a94f3d5 100644
--- a/core/src/main/java/de/jetsli/graph/geohash/SpatialKeyHashtable.java
+++ b/core/src/main/java/de/jetsli/graph/geohash/SpatialKeyHashtable.java
@@ -173,7 +173,7 @@ public class SpatialKeyHashtable implements QuadTree<Long> {
 
     // REQUIREMENTS:
     // * memory efficient spatial storage, even for smaller collections of data
-    // * relative simple implementation (""safe bytes not bits""), use lots of methods even if its slower
+    // * relative simple implementation (""safe bytes not bits""), use maintainable amount of methods even if its slower
     // * moving bucket-index-window to configure between hashtable and quadtree 
     //   -> avoid configuration, auto-determine all stuff like necessary window, maxBuckets, ...
     // * implement neighbor search
@@ -593,109 +593,99 @@ public class SpatialKeyHashtable implements QuadTree<Long> {
         if (storedKey == key || key == Long.MIN_VALUE) {
             CoordTrig<Long> coord = new CoordTrigLongEntry();
             algo.decode(storedKey, coord);
-
             if (pointer + bytesPerKeyRest + 4 > getMemoryUsageInBytes(0))
-                throw new IllegalStateException(""pointer "" + pointer + "" "" + getMemoryUsageInBytes(0) + "" "" + bytesPerKeyRest);
+                throw new IllegalStateException(""pointer "" + pointer + "" ""
+                        + getMemoryUsageInBytes(0) + "" "" + bytesPerKeyRest);
 
             coord.setValue(getValue(pointer + bytesPerKeyRest));
             res.add(coord);
             return true;
         }
         return false;
-
     }
 
-    private void getNeighbours(BBox nodeBB, Shape searchRect, long bucketIndexBit, LeafWorker worker) {
-        if (bucketIndexBit < spatialKeyBits) {
-            // TODO where to get current key
-            worker.doWork(123, 321);
+    private void getNeighbours(BBox nodeBB, Shape searchRect, int depth, long key, LeafWorker worker) {
+        if (depth >= bucketIndexBits * 2) {
+            // getNodes(key, searchRect, worker);
             return;
         }
 
         double lat12 = (nodeBB.maxLat + nodeBB.minLat) / 2;
         double lon12 = (nodeBB.minLon + nodeBB.maxLon) / 2;
-
-        // top-left - see SpatialKeyAlgo that latitude goes from bottom to top and is 1 if on top
+        depth += 2;
+        key <<= 2;
+        // see SpatialKeyAlgo that latitude goes from bottom to top and is 1 if on top
         // 10 11
-        // 00 01
-        // TODO node10?
-        long node10 = bucketIndexBit >>> 1;
+        // 00 01    
+        // top-left    
         BBox nodeRect10 = new BBox(nodeBB.minLon, lon12, lat12, nodeBB.maxLat);
         if (searchRect.intersect(nodeRect10))
-            getNeighbours(nodeRect10, searchRect, node10, worker);
+            getNeighbours(nodeRect10, searchRect, depth, key | 0x2L, worker);
 
-        // top-right
-        // TODO 
-        long node11 = bucketIndexBit >>> 1;
+        // top-right        
         BBox nodeRect11 = new BBox(lon12, nodeBB.maxLon, lat12, nodeBB.maxLat);
         if (searchRect.intersect(nodeRect11))
-            getNeighbours(nodeRect11, searchRect, node11, worker);
+            getNeighbours(nodeRect11, searchRect, depth, key | 0x3L, worker);
 
         // bottom-left
-        // TODO 
-        long node00 = bucketIndexBit >>> 1;
         BBox nodeRect00 = new BBox(nodeBB.minLon, lon12, nodeBB.minLat, lat12);
         if (searchRect.intersect(nodeRect00))
-            getNeighbours(nodeRect00, searchRect, node00, worker);
+            getNeighbours(nodeRect00, searchRect, depth, key, worker);
 
         // bottom-right
-        // TODO 
-        long node01 = bucketIndexBit >>> 1;
         BBox nodeRect01 = new BBox(lon12, nodeBB.maxLon, nodeBB.minLat, lat12);
         if (searchRect.intersect(nodeRect01))
-            getNeighbours(nodeRect01, searchRect, node01, worker);
+            getNeighbours(nodeRect01, searchRect, depth, key | 0x1L, worker);
+    }
+
+    interface LeafWorker {
+
+        void doWork(long key, long value);
     }
 
     @Override
-    public Collection<CoordTrig<Long>> getNodes(final double lat, final double lon,
-            final double distanceInKm) {
+    public Collection<CoordTrig<Long>> getNodes(final Shape boundingBox) {
         final List<CoordTrig<Long>> result = new ArrayList<CoordTrig<Long>>();
-        final Circle c = new Circle(lat, lon, distanceInKm);
-        LeafWorker distanceAcceptor = new LeafWorker() {
+        LeafWorker worker = new LeafWorker() {
 
             @Override public void doWork(long key, long value) {
                 CoordTrigLongEntry coord = new CoordTrigLongEntry();
                 algo.decode(key, coord);
-                if (c.contains(coord.lat, coord.lon))
+                if (boundingBox.contains(coord.lat, coord.lon)) {
                     result.add(coord);
-                coord.setValue(value);
+                    coord.setValue(value);
+                    result.add(coord);
+                }
             }
         };
-
-        // TODO maxBIT
-        getNeighbours(BBox.createEarthMax(), c, 123, distanceAcceptor);
+        getNeighbours(BBox.createEarthMax(), boundingBox, 0, 0L, worker);
         return result;
     }
 
     @Override
-    public Collection<CoordTrig<Long>> getNodes(Shape boundingBox) {
-        // TODO
-        return Collections.EMPTY_LIST;
-    }
-
-    interface LeafWorker {
-
-        void doWork(long key, long value);
+    public Collection<CoordTrig<Long>> getNodes(final double lat, final double lon,
+            final double distanceInKm) {
+        return getNodes(new Circle(lat, lon, distanceInKm));
     }
 
     @Override
     public Collection<CoordTrig<Long>> getNodesFromValue(final double lat, final double lon,
-            final Long value) {
-        // TODO no spatialKey necessary?
-        // final long spatialKey = algo.encode(lat, lon);
+            final Long v) {
         final List<CoordTrig<Long>> nodes = new ArrayList<CoordTrig<Long>>(1);
         LeafWorker worker = new LeafWorker() {
 
             @Override public void doWork(long key, long value) {
-                // TODO !
-                getNodes(nodes, 0, key);
+                if (v == value) {
+                    CoordTrigLongEntry e = new CoordTrigLongEntry();
+                    algo.decode(key, e);
+                    e.setValue(value);
+                    nodes.add(e);
+                }
             }
         };
-        // TODO maxBIT
-        long maxBit = 1 << spatialKeyBits;
        ",worked out getNeighbours,"""Refactor SpatialKeyHashtable to improve neighbor search and getNodes methods""

This commit message is short and to the point, indicating that the changes made were related to refactoring the SpatialKeyHashtable class to improve its neighbor search and getNodes methods.","Refactor SpatialKeyHashtable to improve maintainability and remove TODOs. 

This commit message is concise and accurately describes the changes made in the commit. It highlights the main goals of the refactoring, which are to improve maintainability and remove TODOs.","""Refactor SpatialKeyHashtable to improve maintainability and fix illegal state exception""

The changes made in this commit include:

* Simplifying the requirements comment block for better readability.
* Fixing an IllegalStateException by adding a more descriptive error message.
* Refactoring the `getNeighbours` method to improve maintainability and readability. This includes:
	+ Changing the method signature to include `depth` and `key` parameters.
	+ Removing unnecessary comments and TODOs.
	+ Combining the creation of `BBox` objects and the intersect check into one line.
	+ Removing unnecessary bitwise operations.
* Adding a `LeafWorker` interface to encapsulate the logic for processing leaf nodes.
* Removing unnecessary code and comments from the `getNodes` method.
* Updating the `getNodes` method to use the new `getNeighbours` method signature.
* Removing unnecessary imports.

Overall, these changes aim to improve the maintainability and readability of the `SpatialKeyHashtable` class while fixing a potential bug.",Refactor `getNeighbours` implementation to remove unnecessary bit shifts and handle depth and key within params.
"diff --git a/postinstall_project/projectWithoutFaceDetection.pbxproj b/postinstall_project/projectWithoutFaceDetection.pbxproj
index 8aba166..01373fa 100644
--- a/postinstall_project/projectWithoutFaceDetection.pbxproj
+++ b/postinstall_project/projectWithoutFaceDetection.pbxproj
@@ -35,7 +35,7 @@
 /* Begin PBXFileReference section */
 		0314E39B1B661A0C0092D183 /* CameraFocusSquare.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = CameraFocusSquare.h; sourceTree = ""<group>""; };
 		0314E39C1B661A460092D183 /* CameraFocusSquare.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = CameraFocusSquare.m; sourceTree = ""<group>""; };
-		4107012F1ACB723B00C6AA39 /* libRCTCamera.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libRCTCamera.a; sourceTree = BUILT_PRODUCTS_DIR; };
+		4107012F1ACB723B00C6AA39 /* libRNCamera.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libRNCamera.a; sourceTree = BUILT_PRODUCTS_DIR; };
 		410701471ACB732B00C6AA39 /* RCTCamera.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RCTCamera.h; sourceTree = ""<group>""; };
 		410701481ACB732B00C6AA39 /* RCTCamera.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = RCTCamera.m; sourceTree = ""<group>""; };
 		410701491ACB732B00C6AA39 /* RCTCameraManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RCTCameraManager.h; sourceTree = ""<group>""; };
@@ -80,7 +80,7 @@
 		410701301ACB723B00C6AA39 /* Products */ = {
 			isa = PBXGroup;
 			children = (
-				4107012F1ACB723B00C6AA39 /* libRCTCamera.a */,
+				4107012F1ACB723B00C6AA39 /* libRNCamera.a */,
 			);
 			name = Products;
 			sourceTree = ""<group>"";
@@ -123,9 +123,9 @@
 /* End PBXGroup section */
 
 /* Begin PBXNativeTarget section */
-		4107012E1ACB723B00C6AA39 /* RCTCamera */ = {
+		4107012E1ACB723B00C6AA39 /* RNCamera */ = {
 			isa = PBXNativeTarget;
-			buildConfigurationList = 410701411ACB723B00C6AA39 /* Build configuration list for PBXNativeTarget ""RCTCamera"" */;
+			buildConfigurationList = 410701411ACB723B00C6AA39 /* Build configuration list for PBXNativeTarget ""RNCamera"" */;
 			buildPhases = (
 				4107012B1ACB723B00C6AA39 /* Sources */,
 				4107012C1ACB723B00C6AA39 /* Frameworks */,
@@ -135,9 +135,9 @@
 			);
 			dependencies = (
 			);
-			name = RCTCamera;
+			name = RNCamera;
 			productName = RCTCamera;
-			productReference = 4107012F1ACB723B00C6AA39 /* libRCTCamera.a */;
+			productReference = 4107012F1ACB723B00C6AA39 /* libRNCamera.a */;
 			productType = ""com.apple.product-type.library.static"";
 		};
 /* End PBXNativeTarget section */
@@ -153,7 +153,7 @@
 					};
 				};
 			};
-			buildConfigurationList = 410701281ACB719800C6AA39 /* Build configuration list for PBXProject ""RCTCamera"" */;
+			buildConfigurationList = 410701281ACB719800C6AA39 /* Build configuration list for PBXProject ""RNCamera"" */;
 			compatibilityVersion = ""Xcode 3.2"";
 			developmentRegion = English;
 			hasScannedForEncodings = 0;
@@ -165,7 +165,7 @@
 			projectDirPath = """";
 			projectRoot = """";
 			targets = (
-				4107012E1ACB723B00C6AA39 /* RCTCamera */,
+				4107012E1ACB723B00C6AA39 /* RNCamera */,
 			);
 		};
 /* End PBXProject section */
@@ -299,7 +299,7 @@
 /* End XCBuildConfiguration section */
 
 /* Begin XCConfigurationList section */
-		410701281ACB719800C6AA39 /* Build configuration list for PBXProject ""RCTCamera"" */ = {
+		410701281ACB719800C6AA39 /* Build configuration list for PBXProject ""RNCamera"" */ = {
 			isa = XCConfigurationList;
 			buildConfigurations = (
 				410701291ACB719800C6AA39 /* Debug */,
@@ -308,7 +308,7 @@
 			defaultConfigurationIsVisible = 0;
 			defaultConfigurationName = Release;
 		};
-		410701411ACB723B00C6AA39 /* Build configuration list for PBXNativeTarget ""RCTCamera"" */ = {
+		410701411ACB723B00C6AA39 /* Build configuration list for PBXNativeTarget ""RNCamera"" */ = {
 			isa = XCConfigurationList;
 			buildConfigurations = (
 				410701421ACB723B00C6AA39 /* Debug */,",Modify project without face detection for new RNCamera project,"""Rename RCTCamera to RNCamera in project configuration""","""Renamed RCTCamera to RNCamera in project settings""","""Renamed RCTCamera to RNCamera in projectWithoutFaceDetection.pbxproj""

Explanation: The changes made in this commit involve renaming the library, target, and project names from ""RCTCamera"" to ""RNCamera"" in the projectWithoutFaceDetection.pbxproj file. This includes updating references to the library, target, and project names, as well as updating the product name and product reference.",Renamed RCTCamera to RNCamera in project files for consistency with updated library naming conventions.
"diff --git a/docker/docker-sync-compose.centos-6.18.yaml b/docker/docker-sync-compose.centos-6.18.yaml
new file mode 100644
index 0000000000..7f3f2aa977
--- /dev/null
+++ b/docker/docker-sync-compose.centos-6.18.yaml
@@ -0,0 +1,34 @@
+version: ""3""
+
+services:
+
+  runtime-setup:
+    image: netty:centos-6-1.8
+    build:
+      args:
+        centos_version : ""6""
+        java_version : ""1.8.202""
+
+  test:
+    image: netty:centos-6-1.8
+    volumes:
+      - code-sync:/code:nocopy
+
+  test-leak:
+    image: netty:centos-6-1.8
+    volumes:
+      - code-sync:/code:nocopy
+
+  test-boringssl-static:
+    image: netty:centos-6-1.8
+    volumes:
+      - code-sync:/code:nocopy
+
+  shell:
+    image: netty:centos-6-1.8
+    volumes:
+      - code-sync:/code:nocopy
+
+volumes:
+  code-sync:
+    external: true
diff --git a/docker/docker-sync.centos-6.18.yaml b/docker/docker-sync.centos-6.18.yaml
new file mode 100644
index 0000000000..98a3c121ef
--- /dev/null
+++ b/docker/docker-sync.centos-6.18.yaml
@@ -0,0 +1,8 @@
+version: ""2""
+
+compose-dev-file-path: 'docker-sync-compose.centos-6.18.yaml'
+
+syncs:
+  #IMPORTANT: ensure this name is unique and does not match your other application container name
+  code-sync: #tip: add -sync and you keep consistent names as a convention
+    src: '../'",Add docker - sync config to step up docker - usage on macOS .,"""Added CentOS 6.18 Docker Compose files for Netty""","""Added Docker Compose configuration for CentOS 6.18 and updated Docker Sync configuration to reference the new Compose file.""","""Added docker-sync-compose and docker-sync files for CentOS 6.18""

This commit adds two new files:

1. docker-sync-compose.centos-6.18.yaml: This file defines the services and volumes for Docker synchronization with CentOS 6.18. It includes a runtime setup service, test services, and a shell service, all using the netty image with CentOS 6 and Java 1.8. The code is mounted as a volume in all services.

2. docker-sync.centos-6.18.yaml: This file specifies the Docker synchronization settings. It references the docker-sync-compose file and sets up a code synchronization service.",Add docker-sync setup for CentOS 6.18 with multiple test services and external volume configuration.
"diff --git a/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/TileDownloader.java b/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/TileDownloader.java
index 8b74d3394..d79e1d492 100644
--- a/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/TileDownloader.java
+++ b/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/TileDownloader.java
@@ -1,6 +1,7 @@
 package org.osmdroid.tileprovider.modules;
 
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -21,11 +22,18 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
+import java.net.InetAddress;
+import java.net.Socket;
 import java.net.URL;
 import java.net.UnknownHostException;
+import java.util.Arrays;
 import java.util.Date;
 import java.util.Map;
 
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
+
 /**
  * @since 6.0.2
  * @author Fabrice Fontaine
@@ -44,7 +52,7 @@ public class TileDownloader {
     public Drawable downloadTile(final long pMapTileIndex, final int redirectCount, final String targetUrl,
                                  final IFilesystemCache pFilesystemCache, final OnlineTileSourceBase pTileSource) throws CantContinueException {
 
-        //prevent infinite looping of redirects, rare but very possible for misconfigured servers
+        // prevent infinite looping of redirects, rare but very possible for misconfigured servers
         if (redirectCount>3) {
             return null;
         }
@@ -76,7 +84,16 @@ public class TileDownloader {
                 return null;
             }
 
-            //TODO in the future, it may be necessary to allow app's using this library to override the SSL socket factory. It would here somewhere
+            // Try to enable TLSv1.2 and/or disable SSLv3 on older devices
+            // see:
+            // https://stackoverflow.com/questions/33567596/android-https-web-service-communication-ssl-tls-1-2/33567745#33567745
+            // https://stackoverflow.com/questions/26649389/how-to-disable-sslv3-in-android-for-httpsurlconnection#29946540
+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT_WATCH) {
+                SSLSocketFactory socketFactory = new CompatibilitySocketFactory(
+                        HttpsURLConnection.getDefaultSSLSocketFactory());
+                HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory);
+            }
+
             if (Configuration.getInstance().getHttpProxy() != null) {
                 c = (HttpURLConnection) new URL(tileURLString).openConnection(Configuration.getInstance().getHttpProxy());
             } else {
@@ -89,12 +106,8 @@ public class TileDownloader {
             }
             c.connect();
 
-
             // Check to see if we got success
-
             if (c.getResponseCode() != 200) {
-
-
                 switch (c.getResponseCode()) {
                     case 301:
                     case 302:
@@ -133,10 +146,8 @@ public class TileDownloader {
                         return null;
                     }
                 }
-
-
-
             }
+
             String mime = c.getHeaderField(""Content-Type"");
             if (Configuration.getInstance().isDebugMapTileDownloader()) {
                 Log.d(IMapView.LOGTAG, tileURLString + "" success, mime is "" + mime );
@@ -159,8 +170,7 @@ public class TileDownloader {
             byteStream = new ByteArrayInputStream(data);
 
             // Save the data to the cache
-            //this is the only point in which we insert tiles to the db or local file system.
-
+            // this is the only point in which we insert tiles to the db or local file system.
             if (pFilesystemCache != null) {
                 pFilesystemCache.saveFile(pTileSource, pMapTileIndex, byteStream, expirationTime);
                 byteStream.reset();
@@ -261,4 +271,101 @@ public class TileDownloader {
 
         return pNow + OpenStreetMapTileProviderConstants.DEFAULT_MAXIMUM_CACHED_FILE_AGE + extension;
     }
+
+    /**
+     * Proxy for {@link SSLSocketFactory} that tries to enable TLSv1.2 and/or disable SSLv3 on
+     * older devices to improve security and compatibility with modern https server configurations
+     *
+     * @since 6.1.7
+     */
+    private static class CompatibilitySocketFactory extends SSLSocketFactory {
+        SSLSocketFactory sslSocketFactory;
+
+        CompatibilitySocketFactory(SSLSocketFactory sslSocketFactory) {
+            super();
+            this.sslSocketFactory = sslSocketFactory;
+        }
+
+        @Override
+        public String[] getDefaultCipherSuites() {
+            return sslSocketFactory.getDefaultCipherSuites();
+        }
+
+        @Override
+        public String[] getSupportedCipherSuites() {
+            return sslSocketFactory.getSupportedCipherSuites();
+        }
+
+        @Override
+        public Socket createSocket() throws IOException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket();
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        @Override
+        public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(s, host, port, autoClose);
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        @Override
+        public Socket createSocket(String host, int port) throws IOException, UnknownHostException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(host, port);
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        @Override
+        public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException,
+                UnknownHostException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(host, port, localHost, localPort);
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        @Override
+        public Socket createSocket(InetAddress host, int port) throws IOException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(host, port);
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        @Override
+        public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort)
+                throws IOException {
+            SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(address, port, localAddress, localPort);
+            return upgradeTlsAndRemoveSsl(socket);
+        }
+
+        private SSLSocket upgradeTlsAndRemoveSsl(SSLSocket socket) {
+            String[] supportedProtocols = socket.getSupportedProtocols();
+            String[] enabledProtocols = socket.getEnabledProtocols();
+            String[] newEnabledProtocols;
+
+          ",add proxy for SSLSocketFactory to improve compatibility .,"""Improve HTTPS connection security and compatibility by enabling TLSv1.2 and disabling SSLv3 on older devices""","""Improve HTTPS connection security and compatibility on older devices""

This commit message accurately summarizes the changes made in the commit, which include enabling TLSv1.2 and disabling SSLv3 on older devices to improve security and compatibility with modern HTTPS server configurations.","""Update TileDownloader to enable TLSv1.2 and disable SSLv3 on older devices""

The changes in this commit are as follows:

1. Imported additional classes: `InetAddress`, `Socket`, `SSLSocket`, `SSLSocketFactory`
2. Added a new class `CompatibilitySocketFactory` which extends `SSLSocketFactory`. This class is used to enable TLSv1.2 and disable SSLv3 on older devices.
3. Modified the `downloadTile` method to use the `CompatibilitySocketFactory` for `HttpsURLConnection` if the Android version is lower than `KITKAT_WATCH`.
4. The `CompatibilitySocketFactory` class overrides several methods from `SSLSocketFactory` to create and return a new `SSLSocket` with upgraded TLS and removed SSL.

The purpose of these changes is to improve security and compatibility with modern HTTPS server configurations on older Android devices. This is done by trying to enable TLSv1.2 and/or disable SSLv3, which are more secure protocols.","""Add TLSv1.2 support and disable SSLv3 for older devices in TileDownloader for improved security."""
"diff --git a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java
index 1d21163aa..3c0cb0546 100644
--- a/src/main/java/io/vertx/core/http/impl/ConnectionManager.java
+++ b/src/main/java/io/vertx/core/http/impl/ConnectionManager.java
@@ -21,9 +21,6 @@ import io.vertx.core.spi.metrics.HttpClientMetrics;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.Consumer;
-import java.util.function.Function;
 
 /**
  * The connection manager associates remote hosts with pools, it also tracks all connections so they can be closed
@@ -137,18 +134,9 @@ class ConnectionManager {
       } else {
         metric = null;
       }
+
       if (endpoint.pool.getConnection(client.getVertx().getOrCreateContext(), ar -> {
         if (ar.succeeded()) {
-          /*
-        @Override
-        public void initConnection(ContextInternal ctx, HttpClientConnection conn) {
-          if (connectionHandler != null) {
-            ctx.executeFromIO(v -> {
-              connectionHandler.handle(conn);
-            });
-          }
-        }
-           */
 
           HttpClientConnection conn = ar.result();
 
diff --git a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
index e13456415..1e686b43b 100644
--- a/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http1xClientConnection.java
@@ -108,11 +108,19 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC
     this.keepAliveTimeout = options.getKeepAliveTimeout();
   }
 
+  Object endpointMetric() {
+    return endpointMetric;
+  }
+
+  ConnectionListener<HttpClientConnection> listener() {
+    return listener;
+  }
+
   private static class StreamImpl implements HttpClientStream {
 
-    private final Http1xClientConnection conn;
-    private final Handler<AsyncResult<HttpClientStream>> handler;
-    private HttpClientRequestImpl request;
+    protected final Http1xClientConnection conn;
+    protected final Handler<AsyncResult<HttpClientStream>> handler;
+    protected HttpClientRequestImpl request;
     private HttpClientResponseImpl response;
     private boolean requestEnded;
     private boolean responseEnded;
@@ -125,6 +133,16 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC
       this.handler = handler;
     }
 
+    @Override
+    public void reportBytesWritten(long numberOfBytes) {
+      conn.reportBytesWritten(numberOfBytes);
+    }
+
+    @Override
+    public void reportBytesRead(long numberOfBytes) {
+      conn.reportBytesRead(numberOfBytes);
+    }
+
     @Override
     public int id() {
       return -1;
@@ -176,24 +194,34 @@ class Http1xClientConnection extends Http1xConnectionBase implements HttpClientC
       }
     }
 
-    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked) {
-      HttpRequest request = createRequest(conn.version, method, rawMethod, uri, headers);
-      prepareHeaders(request, hostHeader, chunked);
-      conn.writeToChannel(request);
+    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end) {
+      writeHead(conn.version, method, rawMethod, uri, headers, hostHeader, chunked, buf, end);
     }
 
-    public void writeHeadWithContent(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf buf, boolean end) {
-      HttpRequest request = createRequest(conn.version, method, rawMethod, uri, headers);
+    protected void writeHead(
+      HttpVersion version,
+      HttpMethod method,
+      String rawMethod,
+      String uri,
+      MultiMap headers,
+      String hostHeader,
+      boolean chunked,
+      ByteBuf buf,
+      boolean end) {
+      HttpRequest request = createRequest(version, method, rawMethod, uri, headers);
       prepareHeaders(request, hostHeader, chunked);
       if (end) {
         if (buf != null) {
-          conn.writeToChannel(new AssembledFullHttpRequest(request, buf));
+          request = new AssembledFullHttpRequest(request, buf);
         } else {
-          conn.writeToChannel(new AssembledFullHttpRequest(request));
+          request = new AssembledFullHttpRequest(request);
         }
       } else {
-        conn.writeToChannel(new AssembledHttpRequest(request, buf));
+        if (buf != null) {
+          request = new AssembledHttpRequest(request, buf);
+        }
       }
+      conn.writeToChannel(request);
     }
 
     @Override
diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
index ba75d7edf..f15bd0c18 100644
--- a/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerConnection.java
@@ -77,8 +77,6 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http
 
   private static final Logger log = LoggerFactory.getLogger(Http1xServerConnection.class);
 
-  private static final Handler<HttpServerRequest> NULL_REQUEST_HANDLER = req -> {};
-
   private static final int CHANNEL_PAUSE_QUEUE_SIZE = 5;
 
   private final String serverOrigin;
@@ -88,7 +86,7 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http
   private final HttpServerMetrics metrics;
   private boolean requestFailed;
   private Object requestMetric;
-  private Handler<HttpServerRequest> requestHandler = NULL_REQUEST_HANDLER;
+  private Handler<HttpServerRequest> requestHandler;
   private Handler<ServerWebSocket> wsHandler;
   private HttpServerRequestImpl currentRequest;
   private HttpServerResponseImpl pendingResponse;
@@ -185,13 +183,23 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http
     checkNextTick();
   }
 
-  synchronized void requestHandler(Handler<HttpServerRequest> handler) {
-    this.requestHandler = handler;
+  synchronized void requestHandlers(HttpHandlers handlers) {
+    Handler<HttpServerRequest> handler = handlers.requestHandler;
+    if (handlers.connectionHandler != null) {
+      handler = req -> {
+        requestHandler = handlers.requestHandler;
+        handlers.connectionHandler.handle(this);
+        handlers.requestHandler.handle(req);
+      };
+    }
+    requestHandler = handler;
+    exceptionHandler(handlers.exceptionHandler);
   }
 
-  synchronized void wsHandler(WebSocketServerHandshaker handshaker, Handler<ServerWebSocket> handler) {
+  synchronized void wsHandler(WebSocketServerHandshaker handshaker, HttpHandlers handlers) {
     this.handshaker = handshaker;
-    this.wsHandler = handler;
+    this.wsHandler = handlers.wsHandler;
+    exceptionHandler(handlers.exceptionHandler);
   }
 
   String getServerOrigin() {
@@ -439,7 +447,9 @@ public class Http1xServerConnection extends Http1xConnectionBase implements Http
       if (METRICS_ENABLED && metrics != null) {
         requestMetric = metrics.requestBegin(metric(), req);
       }
-      requestHandler.handle(req);
+      if (requestHandler != null) {
+        requestHandler.handle(req);
+      }
     } else if (msg == LastHttpContent.EMPTY_LAST_CONTENT) {
       handleLastHttpContent();
     } else if (msg instanceof HttpContent) {
diff --git a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java
index bca9c8290..f55284fb6 100644
--- a/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java
+++ b/src/main/java/io/vertx/core/http/impl/Http1xServerHandler.java
@@ -17,9 +17,7 @@ import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
 import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
-import io.vertx.core.Handler;
 import io.vertx.core.VertxException;
-import io.vertx.core.http.HttpConnection;
 import io.vertx.core.http.HttpServerOptions;
 import io.vertx.core.logging.Logger;
 import io.vertx.core.logging.LoggerFactory;
@@ -62,16 +60,12 @@ public class Http1xServerHandler extends VertxHttpHandler<Http1xServerConnection
       serverOrigin,
       metrics);
     setConnection(conn);
-    conn.requestHandler(holder.handler.requesthHandler);
-    holder.context.executeFromIO(v -> {
-      if (metrics != null) {
+    conn.requestHandlers(holder.handler);
+    if (metrics != null) {
+      holder.context.executeFromIO(v -> {
         conn.metric(metrics.connected(conn.remoteAddress(), conn.remoteName()));
-      }
-      Handler<HttpConnection> connHandler = holder.handler.connectionHandler;
-      if (connHandler != null) {
-        connHandler.handle(conn);
-      }
-    });
+      });
+    }
   }
 
   @Override
diff --git a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java
index c1ecde910..3be8e2caa 100644
--- a/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http2ClientConnection.java
@@ -32,6 +32,7 @@ import io.vertx.core.net.NetSocket;
 import io.vertx.core.spi.metrics.HttpClientMetrics;
 
 import java.util.Map;
+import java.util.function.BiConsumer;
 
 import static io.vertx.core.http.HttpHeaders.DEFLATE_GZIP;
 
@@ -97,27 +98,44 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon
     super.onStreamClosed(nettyStream);
   }
 
+  void upgradeStream(HttpClientRequestImpl req, Handler<AsyncResult<HttpClientStream>> completionHandler) {
+    Future<HttpClientStream> fut;
+    synchronized (this) {
+      try {
+        Http2ClientStream stream = createStream(true, 1);
+        stream.beginRequest(req);
+        fut = Future.succeededFuture(stream);
+      } catch (Exception e) {
+        fut = Future.failedFuture(e);
+      }
+    }
+    completionHandler.handle(fut);
+  }
+
   @Override
   public void createStream(Handler<AsyncResult<HttpClientStream>> completionHandler) {
     Future<HttpClientStream> fut;
     synchronized (this) {
+      Http2Connection conn = handler.connection();
       try {
-        Http2Connection conn = handler.connection();
-
-
-
-        Http2Stream stream = conn.local().createStream(conn.local().incrementAndGetNextStreamId(), false);
-        boolean writable = handler.encoder().flowController().isWritable(stream);
-        Http2ClientStream clientStream = new Http2ClientStream(this, stream, writable);
-        streams.put(clientStream.stream.id(), clientStream);
-        fut = Future.succeededFuture(clientStream);
-      } catch (Http2Exception e) {
+        Http2ClientStream stream = createStream(false, conn.local().incrementAndGetNextStreamId());
+        fut = Future.succeededFuture(stream);
+      } catch (Exception e) {
         fut = Future.failedFuture(e);
       }
     }
     completionHandler.handle(fut);
   }
 
+  private Http2ClientStream createStream(boolean upgrade, int streamId) throws Exception {
+    Http2Connection conn = handler.connection();
+    Http2Stream stream = upgrade ? conn.stream(1) : conn.local().createStream(streamId, false);
+    boolean writable = handler.encoder().flowController().isWritable(stream);
+    Http2ClientStream clientStream = new Http2ClientStream(this, stream, writable);
+    streams.put(clientStream.stream.id(), clientStream);
+    return clientStream;
+  }
+
   @Override
   public void recycle() {
     int timeout = client.getOptions().getHttp2KeepAliveTimeout();
@@ -304,12 +322,7 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon
     }
 
     @Override
-    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked) {
-      writeHeadWithContent(method, rawMethod, uri, headers, hostHeader, chunked, null, false);
-    }
-
-    @Override
-    public void writeHeadWithContent(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf content, boolean end) {
+    public void writeHead(HttpMethod method, String rawMethod, String uri, MultiMap headers, String hostHeader, boolean chunked, ByteBuf content, boolean end) {
       Http2Headers h = new DefaultHttp2Headers();
       h.method(method != HttpMethod.OTHER ? method.name() : rawMethod);
       if (method == HttpMethod.CONNECT) {
@@ -361,6 +374,16 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon
       super.writeFrame(type, flags, payload);
     }
 
+    @Override
+    public void reportBytesWritten(long numberOfBytes) {
+      conn.reportBytesWritten(numberOfBytes);
+    }
+
+    @Override
+    public void reportBytesRead(long numberOfBytes) {
+      conn.reportBytesRead(numberOfBytes);
+    }
+
     @Override
     public Context getContext() {
       return context;
@@ -410,4 +433,43 @@ class Http2ClientConnection extends Http2ConnectionBase implements HttpClientCon
       return conn.toNetSocket(this);
     }
   }
+
+  public static VertxHttp2ConnectionHandler<Http2ClientConnection> createHttp2ConnectionHandler(
+    HttpClientImpl client,
+    Object queueMetric,
+    ConnectionListener<HttpClientConnection> listener,
+    ContextInternal context,
+    BiConsumer<Http2ClientConnection, Long> c) {
+    long http2MaxConcurrency = client.getOptions().getHttp2MultiplexingLimit() <= 0 ? Long.MAX_VALUE : client.getOptions().getHttp2MultiplexingLimit();
+    HttpClientOptions options = client.getOptions();
+    HttpClientMetrics metrics = client.metrics();
+    VertxHttp2ConnectionHandler<Http2ClientConnection> handler = new VertxHttp2ConnectionHandlerBuilder<Http2ClientConnection>()
+      .server(false)
+      .useCompression(client.getOptions().isTryUseCompression())
+      .initialSettings(client.getOptions().getInitialSettings())
+      .connectionFactory(connHandler -> new Http2ClientConnection(listener, queueMetric, client, context, connHandler, metrics))
+      .logEnabled(options.getLogActivity())
+      .build();
+    handler.addHandler(conn -> {
+      if (options.getHttp2ConnectionWindowSize() > 0) {
+        conn.setWindowSize(options.getHttp2ConnectionWindowSize());
+      }
+      if (metrics != null) {
+        Object metric = metrics.connected(conn.remoteAddress(), conn.remoteName());
+        conn.metric(metric);
+      }
+      long concurrency = conn.remoteSettings().getMaxConcurrentStreams();
+      if (http2MaxConcurrency > 0) {
+        concurrency = Math.min(concurrency, http2MaxConcurrency);
+      }
+      c.accept(conn, concurrency);
+    });
+    handler.removeHandler(conn -> {
+      if (metrics != null) {
+        metrics.endpointDisconnected(queueMetric, conn.metric());
+      }
+      listener.onDiscard();
+    });
+    return handler;
+  }
 }
diff --git a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java
index b691fe9ac..36c848476 100644
--- a/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java
+++ b/src/main/java/io/vertx/core/http/impl/Http2ConnectionBase.java
@@ -196,9 +196,6 @@ abstract class Http2ConnectionBase extends ConnectionBase implements Http2FrameL
     }
   }
 
-  protected void onConnect() {
-  }
-
   protected void concurrencyChanged(long concurrency) {
   }
 
diff --git a/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java b/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java
index 6b9b1d679..cb9355a3b 100644
--- a/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java
+++ b/src/main/java/io/vertx/core/http/impl/Http2ServerConnection.java
@@ -14,6 +14,7 @@ package io.vertx.core.http.impl;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaderValues;
+import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.handler.codec.http2.Http2CodecUtil;
 import io.netty.handler.codec.http2.Http2Error;
@@ -94,6 +95,14 @@ public class Http2ServerConnection extends Http2ConnectionBase {
     return false;
   }
 
+  private Http2ServerRequestImpl createRequest(int streamId, Http2Headers headers) {
+    Http2Stream stream = handler.connection().stream(streamId);
+    String contentEncoding = options.isCompressionSupported() ? HttpUtils.determineContentEncoding(headers) : null;
+    boolean writable = handler.encoder().flowController().isWritable(stream);
+    Http2ServerRequestImpl request = new Http2ServerRequestImpl(this, stream, metrics, serverOrigin, headers, contentEncoding, writable);
+    return request;
+  }
+
   @Override
   public synchronized void onHeadersRead(ChannelHandlerContext ctx, int streamId,
                             Http2Headers headers, int padding, boolean endOfStream) {
@@ -103,10 +112,7 @@ public class Http2ServerConnection extends Http2ConnectionBase {
         handler.writeReset(streamId, Http2Error.PROTOCOL_ERROR.code());
         return;
       }
-      String contentEncoding = options.isCompressionSupported() ? HttpUtils.determineContentEncoding(headers) : null;
-      Http2Stream s = handler.connection().stream(streamId);
-      boolean writable = handler.encoder().flowController().isWritable(s);
-      Http2ServerRequestImpl req = new Http2ServerRequestImpl(this, s, metrics, serverOrigin, headers, contentEncoding, writable);
+      Http2ServerRequestImpl req = createRequest(streamId, headers);
       stream = req;
       CharSequence value = headers.get(HttpHeaderNames.EXPECT);
       if (options.isHandle100ContinueAutomatically() &&
@@ -189,6 +195,18 @@ public class Http2ServerConnection extends Http2ConnectionBase {
     super.updateSettings(settingsUpdate, completionHandler);
   }
 
+  Http2ServerRequestImpl createUpgradeRequest(HttpRequest request) {
+    DefaultHttp2Headers headers = new DefaultHttp2Headers();
+    headers.method(request.method().name());
+    headers.path(request.uri());
+    headers.authority(request.headers().get(""host""));
+    headers.scheme(""http"");
+    request.headers().remove(""http2-settings"");
+    request.headers().remove(""host"");
+    request.headers().forEach(header -> headers.set(header.getKey().toLowerCase(), header.getValue()));
+    return createRequest(1, headers);
+  }
+
   private class Push extends VertxHttp2Stream<Http2ServerConnection> {
 
     private final HttpMethod method;
diff --git a/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java
new file mode 100644
index 000000000..9b3eff91b
--- /dev/null
+++ b/src/main/java/io/vertx/core/http/impl/Http2UpgradedClientConnection.java
@@ -0,0 +1,389 @@
+/*
+ * Copyright (c) 2011-2018 Contributors to the Eclipse Foundation
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ */
+package io.vertx.core.http.impl;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+import io.netty.channel.ChannelPipeline;
+import io.netty.handler.codec.http.*;
+import io.vertx.codegen.annotations.Nullable;
+import io.vertx.core.*;
+import io.vertx.core.buffer.Buffer;
+import io.vertx.core.http.*;
+import io.vertx.core.http.HttpMethod;
+import io.vertx.core.http.HttpVersion;
+import io.vertx.core.http.impl.pool.ConnectionListener;
+import io.vertx.core.impl.ContextInternal;
+import io.vertx.core.net.NetSocket;
+import io.vertx.core.net.SocketAddress;
+
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLSession;
+import javax.security.cert.X509Certificate;
+
+/**
+ * An HTTP/2 connection in clear text that upgraded from an HTTP/1 upgrade.
+ */
+public class Http2UpgradedClientConnection implements HttpClientConnection {
+
+  private HttpClientImpl client;
+  private HttpClientConnection current;
+
+  private Handler<Void> closeHandler;
+  private Handler<Void> shutdownHandler;
+  private Handler<GoAway> goAwayHandler;
+  private Handler<Throwable> exceptionHandler;
+  private Handler<Buffer> pingHandler;
+  private Handler<Http2Settings> remoteSettingsHandler;
+
+  Http2UpgradedClientConnection(HttpClientImpl client, Http1xClientConnection connection) {
+    this.client = client;
+    this.current = connection;
+  }
+
+  @Override
+  public Channel channel() {
+    return current.channel();
+  }
+
+  @Override
+  public void close() {
+    current.close();
+  }
+
+  /**
+   * The first stream that will send the request using HTTP/1, upgrades the connection when the protocol
+   * switches and receives the response with HTTP/2 frames.
+   */
+  private class UpgradingStream implements HttpClientStream {
+
+    private HttpClientRequestImpl request;
+    private Http1xClientConnection conn;
+    private HttpClientStream stream;
+
+    UpgradingStream(HttpClientStream stream, Http1xClientConnection conn) {
+      this.conn = conn;
+      this.stream = stream;
+    }
+
+    @Override
+    public HttpClientConnection connection() {
+      return current == null ? conn : current;
+    }
+
+    /**
+     * HTTP/2 clear text upgrade here.
+     */
+    @Override
+    public void writeHead(HttpMethod method,
+                          String rawMethod,
+                          String uri,
+                          MultiMap headers,
+                          String hostHeader,
+                          boolean chunked,
+                          ByteBuf buf,
+                          boolean end) {
+      ChannelPipeline pipeline = conn.channel().pipeline();
+      HttpClientCodec httpCodec = pipeline.get(HttpClientCodec.class);
+      class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {
+        @Override
+        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
+          super.userEventTriggered(ctx, evt);
+          ChannelPipeline pipeline = ctx.pipeline();
+          if (evt == HttpClientUpgradeHandler.UpgradeEvent.UPGRADE_SUCCESSFUL) {
+            // Upgrade handler will remove itself and remove the HttpClientCodec
+            pipeline.remove(conn.handler());
+          }
+        }
+
+        @Override
+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+          if (msg instanceof HttpResponse) {
+            pipeline.remove(this);
+            HttpResponse resp = (HttpResponse) msg;
+            if (resp.status() != HttpResponseStatus.SWITCHING_PROTOCOLS) {
+              // Insert the cloe headers to let the HTTP/1 stream close the connection
+              resp.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);
+            }
+          }
+          super.channelRead(ctx, msg);
+        }
+      }
+      VertxHttp2ClientUpgradeCodec upgradeCodec = new VertxHttp2ClientUpgradeCodec(client.getOptions().getInitialSettings()) {
+        @Override
+        public void upgradeTo(ChannelHandlerContext ctx, FullHttpResponse upgradeResponse) throws Exception {
+
+          // Now we need to upgrade this to an HTTP2
+          ConnectionListener<HttpClientConnection> listener = conn.listener();
+          VertxHttp2ConnectionHandler<Http2ClientConnection> handler = Http2ClientConnection.createHttp2ConnectionHandler(client, conn.endpointMetric(), listener, conn.getContext(), (conn, concurrency) -> {
+            conn.upgradeStream(request, ar -> {
+              UpgradingStream.this.conn.closeHandler(null);
+              UpgradingStream.this.conn.exceptionHandler(null);
+              if (ar.succeeded()) {
+                current = conn;
+                conn.closeHandler(closeHandler);
+                conn.exceptionHandler(exceptionHandler);
+                conn.pingHandler(pingHandler);
+                conn.goAwayHandler(goAwayHandler);
+                conn.shutdownHandler(shutdownHandler);
+                conn.remoteSettingsHandler(remoteSettingsHandler);
+                listener.onConcurrencyChange(concurrency);
+              } else {
+                // Handle me
+                ar.cause().printStackTrace();
+              }
+            });
+          });
+          conn.channel().pipeline().addLast(handler);
+          handler.clientUpgrade(ctx);
+        }
+      };
+      HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(httpCodec, upgradeCodec, 65536);
+      pipeline.addAfter(""codec"", null, new UpgradeRequestHandler());
+      pipeline.addAfter(""codec"", null, upgradeHandler);
+      stream.writeHead(method, rawMethod, uri, headers, hostHeader, chunked, buf, end);
+    }
+
+    @Override
+    public int id() {
+      return 1;
+    }
+
+    @Override
+    public HttpVersion version() {
+      return HttpVersion.HTTP_2;
+    }
+
+    @Override
+    public Context getContext() {
+      return stream.getContext();
+    }
+
+    @Override
+    public void writeBuffer(ByteBuf buf, boolean end) {
+      stream.writeBuffer(buf, end);
+    }
+
+    @Override
+    public void writeFrame(int type, int flags, ByteBuf payload) {
+      stream.writeFrame(type, flags, payload);
+    }
+
+    @Override
+    public void reportBytesWritten(long numberOfBytes) {
+      stream.reportBytesWritten(numberOfBytes);
+    }
+
+    @Override
+    public void reportBytesRead(long numberOfBytes) {
+      stream.reportBytesRead(numberOfBytes);
+    }
+
+    @Override
+    public void doSetWriteQueueMaxSize(int size) {
+      stream.doSetWriteQueueMaxSize(size);
+    }
+
+    @Override
+    public boolean isNotWritable() {
+      return stream.isNotWritable();
+    }
+
+    @Override
+    public void doPause() {
+      stream.doPause();
+    }
+
+    @Override
+    public void doResume() {
+      stream.doResume();
+    }
+
+    @Override
+    public void reset(long code) {
+      stream.reset(code);
+    }
+
+    @Override
+    public void beginRequest(HttpClientRequestImpl req) {
+      request = req;
+      stream.beginRequest(req);
+    }
+
+    @Override
+    public void endRequest() {
+      stream.endRequest();
+    }
+
+    @Override
+    public NetSocket createNetSocket() {
+      return stream.createNetSocket();
+    }
+  }
+
+  @Override
+  public void createStream(Handler<AsyncResult<HttpClientStream>> handler) {
+    if (current instanceof Http1xClientConnection) {
+      current.createStream(ar -> {
+        if (ar.succeeded()) {
+          HttpClientStream stream = ar.result();
+          UpgradingStream upgradingStream = new UpgradingStream(stream, (Http1xClientConnection) current);
+          handler.handle(Future.succeededFuture(upgradingStream));
+        } else {
+          handler.handle(ar);
+        }
+      });
+    } else {
+      current.createStream(handler);
+    }
+  }
+
+  @Override
+  public ContextInternal getContext() {
+    return current.getContext();
+  }
+
+  @Override
+  public boolean checkInitialized() {
+    return current.checkInitialized();
+  }
+
+  @Override
+  public void recycle() {
+    current.recycle();
+  }
+
+  @Override
+  public HttpConnection closeHandler(Handler<Void> handler) {
+    closeHandler = handler;
+    current.closeHandler(handler);
+    return this;
+  }
+
+  @Override
+  public HttpConnection",Implement properly h2c upgrade - fixes <issue_id>,"""Refactor HTTP/2 connection handling and upgrade logic""","Here is a possible commit message based on the provided diff:

`Refactor HTTP/1 and HTTP/2 connection handling to improve performance and reduce code duplication`

This commit message captures the essence of the changes made in the diff, which include refactoring the connection handling logic for both HTTP/1 and HTTP/2 protocols to improve performance and reduce code duplication.","""Refactor HttpClientConnection to use functional interfaces""

The commit message should indicate that the code has been refactored to use functional interfaces in the `HttpClientConnection` class. This refactoring includes the removal of some inner classes and the addition of new methods that accept functional interfaces as parameters.

For example, the `initConnection` method now accepts a `Consumer<HttpClientConnection>` as a parameter instead of a `ConnectionHandler` object. This change allows for more flexible and concise code, as the behavior of the `initConnection` method can now be defined using a lambda expression or a method reference.

Similarly, the `getConnection` method now accepts a `Function<AsyncResult<HttpClientConnection>, Void>` as a parameter instead of a `Handler<AsyncResult<HttpClientConnection>>` object. This change allows for more concise error handling, as the `Function` interface can be used to map the `AsyncResult` to a `Void` value if the result is a failure.

Overall, this refactoring improves the code quality and readability of the `HttpClientConnection` class by taking advantage of functional programming concepts.","""Refactor HTTP/1.x and HTTP/2 connection handling and add clear text upgrade support for HTTP/2 client connections."""
"diff --git a/ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StreamedRow.java b/ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StreamedRow.java
index f20a001be05..e1bdff6fe06 100644
--- a/ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StreamedRow.java
+++ b/ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StreamedRow.java
@@ -24,8 +24,10 @@ import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
+import com.fasterxml.jackson.core.JsonProcessingException;
 import com.google.errorprone.annotations.Immutable;
 import io.confluent.ksql.GenericRow;
+import io.confluent.ksql.json.JsonMapper;
 import io.confluent.ksql.query.QueryId;
 import io.confluent.ksql.schema.ksql.LogicalSchema;
 import java.util.Arrays;
@@ -134,6 +136,15 @@ public final class StreamedRow {
     return Objects.hash(header, row, errorMessage, finalMessage);
   }
 
+  @Override
+  public String toString() {
+    try {
+      return JsonMapper.INSTANCE.mapper.writeValueAsString(this);
+    } catch (JsonProcessingException e) {
+      return super.toString();
+    }
+  }
+
   private static void checkUnion(final Optional<?>... fs) {
     final long count = Arrays.stream(fs)
         .filter(Optional::isPresent)",add toString to StreamedRow ( <issue_id> ),"""Added toString method to StreamedRow class for JSON representation""","The commit message should be:

""Add toString implementation using JsonMapper and handle JsonProcessingException""

Or, following standard commit message guidelines:

""Add toString implementation using JsonMapper and handle JsonProcessingException""

Or, if you want to be more concise:

""Implement toString using JsonMapper and handle exceptions""","""Added toString method to StreamedRow class in ksql-rest-model""

Explanation: The provided code snippet shows an addition to the StreamedRow.java file in the ksql-rest-model package. Specifically, a toString method has been added to the StreamedRow class. This method attempts to convert the StreamedRow object into a JSON string using the JsonMapper.INSTANCE.mapper.writeValueAsString(this) method and returns the resulting string. If there is an error during the conversion process, it returns the result of calling super.toString(). The existing checkUnion method and hashCode method are unchanged.","""Add JSON serialization toString method in StreamedRow for improved logging and debugging"""
"diff --git a/lint.xml b/lint.xml
index d6347e2d30..73f1711a20 100644
--- a/lint.xml
+++ b/lint.xml
@@ -14,6 +14,7 @@
         <ignore regexp=""store_short_desc|store_full_desc|store_short_dev_desc|store_full_dev_desc"" />
         <ignore
             regexp=""screenshot_01_gridView|screenshot_02_listView|screenshot_03_drawer|screenshot_04_accounts|screenshot_05_autoUpload|screenshot_06_davdroid""/>
+        <ignore path=""**/raw/encryption_key_words.txt"" />
     </issue>
 
     <issue id=""MissingQuantity"">
diff --git a/src/gplay/res/values/setup.xml b/src/gplay/res/values/setup.xml
index 02f48f3d8a..18437132bb 100644
--- a/src/gplay/res/values/setup.xml
+++ b/src/gplay/res/values/setup.xml
@@ -10,7 +10,6 @@
     <string name=""google_app_id"" translatable=""false"">1:829118773643:android:512449826e931d0e</string>
     <string name=""google_crash_reporting_api_key"" translatable=""false"">AIzaSyAWIyOcLafaFp8PFL61h64cy1NNZW2cU_s</string>
     <string name=""google_storage_bucket"" translatable=""false"">nextcloud-a7dea.appspot.com</string>
-    <string name=""project_id"" translatable=""false"">nextcloud-a7dea</string>
 </resources>
 
 
diff --git a/src/main/res/font/nunito.xml b/src/main/res/font/nunito.xml
index ab04af5416..214e8d2c82 100644
--- a/src/main/res/font/nunito.xml
+++ b/src/main/res/font/nunito.xml
@@ -1,5 +1,7 @@
 <?xml version=""1.0"" encoding=""utf-8""?>
-<font-family xmlns:app=""http://schemas.android.com/apk/res-auto"">
+<font-family xmlns:app=""http://schemas.android.com/apk/res-auto""
+    xmlns:tools=""http://schemas.android.com/tools""
+    tools:ignore=""UnusedResources"">
     <font
         app:font=""@font/nunito_regular""
         app:fontStyle=""normal""
diff --git a/src/main/res/values/strings.xml b/src/main/res/values/strings.xml
index 8e2fcb35bc..3082debce3 100644
--- a/src/main/res/values/strings.xml
+++ b/src/main/res/values/strings.xml
@@ -507,7 +507,6 @@
     <string name=""share_room_clarification"">%1$s (conversation)</string>
     <string name=""share_known_remote_clarification"">%1$s ( at %2$s )</string>
 
-    <string name=""share_sharee_unavailable"">Upgrade the server version to allow sharing between users from within their clients.\nPlease contact your admin</string>
     <string name=""share_privilege_unshare"">Unshare</string>
     <string name=""share_privilege_can_share"">can share</string>
     <string name=""share_privilege_can_edit"">can edit</string>
@@ -665,7 +664,6 @@
 
     <string name=""resized_image_not_possible"">No resized image available.</string>
     <string name=""resized_image_not_possible_download"">No resized image available. Download full image?</string>
-    <string name=""resized_images_download_full_image"">Download full image?</string>
 
     <string name=""store_short_desc"">The Nextcloud Android app gives mobile access to all files on your Nextcloud.</string>
     <string name=""store_full_desc"">The copylefted libre Nextcloud Android app, giving you mobile freedom.\n\nFeatures:\n* Easy, modern interface, suited to the theme of your server\n* Upload files to your Nextcloud server\n* Share them with others\n* Keep your favorite files and folders synced\n* Search across all folders on your server\n* Auto Upload for photos and videos taken by your device\n* Keep up to date with notifications\n* Multi-account support\n* Secure access to your data with fingerprint or PIN\n* Integration with DAVdroid for easy setup of calendar &amp; Contacts synchronization\n\nPlease report all issues at https://github.com/nextcloud/android/issues and discuss this app at https://help.nextcloud.com/c/clients/android\n\nNew to Nextcloud? Nextcloud is a private file sync &amp; share and communication server. It is libre software, and you can host it yourself or pay a company to do it for you. That way, you are in control of your photos, your calendar and contact data, your documents and everything else.\n\nCheck out Nextcloud at https://nextcloud.com</string>",remove unused resources / add to lint ignore .,"""Remove unused strings and ignore lint warnings for specific files and resources""","""Remove unused resources and strings, ignore encryption key file in lint checks""

This commit message accurately reflects the changes made in the diff, which include removing unused resources and strings, and adding an ignore rule for an encryption key file in lint checks.","""Added ignore rule for encryption_key_words.txt in lint.xml
Removed unused string resource in setup.xml
Added tools:ignore attribute in nunito.xml
Removed unused string resource in strings.xml""",Updated lint.xml to ignore encryption_key_words.txt and removed unused strings and attributes from other XML files for cleanup.
"diff --git a/jetty-documentation/src/main/asciidoc/administration/part.adoc b/jetty-documentation/src/main/asciidoc/administration/part.adoc
index 2b457b3d90..e471f7fbda 100644
--- a/jetty-documentation/src/main/asciidoc/administration/part.adoc
+++ b/jetty-documentation/src/main/asciidoc/administration/part.adoc
@@ -18,6 +18,7 @@
 
 include::startup/chapter.adoc[]
 include::sessions/chapter.adoc[]
+include::logging/chapter.adoc[]
 include::jndi/chapter.adoc[]
 include::annotations/chapter.adoc[]
 include::jmx/chapter.adoc[]
@@ -27,4 +28,3 @@ include::fastcgi/chapter.adoc[]
 include::extras/chapter.adoc[]
 include::runner/chapter.adoc[]
 include::tuning/chapter.adoc[]
-include::logging/chapter.adoc[]
diff --git a/jetty-documentation/src/main/asciidoc/configuring/contexts/temporary-directories.adoc b/jetty-documentation/src/main/asciidoc/configuring/contexts/temporary-directories.adoc
index 2e1b2f8a1c..bb1be51549 100644
--- a/jetty-documentation/src/main/asciidoc/configuring/contexts/temporary-directories.adoc
+++ b/jetty-documentation/src/main/asciidoc/configuring/contexts/temporary-directories.adoc
@@ -17,7 +17,7 @@
 [[ref-temporary-directories]]
 === Temporary Directories
 
-Jetty itself has no temporary directories, but you can assign a directory for each web application, into which the WAR is unpacked, JSPs compiled on-the-fly, etc. 
+Jetty itself has no temporary directories, but you can assign a directory for each web application, into which the WAR is unpacked, JSPs compiled on-the-fly, etc.
 If you do not assign a specific temporary directory, Jetty will create one as needed when your web application starts.
 Whether you set the location of the temporary directory - or you let Jetty create one for you - you also have a choice to either keep or delete the temporary directory when the web application stops.
 
@@ -41,11 +41,11 @@ Once the temp directory is created, it is retrievable as the value (as a File) o
 
 ===== The location of the temp directory
 
-By default, Jetty will create this directory inside the directory named by the `java.io.tmpdir` System property. 
-You can instruct Jetty to use a different parent directory by setting the context attribute `org.eclipse.jetty.webapp.basetempdir` to the name of the desired parent directory. 
+By default, Jetty will create this directory inside the directory named by the `java.io.tmpdir` System property.
+You can instruct Jetty to use a different parent directory by setting the context attribute `org.eclipse.jetty.webapp.basetempdir` to the name of the desired parent directory.
 The directory named by this attribute _must_ exist and be __writeable__.
 
-As usual with Jetty, you can either set this attribute in a context xml file, or you can do it in code. 
+As usual with Jetty, you can either set this attribute in a context xml file, or you can do it in code.
 
 Here's an example of setting it in an xml file:
 
@@ -77,9 +77,9 @@ context.setAttribute(""org.eclipse.jetty.webapp.basetempdir"", ""/tmp/foo"");
 
 There are several ways to use a particular directory as the temporary directory:
 
-call WebAppContext.setTempDirectory(String dir)::
-  Like before this can be accomplished with an xml file or directly in code. Here's an example of setting the temp directory in xml:
-  +
+*Call WebAppContext.setTempDirectory(String dir)*
+Like before this can be accomplished with an xml file or directly in code. Here's an example of setting the temp directory in xml:
+
 [source, xml, subs=""{sub-order}""]
 ----
 <Configure class=""org.eclipse.jetty.webapp.WebAppContext"">
@@ -101,8 +101,8 @@ context.setWar(""foo.war"");
 context.setTempDirectory(new File(""/some/dir/foo""));
 ----
 
-set the `javax.servlet.context.tempdir` context attribute::
-  You should set this context attribute with the name of directory you want to use as the temp directory. Again, you can do this in xml:
+*Set the `javax.servlet.context.tempdir` context attribute*
+You should set this context attribute with the name of directory you want to use as the temp directory. Again, you can do this in xml:
 
 [source, xml, subs=""{sub-order}""]
 ----
@@ -139,17 +139,17 @@ ____
 
 ==== The ""work"" directory
 
-Mostly for backward compatibility, from jetty-9.1.1 onwards, it is be possible to create a directory named ""work"" in the `$\{jetty.base}` directory. 
-If such a directory is found, it is assumed you want to use it as the parent directory for all of the temporary directories of the webapps in that `$\{jetty.base}`. 
+Mostly for backward compatibility, from jetty-9.1.1 onwards, it is be possible to create a directory named ""work"" in the `$\{jetty.base}` directory.
+If such a directory is found, it is assumed you want to use it as the parent directory for all of the temporary directories of the webapps in that `$\{jetty.base}`.
 Moreover, as has historically been the case, these temp directories inside the work directory are not cleaned up when jetty exists (or more correctly speaking, the `temp` directory corresponding to a context is not cleaned up when that context stops).
 
-When a work directory is used, the algorithm for generating the name of the context-specific temp directories omits the random digit string. 
+When a work directory is used, the algorithm for generating the name of the context-specific temp directories omits the random digit string.
 This ensures the name of the directory remains consistent across context restarts.
 
 ==== Persisting the temp directory
 
-Sometimes you may find it useful to keep the contents of the temporary directory between restarts of the web application. 
-By default, Jetty will _not_ persist the temp directory. 
+Sometimes you may find it useful to keep the contents of the temporary directory between restarts of the web application.
+By default, Jetty will _not_ persist the temp directory.
 To configure Jetty to keep it, use link:{JDURL}/org/eclipse/jetty/webapp/WebAppContext.html[WebAppContext.setPersistTempDirectory(true)].
 
 ____
diff --git a/jetty-documentation/src/main/asciidoc/development/part.adoc b/jetty-documentation/src/main/asciidoc/development/part.adoc
index f1f6414599..cfadcad14c 100644
--- a/jetty-documentation/src/main/asciidoc/development/part.adoc
+++ b/jetty-documentation/src/main/asciidoc/development/part.adoc
@@ -16,14 +16,14 @@
 
 = Jetty Development Guide
 
+include::embedding/chapter.adoc[]
+include::clients/http/chapter.adoc[]
 include::maven/chapter.adoc[]
-include::ant/chapter.adoc[]
 include::handlers/chapter.adoc[]
-include::embedding/chapter.adoc[]
 include::debugging/chapter.adoc[]
-include::frameworks/chapter.adoc[]
-include::clients/http/chapter.adoc[]
 include::websockets/intro/chapter.adoc[]
 include::websockets/jetty/chapter.adoc[]
 //include::websockets/java/chapter.adoc[]
 include::continuations/chapter.adoc[]
+include::frameworks/chapter.adoc[]
+include::ant/chapter.adoc[]
diff --git a/jetty-documentation/src/main/asciidoc/quick-start/getting-started/chapter.adoc b/jetty-documentation/src/main/asciidoc/quick-start/getting-started/chapter.adoc
index fc196e2c43..f84630f55d 100644
--- a/jetty-documentation/src/main/asciidoc/quick-start/getting-started/chapter.adoc
+++ b/jetty-documentation/src/main/asciidoc/quick-start/getting-started/chapter.adoc
@@ -17,10 +17,9 @@
 [[quick-start-getting-started]]
 == Using Jetty Introduction
 
-You can use Jetty in many different ways, ranging from embedding Jetty in applications, launching it from different build systems, from different JVM-based languages, or as a standalone distribution. 
+You can use Jetty in many different ways, ranging from embedding Jetty in applications, launching it from different build systems, from different JVM-based languages, or as a standalone distribution.
 This guide covers the latter, a standalone distribution suitable for deploying web applications.
 
 include::jetty-installing.adoc[]
 include::jetty-running.adoc[]
 include::jetty-deploying.adoc[]
-include::jetty-coordinates.adoc[]
diff --git a/jetty-documentation/src/main/asciidoc/quick-start/introduction/chapter.adoc b/jetty-documentation/src/main/asciidoc/quick-start/introduction/chapter.adoc
index bf29a783f6..804dcb066e 100644
--- a/jetty-documentation/src/main/asciidoc/quick-start/introduction/chapter.adoc
+++ b/jetty-documentation/src/main/asciidoc/quick-start/introduction/chapter.adoc
@@ -20,3 +20,4 @@
 include::what-is-jetty.adoc[]
 include::what-version.adoc[]
 include::jetty-javaee.adoc[]
+include::jetty-coordinates.adoc[]
diff --git a/jetty-documentation/src/main/asciidoc/quick-start/getting-started/jetty-coordinates.adoc b/jetty-documentation/src/main/asciidoc/quick-start/introduction/jetty-coordinates.adoc
similarity index 91%
rename from jetty-documentation/src/main/asciidoc/quick-start/getting-started/jetty-coordinates.adoc
rename to jetty-documentation/src/main/asciidoc/quick-start/introduction/jetty-coordinates.adoc
index 5b439d9e5b..947b7ed123 100644
--- a/jetty-documentation/src/main/asciidoc/quick-start/getting-started/jetty-coordinates.adoc
+++ b/jetty-documentation/src/main/asciidoc/quick-start/introduction/jetty-coordinates.adoc
@@ -19,8 +19,8 @@
 
 ==== Maven Coordinates
 
-Jetty has existed in Maven Central almost since its inception, however under a couple of different coordinates over the years. 
-When Jetty was based at SourceForge and then The Codehaus it was located under the `groupId` of `org.mortbay.jetty`. 
+Jetty has existed in Maven Central almost since its inception, though the coordinates have changed over the years.
+When Jetty was based at SourceForge and then The Codehaus it was located under the `groupId` of `org.mortbay.jetty`.
 With Jetty 7 the project moved to the Eclipse foundation and to a new `groupId` at that time to reflect its new home.
 
 The top level Project Object Model (POM) for the Jetty project is located under the following coordinates.
@@ -39,7 +39,7 @@ The top level Project Object Model (POM) for the Jetty project is located under
 The changes between versions of Jetty are tracked in a file called VERSIONS.txt, which is under source control and is generated on release.
 Those generated files are also uploaded into Maven Central during the release of the top level POM. You can find them as a classifier marked artifact.
 
-http://central.maven.org/maven2/org/eclipse/jetty/jetty-project/ 
+http://central.maven.org/maven2/org/eclipse/jetty/jetty-project/
 
 [source, xml, subs=""{sub-order}""]
 ----
diff --git a/jetty-documentation/src/main/asciidoc/quick-start/introduction/what-is-jetty.adoc b/jetty-documentation/src/main/asciidoc/quick-start/introduction/what-is-jetty.adoc
index 05e09315c7..d88ab7affe 100644
--- a/jetty-documentation/src/main/asciidoc/quick-start/introduction/what-is-jetty.adoc
+++ b/jetty-documentation/src/main/asciidoc/quick-start/introduction/what-is-jetty.adoc
@@ -25,4 +25,4 @@ This guide is in two parts.
 * The second part describes advanced uses of Jetty, providing in depth coverage of specific features like our highly scalable async client, proxy servlet configuration, the Jetty Maven plugin, and using Jetty as an embedded server. The advanced section includes tutorials, howtos, videos, and reference materials.
 
 Feedback is always welcome!
-Additionally, if you are interested in how to contribute to the open source project there is a section on that as well!
+Additionally, if you are interested in how to contribute to the open source project there is a link:#community[section on that as well!]",Updated chapter listing .,"""Update Jetty documentation for administration, development, and quick start guides""","""Added logging chapter to administration section and updated various sections to reflect changes in Jetty documentation""","This commit moves the ""logging"" chapter from the ""Administration"" part to the ""Configuring Jetty"" part in the Jetty documentation. It also includes some formatting changes and updates to the text in the ""Temporary Directories"" and ""Using Jetty Introduction"" chapters. Additionally, the ""jetty-coordinates.adoc"" file was moved from the ""quick-start/getting-started"" directory to the ""quick-start/introduction"" directory. Finally, the commit message should briefly describe the changes made, such as ""Move logging chapter to Configuring Jetty and update formatting in various chapters"".",Reorganize and fix formatting in Jetty documentation for consistency and clarity. Relocate logging chapter and jetty-coordinates.adoc.
"diff --git a/src/org/qii/weiciyuan/ui/send/AutoCompleteAdapter.java b/src/org/qii/weiciyuan/ui/send/AutoCompleteAdapter.java
index 12225187..c8e9727c 100644
--- a/src/org/qii/weiciyuan/ui/send/AutoCompleteAdapter.java
+++ b/src/org/qii/weiciyuan/ui/send/AutoCompleteAdapter.java
@@ -89,7 +89,14 @@ public class AutoCompleteAdapter extends ArrayAdapter<AtUserBean> implements Fil
     private Filter filter = new Filter() {
         @Override
         protected FilterResults performFiltering(CharSequence constraint) {
-            pb.setVisibility(View.GONE);
+
+            activity.runOnUiThread(new Runnable() {
+
+                @Override
+                public void run() {
+                    pb.setVisibility(View.GONE);
+               ",fix bug,"""Hide progress bar on UI thread in AutoCompleteAdapter""","""Run pb visibility change on UI thread in AutoCompleteAdapter filter""","""Move setVisibility(View.GONE) to runOnUiThread in AutoCompleteAdapter""

This change moves the code that sets the visibility of a progress bar to GONE from the performFiltering method to a runOnUiThread block. This ensures that the UI update is performed on the UI thread, which is required for proper functioning of the app.","""Run UI updates on main thread to fix visibility issue in AutoCompleteAdapter"""
"diff --git a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/Function.java b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/Function.java
index 8b92961c1fc..31737554518 100644
--- a/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/Function.java
+++ b/sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/Function.java
@@ -659,9 +659,9 @@ public final class Function implements ParserListener {
         // type table
         for (Type t : types) {
             if (t instanceof StructureType) {
-                final Type[] elts = ((StructureType) t).getElementTypes();
-                if (elts.length == CMPXCHG_TYPE_LENGTH && elementType == elts[CMPXCHG_TYPE_ELEMENTTYPE] && PrimitiveType.I1 == elts[CMPXCHG_TYPE_BOOLTYPE]) {
-                    return (AggregateType) t;
+                StructureType st = (StructureType) t;
+                if (st.getNumberOfElementsInt() == CMPXCHG_TYPE_LENGTH && elementType == st.getElementType(CMPXCHG_TYPE_ELEMENTTYPE) && PrimitiveType.I1 == st.getElementType(CMPXCHG_TYPE_BOOLTYPE)) {
+                    return st;
                 }
             }
         }
diff --git a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/rust/LLVMStart.java b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/rust/LLVMStart.java
index 19ae364c53a..43dfac8bc6c 100644
--- a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/rust/LLVMStart.java
+++ b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/intrinsics/rust/LLVMStart.java
@@ -162,7 +162,7 @@ public abstract class LLVMStart extends LLVMIntrinsic {
             }
 
             static LangStartVtableType create(DataLayout datalayout, Type vtableType) throws TypeOverflowException {
-                FunctionType fnType = (FunctionType) ((PointerType) ((StructureType) vtableType).getElementTypes()[5]).getPointeeType();
+                FunctionType fnType = (FunctionType) ((PointerType) ((StructureType) vtableType).getElementType(5)).getPointeeType();
                 return new LangStartVtableType(datalayout, (StructureType) vtableType, fnType);
             }
 
diff --git a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/types/StructureType.java b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/types/StructureType.java
index a1e45fb3237..7d0b2b84f83 100644
--- a/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/types/StructureType.java
+++ b/sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/types/StructureType.java
@@ -95,10 +95,6 @@ public final class StructureType extends AggregateType {
         types[idx] = type;
     }
 
-    public Type[] getElementTypes() {
-        return types;
-    }
-
     public boolean isPacked() {
         return isPacked;
     }",remove StructureType getElementTypes ( ),"""Refactor StructureType to use getElementType(index) instead of getElementTypes()""

This commit message accurately reflects the changes made in the diff, which involve replacing calls to `getElementTypes()` with `getElementType(index)` in the `Function` and `LLVMStart` classes, and removing the `getElementTypes()` method from the `StructureType` class.","""Refactor StructureType to use getElementType(index) instead of getElementTypes() for consistency and performance.""","""Update Function.java and LLVMStart.java to use getElementType() instead of getElementTypes() in StructureType""

Explanation:

* In Function.java, the method call `((StructureType) t).getElementTypes()` is replaced with `((StructureType) t).getElementType(index)`.
* In LLVMStart.java, the method call `((StructureType) vtableType).getElementTypes()[5]` is replaced with `((StructureType) vtableType).getElementType(5)`.
* The `getElementTypes()` method is removed from StructureType.java since it is no longer used.

This change updates the code to use the `getElementType(int index)` method instead of the `getTypeArray()` method in StructureType. This change could have been made to improve the performance of the code by avoiding the creation of a new array every time the elements of the structure type are accessed. Additionally, the removal of the `getTypeArray()` method simplifies the code and reduces the chance of errors by eliminating an unnecessary method.",Refactor `StructureType` to improve type access methods in LLVM parser and runtime.
"diff --git a/storm-core/src/clj/backtype/storm/messaging/zmq.clj b/storm-core/src/clj/backtype/storm/messaging/zmq.clj
index 387e61af..23e263eb 100644
--- a/storm-core/src/clj/backtype/storm/messaging/zmq.clj
+++ b/storm-core/src/clj/backtype/storm/messaging/zmq.clj
@@ -59,11 +59,11 @@
                      ^{:unsynchronized-mutable true} local?]
   IContext
   (^void prepare [this ^Map storm-conf]
-    (let [num-threads (storm-conf ZMQ-THREADS)]
+    (let [num-threads (.get storm-conf ZMQ-THREADS)]
       (set! context (mq/context num-threads)) 
-      (set! linger-ms (storm-conf ZMQ-LINGER-MILLIS))
-      (set! hwm (storm-conf ZMQ-HWM))
-      (set! local? (= (storm-conf STORM-CLUSTER-MODE) ""local""))))
+      (set! linger-ms (.get storm-conf ZMQ-LINGER-MILLIS))
+      (set! hwm (.get storm-conf ZMQ-HWM))
+      (set! local? (= (.get storm-conf STORM-CLUSTER-MODE) ""local""))))
   (^IConnection bind [this ^String storm-id ^int port]
     (require 'backtype.storm.messaging.zmq)
     (-> context",enable Java HashMap for zmq messaging,"""Update zmq.clj to use .get method for retrieving values from storm-conf map""

This commit message is short and to the point, describing the change made in the code.","""Use get method to access map values instead of keyword lookup""","The commit message could be: ""Updated ZMQ configuration to use .get method for storm-conf in prepare function"".

This change modifies the `prepare` function in `zmq.clj` to use the `.get` method for retrieving configuration values from `storm-conf` instead of using the `storm-conf` function directly. Specifically, the lines for `num-threads`, `linger-ms`, `hwm`, and `local?` are updated to use `.get`. This change may have been made for consistency, as `.get` is a more typical way to retrieve values from a map in Clojure. Additionally, this change may have been made to address a potential issue with the previous implementation, depending on the context and behavior of the `storm-conf` function.","Changed storm-conf map access methods to use .get for ZMQ-THREADS, ZMQ-LINGER-MILLIS, ZMQ-HWM, and STORM-CLUSTER-MODE."
"diff --git a/querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java b/querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
index ddcc42c2f..7cc069f82 100644
--- a/querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
+++ b/querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
@@ -49,7 +49,7 @@ public class Processor {
     
     private boolean useFields = true;
     
-    private boolean listsAsCollections = false;
+//    private boolean listsAsCollections = false;
     
     private ElementVisitor<ClassModel, Void> dtoElementVisitor = new SimpleElementVisitor6<ClassModel, Void>() {
         
@@ -58,7 +58,7 @@ public class Processor {
             Elements elementUtils = env.getElementUtils();
             TypeModel c = APTTypeModel.get(e.asType(), elementUtils);
             ClassModel classModel = new ClassModel(null, c.getPackageName(), c.getName(), c.getSimpleName());
-            classModel.setListsAsCollections(listsAsCollections);
+//            classModel.setListsAsCollections(listsAsCollections);
             List<? extends Element> elements = e.getEnclosedElements();
             // CONSTRUCTOR
             for (ExecutableElement constructor : ElementFilter.constructorsIn(elements)){
@@ -85,7 +85,7 @@ public class Processor {
             TypeModel sc = APTTypeModel.get(e.getSuperclass(), elementUtils);
             TypeModel c = APTTypeModel.get(e.asType(), elementUtils);
             ClassModel classModel = new ClassModel(sc.getName(), c.getPackageName(), c.getName(), c.getSimpleName());
-            classModel.setListsAsCollections(listsAsCollections);
+//            classModel.setListsAsCollections(listsAsCollections);
             List<? extends Element> elements = e.getEnclosedElements();
             // GETTERS
             for (ExecutableElement method : ElementFilter.methodsIn(elements)){
@@ -285,15 +285,15 @@ public class Processor {
         return this;
     }
 
-    /**
-     * Process lists as Collections
-     * 
-     * @return
-     */
-    public Processor listsAsCollections() {
-        listsAsCollections = true;
-        return this;
-        
-    }
+//    /**
+//     * Process lists as Collections
+//     * 
+//     * @return
+//     */
+//    public Processor listsAsCollections() {
+//        listsAsCollections = true;
+//        return this;
+//        
+//    }
 
 }
diff --git a/querydsl-core/src/main/java/com/mysema/query/codegen/ClassModel.java b/querydsl-core/src/main/java/com/mysema/query/codegen/ClassModel.java
index 246d52680..4176c7d5b 100644
--- a/querydsl-core/src/main/java/com/mysema/query/codegen/ClassModel.java
+++ b/querydsl-core/src/main/java/com/mysema/query/codegen/ClassModel.java
@@ -73,7 +73,7 @@ public class ClassModel implements Comparable<ClassModel> {
     
     private String superType;
 
-    private boolean listsAsCollections;    
+//    private boolean listsAsCollections;    
 
     public ClassModel(String superType, String packageName, String name, String simpleName) {
         this.superType = superType;
@@ -121,18 +121,10 @@ public class ClassModel implements Comparable<ClassModel> {
             simpleCollections.add(field);
             break;
         case ENTITYLIST:
-            if (listsAsCollections){
-                entityCollections.add(field);
-            }else{
-                entityLists.add(field);    
-            }            
+            entityLists.add(field);
             break;
         case SIMPLELIST:
-            if (listsAsCollections){
-                simpleCollections.add(field);
-            }else{
-                simpleLists.add(field);    
-            }            
+            simpleLists.add(field);
             break;
         case ENTITYMAP:
             entityMaps.add(field);
@@ -306,8 +298,8 @@ public class ClassModel implements Comparable<ClassModel> {
         return field;
     }
 
-    public void setListsAsCollections(boolean b) {
-        listsAsCollections = b;        
-",removed skipLists,"""Remove listsAsCollections feature from Querydsl""","""Remove listsAsCollections flag and related code""","Removed the 'listsAsCollections' property and its related methods from the Processor and ClassModel classes.

The following changes were made in the Processor class:

1. The 'listsAsCollections' property was removed.
2. The 'listsAsCollections()' method was removed.
3. The 'classModel.setListsAsCollections(listsAsCollections)' line was commented out in both 'dtoElementVisitor' and 'entityElementVisitor' methods.

The following changes were made in the ClassModel class:

1. The 'listsAsCollections' property was removed.
2. The 'setListsAsCollections(boolean b)' method was removed.
3. In the 'addField(FieldModel field)' method, the 'if (listsAsCollections)' condition was removed, and the field was directly added to 'entityLists' or 'simpleLists' based on its type.

This commit removes the functionality to process lists as collections in the QueryDSL library.",Disable `listsAsCollections` functionality by commenting out related code in `Processor.java` and `ClassModel.java`.
"diff --git a/h2/src/tools/org/h2/build/Build.java b/h2/src/tools/org/h2/build/Build.java
index 945be9f52..43f23b971 100644
--- a/h2/src/tools/org/h2/build/Build.java
+++ b/h2/src/tools/org/h2/build/Build.java
@@ -926,11 +926,13 @@ private void test(boolean fast) {
         int ret;
         if (fast) {
             ret = execJava(args(
+                    ""-ea"",
                     ""-Xmx128m"",
                     ""-cp"", cp,
                     ""org.h2.test.TestAll"", ""fast""));
         }",Enabled java assertions in tests : - ea,"""Enable assertions in fast test mode""","""Add -ea and -Xmx128m flags to fast test execution""","""Added -ea flag to enable assertions in fast tests in Build.java""",Added assertion checks to the JVM options for fast tests in the Build.java file.
"diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java
index 5be5ad8557e..72b571d19e0 100644
--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java
+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterServer.java
@@ -40,29 +40,29 @@ import org.neo4j.kernel.impl.util.StringLogger;
  */
 public class MasterServer extends Server<Master, Void>
 {
-    static final byte PROTOCOL_VERSION = 1;
-    
+    static final byte PROTOCOL_VERSION = 2;
+
     static final int FRAME_LENGTH = Protocol.DEFAULT_FRAME_LENGTH;
-    
+
     public MasterServer( Master realMaster, final int port, StringLogger logger, int maxConcurrentTransactions,
             int oldChannelThreshold )
     {
         super( realMaster, port, logger, FRAME_LENGTH, PROTOCOL_VERSION, maxConcurrentTransactions,
                 oldChannelThreshold );
     }
-    
+
     @Override
     protected RequestType<Master> getRequestContext( byte id )
     {
         return HaRequestType.values()[id];
     }
-    
+
     @Override
     protected void finishOffChannel( Channel channel, SlaveContext context )
     {
         getMaster().finishTransaction( context, false );
     }
-    
+
     @Override
     public void shutdown()
     {",Bumped the Application Version since an HA request type has been added,"""Bump MasterServer protocol version to 2""","""Update MasterServer protocol version to 2""","""Update MasterServer protocol version from 1 to 2""",Updated MasterServer protocol version from 1 to 2 and improved code formatting.
"diff --git a/modules/swagger-codegen/src/main/resources/csharp/Configuration.mustache b/modules/swagger-codegen/src/main/resources/csharp/Configuration.mustache
index 440288a4832..b5ebd08ba87 100644
--- a/modules/swagger-codegen/src/main/resources/csharp/Configuration.mustache
+++ b/modules/swagger-codegen/src/main/resources/csharp/Configuration.mustache
@@ -12,6 +12,45 @@ namespace {{packageName}}.Client
     /// </summary>
     public class Configuration
     {
+        /// <summary>
+        /// Initializes a new instance of the Configuration class with different settings
+        /// </summary>
+        /// <param name=""apiClient"">Api client</param>
+        /// <param name=""defaultHeader"">Dictionary of default HTTP header</param>
+        /// <param name=""username"">Username</param>
+        /// <param name=""password"">Password</param>
+        /// <param name=""accessToken"">accessToken</param>
+        /// <param name=""apiKey"">Dictionary of API key</param>
+        /// <param name=""apiKeyPrefix"">Dictionary of API key prefix</param>
+        /// <param name=""tempFolderPath"">Temp folder path</param>
+        /// <param name=""dateTimeFormat"">DateTime format string</param>
+        public Configuration(ApiClient apiClient,
+                             Dictionary<String, String> defaultHeader,
+                             string username,
+                             string password,
+                             string accessToken,
+                             Dictionary<String, String> apiKey,
+                             Dictionary<String, String> apiKeyPrefix,
+                             string tempFolderPath,
+                             string dateTimeFormat
+                            )
+        {
+            if (apiClient == null)
+                ApiClient = ApiClient.Default;
+            else 
+                ApiClient = apiClient;
+
+            Username = username;
+            Password = password;
+            AccessToken = accessToken;
+            ApiKey = apiKey;
+            ApiKeyPrefix = apiKeyPrefix;
+
+            TempFolderPath = tempFolderPath;
+            DateTimeFormat = dateTimeFormat;
+
+        }
+
         /// <summary>
         /// Initializes a new instance of the Configuration class.
         /// </summary>
diff --git a/samples/client/petstore/csharp/SwaggerClientTest/Lib/SwaggerClient/src/main/csharp/IO/Swagger/Client/Configuration.cs b/samples/client/petstore/csharp/SwaggerClientTest/Lib/SwaggerClient/src/main/csharp/IO/Swagger/Client/Configuration.cs
index 588b106dec9..bfbb9d7479d 100644
--- a/samples/client/petstore/csharp/SwaggerClientTest/Lib/SwaggerClient/src/main/csharp/IO/Swagger/Client/Configuration.cs
+++ b/samples/client/petstore/csharp/SwaggerClientTest/Lib/SwaggerClient/src/main/csharp/IO/Swagger/Client/Configuration.cs
@@ -12,11 +12,53 @@ namespace IO.Swagger.Client
     /// </summary>
     public class Configuration
     {
+        /// <summary>
+        /// Initializes a new instance of the Configuration class with different settings
+        /// </summary>
+        /// <param name=""apiClient"">Api client</param>
+        /// <param name=""defaultHeader"">Dictionary of default HTTP header</param>
+        /// <param name=""username"">Username</param>
+        /// <param name=""password"">Password</param>
+        /// <param name=""accessToken"">accessToken</param>
+        /// <param name=""apiKey"">Dictionary of API key</param>
+        /// <param name=""apiKeyPrefix"">Dictionary of API key prefix</param>
+        /// <param name=""tempFolderPath"">Temp folder path</param>
+        /// <param name=""dateTimeFormat"">DateTime format string</param>
+        public Configuration(ApiClient apiClient = null,
+                             Dictionary<String, String> defaultHeader = null,
+                             string username = null,
+                             string password = null,
+                             string accessToken = null,
+                             Dictionary<String, String> apiKey = null,
+                             Dictionary<String, String> apiKeyPrefix = null,
+                             string tempFolderPath = null,
+                             string dateTimeFormat = null
+                            )
+        {
+            if (apiClient == null)
+                ApiClient = ApiClient.Default;
+            else 
+                ApiClient = apiClient;
+
+            Username = username;
+            Password = password;
+            AccessToken = accessToken;
+
+			if (apiKey != null)
+                ApiKey = apiKey;
+			if (apiKeyPrefix != null)
+			    ApiKeyPrefix = apiKeyPrefix;
+
+            TempFolderPath = tempFolderPath;
+            DateTimeFormat = dateTimeFormat;
+
+        }
+
         /// <summary>
         /// Initializes a new instance of",add constructor to configuration,"""Added overloaded Configuration constructor with optional parameters for C# clients""","Added optional parameters to Configuration class in C# client generation

This commit message summarizes the changes made in the diff, which include adding optional parameters to the Configuration class in C# client generation.","The commit message could be: ""Added new constructor to Configuration class with different settings in C# client""","""Add constructor to Configuration class for customizable settings including ApiClient, headers, authentication details, and paths."""
"diff --git a/pom.xml b/pom.xml
index 4808e614f6..5820989816 100644
--- a/pom.xml
+++ b/pom.xml
@@ -77,7 +77,6 @@
         <module>spring-zuul</module>
         <module>jsf</module>
         <module>xml</module>
-        <module>spring-4.3</module>
         <module>lombok</module>
         <module>redis</module>
 		",removing missing module form main pom . xml,"""Remove spring-4.3 module from pom.xml""","""Removed spring-4.3 module from pom.xml""","""Removed spring-4.3 module from pom.xml""",Removed the spring-4.3 module from the project dependencies in pom.xml.
"diff --git a/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProvider.java b/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProvider.java
index c9195094b..d7af42d9f 100644
--- a/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProvider.java
+++ b/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProvider.java
@@ -48,7 +48,7 @@ public class JacksonMessageBodyProvider implements MessageBodyReader<Object>,
                               Type genericType,
                               Annotation[] annotations,
                               MediaType mediaType) {
-        return json.canDeserialize(type);
+        return !isIgnored(type) && json.canDeserialize(type);
     }
 
     @Override
@@ -83,8 +83,12 @@ public class JacksonMessageBodyProvider implements MessageBodyReader<Object>,
                                Type genericType,
                                Annotation[] annotations,
                                MediaType mediaType) {
+        return !isIgnored(type) && json.canSerialize(type);
+    }
+
+    private boolean isIgnored(Class<?> type) {
         final JsonIgnoreType ignore = type.getAnnotation(JsonIgnoreType.class);
-        return !((ignore != null) && ignore.value()) && json.canSerialize(type);
+        return (ignore != null) && ignore.value();
     }
 
     @Override
diff --git a/dropwizard-core/src/test/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProviderTest.java b/dropwizard-core/src/test/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProviderTest.java
index 108360c9e..eed39be9d 100644
--- a/dropwizard-core/src/test/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProviderTest.java
+++ b/dropwizard-core/src/test/java/com/yammer/dropwizard/jersey/JacksonMessageBodyProviderTest.java
@@ -75,6 +75,18 @@ public class JacksonMessageBodyProviderTest {
                    is(true));
     }
 
+    @Test
+    public void doesNotReadIgnoredTypes() throws Exception {
+        assertThat(provider.isReadable(Ignorable.class, null, null, null),
+                   is(false));
+    }
+
+    @Test
+ ",Add more support for @ JsonIgnoreType .,"""Add support for ignoring types annotated with @JsonIgnoreType in JacksonMessageBodyProvider""","According to the diff, the commit message should be:

""Add support for ignoring types with @JsonIgnoreType annotation""

This commit message accurately reflects the changes made in the code, which include adding a new method `isIgnored` to check if a type is ignored and modifying the `isReadable` and `isWriteable` methods to take this into account.","""Fix JacksonMessageBodyProvider to ignore types annotated with @JsonIgnoreType
+
+   The JacksonMessageBodyProvider now checks if a type is annotated with @JsonIgnoreType before checking if it can be deserialized or serialized. If the type is annotated with @JsonIgnoreType and the ignore value is true, the provider will return false for both isReadable and isWriteable methods.
+
+   A new private method isIgnored(Class<?> type) was added to check if a type is annotated with @JsonIgnoreType and if the ignore value is true.
+
+   A new test case was added to ensure that the provider does not try to read ignored types.""",Prevent Jackson from reading or writing types annotated with @JsonIgnoreType in JacksonMessageBodyProvider.
"diff --git a/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagAttributeTests.java b/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagAttributeTests.java
index 6e36ec72e3..8ef1dab27a 100644
--- a/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagAttributeTests.java
+++ b/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagAttributeTests.java
@@ -68,4 +68,8 @@ public class AuthorizeTagAttributeTests extends TestCase {
 
         ContextHolder.setContext(context);
     }
+    
+    protected void tearDown() throws Exception {
+		ContextHolder.setContext(null);
+	}
 }
diff --git a/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagTests.java b/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagTests.java
index 257889ee2e..2e53784dd6 100644
--- a/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagTests.java
+++ b/core/src/test/java/org/acegisecurity/taglibs/authz/AuthorizeTagTests.java
@@ -109,4 +109,8 @@ public class AuthorizeTagTests extends TestCase {
 
         ContextHolder.setContext(context);
     }
+
+    protected void tearDown() throws Exception {
+		ContextHolder.setContext(null);
+	}
 }",Added tearDown ( ) method to clear ContextHolder .,"""Added tearDown method to reset ContextHolder in AuthorizeTagAttributeTests and AuthorizeTagTests""",Added tearDown method to reset ContextHolder in AuthorizeTagAttributeTests and AuthorizeTagTests.,"""Added tearDown method to set ContextHolder to null in AuthorizeTagAttributeTests and AuthorizeTagTests""",Added tearDown method to reset ContextHolder in AuthorizeTagAttributeTests and AuthorizeTagTests after each test.
"diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java
index 39bc03f4117..38dbbb8f151 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java
@@ -49,6 +49,7 @@ import org.elasticsearch.action.support.ActiveShardCount;
 import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.action.support.WriteRequest;
 import org.elasticsearch.action.update.UpdateRequest;
+import org.elasticsearch.client.core.CountRequest;
 import org.elasticsearch.client.security.RefreshPolicy;
 import org.elasticsearch.cluster.health.ClusterHealthStatus;
 import org.elasticsearch.common.Nullable;
@@ -442,6 +443,16 @@ final class RequestConverters {
         return request;
     }
 
+    static Request count(CountRequest countRequest) throws IOException {
+        Request request = new Request(HttpPost.METHOD_NAME, endpoint(countRequest.indices(), countRequest.types(), ""_count""));
+        Params params = new Params(request);
+        params.withRouting(countRequest.routing());
+        params.withPreference(countRequest.preference());
+        params.withIndicesOptions(countRequest.indicesOptions());
+        request.setEntity(createEntity(countRequest.source(), REQUEST_BODY_CONTENT_TYPE));
+        return request;
+    }
+
     static Request explain(ExplainRequest explainRequest) throws IOException {
         Request request = new Request(HttpGet.METHOD_NAME,
             endpoint(explainRequest.index(), explainRequest.type(), explainRequest.id(), ""_explain""));
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java
index d8dce990a4d..11fff4c0a6b 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java
@@ -56,6 +56,8 @@ import org.elasticsearch.action.search.SearchScrollRequest;
 import org.elasticsearch.action.support.master.AcknowledgedResponse;
 import org.elasticsearch.action.update.UpdateRequest;
 import org.elasticsearch.action.update.UpdateResponse;
+import org.elasticsearch.client.core.CountRequest;
+import org.elasticsearch.client.core.CountResponse;
 import org.elasticsearch.client.core.TermVectorsResponse;
 import org.elasticsearch.client.core.TermVectorsRequest;
 import org.elasticsearch.common.CheckedConsumer;
@@ -791,6 +793,31 @@ public class RestHighLevelClient implements Closeable {
                 emptySet());
     }
 
+    /**
+     * Executes a count request using the Count API.
+     * See <a href=""https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html"">Count API on elastic.co</a>
+     * @param countRequest the request
+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized
+     * @return the response
+     * @throws IOException in case there is a problem sending the request or parsing back the response
+     */
+    public final CountResponse count(CountRequest countRequest, RequestOptions options) throws IOException {
+        return performRequestAndParseEntity(countRequest, RequestConverters::count, options, CountResponse::fromXContent,
+        emptySet());
+    }
+
+    /**
+     * Asynchronously executes a count request using the Count API.
+     * See <a href=""https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html"">Count API on elastic.co</a>
+     * @param countRequest the request
+     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized
+     * @param listener the listener to be notified upon request completion
+     */
+    public final void countAsync(CountRequest countRequest, RequestOptions options, ActionListener<CountResponse> listener) {
+        performRequestAsyncAndParseEntity(countRequest, RequestConverters::count,  options,CountResponse::fromXContent,
+            listener, emptySet());
+    }
+
     /**
      * Updates a document using the Update API.
      * See <a href=""https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html"">Update API on elastic.co</a>
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java
new file mode 100644
index 00000000000..6d4589c7861
--- /dev/null
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java
@@ -0,0 +1,206 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.client.core;
+
+import org.elasticsearch.action.ActionRequest;
+import org.elasticsearch.action.ActionRequestValidationException;
+import org.elasticsearch.action.IndicesRequest;
+import org.elasticsearch.action.support.IndicesOptions;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.search.builder.SearchSourceBuilder;
+
+import java.util.Arrays;
+import java.util.Objects;
+
+import static org.elasticsearch.action.search.SearchRequest.DEFAULT_INDICES_OPTIONS;
+
+/**
+ * Encapsulates a request to _count API against one, several or all indices.
+ */
+public final class CountRequest extends ActionRequest implements IndicesRequest.Replaceable {
+
+    private String[] indices = Strings.EMPTY_ARRAY;
+    private String[] types = Strings.EMPTY_ARRAY;
+    private String routing;
+    private String preference;
+    private SearchSourceBuilder searchSourceBuilder;
+    private IndicesOptions indicesOptions = DEFAULT_INDICES_OPTIONS;
+
+    public CountRequest() {
+        this.searchSourceBuilder = new SearchSourceBuilder();
+    }
+
+    /**
+     * Constructs a new count request against the indices. No indices provided here means that count will execute on all indices.
+     */
+    public CountRequest(String... indices) {
+        this(indices, new SearchSourceBuilder());
+    }
+
+    /**
+     * Constructs a new search request against the provided indices with the given search source.
+     */
+    public CountRequest(String[] indices, SearchSourceBuilder searchSourceBuilder) {
+        indices(indices);
+        this.searchSourceBuilder = searchSourceBuilder;
+    }
+
+    @Override
+    public ActionRequestValidationException validate() {
+        return null;
+    }
+
+    /**
+     * Sets the indices the count will be executed on.
+     */
+    public CountRequest indices(String... indices) {
+        Objects.requireNonNull(indices, ""indices must not be null"");
+        for (String index : indices) {
+            Objects.requireNonNull(index, ""index must not be null"");
+        }
+        this.indices = indices;
+        return this;
+    }
+
+    /**
+     * The source of the count request.
+     */
+    public CountRequest source(SearchSourceBuilder searchSourceBuilder) {
+        this.searchSourceBuilder = Objects.requireNonNull(searchSourceBuilder, ""source must not be null"");
+        return this;
+    }
+
+    /**
+     * The document types to execute the count against. Defaults to be executed against all types.
+     *
+     * @deprecated Types are going away, prefer filtering on a type.
+     */
+    @Deprecated
+    public CountRequest types(String... types) {
+        Objects.requireNonNull(types, ""types must not be null"");
+        for (String type : types) {
+            Objects.requireNonNull(type, ""type must not be null"");
+        }
+        this.types = types;
+        return this;
+    }
+
+    /**
+     * The routing values to control the shards that the search will be executed on.
+     */
+    public CountRequest routing(String routing) {
+        this.routing = routing;
+        return this;
+    }
+
+    /**
+     * A comma separated list of routing values to control the shards the count will be executed on.
+     */
+    public CountRequest routing(String... routings) {
+        this.routing = Strings.arrayToCommaDelimitedString(routings);
+        return this;
+    }
+
+    /**
+     * Returns the indices options used to resolve indices. They tell for instance whether a single index is accepted, whether an empty
+     * array will be converted to _all, and how wildcards will be expanded if needed.
+     *
+     * @see org.elasticsearch.action.support.IndicesOptions
+     */
+    public CountRequest indicesOptions(IndicesOptions indicesOptions) {
+        this.indicesOptions = Objects.requireNonNull(indicesOptions, ""indicesOptions must not be null"");
+        return this;
+    }
+
+    /**
+     * Sets the preference to execute the count. Defaults to randomize across shards. Can be set to {@code _local} to prefer local shards
+     * or a custom value, which guarantees that the same order will be used across different requests.
+     */
+    public CountRequest preference(String preference) {
+        this.preference = preference;
+        return this;
+    }
+
+    public IndicesOptions indicesOptions() {
+        return this.indicesOptions;
+    }
+
+    public String routing() {
+        return this.routing;
+    }
+
+    public String preference() {
+        return this.preference;
+    }
+
+    public String[] indices() {
+        return Arrays.copyOf(this.indices, this.indices.length);
+    }
+
+    public Float minScore() {
+        return this.searchSourceBuilder.minScore();
+    }
+
+    public CountRequest minScore(Float minScore) {
+        this.searchSourceBuilder.minScore(minScore);
+        return this;
+    }
+
+    public int terminateAfter() {
+        return this.searchSourceBuilder.terminateAfter();
+    }
+
+    public CountRequest terminateAfter(int terminateAfter) {
+        this.searchSourceBuilder.terminateAfter(terminateAfter);
+        return this;
+    }
+
+    public String[] types() {
+        return Arrays.copyOf(this.types, this.types.length);
+    }
+
+    public SearchSourceBuilder source() {
+        return this.searchSourceBuilder;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        CountRequest that = (CountRequest) o;
+        return Objects.equals(indicesOptions, that.indicesOptions) &&
+            Arrays.equals(indices, that.indices) &&
+            Arrays.equals(types, that.types) &&
+            Objects.equals(routing, that.routing) &&
+            Objects.equals(preference, that.preference);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = Objects.hash(indicesOptions, routing, preference);
+        result = 31 * result + Arrays.hashCode(indices);
+        result = 31 * result + Arrays.hashCode(types);
+        return result;
+    }
+}
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountResponse.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountResponse.java
new file mode 100644
index 00000000000..f97f79127e6
--- /dev/null
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountResponse.java
@@ -0,0 +1,236 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the ""License""); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.client.core;
+
+import org.elasticsearch.action.ActionResponse;
+import org.elasticsearch.action.search.ShardSearchFailure;
+import org.elasticsearch.common.ParseField;
+import org.elasticsearch.common.xcontent.XContentParser;
+import org.elasticsearch.rest.RestStatus;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;
+
+/**
+ * A response to _count API request.
+ */
+public final class CountResponse extends ActionResponse {
+
+    static final ParseField COUNT = new ParseField(""count"");
+    static final ParseField TERMINATED_EARLY = new ParseField(""terminated_early"");
+    static final ParseField SHARDS = new ParseField(""_shards"");
+
+    private final long count;
+    private final Boolean terminatedEarly;
+    private final ShardStats shardStats;
+
+    public CountResponse(long count, Boolean terminatedEarly, ShardStats shardStats) {
+        this.count = count;
+        this.terminatedEarly = terminatedEarly;
+        this.shardStats = shardStats;
+    }
+
+    public ShardStats getShardStats() {
+        return shardStats;
+    }
+
+    /**
+     * Number of documents matching request.
+     */
+    public long getCount() {
+        return count;
+    }
+
+    /**
+     * The total number of shards the search was executed on.
+     */
+    public int getTotalShards() {
+        return shardStats.totalShards;
+    }
+
+    /**
+     * The successful number of shards the search was executed on.
+     */
+    public int getSuccessfulShards() {
+        return shardStats.successfulShards;
+    }
+
+    /**
+     * The number of shards skipped due to pre-filtering
+     */
+    public int getSkippedShards() {
+        return shardStats.skippedShards;
+    }
+
+    /**
+     * The failed number of shards the search was executed on.
+     */
+    public int getFailedShards() {
+        return shardStats.shardFailures.length;
+    }
+
+    /**
+     * The failures that occurred during the search.
+     */
+    public ShardSearchFailure[] getShardFailures() {
+        return shardStats.shardFailures;
+    }
+
+    public RestStatus status() {
+        return RestStatus.status(shardStats.successfulShards, shardStats.totalShards, shardStats.shardFailures);
+    }
+
+    public static CountResponse fromXContent(XContentParser parser) throws IOException {
+        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);
+        parser.nextToken();
+        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);
+        String currentName = parser.currentName();
+        Boolean terminatedEarly = null;
+        long count = 0;
+        ShardStats shardStats = new ShardStats(-1, -1,0, ShardSearchFailure.EMPTY_ARRAY);
+
+        for (XContentParser.Token token = parser.nextToken(); token != XContentParser.Token.END_OBJECT; token = parser.nextToken()) {
+            if (token == XContentParser.Token.FIELD_NAME) {
+                currentName = parser.currentName();
+            } else if (token.isValue()) {
+                if (COUNT.match(currentName, parser.getDeprecationHandler())) {
+                    count = parser.longValue();
+                } else if (TERMINATED_EARLY.match(currentName, parser.getDeprecationHandler())) {
+                    terminatedEarly = parser.booleanValue();
+                } else {
+                    parser.skipChildren();
+                }
+            } else if (token == XContentParser.Token.START_OBJECT) {
+                if (SHARDS.match(currentName, parser.getDeprecationHandler())) {
+                    shardStats = ShardStats.fromXContent(parser);
+                } else {
+                    parser.skipChildren();
+                }
+            }
+        }
+        return new CountResponse(count, terminatedEarly, shardStats);
+    }
+
+    @Override
+    public String toString() {
+        String s = ""{"" +
+            ""count="" + count +
+            (isTerminatedEarly() != null ? "", terminatedEarly="" + terminatedEarly : """") +
+            "", "" + shardStats +
+            '}';
+        return s;
+    }
+
+    public Boolean isTerminatedEarly() {
+        return terminatedEarly;
+    }
+
+    /**
+     * Encapsulates _shards section of count api response.
+     */
+    public static final class ShardStats {
+
+        static final ParseField FAILED = new ParseField(""failed"");
+        static final ParseField SKIPPED = new ParseField(""skipped"");
+        static final ParseField TOTAL = new ParseField(""total"");
+        static final ParseField SUCCESSFUL = new ParseField(""successful"");
+        static final ParseField FAILURES = new ParseField(""failures"");
+
+        private final int successfulShards;
+        private final int totalShards;
+        private final int skippedShards;
+        private final ShardSearchFailure[] shardFailures;
+
+        public ShardStats(int successfulShards, int totalShards, int skippedShards, ShardSearchFailure[] shardFailures) {
+            this.successfulShards = successfulShards;
+            this.totalShards = totalShards;
+            this.skippedShards = skippedShards;
+            this.shardFailures = Arrays.copyOf(shardFailures, shardFailures.length);
+        }
+
+        public int getSuccessfulShards() {
+            return successfulShards;
+        }
+
+        public int getTotalShards() {
+            return totalShards;
+        }
+
+        public int getSkippedShards() {
+            return skippedShards;
+        }
+
+        public ShardSearchFailure[] getShardFailures() {
+            return Arrays.copyOf(shardFailures, shardFailures.length, ShardSearchFailure[].class);
+        }
+
+        static ShardStats fromXContent(XContentParser parser) throws IOException {
+            int successfulShards = -1;
+            int totalShards = -1;
+            int skippedShards = 0; //BWC @see org.elasticsearch.action.search.SearchResponse
+            List<ShardSearchFailure> failures = new ArrayList<>();
+            XContentParser.Token token;
+            String currentName = parser.currentName();
+            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
+                if (token == XContentParser.Token.FIELD_NAME) {
+                    currentName = parser.currentName();
+                } else if (token.isValue()) {
+                    if (FAILED.match(currentName, parser.getDeprecationHandler())) {
+                        parser.intValue();
+                    } else if (SKIPPED.match(currentName, parser.getDeprecationHandler())) {
+                        skippedShards = parser.intValue();
+                    } else if (TOTAL.match(currentName, parser.getDeprecationHandler())) {
+                        totalShards = parser.intValue();
+                    } else if (SUCCESSFUL.match(currentName, parser.getDeprecationHandler())) {
+                        successfulShards = parser.intValue();
+                    } else {
+                        parser.skipChildren();
+                    }
+                } else if (token == XContentParser.Token.START_ARRAY) {
+                    if (FAILURES.match(currentName, parser.getDeprecationHandler())) {
+                        while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {
+                            failures.add(ShardSearchFailure.fromXContent(parser));
+                        }
+                    } else {
+                        parser.skipChildren();
+                    }
+                } else {
+                    parser.skipChildren();
+                }
+            }
+            return new ShardStats(successfulShards, totalShards, skippedShards, failures.toArray(new ShardSearchFailure[failures.size()]));
+        }
+
+        @Override
+        public String toString() {
+            return ""_shards : {"" +
+                ""total="" + totalShards +
+                "", successful="" + successfulShards +
+                "", skipped="" + skippedShards +
+                "", failed="" + (shardFailures != null && shardFailures.length > 0 ? shardFailures.length : 0 ) +
+                (shardFailures != null && shardFailures.length > 0 ? "", failures: "" + Arrays.asList(shardFailures): """") +
+                '}';
+        }
+    }
+}
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java
index 76b64241ef6..1e0f0f70b2f 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java
@@ -56,6 +56,7 @@ import org.elasticsearch.action.support.replication.ReplicationRequest;
 import org.elasticsearch.client.core.TermVectorsRequest;
 import org.elasticsearch.action.update.UpdateRequest;
 import org.elasticsearch.client.RequestConverters.EndpointBuilder;
+import org.elasticsearch.client.core.CountRequest;
 import org.elasticsearch.common.CheckedBiConsumer;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.bytes.BytesArray;
@@ -968,6 +969,72 @@ public class RequestConvertersTests extends ESTestCase {
         expectThrows(NullPointerException.class, () -> new SearchRequest().types((String[]) null));
     }
 
+     public void testCountNotNullSource() throws IOException {
+        //as we create SearchSourceBuilder in CountRequest constructor
+        CountRequest countRequest = new CountRequest();
+        Request request = RequestConverters.count(countRequest);
+        assertEquals(HttpPost.METHOD_NAME, request.getMethod());
+        assertEquals(""/_count"", request.getEndpoint());
+        assertNotNull(request.getEntity());
+    }
+
+    public void testCount() throws Exception {
+        String[] indices = randomIndicesNames(0, 5);
+        CountRequest countRequest = new CountRequest(indices);
+
+  ",Add document _count API ( <issue_id> ) .,"""Add support for Count API in RestHighLevelClient""","Added support for Count API

This commit introduces a new `CountRequest` class and a corresponding `CountResponse` class to support the Count API in Elasticsearch. It also adds a new method `count` to the `RestHighLevelClient` class to execute a count request and a new method `countAsync` to execute a count request asynchronously. Additionally, a new method `count` is added to the `RequestConverters` class to convert a `CountRequest` to a `Request`.","This commit adds the CountRequest and CountResponse classes to the RestHighLevelClient for executing count requests using the Count API. It also includes the necessary changes to RequestConverters and RestHighLevelClient to handle the new request and response types. Additionally, a new test class, RequestConvertersTests, has been added to test the functionality of the CountRequest and CountResponse classes.","""Add CountRequest and CountResponse implementations, and integrate count API with the ElasticSearch high-level REST client."""
"diff --git a/lib.profiler.common/src/org/netbeans/lib/profiler/common/integration/IntegrationUtils.java b/lib.profiler.common/src/org/netbeans/lib/profiler/common/integration/IntegrationUtils.java
index c07f2a3c8..cdba256c4 100644
--- a/lib.profiler.common/src/org/netbeans/lib/profiler/common/integration/IntegrationUtils.java
+++ b/lib.profiler.common/src/org/netbeans/lib/profiler/common/integration/IntegrationUtils.java
@@ -474,6 +474,23 @@ public class IntegrationUtils {
                append(getLibsDir(targetPlatform, isRemote)).append("","").append(portNumber); //NOI18N
         return args.toString();
     }
+    
+    public static String getProfilerAgentCommandLineArgsWithoutQuotes(String targetPlatform, String targetJVM, boolean isRemote,
+                                                                      int portNumber, String pathSpaceChar) {
+        StringBuilder args = new StringBuilder();
+        
+        if ((targetJVM.equals(PLATFORM_JAVA_60) || targetJVM.equals(PLATFORM_JAVA_70) || targetJVM.equals(PLATFORM_JAVA_80)) && 
+            (targetPlatform.equals(PLATFORM_LINUX_OS) || targetPlatform.equals(PLATFORM_LINUX_AMD64_OS))) {
+            args.append("" -XX:+UseLinuxPosixThreadCPUClocks ""); // NOI18N
+        }
+        String natLibs = getNativeLibrariesPath(targetPlatform, targetJVM, isRemote).replace("" "", pathSpaceChar != null ? pathSpaceChar : "" "");
+        String libsDir = getLibsDir(targetPlatform, isRemote).replace("" "", pathSpaceChar != null ? pathSpaceChar : "" "");
+        String agentFile = getProfilerAgentLibraryFile(targetPlatform).replace("" "", pathSpaceChar != null ? pathSpaceChar : "" "");
+        args.append(""-agentpath:"").append(natLibs). // NOI18N
+               append(getDirectorySeparator(targetPlatform)).append(agentFile).append(""=""). //NOI18N
+               append(libsDir).append("","").append(portNumber); //NOI18N
+        return args.toString();
+    }
 
     // Returns filename of profiler agent library
     public static String getProfilerAgentLibraryFile(String targetPlatform) {
diff --git a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor.java b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor.java
index 464a551ac..6e11a1668 100644
--- a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor.java
+++ b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor.java
@@ -355,7 +355,7 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
 
     /** Create a multi-class packet of instrumented methods or classes */
     protected Object[] createInstrumentedMethodPack() {
-        if (nInstrMethods == 0) {
+        if (nInstrClasses == 0) {
             return null;
         }
 
@@ -372,12 +372,7 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
 
     protected void markClassAndMethodForInstrumentation(DynamicClassInfo clazz, int methodIdx) {
         if ((status.getStartingMethodId() + nInstrMethods) < 65535) {
-            String classNameAndLoader = clazz.getNameAndLoader();
-
-            if (!instrClasses.containsKey(classNameAndLoader)) {
-                instrClasses.put(classNameAndLoader, clazz);
-                nInstrClasses++;
-            }
+            addInsrClass(clazz);
 
             nInstrMethods++;
         } else { // Can't instrument more than 64K methods - mark this method as already instrumented
@@ -385,6 +380,29 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
         }
     }
 
+    protected void markProfilingPointForInstrumentation(String classNameDot, String className, int classLoaderId) {
+        RuntimeProfilingPoint[] pp = engineSettings.getRuntimeProfilingPoints();
+        for (RuntimeProfilingPoint point : pp) {
+            if (classNameDot.equals(point.getClassName())) {
+                DynamicClassInfo clazz = javaClassForName(className, classLoaderId);
+                
+                if (clazz != null) {
+                    markProfilingPonitForInstrumentation(clazz);
+                }
+                return;
+            }
+        }
+    }
+
+    protected void markProfilingPonitForInstrumentation(DynamicClassInfo clazz) {
+        RuntimeProfilingPoint[] pp = engineSettings.getRuntimeProfilingPoints();
+        RuntimeProfilingPoint[] ppclass = getRuntimeProfilingPoints(pp,clazz);
+        
+        if (ppclass.length > 0) {
+            addInsrClass(clazz);
+        }
+    }
+
     protected boolean markMethod(DynamicClassInfo clazz, int rootMethod) {
         String rootMethodName = rootMethods.methodNames[rootMethod];
         String rootMethodSignature = rootMethods.methodSignatures[rootMethod];
@@ -427,7 +445,7 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
 
         return true;
     }
-
+    
     //---------------------------- Private implementation of instrumentation data packing ---------------------------
 
     /** Create a multi-class packet of instrumented 1.5-style data */
@@ -519,6 +537,7 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
                                                                                                              normalInjectionType,
                                                                                                              points);
                         clazz.saveMethodInfo(i, replacementMethodInfos[i]);
+                        imInClass++;
                     }
                 } else {
                     replacementMethodInfos[i] = clazz.getMethodInfo(i); // Will return the previously instrumented methodInfo
@@ -608,4 +627,13 @@ public abstract class RecursiveMethodInstrumentor extends ClassManager {
             }
         }
     }
+
+    private void addInsrClass(final DynamicClassInfo clazz) {
+        String classNameAndLoader = clazz.getNameAndLoader();
+
+        if (!instrClasses.containsKey(classNameAndLoader)) {
+            instrClasses.put(classNameAndLoader, clazz);
+            nInstrClasses++;
+        }
+    }
 }
diff --git a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor1.java b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor1.java
index b799b7cb9..c4f75a24a 100644
--- a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor1.java
+++ b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor1.java
@@ -105,6 +105,7 @@ public class RecursiveMethodInstrumentor1 extends RecursiveMethodInstrumentor {
 
             String className = loadedClassInfos[j].getName();
 
+            markProfilingPonitForInstrumentation(loadedClassInfos[j]);
             tryInstrumentSpawnedThreads(loadedClassInfos[j]);
 
             for (int rIdx = 0; rIdx < rootMethods.classNames.length; rIdx++) {
@@ -154,10 +155,12 @@ public class RecursiveMethodInstrumentor1 extends RecursiveMethodInstrumentor {
         return createInstrumentedMethodPack();
     }
 
-    public Object[] getMethodsToInstrumentUponClassLoad(String className, int classLoaderId, boolean threadInCallGraph) {
+    public Object[] getMethodsToInstrumentUponClassLoad(String classNameDot, int classLoaderId, boolean threadInCallGraph) {
         //System.out.println(""*** MS1: instr. upon CL: "" + className);
-        className = className.replace('.', '/').intern(); // NOI18N
+        String className = classNameDot.replace('.', '/').intern(); // NOI18N
 
+        initInstrMethodData();
+        markProfilingPointForInstrumentation(classNameDot,className,classLoaderId);
         // If a class doesn't pass the current instrumentation filter, we can't immediately reject it, since there is a chance
         // it contains some root methods. So we have to check that first.
         boolean isRootClass = false;
@@ -185,7 +188,7 @@ public class RecursiveMethodInstrumentor1 extends RecursiveMethodInstrumentor {
 
         if (!isRootClass) {
             if (normallyFilteredOut) {
-                return null;
+                return createInstrumentedMethodPack(); // profile points !
             }
         }
 
@@ -196,7 +199,6 @@ public class RecursiveMethodInstrumentor1 extends RecursiveMethodInstrumentor {
             return null; // Warning already issued
         }
 
-        initInstrMethodData();
         boolean instrumentClinit = threadInCallGraph;
 
         if (!clazz.isLoaded()) {
diff --git a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor2.java b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor2.java
index 05d717152..80bf1ae4c 100644
--- a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor2.java
+++ b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor2.java
@@ -105,6 +105,7 @@ public class RecursiveMethodInstrumentor2 extends RecursiveMethodInstrumentor {
                 continue; // Can this happen?
             }
 
+            markProfilingPonitForInstrumentation(loadedClassInfos[j]);
             tryInstrumentSpawnedThreads(loadedClassInfos[j]); // This only checks for Runnable.run()
 
             for (int rIdx = 0; rIdx < rootMethods.classNames.length; rIdx++) {
@@ -154,10 +155,12 @@ public class RecursiveMethodInstrumentor2 extends RecursiveMethodInstrumentor {
         return createInstrumentedMethodPack();
     }
 
-    public Object[] getMethodsToInstrumentUponClassLoad(String className, int classLoaderId, boolean threadInCallGraph) {
+    public Object[] getMethodsToInstrumentUponClassLoad(String classNameDot, int classLoaderId, boolean threadInCallGraph) {
         //System.out.println(""*** MS2: instr. upon CL: "" + className);
-        className = className.replace('.', '/').intern(); // NOI18N
+        String className = classNameDot.replace('.', '/').intern(); // NOI18N
 
+        initInstrMethodData();
+        markProfilingPointForInstrumentation(classNameDot,className,classLoaderId);
         // If a class doesn't pass the current instrumentation filter, we can't immediately reject it, since there is a chance
         // it contains some root methods. So we have to check that first.
         boolean isRootClass = false;
@@ -185,7 +188,7 @@ public class RecursiveMethodInstrumentor2 extends RecursiveMethodInstrumentor {
 
         if (!isRootClass) {
             if (normallyFilteredOut) {
-                return null;
+                return createInstrumentedMethodPack();  // profile points!
             }
         }
 
@@ -195,7 +198,6 @@ public class RecursiveMethodInstrumentor2 extends RecursiveMethodInstrumentor {
             return null; // Warning already issued
         }
 
-        initInstrMethodData();
         boolean instrumentClinit = threadInCallGraph;
 
         if (!clazz.isLoaded()) {
diff --git a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor3.java b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor3.java
index b8eddf499..740aa5315 100644
--- a/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor3.java
+++ b/lib.profiler/src/org/netbeans/lib/profiler/instrumentation/RecursiveMethodInstrumentor3.java
@@ -108,6 +108,7 @@ public class RecursiveMethodInstrumentor3 extends RecursiveMethodInstrumentor {
         boolean isRootClass = false;
         int rootIdxForAll = -1;
 
+        markProfilingPonitForInstrumentation(clazz);
         isRootClass = tryInstrumentSpawnedThreads(clazz); // This only checks for Runnable.run()
 
         if (noExplicitRootsSpecified && !mainMethodInstrumented) { // Check if this class has main method. The first loaded class with main method should be main class.
@@ -251,6 +252,7 @@ public class RecursiveMethodInstrumentor3 extends RecursiveMethodInstrumentor {
                 continue; // Can this happen?
             }
 
+            markProfilingPonitForInstrumentation(loadedClassInfos[j]);
             tryInstrumentSpawnedThreads(loadedClassInfos[j]); // This only checks for Runnable.run()
 
             for (int rIdx = 0; rIdx < rootMethods.classNames.length; rIdx++) {
diff --git a/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ClassesListControllerUI.java b/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ClassesListControllerUI.java
index d6940008d..a669ddda1 100644
--- a/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ClassesListControllerUI.java
+++ b/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ClassesListControllerUI.java
@@ -423,15 +423,14 @@ public class ClassesListControllerUI extends JTitledPanel {
     //~ Static fields/initializers -----------------------------------------------------------------------------------------------
                                                                                                                                        // -----
     private static Icon ICON_CLASSES = Icons.getIcon(HeapWalkerIcons.CLASSES);
-    private static String filterValue = """"; // NOI18N
-    private static int filterType = CommonConstants.FILTER_CONTAINS;
-
     // --- UI definition ---------------------------------------------------------
     private static final String DATA = ""Data""; // NOI18N
     private static final String NO_DATA = ""No data""; // NOI18N
 
     //~ Instance fields ----------------------------------------------------------------------------------------------------------
 
+    private String filterValue = """"; // NOI18N
+    private int filterType = CommonConstants.FILTER_CONTAINS;
     private CardLayout contents;
     private ClassesListController classesListController;
     private ClassesListTableModel realClassesListTableModel = new ClassesListTableModel();
@@ -949,6 +948,9 @@ public class ClassesListControllerUI extends JTitledPanel {
 
         classesListTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
             public void valueChanged(ListSelectionEvent e) {
+                if (e.getFirstIndex() != e.getLastIndex()) {
+                    realClassesListTableModel.setSelectedRow(e.getLastIndex());
+                }
                 restoreSelection();
             }
         });
diff --git a/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ReferencesBrowserControllerUI.java b/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ReferencesBrowserControllerUI.java
index ae6396d53..e4d08fa1f 100644
--- a/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ReferencesBrowserControllerUI.java
+++ b/profiler.heapwalker/src/org/netbeans/modules/profiler/heapwalk/ui/ReferencesBrowserControllerUI.java
@@ -365,16 +365,22 @@ public class ReferencesBrowserControllerUI extends JTitledPanel {
 
     private void selectPath(final CCTNode[] path, final int length) {
         if (length >= path.length) {
-            fieldsListTable.getTree().setSelectionPath(new TreePath(path));
+            final CCTNode node = (CCTNode)new TreePath(path).getLastPathComponent();
+            
+            // --- #208900 make sure the row is visible even if displaying a scrollbar
+            fieldsListTable.selectNode(node, true);
+            SwingUtilities.invokeLater(new Runnable() {
+                public void run() {
+                    fieldsListTable.selectNode(node, true);
+                }
+            });
+            // --- 
         } else {
             Object[] shortPath = new Object[length];
             System.arraycopy(path, 0, shortPath, 0, length);
             final TreePath p = new TreePath(shortPath);
             SwingUtilities.invokeLater(new Runnable() {
                 public void run() {
-//                    System.err.println("">>> Selecting length "" + length);
-                    fieldsListTable.getTree().setSelectionPath(p);
-                    fieldsListTable.scrollRectToVisible(fieldsListTable.getCellRect(fieldsListTable.getSelectedRow(), 0, true));
                     selectPath(path, length + MAX_STEP);
                 }
             });
diff --git a/profiler/nbproject/project.xml b/profiler/nbproject/project.xml
index 4f52e2d00..5959d0327 100644
--- a/profiler/nbproject/project.xml
+++ b/profiler/nbproject/project.xml
@@ -292,6 +292,7 @@ made subject to such option by the copyright holder.
                 <friend>org.netbeans.modules.profiler.nbimpl</friend>
                 <friend>org.netbeans.modules.profiler.ppoints</friend>
                 <friend>org.netbeans.modules.profiler.snaptracer</friend>
+                <friend>org.netbeans.modules.profiler.stp</friend>
                 <package>org.netbeans.modules.profiler</package>
                 <package>org.netbeans.modules.profiler.actions</package>
                 <package>org.netbeans.modules.profiler.ui</package>
diff --git a/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectRootMethodsPanel.java b/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectRootMethodsPanel.java
index cc1b786bb..b45e945ee 100644
--- a/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectRootMethodsPanel.java
+++ b/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectRootMethodsPanel.java
@@ -96,7 +96,7 @@ import org.openide.util.lookup.Lookups;
     ""SelectRootMethodsPanel_SelectViewLabel=Select &View: "",
     ""SelectRootMethodsPanel_AdvancedButtonText=&Advanced...""
 })
-final public class ProjectSelectRootMethodsPanel extends JPanel {
+final public class ProjectSelectRootMethodsPanel extends JPanel implements HelpCtx.Provider {
     final private static Logger LOG = Logger.getLogger(ProjectSelectRootMethodsPanel.class.getName());
     
     private static ProjectSelectRootMethodsPanel instance = null;
diff --git a/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectorPanel.java b/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectorPanel.java
index 8e93d8452..ec49ab7f2 100644
--- a/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectorPanel.java
+++ b/profiler/src/org/netbeans/modules/profiler/ui/panels/ProjectSelectorPanel.java
@@ -52,13 +52,17 @@ import javax.swing.event.ListDataEvent;
 import javax.swing.event.ListDataListener;
 import org.netbeans.modules.profiler.api.ProjectUtilities;
 import org.openide.awt.Mnemonics;
+import org.openide.util.HelpCtx;
 import org.openide.util.Lookup;
 
 /**
  *
  * @author Jaroslav Bachorik
  */
-public class ProjectSelectorPanel extends javax.swing.JPanel {
+public class ProjectSelectorPanel extends javax.swing.JPanel implements HelpCtx.Provider {
+    private static final String HELP_CTX_KEY =",Automated merge with http : / / hg . netbeans . org / core - main /,"""Fixed instrumentation and profiling issues, improved UI functionality and added help context providers""",Added support for profiling points and various UI improvements.,"This commit adds a new method `getProfilerAgentCommandLineArgsWithoutQuotes` to the `IntegrationUtils` class in the `lib.profiler.common` module. This method returns the command line arguments for the profiler agent without quotes.

The method takes the target platform, target JVM, a boolean indicating whether the target is remote, the port number, and an optional path space character as arguments. It then constructs the command line arguments based on these inputs.

If the target JVM is Java 6, 7, or 8 and the target platform is Linux, the method includes the `-XX:+UseLinuxPosixThreadCPUClocks` option. It then adds the path to the native libraries, the path to the profiler agent library, and the port number to the arguments.

The method returns the constructed arguments as a string.

Additionally, the commit makes some changes to the `RecursiveMethodInstrumentor` class in the `lib.profiler` module. It adds a new method `markProfilingPointForInstrumentation` which marks a class for instrumentation if it contains a profiling point specified in the engine settings. It also adds a new method `addInsrClass` which adds a class to the list of classes to be instrumented.

Finally, the commit makes a small change to the `ClassesListControllerUI` class in the `profiler.heapwalker` module. It updates the `filterValue` and `filterType` variables to be instance variables instead of static variables. This allows multiple instances of the `ClassesListControllerUI` to have different filter settings.","```plaintext
Add profiling point instrumentation and improve UI elements handling in Profiler.
```"
"diff --git a/code/javascript/selenium-api.js b/code/javascript/selenium-api.js
index 070804bf69..0bdfcab129 100644
--- a/code/javascript/selenium-api.js
+++ b/code/javascript/selenium-api.js
@@ -98,6 +98,13 @@ Selenium.prototype.doChooseCancelOnNextConfirmation = function() {
     this.browserbot.cancelNextConfirmation();
 };
 
+/*
+ * Instruct Selenium what to answear on the next prompt dialog it encounters
+ */
+Selenium.prototype.doAnswerOnNextPrompt = function(answer) {
+    this.browserbot.setNextPromptResult(answer);
+};
+
 /*
  * Simulate the browser back button
  */
@@ -148,6 +155,20 @@ Selenium.prototype.assertConfirmation = function(confirmationPattern) {
     }
 };
  
+/*
+ * Asserts that the supplied message was received as a prompt
+ */
+Selenium.prototype.assertPrompt = function(promptPattern) {
+    if (this.browserbot.hasPrompts()) {
+        receivedPrompt = this.browserbot.getNextPrompt();
+        if (! PatternMatcher.matches(promptPattern, receivedPrompt)) {
+            Assert.fail(""The prompt message was ["" + receivedPrompt + ""]"");
+         }
+    } else {
+        Assert.fail(""There were no prompts"");
+    }
+};
+
 /*
  * Verify the location of the current page.
  */
diff --git a/code/javascript/selenium-browserbot.js b/code/javascript/selenium-browserbot.js
index aace46921a..7611e9b5fb 100644
--- a/code/javascript/selenium-browserbot.js
+++ b/code/javascript/selenium-browserbot.js
@@ -50,8 +50,10 @@ BrowserBot = function(frame) {
     this.modalDialogTest = null;
     this.recordedAlerts = new Array();
     this.recordedConfirmations = new Array();
+    this.recordedPrompts = new Array();
     this.openedWindows = {};
     this.nextConfirmResult = true;
+    this.nextPromptResult = '';
     this.newPageLoaded = false;
 
     var self = this;
@@ -95,6 +97,10 @@ BrowserBot.prototype.cancelNextConfirmation = function() {
     this.nextConfirmResult = false;
 };
 
+BrowserBot.prototype.setNextPromptResult = function(result) {
+    this.nextPromptResult = result;
+};
+
 BrowserBot.prototype.hasAlerts = function() {
     return (this.recordedAlerts.length > 0) ;
 };
@@ -111,6 +117,13 @@ BrowserBot.prototype.getNextConfirmation = function() {
     return this.recordedConfirmations.shift();
 };
 
+BrowserBot.prototype.hasPrompts = function() {
+    return (this.recordedPrompts.length > 0) ;
+};
+
+BrowserBot.prototype.getNextPrompt = function() {
+    return this.recordedPrompts.shift();
+};
 
 BrowserBot.prototype.getFrame = function() {
     return this.frame;
@@ -164,6 +177,14 @@ BrowserBot.prototype.modifyWindowToRecordPopUpDialogs = function(windowToModify,
         return result;
     };
 
+    windowToModify.prompt = function(message) {
+        browserBot.recordedPrompts.push(message);
+        var result = !browserBot.nextConfirmResult ? null : browserBot.nextPromptResult;
+        browserBot.nextConfirmResult = true;
+        browserBot.nextPromptResult = '';
+        return result;
+    };
+
     // Keep a reference to all popup windows by name
     // note that in IE the ""windowName"" argument must be a valid javascript identifier, it seems.
     var originalOpen = windowToModify.open;
diff --git a/code/javascript/tests/TestPrompting.html b/code/javascript/tests/TestPrompting.html
new file mode 100644
index 0000000000..5367e9a94d
--- /dev/null
+++ b/code/javascript/tests/TestPrompting.html
@@ -0,0 +1,82 @@
+<!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
+<!--
+Copyright 2004 ThoughtWorks, Inc
+
+ Licensed under the Apache License, Version 2.0 (the ""License"");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an ""AS IS"" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+<html>
+<head>
+  <meta content=""text/html; charset=ISO-8859-1""
+ http-equiv=""content-type"">
+  <title>Test Prompting Verifification</title>
+</head>
+<body>
+<table cellpadding=""1"" cellspacing=""1"" border=""1"">
+  <tbody>
+    <tr>
+      <td rowspan=""1"" colspan=""3"">Test verify Prompting<br>
+      </td>
+    </tr>
+
+    <tr>
+      <td>open</td>
+      <td>./tests/html/test_prompt.html</td>
+      <td>&nbsp;</td>
+    </tr>
+    <tr>
+      <td>answerOnNextPrompt</td>
+      <td>no</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>click</td>
+      <td>promptAndLeave</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>verifyPrompt</td>
+      <td>Type 'yes' and click OK</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>verifyTitle</td>
+      <td>Test Prompt</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>answerOnNextPrompt</td>
+      <td>yes</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>clickAndWait</td>
+      <td>promptAndLeave</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td>verifyPrompt</td>
+      <td>*'yes'*</td>
+      <td></td>
+    </tr>
+
+    <tr>
+      <td>verifyTitle</td>
+      <td>Dummy Page</td>
+      <td></td>
+    </tr>
+
+
+  </tbody>
+</table>
+</body>
+</html>
diff --git a/code/javascript/tests/TestSuite-InternetExplorer.html b/code/javascript/tests/TestSuite-InternetExplorer.html
index 9878e6457b..9ca7e3d004 100644
--- a/code/javascript/tests/TestSuite-InternetExplorer.html
+++ b/code/javascript/tests/TestSuite-InternetExplorer.html
@@ -57,6 +57,7 @@
             <tr><td><a href=""./TestFocusOnBlur.html"">TestFocusOnBlur</a></td></tr>
             <tr><td><a href=""./TestVerifyAlerts.html"">TestVerifyAlerts</a></td></tr>
             <tr><td><a href=""./TestConfirmations.html"">TestVerifyConfirmations</a></td></tr>
+            <tr><td><a href=""./TestPrompting.html"">TestVerifyPrompt</a></td></tr>
             <tr><td><a href=""./TestVisibility.html"">TestVisibility</a></td></tr>
             <tr><td><a href=""./TestVerifyEditable.html"">TestVerifyEditable</a></td></tr>
 
diff --git a/code/javascript/tests/TestSuite-Konqueror.html b/code/javascript/tests/TestSuite-Konqueror.html
index d3155bf993..f7dc5abbc3 100644
--- a/code/javascript/tests/TestSuite-Konqueror.html
+++ b/code/javascript/tests/TestSuite-Konqueror.html
@@ -57,6 +57,7 @@
             <tr><td><a href=""./TestFocusOnBlur.html"">TestFocusOnBlur</a></td></tr>
             <tr><td><a href=""./TestVerifyAlerts.html"">TestVerifyAlerts</a></td></tr>
             <tr><td><a href=""./TestConfirmations.html"">TestVerifyConfirmations</a></td></tr>
+            <tr><td><a href=""./TestPrompting.html"">TestVerifyPrompt</a></td></tr>
 <!--            <tr><td><a href=""./TestVisibility.html"">TestVisibility</a></td></tr>-->
             <tr><td><a href=""./TestVerifyEditable.html"">TestVerifyEditable</a></td></tr>
 
diff --git a/code/javascript/tests/TestSuite-Safari.html b/code/javascript/tests/TestSuite-Safari.html
index d3155bf993..f7dc5abbc3 100644
--- a/code/javascript/tests/TestSuite-Safari.html
+++ b/code/javascript/tests/TestSuite-Safari.html
@@ -57,6 +57,7 @@
             <tr><td><a href=""./TestFocusOnBlur.html"">TestFocusOnBlur</a></td></tr>
             <tr><td><a href=""./TestVerifyAlerts.html"">TestVerifyAlerts</a></td></tr>
             <tr><td><a href=""./TestConfirmations.html"">TestVerifyConfirmations</a></td></tr>
+            <tr><td><a href=""./TestPrompting.html"">TestVerifyPrompt</a></td></tr>
 <!--            <tr><td><a href=""./TestVisibility.html"">TestVisibility</a></td></tr>-->
             <tr><td><a href=""./TestVerifyEditable.html"">TestVerifyEditable</a></td></tr>
 
diff --git a/code/javascript/tests/TestSuite.html b/code/javascript/tests/TestSuite.html
index 67f21321a0..7e3c1ec783 100644
--- a/code/javascript/tests/TestSuite.html
+++ b/code/javascript/tests/TestSuite.html
@@ -57,6 +57,7 @@
             <tr><td><a href=""./TestFocusOnBlur.html"">TestFocusOnBlur</a></td></tr>
             <tr><td><a href=""./TestVerifyAlerts.html"">TestVerifyAlerts</a></td></tr>
             <tr><td><a href=""./TestConfirmations.html"">TestVerifyConfirmations</a></td></tr>
+            <tr><td><a href=""./TestPrompting.html"">TestVerifyPrompt</a></td></tr>
             <tr><td><a href=""./TestVisibility.html"">TestVisibility</a></td></tr>
             <tr><td><a href=""./TestVerifyEditable.html"">TestVerifyEditable</a></td></tr>
 
diff --git a/code/javascript/tests/html/test_prompt.html b/code/javascript/tests/html/test_prompt.html
new file mode 100644
index 0000000000..88102c0a1a
--- /dev/null
+++ b/code/javascript/tests/html/test_prompt.html
@@ -0,0 +1,34 @@
+<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
+<html>
+<head>
+<!--
+Copyright 2004 ThoughtWorks, Inc
+
+ Licensed under the Apache License, Version 2.0 (the ""License"");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an ""AS IS"" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
+  <script type=""text/javascript"">
+
+  function confirmLeaving() {
+    if (prompt(""Type 'yes' and click OK"") == 'yes') {
+        document.location = ""test_dummy_page.html"";
+    }
+ }
+
+  </script>
+  <title>Test Prompt</title>
+</head>
+<body>
+<img style=""width: 644px; height: 41px;"" alt=""banner"" src=""banner.gif""><br>
+<a id=""promptAndLeave"" href=""javascript:confirmLeaving();"">click to navigate to a new page</a>
+</body>
+</html>",Apply Alexander Dvoretskiy \' s patch implementing support for window . prompt ( ) . .,"""Added support for prompts in Selenium API""","Added support for prompting and verifying prompts in Selenium. 

This commit introduces a new method `doAnswerOnNextPrompt` in `Selenium.prototype` to instruct Selenium on how to answer the next prompt dialog encountered. It also adds a new method `assertPrompt` in `Selenium.prototype` to verify that the supplied message was received as a prompt.

Additionally, the `BrowserBot` class has been updated to record and store prompt messages, and to provide methods to cancel the next prompt and to set the result of the next prompt.

New test cases have been added to verify the prompting functionality.","""Added support for handling prompt dialogs in Selenium API and tests""

This commit appears to add new methods to the Selenium API for handling prompt dialogs, specifically `doAnswerOnNextPrompt` and `assertPrompt`. It also includes modifications to the `BrowserBot` class to record and handle prompts, and several test files have been added or modified to include tests for prompt handling.",Add support for handling prompt dialogs in Selenium with tests.
"diff --git a/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java b/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
index 59814bc754..075e2646c8 100644
--- a/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
+++ b/runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java
@@ -17,8 +17,12 @@
  */
 package org.apache.beam.runners.core;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Iterables;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -326,7 +330,8 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public OutputT read() {
-      return combineFn.extractOutput(accum);
+      return combineFn.extractOutput(
+          combineFn.mergeAccumulators(Arrays.asList(combineFn.createAccumulator(), accum)));
     }
 
     @Override
@@ -407,7 +412,7 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public Iterable<T> read() {
-      return contents;
+      return Iterables.limit(contents, contents.size());
     }
 
     @Override
@@ -478,7 +483,7 @@ public class InMemoryStateInternals<K> implements StateInternals {
 
     @Override
     public Iterable<T> read() {
-      return contents;
+      return ImmutableSet.copyOf(contents);
     }
 
     @Override
@@ -551,19 +556,41 @@ public class InMemoryStateInternals<K> implements StateInternals {
       contents.remove(key);
     }
 
+    private static class CollectionViewState<T> implements ReadableState<Iterable<T>> {
+      private final Collection<T> collection;
+
+      private CollectionViewState(Collection<T> collection) {
+        this.collection = collection;
+      }
+
+      public static <T> CollectionViewState<T> of(Collection<T> collection) {
+        return new CollectionViewState<>(collection);
+      }
+
+      @Override
+      public Iterable<T> read() {
+        return ImmutableList.copyOf(collection);
+      }
+
+      @Override
+      public ReadableState<Iterable<T>> readLater() {
+        return this;
+      }
+    }
+
     @Override
     public ReadableState<Iterable<K>> keys() {
-      return ReadableStates.immediate((Iterable<K>) contents.keySet());
+      return CollectionViewState.of(contents.keySet());
     }
 
     @Override
     public ReadableState<Iterable<V>> values() {
-      return ReadableStates.immediate((Iterable<V>) contents.values());
+      return CollectionViewState.of(contents.values());
     }
 
     @Override
     public ReadableState<Iterable<Map.Entry<K, V>>> entries() {
-      return ReadableStates.immediate((Iterable<Map.Entry<K, V>>) contents.entrySet());
+      return CollectionViewState.of(contents.entrySet());
     }
 
     @Override
diff --git a/runners/direct-java/src/test/java/org/apache/beam/runners/direct/CopyOnAccessInMemoryStateInternalsTest.java b/runners/direct-java/src/test/java/org/apache/beam/runners/direct/CopyOnAccessInMemoryStateInternalsTest.java
index 1e60ca33ef..657bb7fd48 100644
--- a/runners/direct-java/src/test/java/org/apache/beam/runners/direct/CopyOnAccessInMemoryStateInternalsTest.java
+++ b/runners/direct-java/src/test/java/org/apache/beam/runners/direct/CopyOnAccessInMemoryStateInternalsTest.java
@@ -29,6 +29,7 @@ import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
+import com.google.common.collect.Lists;
 import org.apache.beam.runners.core.StateNamespace;
 import org.apache.beam.runners.core.StateNamespaceForTest;
 import org.apache.beam.runners.core.StateNamespaces;
@@ -63,8 +64,10 @@ import org.junit.runners.JUnit4;
 @RunWith(JUnit4.class)
 public class CopyOnAccessInMemoryStateInternalsTest {
 
-  @Rule public final TestPipeline pipeline = TestPipeline.create();
-  @Rule public ExpectedException thrown = ExpectedException.none();
+  @Rule
+  public final TestPipeline pipeline = TestPipeline.create();
+  @Rule
+  public ExpectedException thrown = ExpectedException.none();
   private String key = ""foo"";
 
   @Test
@@ -114,7 +117,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
    */
   @Test
   public void testGetWithPresentInUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -125,7 +128,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.write(""bar"");
     assertThat(underlyingValue.read(), equalTo(""bar""));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     ValueState<String> copyOnAccessState = internals.state(namespace, valueTag);
     assertThat(copyOnAccessState.read(), equalTo(""bar""));
@@ -140,7 +143,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testBagStateWithUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -151,7 +154,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.add(1);
     assertThat(underlyingValue.read(), containsInAnyOrder(1));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     BagState<Integer> copyOnAccessState = internals.state(namespace, valueTag);
     assertThat(copyOnAccessState.read(), containsInAnyOrder(1));
@@ -161,12 +164,13 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     assertThat(underlyingValue.read(), containsInAnyOrder(1));
 
     BagState<Integer> reReadUnderlyingValue = underlying.state(namespace, valueTag);
-    assertThat(underlyingValue.read(), equalTo(reReadUnderlyingValue.read()));
+    assertThat(Lists.newArrayList(underlyingValue.read()),
+        equalTo(Lists.newArrayList(reReadUnderlyingValue.read())));
   }
 
   @Test
   public void testSetStateWithUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -177,7 +181,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.add(1);
     assertThat(underlyingValue.read(), containsInAnyOrder(1));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     SetState<Integer> copyOnAccessState = internals.state(namespace, valueTag);
     assertThat(copyOnAccessState.read(), containsInAnyOrder(1));
@@ -192,7 +196,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testMapStateWithUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -204,7 +208,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.put(""hello"", 1);
     assertThat(underlyingValue.get(""hello"").read(), equalTo(1));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     MapState<String, Integer> copyOnAccessState = internals.state(namespace, valueTag);
     assertThat(copyOnAccessState.get(""hello"").read(), equalTo(1));
@@ -221,7 +225,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testAccumulatorCombiningStateWithUnderlying() throws CannotProvideCoderException {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
     CombineFn<Long, long[], Long> sumLongFn = Sum.ofLongs();
 
@@ -236,7 +240,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.add(1L);
     assertThat(underlyingValue.read(), equalTo(1L));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     GroupingState<Long, Long> copyOnAccessState = internals.state(namespace, stateTag);
     assertThat(copyOnAccessState.read(), equalTo(1L));
@@ -251,7 +255,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testWatermarkHoldStateWithUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     TimestampCombiner timestampCombiner = TimestampCombiner.EARLIEST;
@@ -265,7 +269,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
     underlyingValue.add(new Instant(250L));
     assertThat(underlyingValue.read(), equalTo(new Instant(250L)));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
     WatermarkHoldState copyOnAccessState = internals.state(namespace, stateTag);
     assertThat(copyOnAccessState.read(), equalTo(new Instant(250L)));
@@ -284,7 +288,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithoutUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
     StateTag<BagState<String>> bagTag = StateTags.bag(""foo"", StringUtf8Coder.of());
@@ -304,9 +308,9 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -331,11 +335,11 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithClearedInUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
-    CopyOnAccessInMemoryStateInternals<String>secondUnderlying =
+    CopyOnAccessInMemoryStateInternals<String> secondUnderlying =
         spy(CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying));
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, secondUnderlying);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -361,9 +365,9 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithOverwrittenUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -392,9 +396,9 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithAddedUnderlying() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
 
     internals.commit();
@@ -416,7 +420,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithEmptyTableIsEmpty() {
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     internals.commit();
@@ -426,7 +430,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithOnlyClearedValuesIsEmpty() {
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -444,9 +448,9 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testCommitWithEmptyNewAndFullUnderlyingIsNotEmpty() {
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, underlying);
 
     StateNamespace namespace = new StateNamespaceForTest(""foo"");
@@ -475,7 +479,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
         return new Instant(689743L);
       }
     };
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(""foo"", null);
 
     StateTag<WatermarkHoldState> firstHoldAddress =
@@ -508,7 +512,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
         return new Instant(689743L);
       }
     };
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(""foo"", null);
     StateTag<WatermarkHoldState> firstHoldAddress =
         StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);
@@ -516,7 +520,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
         underlying.state(StateNamespaces.window(null, first), firstHoldAddress);
     firstHold.add(new Instant(22L));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(""foo"", underlying.commit());
 
     StateTag<WatermarkHoldState> secondHoldAddress =
@@ -545,7 +549,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
             return new Instant(689743L);
           }
         };
-    CopyOnAccessInMemoryStateInternals<String>underlying =
+    CopyOnAccessInMemoryStateInternals<String> underlying =
         CopyOnAccessInMemoryStateInternals.withUnderlying(""foo"", null);
     StateTag<WatermarkHoldState> firstHoldAddress =
         StateTags.watermarkStateInternal(""foo"", TimestampCombiner.EARLIEST);
@@ -553,7 +557,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
         underlying.state(StateNamespaces.window(null, first), firstHoldAddress);
     firstHold.add(new Instant(224L));
 
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(""foo"", underlying.commit());
 
     StateTag<WatermarkHoldState> secondHoldAddress =
@@ -568,7 +572,7 @@ public class CopyOnAccessInMemoryStateInternalsTest {
 
   @Test
   public void testGetEarliestHoldBeforeCommit() {
-    CopyOnAccessInMemoryStateInternals<String>internals =
+    CopyOnAccessInMemoryStateInternals<String> internals =
         CopyOnAccessInMemoryStateInternals.withUnderlying(key, null);
 
     internals
diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/GroupingState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/GroupingState.java
index 9c4c23e4cb..8f244d44d5 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/GroupingState.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/GroupingState.java
@@ -33,10 +33,18 @@ import org.apache.beam.sdk.transforms.GroupByKey;
  */
 @Experimental(Kind.STATE)
 public interface GroupingState<InputT, OutputT> extends ReadableState<OutputT>, State {
-  /** Add a value to the buffer. */
+  /**
+   * Add a value to the buffer.
+   *
+   * <p>Elements added will not be reflected in {@code OutputT} objects returned by
+   * previous calls to {@link #read}.
+   */
   void add(InputT value);
 
-  /** Return true if this state is empty. */
+  /**
+   * Returns a {@link ReadableState} whose {@link #read} method will return true if this state is
+   * empty at the point when that {@link #read} call returns.
+   */
   ReadableState<Boolean> isEmpty();
 
   @Override
diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/MapState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/MapState.java
index 17ea33278c..8b89d7bda6 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/MapState.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/MapState.java
@@ -33,7 +33,13 @@ import org.apache.beam.sdk.annotations.Experimental.Kind;
 @Experimental(Kind.STATE)
 public interface MapState<K, V> extends State {
 
-  /** Associates the specified value with the specified key in this state. */
+  /**
+   * Associates the specified value with the specified key in this state.
+   *
+   * <p>Changes will not be reflected in the results returned by
+   * previous calls to {@link ReadableState#read} on the results any of the reading methods
+   * ({@link #get}, {@link #keys}, {@link #values}, and {@link #entries}).
+   */
   void put(K key, V value);
 
   /**
@@ -44,10 +50,20 @@ public interface MapState<K, V> extends State {
    *
    * <p>If the specified key is not already associated with a value (or is mapped to {@code null})
    * associates it with the given value and returns {@code null}, else returns the current value.
+   *
+   * <p>Changes will not be reflected in the results returned by
+   * previous calls to {@link ReadableState#read} on the results any of the reading methods
+   * ({@link #get}, {@link #keys}, {@link #values}, and {@link #entries}).
    */
   ReadableState<V> putIfAbsent(K key, V value);
 
-  /** Remove the mapping for a key from this map if it is present. */
+  /**
+   * Remove the mapping for a key from this map if it is present.
+   *
+   * <p>Changes will not be reflected in the results returned by
+   * previous calls to {@link ReadableState#read} on the results any of the reading methods
+   * ({@link #get}, {@link #keys}, {@link #values}, and {@link #entries}).
+   */
   void remove(K key);
 
   /**
diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/ReadableState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/ReadableState.java
index 70703ce7ef..f2774bab6e 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/ReadableState.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/ReadableState.java
@@ -36,6 +36,10 @@ public interface ReadableState<T> {
    * <p>If there will be many calls to {@link #read} for different state in short succession, you
    * should first call {@link #readLater} for all of them so the reads can potentially be batched
    * (depending on the underlying implementation}.
+   *
+   * <p>The returned object should be independent of the underlying state.  Any direct modification
+   * of the returned object should not modify state without going through the appropriate state
+   * interface, and modification to the state should not be mirrored in the returned object.
    */
   T read();
 
diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/SetState.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/SetState.java
index fd339b2778..d94c5c1752 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/state/SetState.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/state/SetState.java
@@ -36,10 +36,18 @@ public interface SetState<T> extends GroupingState<T, Iterable<T>> {
   /**
    * Ensures a value is a member of the set, returning {@code true} if it was added and {@code
    * false} otherwise.
+   *
+   * <p>Elements added will not be reflected in {@code OutputT} objects returned by
+   * previous calls to {@link #read}.
    */
   ReadableState<Boolean> addIfAbsent(T t);
 
-  /** Removes the specified element from this set if it is present. */
+  /**
+   * Removes the specified element from this set if it is present.
+   *
+   * <p>Changes will not be reflected in {@code OutputT} objects returned by
+   * previous calls to {@link #read}.
+   */
   void remove(T t);
 
   @Override
diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java
index 142dff849f..03e310463f 100644
--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java
+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java
@@ -34,6 +34,7 @@ import static org.hamcrest.Matchers.not;
 import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
@@ -52,6 +53,7 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 import org.apache.beam.sdk.coders.AtomicCoder;
 import org.apache.beam.sdk.coders.Coder;
@@ -67,6 +69,7 @@ import org.apache.beam.sdk.options.PipelineOptions;
 import org.apache.beam.sdk.state.BagState;
 import org.apache.beam.sdk.state.CombiningState;
 import org.apache.beam.sdk.state.MapState;
+import org.apache.beam.sdk.state.ReadableState;
 import org.apache.beam.sdk.state.SetState;
 import org.apache.beam.sdk.state.StateSpec;
 import org.apache.beam.sdk.state.StateSpecs;
@@ -1983,9 +1986,16 @@ public class ParDoTest implements Serializable {
           @ProcessElement
           public void processElement(
               ProcessContext c, @StateId(stateId) BagState<Integer> state) {
-            Iterable<Integer> currentValue = state.read();
+            ReadableState<Boolean> isEmpty = state.isEmpty();
             state.add(c.element().getValue());
-            if (Iterables.size(state.read()) >= 4) {
+            assertFalse(isEmpty.read());
+            Iterable<Integer> currentValue = state.read();
+            if (Iterables.size(currentValue) >= 4) {
+              // Make sure that the cached Iterable doesn't change when new elements are added.
+              state.add(-1);
+              assertEquals(4, Iterables.size(currentValue));
+              assertEquals(5, Iterables.size(state.read()));
+
               List<Integer> sorted = Lists.newArrayList(currentValue);
               Collections.sort(sorted);
               c.output(sorted);
@@ -2020,9 +2030,9 @@ public class ParDoTest implements Serializable {
           @ProcessElement
           public void processElement(
               ProcessContext c, @StateId(stateId) BagState<MyInteger> state) {
-            Iterable<MyInteger> currentValue = state.read();
             state.add(new MyInteger(c.element().getValue()));
-            if (Iterables.size(state.read()) >= 4) {
+            Iterable<MyInteger> currentValue = state.read();
+            if (Iterables.size(currentValue) >= 4) {
               List<MyInteger> sorted = Lists.newArrayList(currentValue);
               Collections.sort(sorted);
               c.output(sorted);
@@ -2058,9 +2068,9 @@ public class ParDoTest implements Serializable {
           @ProcessElement
           public void processElement(
               ProcessContext c, @StateId(stateId) BagState<MyInteger> state) {
-            Iterable<MyInteger> currentValue = state.read();
             state.add(new MyInteger(c.element().getValue()));
-            if (Iterables.size(state.read()) >= 4) {
+            Iterable<MyInteger> currentValue = state.read();
+            if (Iterables.size(currentValue) >= 4) {
               List<MyInteger> sorted = Lists.newArrayList(currentValue);
               Collections.sort(sorted);
               c.output(sorted);
@@ -2102,10 +2112,18 @@ public class ParDoTest implements Serializable {
               @StateId(stateId) SetState<Integer> state,
               @StateId(countStateId) CombiningState<Integer, int[], Integer>
                   count) {
+            ReadableState<Boolean> isEmpty = state.isEmpty();
             state.add(c.element().getValue());
+            assertFalse(isEmpty.read());
             count.add(1);
             if (count.read() >= 4) {
-              Set<Integer> set = Sets.newHashSet(state.read());
+              // Make sure that the cached Iterable doesn't change when new elements are added.
+              Iterable<Integer> ints = state.read();
+              state.add(-1);
+              assertEquals(3, Iterables.size(ints));
+              assertEquals(4, Iterables.size(state.read()));
+
+              Set<Integer> set = Sets.newHashSet(ints);
               c.output(set);
             }
           }
@@ -2231,10 +2249,18 @@ public class ParDoTest implements Serializable {
               @StateId(countStateId) CombiningState<Integer, int[], Integer>
                   count) {
             KV<String, Integer> value = c.element().getValue();
+            ReadableState<Iterable<Entry<String, Integer>>> entriesView = state.entries();
             state.put(value.getKey(), value.getValue());
             count.add(1);
             if (count.read() >= 4) {
               Iterable<Map.Entry<String, Integer>> iterate = state.entries().read();
+              // Make sure that the cached Iterable doesn't change when new elements are added, but
+              // that cached ReadableState views of the state do change.
+              state.put(""BadKey"", -1);
+              assertEquals(3, Iterables.size(iterate));
+              assertEquals(4, Iterables.size(entriesView.read()));
+              assertEquals(4, Iterables.size(state.entries().read()));
+
               for (Map.Entry<String, Integer> entry : iterate) {
                 c.output(KV.of(entry.getKey(), entry.getValue()));
               }
@@ -2525,9 +2551,9 @@ public class ParDoTest implements Serializable {
           @ProcessElement
           public void processElement(
               ProcessContext c, @StateId(stateId) BagState<Integer> state) {
-            Iterable<Integer> currentValue = state.read();
             state.add(c.element().getValue());
-            if (Iterables.size(state.read()) >= 4) {
+            Iterable<Integer> currentValue = state.read();
+            if (Iterables.size(currentValue) >= 4) {
               List<Integer> sorted = Lists.newArrayList(currentValue);
               Collections.sort(sorted);
               c.output(sorted);",Clarify semantics of objects returned by state access,"""Refactor InMemoryStateInternals and related tests to ensure state reads are independent of underlying state""","""Update state interfaces to reflect lazy behavior and improve documentation""

This commit message accurately reflects the changes made to the state interfaces in the Beam SDK. The changes include adding lazy behavior to the interfaces, such as the `read` method in `ReadableState`, and improving the documentation to clarify the behavior of the interfaces.","""Update InMemoryStateInternals and CopyOnAccessInMemoryStateInternalsTest to use Guava collections and improve testing""

Explanation:

* The first change is in the file `runners/core-java/src/main/java/org/apache/beam/runners/core/InMemoryStateInternals.java`. It adds imports for Guava collections (`ImmutableList`, `ImmutableSet`, `Iterables`) and modifies the `read()` method of the `InMemoryBagState` class to use `combineFn.mergeAccumulators()` before calling `combineFn.extractOutput()`. It also modifies the `read()` method of the `InMemoryListState` class to limit the returned iterable to the size of the contents. Finally, it modifies the `read()` method of the `InMemorySetState` class to return an immutable set copy of the contents.
* The second change is in the file `runners/direct-java/src/test/java/org/apache/beam/runners/direct/CopyOnAccessInMemoryStateInternalsTest.java`. It adds an import for `Lists` from the Guava library and modifies some assertions in the `testBagStateWithUnderlying()` method to compare lists instead of iterables.

There are also some changes in formatting and whitespace, but they are not significant.

The changes seem to be related to improving the use of collections in the `InMemoryStateInternals` class and improving the testing of the `CopyOnAccessInMemoryStateInternals` class. The use of Guava collections can help ensure that the returned collections are immutable and thread-safe, which can be important in a concurrent processing pipeline. The changes to the assertions in the test can help ensure that the test is comparing the expected and actual values correctly.","Improve `InMemoryStateInternals` read consistency and add state modifications tests for `ParDoTest`.

"
"diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index f3380ba..7e6db4c 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -40,6 +40,7 @@
         <activity android:name="".RangeResponseSample""/>
         <activity android:name="".Http401AuthSample""/>
         <activity android:name="".AsyncBackgroundThreadSample""/>
+        <activity android:name="".ContentTypeForHttpEntitySample""/>
 
         <service android:name="".services.ExampleIntentService""/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
new file mode 100644
index 0000000..193dd70
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
@@ -0,0 +1,72 @@
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.RequestParams;
+import com.loopj.android.http.ResponseHandlerInterface;
+import com.loopj.android.http.TextHttpResponseHandler;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+import java.io.File;
+import java.io.IOException;
+
+public class ContentTypeForHttpEntitySample extends SampleParentActivity {
+    private static final String LOG_TAG = ""ContentTypeForHttpEntitySample"";
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        return new TextHttpResponseHandler() {
+            @Override
+            public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+                debugThrowable(LOG_TAG, throwable);
+            }
+
+            @Override
+            public void onSuccess(int statusCode, Header[] headers, String responseString) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+            }
+        };
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return ""http://httpbin.org/post"";
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_content_type_http_entity;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        RequestParams rParams = new RequestParams();
+        rParams.put(""sample_key"", ""Sample String"");
+        try {
+            File sample_file = File.createTempFile(""temp_"", ""_handled"", getCacheDir());
+            rParams.put(""sample_file"", sample_file);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, ""Cannot add sample file"", e);
+        }
+        return client.post(this, URL, headers, rParams, ""multipart/form-data"", responseHandler);
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index 24b11a2..70b4982 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -30,30 +30,31 @@ import java.util.List;
 
 public class WaypointsActivity extends ListActivity {
 
-    private static final SampleConfig[] samplesConfig = new SampleConfig[] {
-        new SampleConfig(R.string.title_get_sample, GetSample.class),
-        new SampleConfig(R.string.title_post_sample, PostSample.class),
-        new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
-        new SampleConfig(R.string.title_put_sample, PutSample.class),
-        new SampleConfig(R.string.title_json_sample, JsonSample.class),
-        new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
-        new SampleConfig(R.string.title_sax_example, SaxSample.class),
-        new SampleConfig(R.string.title_file_sample, FileSample.class),
-        new SampleConfig(R.string.title_binary_sample, BinarySample.class),
-        new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
-        new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
-        new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
-        new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
-        new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
-        new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
-        new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
-        new SampleConfig(R.string.title_post_files, FilesSample.class),
-        new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
-        new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
-        new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
-        new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
-        new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
-        new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class)
+    private static final SampleConfig[] samplesConfig = new SampleConfig[]{
+            new SampleConfig(R.string.title_get_sample, GetSample.class),
+            new SampleConfig(R.string.title_post_sample, PostSample.class),
+            new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
+            new SampleConfig(R.string.title_put_sample, PutSample.class),
+            new SampleConfig(R.string.title_json_sample, JsonSample.class),
+            new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
+            new SampleConfig(R.string.title_sax_example, SaxSample.class),
+            new SampleConfig(R.string.title_file_sample, FileSample.class),
+            new SampleConfig(R.string.title_binary_sample, BinarySample.class),
+            new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
+            new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
+            new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
+            new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
+            new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
+            new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
+            new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
+            new SampleConfig(R.string.title_post_files, FilesSample.class),
+            new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
+            new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
+            new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
+            new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
+            new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
+            new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class),
+            new SampleConfig(R.string.title_content_type_http_entity, ContentTypeForHttpEntitySample.class)
     };
 
     @Override
@@ -82,8 +83,8 @@ public class WaypointsActivity extends ListActivity {
         final Class targetClass;
 
         SampleConfig(int titleId, Class targetClass) {
-          this.titleId = titleId;
-          this.targetClass = targetClass;
+            this.titleId = titleId;
+            this.targetClass = targetClass;
         }
 
     }
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 61c0f0b..3994a05 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -37,4 +37,5 @@
     <string name=""title_401_unauth"">401 basic authentication</string>
     <string name=""title_pre_post_processing"">Pre-/Post-processing</string>
     <string name=""title_async_background_thread"">Async on background thread</string>
+    <string name=""title_content_type_http_entity"">Content-Type with HttpEntity</string>
 </resources>",Added sample for behavior on igoring Content - Type when HttpEntity is set,"""Added sample for Content-Type with HttpEntity""",Added new sample for Content-Type with HttpEntity and updated sample list.,"""Added ContentTypeForHttpEntitySample activity and updated WaypointsActivity, strings.xml, and AndroidManifest.xml""","Add ContentTypeForHttpEntitySample activity and update related configurations in AndroidManifest, WaypointsActivity, and strings.xml."
"diff --git a/buildScripts/website.ant.xml b/buildScripts/website.ant.xml
index d1eb92ec..aabc337c 100644
--- a/buildScripts/website.ant.xml
+++ b/buildScripts/website.ant.xml
@@ -141,6 +141,9 @@ such as converting the changelog into HTML, and creating javadoc.
 		<antcall target=""-integrateSnippet"">
 			<param name=""transformationName"" value=""val"" />
 		</antcall>
+		<antcall target=""-integrateSnippet"">
+			<param name=""transformationName"" value=""Delegate"" />
+		</antcall>
 	</target>
 	
 	<target name=""-website-dist"">
diff --git a/usage_examples/DelegateExample_post.jpage b/usage_examples/DelegateExample_post.jpage
new file mode 100644
index 00000000..28c1bbb7
--- /dev/null
+++ b/usage_examples/DelegateExample_post.jpage
@@ -0,0 +1,98 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import lombok.Delegate;
+
+public class DelegateExample {
+	
+	long counter = 0L;
+	@Delegate
+	private final Collection<String> collection = new ArrayList<String>();
+	
+	public boolean add(String name) {
+		counter++;
+		return collection.add(name);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public int size() {
+		return this.collection.size();
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean isEmpty() {
+		return this.collection.isEmpty();
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean contains(final java.lang.Object arg0) {
+		return this.collection.contains(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public java.util.Iterator<java.lang.String> iterator() {
+		return this.collection.iterator();
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public java.lang.Object[] toArray() {
+		return this.collection.toArray();
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public <T extends .java.lang.Object>T[] toArray(final T[] arg0) {
+		return this.collection.<T>toArray(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean remove(final java.lang.Object arg0) {
+		return this.collection.remove(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean containsAll(final java.util.Collection<?> arg0) {
+		return this.collection.containsAll(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean addAll(final java.util.Collection<? extends java.lang.String> arg0) {
+		return this.collection.addAll(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean removeAll(final java.util.Collection<?> arg0) {
+		return this.collection.removeAll(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean retainAll(final java.util.Collection<?> arg0) {
+		return this.collection.retainAll(arg0);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public void clear() {
+		this.collection.clear();
+	}
+}
+
+class PartialDelegationExample {
+	
+	@Delegate({SimpleCollection.class})
+	private final Collection<String> collection = new ArrayList<String>();
+	
+	private interface SimpleCollection {
+		
+		boolean add(String item);
+		
+		boolean remove(Object item);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean add(final java.lang.String item) {
+		return this.collection.add(item);
+	}
+	
+	@java.lang.SuppressWarnings(""all"")
+	public boolean remove(final java.lang.Object item) {
+		return this.collection.remove(item);
+	}
+}
\ No newline at end of file
diff --git a/usage_examples/DelegateExample_pre.jpage b/usage_examples/DelegateExample_pre.jpage
new file mode 100644
index 00000000..b208c4ca
--- /dev/null
+++ b/usage_examples/DelegateExample_pre.jpage
@@ -0,0 +1,27 @@
+import java.util.ArrayList;
+import java.util.Collection;
+
+import lombok.Delegate;
+
+
+public class DelegateExample {
+	long counter = 0L;
+	
+	@Delegate
+	private final Collection<String> collection = new ArrayList<String>();
+	
+	public boolean add(String name) {
+		counter++;
+		return collection.add(name);
+	}
+}
+
+class PartialDelegationExample {
+	@Delegate({SimpleCollection.class})
+	private final Collection<String> collection = new ArrayList<String>();
+	
+	private interface SimpleCollection {
+		boolean add(String item);
+		boolean remove(Object item);
+	}
+}
diff --git a/website/features/Delegate.html b/website/features/Delegate.html
new file mode 100644
index 00000000..bdb22c26
--- /dev/null
+++ b/website/features/Delegate.html
@@ -0,0 +1,70 @@
+<!DOCTYPE html>
+<html><head>
+	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
+	<link rel=""stylesheet"" type=""text/css"" href=""../logi/reset.css"" />
+	<link rel=""stylesheet"" type=""text/css"" href=""features.css"" />
+	<link rel=""shortcut icon"" href=""../favicon.ico"" type=""image/x-icon"" />
+	<meta name=""description"" content=""Spice up your java"" />
+	<title>@Delegate</title>
+</head><body><div id=""pepper"">
+	<div class=""minimumHeight""></div>
+	<div class=""meat"">
+		<div class=""header""><a href=""../index.html"">Project Lombok</a></div>
+		<h1>@Delegate</h1>
+		<div class=""byline"">Don't lose your composition</div>
+		<div class=""overview"">
+			<h3>Overview</h3>
+			<p>
+			<em> NEW IN Lombok 0.10: </em> Any field can be annotated with <code>@Delegate</code> to let lombok generate delegate methods that forward the call 
+			to this field. 
+			</p>
+			<p>
+			Lombok delegates all <code>public</code> methods of the field's type, as well as those of its supertype except for all methods declared 
+			in <code>java.lang.Object</code>. You can provide a specific implementation for a method by providing you own implementation, lombok will not
+			generate delegate methods for those already declared in the class.
+			</p>
+			<p>
+			You can pass any number of classes into the <code>@Delegate</code> annotation. If you do that, then lombok will delegate all <code>public</code>
+			methods in those types (and their supertypes, except <code>java.lang.Object</code>) instead of looking at the field's type.
+			</p>
+		</div>
+		<div class=""snippets"">
+			<div class=""pre"">
+				<h3>With Lombok</h3>
+				<div class=""snippet"">@HTML_PRE@</div>
+			</div>
+			<div class=""sep""></div>
+			<div class=""post"">
+				<h3>Vanilla Java</h3>
+				<div class=""snippet"">@HTML_POST@</div>
+			</div>
+		</div>
+		<div style=""clear: left;""></div>
+		<div class=""overview"">
+			<h3>Small print</h3><div class=""smallprint"">
+			<p>
+			When passing classes to the annotation, these cannot contain generics. This is a limitation of java that lombok cannot work around.
+			</p>
+			<p>
+			When passing classes to the annotation, these classes do not need to be supertypes of the field. See the example.
+			</p>
+			<div>	
+		</div>
+		<div class=""footer"">
+			<a href=""index.html"">Back to features</a> | <a href=""val.html"">Previous feature (val)</a> | <span class=""disabled"">Next feature</span><br />
+			<a href=""../credits.html"" class=""creditsLink"">credits</a> | <span class=""copyright"">Copyright &copy; 2010-2011 Reinier Zwitserloot, Roel Spilker and Robbert Jan Grootjans, licensed under the <a href=""http://www.opensource.org/licenses/mit-license.php"">MIT license</a>.</span>
+		</div>
+		<div style=""clear: both;""></div>
+	</div>
+</div>
+<script type=""text/javascript"">
+	var gaJsHost = ((""https:"" == document.location.protocol) ? ""https://ssl."" : ""http://www."");
+	document.write(unescape(""%3Cscript src='"" + gaJsHost + ""google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E""));
+</script>
+<script type=""text/javascript"">
+	try {
+		var pageTracker = _gat._getTracker(""UA-9884254-1"");
+		pageTracker._trackPageview();
+	} catch(err) {}
+</script>
+</body></html>
diff --git a/website/features/index.html b/website/features/index.html
index edc173fb..06b6763e 100644
--- a/website/features/index.html
+++ b/website/features/index.html
@@ -36,6 +36,8 @@
 				<dd>Captain's Log, stardate 24435.7: &quot;What was that line again?&quot;</dd>
 				<dt><a href=""val.html""><code>val</code></a></dt>
 				<dd>Finally! hassle-free final local variables.</dd>
+				<dt><a href=""Delegate.html""><code>@Delegate</code></a></dt>
+				<dd>Don't lose your composition</dd>
 			</dl>
 		</div>
 		<div class=""pointer"">
diff --git a/website/features/val.html b/website/features/val.html
index 4e05f8ca..f3e86447 100644
--- a/website/features/val.html
+++ b/website/features/val.html
@@ -50,8 +50,8 @@
 			</div>
 		</div>
 		<div class=""footer"">
-			<a href=""index.html"">Back to features</a> | <a href=""Log.html"">Previous feature (@Log)</a> | <span class=""disabled"">Next feature</span><br />
-			<a href=""../credits.html"" class=""creditsLink"">credits</a> | <span class=""copyright"">Copyright &copy; 2010 Reinier Zwitserloot and Roel Spilker, licensed under the <a href=""http://www.opensource.org/licenses/mit-license.php"">MIT license</a>.</span>
+			<a href=""index.html"">Back to features</a> | <a href=""Log.html"">Previous feature (@Log)</a> | <a href=""Delegate.html"">Next feature (@Delegate)</a><br />
+			<a href=""../credits.html"" class=""creditsLink"">credits</a> | <span class=""copyright"">Copyright &copy; 2010-2011 Reinier Zwitserloot and Roel Spilker, licensed under the <a href=""http://www.opensource.org/licenses/mit-license.php"">MIT license</a>.</span>
 		</div>
 		<div style=""clear: both;""></div>
 	</div>",Added documentation for @ Delegate .,"""Added @Delegate feature to Lombok""","""Added Delegate feature with documentation and examples""","""Add Delegate feature to Lombok""

This commit adds the `@Delegate` feature to Lombok, which allows any field to be annotated with `@Delegate` to generate delegate methods that forward the call to this field. The commit includes the following changes:

* Adds a new target to the `website.ant.xml` build script to integrate the `Delegate` snippet into the website.
* Adds a new usage example for `Delegate` in `DelegateExample_pre.jpage` and `DelegateExample_post.jpage`.
* Adds a new HTML page for the `Delegate` feature in `website/features/Delegate.html`.
* Updates the `website/features/index.html` page to include a link to the `Delegate` feature.
* Updates the `website/features/val.html` page to include a link to the `Delegate` feature.

The `@Delegate` feature generates delegate methods for all `public` methods of the field's type, as well as those of its supertype except for all methods declared in `java.lang.Object`. The user can provide a specific implementation for a method by providing their own implementation, and Lombok will not generate delegate methods for those already declared in the class. Additionally, the user can pass any number of classes into the `@Delegate` annotation to delegate all `public` methods in those types (and their supertypes, except `java.lang.Object`) instead of looking at the field's type.","""Added @Delegate feature with examples and documentation to the website and updated navigation links."""
"diff --git a/ui/ui-core/src/commonMain/kotlin/androidx/ui/core/LayoutNode.kt b/ui/ui-core/src/commonMain/kotlin/androidx/ui/core/LayoutNode.kt
index 62e6b9cc1c0..634c3733e56 100644
--- a/ui/ui-core/src/commonMain/kotlin/androidx/ui/core/LayoutNode.kt
+++ b/ui/ui-core/src/commonMain/kotlin/androidx/ui/core/LayoutNode.kt
@@ -22,8 +22,10 @@ import androidx.ui.core.LayoutNode.LayoutState.NeedsRelayout
 import androidx.ui.core.LayoutNode.LayoutState.NeedsRemeasure
 import androidx.ui.core.LayoutNode.LayoutState.Ready
 import androidx.ui.core.focus.FocusModifier
+import androidx.ui.core.focus.FocusModifier2
 import androidx.ui.core.focus.FocusModifierImpl
 import androidx.ui.core.focus.ModifiedFocusNode
+import androidx.ui.core.focus.ModifiedFocusNode2
 import androidx.ui.core.keyinput.KeyInputModifier
 import androidx.ui.core.keyinput.ModifiedKeyInputNode
 import androidx.ui.core.pointerinput.PointerInputFilter
@@ -554,6 +556,9 @@ class LayoutNode : Measurable {
                         wrapper = ModifiedFocusNode(wrapper, mod).also { mod.focusNode = it }
                             .assignChained(toWrap)
                     }
+                    if (mod is FocusModifier2) {
+                        wrapper = ModifiedFocusNode2(wrapper, mod).assignChained(toWrap)
+                    }
                     if (mod is KeyInputModifier) {
                         wrapper = ModifiedKeyInputNode(wrapper, mod).also { mod.keyInputNode = it }
                             .assignChained(toWrap)
@@ -1041,7 +1046,7 @@ class LayoutNode : Measurable {
                     constraints: Constraints,
 ",Instantiate a ModifiedFocusNode2 corresponding to a Modifier . focus ( ) modifier .,"""Added support for FocusModifier2 and ModifiedFocusNode2 in LayoutNode""",Added support for FocusModifier2 and ModifiedFocusNode2.,"""Added support for FocusModifier2 and ModifiedFocusNode2 in LayoutNode""","""Added support for FocusModifier2 and ModifiedFocusNode2 in LayoutNode."""
"diff --git a/pom.xml b/pom.xml
index dd7b7bb799..deb258bdd4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1373,9 +1373,9 @@
       </build>
     </profile>
     <profile>
-      <id>jdk-pre-8</id>
+      <id>jdk7</id>
       <activation>
-        <jdk>[1.6,1.8)</jdk>
+        <jdk>1.7</jdk>
       </activation>
       <build>
         <plugins>",Simplify pre - 8 java profile .,"""Update JDK profile id and activation for JDK 7""","""Update JDK profile to use JDK 1.7""","""Updated JDK profile ID and activation range in pom.xml""

Explanation: The changes made in the diff are related to the Maven profile configurations in the `pom.xml` file. The profile ID has been changed from `jdk-pre-8` to `jdk7`, and the JDK activation range has been updated from `[1.6,1.8)` to `1.7`. This means that the profile will now only be active when using JDK 1.7, whereas previously it was active for any JDK version from 1.6 (inclusive) to 1.8 (exclusive).",Updated profile ID and JDK activation range for compatibility with JDK 7 in pom.xml.
"diff --git a/activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java b/activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java
index f0f102a3c3..bba75a904b 100644
--- a/activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java
+++ b/activiti-cycle/src/main/java/org/activiti/cycle/CycleService.java
@@ -106,9 +106,8 @@ public interface CycleService {
 
   public void addArtifactLink(RepositoryArtifactLink link);
 
-  public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId);
   public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId, Long sourceRevision);
-  public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId, String type);
+  public List<RepositoryArtifactLink> getArtifactLinks(String sourceConnectorId, String sourceArtifactId);
   public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId, Long sourceRevision, String type);
 
   public void deleteLink(long linkId);
diff --git a/activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java b/activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java
index 6764491e05..38947fa349 100644
--- a/activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java
+++ b/activiti-cycle/src/main/java/org/activiti/cycle/impl/CycleServiceImpl.java
@@ -290,10 +290,6 @@ public class CycleServiceImpl implements CycleService {
     // TODO: implement
     throw new RuntimeException(""Not implemented yet"");
   }
-  public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId) {
-    // TODO: implement
-    throw new RuntimeException(""Not implemented yet"");
-  }
 
   public List<RepositoryArtifactLink> getArtifactLinks(String sourceArtifactId, Long sourceRevision) {
     // TODO: implement
diff --git a/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactLinksGet.java b/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactLinksGet.java
index 0a840c7ab0..81a2a241aa 100644
--- a/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactLinksGet.java
+++ b/activiti-webapp-rest/src/main/java/org/activiti/rest/api/cycle/ArtifactLinksGet.java
@@ -1,10 +1,12 @@
 package org.activiti.rest.api.cycle;
 
+import java.util.List;
 import java.util.Map;
 
 import javax.servlet.http.HttpSession;
 
 import org.activiti.cycle.CycleService;
+import org.activiti.cycle.RepositoryArtifactLink;
 import org.activiti.cycle.impl.CycleServiceImpl;
 import org.activiti.rest.util.ActivitiRequest;
 import org.activiti.rest.util.ActivitiWebScript;
@@ -26,12 +28,12 @@ public class ArtifactLinksGet extends ActivitiWebScript {
   protected void executeWebScript(ActivitiRequest req, Status status, Cache cache, Map<String, Object> model) {
     init(req);
 
+    String connectorId = req.getMandatoryString(""connectorId"");
     String artifactId = req.getString(""artifactId"");
-    String restProxyUri = req.getString(""restProxyUri"");
 
-    
-//    List<Artifact> link = this.cycleService.getArtifactLinks(artifactId);
-    
+    List<RepositoryArtifactLink> links = this.cycleService.getArtifactLinks(connectorId, artifactId);
+
+    model.put(""links"", links);
   }
 
 }
diff --git a/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.desc.xml b/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.desc.xml
index 5aee685f18..a8989d2901 100644
--- a/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.desc.xml
+++ b/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.desc.xml
@@ -1,7 +1,7 @@
 <webscript>
   <shortname>Artifact Links</shortname>
   <description>Returns a json string that represents the linked artifacts for a given artifact</description>
-  <url>/artifact-links</url>
+  <url>/artifact-links?connectorId={connectorId}&amp;artifactId={artifactId}</url>
   <authentication>user</authentication>
   <format default=""json"">argument</format>
 </webscript>
\ No newline at end of file
diff --git a/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.json.ftl b/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.json.ftl
index 55122c849b..99421df11e 100644
--- a/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.json.ftl
+++ b/activiti-webapp-rest/src/main/resources/webscripts/org/activiti/rest/api/cycle/artifact-links.get.json.ftl
@@ -1,28 +1,19 @@
+<#escape x as jsonUtils.encodeJSONString(x)>
+[<#list links as link><@printLink link/><#if link_has_next>,</#if></#list>]
+</#escape>
+
+<#macro printLink link>
 {
-    ""list"": {
-        ""org.activiti.rest.api.cycle.dto.ArtifactLinkDto"": [
-            {
-                ""targetId"": ""targetId"",
-                ""targetRevision"": ""targetRevision"",
-                ""targetElementId"": ""targetElementId"",
-                ""linkType"": ""linkType"",
-                ""targetUrl"": ""http:\/\/www.showhttprequest.com\/?targetUrl=true&artifact=0"",
-                ""description"": ""This is a description for Artifact Link No 0"",
-                ""contentType"": ""application/msword"",
-                ""previewUrl"": ""http:\/\/www.showhttprequest.com\/?previewUrl=ture&artifact=0"",
-                ""label"": ""Artifact Link No 0""
-            },
-            {
-                ""targetId"": ""targetId"",
-                ""targetRevision"": ""targetRevision"",
-                ""targetElementId"": ""targetElementId"",
-                ""linkType"": ""linkType"",
-                ""targetUrl"": ""http:\/\/www.showhttprequest.com\/?targetUrl=true&artifact=1"",
-                ""description"": ""This is a description for Artifact Link No 1"",
-                ""contentType"": ""application/msword"",
-                ""previewUrl"": ""http:\/\/www.showhttprequest.com\/?previewUrl=ture&artifact=1"",
-                ""label"": ""Artifact Link No 1""
-            }
-        ]
-    }
-} 
\ No newline at end of file
+  <@printArtifact link.targetArtifact/>,
+  ""targetElementId"": ""${link.targetElementId}"",
+  ""targetElementName"": ""${link.targetElementName}""
+}
+</#macro>
+
+<#macro printArtifact artifact>
+	""targetConnectorId"": ""${artifact.connectorId}"",
+  	""targetArtifactId"": ""${artifact.originalNodeId}"",
+	""targetArtifactRevision"": ""${artifact.artifactType.revision}"",
+	""targetContentType"": ""${artifact.artifactType.mimeType.contentType}"",
+	""label"": ""${artifact.metadata.name}""
+</#macro>
diff --git a/activiti-webapp-rest/src/main/webapp/WEB-INF/web-application-context.xml b/activiti-webapp-rest/src/main/webapp/WEB-INF/web-application-context.xml
index e23298e48e..fa44494f42 100644
--- a/activiti-webapp-rest/src/main/webapp/WEB-INF/web-application-context.xml
+++ b/activiti-webapp-rest/src/main/webapp/WEB-INF/web-application-context.xml
@@ -210,5 +210,10 @@
         class=""org.activiti.rest.api.cycle.ContentRepresentationGet""
         parent=""activitiWebScript"">
   </bean>
+  
+  <bean id=""webscript.org.activiti.rest.api.cycle.artifact-links.get""
+        class=""org.activiti.rest.api.cycle.ArtifactLinksGet""
+        parent=""activitiWebScript"">
+  </bean>
 
 </beans>
\ No newline at end of file","implemented ArtifactLinksGet , classes already existed but only returned dummy content before","""Refactor artifact links API to include connector ID and update implementation""","""Updated artifact links API to use connectorId and artifactId instead of sourceArtifactId""","""Add method getArtifactLinks with sourceConnectorId parameter and update related code""

Explanation:

* In `CycleService.java`, a new method `getArtifactLinks(String sourceConnectorId, String sourceArtifactId)` has been added.
* In `CycleServiceImpl.java`, the implementation for the new method is still missing and throws a ""Not implemented yet"" exception.
* In `ArtifactLinksGet.java`, the `connectorId` parameter is now retrieved from the request, and the `getArtifactLinks` method is called with the `connectorId` and `artifactId` parameters. The result is stored in the `links` variable and added to the model.
* In `artifact-links.get.desc.xml`, the URL for the web script has been updated to include the `connectorId` and `artifactId` parameters.
* In `artifact-links.get.json.ftl`, the JSON output for the web script has been updated to include the `links` variable.
* In `web-application-context.xml`, a new bean has been added for the `ArtifactLinksGet` class.","Updated `getArtifactLinks` methods and REST API to include `connectorId` parameter, adjusted XML configurations and JSON response template."
"diff --git a/lifecycle/runtime/src/main/java/com/android/support/lifecycle/FragmentLifecycleDispatcher.java b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/FragmentLifecycleDispatcher.java
index bdb41977fe6..edb8b2b7707 100644
--- a/lifecycle/runtime/src/main/java/com/android/support/lifecycle/FragmentLifecycleDispatcher.java
+++ b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/FragmentLifecycleDispatcher.java
@@ -119,8 +119,8 @@ class FragmentLifecycleDispatcher {
 
         private void dispatchIfLifecycleFragment(Fragment fragment,
                 @Lifecycle.Event int event) {
-            if (fragment instanceof LifecycleFragment) {
-                ((LifecycleFragment) fragment).mLifecycleRegistry.handleLifecycleEvent(event);
+            if (fragment instanceof LifecycleRegistryProvider) {
+                ((LifecycleRegistryProvider) fragment).getLifecycle().handleLifecycleEvent(event);
             }
         }
     }
diff --git a/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleFragment.java b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleFragment.java
index 90ca0c91c80..cc97034b716 100644
--- a/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleFragment.java
+++ b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleFragment.java
@@ -22,11 +22,11 @@ import android.support.v4.app.Fragment;
  * A fragment that is also a {@link LifecycleProvider}.
  */
 // This class will be removed once we integrate with Fragment library.
-public class LifecycleFragment extends Fragment implements LifecycleProvider {
+public class LifecycleFragment extends Fragment implements LifecycleRegistryProvider {
     LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);
 
     @Override
-    public Lifecycle getLifecycle() {
+    public LifecycleRegistry getLifecycle() {
         return mLifecycleRegistry;
     }
 }
diff --git a/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleRegistryProvider.java b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleRegistryProvider.java
new file mode 100644
index 00000000000..2006462e7b1
--- /dev/null
+++ b/lifecycle/runtime/src/main/java/com/android/support/lifecycle/LifecycleRegistryProvider.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.support.lifecycle;
+
+/**
+ * Specialization of {@link LifecycleProvider} that explicitly returns {@link LifecycleRegistry}
+ * This method may be used if an object which updates state of {@link Lifecycle} doesn't own it.
+ */
+@SuppressWarnings({""WeakerAccess"", ""unused""})
+public interface LifecycleRegistryProvider extends LifecycleProvider {
+    @Override
+    LifecycleRegistry getLifecycle();
+}",Introduce LifecycleRegistryProvider .,"""Extract LifecycleRegistryProvider interface and update FragmentLifecycleDispatcher to use it""","""Replace LifecycleFragment with LifecycleRegistryProvider to handle lifecycle events""

This commit message accurately describes the changes made in the commit, which involves replacing the `LifecycleFragment` with `LifecycleRegistryProvider` to handle lifecycle events.","""Refactor LifecycleFragment to implement LifecycleRegistryProvider and update FragmentLifecycleDispatcher""

This commit introduces a new interface `LifecycleRegistryProvider` which extends `LifecycleProvider` and explicitly returns a `LifecycleRegistry`. `LifecycleFragment` is updated to implement this new interface instead of `LifecycleProvider`. The `dispatchIfLifecycleFragment` method in `FragmentLifecycleDispatcher` is also updated to check if the fragment is an instance of `LifecycleRegistryProvider` instead of `LifecycleFragment`.",Refactor LifecycleFragment to implement new LifecycleRegistryProvider interface for better lifecycle event handling.
"diff --git a/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConnectorVarLocation.java b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConnectorVarLocation.java
new file mode 100644
index 00000000000..bbb309f7d85
--- /dev/null
+++ b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConnectorVarLocation.java
@@ -0,0 +1,41 @@
+/*
+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the ""License""); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+package org.wso2.ballerina.core.interpreter;
+
+import org.wso2.ballerina.core.model.Node;
+import org.wso2.ballerina.core.model.NodeExecutor;
+import org.wso2.ballerina.core.model.NodeVisitor;
+import org.wso2.ballerina.core.model.values.BValue;
+
+/**
+ * {@code ConnectorVarLocation} represents a location where a variable declared in a
+ * {@link org.wso2.ballerina.core.model.Connector }  is stored at runtime
+ *
+ * @since 1.0.0
+ */
+public class ConnectorVarLocation extends MemoryLocation implements Node {
+    @Override
+    public void accept(NodeVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    @Override
+    public BValue execute(NodeExecutor executor) {
+        return executor.visit(this);
+    }
+}
diff --git a/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConstantLocation.java b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConstantLocation.java
new file mode 100644
index 00000000000..4e7f7066b55
--- /dev/null
+++ b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ConstantLocation.java
@@ -0,0 +1,50 @@
+/*
+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the ""License""); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+package org.wso2.ballerina.core.interpreter;
+
+import org.wso2.ballerina.core.model.Node;
+import org.wso2.ballerina.core.model.NodeExecutor;
+import org.wso2.ballerina.core.model.NodeVisitor;
+import org.wso2.ballerina.core.model.values.BValue;
+
+/**
+ * {@code ConstantLocation} represents a location where a constant is stored at runtime
+ *
+ * @since 1.0.0
+ */
+public class ConstantLocation extends MemoryLocation implements Node {
+    private int staticMemAddrOffset;
+
+    public ConstantLocation(int staticMemAddrOffset) {
+        this.staticMemAddrOffset = staticMemAddrOffset;
+    }
+
+    public int getStaticMemAddrOffset() {
+        return staticMemAddrOffset;
+    }
+
+    @Override
+    public void accept(NodeVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    @Override
+    public BValue execute(NodeExecutor executor) {
+        return executor.visit(this);
+    }
+}
diff --git a/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/LocalVarLocation.java b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/LocalVarLocation.java
new file mode 100644
index 00000000000..eb273eaa394
--- /dev/null
+++ b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/LocalVarLocation.java
@@ -0,0 +1,50 @@
+/*
+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the ""License""); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+package org.wso2.ballerina.core.interpreter;
+
+import org.wso2.ballerina.core.model.Node;
+import org.wso2.ballerina.core.model.NodeExecutor;
+import org.wso2.ballerina.core.model.NodeVisitor;
+import org.wso2.ballerina.core.model.values.BValue;
+
+/**
+ * {@code LocalVarLocation} represents a location of a local variable stored in the stack frame
+ *
+ * @since 1.0.0
+ */
+public class LocalVarLocation extends MemoryLocation implements Node {
+    private int stackFrameOffset;
+
+    public LocalVarLocation(int stackFrameOffset) {
+        this.stackFrameOffset = stackFrameOffset;
+    }
+
+    public int getStackFrameOffset() {
+        return stackFrameOffset;
+    }
+
+    @Override
+    public void accept(NodeVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    @Override
+    public BValue execute(NodeExecutor executor) {
+        return executor.visit(this);
+    }
+}
diff --git a/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/MemoryLocation.java b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/MemoryLocation.java
new file mode 100644
index 00000000000..630bd54b3c9
--- /dev/null
+++ b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/MemoryLocation.java
@@ -0,0 +1,43 @@
+/*
+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the ""License""); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+package org.wso2.ballerina.core.interpreter;
+
+import org.wso2.ballerina.core.model.ExecutableExpr;
+import org.wso2.ballerina.core.model.Node;
+import org.wso2.ballerina.core.model.NodeExecutor;
+import org.wso2.ballerina.core.model.NodeVisitor;
+import org.wso2.ballerina.core.model.values.BValue;
+
+/**
+ * {@code MemoryLocation} represents a location where a variable or constant is stored at runtime
+ *
+ * @since 1.0.0
+ */
+public class MemoryLocation implements Node, ExecutableExpr {
+
+    @Override
+    public void accept(NodeVisitor visitor) {
+
+    }
+
+    @Override
+    public BValue execute(NodeExecutor executor) {
+        return null;
+    }
+
+}
diff --git a/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ServiceVarLocation.java b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ServiceVarLocation.java
new file mode 100644
index 00000000000..ca768045b10
--- /dev/null
+++ b/modules/ballerina-core/src/main/java/org/wso2/ballerina/core/interpreter/ServiceVarLocation.java
@@ -0,0 +1,41 @@
+/*
+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+*
+*  WSO2 Inc. licenses this file to you under the Apache License,
+*  Version 2.0 (the ""License""); you may not use this file except
+*  in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing,
+*  software distributed under the License is distributed on an
+*  ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+*  KIND, either express or implied.  See the License for the
+*  specific language governing permissions and limitations
+*  under the License.
+*/
+package org.wso2.ballerina.core.interpreter;
+
+import org.wso2.ballerina.core.model.Node;
+import org.wso2.ballerina.core.model.NodeExecutor;
+import org.wso2.ballerina.core.model.NodeVisitor;
+import org.wso2.ballerina.core.model.values.BValue;
+
+/**
+ * {@code ServiceVarLocation} represents a location where a variable declared in a
+ * {@link org.wso2.ballerina.core.model.Service }  is stored at runtime
+ *
+ * @since 1.0.0
+ */
+public class ServiceVarLocation extends MemoryLocation implements Node {
+    @Override
+    public void accept(NodeVisitor visitor) {
+        visitor.visit(this);
+    }
+
+    @Override
+    public BValue execute(NodeExecutor executor) {
+        return executor.visit(this);
+    }
+}",Add MemoryLocation concept which holds var addrs .,"""Added classes for representing variable locations in the Ballerina interpreter""","Added MemoryLocation hierarchy with subclasses for different variable locations

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of a new hierarchy of classes (`MemoryLocation` and its subclasses) which represents different types of variable locations in the Ballerina interpreter.","This commit appears to add several new Java classes to the `org.wso2.ballerina.core.interpreter` package. These classes include `ConnectorVarLocation`, `ConstantLocation`, `LocalVarLocation`, `MemoryLocation`, and `ServiceVarLocation`. Each of these classes represents a location where a variable or constant is stored at runtime in the Ballerina interpreter.

Here's a brief summary of each class:

1. `ConnectorVarLocation`: Represents a location where a variable declared in a `Connector` is stored at runtime.
2. `ConstantLocation`: Represents a location where a constant is stored at runtime.
3. `LocalVarLocation`: Represents a location of a local variable stored in the stack frame.
4. `MemoryLocation`: An abstract class that represents a location where a variable or constant is stored at runtime.
5. `ServiceVarLocation`: Represents a location where a variable declared in a `Service` is stored at runtime.

Each of these classes implements the `Node` interface and extends the `MemoryLocation` class. They also override the `accept` method from the `Node` interface and the `execute` method from the `ExecutableExpr` interface.

The commit message could be: ""Add new classes for variable and constant storage locations in the Ballerina interpreter.""","""Add classes for runtime variable and constant locations in Memory: ConnectorVarLocation, ConstantLocation, LocalVarLocation, ServiceVarLocation, and MemoryLocation."""
"diff --git a/cas-server-documentation/installation/Configuring-Authentication-Components.md b/cas-server-documentation/installation/Configuring-Authentication-Components.md
index 2f60426536..5a45c87181 100644
--- a/cas-server-documentation/installation/Configuring-Authentication-Components.md
+++ b/cas-server-documentation/installation/Configuring-Authentication-Components.md
@@ -7,7 +7,6 @@ title: CAS - Configuring Authentication Components
 
 The CAS authentication process is primarily controlled by an authentication manager, which orchestrates a collection of authentication handlers.
 
-
 ## Authentication Manager
 CAS ships with a single yet flexible authentication manager which performs authentication according to the following contract.
 
@@ -33,9 +32,10 @@ To see the relevant list of CAS properties, please [review this guide](Configura
 
 There are a variety of authentication handlers and schemes supported by CAS. Use the menu to navigate around the site and choose. 
 
-<div class=""alert alert-info""><strong>Default Credentials</strong><p>To test the default authentication scheme in CAS,
-use <strong>casuser</strong> and <strong>Mellon</strong> as the username and password respectively.</p></div>
-
+<div class=""alert alert-warning""><strong>Default Credentials</strong><p>To test the default authentication scheme in CAS,
+use <strong>casuser</strong> and <strong>Mellon</strong> as the username and password respectively. These are automatically
+configured via the static authencation handler, and <strong>MUST</strong> be removed from the configuration 
+prior to production rollouts.</p></div>
 
 ## Principal Resolution
 Please [see this guide](Configuring-Principal-Resolution.html) more full details on principal resolution.",Updated docs,"""Update default credentials warning in Configuring-Authentication-Components documentation""","""Updated default credentials warning in Configuring Authentication Components documentation to include removal requirement prior to production rollouts.""","""Update default credentials warning in Configuring-Authentication-Components.md""

This commit modifies the warning about default credentials in the CAS documentation. It changes the alert type from ""info"" to ""warning,"" adds a note that the default credentials are configured via the static authentication handler, and emphasizes that they must be removed before production rollouts.","Updated the default credentials alert to warning, emphasizing the removal of static authentication handler for production."
"diff --git a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java b/src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithEnum1328Test.java
similarity index 98%
rename from src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java
rename to src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithEnum1328Test.java
index 0ce3a6595..1a1ec47f5 100644
--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java
+++ b/src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithEnum1328Test.java
@@ -1,4 +1,4 @@
-package com.fasterxml.jackson.databind.jsontype.ext;
+package com.fasterxml.jackson.failing;
 
 import java.io.IOException;
 import java.util.Arrays;",move new failing test under ` failing ` until problem fixed,"""Move ExternalTypeIdWithEnum1328Test to failing tests package""","""Rename package of ExternalTypeIdWithEnum1328Test to indicate failing test""","""Renamed package from `com/fasterxml/jackson/databind/jsontype/ext` to `com/fasterxml/jackson/failing` in ExternalTypeIdWithEnum1328Test.java""",Renamed test file and package for ExternalTypeIdWithEnum1328Test.java to indicate failing tests.
"diff --git a/GoogleWrapperSample/GoogleWrapperSample.iml b/GoogleWrapperSample/GoogleWrapperSample.iml
new file mode 100644
index 000000000..7c31f30b8
--- /dev/null
+++ b/GoogleWrapperSample/GoogleWrapperSample.iml
@@ -0,0 +1,45 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""FacetManager"">
+    <facet type=""android"" name=""Android"">
+      <configuration>
+        <notImportedProperties>
+          <property>MANIFEST_FILE_PATH</property>
+          <property>RESOURCES_DIR_PATH</property>
+          <property>ASSETS_DIR_PATH</property>
+          <property>NATIVE_LIBS_DIR_PATH</property>
+        </notImportedProperties>
+      </configuration>
+    </facet>
+  </component>
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/gen"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/target/generated-sources/r"" isTestSource=""false"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/classes"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/combined-assets"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/combined-resources"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/extracted-dependencies"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/maven-archiver"" />
+    </content>
+    <orderEntry type=""jdk"" jdkName=""Maven Android 4.1.2 Platform"" jdkType=""Android SDK"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" name=""osmdroid-android-3.0.11-SNAPSHOT"" level=""project"" />
+    <orderEntry type=""module"" module-name=""osmdroid-android-test"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android:android:4.1.1.4"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-logging:commons-logging:1.1.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpclient:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpcore:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-codec:commons-codec:1.3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xerces:xmlParserAPIs:2.6.2"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xpp3:xpp3:1.1.4c"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.json:json:20070829"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android.maps:maps:16_r3"" level=""project"" />
+    <orderEntry type=""library"" name=""Maven: org.slf4j:slf4j-android:1.6.1-RC1"" level=""project"" />
+  </component>
+</module>
+
diff --git a/OSMMapTilePackager/OSMMapTilePackager.iml b/OSMMapTilePackager/OSMMapTilePackager.iml
new file mode 100644
index 000000000..bbfb04cb0
--- /dev/null
+++ b/OSMMapTilePackager/OSMMapTilePackager.iml
@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/src"" isTestSource=""false"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" name=""osmdroid-android-3.0.11-SNAPSHOT"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android:android:4.1.1.4"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-logging:commons-logging:1.1.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpclient:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpcore:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-codec:commons-codec:1.3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xerces:xmlParserAPIs:2.6.2"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xpp3:xpp3:1.1.4c"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.json:json:20070829"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpmime:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.james:apache-mime4j:0.6"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.slf4j:slf4j-api:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: org.slf4j:slf4j-log4j12:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: log4j:log4j:1.2.16"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: junit:junit:4.8.2"" level=""project"" />
+  </component>
+</module>
+
diff --git a/OSMMapTilePackager/build.gradle b/OSMMapTilePackager/build.gradle
new file mode 100644
index 000000000..a0d08ebe2
--- /dev/null
+++ b/OSMMapTilePackager/build.gradle
@@ -0,0 +1,4 @@
+apply plugin: 'java'
+sourceSets {
+    main.java.srcDirs = ['src']
+}
diff --git a/OpenStreetMapViewer/.classpath b/OpenStreetMapViewer/.classpath
index cd8460591..03eb04c52 100644
--- a/OpenStreetMapViewer/.classpath
+++ b/OpenStreetMapViewer/.classpath
@@ -17,5 +17,6 @@
 			<attribute name=""maven.pomderived"" value=""true""/>
 		</attributes>
 	</classpathentry>
+	<classpathentry kind=""con"" path=""com.android.ide.eclipse.adt.DEPENDENCIES""/>
 	<classpathentry kind=""output"" path=""bin/classes""/>
 </classpath>
diff --git a/OpenStreetMapViewer/OpenStreetMapViewer.iml b/OpenStreetMapViewer/OpenStreetMapViewer.iml
new file mode 100644
index 000000000..c9c7df0a6
--- /dev/null
+++ b/OpenStreetMapViewer/OpenStreetMapViewer.iml
@@ -0,0 +1,43 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""FacetManager"">
+    <facet type=""android"" name=""Android"">
+      <configuration>
+        <notImportedProperties>
+          <property>MANIFEST_FILE_PATH</property>
+          <property>RESOURCES_DIR_PATH</property>
+          <property>ASSETS_DIR_PATH</property>
+          <property>NATIVE_LIBS_DIR_PATH</property>
+        </notImportedProperties>
+      </configuration>
+    </facet>
+  </component>
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/gen"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src"" isTestSource=""false"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/classes"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/combined-assets"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/combined-resources"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/generated-sources/extracted-dependencies"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target/maven-archiver"" />
+    </content>
+    <orderEntry type=""jdk"" jdkName=""Maven Android 4.1.2 Platform"" jdkType=""Android SDK"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android:android:4.1.1.4"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-logging:commons-logging:1.1.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpclient:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpcore:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-codec:commons-codec:1.3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xerces:xmlParserAPIs:2.6.2"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xpp3:xpp3:1.1.4c"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.json:json:20070829"" level=""project"" />
+    <orderEntry type=""library"" name=""Maven: com.google.android:support-v4:r7"" level=""project"" />
+    <orderEntry type=""library"" name=""Maven: org.slf4j:slf4j-android:1.6.1-RC1"" level=""project"" />
+    <orderEntry type=""module"" module-name=""osmdroid-android"" />
+  </component>
+</module>
+
diff --git a/OpenStreetMapViewer/build.gradle b/OpenStreetMapViewer/build.gradle
new file mode 100644
index 000000000..b7b21af06
--- /dev/null
+++ b/OpenStreetMapViewer/build.gradle
@@ -0,0 +1,35 @@
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.4'
+    }
+}
+apply plugin: 'android'
+
+dependencies {
+}
+
+android {
+    compileSdkVersion 16
+    buildToolsVersion ""16""
+
+    defaultConfig {
+        minSdkVersion 4
+        targetSdkVersion 16
+    }
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            resources.srcDirs = ['src']
+            aidl.srcDirs = ['src']
+            renderscript.srcDirs = ['src']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+
+        instrumentTest.setRoot('tests')
+    }
+}
diff --git a/osmdroid-android/build.gradle b/osmdroid-android/build.gradle
new file mode 100644
index 000000000..26be5a1a8
--- /dev/null
+++ b/osmdroid-android/build.gradle
@@ -0,0 +1,4 @@
+apply plugin: 'java'
+sourceSets {
+    main.java.srcDirs = ['src\main\java','src\main\resources','src\test\java','src\test\resources']
+}
diff --git a/osmdroid-android/osmdroid-android.iml b/osmdroid-android/osmdroid-android.iml
new file mode 100644
index 000000000..4c81d8577
--- /dev/null
+++ b/osmdroid-android/osmdroid-android.iml
@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/src/main/java"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src/main/resources"" isTestSource=""false"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android:android:4.1.1.4"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-logging:commons-logging:1.1.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpclient:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpcore:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-codec:commons-codec:1.3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xerces:xmlParserAPIs:2.6.2"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xpp3:xpp3:1.1.4c"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.json:json:20070829"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpmime:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.james:apache-mime4j:0.6"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.slf4j:slf4j-api:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: org.slf4j:slf4j-log4j12:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: log4j:log4j:1.2.16"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: junit:junit:4.8.2"" level=""project"" />
+  </component>
+</module>
+
diff --git a/osmdroid-android/src/main/osmdroid-android.iml b/osmdroid-android/src/main/osmdroid-android.iml
new file mode 100644
index 000000000..e67abe102
--- /dev/null
+++ b/osmdroid-android/src/main/osmdroid-android.iml
@@ -0,0 +1,12 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" inherit-compiler-output=""true"">
+    <exclude-output />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/java"" isTestSource=""false"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+  </component>
+</module>
+
diff --git a/osmdroid-android/src/test/osmdroid-android-test.iml b/osmdroid-android/src/test/osmdroid-android-test.iml
new file mode 100644
index 000000000..2242d8d96
--- /dev/null
+++ b/osmdroid-android/src/test/osmdroid-android-test.iml
@@ -0,0 +1,12 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" inherit-compiler-output=""true"">
+    <exclude-output />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/java"" isTestSource=""true"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+  </component>
+</module>
+
diff --git a/osmdroid-parent.iml b/osmdroid-parent.iml
new file mode 100644
index 000000000..971bef599
--- /dev/null
+++ b/osmdroid-parent.iml
@@ -0,0 +1,14 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <exclude-output />
+    <content url=""file://$MODULE_DIR$"">
+      <excludeFolder url=""file://$MODULE_DIR$/target"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+  </component>
+</module>
+
diff --git a/osmdroid-third-party/build.gradle b/osmdroid-third-party/build.gradle
new file mode 100644
index 000000000..26be5a1a8
--- /dev/null
+++ b/osmdroid-third-party/build.gradle
@@ -0,0 +1,4 @@
+apply plugin: 'java'
+sourceSets {
+    main.java.srcDirs = ['src\main\java','src\main\resources','src\test\java','src\test\resources']
+}
diff --git a/osmdroid-third-party/osmdroid-third-party.iml b/osmdroid-third-party/osmdroid-third-party.iml
new file mode 100644
index 000000000..527a9ee25
--- /dev/null
+++ b/osmdroid-third-party/osmdroid-third-party.iml
@@ -0,0 +1,33 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=""true"" type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" LANGUAGE_LEVEL=""JDK_1_6"" inherit-compiler-output=""false"">
+    <output url=""file://$MODULE_DIR$/target/classes"" />
+    <output-test url=""file://$MODULE_DIR$/target/test-classes"" />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/src/main/java"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src/main/resources"" isTestSource=""false"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src/test/java"" isTestSource=""true"" />
+      <sourceFolder url=""file://$MODULE_DIR$/src/test/resources"" isTestSource=""true"" />
+      <excludeFolder url=""file://$MODULE_DIR$/target"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android:android:4.1.1.4"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-logging:commons-logging:1.1.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpclient:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpcore:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: commons-codec:commons-codec:1.3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.khronos:opengl-api:gl1.1-android-2.1_r1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xerces:xmlParserAPIs:2.6.2"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: xpp3:xpp3:1.1.4c"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.json:json:20070829"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: com.google.android.maps:maps:16_r3"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.httpcomponents:httpmime:4.0.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.apache.james:apache-mime4j:0.6"" level=""project"" />
+    <orderEntry type=""library"" scope=""PROVIDED"" name=""Maven: org.slf4j:slf4j-api:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: org.slf4j:slf4j-log4j12:1.6.1"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: log4j:log4j:1.2.16"" level=""project"" />
+    <orderEntry type=""library"" scope=""TEST"" name=""Maven: junit:junit:4.8.2"" level=""project"" />
+  </component>
+</module>
+
diff --git a/osmdroid-third-party/src/main/osmdroid-third-party.iml b/osmdroid-third-party/src/main/osmdroid-third-party.iml
new file mode 100644
index 000000000..62fa71c23
--- /dev/null
+++ b/osmdroid-third-party/src/main/osmdroid-third-party.iml
@@ -0,0 +1,18 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<module type=""JAVA_MODULE"" version=""4"">
+  <component name=""NewModuleRootManager"" inherit-compiler-output=""true"">
+    <exclude-output />
+    <content url=""file://$MODULE_DIR$"">
+      <sourceFolder url=""file://$MODULE_DIR$/java"" isTestSource=""false"" />
+    </content>
+    <orderEntry type=""inheritedJdk"" />
+    <orderEntry type=""sourceFolder"" forTests=""false"" />
+    <orderEntry type=""library"" name=""osmdroid-android-3.0.11-SNAPSHOT"" level=""project"" />
+    <orderEntry type=""library"" name=""OpenStreetMapViewer-3.0.11-SNAPSHOT"" level=""project"" />
+    <orderEntry type=""module"" module-name=""osmdroid-android-test"" />
+    <orderEntry type=""module"" module-name=""OpenStreetMapViewer"" />
+    <orderEntry type=""module"" module-name=""osmdroid-android"" />
+    <orderEntry type=""module"" module-name=""generated-sources1"" />
+  </component>
+</module>
+",Add settings for Android Studio,"""Added IntelliJ IDEA project files and Gradle build scripts for osmdroid and OpenStreetMapViewer projects""","""Added Gradle build files and updated IntelliJ project files for osmdroid and its dependencies""","""Added .iml files for GoogleWrapperSample, OSMMapTilePackager, and OpenStreetMapViewer modules, and build.gradle files for OSMMapTilePackager and OpenStreetMapViewer. Also added source sets to osmdroid-android and osmdroid-third-party build.gradle files.""",Added build.gradle and module.iml files for various projects to support Maven and Gradle builds.
"diff --git a/src/main/java/io/vertx/core/http/impl/headers/HeadersMultiMap.java b/src/main/java/io/vertx/core/http/impl/headers/HeadersMultiMap.java
index 68fbbf99e..d54b8a640 100644
--- a/src/main/java/io/vertx/core/http/impl/headers/HeadersMultiMap.java
+++ b/src/main/java/io/vertx/core/http/impl/headers/HeadersMultiMap.java
@@ -526,19 +526,21 @@ public final class HeadersMultiMap extends HttpHeaders implements MultiMap {
 
   private void remove0(int h, int i, CharSequence name) {
     HeadersMultiMap.MapEntry e = entries[i];
-    MapEntry first = e;
+    MapEntry prev = null;
     while (e != null) {
       MapEntry next = e.next;
       CharSequence key = e.key;
       if (e.hash == h && (name == key || AsciiString.contentEqualsIgnoreCase(name, key))) {
-        if (e == first) {
-          first = e.next;
+        if (prev == null) {
+          entries[i] = next;
+        } else {
+          prev.next = next;
         }
         e.remove();
       }
+      prev = e;
       e = next;
     }
-    entries[i] = first;
   }
 
   private void add0(int h, int i, final CharSequence name, final CharSequence value) {
diff --git a/src/test/java/io/vertx/core/http/headers/VertxHttpHeadersTest.java b/src/test/java/io/vertx/core/http/headers/VertxHttpHeadersTest.java
index 9df5d0bcd..91df9c299 100644
--- a/src/test/java/io/vertx/core/http/headers/VertxHttpHeadersTest.java
+++ b/src/test/java/io/vertx/core/http/headers/VertxHttpHeadersTest.java
@@ -208,4 +208,16 @@ public class VertxHttpHeadersTest extends HeadersTestBase {
     mm.remove(name2);
     assertTrue(""not empty"", mm.isEmpty());
   }
+
+  @Test
+  public void testRemovalNext() {
+    MultiMap mmap = newMultiMap();
+    String name1 = this.sameHash1;
+    String name2 = this.sameHash2;
+    mmap.set(name1, ""v"");
+    mmap.add(name2, ""q"");
+    mmap.remove(name1);
+    mmap.set(name1, ""w"");
+    assertEquals(""w"", mmap.get(name1));
+  }
 }",Fix Null pointer exception in MultiMap . set <issue_id> .,"""Fix HeadersMultiMap removal logic and add test for removal next""","""Improve handling of removal in HeadersMultiMap and add test case for it""","""Fix issue with removing entries in HeadersMultiMap and add test case for it""

Explanation:
The code change in HeadersMultiMap.java modifies the implementation of the `remove0` method which is used to remove an entry from the map. The change adds a `prev` variable to keep track of the previous entry while iterating through the entries, and updates the links between entries when an entry is removed. This fixes an issue where removing an entry could result in incorrect links between entries.

The test case added in VertxHttpHeadersTest.java, `testRemovalNext`, tests the scenario where an entry is removed and then another entry with the same hash code is added. This ensures that the removal of the first entry does not affect the addition of the second entry.",Fix HeadersMultiMap.remove0 method to correctly handle linked list entries; added a test case to verify the fix.
"diff --git a/app/src/processing/app/SketchController.java b/app/src/processing/app/SketchController.java
index 662ca114d..902c9e333 100644
--- a/app/src/processing/app/SketchController.java
+++ b/app/src/processing/app/SketchController.java
@@ -140,7 +140,7 @@ public class SketchController {
 
     // Add the extension here, this simplifies some of the logic below.
     if (newName.indexOf('.') == -1) {
-      newName += ""."" + sketch.getDefaultExtension();
+      newName += ""."" + Sketch.DEFAULT_SKETCH_EXTENSION;
     }
 
     // if renaming to the same thing as before, just ignore.
@@ -167,17 +167,17 @@ public class SketchController {
       return;
     }
 
-    String newExtension = newName.substring(dot+1).toLowerCase();
-    if (!validExtension(newExtension)) {
+    FileUtils.SplitFile split = FileUtils.splitFilename(newName);
+    if (!Sketch.EXTENSIONS.contains(split.extension)) {
       Base.showWarning(tr(""Problem with rename""),
-                       I18n.format(
-			 tr(""\"".{0}\"" is not a valid extension.""), newExtension
-		       ), null);
+                       I18n.format(tr(""\"".{0}\"" is not a valid extension.""),
+                                   split.extension),
+                       null);
       return;
     }
 
     // Don't let the user create the main tab as a .java file instead of .pde
-    if (!isDefaultExtension(newExtension)) {
+    if (!split.extension.equals(Sketch.DEFAULT_SKETCH_EXTENSION)) {
       if (renamingCode) {  // If creating a new tab, don't show this error
         if (current.isPrimary()) { // If this is the main tab, disallow
           Base.showWarning(tr(""Problem with rename""),
@@ -189,14 +189,9 @@ public class SketchController {
       }
     }
 
-    // dots are allowed for the .pde and .java, but not in the name
-    // make sure the user didn't name things poo.time.pde
-    // or something like that (nothing against poo time)
-    String shortName = newName.substring(0, dot);
-    String sanitaryName = BaseNoGui.sanitizeName(shortName);
-    if (!shortName.equals(sanitaryName)) {
-      newName = sanitaryName + ""."" + newExtension;
-    }
+    // Sanitize name
+    String sanitaryName = BaseNoGui.sanitizeName(split.basename);
+    newName = sanitaryName + ""."" + split.extension;
 
     // In Arduino, we want to allow files with the same name but different
     // extensions, so compare the full names (including extensions).  This
@@ -1058,23 +1053,6 @@ public class SketchController {
     return code.isExtension(sketch.getDefaultExtension());
   }
 
-
-  /**
-   * True if the specified extension is the default file extension.
-   */
-  private boolean isDefaultExtension(String what) {
-    return what.equals(sketch.getDefaultExtension());
-  }
-
-
-  /**
-   * Check this extension (no dots, please) against the list of valid
-   * extensions.
-   */
-  private boolean validExtension(String what) {
-    return Sketch.EXTENSIONS.contains(what);
-  }
-
   /**
    * Create the data folder if it does not exist already. As a convenience,
    * it also returns the data folder, since it's likely about to be used.
diff --git a/arduino-core/src/processing/app/Sketch.java b/arduino-core/src/processing/app/Sketch.java
index 90e3964a3..a598841ab 100644
--- a/arduino-core/src/processing/app/Sketch.java
+++ b/arduino-core/src/processing/app/Sketch.java
@@ -15,7 +15,8 @@ import static processing.app.I18n.tr;
  */
 public class Sketch {
 
-  public static final List<String> SKETCH_EXTENSIONS = Arrays.asList(""ino"", ""pde"");
+  public static final String DEFAULT_SKETCH_EXTENSION = ""ino"";
+  public static final List<String> SKETCH_EXTENSIONS = Arrays.asList(DEFAULT_SKETCH_EXTENSION, ""pde"");
   public static final List<String> OTHER_ALLOWED_EXTENSIONS = Arrays.asList(""c"", ""cpp"", ""h"", ""hh"", ""hpp"", ""s"");
   public static final List<String> EXTENSIONS = Stream.concat(SKETCH_EXTENSIONS.stream(), OTHER_ALLOWED_EXTENSIONS.stream()).collect(Collectors.toList());
 ",Clean up SketchController . nameCode a bit .,"""Refactor SketchController to use FileUtils.SplitFile and simplify extension handling""","""Refactor SketchController and Sketch to use consistent extension handling and default extension.""","""Update SketchController to use Sketch.DEFAULT\_SKETCH\_EXTENSION and sanitize name properly""

Explanation:

* The first change in the SketchController class is to use the constant Sketch.DEFAULT\_SKETCH\_EXTENSION instead of sketch.getDefaultExtension() when adding a default extension to a new name.
* The second change is to sanitize the basename of the new name instead of the short name (without extension). The method BaseNoGui.sanitizeName() is used to replace invalid characters in the name.
* The third change is in the Sketch class, where the constant DEFAULT\_SKETCH\_EXTENSION is added and used in the definition of SKETCH\_EXTENSIONS.
* The removed methods isDefaultExtension() and validExtension() from SketchController are not needed anymore, as the constant DEFAULT\_SKETCH\_EXTENSION and the list EXTENSIONS from Sketch class are used instead.","Refactored sketch renaming logic: replaced hardcoded extensions with constants, improved validation and name sanitization."
"diff --git a/build/src/main/resources/bin/add-user.bat b/build/src/main/resources/bin/add-user.bat
index 3e629bc3cf..a72c7f6ab9 100644
--- a/build/src/main/resources/bin/add-user.bat
+++ b/build/src/main/resources/bin/add-user.bat
@@ -69,7 +69,10 @@ if ""x%JBOSS_MODULEPATH%"" == ""x"" (
   set  ""JBOSS_MODULEPATH=%JBOSS_HOME%\modules""
 )
 
-""%JAVA%"" ^
+# Uncomment to override standalone and domain user location  
+# set ""JAVA_OPTS=%JAVA_OPTS% -Djboss.server.config.user.dir=../standalone/configuration -Djboss.domain.config.user.dir=../domain/configuration""
+
+""%JAVA%"" %JAVA_OPTS% ^
     -jar ""%JBOSS_HOME%\jboss-modules.jar"" ^
     -mp ""%JBOSS_MODULEPATH%"" ^
      org.jboss.as.domain-add-user ^
diff --git a/build/src/main/resources/bin/add-user.sh b/build/src/main/resources/bin/add-user.sh
index dfb0c8b978..a4ead414b7 100755
--- a/build/src/main/resources/bin/add-user.sh
+++ b/build/src/main/resources/bin/add-user.sh
@@ -62,6 +62,8 @@ fi
 
 # Sample JPDA settings for remote socket debugging
 #JAVA_OPTS=""$JAVA_OPTS -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=y""
+# Uncomment to override standalone and domain user location  
+#JAVA_OPTS=""$JAVA_OPTS -Djboss.server.config.user.dir=../standalone/configuration -Djboss.domain.config.user.dir=../domain/configuration""
 
 eval \""$JAVA\"" $JAVA_OPTS \
          -jar \""$JBOSS_HOME/jboss-modules.jar\"" \
diff --git a/domain-management/src/main/java/org/jboss/as/domain/management/security/AddPropertiesUser.java b/domain-management/src/main/java/org/jboss/as/domain/management/security/AddPropertiesUser.java
index b27c7dd3b7..96d7499f3f 100644
--- a/domain-management/src/main/java/org/jboss/as/domain/management/security/AddPropertiesUser.java
+++ b/domain-management/src/main/java/org/jboss/as/domain/management/security/AddPropertiesUser.java
@@ -47,8 +47,10 @@ public class AddPropertiesUser {
 
     public static final String SERVER_BASE_DIR = ""jboss.server.base.dir"";
     public static final String SERVER_CONFIG_DIR = ""jboss.server.config.dir"";
+    public static final String SERVER_CONFIG_USER_DIR = ""jboss.server.config.user.dir"";
     public static final String DOMAIN_BASE_DIR = ""jboss.domain.base.dir"";
     public static final String DOMAIN_CONFIG_DIR = ""jboss.domain.config.dir"";
+    public static final String DOMAIN_CONFIG_USER_DIR = ""jboss.domain.config.user.dir"";
 
     public static final String DEFAULT_MANAGEMENT_REALM = ""ManagementRealm"";
     public static final String DEFAULT_APPLICATION_REALM = ""ApplicationRealm"";
@@ -56,7 +58,8 @@ public class AddPropertiesUser {
     public static final String APPLICATION_USERS_PROPERTIES = ""application-users.properties"";
     public static final String APPLICATION_ROLES_PROPERTIES = ""application-roles.properties"";
     public static final String APPLICATION_USERS_SWITCH = ""-a"";
-
+    public static final String DOMAIN_CONFIG_DIR_USERS_SWITCH = ""-dc"";
+    public static final String SERVER_CONFIG_DIR_USERS_SWITCH = ""-sc"";
 
     private static final char CARRIAGE_RETURN_CHAR = '\r';
 
@@ -72,21 +75,26 @@ public class AddPropertiesUser {
 
     protected AddPropertiesUser() {
         theConsole = new JavaConsole();
+        StateValues stateValues = new StateValues();
+        stateValues.setJbossHome(System.getenv(""JBOSS_HOME""));
+
         if (theConsole.getConsole() == null) {
             throw MESSAGES.noConsoleAvailable();
         }
-        nextState = new PropertyFilePrompt(theConsole);
+        nextState = new PropertyFilePrompt(theConsole, stateValues);
     }
 
     protected AddPropertiesUser(ConsoleWrapper console) {
         this.theConsole = console;
-        nextState = new PropertyFilePrompt(theConsole);
+        StateValues stateValues = new StateValues();
+        stateValues.setJbossHome(System.getenv(""JBOSS_HOME""));
+        nextState = new PropertyFilePrompt(theConsole,stateValues);
     }
 
     private AddPropertiesUser(final boolean management, final String user, final char[] password, final String realm) {
         boolean silent = false;
         StateValues stateValues = new StateValues();
-
+        stateValues.setJbossHome(System.getenv(""JBOSS_HOME""));
         String valueSilent = argsCliProps.getProperty(""silent"");
 
         if (valueSilent != null) {
@@ -144,6 +152,10 @@ public class AddPropertiesUser {
                     }
                 } else if (temp.equals(APPLICATION_USERS_SWITCH)) {
                     management = false;
+                } else if (temp.indexOf(DOMAIN_CONFIG_DIR_USERS_SWITCH)>=0) {
+                    System.setProperty(DOMAIN_CONFIG_DIR,temp.substring(3));
+                } else if (temp.indexOf(SERVER_CONFIG_DIR)>=0) {
+                    System.setProperty(SERVER_CONFIG_DIR,temp.substring(3));
                 } else {
                     argsList.add(temp);
                 }
diff --git a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFileFinder.java b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFileFinder.java
index 22f57f3d38..82878ee547 100644
--- a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFileFinder.java
+++ b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFileFinder.java
@@ -45,15 +45,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.MGMT_USERS_PROPERTIES;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.APPLICATION_USERS_PROPERTIES;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.APPLICATION_ROLES_PROPERTIES;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.SERVER_CONFIG_DIR;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.SERVER_BASE_DIR;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.DOMAIN_BASE_DIR;
-import static org.jboss.as.domain.management.security.AddPropertiesUser.DOMAIN_CONFIG_DIR;
 
 import static org.jboss.as.domain.management.DomainManagementMessages.MESSAGES;
+import static org.jboss.as.domain.management.security.AddPropertiesUser.*;
 
 /**
  * The first state executed, responsible for searching for the relevant properties files.
@@ -74,7 +68,7 @@ public class PropertyFileFinder implements State {
     @Override
     public State execute() {
         stateValues.setKnownRoles(new HashMap<String, String>());
-        String jbossHome = System.getenv(""JBOSS_HOME"");
+        String jbossHome = stateValues.getJBossHome();
         if (jbossHome == null) {
             return new ErrorState(theConsole, MESSAGES.jbossHomeNotSet(), null, stateValues);
         }
@@ -134,12 +128,11 @@ public class PropertyFileFinder implements State {
     }
 
     private boolean findFiles(final String jbossHome, final List<File> foundFiles, final String fileName) {
-
-        File standaloneProps = buildFilePath(jbossHome, SERVER_CONFIG_DIR, SERVER_BASE_DIR, ""standalone"", fileName);
+        File standaloneProps = buildFilePath(jbossHome, SERVER_CONFIG_USER_DIR, SERVER_CONFIG_DIR, SERVER_BASE_DIR, ""standalone"", fileName);
         if (standaloneProps.exists()) {
             foundFiles.add(standaloneProps);
         }
-        File domainProps = buildFilePath(jbossHome, DOMAIN_CONFIG_DIR, DOMAIN_BASE_DIR, ""domain"", fileName);
+        File domainProps = buildFilePath(jbossHome, DOMAIN_CONFIG_USER_DIR,DOMAIN_CONFIG_DIR, DOMAIN_BASE_DIR, ""domain"", fileName);
         if (domainProps.exists()) {
             foundFiles.add(domainProps);
         }
@@ -150,10 +143,12 @@ public class PropertyFileFinder implements State {
         return true;
     }
 
-    private File buildFilePath(final String jbossHome, final String serverConfigDirPropertyName,
+    private File buildFilePath(final String jbossHome, final String serverCofigUserDirPropertyName, final String serverConfigDirPropertyName,
                                final String serverBaseDirPropertyName, final String defaultBaseDir, final String fileName) {
 
-        String configDirConfiguredPath = System.getProperty(serverConfigDirPropertyName);
+        String configUserDirConfiguredPath = System.getProperty(serverCofigUserDirPropertyName);
+        String configDirConfiguredPath = configUserDirConfiguredPath != null ? configUserDirConfiguredPath : System.getProperty(serverConfigDirPropertyName);
+
         File configDir =  configDirConfiguredPath != null ? new File(configDirConfiguredPath) : null;
         if(configDir == null) {
             String baseDirConfiguredPath = System.getProperty(serverBaseDirPropertyName);
diff --git a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFilePrompt.java b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFilePrompt.java
index b0fa4b7aab..204be768e9 100644
--- a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFilePrompt.java
+++ b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/PropertyFilePrompt.java
@@ -42,9 +42,11 @@ public class PropertyFilePrompt implements State {
     private static final int INVALID = 2;
 
     private ConsoleWrapper theConsole;
+    private StateValues stateValues;
 
-    public PropertyFilePrompt(ConsoleWrapper theConsole) {
+    public PropertyFilePrompt(ConsoleWrapper theConsole, StateValues stateValues) {
         this.theConsole = theConsole;
+        this.stateValues = stateValues;
         if (theConsole.getConsole() == null) {
             throw MESSAGES.noConsoleAvailable();
         }
@@ -52,7 +54,6 @@ public class PropertyFilePrompt implements State {
 
     @Override
     public State execute() {
-        StateValues stateValues = new StateValues();
 
         theConsole.printf(AddPropertiesUser.NEW_LINE);
         theConsole.printf(MESSAGES.filePrompt());
diff --git a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/StateValues.java b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/StateValues.java
index 27cfdffb52..a771c576a3 100644
--- a/domain-management/src/main/java/org/jboss/as/domain/management/security/state/StateValues.java
+++ b/domain-management/src/main/java/org/jboss/as/domain/management/security/state/StateValues.java
@@ -46,6 +46,7 @@ public class StateValues {
     private List<File> roleFiles;
     private Set<String> knownUsers;
     private Map<String,String> knownRoles;
+    private String jbossHome;
 
     public boolean isSilentOrNonInteractive() {
         return (howInteractive == AddPropertiesUser.Interactiveness.NON_INTERACTIVE) || isSilent();
@@ -139,4 +140,12 @@ public class StateValues {
     public void setKnownRoles(Map<String, String> knownRoles) {
         this.knownRoles = knownRoles;
     }
+
+    public String getJBossHome() {
+        return this.jbossHome;
+    }
+
+    public void setJbossHome(String path) {
+        this.jbossHome = path;
+    }
 }
diff --git a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/AddUserTestCase.java b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/AddUserTestCase.java
index 1b5f606b76..1602a8b445 100644
--- a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/AddUserTestCase.java
+++ b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/AddUserTestCase.java
@@ -28,11 +28,8 @@ import org.jboss.msc.service.StartException;
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Properties;
 
 import static org.jboss.as.domain.management.DomainManagementMessages.MESSAGES;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
 
 /**
  * Test the AddUser state
@@ -54,21 +51,11 @@ public class AddUserTestCase extends PropertyTestHelper {
         consoleMock.setResponses(consoleBuilder);
         addUserState.update(values);
 
-        assertRolePropertyFile();
-        assertUserPropertyFile();
+        assertRolePropertyFile(USER_NAME);
+        assertUserPropertyFile(USER_NAME);
 
         consoleBuilder.validate();
     }
 
-    private void assertUserPropertyFile() throws StartException, IOException {
-        Properties properties = loadProperties(values.getPropertiesFiles().get(0).getAbsolutePath());
-        String password = (String) properties.get(USER_NAME);
-        assertNotNull(password);
-    }
 
-    private void assertRolePropertyFile() throws StartException, IOException {
-        Properties properties = loadProperties(values.getRoleFiles().get(0).getAbsolutePath());
-        String roles = (String) properties.get(USER_NAME);
-        assertEquals(ROLES,roles);
-    }
 }
diff --git a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyFileFinderTestCase.java b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyFileFinderTestCase.java
new file mode 100644
index 0000000000..81689d1385
--- /dev/null
+++ b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyFileFinderTestCase.java
@@ -0,0 +1,123 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+
+package org.jboss.as.domain.management.security.state;
+
+import org.jboss.as.domain.management.security.AddPropertiesUser;
+import org.jboss.as.domain.management.security.AssertConsoleBuilder;
+import org.jboss.msc.service.StartException;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.util.Properties;
+
+import static java.lang.System.getProperty;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Test the property file finder.
+ *
+ * @author <a href=""mailto:flemming.harms@gmail.com"">Flemming Harms</a>
+ */
+public class PropertyFileFinderTestCase extends PropertyTestHelper {
+
+
+    @Before
+    public void setup() throws IOException {
+        values.setManagement(true);
+        values.setJbossHome(getProperty(""java.io.tmpdir""));
+    }
+
+    private File createPropertyFile(String filename, String mode) throws IOException {
+
+        File domainDir = new File(getProperty(""java.io.tmpdir"")+File.separator+mode);
+        domainDir.mkdir();
+        domainDir.deleteOnExit();
+        File propertyUserFile = new File(domainDir, filename);
+        propertyUserFile.createNewFile();
+        propertyUserFile.deleteOnExit();
+        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(propertyUserFile),""UTF8""));
+        try {
+          Properties domainPropeties = new Properties();
+          domainPropeties.setProperty(USER_NAME,""mypassword"");
+          domainPropeties.store(bw,"""");
+        } finally {
+           bw.close();
+        }
+        return propertyUserFile;
+    }
+
+    @Test
+    public void overridePropertyfileLocationRead() throws IOException {
+        File domainMgmtUserFile = createPropertyFile(""mgmt-users.properties"", ""domain"");
+        File standaloneMgmtUserFile = createPropertyFile(""mgmt-users.properties"", ""standalone"");
+
+        System.setProperty(""jboss.server.config.user.dir"", standaloneMgmtUserFile.getParent());
+        System.setProperty(""jboss.domain.config.user.dir"", domainMgmtUserFile.getParent());
+        State propertyFileFinder = new PropertyFileFinder(consoleMock, values);
+        State nextState = propertyFileFinder.execute();
+        assertTrue(nextState instanceof PromptNewUserState);
+        assertTrue(""Expected to find the ""+USER_NAME+"" in the list of known users"",values.getKnownUsers().contains(USER_NAME));
+        assertTrue(""Expected the values.getPropertiesFiles() contained the ""+standaloneMgmtUserFile.getCanonicalPath(),values.getPropertiesFiles().contains(standaloneMgmtUserFile.getCanonicalFile()));
+        assertTrue(""Expected the values.getPropertiesFiles() contained the ""+domainMgmtUserFile.getCanonicalPath(),values.getPropertiesFiles().contains(domainMgmtUserFile.getCanonicalFile()));
+    }
+
+    @Test
+    public void overridePropertyfileLocationWrite() throws IOException, StartException {
+        File domainUserFile = createPropertyFile(""application-users.properties"", ""domain"");
+        File standaloneUserFile = createPropertyFile(""application-users.properties"", ""standalone"");
+        File domainRolesFile = createPropertyFile(""application-roles.properties"", ""domain"");
+        File standaloneRolesFile = createPropertyFile(""application-roles.properties"", ""standalone"");
+
+        String newUserName = ""Hugh.Jackman"";
+        values.setRoles(null);
+        values.setUserName(newUserName);
+        values.setManagement(false);
+        System.setProperty(""jboss.server.config.user.dir"", domainUserFile.getParent());
+        System.setProperty(""jboss.domain.config.user.dir"", standaloneUserFile.getParent());
+        State propertyFileFinder = new PropertyFileFinder(consoleMock, values);
+        State nextState = propertyFileFinder.execute();
+        assertTrue(nextState instanceof PromptNewUserState);
+
+        File locatedDomainPropertyFile = values.getPropertiesFiles().get(values.getPropertiesFiles().indexOf(domainUserFile));
+        File locatedStandalonePropertyFile = values.getPropertiesFiles().get(values.getPropertiesFiles().indexOf(standaloneUserFile));
+        UpdateUser updateUserState = new UpdateUser(consoleMock, values);
+
+        AssertConsoleBuilder consoleBuilder = new AssertConsoleBuilder().
+                expectedDisplayText(updateUserState.consoleUserMessage(locatedDomainPropertyFile.getCanonicalPath())).
+                expectedDisplayText(AddPropertiesUser.NEW_LINE).
+                expectedDisplayText(updateUserState.consoleUserMessage(locatedStandalonePropertyFile.getCanonicalPath())).
+                expectedDisplayText(AddPropertiesUser.NEW_LINE);
+        consoleMock.setResponses(consoleBuilder);
+        updateUserState.update(values);
+
+        assertUserPropertyFile(newUserName);
+        consoleBuilder.validate();
+    }
+
+
+}
diff --git a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyTestHelper.java b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyTestHelper.java
index 3d65745c21..122b7a3955 100644
--- a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyTestHelper.java
+++ b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/PropertyTestHelper.java
@@ -31,6 +31,9 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Properties;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 /**
  * Helper for setting up a test case with ConsoleMock, StateValues and
  * property files for user and roles
@@ -74,4 +77,16 @@ public class PropertyTestHelper {
         propertiesLoad.stop(null);
         return properties;
     }
+
+    protected void assertUserPropertyFile(String userName) throws StartException, IOException {
+        Properties properties = loadProperties(values.getPropertiesFiles().get(0).getAbsolutePath());
+        String password = (String) properties.get(userName);
+        assertNotNull(password);
+    }
+
+    protected void assertRolePropertyFile(String userName) throws StartException, IOException {
+        Properties properties = loadProperties(values.getRoleFiles().get(0).getAbsolutePath());
+        String roles = (String) properties.get(userName);
+        assertEquals(ROLES,roles);
+    }
 }
diff --git a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/UpdateUserTestCase.java b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/UpdateUserTestCase.java
index e0f8854c90..224c60a052 100644
--- a/domain-management/src/test/java/org/jboss/as/domain/management/security/state/UpdateUserTestCase.java
+++ b/domain-management/src/test/java/org/jboss/as/domain/management/security/state/UpdateUserTestCase.java
@@ -28,10 +28,6 @@ import org.jboss.msc.service.StartException;
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Properties;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
 
 /**
  * Test update user
@@ -51,7 +47,7 @@ public class UpdateUserTestCase extends PropertyTestHelper {
         consoleMock.setResponses(consoleBuilder);
         updateUserState.update(values);
 
-        assertUserPropertyFile();
+        assertUserPropertyFile(USER_NAME);
 
         consoleBuilder.validate();
     }
@@ -68,23 +64,11 @@ public class UpdateUserTestCase extends PropertyTestHelper {
         consoleMock.setResponses(consoleBuilder);
         updateUserState.update(values);
 
-        assertUserPropertyFile();
-        assertRolePropertyFile();
+        assertUserPropertyFile(USER_NAME);
+        assertRolePropertyFile(USER_NAME);
 
         consoleBuilder.validate();
     }
 
-    private void assertUserPropertyFile() throws StartException, IOException {
-        Properties properties = loadProperties(values.getPropertiesFiles().get(0).getAbsolutePath());
-        String password = (String) properties.get(USER_NAME);
-        assertNotNull(password);
-    }
-
-    private void assertRolePropertyFile() throws StartException, IOException {
-        Properties properties = loadProperties(values.getRoleFiles().get(0).getAbsolutePath());
-        String roles = (String) properties.get(USER_NAME);
-        assertEquals(ROLES,roles);
-    }
-
 
 }",added support for overriding the user and roles property files for both the standalone and domain server mode . .,"""Added support for overriding standalone and domain user location via system properties""","""Added support for overriding standalone and domain user configuration directories""","The commit message could be:

""Adding support for overriding standalone and domain user location in add-user script and tests""

Explanation:

* In the `add-user.bat` and `add-user.sh` scripts, two lines have been added to allow overriding the standalone and domain user location using the `JAVA_OPTS` environment variable.
* In the `AddPropertiesUser.java` file, two new constants have been added (`SERVER_CONFIG_USER_DIR` and `DOMAIN_CONFIG_USER_DIR`) to represent the user configuration directories for the standalone and domain modes, respectively. These constants are used in the `PropertyFileFinder.java` file to build the file paths for the properties files.
* The `PropertyFileFinder.java` file has been updated to support the new user configuration directories. The `buildFilePath` method now takes an additional argument (`serverCofigUserDirPropertyName`) to represent the user configuration directory property name. The method also checks if this property is set before falling back to the regular configuration directory property name.
* The `StateValues.java` file has been updated to add a new field (`jbossHome`) to store the JBoss home directory. This field is used in the `PropertyFileFinder.java` file to build the file paths for the properties files.
* The `AddUserTestCase.java` file has been updated to add two new assertion methods (`assertUserPropertyFile` and `assertRolePropertyFile`) that take a username as an argument. These methods are used to verify that the properties files for the specified user contain the expected data.
* A new test class `PropertyFileFinderTestCase.java` has been added to test the behavior of the `PropertyFileFinder` class when the user configuration directories are overridden using the `JAVA_OPTS` environment variable.",Added support for overriding standalone and domain user locations and added relevant tests in AddPropertiesUser and PropertyFileFinder.
"diff --git a/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcpOptions.java b/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcpOptions.java
index bd2928a74e..ef36cda04a 100644
--- a/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcpOptions.java
+++ b/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcpOptions.java
@@ -40,7 +40,7 @@ import java.util.regex.Pattern;
 /**
  * Options used to configure Google Cloud Platform project and credentials.
  *
- * <p>These options configure which of the following 4 different mechanisms for obtaining a
+ * <p>These options configure which of the following three different mechanisms for obtaining a
  * credential are used:
  * <ol>
  *   <li>
@@ -49,11 +49,6 @@ import java.util.regex.Pattern;
  *     application default credentials</a>.
  *   </li>
  *   <li>
- *     It can run the gcloud tool in a subprocess to obtain a credential.
- *     This is the preferred mechanism.  The property ""GCloudPath"" can be
- *     used to specify where we search for gcloud data.
- *   </li>
- *   <li>
  *     The user can specify a client secrets file and go through the OAuth2
  *     webflow. The credential will then be cached in the user's home
  *     directory for reuse.
@@ -63,9 +58,10 @@ import java.util.regex.Pattern;
  *     with the service account name.
  *   </li>
  * </ol>
- * The default mechanism is to use the
+ *
+ * <p>The default mechanism is to use the
  * <a href=""https://developers.google.com/accounts/docs/application-default-credentials"">
- * application default credentials</a> falling back to gcloud. The other options can be
+ * application default credentials</a>. The other options can be
  * used by setting the corresponding properties.
  */
 @Description(""Options used to configure Google Cloud Platform project and credentials."")
@@ -159,7 +155,7 @@ public interface GcpOptions extends GoogleApiDebugOptions, PipelineOptions {
    */
   @Description(""The class of the credential factory that should be created and used to create ""
       + ""credentials. If gcpCredential has not been set explicitly, an instance of this class will ""
-      + ""be constructed and used as a credential factory. The default credential factory will"")
+      + ""be constructed and used as a credential factory."")
   @Default.Class(GcpCredentialFactory.class)
   Class<? extends CredentialFactory> getCredentialFactoryClass();
   void setCredentialFactoryClass(
@@ -180,8 +176,8 @@ public interface GcpOptions extends GoogleApiDebugOptions, PipelineOptions {
   void setGcpCredential(Credential value);
 
   /**
-   * Attempts to get infer the default project based upon the environment this application
-   * is executing within. Currently this only supports getting the default project from gCloud.
+   * Attempts to infer the default project based upon the environment this application
+   * is executing within. Currently this only supports getting the default project from gcloud.
    */
   public static class DefaultProjectFactory implements DefaultValueFactory<String> {
     private static final Logger LOG = LoggerFactory.getLogger(DefaultProjectFactory.class);
@@ -213,7 +209,7 @@ public interface GcpOptions extends GoogleApiDebugOptions, PipelineOptions {
             matcher = projectPattern.matcher(line);
             if (matcher.matches()) {
               String project = matcher.group(1).trim();
-              LOG.info(""Inferred default GCP project '{}' from gCloud. If this is the incorrect ""
+              LOG.info(""Inferred default GCP project '{}' from gcloud. If this is the incorrect ""
                   + ""project, please cancel this Pipeline and specify the command-line ""
                   + ""argument --project."", project);
               return project;
diff --git a/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcsOptions.java b/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcsOptions.java
index fefce2b058..d2218075bd 100644
--- a/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcsOptions.java
+++ b/sdk/src/main/java/com/google/cloud/dataflow/sdk/options/GcsOptions.java
@@ -18,6 +18,7 @@ package com.google.cloud.dataflow.sdk.options;
 
 import com.google.cloud.dataflow.sdk.util.AppEngineEnvironment;
 import com.google.cloud.dataflow.sdk.util.GcsUtil;
+import com.google.cloud.hadoop.util.AbstractGoogleAsyncWriteChannel;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 
@@ -68,6 +69,11 @@ public interface GcsOptions extends
   String getGcsEndpoint();
   void setGcsEndpoint(String value);
 
+  /**
+   * The buffer size (in bytes) to use when uploading files to GCS. Please see the documentation for
+   * {@link AbstractGoogleAsyncWriteChannel#setUploadBufferSize} for more information on the
+   * restrictions and performance implications of this value.
+   */
   @Description(""The buffer size (in bytes) to use when uploading files to GCS. Please see the ""
       + ""documentation for AbstractGoogleAsyncWriteChannel.setUploadBufferSize for more ""
       + ""information on the restrictions and performance implications of this value.\n\n""",Improve Dataflow javadocs .,"""Remove gcloud credential mechanism and add GCS upload buffer size option""

This commit message accurately reflects the changes made in the diff:

- The gcloud credential mechanism has been removed from the GcpOptions class.
- A new option for setting the GCS upload buffer size has been added to the GcsOptions class.","Here's a possible commit message based on the provided diff:

`Update GcpOptions and GcsOptions to reflect changes in GCS and credential handling`

Or, if you prefer a more concise message:

`Refactor GcpOptions and GcsOptions for GCS and credential improvements`

Alternatively, you could also use a message that highlights the specific changes made, such as:

`Update GcpOptions to reflect removal of gcloud subprocess mechanism and GcsOptions to add upload buffer size option`","This commit appears to make the following changes to the `GcpOptions.java` and `GcsOptions.java` files in the `sdk/src/main/java/com/google/cloud/dataflow/sdk/options/` directory:

1. In `GcpOptions.java`:
   - Removes the option to use the gcloud tool to obtain a credential.
   - Updates the description of the default mechanism for obtaining credentials to use the application default credentials.
   - Updates the description of the `getCredentialFactoryClass()` method to remove a reference to the gcloud tool.
   - Updates the description of the `DefaultProjectFactory` class to remove a reference to gCloud and use gcloud instead.
2. In `GcsOptions.java`:
   - Adds a new option to set the buffer size (in bytes) to use when uploading files to GCS.

The commit message for this change could be:

""Remove gcloud tool as an option for obtaining credentials and add option to set GCS upload buffer size""",Remove gcloud credential mechanism and add buffer size configuration for uploading files to GCS in GcsOptions.
"diff --git a/stetho/src/main/java/com/facebook/stetho/Stetho.java b/stetho/src/main/java/com/facebook/stetho/Stetho.java
index 25d2bed..f68a29f 100644
--- a/stetho/src/main/java/com/facebook/stetho/Stetho.java
+++ b/stetho/src/main/java/com/facebook/stetho/Stetho.java
@@ -239,7 +239,6 @@ public class Stetho {
     @Nullable private DocumentProviderFactory mDocumentProvider;
     @Nullable private RuntimeReplFactory mRuntimeRepl;
     @Nullable private DatabaseFilesProvider mDatabaseFilesProvider;
-    @Nullable private DatabaseConnectionProvider mDatabaseConnectionProvider;
     @Nullable private List<Database.DatabaseDriver> mDatabaseDrivers;
 
     public DefaultInspectorModulesBuilder(Context context) {
@@ -273,22 +272,25 @@ public class Stetho {
     /**
      * Customize the location of database files that Stetho will propogate in the UI.  Android's
      * {@link Context#getDatabasePath} method will be used by default if not overridden here.
+     *
+     * <p>This method is deprecated and instead it is recommended that you explicitly
+     * configure the {@link SqliteDatabaseDriver} as with:</p>
+     * <pre>
+     *   provideDatabaseDriver(
+     *     new SqliteDatabaseDriver(
+     *       context,
+     *       new MyDatabaseFilesProvider(...),
+     *       new DefaultDatabaseConnectionProvider(...)))
+     * </pre>
+     *
+     * @deprecated See example alternative above.
      */
+    @Deprecated
     public DefaultInspectorModulesBuilder databaseFiles(DatabaseFilesProvider provider) {
       mDatabaseFilesProvider = provider;
       return this;
     }
 
-    /**
-     * Customize the database connection that Stetho will use in the UI. Android's
-     * {@link SQLiteDatabase#openDatabase(String, SQLiteDatabase.CursorFactory, int)} method will
-     * be used by default.
-     */
-    public DefaultInspectorModulesBuilder databaseConnections(DatabaseConnectionProvider provider) {
-      mDatabaseConnectionProvider = provider;
-      return this;
-    }
-
     /**
      * Extend and provide additional database drivers. Currently two database drivers are supported
      * in this lib: <br>
@@ -376,9 +378,7 @@ public class Stetho {
                   mDatabaseFilesProvider != null ?
                       mDatabaseFilesProvider :
             ",Remove databaseConnections API from the inspector builder .,"""Deprecate databaseFiles and remove databaseConnections in DefaultInspectorModulesBuilder""

This commit message accurately reflects the changes made in the diff:

- The `databaseFiles` method is deprecated and a recommended alternative is provided.
- The `databaseConnections` method is removed.","""Remove deprecated database connection provider and deprecate databaseFiles method in Stetho""","""Deprecate Stetho.DefaultInspectorModulesBuilder.databaseFiles() in favor of provideDatabaseDriver()""

Explanation: The method `databaseFiles()` in the `DefaultInspectorModulesBuilder` class of the `Stetho` library has been deprecated. Instead, it is recommended to use the `provideDatabaseDriver()` method with a custom `SqliteDatabaseDriver` instance. The new approach allows for more explicit configuration of the database driver, including the database files provider and the database connection provider. The old method `databaseConnections()` has also been removed as it is no longer needed.",Removed `DatabaseConnectionProvider` customization and deprecated `databaseFiles` method in DefaultInspectorModulesBuilder.
"diff --git a/build.gradle b/build.gradle
index 725b69d9b7..c712c78f54 100644
--- a/build.gradle
+++ b/build.gradle
@@ -68,7 +68,6 @@ configure(subprojects) {
         slf4jVersion = '1.7.22'
         sparkVersion = '2.5.2'
         springBootVersion = '1.5.10.RELEASE'
-        springVersion = '4.3.6.RELEASE'
 
         os = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
     }
@@ -180,7 +179,6 @@ configure(project(':common')) {
         compile ""org.openjfx:javafx-graphics:$javafxVersion:$os""
         compile ""com.google.protobuf:protobuf-java:$protobufVersion""
         compile 'com.google.code.gson:gson:2.8.5'
-        compile ""org.springframework:spring-core:$springVersion""
         compile ""net.sf.jopt-simple:jopt-simple:$joptVersion""
         compile ""org.slf4j:slf4j-api:$slf4jVersion""
         compile ""ch.qos.logback:logback-core:$logbackVersion""
@@ -216,9 +214,7 @@ configure(project(':p2p')) {
         compile(""com.github.JesusMcCloud.netlayer:tor.external:$netlayerVersion"") {
             exclude(module: 'slf4j-api')
         }
-        compile(""org.apache.httpcomponents:httpclient:$httpclientVersion"") {
-            exclude(module: 'commons-logging')
-        }
+        compile ""org.apache.httpcomponents:httpclient:$httpclientVersion""
         compile ""org.fxmisc.easybind:easybind:$easybindVersion""
         compileOnly ""org.projectlombok:lombok:$lombokVersion""
         annotationProcessor ""org.projectlombok:lombok:$lombokVersion""
@@ -275,7 +271,6 @@ configure(project(':core')) {
 
         testCompile ""org.hamcrest:hamcrest-all:$hamcrestVersion""
         testCompile ""org.mockito:mockito-core:$mockitoVersion""
-        testCompile ""org.springframework:spring-test:$springVersion""
         testCompile ""com.natpryce:make-it-easy:$easyVersion""
         testCompileOnly ""org.projectlombok:lombok:$lombokVersion""
         testAnnotationProcessor ""org.projectlombok:lombok:$lombokVersion""
@@ -356,7 +351,6 @@ configure(project(':desktop')) {
         annotationProcessor ""org.projectlombok:lombok:$lombokVersion""
 
         testCompile ""org.mockito:mockito-core:$mockitoVersion""
-        testCompile ""org.springframework:spring-test:$springVersion""
         testCompile ""com.natpryce:make-it-easy:$easyVersion""
         testCompileOnly ""org.projectlombok:lombok:$lombokVersion""
         testAnnotationProcessor ""org.projectlombok:lombok:$lombokVersion""
@@ -443,7 +437,6 @@ configure(project(':seednode')) {
         compile project(':core')
         compileOnly ""org.projectlombok:lombok:$lombokVersion""
         annotationProcessor ""org.projectlombok:lombok:$lombokVersion""
-        testCompile ""org.springframework:spring-test:$springVersion""
         testCompile ""org.mockito:mockito-core:$mockitoVersion""
     }
 }
diff --git a/gradle/witness/gradle-witness.gradle b/gradle/witness/gradle-witness.gradle
index 9be698d7e9..341402db4e 100644
--- a/gradle/witness/gradle-witness.gradle
+++ b/gradle/witness/gradle-witness.gradle
@@ -85,7 +85,6 @@ dependencyVerification {
         'org.jetbrains.kotlin:kotlin-stdlib:6ea3d0921b26919b286f05cbdb906266666a36f9a7c096197114f7495708ffbc',
         'org.jetbrains:annotations:ace2a10dc8e2d5fd34925ecac03e4988b2c0f851650c94b8cef49ba1bd111478',
         'org.slf4j:slf4j-api:3a4cd4969015f3beb4b5b4d81dbafc01765fb60b8a439955ca64d8476fef553e',
-        'org.springframework:spring-core:c451e8417adb2ffb2445636da5e44a2f59307c4100037a1fe387c3fba4f29b52',
         'org.tukaani:xz:a594643d73cc01928cf6ca5ce100e094ea9d73af760a5d4fb6b75fa673ecec96',
     ]
 }",Eliminate dependency on Spring Framework .,"""Remove Spring dependencies from build configuration""","""Removed Spring dependencies from build.gradle files""

This commit message accurately reflects the changes made in the diff, which involve removing Spring dependencies from various build.gradle files.","""Remove springVersion and related dependencies from build.gradle and gradle-witness.gradle""

This commit removes the `springVersion` variable and its related dependencies from the `build.gradle` and `gradle-witness.gradle` files. Specifically, it removes the following dependencies:

* `org.springframework:spring-core:$springVersion` from the `:common` project
* `org.springframework:spring-test:$springVersion` from the `:core`, `:desktop`, and `:seednode` projects
* `org.springframework:spring-core:c451e8417adb2ffb2445636da5e44a2f59307c4100037a1fe387c3fba4f29b52` from the `dependencyVerification` block in `gradle-witness.gradle`.

Additionally, it updates the `httpclient` dependency in the `:p2p` project to no longer exclude `commons-logging`.",Remove Spring framework dependencies and related configuration from build.gradle and gradle-witness.gradle.
"diff --git a/findbugs/src/java5/edu/umd/cs/findbugs/gui2/RecentMenu.java b/findbugs/src/java5/edu/umd/cs/findbugs/gui2/RecentMenu.java
index 2f95f876d..d260c6d50 100644
--- a/findbugs/src/java5/edu/umd/cs/findbugs/gui2/RecentMenu.java
+++ b/findbugs/src/java5/edu/umd/cs/findbugs/gui2/RecentMenu.java
@@ -92,7 +92,7 @@ public class RecentMenu{
 				continue;
 			}
 
-			recentMenu.add(MainFrame.getInstance().createRecentItem(f, SaveType.PROJECT));
+			recentMenu.add(MainFrame.getInstance().createRecentItem(f, SaveType.forFile(f)));
 		}
 		
 	}",use the right SaveType .,"""Improve RecentMenu to use file-specific SaveType""","""Refactor RecentMenu to use forFile method for SaveType""","""Update RecentMenu.java to use SaveType.forFile(f) instead of SaveType.PROJECT in createRecentItem() call""",Update RecentMenu to dynamically determine SaveType based on file characteristics using SaveType.forFile().
"diff --git a/aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java b/aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
index d4deb2a93..072972a97 100644
--- a/aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
+++ b/aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
@@ -1082,7 +1082,6 @@ public class DriverConductor implements Agent
             ctx.publicationUnblockTimeoutNs(),
             ctx.publicationConnectionTimeoutNs(),
             params.lingerTimeoutNs,
-            ctx.imageLivenessTimeoutNs(),
             ctx.untetheredWindowLimitTimeoutNs(),
             ctx.untetheredRestingTimeoutNs(),
             isExclusive,
diff --git a/aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java b/aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
index 6201bceb5..12a35aa68 100644
--- a/aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
+++ b/aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
@@ -385,11 +385,12 @@ public final class IpcPublication implements DriverManagedResource, Subscribable
                     {
                         conductor.notifyUnavailableImageLink(registrationId, untethered.subscriptionLink);
                         untethered.state = UntetheredSubscription.LINGER;
+                        untethered.timeOfLastUpdateNs = nowNs;
                     }
                     break;
 
                 case UntetheredSubscription.LINGER:
-                    if ((untethered.timeOfLastUpdateNs + imageLivenessTimeoutNs) - nowNs <= 0)
+                    if ((untethered.timeOfLastUpdateNs + untetheredWindowLimitTimeoutNs) - nowNs <= 0)
                     {
                         subscriberPositions = ArrayUtil.remove(subscriberPositions, untethered.position);
                         untethered.state = UntetheredSubscription.RESTING;
diff --git a/aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java b/aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
index e767a9cf6..2a3567ccc 100644
--- a/aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
+++ b/aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
@@ -100,7 +100,6 @@ public class NetworkPublication
     private final long unblockTimeoutNs;
     private final long connectionTimeoutNs;
     private final long lingerTimeoutNs;
-    private final long imageLivenessTimeoutNs;
     private final long untetheredWindowLimitTimeoutNs;
     private final long untetheredRestingTimeoutNs;
     private final long tag;
@@ -170,7 +169,6 @@ public class NetworkPublication
         final long unblockTimeoutNs,
         final long connectionTimeoutNs,
         final long lingerTimeoutNs,
-        final long imageLivenessTimeoutNs,
         final long untetheredWindowLimitTimeoutNs,
         final long untetheredRestingTimeoutNs,
         final boolean isExclusive,
@@ -181,7 +179,6 @@ public class NetworkPublication
         this.unblockTimeoutNs = unblockTimeoutNs;
         this.connectionTimeoutNs = connectionTimeoutNs;
         this.lingerTimeoutNs = lingerTimeoutNs;
-        this.imageLivenessTimeoutNs = imageLivenessTimeoutNs;
         this.untetheredWindowLimitTimeoutNs = untetheredWindowLimitTimeoutNs;
         this.untetheredRestingTimeoutNs = untetheredRestingTimeoutNs;
         this.tag = tag;
@@ -761,11 +758,12 @@ public class NetworkPublication
                     {
                         conductor.notifyUnavailableImageLink(registrationId, untethered.subscriptionLink);
                         untethered.state = UntetheredSubscription.LINGER;
+                        untethered.timeOfLastUpdateNs = nowNs;
                     }
                     break;
 
                 case UntetheredSubscription.LINGER:
-                    if ((untethered.timeOfLastUpdateNs + imageLivenessTimeoutNs) - nowNs <= 0)
+                    if ((untethered.timeOfLastUpdateNs + untetheredWindowLimitTimeoutNs) - nowNs <= 0)
                     {
                         spyPositions = ArrayUtil.remove(spyPositions, untethered.position);
    ",Linger the untethered for the same as window limit timeout .,"""Replace imageLivenessTimeoutNs with untetheredWindowLimitTimeoutNs in untethered subscription logic""","""Remove imageLivenessTimeoutNs and replace with untetheredWindowLimitTimeoutNs in various classes""","""Remove imageLivenessTimeoutNs and replace it with untetheredWindowLimitTimeoutNs in DriverConductor and NetworkPublication classes.""

This commit appears to remove the `imageLivenessTimeoutNs` variable from the `DriverConductor` and `NetworkPublication` classes, and replaces its usage with `untetheredWindowLimitTimeoutNs` in the `case UntetheredSubscription.LINGER` section of both classes. Additionally, it adds a new line to set `untethered.timeOfLastUpdateNs = nowNs;` in the `case UntetheredSubscription.UNAVAILABLE_IMAGE` section of both classes.","""Removed `imageLivenessTimeoutNs`, updated logic to use `untetheredWindowLimitTimeoutNs` instead in `IpcPublication` and `NetworkPublication` classes."""
"diff --git a/lib.profiler.charts/src/org/netbeans/lib/profiler/charts/AxisComponent.java b/lib.profiler.charts/src/org/netbeans/lib/profiler/charts/AxisComponent.java
index 6bcb6a8e9..86bd8b573 100644
--- a/lib.profiler.charts/src/org/netbeans/lib/profiler/charts/AxisComponent.java
+++ b/lib.profiler.charts/src/org/netbeans/lib/profiler/charts/AxisComponent.java
@@ -1,23 +1,23 @@
 /*
  * Copyright 2007-2008 Sun Microsystems, Inc.  All Rights Reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
+ * 
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Sun designates this
  * particular file as subject to the ""Classpath"" exception as provided
  * by Sun in the LICENSE file that accompanied this code.
- *
+ * 
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
  * accompanied this code).
- *
+ * 
  * You should have received a copy of the GNU General Public License version
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
+ * 
  * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
  * CA 95054 USA or visit www.sun.com if you need additional information or
  * have any questions.
@@ -42,6 +42,8 @@ import javax.swing.JComponent;
 import javax.swing.JLabel;
 import javax.swing.SwingConstants;
 import javax.swing.SwingUtilities;
+import org.netbeans.lib.profiler.charts.AxisMarksComputer.BytesMark;
+import org.netbeans.lib.profiler.charts.xy.XYItemPainter;
 
 /**
  *
@@ -49,6 +51,10 @@ import javax.swing.SwingUtilities;
  */
 public class AxisComponent extends JComponent implements ChartDecorator {
 
+    public static final int NO_MESH         = 0;
+    public static final int MESH_BACKGROUND = 1;
+    public static final int MESH_FOREGROUND = 2;
+
     private final int location;
     private boolean horizontal;
 
@@ -58,12 +64,12 @@ public class AxisComponent extends JComponent implements ChartDecorator {
 
     private int maxExtent;
 
-    private final Paint meshPaint = Color.LIGHT_GRAY;
+    private final Paint meshPaint = Utils.checkedColor(new Color(80, 80, 80, 50));
     private final Stroke meshStroke = new BasicStroke(1);
 
 
     public AxisComponent(ChartComponent chart, AxisMarksComputer marksComputer,
-                         MarkValuePainter marksPainter, int location) {
+                         MarkValuePainter marksPainter, int location, int mesh) {
 
         this.location = location;
         horizontal = location == SwingConstants.NORTH ||
@@ -81,13 +87,14 @@ public class AxisComponent extends JComponent implements ChartDecorator {
             setPreferredSize(new Dimension(10, 1));
         }
 
-//        chart.addConfigurationListener(new ChartListener());
-//        chart.addPostDecorator(this);
-    }
+        chart.addConfigurationListener(new ChartListener());
 
+        if (mesh == MESH_BACKGROUND) chart.addPreDecorator(this);
+        else if (mesh == MESH_FOREGROUND) chart.addPostDecorator(this);
+    }
+    
 
     public void paint(Graphics g) {
-
         Rectangle clip = g.getClipBounds();
         if (clip == null) clip = new Rectangle(0, 0, getWidth(), getHeight());
 
@@ -97,32 +104,31 @@ public class AxisComponent extends JComponent implements ChartDecorator {
             chartBounds.y = clip.y;
             chartBounds.height = clip.height;
             paintHorizontalAxis(g, clip, chartBounds);
-//            if (getPreferredSize().height < maxExtent + 25) {
-//                SwingUtilities.invokeLater(new Runnable() {
-//                    public void run() {
-//                        setPreferredSize(new Dimension(getPreferredSize().width, maxExtent + 25));
-//                        invalidate();
-//                        ((JComponent)getParent()).revalidate();
-//                        getParent().repaint();
-//                    }
-//                });
-//            }
+            if (getPreferredSize().height < maxExtent + 20) {
+                SwingUtilities.invokeLater(new Runnable() {
+                    public void run() {
+                        setPreferredSize(new Dimension(getPreferredSize().width, maxExtent + 20));
+                        invalidate();
+                        ((JComponent)getParent()).revalidate();
+                        getParent().repaint();
+                    }
+                });
+            }
         } else {
             chartBounds.x = clip.x;
             chartBounds.width = clip.width;
             paintVerticalAxis(g, clip, chartBounds);
-//            if (getPreferredSize().width < maxExtent + 25) {
-//                SwingUtilities.invokeLater(new Runnable() {
-//                    public void run() {
-//                        setPreferredSize(new Dimension(maxExtent + 25, getPreferredSize().height));
-//                        invalidate();
-//                        ((JComponent)getParent()).revalidate();
-//                        getParent().repaint();
-//                    }
-//                });
-//            }
+            if (getPreferredSize().width < maxExtent + 20) {
+                SwingUtilities.invokeLater(new Runnable() {
+                    public void run() {
+                        setPreferredSize(new Dimension(maxExtent + 20, getPreferredSize().height));
+                        invalidate();
+                        ((JComponent)getParent()).revalidate();
+                        getParent().repaint();
+                    }
+                });
+            }
         }
-        super.paint(g);
     }
 
     public void paint(Graphics2D g, Rectangle dirtyArea, ChartContext context) {
@@ -135,153 +141,140 @@ public class AxisComponent extends JComponent implements ChartDecorator {
 
 
     private void paintHorizontalAxis(Graphics g, Rectangle clip, Rectangle chartMask) {
+
+        g.setColor(getForeground());
+
         if (location == SwingConstants.NORTH) {
             g.drawLine(chartMask.x - 1, getHeight() - 1, chartMask.x + chartMask.width, getHeight() - 1);
         } else {
             g.drawLine(chartMask.x, 0, chartMask.x + chartMask.width, 0);
         }
 
-//        int viewStart = SwingUtilities.convertPoint(this, chartMask.x, 0, chart).x;
-//        int viewEnd = viewStart + chartMask.width;
-////        long dataStart = chart.getChartContext().getDataX(viewStart);
-////        long dataEnd = chart.getChartContext().getDataX(viewStart + chartMask.width);
-//
-//        Iterator<AxisMarksComputer.Mark> marks = marksComputer.marksIterator(
-//                                                 viewStart, viewEnd);
-//
-//        g.setColor(getForeground());
-//        g.setFont(getFont());
-//
-//        while (marks.hasNext()) {
-//            AxisMarksComputer.Mark mark = marks.next();
-//            int x = ChartContext.getCheckedIntValue(chart.getChartContext().getViewX(mark.getValue()));
-//            x = SwingUtilities.convertPoint(chart, x, 0, this).x;
-//
-//            if (x < chartMask.x || x >= chartMask.x + chartMask.width) continue;
-//
-//            int height = 10;
-//            Component painter = marksPainter.getPainter(mark);
-//            painter.setSize(painter.getPreferredSize());
-//            int markHeight = painter.getHeight();
-//            int markOffsetX = painter.getWidth() / 2;
-//            maxExtent = Math.max(maxExtent, markHeight);
-//
-//            if (location == SwingConstants.NORTH) {
-//                g.drawLine(x, getHeight() - 2, x, getHeight() - 2 - height);
-//
-//                g.translate(x - markOffsetX, getHeight() - 7 - height - markHeight);
-//                painter.paint(g);
-//                g.translate(-x + markOffsetX, -getHeight() + 7 + height + markHeight);
-//            } else {
-//                g.drawLine(x, 1, x, 1 + height);
-//
-//                g.translate(x - markOffsetX, 1 + height);
-//                painter.paint(g);
-//                g.translate(-x + markOffsetX, -1 - height);
-//            }
-//        }
-    }
-
-    private void paintHorizontalAxisMesh(Graphics2D g, Rectangle clip, Rectangle chartMask) {
-//        long dataStart = chart.getChartContext().getDataX(chartMask.x);
-//        long dataEnd = chart.getChartContext().getDataX(chartMask.x + chartMask.width);
+        int viewStart = SwingUtilities.convertPoint(this, chartMask.x, 0, chart).x - 1; // -1: extra 1px for axis
+        int viewEnd = viewStart + chartMask.width + 2; // +2 extra 1px + 1px for axis
 
         Iterator<AxisMarksComputer.Mark> marks = marksComputer.marksIterator(
-                                                 chartMask.x, chartMask.x + chartMask.width);
+                                                 viewStart, viewEnd);
 
-        g.setColor(getForeground());
-        g.setFont(getFont());
+        int lZeroOffset = chart.isRightBased() ? 0 : 1;
+        int rZeroOffset = chart.isRightBased() ? 1 : 0;
 
         while (marks.hasNext()) {
             AxisMarksComputer.Mark mark = marks.next();
-            int x = ChartContext.getCheckedIntValue(chart.getChartContext().getViewX(mark.getValue()));
+//            int x = ChartContext.getCheckedIntValue(chart.getChartContext().getViewX(mark.getValue()));
+            int x = SwingUtilities.convertPoint(chart, mark.getPosition(), 0, this).x;
+
+            if (x < chartMask.x - lZeroOffset ||
+                x >= chartMask.x + chartMask.width + rZeroOffset) continue;
+
+            int height = 10;
+            Component painter = marksPainter.getPainter(mark);
+            painter.setSize(painter.getPreferredSize());
+            int markHeight = painter.getHeight();
+            int markOffsetX = painter.getWidth() / 2;
+            maxExtent = Math.max(maxExtent, markHeight);
 
-//            if (x < chartMask.x || x >= chartMask.x + chartMask.width) continue;
+            g.setColor(getForeground());
 
             if (location == SwingConstants.NORTH) {
-                g.setPaint(meshPaint);
-                g.setStroke(meshStroke);
-                g.drawLine(x, chartMask.y, x, chartMask.y + chartMask.height);
+                g.drawLine(x, getHeight() - 2, x, getHeight() - 2 - height);
+
+                g.translate(x - markOffsetX, getHeight() - 7 - height - markHeight);
+                painter.paint(g);
+                g.translate(-x + markOffsetX, -getHeight() + 7 + height + markHeight);
             } else {
+                g.drawLine(x, 1, x, 1 + height - 4);
 
+                g.translate(x - markOffsetX, 1 + height);
+                painter.paint(g);
+                g.translate(-x + markOffsetX, -1 - height);
             }
         }
     }
 
+    private void paintHorizontalAxisMesh(Graphics2D g, Rectangle clip, Rectangle chartMask) {
+        Iterator<AxisMarksComputer.Mark> marks = marksComputer.marksIterator(
+                                                 chartMask.x, chartMask.x + chartMask.width);
+
+        while (marks.hasNext()) {
+            AxisMarksComputer.Mark mark = marks.next();
+            int x = ChartContext.getCheckedIntValue(chart.getChartContext().getViewX(mark.getValue()));
+
+            g.setPaint(meshPaint);
+            g.setStroke(meshStroke);
+            g.drawLine(x, chartMask.y, x, chartMask.y + chartMask.height);
+        }
+    }
+
     private void paintVerticalAxis(Graphics g, Rectangle clip, Rectangle chartMask) {
+
+        g.setColor(getForeground());
+        
         if (location == SwingConstants.WEST) {
             g.drawLine(getWidth() - 1, chartMask.y - 1, getWidth() - 1, chartMask.y + chartMask.height);
         } else {
             g.drawLine(0, chartMask.y, 0, chartMask.y + chartMask.height);
         }
 
-//        int viewStart = SwingUtilities.convertPoint(this, 0, chartMask.y, chart).y;
-//        int viewEnd = viewStart + chartMask.height;
-////        long dataStart = chart.getChartContext().getDataY(viewStart);
-////        long dataEnd = chart.getChartContext().getDataY(viewStart + chartMask.height);
-//
-//        Iterator<AxisMarksComputer.Mark> marks = marksComputer.marksIterator(
-//                                                 viewStart, viewEnd);
-//
-//        g.setColor(getForeground());
-//        g.setFont(getFont());
-//
-//        while (marks.hasNext()) {
-//            AxisMarksComputer.Mark mark = marks.next();
-//            int y = ChartContext.getCheckedIntValue(chart.getChartContext().getViewY(mark.getValue()));
-//            y = SwingUtilities.convertPoint(chart, 0, y, this).y;
-//
-//            if (y < chartMask.y || y >= chartMask.y + chartMask.height) continue;
-//
-//            int width = 10;
-//            Component painter = marksPainter.getPainter(mark);
-//            painter.setSize(painter.getPreferredSize());
-//            int markWidth = painter.getWidth();
-//            int markOffsetY = painter.getHeight() / 2;
-//            maxExtent = Math.max(maxExtent, markWidth);
-//
-//            if (location == SwingConstants.WEST) {
-//                g.drawLine(getWidth() - 2, y, getWidth() - 2 - width, y);
-//
-//                g.translate(getWidth() - markWidth - 15, y - markOffsetY);
-//                painter.paint(g);
-//                g.translate(-getWidth() + markWidth + 15, -y + markOffsetY);
-//            } else {
-//                g.drawLine(1, y, 1 + width, y);
-//
-//                g.translate(width + 5, y - markOffsetY);
-//                painter.paint(g);
-//                g.translate(-width - 5, -y + markOffsetY);
-//            }
-//        }
-    }
-
-    private void paintVerticalAxisMesh(Graphics2D g, Rectangle clip, Rectangle chartMask) {
-//        long dataStart = chart.getChartContext().getDataY(chartMask.y);
-//        long dataEnd = chart.getChartContext().getDataY(chartMask.y + chartMask.height);
+        int viewStart = SwingUtilities.convertPoint(this, 0, chartMask.y, chart).y;
+        int viewEnd = viewStart + chartMask.height;
 
         Iterator<AxisMarksComputer.Mark> marks = marksComputer.marksIterator(
-                                                 chartMask.y, chartMask.y + chartMask.height);
+                                                 viewStart, viewEnd);
 
-        g.setColor(getForeground());
-        g.setFont(getFont());
+        int tZeroOffset = chart.isBottomBased() ? 0 : 1;
+        int bZeroOffset = chart.isBottomBased() ? 1 : 0;
 
         while (marks.hasNext()) {
             AxisMarksComputer.Mark mark = marks.next();
-            int y = ChartContext.getCheckedIntValue(chart.getChartContext().getViewY(mark.getValue()));
+//            System.err.println("">>> Mark value: "" + mark.getValue() + "", mark position: "" + mark.getPosition());
+//            int y = ChartContext.getCheckedIntValue(chart.getChartContext().getViewY(mark.getValue()));
+//            int y = ChartContext.getCheckedIntValue(chart.getChartContext().getViewY(mark.getValue()));
+            int y = SwingUtilities.convertPoint(chart, 0, mark.getPosition(), this).y;
 
-//            if (y < chartMask.y || y >= chartMask.y + chartMask.height) continue;
+            if (y < chartMask.y - tZeroOffset ||
+                y >= chartMask.y + chartMask.height + bZeroOffset) continue;
+
+            int width = 6;
+            Component painter = marksPainter.getPainter(mark);
+            painter.setSize(painter.getPreferredSize());
+            int markWidth = painter.getWidth();
+            int markOffsetY = painter.getHeight() / 2;
+            maxExtent = Math.max(maxExtent, markWidth);
+
+            g.setColor(getForeground());
 
             if (location == SwingConstants.WEST) {
-                g.setPaint(meshPaint);
-                g.setStroke(meshStroke);
-                g.drawLine(chartMask.x, y, chartMask.x + chartMask.width, y);
+                g.drawLine(getWidth() - 2, y, getWidth() - 2 - width, y);
+
+                g.translate(getWidth() - markWidth - 15, y - markOffsetY);
+                painter.paint(g);
+                g.translate(-getWidth() + markWidth + 15, -y + markOffsetY);
             } else {
+                g.drawLine(1, y, 1 + width, y);
 
+      ",Automated merge with http : / / hg . netbeans . org / core - main,"""Refactor AxisComponent to improve painting and mesh rendering""","The commit message should be:

""Improved AxisComponent to support mesh backgrounds and foregrounds, and adjusted axis painting logic for better alignment and appearance.""","The commit message should describe the changes made in the code. Based on the provided diff, the commit message could be:

```
Add mesh options and refactor AxisComponent painting

This commit introduces mesh options (NO_MESH, MESH_BACKGROUND, MESH_FOREGROUND) and refactors the AxisComponent painting methods. It also adjusts the preferred size calculation, improves the mesh drawing, and adds support for BytesMark in the MarkValuePainter.
```","""Optimize AxisComponent rendering, add mesh options, and restore axis marks painting with adjustable extent handling."""
"diff --git a/changelog.txt b/changelog.txt
index 2f095532..b6d3d9d8 100644
--- a/changelog.txt
+++ b/changelog.txt
@@ -2,6 +2,7 @@ Change log next version
 -----------------------
 * Ensure RequestSpecBuilder picks up static config (issue 1012). (thanks to Peter Major for pull request)
 * Support multiple 'Set-Cookie' headers in a response (issue 1016). (thanks to runtarinn for pull request)
+* Fixed OAuth 1 for GET requests (thanks to Corneliu Duplachi for pull request)
 
 Change log 3.1.0 (2018-04-20)
 -----------------------------",Updated changelog to reflect latest changes,"""Fixed OAuth 1 for GET requests""","""Fixed OAuth 1 for GET requests and updated changelog""",* Fixed OAuth 1 for GET requests (thanks to Corneliu Duplachi for pull request),"""Added fixes for static config in RequestSpecBuilder, multiple 'Set-Cookie' headers, and OAuth 1 for GET requests."""
"diff --git a/spring-boot-project/spring-boot-dependencies/pom.xml b/spring-boot-project/spring-boot-dependencies/pom.xml
index ed0d84fdc5..dfccf18f8e 100644
--- a/spring-boot-project/spring-boot-dependencies/pom.xml
+++ b/spring-boot-project/spring-boot-dependencies/pom.xml
@@ -964,6 +964,11 @@
 				<artifactId>micrometer-registry-signalfx</artifactId>
 				<version>${micrometer.version}</version>
 			</dependency>
+			<dependency>
+				<groupId>io.micrometer</groupId>
+				<artifactId>micrometer-registry-stackdriver</artifactId>
+				<version>${micrometer.version}</version>
+			</dependency>
 			<dependency>
 				<groupId>io.micrometer</groupId>
 				<artifactId>micrometer-registry-statsd</artifactId>",Add dependency management for micrometer - registry - stackdriver .,"""Add micrometer-registry-stackdriver dependency to spring-boot-dependencies""","""Add micrometer-registry-stackdriver dependency""","""Added micrometer-registry-stackdriver dependency to pom.xml""",Added micrometer-registry-stackdriver dependency to pom.xml for Stackdriver monitoring support.
"diff --git a/src/com/facebook/buck/cli/AuditClasspathCommand.java b/src/com/facebook/buck/cli/AuditClasspathCommand.java
index a7b9ff2905..e74b933436 100644
--- a/src/com/facebook/buck/cli/AuditClasspathCommand.java
+++ b/src/com/facebook/buck/cli/AuditClasspathCommand.java
@@ -21,7 +21,8 @@ import com.facebook.buck.java.HasClasspathEntries;
 import com.facebook.buck.json.BuildFileParseException;
 import com.facebook.buck.model.BuildTarget;
 import com.facebook.buck.model.BuildTargetException;
-import com.facebook.buck.parser.PartialGraph;
+import com.facebook.buck.parser.ParseContext;
+import com.facebook.buck.parser.TargetGraph;
 import com.facebook.buck.rules.ActionGraph;
 import com.facebook.buck.rules.BuildRule;
 import com.facebook.buck.rules.TargetNode;
@@ -30,7 +31,7 @@ import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
+import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.LinkedHashMultimap;
@@ -57,29 +58,30 @@ public class AuditClasspathCommand extends AbstractCommandRunner<AuditCommandOpt
   @Override
   int runCommandWithOptionsInternal(AuditCommandOptions options)
       throws IOException, InterruptedException {
-    // Create a PartialGraph that is composed of the transitive closure of all of the dependent
+    // Create a TargetGraph that is composed of the transitive closure of all of the dependent
     // BuildRules for the specified BuildTargets.
-    final ImmutableSet<String> fullyQualifiedBuildTargets = ImmutableSet.copyOf(
-        options.getArgumentsFormattedAsBuildTargets());
-
-    if (fullyQualifiedBuildTargets.isEmpty()) {
+    final ImmutableSet<BuildTarget> targets = FluentIterable
+        .from(options.getArgumentsFormattedAsBuildTargets())
+        .transform(new Function<String, BuildTarget>() {
+                     @Override
+                     public BuildTarget apply(String input) {
+                       return getParser().getBuildTargetParser().parse(
+                           input,
+                           ParseContext.fullyQualified());
+                     }
+                   })
+        .toSet();
+
+    if (targets.isEmpty()) {
       console.printBuildFailure(""Please specify at least one build target."");
       return 1;
     }
 
-    PartialGraph partialGraph;
+    TargetGraph targetGraph;
     try {
-      partialGraph = PartialGraph.createPartialGraph(
-          new Predicate<TargetNode<?>>() {
-            @Override
-            public boolean apply(TargetNode<?> input) {
-              return fullyQualifiedBuildTargets.contains(
-                  input.getBuildTarget().getFullyQualifiedName());
-            }
-          },
-          getProjectFilesystem(),
+      targetGraph = getParser().buildTargetGraphForBuildTargets(
+          targets,
           options.getDefaultIncludes(),
-          getParser(),
           getBuckEventBus(),
           console,
           environment,
@@ -90,23 +92,23 @@ public class AuditClasspathCommand extends AbstractCommandRunner<AuditCommandOpt
     }
 
     if (options.shouldGenerateDotOutput()) {
-      return printDotOutput(partialGraph.getTargetGraph().getActionGraph(getBuckEventBus()));
+      return printDotOutput(targetGraph);
     } else if (options.shouldGenerateJsonOutput()) {
-      return printJsonClasspath(partialGraph);
+      return printJsonClasspath(targetGraph, targets);
     } else {
-      return printClasspath(partialGraph);
+      return printClasspath(targetGraph, targets);
     }
   }
 
   @VisibleForTesting
-  int printDotOutput(ActionGraph actionGraph) {
-    Dot<BuildRule> dot = new Dot<BuildRule>(
+  int printDotOutput(TargetGraph actionGraph) {
+    Dot<TargetNode<?>> dot = new Dot<>(
         actionGraph,
         ""action_graph"",
-        new Function<BuildRule, String>() {
+        new Function<TargetNode<?>, String>() {
           @Override
-          public String apply(BuildRule buildRule) {
-            return ""\"""" + buildRule.getFullyQualifiedName() + ""\"""";
+          public String apply(TargetNode<?> targetNode) {
+            return ""\"""" + targetNode.getBuildTarget().getFullyQualifiedName() + ""\"""";
           }
         },
         getStdOut());
@@ -119,9 +121,8 @@ public class AuditClasspathCommand extends AbstractCommandRunner<AuditCommandOpt
   }
 
   @VisibleForTesting
-  int printClasspath(PartialGraph partialGraph) {
-    ImmutableSet<BuildTarget> targets = partialGraph.getTargets();
-    ActionGraph graph = partialGraph.getTargetGraph().getActionGraph(getBuckEventBus());
+  int printClasspath(TargetGraph targetGraph, ImmutableSet<BuildTarget> targets) {
+    ActionGraph graph = targetGraph.getActionGraph(getBuckEventBus());
     SortedSet<Path> classpathEntries = Sets.newTreeSet();
 
     for (BuildTarget target : targets) {
@@ -143,9 +144,9 @@ public class AuditClasspathCommand extends AbstractCommandRunner<AuditCommandOpt
   }
 
   @VisibleForTesting
-  int printJsonClasspath(PartialGraph partialGraph) throws IOException {
-    ActionGraph graph = partialGraph.getTargetGraph().getActionGraph(getBuckEventBus());
-    ImmutableSet<BuildTarget> targets = partialGraph.getTargets();
+  int printJsonClasspath(TargetGraph targetGraph, ImmutableSet<BuildTarget> targets)
+      throws IOException {
+    ActionGraph graph = targetGraph.getActionGraph(getBuckEventBus());
     Multimap<String, String> targetClasspaths = LinkedHashMultimap.create();
 
     for (BuildTarget target : targets) {
@@ -162,9 +163,7 @@ public class AuditClasspathCommand extends AbstractCommandRunner<AuditCommandOpt
     }
 
     // Note: using `asMap` here ensures that the keys are sorted
-    getObjectMapper().writeValue(
-        console.getStdOut(),
-        targetClasspaths.asMap());
+    getObjectMapper().writeValue(console.getStdOut(), targetClasspaths.asMap());
 
     return 0;
   }
diff --git a/test/com/facebook/buck/cli/AuditClasspathCommandTest.java b/test/com/facebook/buck/cli/AuditClasspathCommandTest.java
index fc5cf83387..644a1a3dbe 100644
--- a/test/com/facebook/buck/cli/AuditClasspathCommandTest.java
+++ b/test/com/facebook/buck/cli/AuditClasspathCommandTest.java
@@ -29,8 +29,6 @@ import com.facebook.buck.java.JavaTestBuilder;
 import com.facebook.buck.java.KeystoreBuilder;
 import com.facebook.buck.model.BuildTarget;
 import com.facebook.buck.model.BuildTargetFactory;
-import com.facebook.buck.parser.PartialGraph;
-import com.facebook.buck.parser.PartialGraphFactory;
 import com.facebook.buck.rules.ArtifactCache;
 import com.facebook.buck.rules.FakeRepositoryFactory;
 import com.facebook.buck.rules.NoopArtifactCache;
@@ -93,11 +91,9 @@ public class AuditClasspathCommandTest {
   public void testClassPathOutput()
       throws IOException, InterruptedException {
     // Test that no output is created.
-    PartialGraph partialGraph1 = PartialGraphFactory.newInstance(
-        TargetGraphFactory.newInstance(
-            ImmutableSet.<TargetNode<?>>of()),
+    auditClasspathCommand.printClasspath(
+        TargetGraphFactory.newInstance(ImmutableSet.<TargetNode<?>>of()),
         ImmutableSet.<BuildTarget>of());
-    auditClasspathCommand.printClasspath(partialGraph1);
     assertEquals("""", console.getTextWrittenToStdOut());
     assertEquals("""", console.getTextWrittenToStdErr());
 
@@ -139,7 +135,7 @@ public class AuditClasspathCommandTest {
         .addSrc(Paths.get(""src/com/facebook/test/ProjectTests.java""))
         .build();
 
-    PartialGraph partialGraph2 = PartialGraphFactory.newInstance(
+    auditClasspathCommand.printClasspath(
         TargetGraphFactory.newInstance(
             ImmutableSet.of(
                 javaLibraryNode,
@@ -148,7 +144,6 @@ public class AuditClasspathCommandTest {
                 testAndroidNode,
                 testJavaNode)),
         ImmutableSet.<BuildTarget>of());
-    auditClasspathCommand.printClasspath(partialGraph2);
 
     // Still empty.
     assertEquals("""", console.getTextWrittenToStdOut());
@@ -158,7 +153,7 @@ public class AuditClasspathCommandTest {
     // - paths don't appear multiple times when dependencies are referenced multiple times.
     // - dependencies are walked
     // - independent targets in the same BUCK file are not included in the output
-    PartialGraph partialGraph3 =  PartialGraphFactory.newInstance(
+    auditClasspathCommand.printClasspath(
         TargetGraphFactory.newInstance(
             ImmutableSet.of(
                 javaLibraryNode,
@@ -168,7 +163,6 @@ public class AuditClasspathCommandTest {
                 testJavaNode)),
         ImmutableSet.of(
             testAndroidTarget));
-    auditClasspathCommand.printClasspath(partialGraph3);
 
     SortedSet<String> expectedPaths = Sets.newTreeSet(
         Arrays.asList(
@@ -184,7 +178,7 @@ public class AuditClasspathCommandTest {
     // - all rules have implemented HasClasspathEntries.
     // Note that the output streams are reset.
     setUp();
-    PartialGraph partialGraph4 =  PartialGraphFactory.newInstance(
+    auditClasspathCommand.printClasspath(
         TargetGraphFactory.newInstance(
             ImmutableSet.of(
                 javaLibraryNode,
@@ -197,7 +191,6 @@ public class AuditClasspathCommandTest {
             javaLibraryTarget,
             androidLibraryTarget,
             testJavaTarget));
-    auditClasspathCommand.printClasspath(partialGraph4);
 
     expectedPaths.add(GEN_DIR + ""/lib__project-tests__output/project-tests.jar"");
     expectedClasspath = Joiner.on(""\n"").join(expectedPaths) + ""\n"";
@@ -235,7 +228,7 @@ public class AuditClasspathCommandTest {
         .addDep(javaTarget)
         .build();
 
-    PartialGraph partialGraph =  PartialGraphFactory.newInstance(
+    auditClasspathCommand.printJsonClasspath(
         TargetGraphFactory.newInstance(
             ImmutableSet.of(
                 androidNode,
@@ -243,7 +236,6 @@ public class AuditClasspathCommandTest {
         ImmutableSet.of(
             androidTarget,
             javaTarget));
-    auditClasspathCommand.printJsonClasspath(partialGraph);
 
     assertEquals(EXPECTED_JSON, console.getTextWrittenToStdOut());
     assertEquals("""", console.getTextWrittenToStdErr());",Remove uses of PartialGraph in AuditClasspathCommand . . Summary : .,`Refactor AuditClasspathCommand to use TargetGraph instead of PartialGraph`,"Here's a possible commit message based on the provided diff:

`Refactor AuditClasspathCommand to use TargetGraph instead of PartialGraph`

This commit message is concise and accurately reflects the changes made in the diff. It mentions the specific class (`AuditClasspathCommand`) and the change made (`refactor to use TargetGraph instead of PartialGraph`).","""Update AuditClasspathCommand to use TargetGraph instead of PartialGraph""

This commit appears to be refactoring the `AuditClasspathCommand` class to use `TargetGraph` instead of `PartialGraph`. This includes changes in the class's methods such as `runCommandWithOptionsInternal`, `printDotOutput`, `printClasspath`, and `printJsonClasspath`. The changes involve updating the method signatures, modifying the way targets are retrieved, and adjusting the way graphs are created and used.","""Refactor AuditClasspathCommand: Replace PartialGraph with TargetGraph for enhanced functionality and update corresponding tests."""
"diff --git a/src/soot/jimple/JimpleBody.java b/src/soot/jimple/JimpleBody.java
index 83ff996783..8b6fb9ba20 100644
--- a/src/soot/jimple/JimpleBody.java
+++ b/src/soot/jimple/JimpleBody.java
@@ -36,6 +36,7 @@ import soot.SootMethod;
 import soot.Type;
 import soot.Unit;
 import soot.jimple.validation.IdentityStatementsValidator;
+import soot.jimple.validation.InvokeArgumentValidator;
 import soot.jimple.validation.ReturnStatementsValidator;
 import soot.jimple.validation.TypesValidator;
 import soot.options.Options;
@@ -58,6 +59,7 @@ public class JimpleBody extends StmtBody
 				IdentityStatementsValidator.v(),
 				TypesValidator.v(),
 				ReturnStatementsValidator.v(),
+				InvokeArgumentValidator.v(),
 				//InvokeValidator.v()
 			};
 		}
diff --git a/src/soot/jimple/validation/InvokeArgumentValidator.java b/src/soot/jimple/validation/InvokeArgumentValidator.java
new file mode 100644
index 0000000000..1726544747
--- /dev/null
+++ b/src/soot/jimple/validation/InvokeArgumentValidator.java
@@ -0,0 +1,45 @@
+package soot.jimple.validation;
+
+import java.util.List;
+
+import soot.Body;
+import soot.Unit;
+import soot.jimple.InvokeExpr;
+import soot.jimple.Stmt;
+import soot.validation.BodyValidator;
+import soot.validation.ValidationException;
+
+/**
+ * A basic validator that checks whether the length of the invoke statement's
+ * argument list matches the length of the target methods's parameter type list.
+ * 
+ * @author Steven Arzt
+ */
+public class InvokeArgumentValidator implements BodyValidator {
+
+	private static InvokeArgumentValidator INSTANCE;
+	
+	public static InvokeArgumentValidator v() {
+		if (INSTANCE == null)
+			INSTANCE = new InvokeArgumentValidator();
+		return INSTANCE;
+	}
+	
+	@Override
+	public void validate(Body body, List<ValidationException> exceptions) {
+		for (Unit u : body.getUnits()) {
+			Stmt s = (Stmt) u;
+			if (s.containsInvokeExpr()) {
+				InvokeExpr iinvExpr = s.getInvokeExpr();
+				if (iinvExpr.getArgCount() != iinvExpr.getMethod().getParameterCount())
+					exceptions.add(new ValidationException(s, ""Invalid number of arguments""));
+			}
+		}
+	}
+
+	@Override
+	public boolean isBasicValidator() {
+		return true;
+	}
+
+}
diff --git a/src/soot/jimple/validation/TypesValidator.java b/src/soot/jimple/validation/TypesValidator.java
index 7725e9b0b7..ce7eac852e 100644
--- a/src/soot/jimple/validation/TypesValidator.java
+++ b/src/soot/jimple/validation/TypesValidator.java
@@ -9,6 +9,11 @@ import soot.Type;
 import soot.validation.BodyValidator;
 import soot.validation.ValidationException;
 
+/**
+ * Checks whether the types used for locals, method parameters, and method
+ * return values are allowed in final Jimple code. This reports an error
+ * if a method uses e.g., null_type.
+ */
 public class TypesValidator implements BodyValidator {
 	public static TypesValidator INSTANCE;
 	",added a validator that checks for mismatches in the argument list of method invocations,"""Added InvokeArgumentValidator to check invoke statement argument lengths""",Added InvokeArgumentValidator to check for correct number of arguments in invoke statements.,"""Added InvokeArgumentValidator to JimpleBody and created new file for it""

This commit has made two changes to the codebase:

1. In the `JimpleBody.java` file, a new import statement has been added for `InvokeArgumentValidator`. Also, `InvokeArgumentValidator.v()` has been included in the `VALIDATORS` array.

2. A new file `InvokeArgumentValidator.java` has been created. This class implements the `BodyValidator` interface and checks whether the length of the invoke statement's argument list matches the length of the target method's parameter type list. If not, it adds a `ValidationException` to the list of exceptions.","""Add InvokeArgumentValidator to validate argument counts in invoke statements in JimpleBody."""
"diff --git a/community/cypher/front-end/ast/src/main/scala/org/neo4j/cypher/internal/v4_0/ast/Clause.scala b/community/cypher/front-end/ast/src/main/scala/org/neo4j/cypher/internal/v4_0/ast/Clause.scala
index 12b22f70626..3333fd1c3d2 100644
--- a/community/cypher/front-end/ast/src/main/scala/org/neo4j/cypher/internal/v4_0/ast/Clause.scala
+++ b/community/cypher/front-end/ast/src/main/scala/org/neo4j/cypher/internal/v4_0/ast/Clause.scala
@@ -827,13 +827,14 @@ case class SubQuery(sq: SingleQuery)(val position: InputPosition) extends SubQue
     // - Returned variables are added to outer scope
     val input: Scope = s.currentScope.scope
     val branch: SemanticState = s.newSiblingScope
-    val result: SemanticCheckResult = sq.semanticCheck(branch)
-    val output: Scope = sq.finalScope(result.state.currentScope.scope)
-    val merged: SemanticState =
-      result.state.newSiblingScope
-        .importValuesFromScope(input)
-        .importValuesFromScope(output)
-    result.copy(state = merged)
+    val inner: SemanticCheckResult = sq.semanticCheck(branch)
+    val output: Scope = sq.finalScope(inner.state.currentScope.scope)
+    val imported: SemanticState = inner.state.newSiblingScope.importValuesFromScope(input)
+    val merged: SemanticCheckResult =
+      output.valueSymbolTable.values
+        .foldSemanticCheck(symbol => declareVariable(symbol.definition.asVariable, symbol.types))(imported)
+
+    SemanticCheckResult(merged.state, inner.errors ++ merged.errors)
   }
 
   override def semanticCheckContinuation(previousScope: Scope): SemanticCheck = { s =>
diff --git a/community/cypher/front-end/ast/src/test/scala/org/neo4j/cypher/internal/v4_0/ast/SubQueryTest.scala b/community/cypher/front-end/ast/src/test/scala/org/neo4j/cypher/internal/v4_0/ast/SubQueryTest.scala
index c85cfe1dabc..d7d963c7e6c 100644
--- a/community/cypher/front-end/ast/src/test/scala/org/neo4j/cypher/internal/v4_0/ast/SubQueryTest.scala
+++ b/community/cypher/front-end/ast/src/test/scala/org/neo4j/cypher/internal/v4_0/ast/SubQueryTest.scala
@@ -48,10 +48,8 @@ class SubQueryTest extends CypherFunSuite with AstConstructionHelp {
       return_(v(""y"") -> v(""y""), v(""x"") -> v(""x""))
     )
 
-
     val result = sq.semanticCheck(clean)
 
-    println(result.errors)
     result.errors.size shouldEqual 0
   }
 
@@ -69,4 +67,19 @@ class SubQueryTest extends CypherFunSuite with AstConstructionHelp {
     result.errors.size shouldEqual 1
     result.errors.head.msg should include (""Variable `x` not defined"")
   }
+
+  test(""should fail on variable name collision"") {
+    val sq = singleQuery(
+      with_(i(""1"") -> v(""x"")),
+      subQuery(
+        return_(i(""2"") -> v(""x""))
+      ),
+      return_(i(""1"") -> v(""y""))
+    )
+
+    val result = sq.semanticCheck(clean)
+
+    result.errors.size shouldEqual 1
+    result.errors.head.msg should include (""Variable `x` already declared"")
+  }
 }",Fail subquery if returning a variable that was already bound outside,"""Fix subquery variable scoping and add test for variable name collision""","""Improved subquery semantic checking and added test cases for variable name collisions""","""Fix variable name collision in SubQuery semantic check""

This commit appears to modify the semantic checking process for SubQueries in the Cypher query language. The changes seem to address an issue where variable name collisions were not being properly handled, potentially leading to incorrect results or errors.

The key changes include:

1. The introduction of a new `imported` SemanticState, which imports values from the input scope into the inner SemanticCheckResult's state.
2. The use of `foldSemanticCheck` to merge the imported state with the output scope's values. This step is likely where variable name collisions are now being detected and handled.
3. The return of a new SemanticCheckResult that combines the errors from both the inner and merged checks.

The associated test case, ""should fail on variable name collision"", ensures that the SubQuery semantic check correctly identifies and reports variable name collisions. The test creates a query with a variable 'x' defined in both the outer and inner (sub) queries, and verifies that the semantic check produces an error indicating that 'x' has already been declared.",Improve semantic checking in SubQuery and add test for variable name collision detection
"diff --git a/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/netty/client/response/mysql/MySQLResponseHandler.java b/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/netty/client/response/mysql/MySQLResponseHandler.java
index 554d2391285..c15de6d9c9e 100644
--- a/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/netty/client/response/mysql/MySQLResponseHandler.java
+++ b/sharding-proxy/src/main/java/io/shardingsphere/proxy/backend/netty/client/response/mysql/MySQLResponseHandler.java
@@ -27,7 +27,6 @@ import io.shardingsphere.proxy.backend.netty.future.FutureRegistry;
 import io.shardingsphere.proxy.config.RuleRegistry;
 import io.shardingsphere.proxy.runtime.ChannelRegistry;
 import io.shardingsphere.proxy.transport.mysql.constant.CapabilityFlag;
-import io.shardingsphere.proxy.transport.mysql.constant.PacketHeader;
 import io.shardingsphere.proxy.transport.mysql.constant.ServerInfo;
 import io.shardingsphere.proxy.transport.mysql.packet.MySQLPacketPayload;
 import io.shardingsphere.proxy.transport.mysql.packet.command.query.ColumnDefinition41Packet;
@@ -66,15 +65,12 @@ public final class MySQLResponseHandler extends ResponseHandler {
     @Override
     public void channelRead(final ChannelHandlerContext context, final Object message) {
         MySQLPacketPayload payload = new MySQLPacketPayload((ByteBuf) message);
-        payload.getByteBuf().markReaderIndex();
-        payload.readInt1();
-        int header = payload.readInt1();
-        payload.getByteBuf().resetReaderIndex();
+        int header = getHeader(payload);
         if (AuthType.UN_AUTH == authType) {
             auth(context, payload);
             authType = AuthType.AUTHING;
         } else if (AuthType.AUTHING == authType) {
-            if (PacketHeader.OK.getValue() == header) {
+            if (OKPacket.HEADER == header) {
                 okPacket(context, payload);
                 authType = AuthType.AUTH_SUCCESS;
             } else {
@@ -84,11 +80,11 @@ public final class MySQLResponseHandler extends ResponseHandler {
         } else if (AuthType.AUTH_FAILED == authType) {
             log.error(""mysql auth failed, cannot handle channel read message"");
         } else {
-            if (PacketHeader.EOF.getValue() == header) {
+            if (EofPacket.HEADER == header) {
                 eofPacket(context, payload);
-            } else if (PacketHeader.OK.getValue() == header) {
+            } else if (OKPacket.HEADER == header) {
                 okPacket(context, payload);
-            } else if (PacketHeader.ERR.getValue() == header) {
+            } else if (ErrPacket.HEADER == header) {
                 errPacket(context, payload);
             } else {
                 commonPacket(context, payload);
@@ -96,6 +92,14 @@ public final class MySQLResponseHandler extends ResponseHandler {
         }
     }
     
+    private int getHeader(final MySQLPacketPayload payload) {
+        payload.getByteBuf().markReaderIndex();
+        payload.readInt1();
+        int result = payload.readInt1();
+        payload.getByteBuf().resetReaderIndex();
+        return result;
+    }
+    
     @Override
     protected void auth(final ChannelHandlerContext context, final MySQLPacketPayload payload) {
         try {
@@ -169,12 +173,6 @@ public final class MySQLResponseHandler extends ResponseHandler {
         }
     }
     
-    @Override
-    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {
-        //TODO delete connection map.
-        super.channelInactive(ctx);
-    }
-    
     private byte[] securePasswordAuthentication(final byte[] password, final byte[] authPluginData) {
         try {
             MessageDigest messageDigest = MessageDigest.getInstance(""SHA-1"");
@@ -200,4 +198,10 @@ public final class MySQLResponseHandler extends ResponseHandler {
             FutureRegistry.getInstance().get(connectionId).setResponse(resultMap.get(connectionId));
         }
     }
+    
+    @Override
+    public void channelInactive(final ChannelHandlerContext ctx) throws Exception {
+        //TODO delete connection map.
+        super.channelInactive(ctx);
+    }
 }
diff --git a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/constant/PacketHeader.java b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/constant/PacketHeader.java
deleted file mode 100644
index e59b7f11e12..00000000000
--- a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/constant/PacketHeader.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright 2016-2018 shardingsphere.io.
- * <p>
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * </p>
- */
-
-package io.shardingsphere.proxy.transport.mysql.constant;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-
-/**
- * Generic Packet Header.
- *
- * @author linjiaqi
- */
-@RequiredArgsConstructor
-@Getter
-public enum PacketHeader {
-    
-    OK(0x00),
-    
-    EOF(0xfe),
-    
-    ERR(0xff);
-    
-    private final int value;
-}
diff --git a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/EofPacket.java b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/EofPacket.java
index 64607842147..e69f201fd8f 100644
--- a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/EofPacket.java
+++ b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/EofPacket.java
@@ -36,7 +36,10 @@ import lombok.RequiredArgsConstructor;
 @Getter
 public final class EofPacket implements MySQLPacket {
     
-    private static final int HEADER = 0xfe;
+    /**
+     * Header of EOF packet.
+     */
+    public static final int HEADER = 0xfe;
     
     private final int sequenceId;
     
diff --git a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/ErrPacket.java b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/ErrPacket.java
index dfb181c03d0..87c0f7031b2 100644
--- a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/ErrPacket.java
+++ b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/ErrPacket.java
@@ -38,7 +38,10 @@ import java.sql.SQLException;
 @Getter
 public final class ErrPacket implements MySQLPacket {
     
-    private static final int HEADER = 0xff;
+    /**
+     * Header of ERR packet.
+     */
+    public static final int HEADER = 0xff;
     
     private static final String SQL_STATE_MARKER = ""#"";
     
diff --git a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/OKPacket.java b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/OKPacket.java
index 0d595d3c081..70d0c8c5873 100644
--- a/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/OKPacket.java
+++ b/sharding-proxy/src/main/java/io/shardingsphere/proxy/transport/mysql/packet/generic/OKPacket.java
@@ -36,7 +36,10 @@ import lombok.RequiredArgsConstructor;
 @Getter
 public final class OKPacket implements MySQLPacket {
     
-    private static final int HEADER = 0x00;
+    /**
+     * Header of OK packet.
+     */
+    public static final int HEADER = 0x00;
     
     private static final int STATUS_FLAG = StatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue();
     ",remove PacketHeader,"""Refactor MySQLResponseHandler to remove PacketHeader enum and use packet-specific headers instead""",Refactor MySQLResponseHandler to remove dependency on PacketHeader enum and extract header reading logic into a separate method.,"The commit message should be:

Refactor MySQLResponseHandler and remove PacketHeader

Details:
- Move the getHeader method from MySQLResponseHandler to MySQLPacketPayload.
- Remove the PacketHeader enum and replace its usage with static constants in the respective packet classes (EofPacket, ErrPacket, OKPacket).
- Add channelInactive method to MySQLResponseHandler.

This refactor aims to simplify the code structure and improve readability by moving the getHeader method to MySQLPacketPayload and removing the unnecessary PacketHeader enum. Additionally, the channelInactive method is added to MySQLResponseHandler to handle the channel inactivity.",Refactored MySQL packet handling by removing `PacketHeader` and moving constants to specific packet classes.
"diff --git a/src/main/java/com/google/devtools/build/lib/syntax/Parser.java b/src/main/java/com/google/devtools/build/lib/syntax/Parser.java
index 03c50d3a3b..56e6233905 100644
--- a/src/main/java/com/google/devtools/build/lib/syntax/Parser.java
+++ b/src/main/java/com/google/devtools/build/lib/syntax/Parser.java
@@ -14,8 +14,6 @@
 
 package com.google.devtools.build.lib.syntax;
 
-import static com.google.devtools.build.lib.syntax.Parser.Dialect.SKYLARK;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Supplier;
 import com.google.common.collect.ImmutableList;
@@ -108,15 +106,6 @@ public class Parser {
           TokenKind.RPAREN,
           TokenKind.SEMI);
 
-  private static final EnumSet<TokenKind> BLOCK_STARTING_SET =
-      EnumSet.of(
-          TokenKind.CLASS,
-          TokenKind.DEF,
-          TokenKind.ELSE,
-          TokenKind.FOR,
-          TokenKind.IF,
-          TokenKind.TRY);
-
   private static final EnumSet<TokenKind> EXPR_TERMINATOR_SET =
       EnumSet.of(
           TokenKind.COLON,
@@ -130,14 +119,6 @@ public class Parser {
           TokenKind.RPAREN,
           TokenKind.SLASH);
 
-  /**
-   * Keywords that are forbidden in both Skylark and BUILD parsing modes.
-   *
-   * <p>(Mapping: token -> human-readable string description)
-   */
-  private static final ImmutableMap<TokenKind, String> ILLEGAL_BLOCK_KEYWORDS =
-      ImmutableMap.of(TokenKind.CLASS, ""Class definition"", TokenKind.TRY, ""Try statement"");
-
   private Token token; // current lookahead token
   private Token pushedToken = null; // used to implement LL(2)
   private int loopCount; // break/continue keywords can be used only inside a loop
@@ -147,7 +128,6 @@ public class Parser {
   private final Lexer lexer;
   private final EventHandler eventHandler;
   private final List<Comment> comments;
-  private final Dialect dialect;
 
   private static final Map<TokenKind, Operator> binaryOperators =
       new ImmutableMap.Builder<TokenKind, Operator>()
@@ -198,10 +178,9 @@ public class Parser {
   private int errorsCount;
   private boolean recoveryMode;  // stop reporting errors until next statement
 
-  private Parser(Lexer lexer, EventHandler eventHandler, Dialect dialect) {
+  private Parser(Lexer lexer, EventHandler eventHandler) {
     this.lexer = lexer;
     this.eventHandler = eventHandler;
-    this.dialect = dialect;
     this.tokens = lexer.getTokens().iterator();
     this.comments = new ArrayList<>();
     nextToken();
@@ -229,13 +208,15 @@ public class Parser {
   public static ParseResult parseFile(
       ParserInputSource input, EventHandler eventHandler, Dialect dialect) {
     Lexer lexer = new Lexer(input, eventHandler);
-    Parser parser = new Parser(lexer, eventHandler, dialect);
+    Parser parser = new Parser(lexer, eventHandler);
     List<Statement> statements = parser.parseFileInput();
+    boolean errors = parser.errorsCount > 0 || lexer.containsErrors();
+    // TODO(laurentlb): Remove dialect argument.
+    if (dialect == Dialect.BUILD) {
+      errors |= !ValidationEnvironment.checkBuildSyntax(statements, eventHandler);
+    }
     return new ParseResult(
-        statements,
-        parser.comments,
-        locationFromStatements(lexer, statements),
-        parser.errorsCount > 0 || lexer.containsErrors());
+        statements, parser.comments, locationFromStatements(lexer, statements), errors);
   }
 
   /**
@@ -245,10 +226,9 @@ public class Parser {
    * function definitions, for statements, etc., are allowed.
    */
   public static List<Statement> parseStatements(
-      ParserInputSource input, EventHandler eventHandler,
-      ParsingLevel parsingLevel, Dialect dialect) {
+      ParserInputSource input, EventHandler eventHandler, ParsingLevel parsingLevel) {
     Lexer lexer = new Lexer(input, eventHandler);
-    Parser parser = new Parser(lexer, eventHandler, dialect);
+    Parser parser = new Parser(lexer, eventHandler);
     List<Statement> result = new ArrayList<>();
     parser.parseStatement(result, parsingLevel);
     while (parser.token.kind == TokenKind.NEWLINE) {
@@ -264,18 +244,15 @@ public class Parser {
    * @throws IllegalArgumentException if the number of parsed statements was not exactly one
    */
   public static Statement parseStatement(
-      ParserInputSource input, EventHandler eventHandler,
-      ParsingLevel parsingLevel, Dialect dialect) {
-    List<Statement> stmts = parseStatements(
-        input, eventHandler, parsingLevel, dialect);
+      ParserInputSource input, EventHandler eventHandler, ParsingLevel parsingLevel) {
+    List<Statement> stmts = parseStatements(input, eventHandler, parsingLevel);
     return Iterables.getOnlyElement(stmts);
   }
 
   /** Parses an expression, possibly followed by newline tokens. */
-  public static Expression parseExpression(
-      ParserInputSource input, EventHandler eventHandler, Dialect dialect) {
+  public static Expression parseExpression(ParserInputSource input, EventHandler eventHandler) {
     Lexer lexer = new Lexer(input, eventHandler);
-    Parser parser = new Parser(lexer, eventHandler, dialect);
+    Parser parser = new Parser(lexer, eventHandler);
     Expression result = parser.parseExpression();
     while (parser.token.kind == TokenKind.NEWLINE) {
       parser.nextToken();
@@ -364,10 +341,24 @@ public class Parser {
 
   // Keywords that exist in Python and that we don't parse.
   private static final EnumSet<TokenKind> FORBIDDEN_KEYWORDS =
-      EnumSet.of(TokenKind.AS, TokenKind.ASSERT,
-          TokenKind.DEL, TokenKind.EXCEPT, TokenKind.FINALLY, TokenKind.FROM, TokenKind.GLOBAL,
-          TokenKind.IMPORT, TokenKind.IS, TokenKind.LAMBDA, TokenKind.NONLOCAL, TokenKind.RAISE,
-          TokenKind.TRY, TokenKind.WITH, TokenKind.WHILE, TokenKind.YIELD);
+      EnumSet.of(
+          TokenKind.AS,
+          TokenKind.ASSERT,
+          TokenKind.CLASS,
+          TokenKind.DEL,
+          TokenKind.EXCEPT,
+          TokenKind.FINALLY,
+          TokenKind.FROM,
+          TokenKind.GLOBAL,
+          TokenKind.IMPORT,
+          TokenKind.IS,
+          TokenKind.LAMBDA,
+          TokenKind.NONLOCAL,
+          TokenKind.RAISE,
+          TokenKind.TRY,
+          TokenKind.WITH,
+          TokenKind.WHILE,
+          TokenKind.YIELD);
 
   private void checkForbiddenKeywords(Token token) {
     if (!FORBIDDEN_KEYWORDS.contains(token.kind)) {
@@ -450,22 +441,12 @@ public class Parser {
     final int start = token.left;
     // parse **expr
     if (token.kind == TokenKind.STAR_STAR) {
-      if (dialect != SKYLARK) {
-        reportError(
-            lexer.createLocation(token.left, token.right),
-            ""**kwargs arguments are not allowed in BUILD files"");
-      }
       nextToken();
       Expression expr = parseNonTupleExpression();
       return setLocation(new Argument.StarStar(expr), start, expr);
     }
     // parse *expr
     if (token.kind == TokenKind.STAR) {
-      if (dialect != SKYLARK) {
-        reportError(
-            lexer.createLocation(token.left, token.right),
-            ""*args arguments are not allowed in BUILD files"");
-      }
       nextToken();
       Expression expr = parseNonTupleExpression();
       return setLocation(new Argument.Star(expr), start, expr);
@@ -1364,61 +1345,24 @@ public class Parser {
     return list;
   }
 
-  // skipSuite does not check that the code is syntactically correct, it
-  // just skips based on indentation levels.
-  private void skipSuite() {
-    if (token.kind == TokenKind.NEWLINE) {
-      expect(TokenKind.NEWLINE);
-      if (token.kind != TokenKind.INDENT) {
-        reportError(lexer.createLocation(token.left, token.right),
-                    ""expected an indented block"");
-        return;
-      }
-      expect(TokenKind.INDENT);
-
-      // Don't try to parse all the Python syntax, just skip the block
-      // until the corresponding outdent token.
-      int depth = 1;
-      while (depth > 0) {
-        // Because of the way the lexer works, this should never happen
-        Preconditions.checkState(token.kind != TokenKind.EOF);
-
-        if (token.kind == TokenKind.INDENT) {
-          depth++;
-        }
-        if (token.kind == TokenKind.OUTDENT) {
-          depth--;
-        }
-        nextToken();
-      }
-
-    } else {
-      // the block ends at the newline token
-      // e.g.  if x == 3: print ""three""
-      syncTo(STATEMENT_TERMINATOR_SET);
-    }
-  }
-
   // stmt ::= simple_stmt
   //        | compound_stmt
   private void parseStatement(List<Statement> list, ParsingLevel parsingLevel) {
-    if (token.kind == TokenKind.DEF && dialect == SKYLARK) {
+    if (token.kind == TokenKind.DEF) {
       if (parsingLevel == ParsingLevel.LOCAL_LEVEL) {
         reportError(lexer.createLocation(token.left, token.right),
             ""nested functions are not allowed. Move the function to top-level"");
       }
       parseFunctionDefStatement(list);
-    } else if (token.kind == TokenKind.IF && dialect == SKYLARK) {
+    } else if (token.kind == TokenKind.IF) {
       list.add(parseIfStatement());
-    } else if (token.kind == TokenKind.FOR && dialect == SKYLARK) {
+    } else if (token.kind == TokenKind.FOR) {
       if (parsingLevel == ParsingLevel.TOP_LEVEL) {
         reportError(
             lexer.createLocation(token.left, token.right),
             ""for loops are not allowed on top-level. Put it into a function"");
       }
       parseForStatement(list);
-    } else if (BLOCK_STARTING_SET.contains(token.kind)) {
-      skipBlock();
     } else {
       parseSimpleStatement(list);
     }
@@ -1456,28 +1400,6 @@ public class Parser {
     return setLocation(new ReturnStatement(expression), start, expression);
   }
 
-  // block ::= ('if' | 'for' | 'class' | 'try' | 'def') expr ':' suite
-  private void skipBlock() {
-    int start = token.left;
-    Token blockToken = token;
-    syncTo(EnumSet.of(TokenKind.COLON, TokenKind.EOF)); // skip over expression or name
-    if (blockToken.kind == TokenKind.ELSE) {
-      reportError(
-          lexer.createLocation(blockToken.left, blockToken.right),
-          ""syntax error at 'else': not allowed here."");
-    } else {
-      String msg =
-          ILLEGAL_BLOCK_KEYWORDS.containsKey(blockToken.kind)
-              ? String.format(""%ss are not supported."", ILLEGAL_BLOCK_KEYWORDS.get(blockToken.kind))
-              : ""This is not supported in BUILD files. Move the block to a .bzl file and load it"";
-      reportError(
-          lexer.createLocation(start, token.right),
-          String.format(""syntax error at '%s': %s"", blockToken, msg));
-    }
-    expect(TokenKind.COLON);
-    skipSuite();
-  }
-
   // create a comment node
   private void makeComment(Token token) {
     comments.add(setLocation(new Comment((String) token.value), token.left, token.right));
diff --git a/src/main/java/com/google/devtools/build/lib/syntax/ValidationEnvironment.java b/src/main/java/com/google/devtools/build/lib/syntax/ValidationEnvironment.java
index 6f5eb9c401..da63ca2e19 100644
--- a/src/main/java/com/google/devtools/build/lib/syntax/ValidationEnvironment.java
+++ b/src/main/java/com/google/devtools/build/lib/syntax/ValidationEnvironment.java
@@ -289,4 +289,48 @@ public final class ValidationEnvironment extends SyntaxTreeVisitor {
   private void closeBlock() {
     block = Preconditions.checkNotNull(block.parent);
   }
+
+  /**
+   * Checks that the AST is using the restricted syntax.
+   *
+   * <p>Restricted syntax is used by Bazel BUILD files. It forbids function definitions, *args, and
+   * **kwargs. This creates a better separation between code and data.
+   */
+  public static boolean checkBuildSyntax(
+      List<Statement> statements, final EventHandler eventHandler) {
+    // Wrap the boolean inside an array so that the inner class can modify it.
+    final boolean[] success = new boolean[] {true};
+    // TODO(laurentlb): Merge with the visitor above when possible (i.e. when BUILD files use it).
+    SyntaxTreeVisitor checker =
+        new SyntaxTreeVisitor() {
+          @Override
+          public void visit(FuncallExpression node) {
+            for (Argument.Passed arg : node.getArguments()) {
+              if (arg.isStarStar()) {
+                eventHandler.handle(
+                    Event.error(
+                        node.getLocation(), ""**kwargs arguments are not allowed in BUILD files""));
+                success[0] = false;
+              } else if (arg.isStar()) {
+                eventHandler.handle(
+                    Event.error(
+                        node.getLocation(), ""*args arguments are not allowed in BUILD files""));
+                success[0] = false;
+              }
+            }
+          }
+
+          @Override
+          public void visit(FunctionDefStatement node) {
+            eventHandler.handle(
+                Event.error(
+                    node.getLocation(),
+                    ""syntax error at 'def': This is not supported in BUILD files. ""
+                        + ""Move the block to a .bzl file and load it""));
+            success[0] = false;
+          }
+        };
+    checker.visitAll(statements);
+    return success[0];
+  }
 }
diff --git a/src/test/java/com/google/devtools/build/lib/skylark/SkylarkIntegrationTest.java b/src/test/java/com/google/devtools/build/lib/skylark/SkylarkIntegrationTest.java
index 35b1e3797b..516a20eb8e 100644
--- a/src/test/java/com/google/devtools/build/lib/skylark/SkylarkIntegrationTest.java
+++ b/src/test/java/com/google/devtools/build/lib/skylark/SkylarkIntegrationTest.java
@@ -1314,16 +1314,17 @@ public class SkylarkIntegrationTest extends BuildViewTestCase {
         ""test/skylark/macro.bzl"",
         ""x = 5"");
 
-    scratch.file(""test/skylark/BUILD"",
+    scratch.file(
+        ""test/skylark/BUILD"",
         ""load('//test/skylark:macro.bzl', 'x')"",
-        ""if 0: pass"", // syntax error
+        ""pass"", // syntax error
         ""print(1 / (5 - x)""); // division by 0
 
     // Make sure that evaluation continues and load() succeeds, despite a syntax
     // error in the file.
     // We can get the division by 0 only if x was correctly loaded.
     getConfiguredTarget(""//test/skylark:a"");
-    assertContainsEvent(""syntax error at 'if'"");
+    assertContainsEvent(""syntax error"");
     assertContainsEvent(""integer division by zero"");
   }
 
diff --git a/src/test/java/com/google/devtools/build/lib/syntax/ParserTest.java b/src/test/java/com/google/devtools/build/lib/syntax/ParserTest.java
index 784b0a7926..94cdb30105 100644
--- a/src/test/java/com/google/devtools/build/lib/syntax/ParserTest.java
+++ b/src/test/java/com/google/devtools/build/lib/syntax/ParserTest.java
@@ -913,22 +913,6 @@ public class ParserTest extends EvaluationTestCase {
     assertContainsError(""syntax error at ';'"");
   }
 
-  @Test
-  public void testFunctionDefinitionErrorRecovery() throws Exception {
-    // Parser skips over entire function definitions, and reports a meaningful
-    // error.
-    setFailFast(false);
-    List<Statement> stmts = parseFile(
-        ""x = 1;\n""
-        + ""def foo(x, y, **z):\n""
-        + ""  # a comment\n""
-        + ""  x = 2\n""
-        + ""  foo(bar)\n""
-        + ""  return z\n""
-        + ""x = 3"");
-    assertThat(stmts).hasSize(2);
-  }
-
   @Test
   public void testDefSingleLine() throws Exception {
     List<Statement> statements = parseFileForSkylark(
@@ -954,19 +938,6 @@ public class ParserTest extends EvaluationTestCase {
     assertThat(stmt.getStatements()).isEmpty();
   }
 
-  @Test
-  public void testSkipIfBlockFail() throws Exception {
-    // Do not parse 'if' blocks, when parsePython is not set
-    setFailFast(false);
-    List<Statement> stmts = parseFile(
-        ""x = 1;"",
-        ""if x == 1:"",
-        ""  x = 2"",
-        ""x = 3;\n"");
-    assertThat(stmts).hasSize(2);
-    assertContainsError(""This is not supported in BUILD files"");
-  }
-
   @Test
   public void testForLoopMultipleVariables() throws Exception {
     List<Statement> stmts1 = parseFile(""[ i for i, j, k in [(1, 2, 3)] ]\n"");
@@ -1402,7 +1373,7 @@ public class ParserTest extends EvaluationTestCase {
         ""def func(a):"",
         // no if
         ""  else: return a"");
-    assertContainsError(""syntax error at 'else': not allowed here."");
+    assertContainsError(""syntax error at 'else': expected expression"");
   }
 
   @Test
@@ -1413,42 +1384,36 @@ public class ParserTest extends EvaluationTestCase {
         ""  for i in range(a):"",
         ""    print(i)"",
         ""  else: return a"");
-    assertContainsError(""syntax error at 'else': not allowed here."");
+    assertContainsError(""syntax error at 'else': expected expression"");
   }
 
   @Test
   public void testTryStatementInBuild() throws Exception {
     setFailFast(false);
     parseFile(""try: pass"");
-    assertContainsError(""syntax error at 'try': Try statements are not supported."");
-  }
-
-  @Test
-  public void testTryStatementInSkylark() throws Exception {
-    setFailFast(false);
-    parseFileForSkylark(""try: pass"");
-    assertContainsError(""syntax error at 'try': Try statements are not supported."");
+    assertContainsError(""'try' not supported, all exceptions are fatal"");
   }
 
   @Test
   public void testClassDefinitionInBuild() throws Exception {
     setFailFast(false);
-    parseFile(""class test(object): pass"");
-    assertContainsError(""syntax error at 'class': Class definitions are not supported."");
+    parseFileWithComments(""class test(object): pass"");
+    assertContainsError(""keyword 'class' not supported"");
   }
 
   @Test
   public void testClassDefinitionInSkylark() throws Exception {
     setFailFast(false);
     parseFileForSkylark(""class test(object): pass"");
-    assertContainsError(""syntax error at 'class': Class definitions are not supported."");
+    assertContainsError(""keyword 'class' not supported"");
   }
 
   @Test
   public void testDefInBuild() throws Exception {
     setFailFast(false);
-    parseFile(""def func(): pass"");
+    BuildFileAST result = parseFileWithComments(""def func(): pass"");
     assertContainsError(""syntax error at 'def': This is not supported in BUILD files. ""
         + ""Move the block to a .bzl file and load it"");
+    assertThat(result.containsErrors()).isTrue();
   }
 }
diff --git a/src/test/java/com/google/devtools/build/lib/syntax/util/EvaluationTestCase.java b/src/test/java/com/google/devtools/build/lib/syntax/util/EvaluationTestCase.java
index ceeffe74eb..4d52f6f51c 100644
--- a/src/test/java/com/google/devtools/build/lib/syntax/util/EvaluationTestCase.java
+++ b/src/test/java/com/google/devtools/build/lib/syntax/util/EvaluationTestCase.java
@@ -159,30 +159,24 @@ public class EvaluationTestCase {
 
   /** Parses a statement, possibly followed by newlines. */
   protected Statement parseStatement(Parser.ParsingLevel parsingLevel, String... input) {
-    return Parser.parseStatement(
-        makeParserInputSource(input), getEventHandler(),
-        parsingLevel, Parser.Dialect.SKYLARK);
+    return Parser.parseStatement(makeParserInputSource(input), getEventHandler(), parsingLevel);
   }
 
   /** Parses a top-level statement, possibly followed by newlines. */
   protected Statement parseTopLevelStatement(String... input) {
     return Parser.parseStatement(
-        makeParserInputSource(input), getEventHandler(),
-        Parser.ParsingLevel.TOP_LEVEL, Parser.Dialect.SKYLARK);
+        makeParserInputSource(input), getEventHandler(), Parser.ParsingLevel.TOP_LEVEL);
   }
 
   /** Parses a local statement, possibly followed by newlines. */
   protected Statement parseLocalLevelStatement(String... input) {
     return Parser.parseStatement(
-        makeParserInputSource(input), getEventHandler(),
-        Parser.ParsingLevel.LOCAL_LEVEL, Parser.Dialect.SKYLARK);
+        makeParserInputSource(input), getEventHandler(), Parser.ParsingLevel.LOCAL_LEVEL);
   }
 
   /** Parses an expression, possibly followed by newlines. */
   protected Expression parseExpression(String... input) {
-    return Parser.parseExpression(
-        makeParserInputSource(input), getEventHandler(),
-        Parser.Dialect.SKYLARK);
+    return Parser.parseExpression(makeParserInputSource(input), getEventHandler());
   }
 
   public EvaluationTestCase update(String varname, Object value) throws Exception {",Remove dialect distinction from the parser . . RELNOTES : None . . PiperOrigin - RevId : 166058718,Remove Skylark dialect from Parser and add BUILD syntax validation.,"""Remove Skylark parsing mode and restrict BUILD syntax to only allow top-level statements and function definitions.""","""Update Parser.java to remove dialect argument and refactor code""

This commit removes the `dialect` argument from the `Parser` class constructor and related methods. It also refactors some code related to forbidden keywords, block starting sets, and illegal block keywords. Additionally, it updates the `ValidationEnvironment` class to check the build syntax for statements and expressions, and adds a new method `checkBuildSyntax` to it. Finally, it updates some tests in `ParserTest.java` and `SkylarkIntegrationTest.java` to reflect these changes.","""Remove Skylark dialect argument and illegal block handling in Parser, add restricted syntax validation in ValidationEnvironment."""
"diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregator.java
index 02083177099..27b21a1ebd8 100644
--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregator.java
+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MaxAggregator.java
@@ -22,9 +22,9 @@ import org.apache.lucene.index.LeafReader;
 import org.apache.lucene.index.LeafReaderContext;
 import org.apache.lucene.index.PointValues;
 import org.apache.lucene.search.CollectionTerminatedException;
+import org.apache.lucene.search.ScoreMode;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.FutureArrays;
-import org.apache.lucene.search.ScoreMode;
 import org.elasticsearch.common.lease.Releasables;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.common.util.DoubleArray;
@@ -174,7 +174,7 @@ class MaxAggregator extends NumericMetricsAggregator.SingleValue {
         }
         int numBytes = pointValues.getBytesPerDimension();
         final byte[] maxValue = pointValues.getMaxPackedValue();
-        final Number[] result = new Number[1];
+        final byte[][] result = new byte[1][];
         pointValues.intersect(new PointValues.IntersectVisitor() {
             @Override
             public void visit(int docID) {
@@ -186,7 +186,10 @@ class MaxAggregator extends NumericMetricsAggregator.SingleValue {
                 if (liveDocs.get(docID)) {
                     // we need to collect all values in this leaf (the sort is ascending) where
                     // the last live doc is guaranteed to contain the max value for the segment.
-                    result[0] = converter.apply(packedValue);
+                    if (result[0] == null) {
+                        result[0] = new byte[packedValue.length];
+                    }
+                    System.arraycopy(packedValue, 0, result[0], 0, packedValue.length);
                 }
             }
 
@@ -200,6 +203,6 @@ class MaxAggregator extends NumericMetricsAggregator.SingleValue {
                 }
             }
         });
-        return result[0];
+        return result[0] != null ? converter.apply(result[0]) : null;
     }
 }
diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MinAggregator.java b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MinAggregator.java
index df24ee7387f..0a40347a3cf 100644
--- a/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MinAggregator.java
+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/MinAggregator.java
@@ -52,6 +52,7 @@ import java.util.Map;
 import java.util.function.Function;
 
 class MinAggregator extends NumericMetricsAggregator.SingleValue {
+    private static final int MAX_BKD_LOOKUPS = 1024;
 
     final ValuesSource.Numeric valuesSource;
     final DocValueFormat format;
@@ -212,6 +213,8 @@ class MinAggregator extends NumericMetricsAggregator.SingleValue {
         final Number[] result = new Number[1];
         try {
             pointValues.intersect(new PointValues.IntersectVisitor() {
+                private short lookupCounter = 0;
+
                 @Override
                 public void visit(int docID) {
                     throw new UnsupportedOperationException();
@@ -224,6 +227,9 @@ class MinAggregator extends NumericMetricsAggregator.SingleValue {
                         // this is the first leaf with a live doc so the value is the minimum",Optimize Min and Max BKD optimizations ( <issue_id> ) .,"""Fix MaxAggregator and MinAggregator to correctly handle packed values and limit BKD lookups""","""Improve Lucene point values handling in Max and Min aggregators""

This commit message is concise and accurately describes the changes made in the commit. It mentions the specific components (Max and Min aggregators) and the improvement made (handling of Lucene point values).","It appears there are changes in two Java files, `MaxAggregator.java` and `MinAggregator.java`, in the Elasticsearch server source code.

In `MaxAggregator.java`, the `ScoreMode` import statement was moved, and the way the maximum value is stored and returned was changed. Instead of directly storing the converted value in the `result` array, the packed byte array is stored and only converted when returning the result.

In `MinAggregator.java`, a new constant `MAX_BKD_LOOKUPS` was added, and a `lookupCounter` variable was introduced in the `PointValues.IntersectVisitor` anonymous class. However, the `lookupCounter` variable is not used in the provided code.

Without more context or additional changes, it is not possible to provide a meaningful commit message for these changes. A commit message should describe what changes were made and why they were necessary. If you provide more information about the purpose of these changes, I can help you write a more accurate commit message.",Handle null values in `MaxAggregator` and limit BKD lookups in `MinAggregator` to optimize performance and memory usage.
"diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifBorders.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifBorders.java
index 2b1b9b89f7a..c61b1258894 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifBorders.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifBorders.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,11 +25,6 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.swing.SwingUtilities2;
-import javax.swing.*;
-import javax.swing.border.*;
-import javax.swing.plaf.*;
-
 import java.awt.Color;
 import java.awt.Component;
 import java.awt.Dimension;
@@ -40,15 +35,21 @@
 import java.awt.Point;
 import java.awt.Rectangle;
 
+import javax.swing.AbstractButton;
+import javax.swing.ButtonModel;
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import javax.swing.JInternalFrame;
+import javax.swing.JMenuBar;
+import javax.swing.JPopupMenu;
+import javax.swing.UIManager;
+import javax.swing.border.AbstractBorder;
+import javax.swing.plaf.UIResource;
+
+import sun.swing.SwingUtilities2;
+
 /**
  * Factory object that can vend Icons appropriate for the basic {@literal L & F}.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Amy Fowler
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifButtonUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifButtonUI.java
index eb2520cd2b1..08017a0b2c8 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifButtonUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifButtonUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,24 +25,27 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.awt.AppContext;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Insets;
+import java.awt.Rectangle;
+import java.awt.Shape;
+
+import javax.swing.AbstractButton;
+import javax.swing.JComponent;
+import javax.swing.LookAndFeel;
+import javax.swing.SwingUtilities;
+import javax.swing.UIManager;
+import javax.swing.border.AbstractBorder;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicButtonListener;
+import javax.swing.plaf.basic.BasicButtonUI;
 
-import javax.swing.*;
-import javax.swing.border.*;
-import javax.swing.plaf.basic.*;
-import java.awt.*;
-import java.awt.event.*;
-import javax.swing.plaf.*;
+import sun.awt.AppContext;
 
 /**
  * MotifButton implementation
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Rich Schiavi
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifCheckBoxUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifCheckBoxUI.java
index 11dc92d3a8d..fa06aa6bd02 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifCheckBoxUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifCheckBoxUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,23 +25,15 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.awt.AppContext;
-
-import javax.swing.*;
+import javax.swing.AbstractButton;
+import javax.swing.JComponent;
+import javax.swing.UIManager;
+import javax.swing.plaf.ComponentUI;
 
-import javax.swing.plaf.*;
-
-import java.awt.*;
+import sun.awt.AppContext;
 
 /**
  * MotifCheckBox implementation
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Rich Schiavi
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifComboBoxUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifComboBoxUI.java
index fcd12ac20d4..254b63181b3 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifComboBoxUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifComboBoxUI.java
@@ -52,14 +52,7 @@
 import javax.swing.plaf.basic.ComboPopup;
 
 /**
- * ComboBox motif look and feel
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
+ * ComboBox motif look and feel.
  *
  * @author Arnaud Weber
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifDesktopPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifDesktopPaneUI.java
index c3e1f85993b..60552b8c780 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifDesktopPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifDesktopPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,25 +25,26 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import java.awt.Rectangle;
-import java.awt.Dimension;
-import java.awt.Insets;
 import java.awt.Color;
-import java.awt.Graphics;
 import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Insets;
 import java.awt.Point;
-import javax.swing.plaf.*;
+import java.awt.Rectangle;
 import java.io.Serializable;
 
+import javax.swing.DefaultDesktopManager;
+import javax.swing.JComponent;
+import javax.swing.JDesktopPane;
+import javax.swing.JInternalFrame;
+import javax.swing.JLayeredPane;
+import javax.swing.SwingUtilities;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.UIResource;
+
 /**
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
+ * Motif desktop pane.
  *
  * @author David Kloba
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifEditorPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifEditorPaneUI.java
index c7943dff79f..3367b36f0fd 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifEditorPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifEditorPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -22,22 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.text.*;
-import javax.swing.plaf.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicEditorPaneUI;
+import javax.swing.text.Caret;
 
 /**
  * Provides the look and feel for an pluggable content-type text editor.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author  Timothy Prinzing
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifIconFactory.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifIconFactory.java
index c7cf812dbf5..dac6514f0c4 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifIconFactory.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifIconFactory.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,29 +25,21 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-
-import javax.swing.plaf.UIResource;
-
 import java.awt.Color;
 import java.awt.Component;
-import java.awt.Dimension;
 import java.awt.Graphics;
-import java.awt.Polygon;
-
 import java.io.Serializable;
 
+import javax.swing.AbstractButton;
+import javax.swing.ButtonModel;
+import javax.swing.Icon;
+import javax.swing.JCheckBox;
+import javax.swing.UIManager;
+import javax.swing.plaf.UIResource;
+
 /**
  * Icon factory for the CDE/Motif Look and Feel
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
- * 1.20 04/27/99
  * @author Georges Saab
  */
 @SuppressWarnings(""serial"") // Same-version serialization only
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifInternalFrameUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifInternalFrameUI.java
index 8d9e5122ef6..cba71847fa4 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifInternalFrameUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifInternalFrameUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,27 +25,29 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import java.awt.*;
-import java.awt.event.*;
-import javax.swing.*;
-import javax.swing.event.*;
-
-import java.util.EventListener;
-
-import javax.swing.plaf.basic.*;
-import javax.swing.border.*;
-import javax.swing.plaf.*;
-
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Toolkit;
+import java.awt.event.ActionEvent;
+import java.awt.event.KeyEvent;
+
+import javax.swing.AbstractAction;
+import javax.swing.ActionMap;
+import javax.swing.InputMap;
+import javax.swing.JComponent;
+import javax.swing.JInternalFrame;
+import javax.swing.KeyStroke;
+import javax.swing.LookAndFeel;
+import javax.swing.SwingUtilities;
+import javax.swing.UIManager;
+import javax.swing.border.Border;
+import javax.swing.plaf.ActionMapUIResource;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.UIResource;
+import javax.swing.plaf.basic.BasicInternalFrameUI;
 
 /**
  * A Motif {@literal L&F} implementation of InternalFrame.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Tom Ball
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLabelUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLabelUI.java
index 1da0036e3fa..f19a3c23cb5 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLabelUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLabelUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,22 +25,15 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.awt.AppContext;
-
-import javax.swing.*;
-import javax.swing.plaf.basic.BasicLabelUI;
+import javax.swing.JComponent;
 import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicLabelUI;
+
+import sun.awt.AppContext;
 
 /**
  * A Motif {@literal L&F} implementation of LabelUI.
  * This merely sets up new default values in MotifLookAndFeel.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Amy Fowler
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLookAndFeel.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLookAndFeel.java
index 455c521493d..d4993c11eb9 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLookAndFeel.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifLookAndFeel.java
@@ -27,37 +27,26 @@
 
 import java.awt.Color;
 import java.awt.Font;
-import java.awt.Insets;
 import java.awt.event.KeyEvent;
-import java.awt.event.InputEvent;
-import java.util.*;
 
-import javax.swing.*;
-import javax.swing.plaf.*;
-import javax.swing.border.*;
-import javax.swing.text.JTextComponent;
-import javax.swing.text.DefaultEditorKit;
-
-import javax.swing.plaf.basic.BasicLookAndFeel;
+import javax.swing.JTextField;
+import javax.swing.UIDefaults;
+import javax.swing.border.Border;
+import javax.swing.plaf.BorderUIResource;
+import javax.swing.plaf.ColorUIResource;
+import javax.swing.plaf.FontUIResource;
+import javax.swing.plaf.InsetsUIResource;
 import javax.swing.plaf.basic.BasicBorders;
-import javax.swing.plaf.basic.BasicComboBoxRenderer;
-import javax.swing.plaf.basic.BasicComboBoxEditor;
+import javax.swing.plaf.basic.BasicLookAndFeel;
+import javax.swing.text.DefaultEditorKit;
 
 import sun.swing.SwingAccessor;
 import sun.swing.SwingUtilities2;
-import sun.awt.OSInfo;
 
 /**
  * Implements the Motif Look and Feel.
  * UI classes not implemented specifically for Motif will
  * default to those implemented in Basic.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @deprecated The Motif Look and Feel is deprecated with the intent to remove
  *             it in some future release. It is recommended to use
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifMenuBarUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifMenuBarUI.java
index cdc05400fe2..4e9beaa8ab4 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifMenuBarUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifMenuBarUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,35 +25,13 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import java.awt.Component;
-import java.awt.Container;
-import java.awt.Dimension;
-import java.awt.Graphics;
-import java.awt.Color;
-import java.awt.Insets;
-import java.awt.Point;
-import java.awt.Rectangle;
-import java.awt.event.*;
-import java.io.Serializable;
-
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.border.*;
-import javax.swing.plaf.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicMenuBarUI;
-//REMIND
-import javax.swing.plaf.basic.*;
 
 /**
  * A Windows {@literal L&F} implementation of MenuBarUI.  This implementation
  * is a ""combined"" view/controller.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Georges Saab
  * @author Rich Schiavi
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifOptionPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifOptionPaneUI.java
index ddba46c9cc9..7da390bad23 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifOptionPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifOptionPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,26 +25,21 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.plaf.basic.BasicOptionPaneUI;
-import javax.swing.plaf.ComponentUI;
 import java.awt.Color;
-import java.awt.Component;
 import java.awt.Container;
 import java.awt.Dimension;
 import java.awt.Graphics;
-import java.awt.Insets;
-import java.awt.Rectangle;
+
+import javax.swing.Icon;
+import javax.swing.JComponent;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.SwingConstants;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicOptionPaneUI;
 
 /**
  * Provides the CDE/Motif look and feel for a JOptionPane.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Scott Violet
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPasswordFieldUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPasswordFieldUI.java
index 3b0159c8d7b..8e1369d7e96 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPasswordFieldUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPasswordFieldUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -22,22 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.text.*;
-import javax.swing.plaf.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicPasswordFieldUI;
+import javax.swing.text.Caret;
 
 /**
  * Provides the Motif look and feel for a password field.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author  Timothy Prinzing
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPopupMenuUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPopupMenuUI.java
index a0b182b8019..0986f81f0ff 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPopupMenuUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifPopupMenuUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,36 +25,27 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.swing.SwingUtilities2;
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.border.*;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Container;
 import java.awt.Dimension;
 import java.awt.Font;
 import java.awt.FontMetrics;
-import java.awt.Frame;
-import java.awt.Graphics;
 import java.awt.Insets;
 import java.awt.LayoutManager;
-import java.awt.Point;
-import java.awt.Rectangle;
-import java.awt.event.*;
-import javax.swing.plaf.*;
+import java.awt.event.MouseEvent;
+
+import javax.swing.JComponent;
+import javax.swing.JPopupMenu;
+import javax.swing.UIDefaults;
+import javax.swing.UIManager;
+import javax.swing.border.Border;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicPopupMenuUI;
 
+import sun.swing.SwingUtilities2;
 
 /**
  * A Motif {@literal L&F} implementation of PopupMenuUI.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Georges Saab
  * @author Rich Schiavi
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifProgressBarUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifProgressBarUI.java
index 66d99e007d4..2c53d741397 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifProgressBarUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifProgressBarUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,24 +25,12 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import java.awt.*;
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.plaf.*;
-import java.io.Serializable;
-
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicProgressBarUI;
 
-
 /**
  * A Motif ProgressBarUI.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Michael C. Albers
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonMenuItemUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonMenuItemUI.java
index 3cc793fccae..1a9d7fa1e91 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonMenuItemUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonMenuItemUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,26 +25,24 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.plaf.*;
+import java.awt.Point;
+import java.awt.event.MouseEvent;
+import java.io.Serializable;
+
+import javax.swing.JComponent;
+import javax.swing.JMenuItem;
+import javax.swing.LookAndFeel;
+import javax.swing.MenuSelectionManager;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import javax.swing.event.MouseInputListener;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicRadioButtonMenuItemUI;
 
-import java.awt.*;
-import java.awt.event.*;
-import java.io.Serializable;
 import sun.swing.SwingUtilities2;
 
-
 /**
  * MotifRadioButtonMenuItem implementation
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Georges Saab
  * @author Rich Schiavi
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonUI.java
index 328ca4844ed..58619280493 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifRadioButtonUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,25 +25,21 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import sun.awt.AppContext;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Rectangle;
 
-import javax.swing.*;
-import javax.swing.border.*;
+import javax.swing.AbstractButton;
+import javax.swing.JComponent;
+import javax.swing.UIManager;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicRadioButtonUI;
 
-import javax.swing.plaf.*;
-
-import java.awt.*;
+import sun.awt.AppContext;
 
 /**
  * RadioButtonUI implementation for MotifRadioButtonUI
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Rich Schiavi
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarButton.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarButton.java
index cb586512c82..5b812ca4c8c 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarButton.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarButton.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,23 +25,15 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.plaf.*;
-import javax.swing.plaf.basic.BasicArrowButton;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics;
 
-import java.awt.*;
-import java.awt.event.*;
+import javax.swing.UIManager;
+import javax.swing.plaf.basic.BasicArrowButton;
 
 /**
  * Motif scroll bar button.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  */
 @SuppressWarnings(""serial"") // Superclass is not serializable across versions
 public class MotifScrollBarButton extends BasicArrowButton
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarUI.java
index 294a1c374ab..08a283f5e52 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollBarUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -22,6 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+
 package com.sun.java.swing.plaf.motif;
 
 import java.awt.Dimension;
@@ -38,16 +39,8 @@
 import static sun.swing.SwingUtilities2.drawHLine;
 import static sun.swing.SwingUtilities2.drawVLine;
 
-
 /**
  * Implementation of ScrollBarUI for the Motif Look and Feel
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Rich Schiavi
  * @author Hans Muller
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollPaneUI.java
index af659095672..833cf732b0a 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifScrollPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,23 +25,20 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.border.*;
-import javax.swing.plaf.*;
-import javax.swing.plaf.basic.BasicScrollPaneUI;
-
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
+import javax.swing.JComponent;
+import javax.swing.JScrollBar;
+import javax.swing.JScrollPane;
+import javax.swing.border.Border;
+import javax.swing.border.CompoundBorder;
+import javax.swing.border.EmptyBorder;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicScrollPaneUI;
+
 /**
  * A CDE/Motif {@code L&F} implementation of ScrollPaneUI.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Hans Muller
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSeparatorUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSeparatorUI.java
index bc457b01b13..dac713eda7b 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSeparatorUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSeparatorUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,25 +25,13 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Graphics;
-import java.awt.Insets;
-import java.awt.Rectangle;
-import javax.swing.plaf.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicSeparatorUI;
 
 /**
  * A Motif {@literal L&F} implementation of SeparatorUI.
  * This implementation is a ""combined"" view/controller.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Georges Saab
  * @author Jeff Shapiro
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSliderUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSliderUI.java
index e22db5e05cd..c8820de17c4 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSliderUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSliderUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -38,14 +38,7 @@
 import static sun.swing.SwingUtilities2.drawVLine;
 
 /**
- * Motif Slider
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
+ * Motif Slider.
  *
  * @author Jeff Dinkins
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneDivider.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneDivider.java
index 6040eb31323..7dceae4930d 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneDivider.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneDivider.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,23 +25,20 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import java.awt.*;
-import java.awt.event.*;
+import java.awt.Color;
+import java.awt.Cursor;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Insets;
+import java.awt.event.MouseEvent;
+
 import javax.swing.JSplitPane;
 import javax.swing.UIManager;
-import javax.swing.plaf.basic.BasicSplitPaneUI;
 import javax.swing.plaf.basic.BasicSplitPaneDivider;
-
+import javax.swing.plaf.basic.BasicSplitPaneUI;
 
 /**
  * Divider used for Motif split pane.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Jeff Dinkins
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneUI.java
index 6ee670812c3..c61a1713c9b 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifSplitPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,21 +25,13 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.plaf.basic.BasicSplitPaneUI;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicSplitPaneDivider;
-import javax.swing.plaf.*;
-import javax.swing.*;
-import java.awt.*;
+import javax.swing.plaf.basic.BasicSplitPaneUI;
 
 /**
  * Motif rendition of a split pane.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Jeff Dinkins
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTabbedPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTabbedPaneUI.java
index e7bae098a55..1c53fc4a179 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTabbedPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTabbedPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 2002, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -25,23 +25,17 @@
 
 package com.sun.java.swing.plaf.motif;
 
-import java.awt.*;
-import java.awt.event.*;
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.plaf.*;
+import java.awt.Color;
+import java.awt.Graphics;
+import java.awt.Rectangle;
+
+import javax.swing.JComponent;
+import javax.swing.UIManager;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicTabbedPaneUI;
-import java.io.Serializable;
 
 /**
  * A Motif {@literal L&F} implementation of TabbedPaneUI.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author Amy Fowler
  * @author Philip Milne
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextAreaUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextAreaUI.java
index c6f4cc54b3a..baddbf3a75d 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextAreaUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextAreaUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -22,24 +22,18 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
-import javax.swing.text.*;
-import javax.swing.plaf.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicTextAreaUI;
+import javax.swing.text.Caret;
 
 /**
  * Provides the look and feel for a plain text editor.  In this
  * implementation the default UI is extended to act as a simple
  * view factory.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author  Timothy Prinzing
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextFieldUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextFieldUI.java
index 895183c1e6a..08437687ebc 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextFieldUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextFieldUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -22,22 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+
 package com.sun.java.swing.plaf.motif;
 
-import javax.swing.*;
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.basic.BasicTextFieldUI;
-import javax.swing.plaf.*;
 import javax.swing.text.Caret;
 
 /**
  * Provides the Motif look and feel for a text field.
- * <p>
- * <strong>Warning:</strong>
- * Serialized objects of this class will not be compatible with
- * future Swing releases.  The current serialization support is appropriate
- * for short term storage or RMI between applications running the same
- * version of Swing.  A future release of Swing will provide support for
- * long term persistence.
  *
  * @author  Timothy Prinzing
  */
diff --git a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextPaneUI.java b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextPaneUI.java
index 3e1590a8831..e47ad4c60bf 100644
--- a/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextPaneUI.java
+++ b/src/java.desktop/share/classes/com/sun/java/swing/plaf/motif/MotifTextPaneUI.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 1997, 1998,",Eliminate the warning about serialization in non - public API of Swing .,"""Remove serialization warnings from Motif L&F classes""",Update Motif Look and Feel to use modern copyright years.,"It appears that you have not provided the commit message for the diff you want to apply. The commit message should summarize the changes made in the diff.

Here's an example of how you can format your commit message:
```
Commit Message: Update MotifBorders.java copyright year to 2020

This commit updates the copyright year in MotifBorders.java from 2014 to 2020.
```
In this example, the commit message starts with a short summary of the changes made, followed by a more detailed description. It's a good practice to provide a clear and concise commit message to help others understand the changes made in the commit.","### Removal of Serialization Warnings, Updates for Copyright

Simplified import statements and removed serialization warnings across various `Motif*UI.java` classes; updated copyright years to 2020."
"diff --git a/NOTICE b/NOTICE
index 4c89dd83a0..8940b32271 100644
--- a/NOTICE
+++ b/NOTICE
@@ -89,6 +89,7 @@ This project includes:
   Jasig CAS Web Application support under Apache 2
   Jasig CAS X.509 Client Certificate Support under Apache 2
   Jasig Central Authentication Service under Apache 2
+  Java Transaction API under Commons Development and Distribution License, Version 1.0
   java-getopt under GNU General Public License, with the ""library exception""
   JavaBeans Activation Framework (JAF) under Common Development and Distribution License (CDDL) v1.0
   Javassist under MPL 1.1 or LGPL 2.1
@@ -110,7 +111,6 @@ This project includes:
   json-lib under Apache License, Version 2.0
   JSR 105 - Java(TM) XML Digital Signature API under JDL license
   jstl under Commons Development and Distribution License, Version 1.0
-  jta under Commons Development and Distribution License, Version 1.0
   JUL to SLF4J bridge under MIT License
   JUnit under Common Public License Version 1.0
   kryo under BSD style
@@ -125,10 +125,6 @@ This project includes:
   OpenID4Java no dependencies under Apache 2
   OpenSAML-J under Apache 2
   OpenWS under Apache 2
-  org.restlet.jee:org.restlet under GPL 3.0 license
-  org.restlet.jee:org.restlet.ext.servlet under GPL 3.0 license
-  org.restlet.jee:org.restlet.ext.slf4j under GPL 3.0 license
-  org.restlet.jee:org.restlet.ext.spring under GPL 3.0 license
   org.samba.jcifs:jcifs-ext under GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1
   pac4j core under The Apache Software License, Version 2.0
   pac4j for OAuth protocol under The Apache Software License, Version 2.0
@@ -137,6 +133,10 @@ This project includes:
   Person Directory Implementations under Apache License Version 2.0
   quartz under The Apache Software License, Version 2.0
   reflectasm under BSD style
+  Restlet Core - API and Engine under Apache 2.0 license or LGPL 3.0 license or LGPL 2.1 license or CDDL 1.0 license or EPL 1.0 license
+  Restlet Extension - Servlet under Apache 2.0 license or LGPL 3.0 license or LGPL 2.1 license or CDDL 1.0 license or EPL 1.0 license
+  Restlet Extension - SLF4J under Apache 2.0 license or LGPL 3.0 license or LGPL 2.1 license or CDDL 1.0 license or EPL 1.0 license
+  Restlet Extension - Spring Framework under Apache 2.0 license or LGPL 3.0 license or LGPL 2.1 license or CDDL 1.0 license or EPL 1.0 license
   Scribe OAuth Library under MIT
   servlet-api under Commons Development and Distribution License, Version 1.0
   SLF4J API Module under MIT License
@@ -166,7 +166,7 @@ This project includes:
   Spymemcached under The Apache Software License, Version 2.0
   standard under Apache License, Version 2.0
   StAX API under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
   VT Crypt Library under Apache 2 or GNU Lesser General Public License
   Xalan Java under The Apache Software License, Version 2.0
diff --git a/cas-management-webapp/NOTICE b/cas-management-webapp/NOTICE
index 2aef347df7..57db65a946 100644
--- a/cas-management-webapp/NOTICE
+++ b/cas-management-webapp/NOTICE
@@ -87,7 +87,8 @@ This project includes:
   spring-security-web under The Apache Software License, Version 2.0
   standard under Apache License, Version 2.0
   StAX API under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
   XStream Core under BSD style
 
diff --git a/cas-server-core/NOTICE b/cas-server-core/NOTICE
index 552f343b7c..e1ee08c11b 100644
--- a/cas-server-core/NOTICE
+++ b/cas-server-core/NOTICE
@@ -73,6 +73,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-extension-clearpass/NOTICE b/cas-server-extension-clearpass/NOTICE
index d3fb2a111c..e2f9675b4d 100644
--- a/cas-server-extension-clearpass/NOTICE
+++ b/cas-server-extension-clearpass/NOTICE
@@ -73,6 +73,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-integration-ehcache/NOTICE b/cas-server-integration-ehcache/NOTICE
index f4a9f3647d..47c4132883 100644
--- a/cas-server-integration-ehcache/NOTICE
+++ b/cas-server-integration-ehcache/NOTICE
@@ -70,6 +70,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-integration-jboss/NOTICE b/cas-server-integration-jboss/NOTICE
index e1c2a6a4eb..8e46781d7c 100644
--- a/cas-server-integration-jboss/NOTICE
+++ b/cas-server-integration-jboss/NOTICE
@@ -35,6 +35,7 @@ This project includes:
   Inspektr - Common API under Apache 2.0 License
   Jasig CAS Core under Apache 2
   Jasig CAS JBoss Cache Integration under Apache 2
+  Java Transaction API under Commons Development and Distribution License, Version 1.0
   JavaBeans Activation Framework (JAF) under Common Development and Distribution License (CDDL) v1.0
   Javassist under MPL 1.1 or LGPL 2.1 or Apache License 2.0
   jaxb-api under Commons Development and Distribution License, Version 1.0
@@ -47,7 +48,6 @@ This project includes:
   JGroups under Library (or Lesser) GNU Public License 2.1
   Joda time under Apache 2
   JPA 2.0 API under Sun Binary Code License
-  jta under Commons Development and Distribution License, Version 1.0
   JUnit under Common Public License Version 1.0
   Mockito under The MIT License
   Objenesis under MIT License
@@ -74,6 +74,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-integration-memcached/NOTICE b/cas-server-integration-memcached/NOTICE
index f4aed92e77..a4b7650907 100644
--- a/cas-server-integration-memcached/NOTICE
+++ b/cas-server-integration-memcached/NOTICE
@@ -86,7 +86,7 @@ This project includes:
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
   Spymemcached under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
   Xalan Java under The Apache Software License, Version 2.0
   Xalan Java Serializer under The Apache Software License, Version 2.0
diff --git a/cas-server-integration-restlet/NOTICE b/cas-server-integration-restlet/NOTICE
index f68778a1ee..91203ae25f 100644
--- a/cas-server-integration-restlet/NOTICE
+++ b/cas-server-integration-restlet/NOTICE
@@ -75,6 +75,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-generic/NOTICE b/cas-server-support-generic/NOTICE
index 66b7c817e7..f2277101f0 100644
--- a/cas-server-support-generic/NOTICE
+++ b/cas-server-support-generic/NOTICE
@@ -69,6 +69,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-jdbc/NOTICE b/cas-server-support-jdbc/NOTICE
index d8baa81a4d..9cd65432be 100644
--- a/cas-server-support-jdbc/NOTICE
+++ b/cas-server-support-jdbc/NOTICE
@@ -69,6 +69,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-ldap/NOTICE b/cas-server-support-ldap/NOTICE
index 2e0f7ab0be..ca5818ea43 100644
--- a/cas-server-support-ldap/NOTICE
+++ b/cas-server-support-ldap/NOTICE
@@ -75,6 +75,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-legacy/NOTICE b/cas-server-support-legacy/NOTICE
index 9f3027c38b..0cf8bc8818 100644
--- a/cas-server-support-legacy/NOTICE
+++ b/cas-server-support-legacy/NOTICE
@@ -70,6 +70,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-oauth/NOTICE b/cas-server-support-oauth/NOTICE
index d8069b5315..2145db9445 100644
--- a/cas-server-support-oauth/NOTICE
+++ b/cas-server-support-oauth/NOTICE
@@ -72,6 +72,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-openid/NOTICE b/cas-server-support-openid/NOTICE
index 9061aecf6f..dce48c0a54 100644
--- a/cas-server-support-openid/NOTICE
+++ b/cas-server-support-openid/NOTICE
@@ -75,6 +75,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-pac4j/NOTICE b/cas-server-support-pac4j/NOTICE
index b73eb2821f..6420167f8e 100644
--- a/cas-server-support-pac4j/NOTICE
+++ b/cas-server-support-pac4j/NOTICE
@@ -75,6 +75,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-radius/NOTICE b/cas-server-support-radius/NOTICE
index 2f6a0327b8..8a8e54ab71 100644
--- a/cas-server-support-radius/NOTICE
+++ b/cas-server-support-radius/NOTICE
@@ -79,6 +79,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-saml/NOTICE b/cas-server-support-saml/NOTICE
index 053ef3d816..82ad823ab9 100644
--- a/cas-server-support-saml/NOTICE
+++ b/cas-server-support-saml/NOTICE
@@ -80,7 +80,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
   Xalan Java under The Apache Software License, Version 2.0
   Xalan Java Serializer under The Apache Software License, Version 2.0
diff --git a/cas-server-support-spnego/NOTICE b/cas-server-support-spnego/NOTICE
index bf8ab1bb9a..4ed2171223 100644
--- a/cas-server-support-spnego/NOTICE
+++ b/cas-server-support-spnego/NOTICE
@@ -71,6 +71,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-trusted/NOTICE b/cas-server-support-trusted/NOTICE
index 1621741661..9288cd7fb9 100644
--- a/cas-server-support-trusted/NOTICE
+++ b/cas-server-support-trusted/NOTICE
@@ -69,6 +69,7 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-support-x509/NOTICE b/cas-server-support-x509/NOTICE
index d109ea73cd..bfc6b3565d 100644
--- a/cas-server-support-x509/NOTICE
+++ b/cas-server-support-x509/NOTICE
@@ -76,7 +76,8 @@ This project includes:
   Spring Web Flow under Apache License, Version 2.0
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
   VT Crypt Library under Apache 2 or GNU Lesser General Public License
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-uber-webapp/NOTICE b/cas-server-uber-webapp/NOTICE
index f0b741f872..538bc19f9e 100644
--- a/cas-server-uber-webapp/NOTICE
+++ b/cas-server-uber-webapp/NOTICE
@@ -55,6 +55,7 @@ This project includes:
   Jasig CAS SPNEGO/NTLM Support under Apache 2
   Jasig CAS Web Application under Apache 2
   Jasig CAS X.509 Client Certificate Support under Apache 2
+  Java Transaction API under Commons Development and Distribution License, Version 1.0
   java-getopt under GNU General Public License, with the ""library exception""
   JavaBeans Activation Framework (JAF) under Common Development and Distribution License (CDDL) v1.0
   Javassist under MPL 1.1 or LGPL 2.1 or Apache License 2.0
@@ -71,7 +72,6 @@ This project includes:
   JPA 2.0 API under Sun Binary Code License
   jradius-core-1.0.0 under GNU Lessor/Library Public License, Version 3.0 or GNU Public License, Version 3.0
   jradius-dictionary-1.0.0 under GNU Lessor/Library Public License, Version 3.0 or GNU Public License, Version 3.0
-  jta under Commons Development and Distribution License, Version 1.0
   JUnit under Common Public License Version 1.0
   kryo under BSD style
   LDAPTIVE under Apache 2 or GNU Lesser General Public License
@@ -104,7 +104,8 @@ This project includes:
   Spring Web MVC under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
   Spymemcached under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
   VT Crypt Library under Apache 2 or GNU Lesser General Public License
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-webapp-support/NOTICE b/cas-server-webapp-support/NOTICE
index dcb878d7e3..14d11f57d4 100644
--- a/cas-server-webapp-support/NOTICE
+++ b/cas-server-webapp-support/NOTICE
@@ -77,6 +77,7 @@ This project includes:
   spring-security-config under The Apache Software License, Version 2.0
   spring-security-core under The Apache Software License, Version 2.0
   spring-security-web under The Apache Software License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 
diff --git a/cas-server-webapp/NOTICE b/cas-server-webapp/NOTICE
index eb85e59fa1..156619c638 100644
--- a/cas-server-webapp/NOTICE
+++ b/cas-server-webapp/NOTICE
@@ -79,6 +79,7 @@ This project includes:
   spring-security-core under The Apache Software License, Version 2.0
   spring-security-web under The Apache Software License, Version 2.0
   standard under Apache License, Version 2.0
-  stax-api under Sun Binary Code License
+  Streaming API for XML under Sun Binary Code License
   Transaction 1.1 API under lgpl
+  XML Commons External Components XML APIs under The Apache Software License, Version 2.0
 ",Updated notice files for RC3,"""Update NOTICE files to reflect changes in dependencies and licenses""","Added Java Transaction API under Commons Development and Distribution License, Version 1.0 to multiple modules and replaced stax-api with Streaming API for XML under Sun Binary Code License in various NOTICE files.","The commit message could be:

""Update NOTICE files to include new dependencies and licenses""

This commit message summarizes the changes made to the NOTICE files, which include the addition of new dependencies and their corresponding licenses. It is important to keep the NOTICE file up-to-date with accurate information about the open-source software being used in a project, as it ensures proper attribution and compliance with the relevant licenses.",Updated NOTICE files to rename 'stax-api' to 'Streaming API for XML' and added several XML Commons External Components XML APIs dependencies.
"diff --git a/presto-main/src/main/java/com/facebook/presto/server/smile/Codec.java b/presto-main/src/main/java/com/facebook/presto/server/smile/Codec.java
index 876c6b65bf..f4ac5ba1eb 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/smile/Codec.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/smile/Codec.java
@@ -16,4 +16,6 @@ package com.facebook.presto.server.smile;
 public interface Codec<T>
 {
     byte[] toBytes(T instance);
+
+    T fromBytes(byte[] bytes);
 }
diff --git a/presto-main/src/main/java/com/facebook/presto/server/smile/JsonCodecWrapper.java b/presto-main/src/main/java/com/facebook/presto/server/smile/JsonCodecWrapper.java
index b6afe8680f..365392ba39 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/smile/JsonCodecWrapper.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/smile/JsonCodecWrapper.java
@@ -44,4 +44,10 @@ public class JsonCodecWrapper<T>
     {
         return jsonCodec.toJsonBytes(instance);
     }
+
+    @Override
+    public T fromBytes(byte[] bytes)
+    {
+        return jsonCodec.fromJson(bytes);
+    }
 }
diff --git a/presto-main/src/main/java/com/facebook/presto/server/smile/SmileCodec.java b/presto-main/src/main/java/com/facebook/presto/server/smile/SmileCodec.java
index 5abf5d3618..4db9e488d0 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/smile/SmileCodec.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/smile/SmileCodec.java
@@ -154,6 +154,12 @@ public class SmileCodec<T>
         }
     }
 
+    @Override
+    public T fromBytes(byte[] bytes)
+    {
+        return fromSmile(bytes);
+    }
+
     @SuppressWarnings(""unchecked"")
     TypeToken<T> getTypeToken()
     {",Add fromBytes to Codec,"""Add fromBytes method to Codec interface and implement it in JsonCodecWrapper and SmileCodec""",Added `fromBytes` method to `Codec` interface and implemented it in `JsonCodecWrapper` and `SmileCodec` classes.,"""Added fromBytes method to Codec interface and implemented it in JsonCodecWrapper and SmileCodec classes""

This commit adds a new method `fromBytes(byte[] bytes)` to the `Codec` interface and provides an implementation for this method in the `JsonCodecWrapper` and `SmileCodec` classes. This allows these classes to deserialize a byte array into an instance of the generic type `T`. The implementation in `JsonCodecWrapper` uses the existing `jsonCodec.fromJson(bytes)` method, while the implementation in `SmileCodec` calls a new `fromSmile(bytes)` method.",Added fromBytes method to Codec interface and implemented it in JsonCodecWrapper and SmileCodec classes.
"diff --git a/src/main/java/org/thymeleaf/dom/DOMSelector.java b/src/main/java/org/thymeleaf/dom/DOMSelector.java
index 1f896d05f..c758b7e16 100644
--- a/src/main/java/org/thymeleaf/dom/DOMSelector.java
+++ b/src/main/java/org/thymeleaf/dom/DOMSelector.java
@@ -59,6 +59,9 @@
  * <p>
  *   For example: <tt>//div[@id=""menu""]</tt>.
  * </p>
+ * <p>
+ *   Objects of this class are <b>thread-safe</b>.
+ * </p>
  * 
  * @author Daniel Fern&aacute;ndez
  * 
@@ -75,7 +78,7 @@ public final class DOMSelector implements Serializable {
     private static final Pattern selectorPattern =
             Pattern.compile(selectorPatternStr);
     
-    private final String selectorSpec;
+    private final String selectorExpression;
     private final boolean descendMoreThanOneLevel;
     private final String selectorName;
     private final boolean text;
@@ -84,15 +87,23 @@ public final class DOMSelector implements Serializable {
     
     private final DOMSelector next;
     
-    
-    public DOMSelector(final String selectorSpec) {
+
+    /**
+     * <p>
+     *   Creates a new DOM selector specified by the argument selector
+     *   expression.
+     * </p>
+     * 
+     * @param selectorExpression the expression specifying the selector to be used.
+     */
+    public DOMSelector(final String selectorExpression) {
         
         super();
 
-        this.selectorSpec = selectorSpec;
+        this.selectorExpression = selectorExpression;
         
         String selectorSpecStr =
-            (selectorSpec.trim().startsWith(""/"")? selectorSpec.trim() : ""/"" + selectorSpec.trim());
+            (selectorExpression.trim().startsWith(""/"")? selectorExpression.trim() : ""/"" + selectorExpression.trim());
         
         final int selectorSpecStrLen = selectorSpecStr.length();
         int firstNonSlash = 0;
@@ -102,7 +113,7 @@ public DOMSelector(final String selectorSpec) {
         
         if (firstNonSlash >= selectorSpecStrLen) {
             throw new TemplateProcessingException(
-                    ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": '/' should be followed by a selector name"");
+                    ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": '/' should be followed by a selector name"");
         }
         
         final int selEnd = selectorSpecStr.substring(firstNonSlash).indexOf('/');
@@ -117,7 +128,7 @@ public DOMSelector(final String selectorSpec) {
         final Matcher matcher = selectorPattern.matcher(selectorSpecStr);
         if (!matcher.matches()) {
             throw new TemplateProcessingException(
-                    ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                    ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
             		""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
         }
         
@@ -128,7 +139,7 @@ public DOMSelector(final String selectorSpec) {
         
         if (rootGroup == null) {
             throw new TemplateProcessingException(
-                    ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                    ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                     ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
         }
         
@@ -138,13 +149,13 @@ public DOMSelector(final String selectorSpec) {
             this.descendMoreThanOneLevel = false;
         } else {
             throw new TemplateProcessingException(
-                    ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                    ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                     ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
         }
         
         if (selectorNameGroup == null) {
             throw new TemplateProcessingException(
-                    ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                    ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                     ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
         }
         
@@ -155,10 +166,10 @@ public DOMSelector(final String selectorSpec) {
             
             Integer ind = parseIndex(index1Group);
             if (ind == null) {
-                HashMap<String,String> attribs = parseAttributes(selectorSpec, index1Group);
+                HashMap<String,String> attribs = parseAttributes(selectorExpression, index1Group);
                 if (attribs == null) {
                     throw new TemplateProcessingException(
-                            ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                            ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                             ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
                 }
                 this.attributes = attribs;
@@ -170,14 +181,14 @@ public DOMSelector(final String selectorSpec) {
 
                 if (this.index != null) {
                     throw new TemplateProcessingException(
-                            ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                            ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                             ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
                 }
                 
                 ind = parseIndex(index1Group);
                 if (ind == null) {
                     throw new TemplateProcessingException(
-                            ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": selector does not match selector syntax: "" +
+                            ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": selector does not match selector syntax: "" +
                             ""(/|//)(selector)([@attrib=\""value\"" (and @attrib2=\""value\"")?])?([index])?"");
                 }
                 this.index = ind;
@@ -186,7 +197,7 @@ public DOMSelector(final String selectorSpec) {
             
             if (this.descendMoreThanOneLevel && this.index != null) {
                 throw new TemplateProcessingException(
-                        ""Invalid syntax in DOM selector \"""" + selectorSpec + ""\"": index cannot be specified on a \""descend any levels\"" selector (//)."");
+                        ""Invalid syntax in DOM selector \"""" + selectorExpression + ""\"": index cannot be specified on a \""descend any levels\"" selector (//)."");
             }
             
         }
@@ -195,6 +206,20 @@ public DOMSelector(final String selectorSpec) {
     
     
     
+    /**
+     * <p>
+     *   Returns the expression that specifies this DOM selector.
+     * </p>
+     * 
+     * @return the selector expression.
+     * @since 2.0.12
+     */
+    public String getSelectorExpression() {
+        return this.selectorExpression;
+    }
+    
+    
+    
     private static Integer parseIndex(final String indexGroup) {
         if (""last()"".equals(indexGroup.toLowerCase())) {
             return Integer.valueOf(-1);
@@ -260,13 +285,30 @@ private static void parseAttribute(final String selectorSpec, final HashMap<Stri
 
     
     
-    
+    /**
+     * <p>
+     *   Executes the DOM selector against the specified node, returning
+     *   the result of applying the selector expression.
+     * </p>
+     * 
+     * @param node the node on which the selector will be executed.
+     * @return the result of executing the selector.
+     */
     public List<Node> select(final Node node) {
         Validate.notNull(node, ""Node to be searched cannot be null"");
         return select(Collections.singletonList(node));
     }
 
-    
+
+    /**
+     * <p>
+     *   Executes the DOM selector against the specified list of nodes,
+     *   returning the result of applying the selector expression.
+     * </p>
+     * 
+     * @param nodes the nodes on which the selector will be executed.
+     * @return the result of executing the selector.
+     */
     public List<Node> select(final List<Node> nodes) {
         Validate.notEmpty(nodes, ""Nodes to be searched cannot be null or empty"");
         final List<Node> selected = new ArrayList<Node>();
@@ -410,7 +452,7 @@ private final boolean doCheckSpecificNodeSelection(final Node node) {
     
     @Override
     public final String toString() {
-        return this.selectorSpec;
+        return this.selectorExpression;
     }
 
    
diff --git a/src/main/java/org/thymeleaf/fragment/ChainedFragmentSpec.java b/src/main/java/org/thymeleaf/fragment/ChainedFragmentSpec.java
index c2750b145..e4b4be24f 100644
--- a/src/main/java/org/thymeleaf/fragment/ChainedFragmentSpec.java
+++ b/src/main/java/org/thymeleaf/fragment/ChainedFragmentSpec.java
@@ -33,6 +33,9 @@
  *   Implementation of {@link IFragmentSpec} that allows the execution of
  *   two fragment specs in chain, effectively performing a double-filering.
  * </p>
+ * <p>
+ *   Objects of this class are <b>thread-safe</b>.
+ * </p>
  * 
  * @author Daniel Fern&aacute;ndez
  * 
@@ -45,6 +48,14 @@ public final class ChainedFragmentSpec implements IFragmentSpec {
     private final IFragmentSpec fragmentSpec2;
     
     
+    /**
+     * <p>
+     *   Creates a new instance of this fragment spec.
+     * </p>
+     * 
+     * @param fragmentSpec1 the first fragment spec that will be executed.
+     * @param fragmentSpec2 the second fragment spec that will be executed.
+     */
     public ChainedFragmentSpec(
             final IFragmentSpec fragmentSpec1, final IFragmentSpec fragmentSpec2) {
         super();
@@ -69,7 +80,11 @@ public IFragmentSpec getFragmentSpec1() {
 
     /**
      * <p>
-     *   Returns the seconf fragment spec in the chain.
+     *   Returns the second fragment spec in the chain.
+     * </p>
+     * <p>
+     *   This fragment spec will be executed using the output from 
+     *   <tt>fragmentSpec1</tt> as input.
      * </p>
      * 
      * @return the fragment spec
diff --git a/src/main/java/org/thymeleaf/fragment/DOMSelectorFragmentSpec.java b/src/main/java/org/thymeleaf/fragment/DOMSelectorFragmentSpec.java
index 3616c67ac..e96d43c28 100644
--- a/src/main/java/org/thymeleaf/fragment/DOMSelectorFragmentSpec.java
+++ b/src/main/java/org/thymeleaf/fragment/DOMSelectorFragmentSpec.java
@@ -19,19 +19,34 @@
  */
 package org.thymeleaf.fragment;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.thymeleaf.Configuration;
 import org.thymeleaf.cache.ICache;
 import org.thymeleaf.cache.ICacheManager;
 import org.thymeleaf.dom.DOMSelector;
+import org.thymeleaf.dom.NestableNode;
 import org.thymeleaf.dom.Node;
+import org.thymeleaf.exceptions.TemplateProcessingException;
 import org.thymeleaf.util.Validate;
 
 
 
 
 /**
+ * <p>
+ *  Implementation of the {@link IFragmentSpec} interface that extracts fragments
+ *  of DOM trees using a {@link DOMSelector} object.
+ * </p>
+ * <p>
+ *  The DOM selector instances used by these fragment specs are stored at the
+ *  <i>expression cache</i> (see {@link ICacheManager#getExpressionCache()}) using
+ *  as key {@link #DOM_SELECTOR_EXPRESSION_PREFIX} + <tt>selectorExpression</tt>.
+ * </p>
+ * <p>
+ *   Objects of this class are <b>thread-safe</b>.
+ * </p>
  * 
  * @author Daniel Fern&aacute;ndez
  * 
@@ -40,17 +55,55 @@
  */
 public final class DOMSelectorFragmentSpec implements IFragmentSpec {
 
-    
-    private static final String DOM_SELECTOR_EXPRESSION_PREFIX = ""{dom_selector}"";
+    /**
+     * <p>
+     *   Prefix to be used for keys when storing selector expressions at the
+     *   <i>expression cache</i>.
+     * </p>
+     */
+    public static final String DOM_SELECTOR_EXPRESSION_PREFIX = ""{dom_selector}"";
     
     private final String selectorExpression;
+    private final boolean returnOnlyChildren;
 
     
-    
+
+    /**
+     * <p>
+     *   Creates a new instance, specifying the expression to be used for a
+     *   {@link DOMSelector} object to be created internally.
+     * </p>
+     * 
+     * @param selectorExpression the expression to be used for the DOM selector.
+     */
     public DOMSelectorFragmentSpec(final String selectorExpression) {
+        this(selectorExpression, false);
+    }
+    
+
+    /**
+     * <p>
+     *   Creates a new instance, specifying the expression to be used for a
+     *   {@link DOMSelector} object to be created internally and also a flag indicating
+     *   whether the selected element itself (or selected elements if more than
+     *   one) must be returned or only its/their children.
+     * </p>
+     * <p>
+     *   If <tt>returnOnlyChildren</tt> is true, the element with the specified name 
+     *   and/or containing the specified attribute will be discarded, and only its/their
+     *   children will be returned.
+     * </p>
+     * 
+     * @param selectorExpression the expression to be used for the DOM selector.
+     * @param returnOnlyChildren whether the selected elements should be returned (false),
+     *        or only their children (true).
+     * @since 2.0.12
+     */
+    public DOMSelectorFragmentSpec(final String selectorExpression, final boolean returnOnlyChildren) {
         super();
         Validate.notEmpty(selectorExpression, ""DOM selector expression cannot be null or empty"");
         this.selectorExpression = selectorExpression;
+        this.returnOnlyChildren = returnOnlyChildren;
     }
     
     
@@ -59,6 +112,21 @@ public String getSelectorExpression() {
         return this.selectorExpression;
     }
     
+    
+    /**
+     * <p>
+     *   Returns whether this spec should only return the children of the selected nodes
+     *   (<tt>true</tt>) or the selected nodes themselves (<tt>false</tt>, default).
+     * </p>
+     * 
+     * @return whether this spec should only return the children of the selected nodes
+     *         or not (default: false).
+     * @since 2.0.12
+     */
+    public boolean isReturnOnlyChildren() {
+        return this.returnOnlyChildren;
+    }
+    
 
     
 
@@ -83,12 +151,35 @@ public final List<Node> extractFragment(final Configuration configuration, final
             }
         }
         
-        final List<Node> selectedNodes = selector.select(nodes);
-        if (selectedNodes == null || selectedNodes.size() == 0) {
+        final List<Node> extraction = selector.select(nodes);
+        if (extraction == null || extraction.size() == 0) {
             return null;
         }
             
-        return selectedNodes;
+        
+        if (!this.returnOnlyChildren) {
+            return extraction;
+        }
+        
+        final List<Node> extractionChildren = new ArrayList<Node>(); 
+        for (final Node extractionNode : extraction) {
+            
+            if (extractionNode == null) {
+                continue;
+            }
+            
+            if (!(extractionNode instanceof NestableNode)) {
+                throw new TemplateProcessingException(
+                        ""Cannot correctly retrieve children of node selected by fragment spec "" +
+                        ""with DOM selector \"""" + this.selectorExpression + ""\"". Node is not a "" +
+                		""nestable node ("" + extractionNode.getClass().getSimpleName() + "")."");
+            }
+            
+            extractionChildren.addAll(((NestableNode)extractionNode).getChildren());
+            
+        }
+        
+        return extractionChildren;
         
     }
 
diff --git a/src/main/java/org/thymeleaf/fragment/ElementAndAttributeNameFragmentSpec.java b/src/main/java/org/thymeleaf/fragment/ElementAndAttributeNameFragmentSpec.java
index 8e36c490f..cf4adc4dd 100644
--- a/src/main/java/org/thymeleaf/fragment/ElementAndAttributeNameFragmentSpec.java
+++ b/src/main/java/org/thymeleaf/fragment/ElementAndAttributeNameFragmentSpec.java
@@ -19,10 +19,13 @@
  */
 package org.thymeleaf.fragment;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.thymeleaf.Configuration;
+import org.thymeleaf.dom.NestableNode;
 import org.thymeleaf.dom.Node;
+import org.thymeleaf.exceptions.TemplateProcessingException;
 import org.thymeleaf.util.DOMUtils;
 import org.thymeleaf.util.StringUtils;
 import org.thymeleaf.util.Validate;
@@ -31,6 +34,13 @@
 
 
 /**
+ * <p>
+ *   Fragment specification that extracts a specific element from a Node tree
+ *   by its name, or by the value of one of its attributes.
+ * </p>
+ * <p>
+ *   Objects of this class are <b>thread-safe</b>.
+ * </p>
  * 
  * @author Daniel Fern&aacute;ndez
  * 
@@ -42,14 +52,53 @@ public final class ElementAndAttributeNameFragmentSpec implements IFragmentSpec
     private final String elementName;
     private final String attributeName;
     private final String attributeValue;
+    private final boolean returnOnlyChildren;
     
     
     
-    
+
+    /**
+     * <p>
+     *   Create a fragment spec specifying element name and/or attribute name+value.
+     * </p>
+     * 
+     * @param elementName the element name to look for, optional.
+     * @param attributeName the attribute name to look for, optional.
+     * @param attributeValue the value of the attribute (if attribute name has been specified).
+     */
     public ElementAndAttributeNameFragmentSpec(
             final String elementName, 
             final String attributeName, 
             final String attributeValue) {
+        this(elementName, attributeName, attributeValue, false);
+    }
+
+    
+    
+    /**
+     * <p>
+     *   Create a fragment spec specifying element name and/or attribute name+value, and
+     *   specifying whether the selected element itself (or selected","Added \"" returnOnlyChildren \"" flag to fragment specs and improved javadoc .","""Improved DOMSelector and FragmentSpec classes for better performance and thread-safety""","Here is a short commit message that summarizes the changes:

`Added thread-safety to DOMSelector and related classes, and improved documentation and API for DOMSelector and fragment specs.`","The commit message should be:

Refactor DOMSelector class
-------------------------

* Rename `selectorSpec` field to `selectorExpression` for clarity.
* Add JavaDoc comments to constructor, getter method, and `toString()` method.
* Update exception messages to use `selectorExpression` instead of `selectorSpec`.

Update ChainedFragmentSpec class
-------------------------------

* Add JavaDoc comment to constructor.

Update DOMSelectorFragmentSpec class
------------------------------------

* Add JavaDoc comments to class, constructor, and methods.
* Add `returnOnlyChildren` field and constructor parameter.
* Update `extractFragment` method to handle `returnOnlyChildren` flag.
* Add JavaDoc comment to `DOM_SELECTOR_EXPRESSION_PREFIX` constant.

Update ElementAndAttributeNameFragmentSpec class
------------------------------------------------

* Add JavaDoc comment to class and constructor.
* Update constructor to accept a `returnOnlyChildren` parameter.
* Add `returnOnlyChildren` field.
* Update `extractFragment` method to handle `returnOnlyChildren` flag.",Added thread-safety documentation and enhanced fragment specs in DOMSelector and related classes with detailed Javadocs.
"diff --git a/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java b/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java
index b2883bb6f5..124fe21954 100644
--- a/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java
+++ b/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java
@@ -24,6 +24,9 @@
 package org.hibernate;
 
 import org.hibernate.internal.util.xml.XmlDocument;
+import org.hibernate.metamodel.source.Origin;
+import org.hibernate.metamodel.source.hbm.xml.mapping.HibernateMapping;
+import org.hibernate.metamodel.source.internal.JaxbRoot;
 
 /**
  * Thrown when a mapping is found to be invalid.
@@ -55,7 +58,11 @@ public class InvalidMappingException extends MappingException {
 	public InvalidMappingException(String customMessage, XmlDocument xmlDocument) {
 		this( customMessage, xmlDocument.getOrigin().getType(), xmlDocument.getOrigin().getName() );
 	}
-	
+
+	public InvalidMappingException(String customMessage, Origin origin) {
+		this( customMessage, origin.getType().toString(), origin.getName() );
+	}
+
 	public InvalidMappingException(String type, String path) {
 		this(""Could not parse mapping document from "" + type + (path==null?"""":"" "" + path), type, path);
 	}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java
index ccc20f0070..cee70c8932 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java
@@ -28,18 +28,14 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import org.dom4j.Element;
-
-import org.hibernate.mapping.MetaAttribute;
 import org.hibernate.metamodel.domain.Attribute;
+import org.hibernate.metamodel.domain.MetaAttribute;
 import org.hibernate.metamodel.relational.Column;
 import org.hibernate.metamodel.relational.DerivedValue;
 import org.hibernate.metamodel.relational.SimpleValue;
 import org.hibernate.metamodel.relational.TableSpecification;
 import org.hibernate.metamodel.relational.Tuple;
 import org.hibernate.metamodel.relational.Value;
-import org.hibernate.metamodel.source.hbm.HbmHelper;
-import org.hibernate.metamodel.source.util.DomHelper;
 
 /**
  * TODO : javadoc
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java
index e28613d9ce..266b656052 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java
@@ -25,9 +25,8 @@ package org.hibernate.metamodel.binding;
 
 import java.util.Map;
 
-import org.hibernate.FetchMode;
-import org.hibernate.mapping.MetaAttribute;
 import org.hibernate.metamodel.domain.Attribute;
+import org.hibernate.metamodel.domain.MetaAttribute;
 import org.hibernate.metamodel.relational.SimpleValue;
 import org.hibernate.metamodel.relational.TableSpecification;
 import org.hibernate.metamodel.relational.Value;
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java
index 15e4a992a2..bf84c2fa6b 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java
@@ -25,8 +25,7 @@ package org.hibernate.metamodel.binding;
 
 import org.dom4j.Element;
 
-import org.hibernate.mapping.PropertyGeneration;
-import org.hibernate.mapping.Value;
+import org.hibernate.metamodel.relational.Value;
 import org.hibernate.metamodel.source.hbm.HbmHelper;
 import org.hibernate.metamodel.source.util.DomHelper;
 
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java
index bf59079e58..2fb47e28bc 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java
@@ -29,18 +29,15 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
-import org.dom4j.Attribute;
-import org.dom4j.Element;
-
 import org.hibernate.MappingException;
 import org.hibernate.engine.Versioning;
 import org.hibernate.internal.util.ReflectHelper;
-import org.hibernate.mapping.MetaAttribute;
 import org.hibernate.metamodel.domain.Entity;
+import org.hibernate.metamodel.domain.MetaAttribute;
 import org.hibernate.metamodel.relational.Column;
 import org.hibernate.metamodel.relational.TableSpecification;
 import org.hibernate.metamodel.source.hbm.HbmHelper;
-import org.hibernate.metamodel.source.util.DomHelper;
+import org.hibernate.metamodel.source.util.MappingHelper;
 
 /**
  * TODO : javadoc
@@ -86,21 +83,20 @@ public class EntityBinding {
 	private List<String> synchronizedTableNames;
 
 	// TODO: change to intialize from Doimain
-	public void fromHbmXml(MappingDefaults defaults, Element node, Entity entity) {
+	public void fromHbmXml(MappingDefaults defaults, org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz, Entity entity) {
 		this.entity = entity;
-		metaAttributes = HbmHelper.extractMetas( node, true, defaults.getMappingMetas() );
+		metaAttributes = HbmHelper.extractMetas( entityClazz.getMeta(), true, defaults.getMappingMetas() );
 
 		// go ahead and set the lazy here, since pojo.proxy can override it.
-		lazy = DomHelper.extractBooleanAttributeValue( node, ""lazy"", defaults.isDefaultLazy()  );
-
-		discriminatorValue = DomHelper.extractAttributeValue( node, ""discriminator-value"", entity.getName() );
-		dynamicUpdate = DomHelper.extractBooleanAttributeValue( node, ""dynamic-update"", false );
-		dynamicInsert = DomHelper.extractBooleanAttributeValue( node, ""dynamic-insert"", false );
-		batchSize = DomHelper.extractIntAttributeValue( node, ""batch-size"", 0 );
-		selectBeforeUpdate = DomHelper.extractBooleanAttributeValue( node, ""select-before-update"", false );
+		lazy = MappingHelper.getBooleanValue( entityClazz.getLazy(), defaults.isDefaultLazy() );
+		discriminatorValue = MappingHelper.getStringValue( entityClazz.getDiscriminatorValue(), entity.getName() );
+		dynamicUpdate = MappingHelper.getBooleanValue( entityClazz.getDynamicUpdate(), false );
+		dynamicInsert = MappingHelper.getBooleanValue( entityClazz.getDynamicInsert(), false );
+		batchSize = MappingHelper.getIntValue( entityClazz.getBatchSize(), 0 );
+		selectBeforeUpdate = MappingHelper.getBooleanValue( entityClazz.getSelectBeforeUpdate(), false );
 
 		// OPTIMISTIC LOCK MODE
-		String optimisticLockModeString = DomHelper.extractAttributeValue( node,  ""optimistic-lock"", ""version"" );
+		String optimisticLockModeString = MappingHelper.getStringValue( entityClazz.getOptimisticLock(), ""version"" );
 		if ( ""version"".equals( optimisticLockModeString ) ) {
 			optimisticLockMode = Versioning.OPTIMISTIC_LOCK_VERSION;
 		}
@@ -118,28 +114,51 @@ public class EntityBinding {
 		}
 
 		// PERSISTER
-		Attribute persisterNode = node.attribute( ""persister"" );
-		if ( persisterNode != null ) {
+		if ( entityClazz.getPersister() != null ) {
 			try {
-				entityPersisterClass = ReflectHelper.classForName( persisterNode.getValue() );
+				entityPersisterClass = ReflectHelper.classForName( entityClazz.getPersister() );
 			}
 			catch (ClassNotFoundException cnfe) {
 				throw new MappingException( ""Could not find persister class: ""
-					+ persisterNode.getValue() );
+					+ entityClazz.getPersister() );
 			}
 		}
 
 		// CUSTOM SQL
-		customInsert = HbmHelper.getCustomSql( node.element( ""sql-insert"" ) );
-		customDelete = HbmHelper.getCustomSql( node.element( ""sql-delete"" ) );
-		customUpdate = HbmHelper.getCustomSql( node.element( ""sql-update"" ) );
+		org.hibernate.metamodel.source.hbm.xml.mapping.SqlInsert sqlInsert = entityClazz.getSqlInsert();
+		if ( sqlInsert != null ) {
+			customInsert = HbmHelper.getCustomSql(
+					sqlInsert.getContent(),
+					MappingHelper.getBooleanValue( sqlInsert.getCallable(), false ),
+					sqlInsert.getCheck()
+			);
+		}
 
-		Iterator tables = node.elementIterator( ""synchronize"" );
-		while ( tables.hasNext() ) {
-			addSynchronizedTable( ( ( Element ) tables.next() ).attributeValue( ""table"" ) );
+		org.hibernate.metamodel.source.hbm.xml.mapping.SqlDelete sqlDelete = entityClazz.getSqlDelete();
+		if ( sqlDelete != null ) {
+			customDelete = HbmHelper.getCustomSql(
+					sqlDelete.getContent(),
+					MappingHelper.getBooleanValue( sqlDelete.getCallable(), false ),
+					sqlDelete.getCheck()
+			);
+		}
+
+		org.hibernate.metamodel.source.hbm.xml.mapping.SqlUpdate sqlUpdate = entityClazz.getSqlUpdate();
+		if ( sqlUpdate != null ) {
+			customUpdate = HbmHelper.getCustomSql(
+					sqlUpdate.getContent(),
+					MappingHelper.getBooleanValue( sqlUpdate.getCallable(), false ),
+					sqlUpdate.getCheck()
+			);
+		}
+
+		if ( entityClazz.getSynchronize() != null ) {
+			for ( org.hibernate.metamodel.source.hbm.xml.mapping.Synchronize synchronize : entityClazz.getSynchronize() ) {
+				addSynchronizedTable( synchronize.getTable() );
+			}
 		}
 
-		isAbstract = DomHelper.extractBooleanAttributeValue( node, ""abstract"", false );
+		isAbstract = MappingHelper.getBooleanValue( entityClazz.getAbstract(), false );
 	}
 
 	public Entity getEntity() {
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/FetchProfile.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/FetchProfile.java
new file mode 100644
index 0000000000..1136f2615c
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/FetchProfile.java
@@ -0,0 +1,143 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.binding;
+import java.util.LinkedHashSet;
+
+import org.hibernate.mapping.MetadataSource;
+
+/**
+ * A fetch profile allows a user to dynamically modify the fetching strategy used for particular associations at
+ * runtime, whereas that information was historically only statically defined in the metadata.
+ * <p/>
+ * This class represent the data as it is defined in their metadata.
+ *
+ * @author Steve Ebersole
+ *
+ * @see org.hibernate.engine.profile.FetchProfile
+ */
+public class FetchProfile {
+	private final String name;
+	private final MetadataSource source;
+	private LinkedHashSet<Fetch> fetches = new LinkedHashSet<Fetch>();
+
+	/**
+	 * Create a fetch profile representation.
+	 *
+	 * @param name The name of the fetch profile.
+	 * @param source The source of the fetch profile (where was it defined).
+	 */
+	public FetchProfile(String name, MetadataSource source) {
+		this.name = name;
+		this.source = source;
+	}
+
+	/**
+	 * Retrieve the name of the fetch profile.
+	 *
+	 * @return The profile name
+	 */
+	public String getName() {
+		return name;
+	}
+
+	/**
+	 * Retrieve the fetch profile source.
+	 *
+	 * @return The profile source.
+	 */
+	public MetadataSource getSource() {
+		return source;
+	}
+
+	/**
+	 * Retrieve the fetches associated with this profile
+	 *
+	 * @return The fetches associated with this profile.
+	 */
+	public LinkedHashSet<Fetch> getFetches() {
+		return fetches;
+	}
+
+	/**
+	 * Adds a fetch to this profile.
+	 *
+	 * @param entity The entity which contains the association to be fetched
+	 * @param association The association to fetch
+	 * @param style The style of fetch t apply
+	 */
+	public void addFetch(String entity, String association, String style) {
+		fetches.add( new Fetch( entity, association, style ) );
+	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	public boolean equals(Object o) {
+		if ( this == o ) {
+			return true;
+		}
+		if ( o == null || getClass() != o.getClass() ) {
+			return false;
+		}
+
+		FetchProfile that = (FetchProfile) o;
+
+		return name.equals( that.name );
+	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	public int hashCode() {
+		return name.hashCode();
+	}
+
+
+	/**
+	 * Defines an individual association fetch within the given profile.
+	 */
+	public static class Fetch {
+		private final String entity;
+		private final String association;
+		private final String style;
+
+		public Fetch(String entity, String association, String style) {
+			this.entity = entity;
+			this.association = association;
+			this.style = style;
+		}
+
+		public String getEntity() {
+			return entity;
+		}
+
+		public String getAssociation() {
+			return association;
+		}
+
+		public String getStyle() {
+			return style;
+		}
+	}
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/IdGenerator.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/IdGenerator.java
new file mode 100644
index 0000000000..faeb9ca7ab
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/IdGenerator.java
@@ -0,0 +1,73 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.binding;
+import java.io.Serializable;
+import java.util.Properties;
+
+/**
+ * Identifier generator container,
+ * Useful to keep named generator in annotations
+ *
+ * @author Emmanuel Bernard
+ */
+public class IdGenerator implements Serializable {
+	private String name;
+	private String identifierGeneratorStrategy;
+	private Properties params = new Properties();
+
+
+	/**
+	 * @return identifier generator strategy
+	 */
+	public String getIdentifierGeneratorStrategy() {
+		return identifierGeneratorStrategy;
+	}
+
+	/**
+	 * @return generator name
+	 */
+	public String getName() {
+		return name;
+	}
+
+	/**
+	 * @return generator configuration parameters
+	 */
+	public Properties getParams() {
+		return params;
+	}
+
+	public void setIdentifierGeneratorStrategy(String string) {
+		identifierGeneratorStrategy = string;
+	}
+
+	public void setName(String string) {
+		name = string;
+	}
+
+	public void addParam(String key, String value) {
+		params.setProperty( key, value );
+	}
+
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java
index 6bd331ccd5..db0bb147f6 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java
@@ -26,7 +26,7 @@ package org.hibernate.metamodel.binding;
 import java.util.Map;
 
 import org.hibernate.cfg.NamingStrategy;
-import org.hibernate.mapping.MetaAttribute;
+import org.hibernate.metamodel.domain.MetaAttribute;
 
 /**
  * @author Gail Badner
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java
index 2d1c723e8b..08b28f6113 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java
@@ -156,105 +156,6 @@ public abstract class PluralAttributeBinding extends AbstractAttributeBinding {
 	}
 
 
-	public void fromHbmXml(MappingDefaults defaults, Element element, org.hibernate.metamodel.domain.Attribute attribute) {
-		inverse = DomHelper.extractBooleanAttributeValue( element, ""inverse"", false );
-		mutable = DomHelper.extractBooleanAttributeValue( element, ""mutable"", true );
-		if ( ""subselect"".equals( element.attributeValue(""fetch"") ) ) {
-			subselectLoadable = true;
-			getEntityBinding().setSubselectLoadableCollections( true );
-		}
-		orderBy = DomHelper.extractAttributeValue( element, ""order-by"", null );
-		where = DomHelper.extractAttributeValue( element, ""where"", null );
-		batchSize = DomHelper.extractIntAttributeValue( element, ""batch-size"", 0 );
-		embedded = DomHelper.extractBooleanAttributeValue( element, ""embed-xml"", true );
-		try {
-			collectionPersisterClass = DomHelper.extractClassAttributeValue( element, ""persister"" );
-		}
-		catch (ClassNotFoundException cnfe) {
-			throw new MappingException( ""Could not find collection persister class: ""
-				+ element.attributeValue( ""persister"" ) );
-		}
-
-		//Attribute typeNode = collectionElement.attribute( ""collection-type"" );
-		//if ( typeNode != null ) {
-			// TODO: implement when typedef binding is implemented
-			/*
-			String typeName = typeNode.getValue();
-			TypeDef typeDef = mappings.getTypeDef( typeName );
-			if ( typeDef != null ) {
-				collectionBinding.setTypeName( typeDef.getTypeClass() );
-				collectionBinding.setTypeParameters( typeDef.getParameters() );
-			}
-			else {
-				collectionBinding.setTypeName( typeName );
-			}
-			*/
-		//}
-
-		// SORT
-		// unsorted, natural, comparator.class.name
-		String sortString = DomHelper.extractAttributeValue( element, ""sort"", ""unsorted"" );
-		sorted = ( ! ""unsorted"".equals( sortString ) );
-		if ( sorted && ! ""natural"".equals( sortString ) ) {
-			comparatorClassName = sortString;
-		}
-
-		// ORPHAN DELETE (used for programmer error detection)
-		String cascadeString = DomHelper.extractAttributeValue( element, ""cascade"", ""none""  );
-		orphanDelete = ( cascadeString.indexOf( ""delete-orphan"" ) >= 0 );
-
-		// CUSTOM SQL
-		customSQLInsert = HbmHelper.getCustomSql( element.element( ""sql-insert"" ) );
-		customSQLDelete = HbmHelper.getCustomSql( element.element( ""sql-delete"" ) );
-		customSQLUpdate = HbmHelper.getCustomSql( element.element( ""sql-update"" ) );
-		customSQLDeleteAll = HbmHelper.getCustomSql( element.element( ""sql-delete-all"" ) );
-
-		// TODO: IMPLEMENT
-		//Iterator iter = collectionElement.elementIterator( ""filter"" );
-		//while ( iter.hasNext() ) {
-		//	final Element filter = (Element) iter.next();
-		//	parseFilter( filter, collectionElement, collectionBinding );
-		//}
-
-		Iterator tables = element.elementIterator( ""synchronize"" );
-		while ( tables.hasNext() ) {
-			synchronizedTables.add( ( (Element ) tables.next() ).attributeValue( ""table"" ) );
-		}
-
-		loaderName = DomHelper.extractAttributeValue( element.element( ""loader"" ), ""query-ref"" );
-		referencedPropertyName = element.element( ""key"" ).attributeValue( ""property-ref"" );
-
-		Element cacheElement = element.element( ""cache"" );
-		if ( cacheElement != null ) {
-				cacheConcurrencyStrategy = cacheElement.attributeValue( ""usage"" );
-				cacheRegionName = cacheElement.attributeValue( ""region"" );
-		}
-
-		Attribute fetchNode = element.attribute( ""fetch"" );
-		if ( fetchNode != null ) {
-			fetchMode = ""join"".equals( fetchNode.getValue() ) ? FetchMode.JOIN : FetchMode.SELECT;
-		}
-		else {
-			Attribute jfNode = element.attribute( ""outer-join"" );
-			String jfNodeValue = ( jfNode == null ? ""auto"" : jfNode.getValue() );
-			if ( ""auto"".equals( jfNodeValue ) ) {
-				fetchMode = FetchMode.DEFAULT;
-			}
-			else if ( ""true"".equals( jfNodeValue ) ) {
-				fetchMode = FetchMode.JOIN;
-			}
-			else {
-				fetchMode = FetchMode.SELECT;
-			}
-		}
-
-		String lazyString = DomHelper.extractAttributeValue( element, ""lazy"" );
-		extraLazy = ( ""extra"".equals( lazyString ) );
-		if ( extraLazy && ! isLazy() ) {
-			// explicitly make lazy
-			setLazy( true );
-		}
-	}
 
 	protected boolean isLazyDefault(MappingDefaults defaults) {
 		return defaults.isDefaultLazy();
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java
index a8d269fe0a..3b2cb56130 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java
@@ -69,7 +69,7 @@ public class SimpleAttributeBinding extends SingularAttributeBinding {
 	}
 
 	public static interface TupleRelationalState {
-		LinkedHashSet<SingleValueRelationalState> getSingleValueRelationalStates();
+		Set<SingleValueRelationalState> getSingleValueRelationalStates();
 	}
 
 	private PropertyGeneration generation;
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/TypeDef.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/TypeDef.java
new file mode 100644
index 0000000000..df746ea001
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/TypeDef.java
@@ -0,0 +1,48 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.binding;
+import java.io.Serializable;
+import java.util.Properties;
+
+/**
+ * Placeholder for typedef information
+ */
+public class TypeDef implements Serializable {
+
+	private String typeClass;
+	private Properties parameters;
+
+	public TypeDef(String typeClass, Properties parameters) {
+		this.typeClass = typeClass;
+		this.parameters = parameters;
+	}
+
+	public Properties getParameters() {
+		return parameters;
+	}
+	public String getTypeClass() {
+		return typeClass;
+	}
+
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/domain/MetaAttribute.java b/hibernate-core/src/main/java/org/hibernate/metamodel/domain/MetaAttribute.java
new file mode 100644
index 0000000000..ce4664ec99
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/domain/MetaAttribute.java
@@ -0,0 +1,67 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.domain;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collections;
+
+/**
+ * A meta attribute is a named value or values.
+ * @author Gavin King
+ */
+public class MetaAttribute implements Serializable {
+	private String name;
+	private java.util.List values = new ArrayList();
+
+	public MetaAttribute(String name) {
+		this.name = name;
+	}
+	
+	public String getName() {
+		return name;
+	}	
+
+	public java.util.List getValues() {
+		return Collections.unmodifiableList(values);
+	}
+
+	public void addValue(String value) {
+		values.add(value);
+	}
+
+	public String getValue() {
+		if ( values.size()!=1 ) {
+			throw new IllegalStateException(""no unique value"");
+		}
+		return (String) values.get(0);
+	}
+
+	public boolean isMultiValued() {
+		return values.size()>1;
+	}
+
+	public String toString() {
+		return ""["" + name + ""="" + values + ""]"";
+	}
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AbstractAuxiliaryDatabaseObject.java b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AbstractAuxiliaryDatabaseObject.java
new file mode 100644
index 0000000000..b2b0d350bc
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AbstractAuxiliaryDatabaseObject.java
@@ -0,0 +1,64 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.relational;
+
+import java.util.HashSet;
+
+import org.hibernate.dialect.Dialect;
+import org.hibernate.mapping.AuxiliaryDatabaseObject;
+
+/**
+ * Convenience base class for {@link org.hibernate.mapping.AuxiliaryDatabaseObject}s.
+ * <p/>
+ * This implementation performs dialect scoping checks strictly based on
+ * dialect name comparisons.  Custom implementations might want to do
+ * instanceof-type checks.
+ *
+ * @author Steve Ebersole
+ */
+public abstract class AbstractAuxiliaryDatabaseObject implements AuxiliaryDatabaseObject {
+
+	private final HashSet dialectScopes;
+
+	protected AbstractAuxiliaryDatabaseObject() {
+		this.dialectScopes = new HashSet();
+	}
+
+	protected AbstractAuxiliaryDatabaseObject(HashSet dialectScopes) {
+		this.dialectScopes = dialectScopes;
+	}
+
+	public void addDialectScope(String dialectName) {
+		dialectScopes.add( dialectName );
+	}
+
+	public HashSet getDialectScopes() {
+		return dialectScopes;
+	}
+
+	public boolean appliesToDialect(Dialect dialect) {
+		// empty means no scoping
+		return dialectScopes.isEmpty() || dialectScopes.contains( dialect.getClass().getName() );
+	}
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AuxiliaryDatabaseObject.java b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AuxiliaryDatabaseObject.java
new file mode 100644
index 0000000000..a9e708946f
--- /dev/null
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AuxiliaryDatabaseObject.java
@@ -0,0 +1,54 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2011, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.metamodel.relational;
+
+import java.io.Serializable;
+
+import org.hibernate.dialect.Dialect;
+import org.hibernate.mapping.RelationalModel;
+
+/**
+ * Auxiliary database objects (i.e., triggers, stored procedures, etc) defined
+ * in the mappings.  Allows Hibernate to manage their lifecycle as part of
+ * creating/dropping the schema.
+ *
+ * @author Steve Ebersole
+ */
+public interface AuxiliaryDatabaseObject extends RelationalModel, Serializable {
+	/**
+	 * Add the given dialect name to the scope of dialects to which
+	 * this database object applies.
+	 *
+	 * @param dialectName The name of a dialect.
+	 */
+	void addDialectScope(String dialectName);
+
+	/**
+	 * Does this database object apply to the given dialect?
+	 *
+	 * @param dialect The dialect to check against.
+	 * @return True if this database object does apply to the given dialect.
+	 */
+	boolean appliesToDialect(Dialect dialect);
+}
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java b/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java
index 5ab8ecefa9..da57659982 100644
--- a/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java
+++ b/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java
@@ -23,6 +23,7 @@
  */
 package org.hibernate.metamodel.source.hbm;
 
+import java.sql.ResultSet;
 import java.util.Iterator;
 
 import org.dom4j.Attribute;
@@ -31,6 +32,7 @@ import org.hibernate.EntityMode;
 import org.hibernate.MappingException;
 import org.hibernate.cfg.NamingStrategy;
 import org.hibernate.engine.Versioning;
+import org.hibernate.engine.jdbc.batch.spi.Batch;
 import org.hibernate.internal.util.StringHelper;
 import org.hibernate.metamodel.binding.AttributeBinding;
 import org.hibernate.metamodel.binding.BagBinding;
@@ -39,6 +41,7 @@ import org.hibernate.metamodel.binding.PluralAttributeBinding;
 import org.hibernate.metamodel.binding.SimpleAttributeBinding;
 import org.hibernate.metamodel.domain.Entity;
 import org.hibernate.metamodel.domain.Hierarchical;
+import org.hibernate.metamodel.domain.PluralAttribute;
 import org.hibernate.metamodel.domain.PluralAttributeNature;
 import org.hibernate.metamodel.relational.Schema;
 import org.hibernate.metamodel.relational.Table;
@@ -58,20 +61,17 @@ abstract class AbstractEntityBinder {
 	private final HibernateMappingBinder hibernateMappingBinder;
 	private final Schema.Name schemaName;
 
-	AbstractEntityBinder(HibernateMappingBinder hibernateMappingBinder, Element entityElement) {
+	AbstractEntityBinder(HibernateMappingBinder hibernateMappingBinder,
+						 org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz) {
 		this.hibernateMappingBinder = hibernateMappingBinder;
-
-		final Attribute schemaAttribute = entityElement.attribute( ""schema"" );
-		String schemaName = ( schemaAttribute == null )
-				? hibernateMappingBinder.getDefaultSchemaName()
-				: schemaAttribute.getValue();
-
-		final Attribute catalogAttribute = entityElement.attribute( ""catalog"" );
-		String catalogName = ( catalogAttribute == null )
-				? hibernateMappingBinder.getDefaultCatalogName()
-				: catalogAttribute.getValue();
-
-		this.schemaName = new Schema.Name( schemaName, catalogName );
+		this.schemaName = new Schema.Name(
+				( entityClazz.getSchema() == null ?
+						hibernateMappingBinder.getDefaultSchemaName() :
+						entityClazz.getSchema() ),
+				( entityClazz.getCatalog() == null ?
+						hibernateMappingBinder.getDefaultCatalogName() :
+						entityClazz.getCatalog() )
+		);
 	}
 
 	protected HibernateMappingBinder getHibernateMappingBinder() {
@@ -93,23 +93,24 @@ abstract class AbstractEntityBinder {
 		return getMetadata().getNamingStrategy();
 	}
 
-	protected void basicEntityBinding(Element node, EntityBinding entityBinding, Hierarchical superType) {
+	protected void basicEntityBinding(org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
+									  EntityBinding entityBinding,
+									  Hierarchical superType) {
 		entityBinding.fromHbmXml(
 				hibernateMappingBinder,
-				node,
-				new Entity( hibernateMappingBinder.extractEntityName( node ), superType )
+				entityClazz,
+				new Entity( hibernateMappingBinder.extractEntityName( entityClazz ), superType )
 		);
 		// TODO: move this stuff out
 		// transfer an explicitly defined lazy attribute
-		bindPojoRepresentation( node, entityBinding );
-		bindDom4jRepresentation( node, entityBinding );
-		bindMapRepresentation( node, entityBinding );
+		bindPojoRepresentation( entityClazz, entityBinding );
+		bindDom4jRepresentation( entityClazz, entityBinding );
+		bindMapRepresentation( entityClazz, entityBinding );
 
 		final String entityName = entityBinding.getEntity().getName();
-		Iterator itr = node.elementIterator( ""fetch-profile"" );
-		while ( itr.hasNext() ) {
-			final Element profileElement = ( Element ) itr.next();
-			hibernateMappingBinder.parseFetchProfile( profileElement, entityName );
+
+		if ( entityClazz.getFetchProfile() != null ) {
+			hibernateMappingBinder.parseFetchProfiles( entityClazz.getFetchProfile(), entityName );
 		}
 
 		getMetadata().addImport( entityName, entityName );
@@ -124,9 +125,10 @@ abstract class AbstractEntityBinder {
 		return hibernateMappingBinder.getDefaultAccess();
 	}
 
-	private void bindPojoRepresentation(Element node, EntityBinding entityBinding) {
-		String className = hibernateMappingBinder.getClassName( node.attribute( ""name"" ) );
-		String proxyName = hibernateMappingBinder.getClassName( node.attribute( ""proxy"" ) );
+	private void bindPojoRepresentation(org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
+										EntityBinding entityBinding) {
+		String className = hibernateMappingBinder.getClassName( entityClazz.getName() );
+		String proxyName = hibernateMappingBinder.getClassName( entityClazz.getProxy() );
 
 		entityBinding.getEntity().getPojoEntitySpecifics().setClassName( className );
 
@@ -138,29 +140,31 @@ abstract class AbstractEntityBinder {
 			entityBinding.getEntity().getPojoEntitySpecifics().setProxyInterfaceName( className );
 		}
 
-		Element tuplizer = locateTuplizerDefinition( node, EntityMode.POJO );
+		org.hibernate.metamodel.source.hbm.xml.mapping.Tuplizer tuplizer = locateTuplizerDefinition( entityClazz, EntityMode.POJO );
 		if ( tuplizer != null ) {
-			entityBinding.getEntity().getPojoEntitySpecifics().setTuplizerClassName( tuplizer.attributeValue( ""class"" ) );
+			entityBinding.getEntity().getPojoEntitySpecifics().setTuplizerClassName( tuplizer.getClazz() );
 		}
 	}
 
-	private void bindDom4jRepresentation(Element node, EntityBinding entityBinding) {
-		String nodeName = node.attributeValue( ""node"" );
+	private void bindDom4jRepresentation(org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
+										 EntityBinding entityBinding) {
+		String nodeName = entityClazz.getNode();
 		if ( nodeName == null ) {
 			nodeName = StringHelper.unqualify( entityBinding.getEntity().getName() );
 		}
 		entityBinding.getEntity().getDom4jEntitySpecifics().setNodeName(nodeName);
 
-		Element tuplizer = locateTuplizerDefinition( node, EntityMode.DOM4J );
+		org.hibernate.metamodel.source.hbm.xml.mapping.Tuplizer tuplizer = locateTuplizerDefinition( entityClazz, EntityMode.DOM4J );
 		if ( tuplizer != null ) {
-			entityBinding.getEntity().getDom4jEntitySpecifics().setTuplizerClassName( tuplizer.attributeValue( ""class"" ) );
+			entityBinding.getEntity().getDom4jEntitySpecifics().setTuplizerClassName( tuplizer.getClazz() );
 		}
 	}
 
-	private void bindMapRepresentation(Element node, EntityBinding entityBinding) {
-		Element tuplizer = locateTuplizerDefinition( node, EntityMode.MAP );
+	private void bindMapRepresentation(org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
+									   EntityBinding entityBinding) {
+		org.hibernate.metamodel.source.hbm.xml.mapping.Tuplizer tuplizer = locateTuplizerDefinition( entityClazz, EntityMode.MAP );
 		if ( tuplizer != null ) {
-			entityBinding.getEntity().getMapEntitySpecifics().setTuplizerClassName( tuplizer.attributeValue( ""class"" ) );
+			entityBinding.getEntity().getMapEntitySpecifics().setTuplizerClassName( tuplizer.getClazz() );
 		}
 	}
 
@@ -172,12 +176,11 @@ abstract class AbstractEntityBinder {
 	 *
 	 * @return The tuplizer element, or null.
 	 */
-	private static Element locateTuplizerDefinition(Element container, EntityMode entityMode) {
-		Iterator itr = container.elementIterator( ""tuplizer"" );
-		while( itr.hasNext() ) {
-			final Element tuplizerElem = ( Element ) itr.next();
-			if ( entityMode.toString().equals( tuplizerElem.attributeValue( ""entity-mode"") ) ) {
-				return tuplizerElem;
+	private static org.hibernate.metamodel.source.hbm.xml.mapping.Tuplizer locateTuplizerDefinition(org.hibernate.metamodel.source.hbm.xml.mapping.Class container,
+													EntityMode entityMode) {
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.Tuplizer tuplizer : container.getTuplizer() ) {
+			if ( entityMode.toString().equals( tuplizer.getEntityMode() ) ) {
+				return tuplizer;
 			}
 		}
 		return null;
@@ -206,19 +209,18 @@ abstract class AbstractEntityBinder {
 	}
 
 	protected String getClassTableName(
-			Element entityElement,
+			org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
 			EntityBinding entityBinding,
 			Table denormalizedSuperTable) {
 		final String entityName = entityBinding.getEntity().getName();
-		final Attribute tableNameNode = entityElement.attribute( ""table"" );
 		String logicalTableName;
 		String physicalTableName;
-		if ( tableNameNode == null ) {
+		if ( entityClazz.getTable() == null ) {
 			logicalTableName = StringHelper.unqualify( entityName );
 			physicalTableName = getHibernateXmlBinder().getMetadata().getNamingStrategy().classToTableName( entityName );
 		}
 		else {
-			logicalTableName = tableNameNode.getValue();
+			logicalTableName = entityClazz.getTable();
 			physicalTableName = getHibernateXmlBinder().getMetadata().getNamingStrategy().tableName( logicalTableName );
 		}
 // todo : find out the purpose of these logical bindings
@@ -226,25 +228,26 @@ abstract class AbstractEntityBinder {
 		return physicalTableName;
 	}
 
-	protected void buildAttributeBindings(Element entityElement, EntityBinding entityBinding) {
+	protected void buildAttributeBindings(org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
+										  EntityBinding entityBinding) {
 		// null = UniqueKey (we are not binding a natural-id mapping)
 		// true = mutable, by default properties are mutable
 		// true = nullable, by default properties are nullable.
-		buildAttributeBindings( entityElement, entityBinding, null, true, true );
+		buildAttributeBindings( entityClazz, entityBinding, null, true, true );
 	}
 
 	/**
 	 * This form is essentially used to create natural-id mappings.  But the processing is the same, aside from these
 	 * extra parameterized values, so we encapsulate it here.
 	 *
-	 * @param entityElement
+	 * @param entityClazz
 	 * @param entityBinding
 	 * @param uniqueKey
 	 * @param mutable
 	 * @param nullable
 	 */
 	protected void buildAttributeBindings(
-			Element entityElement,
+			org.hibernate.metamodel.source.hbm.xml.mapping.Class entityClazz,
 			EntityBinding entityBinding,
 			UniqueKey uniqueKey,
 			boolean mutable,
@@ -255,69 +258,68 @@ abstract class AbstractEntityBinder {
 		final TableSpecification tabe = entityBinding.getBaseTable();
 
 		AttributeBinding attributeBinding = null;
-
-		Iterator iter = entityElement.elementIterator();
-		while ( iter.hasNext() ) {
-			final Element subElement = (Element) iter.next();
-			final String subElementName = subElement.getName();
-			final String propertyName = subElement.attributeValue( ""name"" );
-
-			if ( ""bag"".equals( subElementName ) ) {
-				BagBinding bagBinding = entityBinding.makeBagAttributeBinding( propertyName );
-				bindCollection( subElement, bagBinding, entityBinding, PluralAttributeNature.BAG, propertyName );
-				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( bagBinding );
-				attributeBinding = bagBinding;
+		for ( Object attribute : entityClazz.getPropertyOrManyToOneOrOneToOne() ) {
+			if ( org.hibernate.metamodel.source.hbm.xml.mapping.Bag.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.Bag collection = org.hibernate.metamodel.source.hbm.xml.mapping.Bag.class.cast( attribute );
+				BagBinding collectionBinding = entityBinding.makeBagAttributeBinding( collection.getName() );
+				bindBag( collection, collectionBinding, entityBinding );
+				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( collectionBinding );
+				attributeBinding = collectionBinding;
 			}
-			else if ( ""idbag"".equals( subElementName ) ) {
-				BagBinding bagBinding = entityBinding.makeBagAttributeBinding( propertyName );
-				bindCollection( subElement, bagBinding, entityBinding, PluralAttributeNature.BAG, propertyName );
-				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( bagBinding );
-				attributeBinding = bagBinding;
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Idbag.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.Idbag collection = org.hibernate.metamodel.source.hbm.xml.mapping.Idbag.class.cast( attribute );
+				//BagBinding collectionBinding = entityBinding.makeBagAttributeBinding( collection.getName() );
+				//bindIdbag( collection, bagBinding, entityBinding, PluralAttributeNature.BAG, collection.getName() );
 				// todo: handle identifier
+				//attributeBinding = collectionBinding;
+				//hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( attributeBinding );
 			}
-			else if ( ""set"".equals( subElementName ) ) {
-				BagBinding bagBinding = entityBinding.makeBagAttributeBinding( propertyName );
-				bindCollection( subElement, bagBinding, entityBinding, PluralAttributeNature.SET, propertyName );
-				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( bagBinding );
-				attributeBinding = bagBinding;
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Set.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.Set collection = org.hibernate.metamodel.source.hbm.xml.mapping.Set.class.cast( attribute );
+				//BagBinding collectionBinding = entityBinding.makeBagAttributeBinding( collection.getName() );
+				//bindSet( collection, collectionBinding, entityBinding, PluralAttributeNature.SET, collection.getName() );
+				//attributeBinding = collectionBinding;
+				//hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( attributeBinding );
 			}
-			else if ( ""list"".equals( subElementName ) ) {
-				BagBinding bagBinding = entityBinding.makeBagAttributeBinding( propertyName );
-				bindCollection( subElement, bagBinding, entityBinding, PluralAttributeNature.LIST, propertyName );
-				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( bagBinding );
-				attributeBinding = bagBinding;
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.List.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.List collection = org.hibernate.metamodel.source.hbm.xml.mapping.List.class.cast( attribute );
+				//ListBinding collectionBinding = entityBinding.makeBagAttributeBinding( collection.getName() );
+				//bindList( collection, bagBinding, entityBinding, PluralAttributeNature.LIST, collection.getName() );
 				// todo : handle list index
+				//attributeBinding = collectionBinding;
+				//hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( attributeBinding );
 			}
-			else if ( ""map"".equals( subElementName ) ) {
-				BagBinding bagBinding = entityBinding.makeBagAttributeBinding( propertyName );
-				bindCollection( subElement, bagBinding, entityBinding, PluralAttributeNature.MAP, propertyName );
-				hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( bagBinding );
-				attributeBinding = bagBinding;
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Map.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.Map collection = org.hibernate.metamodel.source.hbm.xml.mapping.Map.class.cast( attribute );
+				//BagBinding bagBinding = entityBinding.makeBagAttributeBinding( collection.getName() );
+				//bindMap( collection, bagBinding, entityBinding, PluralAttributeNature.MAP, collection.getName() );
 				// todo : handle map key
+				//hibernateMappingBinder.getHibernateXmlBinder().getMetadata().addCollection( attributeBinding );
 			}
-			else if ( ""many-to-one"".equals( subElementName ) ) {
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.ManyToOne.class.isInstance( attribute ) ) {
 // todo : implement
 //				value = new ManyToOne( mappings, table );
 //				bindManyToOne( subElement, (ManyToOne) value, propertyName, nullable, mappings );
 			}
-			else if ( ""any"".equals( subElementName ) ) {
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Any.class.isInstance( attribute ) ) {
 // todo : implement
 //				value = new Any( mappings, table );
 //				bindAny( subElement, (Any) value, nullable, mappings );
 			}
-			else if ( ""one-to-one"".equals( subElementName ) ) {
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.OneToOne.class.isInstance( attribute ) ) {
 // todo : implement
 //				value = new OneToOne( mappings, table, persistentClass );
 //				bindOneToOne( subElement, (OneToOne) value, propertyName, true, mappings );
 			}
-			else if ( ""property"".equals( subElementName ) ) {
-				SimpleAttributeBinding binding = entityBinding.makeSimpleAttributeBinding( propertyName );
-				bindSimpleAttribute( subElement, binding, entityBinding, propertyName );
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Property.class.isInstance( attribute ) ) {
+				org.hibernate.metamodel.source.hbm.xml.mapping.Property property = org.hibernate.metamodel.source.hbm.xml.mapping.Property.class.cast( attribute );
+				SimpleAttributeBinding binding = entityBinding.makeSimpleAttributeBinding( property.getName() );
+				bindSimpleAttribute( property, binding, entityBinding );
 				attributeBinding = binding;
 			}
-			else if ( ""component"".equals( subElementName )
-					|| ""dynamic-component"".equals( subElementName )
-					|| ""properties"".equals( subElementName ) ) {
+			else if ( org.hibernate.metamodel.source.hbm.xml.mapping.Component.class.isInstance( attribute )
+					|| org.hibernate.metamodel.source.hbm.xml.mapping.DynamicComponent.class.isInstance( attribute )
+					|| org.hibernate.metamodel.source.hbm.xml.mapping.Properties.class.isInstance( attribute ) ) {
 // todo : implement
 //				String subpath = StringHelper.qualify( entityName, propertyName );
 //				value = new Component( mappings, persistentClass );
@@ -335,30 +337,36 @@ abstract class AbstractEntityBinder {
 //						false
 //					);
 			}
-			else if ( ""join"".equals( subElementName ) ) {
+		}
+
+		/*
+Array
+PrimitiveArray
+*/
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.Join join : entityClazz.getJoin() ) {
 // todo : implement
-//				Join join = new Join();
-//				join.setPersistentClass( persistentClass );
-//				bindJoin( subElement, join, mappings, inheritedMetas );
-//				persistentClass.addJoin( join );
-			}
-			else if ( ""subclass"".equals( subElementName ) ) {
+//			Join join = new Join();
+//			join.setPersistentClass( persistentClass );
+//			bindJoin( subElement, join, mappings, inheritedMetas );
+//			persistentClass.addJoin( join );
+		}
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.Subclass subclass : entityClazz.getSubclass() ) {
 // todo : implement
-//				handleSubclass( persistentClass, mappings, subElement, inheritedMetas );
-			}
-			else if ( ""joined-subclass"".equals( subElementName ) ) {
+//			handleSubclass( persistentClass, mappings, subElement, inheritedMetas );
+		}
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.JoinedSubclass subclass : entityClazz.getJoinedSubclass() ) {
 // todo : implement
-//				handleJoinedSubclass( persistentClass, mappings, subElement, inheritedMetas );
-			}
-			else if ( ""union-subclass"".equals( subElementName ) ) {
+//			handleJoinedSubclass( persistentClass, mappings, subElement, inheritedMetas );
+		}
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.UnionSubclass subclass : entityClazz.getUnionSubclass() ) {
 // todo : implement
-//				handleUnionSubclass( persistentClass, mappings, subElement, inheritedMetas );
-			}
-			else if ( ""filter"".equals( subElementName ) ) {
+//			handleUnionSubclass( persistentClass, mappings, subElement, inheritedMetas );
+		}
+		for ( org.hibernate.metamodel.source.hbm.xml.mapping.Filter filter : entityClazz.getFilter() ) {
 // todo : implement
 //				parseFilter( subElement, entityBinding );
-			}
-			else if ( ""natural-id"".equals( subElementName ) ) {
+		}
+		if ( entityClazz.getNaturalId() != null ) {
 // todo : implement
 //				UniqueKey uk = new UniqueKey();
 //				uk.setName(""_UniqueKey"");
@@ -376,20 +384,25 @@ abstract class AbstractEntityBinder {
 //						true
 //					);
 //				table.addUniqueKey(uk);
-			}
-			else if ( ""query"".equals(subElementName) ) {
+		}
+		if ( entityClazz.getQueryOrSqlQuery() != null ) {
+			for ( Object queryOrSqlQuery : entityClazz.getQueryOrSqlQuery() ) {
+				if ( org.hibernate.metamodel.source.hbm.xml.mapping.Query.class.isInstance( queryOrSqlQuery ) ) {
 // todo : implement
 //				bindNamedQuery(subElement, persistentClass.getEntityName(), mappings);
-			}
-			else if ( ""sql-query"".equals(subElementName) ) {
+				}
+				else if ( org.hibernate.metamodel.source.hbm.xml.mapping.SqlQuery.class.isInstance( queryOrSqlQuery ) ) {
 // todo : implement
-//				bindNamedSQLQuery(subElement, persistentClass.getEntityName(), mappings);
+//			bindNamedSQLQuery(subElement, persistentClass.getEntityName(), mappings);
+				}
 			}
-			else if ( ""resultset"".equals(subElementName) ) {
+		}
+		if ( entityClazz.getResultset() != null ) {
+			for ( org.hibernate.metamodel.source.hbm.xml.mapping.Resultset resultSet : entityClazz.getResultset() ) {
 // todo : implement
 //				bindResultSetMappingDefinition( subElement, persistentClass.getEntityName(), mappings );
 			}
-
+		}
 //			if ( value != null ) {
 //				Property property = createProperty( value, propertyName, persistentClass
 //					.getClassName(), subElement, mappings, inheritedMetas );
@@ -399,10 +412,37 @@ abstract class AbstractEntityBinder {
 //				if ( uniqueKey!=null ) uniqueKey.addColumns( property.getColumnIterator() );
 //			}
 
+	}
+
+	protected void bindSimpleAttribute(org.hibernate.metamodel.source.hbm.xml.mapping.Id id,
+									   SimpleAttributeBinding attributeBinding,
+									   EntityBinding entityBinding,
+									   String attributeName) {
+		if ( attributeBinding.getAttribute() == null ) {
+			attributeBinding.initialize(
+					new HbmSimpleAttributeDomainState(
+							hibernateMappingBinder,
+							entityBinding.getEntity().getOrCreateSingularAttribute( attributeName ),
+							entityBinding.getMetaAttributes(),
+							id
+					)
+			);
+		}
+
+		if ( attributeBinding.getValue() == null ) {
+			// relational model has not been bound yet
+			// boolean (true here) indicates that by default column names should be guessed
+			attributeBinding.initializeTupleValue(
+					new HbmSimpleValueRelationalStateContainer(
+							getHibernateMappingBinder(),
+							true,
+							id
+					)
+			);
 		}
 	}
 
-	protected void bindSimpleAttribute(Element propertyElement,
+	protected void bindSimpleAttribute(org.hibernate.metamodel.source.hbm.xml.mapping.Discriminator discriminator,
 									   SimpleAttributeBinding attributeBinding,
 									   EntityBinding entityBinding,
 									   String attributeName) {
@@ -410,8 +450,9 @@ abstract class AbstractEntityBinder {
 			attributeBinding.initialize(
 					new HbmSimpleAttributeDomainState(
 							hibernateMappingBinder,
-							propertyElement,
-							entityBinding.getEntity().getOrCreateSingularAttribute( attributeName )
+							entityBinding.getEntity().getOrCreateSingularAttribute( attributeName ),
+							entityBinding.getMetaAttributes(),
+							discriminator
 					)
 			);
 		}
@@ -422,26 +463,111 @@ abstract class AbstractEntityBinder {
 			attributeBinding.initializeTupleValue(
 					new HbmSimpleValueRelationalStateContainer(
 							getHibernateMappingBinder(),
-							propertyElement,
-							true
+							true,
+							discriminator
 					)
 			);
 		}
 	}
 
-	protected void bindCollection(
-			Element collectionNode,
+	protected void bindSimpleAttribute(org.hibernate.metamodel.source.hbm.xml.mapping.Version version,
+									   SimpleAttributeBinding attributeBinding,
+									   EntityBinding entityBinding,
+									   String attributeName) {
+		if ( attributeBinding.getAttribute() == null ) {
+			attributeBinding.initialize(
+					new HbmSimpleAttributeDomainState(
+							hibernateMappingBinder,
+							entityBinding.getEntity().getOrCreateSingularAttribute( attributeName ),
+							entityBinding.getMetaAttributes(),
+							version
+					)
+			);
+		}
+
+		if ( attributeBinding.getValue() == null ) {
+			//",Migrate processing hbm . xml files to use Jaxb - generated classes,"""Refactor HBM XML binding to use JAXB""","Here are the commit messages for each of the changes:

1. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java b/hibernate-core/src/main/java/org/hibernate/InvalidMappingException.java
...
```
```bash
Added new constructor to InvalidMappingException to support Origin objects
```

2. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AbstractAttributeBinding.java
...
```
```bash
Removed unused imports and updated code to use new classes and methods
```

3. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/AttributeBinding.java
...
```
```bash
Removed unused import and updated code to use new classes and methods
```

4. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/CollectionElement.java
...
```
```bash
Removed unused import and updated code to use new classes and methods
```

5. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/EntityBinding.java
...
```
```bash
Updated EntityBinding to use new classes and methods, removed unused imports and code
```

6. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/FetchProfile.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/FetchProfile.java
...
```
```bash
Added new class FetchProfile to support dynamic modification of fetching strategy
```

7. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/IdGenerator.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/IdGenerator.java
...
```
```bash
Added new class IdGenerator to support identifier generator container
```

8. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/MappingDefaults.java
...
```
```bash
Updated MappingDefaults to use new classes and methods
```

9. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/PluralAttributeBinding.java
...
```
```bash
Removed unused code and updated PluralAttributeBinding to use new classes and methods
```

10. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/SimpleAttributeBinding.java
...
```
```bash
Updated SimpleAttributeBinding to use new classes and methods
```

11. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/binding/TypeDef.java b/hibernate-core/src/main/java/org/hibernate/metamodel/binding/TypeDef.java
...
```
```bash
Added new class TypeDef to support typedef information
```

12. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/domain/MetaAttribute.java b/hibernate-core/src/main/java/org/hibernate/metamodel/domain/MetaAttribute.java
...
```
```bash
Added new class MetaAttribute to support meta attribute
```

13. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AbstractAuxiliaryDatabaseObject.java b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AbstractAuxiliaryDatabaseObject.java
...
```
```bash
Added new class AbstractAuxiliaryDatabaseObject to support auxiliary database objects
```

14. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AuxiliaryDatabaseObject.java b/hibernate-core/src/main/java/org/hibernate/metamodel/relational/AuxiliaryDatabaseObject.java
...
```
```bash
Added new interface AuxiliaryDatabaseObject to support auxiliary database objects
```

15. 
```diff
diff --git a/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java b/hibernate-core/src/main/java/org/hibernate/metamodel/source/hbm/AbstractEntityBinder.java
...
```
```bash
Updated AbstractEntityBinder to use new classes and methods, removed unused imports and code
```","It seems like you have a code diff there, but you didn't provide a commit message or a question.

If you need help with the code, please provide more context or ask a specific question.

If you want to commit this code, you should provide a commit message that summarizes the changes you've made. A good commit message should explain why you made the changes and what they do.

Here's an example of a commit message for this code:

""Refactor AbstractEntityBinder to use org.hibernate.metamodel.source.hbm.xml.mapping.Class instead of org.dom4j.Element and add support for binding simple attributes.""","This change includes importing MetaAttribute, creating classes like FetchProfile, IdGenerator, TypeDef, and AbstractAuxiliaryDatabaseObject, and refactoring XML mapping."
"diff --git a/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java
index 432891622d4..bd1aaba4a46 100644
--- a/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java
+++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java
@@ -48,9 +48,9 @@ import java.util.Set;
 
 import static com.google.common.collect.Maps.newHashMap;
 import static org.elasticsearch.action.ValidateActions.addValidationError;
+import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;
 import static org.elasticsearch.common.settings.ImmutableSettings.readSettingsFromStream;
 import static org.elasticsearch.common.settings.ImmutableSettings.writeSettingsToStream;
-import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;
 
 /**
  * A request to create an index. Best created with {@link org.elasticsearch.client.Requests#createIndexRequest(String)}.
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
index 286641c6648..1e1cc5cb232 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
@@ -167,6 +167,7 @@ public class IndexMetaData {
     public static final String SETTING_UUID = ""index.uuid"";
     public static final String SETTING_LEGACY_ROUTING_HASH_FUNCTION = ""index.legacy.routing.hash.type"";
     public static final String SETTING_LEGACY_ROUTING_USE_TYPE = ""index.legacy.routing.use_type"";
+    public static final String SETTING_DATA_PATH = ""index.data_path"";
     public static final String INDEX_UUID_NA_VALUE = ""_na_"";
 
     // hard-coded hash function as of 2.0
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
index cc89db535fa..4edbe17f16b 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
@@ -26,6 +26,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import org.apache.lucene.util.CollectionUtil;
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.ElasticsearchIllegalArgumentException;
 import org.elasticsearch.Version;
 import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.ActionRunnable;
@@ -57,6 +58,7 @@ import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.env.Environment;
+import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.MapperParsingException;
@@ -64,6 +66,7 @@ import org.elasticsearch.index.mapper.MapperService;
 import org.elasticsearch.index.query.IndexQueryParserService;
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.indices.IndexAlreadyExistsException;
+import org.elasticsearch.indices.IndexCreationException;
 import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.indices.InvalidIndexNameException;
 import org.elasticsearch.river.RiverIndexName;
@@ -101,11 +104,13 @@ public class MetaDataCreateIndexService extends AbstractComponent {
     private final String riverIndexName;
     private final AliasValidator aliasValidator;
     private final IndexTemplateFilter indexTemplateFilter;
+    private final NodeEnvironment nodeEnv;
 
     @Inject
-    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService, IndicesService indicesService,
-                                      AllocationService allocationService, MetaDataService metaDataService, Version version, @RiverIndexName String riverIndexName,
-                                      AliasValidator aliasValidator, Set<IndexTemplateFilter> indexTemplateFilters) {
+    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService,
+                                      IndicesService indicesService, AllocationService allocationService, MetaDataService metaDataService,
+                                      Version version, @RiverIndexName String riverIndexName, AliasValidator aliasValidator,
+                                      Set<IndexTemplateFilter> indexTemplateFilters, NodeEnvironment nodeEnv) {
         super(settings);
         this.environment = environment;
         this.threadPool = threadPool;
@@ -116,6 +121,7 @@ public class MetaDataCreateIndexService extends AbstractComponent {
         this.version = version;
         this.riverIndexName = riverIndexName;
         this.aliasValidator = aliasValidator;
+        this.nodeEnv = nodeEnv;
 
         if (indexTemplateFilters.isEmpty()) {
             this.indexTemplateFilter = DEFAULT_INDEX_TEMPLATE_FILTER;
@@ -554,6 +560,11 @@ public class MetaDataCreateIndexService extends AbstractComponent {
 
     private void validate(CreateIndexClusterStateUpdateRequest request, ClusterState state) throws ElasticsearchException {
         validateIndexName(request.index(), state);
+        String customPath = request.settings().get(IndexMetaData.SETTING_DATA_PATH, null);
+        if (customPath != null && nodeEnv.isCustomPathsEnabled() == false) {
+            throw new IndexCreationException(new Index(request.index()),
+                    new ElasticsearchIllegalArgumentException(""custom data_paths for indices is disabled""));
+        }
     }
 
     private static class DefaultIndexTemplateFilter implements IndexTemplateFilter {
diff --git a/src/main/java/org/elasticsearch/env/NodeEnvironment.java b/src/main/java/org/elasticsearch/env/NodeEnvironment.java
index 237ead4fc56..3697127d85a 100644
--- a/src/main/java/org/elasticsearch/env/NodeEnvironment.java
+++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java
@@ -24,14 +24,19 @@ import com.google.common.collect.Sets;
 import com.google.common.primitives.Ints;
 import org.apache.lucene.store.*;
 import org.apache.lucene.util.IOUtils;
+import org.elasticsearch.ElasticsearchIllegalArgumentException;
 import org.elasticsearch.ElasticsearchIllegalStateException;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.component.AbstractComponent;
 import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.io.FileSystemUtils;
+import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.index.Index;
+import org.elasticsearch.index.settings.IndexSettings;
 import org.elasticsearch.index.shard.ShardId;
 
 import java.io.Closeable;
@@ -52,15 +57,30 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
     /* ${data.paths}/nodes/{node.id}/indices */
     private final Path[] nodeIndicesPaths;
     private final Lock[] locks;
+    private final boolean addNodeId;
 
     private final int localNodeId;
     private final AtomicBoolean closed = new AtomicBoolean(false);
     private final Map<ShardId, InternalShardLock> shardLocks = new HashMap<>();
 
+    private final boolean customPathsEnabled;
+
+    // Setting to automatically append node id to custom data paths
+    public static final String ADD_NODE_ID_TO_CUSTOM_PATH = ""node.add_id_to_custom_path"";
+    // Setting to enable custom index.data_path setting for new indices
+    public static final String SETTING_CUSTOM_DATA_PATH_ENABLED = ""node.enable_custom_paths"";
+
+    public static final String NODES_FOLDER = ""nodes"";
+    public static final String INDICES_FOLDER = ""indices"";
+    public static final String NODE_LOCK_FILENAME = ""node.lock"";
+
     @Inject
     public NodeEnvironment(Settings settings, Environment environment) throws IOException {
         super(settings);
 
+        this.addNodeId = settings.getAsBoolean(ADD_NODE_ID_TO_CUSTOM_PATH, true);
+        this.customPathsEnabled = settings.getAsBoolean(SETTING_CUSTOM_DATA_PATH_ENABLED, false);
+
         if (!DiscoveryNode.nodeRequiresLocalStorage(settings)) {
             nodePaths = null;
             nodeIndicesPaths = null;
@@ -76,14 +96,14 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
         int maxLocalStorageNodes = settings.getAsInt(""node.max_local_storage_nodes"", 50);
         for (int possibleLockId = 0; possibleLockId < maxLocalStorageNodes; possibleLockId++) {
             for (int dirIndex = 0; dirIndex < environment.dataWithClusterFiles().length; dirIndex++) {
-                Path dir = environment.dataWithClusterFiles()[dirIndex].resolve(Paths.get(""nodes"", Integer.toString(possibleLockId)));
+                Path dir = environment.dataWithClusterFiles()[dirIndex].resolve(Paths.get(NODES_FOLDER, Integer.toString(possibleLockId)));
                 if (Files.exists(dir) == false) {
                     Files.createDirectories(dir);
                 }
                 
                 try (Directory luceneDir = FSDirectory.open(dir, NativeFSLockFactory.INSTANCE)) {
                     logger.trace(""obtaining node lock on {} ..."", dir.toAbsolutePath());
-                    Lock tmpLock = luceneDir.makeLock(""node.lock"");
+                    Lock tmpLock = luceneDir.makeLock(NODE_LOCK_FILENAME);
                     boolean obtained = tmpLock.obtain();
                     if (obtained) {
                         locks[dirIndex] = tmpLock;
@@ -117,7 +137,8 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
             }
         }
         if (locks[0] == null) {
-            throw new ElasticsearchIllegalStateException(""Failed to obtain node lock, is the following location writable?: "" + Arrays.toString(environment.dataWithClusterFiles()), lastException);
+            throw new ElasticsearchIllegalStateException(""Failed to obtain node lock, is the following location writable?: ""
+                    + Arrays.toString(environment.dataWithClusterFiles()), lastException);
         }
 
         this.localNodeId = localNodeId;
@@ -131,14 +152,20 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
         if (logger.isTraceEnabled()) {
             StringBuilder sb = new StringBuilder(""node data locations details:\n"");
             for (Path file : nodePaths) {
-                sb.append("" -> "").append(file.toAbsolutePath()).append("", free_space ["").append(new ByteSizeValue(Files.getFileStore(file).getUnallocatedSpace())).append(""], usable_space ["").append(new ByteSizeValue(Files.getFileStore(file).getUsableSpace())).append(""]\n"");
+                sb.append("" -> "")
+                        .append(file.toAbsolutePath())
+                        .append("", free_space ["")
+                        .append(new ByteSizeValue(Files.getFileStore(file).getUnallocatedSpace()))
+                        .append(""], usable_space ["")
+                        .append(new ByteSizeValue(Files.getFileStore(file).getUsableSpace()))
+                        .append(""]\n"");
             }
             logger.trace(sb.toString());
         }
 
         this.nodeIndicesPaths = new Path[nodePaths.length];
         for (int i = 0; i < nodePaths.length; i++) {
-            nodeIndicesPaths[i] = nodePaths[i].resolve(""indices"");
+            nodeIndicesPaths[i] = nodePaths[i].resolve(INDICES_FOLDER);
         }
     }
 
@@ -150,10 +177,20 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
      * @param shardId the id of the shard to delete to delete
      * @throws IOException if an IOException occurs
      */
-    public void deleteShardDirectorySafe(ShardId shardId) throws IOException {
+    public void deleteShardDirectorySafe(ShardId shardId, @IndexSettings Settings indexSettings) throws IOException {
+        // This is to ensure someone doesn't use ImmutableSettings.EMPTY
+        assert indexSettings != ImmutableSettings.EMPTY;
         final Path[] paths = shardPaths(shardId);
+        logger.trace(""deleting shard {} directory, paths: [{}]"", shardId, paths);
         try (Closeable lock = shardLock(shardId)) {
             IOUtils.rm(paths);
+            if (hasCustomDataPath(indexSettings)) {
+                Path customLocation = resolveCustomLocation(indexSettings, shardId);
+                logger.trace(""deleting custom shard {} directory [{}]"", shardId, customLocation);
+                IOUtils.rm(customLocation);
+            }
+            logger.trace(""deleted shard {} directory, paths: [{}]"", shardId, paths);
+            assert FileSystemUtils.exists(paths) == false;
         }
     }
 
@@ -166,21 +203,25 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
      * @param lockTimeoutMS how long to wait for acquiring the indices shard locks
      * @throws Exception if any of the shards data directories can't be locked or deleted
      */
-    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS) throws IOException {
+    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, @IndexSettings Settings indexSettings) throws IOException {
+        // This is to ensure someone doesn't use ImmutableSettings.EMPTY
+        assert indexSettings != ImmutableSettings.EMPTY;
         final List<ShardLock> locks = lockAllForIndex(index, lockTimeoutMS);
         try {
-            final Path[] indexPaths = new Path[nodeIndicesPaths.length];
-            for (int i = 0; i < indexPaths.length; i++) {
-                indexPaths[i] = nodeIndicesPaths[i].resolve(index.name());
-            }
+            final Path[] indexPaths = indexPaths(index);
+            logger.trace(""deleting index {} directory, paths({}): [{}]"", index, indexPaths.length, indexPaths);
             IOUtils.rm(indexPaths);
+            if (hasCustomDataPath(indexSettings)) {
+                Path customLocation = resolveCustomLocation(indexSettings, index.name());
+                logger.trace(""deleting custom index {} directory [{}]"", index, customLocation);
+                IOUtils.rm(customLocation);
+            }
         } finally {
             IOUtils.closeWhileHandlingException(locks);
         }
     }
 
 
-
     /**
      * Tries to lock all local shards for the given index. If any of the shard locks can't be acquired
      * an {@link LockObtainFailedException} is thrown and all previously acquired locks are released.
@@ -192,7 +233,8 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
      */
     public List<ShardLock> lockAllForIndex(Index index, long lockTimeoutMS) throws IOException {
         Set<ShardId> allShardIds = findAllShardIds(index);
-        List<ShardLock> allLocks = new ArrayList<>();
+        logger.trace(""locking all shards for index {} - [{}]"", index, allShardIds);
+        List<ShardLock> allLocks = new ArrayList<>(allShardIds.size());
         boolean success = false;
         long startTime = System.currentTimeMillis();
         try {
@@ -203,6 +245,7 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
             success = true;
         } finally {
             if (success == false) {
+                logger.trace(""unable to lock all shards for index {}"", index);
                 IOUtils.closeWhileHandlingException(allLocks);
             }
         }
@@ -236,6 +279,7 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
      * @throws IOException if an IOException occurs.
      */
     public ShardLock shardLock(final ShardId id, long lockTimeoutMS) throws IOException {
+        logger.trace(""acquiring node shardlock on [{}], timeout [{}]"", id, lockTimeoutMS);
         final InternalShardLock shardLock;
         final boolean acquired;
         synchronized (shardLocks) {
@@ -260,10 +304,12 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
                 }
             }
         }
+        logger.trace(""successfully acquired shardlock for [{}]"", id);
         return new ShardLock(id) { // new instance prevents double closing
             @Override
             protected void closeInternal() {
                 shardLock.release();
+                logger.trace(""released shard lock for [{}]"", id);
             }
         };
     }
@@ -309,7 +355,10 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
         private void decWaitCount() {
             synchronized (shardLocks) {
                 assert waitCount > 0 : ""waitCount is "" + waitCount + "" but should be > 0"";
-                if (--waitCount == 0) {
+                --waitCount;
+                logger.trace(""shard lock wait count for [{}] is now [{}]"", shardId, waitCount);
+                if (waitCount == 0) {
+                    logger.trace(""last shard lock wait decremented, removing lock for [{}]"", shardId);
                     InternalShardLock remove = shardLocks.remove(shardId);
                     assert remove != null : ""Removed lock was null"";
                 }
@@ -349,7 +398,7 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
     }
 
     /**
-     * Returns all data paths for the given index.
+     * Returns all data paths excluding custom index paths.
      */
     public Path[] indexPaths(Index index) {
         assert assertEnvIsLocked();
@@ -361,14 +410,30 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
     }
 
     /**
-     * Returns all data paths for the given shards ID
+     * Returns all paths where lucene data will be stored, if a index.data_path
+     * setting is present, will return the custom data path to be used
+     */
+    public Path[] shardDataPaths(ShardId shardId, @IndexSettings Settings indexSettings) {
+        assert indexSettings != ImmutableSettings.EMPTY;
+        assert assertEnvIsLocked();
+        if (hasCustomDataPath(indexSettings)) {
+            return new Path[] {resolveCustomLocation(indexSettings, shardId)};
+        } else {
+            return shardPaths(shardId);
+        }
+    }
+
+    /**
+     * Returns all shard paths excluding custom shard path
      */
     public Path[] shardPaths(ShardId shardId) {
         assert assertEnvIsLocked();
         final Path[] nodePaths = nodeDataPaths();
         final Path[] shardLocations = new Path[nodePaths.length];
         for (int i = 0; i < nodePaths.length; i++) {
-            shardLocations[i] = nodePaths[i].resolve(Paths.get(""indices"", shardId.index().name(), Integer.toString(shardId.id())));
+            shardLocations[i] = nodePaths[i].resolve(Paths.get(INDICES_FOLDER,
+                    shardId.index().name(),
+                    Integer.toString(shardId.id())));
         }
         return shardLocations;
     }
@@ -395,14 +460,14 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
     }
 
     /**
-     * Tries to find all allocated shards for the given index or for all indices iff the given index is <code>null</code>
+     * Tries to find all allocated shards for the given index or for all indices iff the given index is {@code null}
      * on the current node. NOTE: This methods is prone to race-conditions on the filesystem layer since it might not
      * see directories created concurrently or while it's traversing.
-     * @param index the index to filter shards for or <code>null</code> if all shards for all indices should be listed
+     * @param index the index to filter shards for or {@code null} if all shards for all indices should be listed
      * @return a set of shard IDs
      * @throws IOException if an IOException occurs
      */
-    public Set<ShardId> findAllShardIds(@Nullable final Index index) throws IOException {
+    public Set<ShardId> findAllShardIds(final Index index) throws IOException {
         if (nodePaths == null || locks == null) {
             throw new ElasticsearchIllegalStateException(""node is not configured to store local location"");
         }
@@ -435,7 +500,8 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
                     if (Files.exists(shardPath) && Files.isDirectory(shardPath)) {
                         Integer shardId = Ints.tryParse(shardPath.getFileName().toString());
                         if (shardId != null) {
-                            shardIds.add(new ShardId(currentIndex, shardId));
+                            ShardId id = new ShardId(currentIndex, shardId);
+                            shardIds.add(id);
                         }
                     }
                 }
@@ -500,7 +566,9 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
             try {
                 Files.move(src, target, StandardCopyOption.ATOMIC_MOVE);
             } catch (AtomicMoveNotSupportedException ex) {
-                throw new ElasticsearchIllegalStateException(""atomic_move is not supported by the filesystem on path ["" + directory + ""] atomic_move is required for elasticsearch to work correctly."", ex);
+                throw new ElasticsearchIllegalStateException(""atomic_move is not supported by the filesystem on path [""
+                        + directory
+                        + ""] atomic_move is required for elasticsearch to work correctly."", ex);
             } finally {
                 Files.deleteIfExists(src);
                 Files.deleteIfExists(target);
@@ -512,4 +580,63 @@ public class NodeEnvironment extends AbstractComponent implements Closeable{
         return settings;
     }
 
+    /** return true if custom",Add index . data_path setting .,"""Add support for custom index data paths""","""Add custom data path support for indices and shards""","""Add support for custom index data paths""

The changes in the code add the following functionalities:

1. In `CreateIndexRequest.java`, the static import of `EMPTY_SETTINGS` from `ImmutableSettings.Builder` is added.
2. In `IndexMetaData.java`, a new static final string `SETTING_DATA_PATH` is added.
3. In `MetaDataCreateIndexService.java`, a new `NodeEnvironment` object is injected into the constructor, and a new method `validate` is added. The `validate` method checks if the custom index data path is enabled, and if not, it throws an `IndexCreationException` with an `ElasticsearchIllegalArgumentException` as the cause.
4. In `NodeEnvironment.java`, a new boolean `customPathsEnabled` is added, and it is set to the value of the `node.enable_custom_paths` setting.

These changes suggest that the code now supports custom data paths for indices, and it will throw an exception if the setting for custom data paths is not enabled. The `NodeEnvironment` object is used to check if custom data paths are enabled, and the `validate` method in `MetaDataCreateIndexService` is used to throw an exception if the setting is not enabled.","""Added custom data path support and comprehensive path management in NodeEnvironment and MetaDataCreateIndexService""."
"diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/BoundToNode.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/BoundToNode.java
index 77bfb733ec..bdccb0c02e 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/BoundToNode.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/BoundToNode.java
@@ -5,7 +5,9 @@
 
 package net.sourceforge.pmd.lang.java.symbols;
 
-import net.sourceforge.pmd.lang.ast.Node;
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+import net.sourceforge.pmd.lang.java.ast.JavaNode;
 
 
 /**
@@ -16,6 +18,11 @@ import net.sourceforge.pmd.lang.ast.Node;
  *
  * @since 7.0.0
  */
-interface BoundToNode<N extends Node> extends JElementSymbol {
+interface BoundToNode<N extends JavaNode> extends JElementSymbol {
+
 
+    @Override
+    default @Nullable N tryGetNode() {
+        return null;
+    }
 }
diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JElementSymbol.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JElementSymbol.java
index e92493b762..58d1ff627b 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JElementSymbol.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/JElementSymbol.java
@@ -5,8 +5,12 @@
 
 package net.sourceforge.pmd.lang.java.symbols;
 
+import org.checkerframework.checker.nullness.qual.Nullable;
+
 import net.sourceforge.pmd.annotation.Experimental;
 import net.sourceforge.pmd.annotation.InternalApi;
+import net.sourceforge.pmd.lang.java.ast.ASTMethodDeclaration;
+import net.sourceforge.pmd.lang.java.ast.JavaNode;
 import net.sourceforge.pmd.lang.java.types.TypeSystem;
 
 
@@ -40,6 +44,15 @@ public interface JElementSymbol {
      */
     TypeSystem getTypeSystem();
 
+    /**
+     * Returns the node that declares this symbol. Eg for {@link JMethodSymbol},
+     * it's an {@link ASTMethodDeclaration}. Will only return non-null
+     * if the symbol is declared in the file currently being analysed.
+     */
+    default @Nullable JavaNode tryGetNode() {
+        return null;
+    }
+
     /**
      * Two symbols representing the same program element should be equal.
      * So eg two {@link JClassSymbol}, even if their implementation class
diff --git a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/internal/ast/AbstractAstBackedSymbol.java b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/internal/ast/AbstractAstBackedSymbol.java
index d4b1d07133..eb971226b6 100644
--- a/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/internal/ast/AbstractAstBackedSymbol.java
+++ b/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/symbols/internal/ast/AbstractAstBackedSymbol.java
@@ -4,6 +4,8 @@
 
 package net.sourceforge.pmd.lang.java.symbols.internal.ast;
 
+import org.checkerframework.checker.nullness.qual.NonNull;
+
 import net.sourceforge.pmd.lang.java.ast.InternalApiBridge;
 import net.sourceforge.pmd.lang.java.ast.SymbolDeclaratorNode;
 import net.sourceforge.pmd.lang.java.symbols.JElementSymbol;
@@ -30,6 +32,10 @@ abstract class AbstractAstBackedSymbol<T extends SymbolDeclaratorNode> implement
         return node.getTypeSystem();
     }
 
+    @Override
+    public @NonNull T tryGetNode() {
+        return node;
+    }
 
     @Override
     public String toString() {",Add back access to backing node to symbol table .,"""Introduce tryGetNode() method to JElementSymbol and BoundToNode interfaces""

This commit message accurately reflects the changes made in the diff, which is the introduction of the `tryGetNode()` method to the `JElementSymbol` and `BoundToNode` interfaces.","""Update BoundToNode and JElementSymbol to use JavaNode instead of Node and add tryGetNode() method""","""Update BoundToNode and JElementSymbol interfaces and implement tryGetNode in AbstractAstBackedSymbol""

Explanation:

* In BoundToNode.java, the interface's generic type has been changed from `N extends Node` to `N extends JavaNode`. Additionally, a new default method `tryGetNode()` has been added, which returns null.
* In JElementSymbol.java, a new default method `tryGetNode()` has been added, which returns null.
* In AbstractAstBackedSymbol.java, the `tryGetNode()` method has been implemented to return the `node` field.

This commit seems to be refactoring the symbol resolution API, specifically around how symbols are bound to AST nodes. The new `tryGetNode()` method allows callers to attempt to retrieve the node associated with a symbol, if one exists. The implementation in `AbstractAstBackedSymbol` returns the node field, which is guaranteed to be non-null according to the `@NonNull` annotation.","Added functionality to JElementSymbol for retrieving the JavaNode that declares the symbol, with optional null handling."
"diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
index ade09b8e0..ab432999c 100644
--- a/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
@@ -131,11 +131,11 @@ public interface ApplicationConfig {
     /**
      * A request attribute used to tell {@link AsyncSupport} implementation to keep alive the connection or not. Default is to delegate the talk to the underlying WebServer.
      */
-    String RESUME_AND_KEEPALIVE = AtmosphereServlet.class.getName() + "".resumeAndKeepAlive"";
+    String RESUME_AND_KEEPALIVE = ""org.atmosphere.cpr.AtmosphereServlet.resumeAndKeepAlive"";
     /**
      * A request attribute telling a {@link AsyncSupport} if the AtmosphereResource was resumed on timeout or by an application. This attribute is for WebServer that doesn't support times out (like Jetty 6)
      */
-    String RESUMED_ON_TIMEOUT = AtmosphereServlet.class.getName() + "".resumedOnTimeout"";
+    String RESUMED_ON_TIMEOUT = ""org.atmosphere.cpr.AtmosphereServlet.resumedOnTimeout"";
     /**
      * Disable invoking {@link org.atmosphere.cpr.AtmosphereHandler#onStateChange(org.atmosphere.cpr.AtmosphereResourceEvent)} when the connection times out or get cancelled
      */",Remove dependencies on Servlet,"""Update ApplicationConfig constants to use explicit class names instead of AtmosphereServlet.class.getName()""","""Update request attribute names in ApplicationConfig to use fully qualified class names.""","""Update request attribute names in ApplicationConfig interface""

Explanation: The diff shows that the names of two request attributes in the ApplicationConfig interface have been updated. The new names are more fully qualified, including the package name ""org.atmosphere.cpr"" before the class name ""AtmosphereServlet"". This change might be necessary to avoid naming conflicts or to improve code readability and maintainability.",Update string constants in ApplicationConfig.java to avoid using AtmosphereServlet.class.getName() method.
"diff --git a/src/main/java/bisq/desktop/main/MainView.java b/src/main/java/bisq/desktop/main/MainView.java
index b50de56dd9..386fa19e8f 100644
--- a/src/main/java/bisq/desktop/main/MainView.java
+++ b/src/main/java/bisq/desktop/main/MainView.java
@@ -47,7 +47,6 @@ import bisq.core.locale.Res;
 
 import bisq.common.Timer;
 import bisq.common.UserThread;
-import bisq.common.app.DevEnv;
 import bisq.common.app.Version;
 import bisq.common.util.Tuple2;
 import bisq.common.util.Utilities;
@@ -103,26 +102,22 @@ public class MainView extends InitializableView<StackPane, MainViewModel> {
 
     @SuppressWarnings(""PointlessBooleanExpression"")
     public static void blur() {
-        if (!DevEnv.STRESS_TEST_MODE)
-            transitions.blur(MainView.rootContainer);
+        transitions.blur(MainView.rootContainer);
     }
 
     @SuppressWarnings(""PointlessBooleanExpression"")
     public static void blurLight() {
-        if (!DevEnv.STRESS_TEST_MODE)
-            transitions.blur(MainView.rootContainer, Transitions.DEFAULT_DURATION, -0.1, false, 5);
+        transitions.blur(MainView.rootContainer, Transitions.DEFAULT_DURATION, -0.1, false, 5);
     }
 
     @SuppressWarnings(""PointlessBooleanExpression"")
     public static void blurUltraLight() {
-        if (!DevEnv.STRESS_TEST_MODE)
-            transitions.blur(MainView.rootContainer, Transitions.DEFAULT_DURATION, -0.1, false, 2);
+        transitions.blur(MainView.rootContainer, Transitions.DEFAULT_DURATION, -0.1, false, 2);
     }
 
     @SuppressWarnings(""PointlessBooleanExpression"")
     public static void darken() {
-        if (!DevEnv.STRESS_TEST_MODE)
-            transitions.darken(MainView.rootContainer, Transitions.DEFAULT_DURATION, false);
+        transitions.darken(MainView.rootContainer, Transitions.DEFAULT_DURATION, false);
     }
 
     public static void removeEffect() {
diff --git a/src/main/java/bisq/desktop/main/MainViewModel.java b/src/main/java/bisq/desktop/main/MainViewModel.java
index 29b157c49e..6c43fd513f 100644
--- a/src/main/java/bisq/desktop/main/MainViewModel.java
+++ b/src/main/java/bisq/desktop/main/MainViewModel.java
@@ -181,7 +181,7 @@ public class MainViewModel implements ViewModel {
     // BTC network
     final StringProperty btcInfo = new SimpleStringProperty(Res.get(""mainView.footer.btcInfo.initializing""));
     @SuppressWarnings(""ConstantConditions"")
-    final DoubleProperty btcSyncProgress = new SimpleDoubleProperty(DevEnv.STRESS_TEST_MODE ? 0 : -1);
+    final DoubleProperty btcSyncProgress = new SimpleDoubleProperty(-1);
     final StringProperty walletServiceErrorMsg = new SimpleStringProperty();
     final StringProperty btcSplashSyncIconId = new SimpleStringProperty();
     private final StringProperty marketPriceCurrencyCode = new SimpleStringProperty("""");
diff --git a/src/main/java/bisq/desktop/main/offer/offerbook/OfferBook.java b/src/main/java/bisq/desktop/main/offer/offerbook/OfferBook.java
index 1aa16f3f27..d975419359 100644
--- a/src/main/java/bisq/desktop/main/offer/offerbook/OfferBook.java
+++ b/src/main/java/bisq/desktop/main/offer/offerbook/OfferBook.java
@@ -21,8 +21,6 @@ import bisq.core.offer.Offer;
 import bisq.core.offer.OfferBookService;
 import bisq.core.trade.TradeManager;
 
-import bisq.common.app.Log;
-
 import javax.inject.Inject;
 
 import javafx.collections.FXCollections;
@@ -81,7 +79,6 @@ public class OfferBook {
                     }
 
                     offerBookListItems.add(offerBookListItem);
-                    Log.logIfStressTests(""OfferPayload added: No. of offers = "" + offerBookListItems.size());
                 } else {
                     log.debug(""We have the exact same offer already in our list and ignore the onAdded call. ID={}"", offer.getId());
                 }
@@ -98,10 +95,7 @@ public class OfferBook {
                 Optional<OfferBookListItem> candidateToRemove = offerBookListItems.stream()
                         .filter(item -> item.getOffer().getId().equals(offer.getId()))
                         .findAny();
-                if (candidateToRemove.isPresent()) {
-                    offerBookListItems.remove(candidateToRemove.get());
-                    Log.logIfStressTests(""OfferPayload removed: No. of offers = "" + offerBookListItems.size());
-                }
+                candidateToRemove.ifPresent(offerBookListItems::remove);
             }
         });
     }
@@ -119,8 +113,6 @@ public class OfferBook {
                     .map(OfferBookListItem::new)
                     .collect(Collectors.toList()));
 
-            Log.logIfStressTests(""OfferPayload filled: No. of offers = "" + offerBookListItems.size());
-
             log.debug(""offerBookListItems.size "" + offerBookListItems.size());
             fillOfferCountMaps();
         } catch (Throwable t) {",Remove STRESS_TEST_MODE flag,"""Remove DevEnv.STRESS_TEST_MODE checks and related logging""","""Remove DevEnv.STRESS_TEST_MODE checks and related logging""","""Remove DevEnv checks and logging in MainView, MainViewModel, and OfferBook""

This commit removes several checks for the `DevEnv.STRESS_TEST_MODE` flag and some logging statements in the `MainView`, `MainViewModel`, and `OfferBook` classes.

In `MainView`, the checks before calling `transitions.blur`, `transitions.blurLight`, `transitions.blurUltraLight`, `transitions.darken` are removed.

In `MainViewModel`, the initialization of `btcSyncProgress` is modified to always set it to `-1`.

In `OfferBook`, several logging statements are removed, including those inside a lambda function and a conditional statement.","Remove DevEnv.STRESS_TEST_MODE checks and related log calls to simplify MainView, MainViewModel, and OfferBook."
"diff --git a/document/src/main/java/com/yahoo/document/select/rule/AttributeNode.java b/document/src/main/java/com/yahoo/document/select/rule/AttributeNode.java
index 0cedda7c4f0..9e2759e1590 100644
--- a/document/src/main/java/com/yahoo/document/select/rule/AttributeNode.java
+++ b/document/src/main/java/com/yahoo/document/select/rule/AttributeNode.java
@@ -7,6 +7,7 @@ import com.yahoo.document.Document;
 import com.yahoo.document.DocumentGet;
 import com.yahoo.document.DocumentPut;
 import com.yahoo.document.DocumentRemove;
+import com.yahoo.document.DocumentType;
 import com.yahoo.document.DocumentUpdate;
 import com.yahoo.document.FieldPath;
 import com.yahoo.document.datatypes.FieldPathIteratorHandler;
@@ -131,10 +132,37 @@ public class AttributeNode implements ExpressionNode {
         throw new IllegalStateException(""Function '"" + function + ""' is not supported."");
     }
 
-    private static Object evaluateFieldPath(String fieldPth, Object value) {
+    private static boolean looksLikeComplexFieldPath(String path) {
+        for (int i = 0; i < path.length(); ++i) {
+            switch (path.charAt(i)) {
+                case '.':
+                case '{':
+                case '[':
+                    return true;
+            }
+        }
+        return false;
+    }
+
+    private static boolean isSimpleImportedField(String path, DocumentType documentType) {
+        if (looksLikeComplexFieldPath(path)) {
+            return false;
+        }
+        return documentType.hasImportedField(path);
+    }
+
+    private static Object evaluateFieldPath(String fieldPathStr, Object value) {
         if (value instanceof DocumentPut) {
             final Document doc = ((DocumentPut) value).getDocument();
-            FieldPath fieldPath = doc.getDataType().buildFieldPath(fieldPth);
+            if (isSimpleImportedField(fieldPathStr, doc.getDataType())) {
+                // Imported fields can only be meaningfully evaluated in the backend, so we
+                // explicitly treat them as if they are valid fields with missing values. This
+                // will be treated the same as if it's a normal field by the selection operators.
+                // This avoids any awkward interaction with Invalid values or having to
+                // augment the FieldPath code with knowledge of imported fields.
+                return null;
+            }
+            FieldPath fieldPath = doc.getDataType().buildFieldPath(fieldPathStr);
             IteratorHandler handler = new IteratorHandler();
             doc.iterateNested(fieldPath, 0, handler);
             if (handler.values.isEmpty()) {
diff --git a/document/src/test/java/com/yahoo/document/select/DocumentSelectorTestCase.java b/document/src/test/java/com/yahoo/document/select/DocumentSelectorTestCase.java
index 0ff0bd81d90..05cfbc301cc 100644
--- a/document/src/test/java/com/yahoo/document/select/DocumentSelectorTestCase.java
+++ b/document/src/test/java/com/yahoo/document/select/DocumentSelectorTestCase.java
@@ -8,10 +8,13 @@ import com.yahoo.document.select.parser.ParseException;
 import com.yahoo.document.select.parser.TokenMgrException;
 import com.yahoo.yolean.Exceptions;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 
@@ -26,11 +29,15 @@ import static org.junit.Assert.fail;
  */
 public class DocumentSelectorTestCase {
 
+    @Rule
+    public final ExpectedException exceptionRule = ExpectedException.none();
+
     private static DocumentTypeManager manager = new DocumentTypeManager();
 
     @Before
     public void setUp() {
-        DocumentType type = new DocumentType(""test"");
+        var importedFields = new HashSet<>(List.of(""my_imported_field""));
+        DocumentType type = new DocumentType(""test"", importedFields);
         type.addHeaderField(""hint"", DataType.INT);
         type.addHeaderField(""hfloat"", DataType.FLOAT);
         type.addHeaderField(""hstring"", DataType.STRING);
@@ -696,6 +703,27 @@ public class DocumentSelectorTestCase {
         assertEquals(Result.FALSE, evaluate(""test.structarrmap{$x}.key == 17 AND test.stringweightedset{$x}"", documents.get(1)));
     }
 
+    @Test
+    public void imported_field_references_are_treated_as_valid_field_with_missing_value() throws ParseException {
+        var documents = createDocs();
+        assertEquals(Result.TRUE, evaluate(""test.my_imported_field == null"", documents.get(0)));
+        assertEquals(Result.FALSE, evaluate(""test.my_imported_field != null"", documents.get(0)));
+        assertEquals(Result.FALSE, evaluate(""test.my_imported_field"", documents.get(0)));
+        // Only (in)equality operators are well defined for null values; everything else becomes Invalid.
+        assertEquals(Result.INVALID, evaluate(""test.my_imported_field > 0"", documents.get(0)));
+    }
+
+    @Test
+    public void imported_fields_only_supported_for_simple_expressions() throws ParseException {
+        exceptionRule.expect(IllegalArgumentException.class);
+        // TODO we should probably handle this case specially and give a better exception message
+        exceptionRule.expectMessage(""Field 'my_imported_field' not found in type datatype test"");
+
+        var documents = createDocs();
+        // Nested field access is NOT considered a simple expression.
+        evaluate(""test.my_imported_field.foo"", documents.get(0));
+    }
+
     @Test
     public void testTicket1769674() {
         assertParseError(""music.uri=\""junk"",",Detect and handle simple imported fields in expressions ( Java ),"""Handle imported fields in attribute node evaluation""","Here's a possible commit message based on the provided diff:

""Improved handling of imported fields in AttributeNode and DocumentSelectorTestCase

Added support for imported fields in AttributeNode, treating them as valid fields with missing values when evaluating expressions. Also added test cases to verify this behavior in DocumentSelectorTestCase.""","This commit appears to add support for handling imported fields in the `AttributeNode` class of the `document` module.

Imported fields are fields in a document that are not physically stored in the document, but are imported from another source at query time. The changes in this commit ensure that these fields are treated as valid fields with missing values during selection, which avoids any awkward interaction with Invalid values or having to augment the FieldPath code with knowledge of imported fields.

The commit also includes new test cases to verify the behavior of imported fields in various scenarios.

Here is a suggested commit message:

""Add support for handling imported fields in AttributeNode

This commit adds a new method `isSimpleImportedField` to check if a field path refers to a simple imported field. If it does, the method `evaluateFieldPath` treats it as a valid field with a missing value. This ensures that imported fields are handled correctly during selection.

The commit also includes new test cases to verify the behavior of imported fields in various scenarios.

Changes:
- Add `isSimpleImportedField` method to check if a field path refers to a simple imported field.
- Update `evaluateFieldPath` to treat imported fields as valid fields with missing values.
- Add test cases for imported fields in `DocumentSelectorTestCase`.""",The commit introduces support for evaluating simple imported fields as valid fields with missing values in DocumentSelector.
"diff --git a/src/com/google/javascript/jscomp/CoalesceVariableNames.java b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
index e6062d632..970af51dd 100644
--- a/src/com/google/javascript/jscomp/CoalesceVariableNames.java
+++ b/src/com/google/javascript/jscomp/CoalesceVariableNames.java
@@ -75,6 +75,9 @@ class CoalesceVariableNames extends AbstractPostOrderCallback implements
    * to foo, rename both variable to foo_bar.
    */
   CoalesceVariableNames(AbstractCompiler compiler, boolean usePseudoNames) {
+    // The code is normalized at this point in the compilation process, however as a result of this
+    // pass, the code becomes unnormalized (since we are reusing variable names) and so we want to
+    // unconditionally mark the code as unnormalized. We mark unnormalized right before this pass.
     checkState(!compiler.getLifeCycleStage().isNormalized());
 
     this.compiler = compiler;",Clarifying comment to coalesce variable names normalization precheck .,"""Mark code as unnormalized before CoalesceVariableNames pass""","""Mark code as unnormalized before CoalesceVariableNames pass""

This commit message accurately reflects the change made in the code, which is to unconditionally mark the code as unnormalized before the CoalesceVariableNames pass.","""Add comment explaining why code is marked as unnormalized before CoalesceVariableNames pass""

Explanation: The added comment explains that the code becomes unnormalized as a result of the CoalesceVariableNames pass, which reuses variable names, and that's why it's marked as unnormalized right before this pass. This information is important for understanding the reasoning behind marking the code as unnormalized.",Mark code as unnormalized before reusing variable names.
"diff --git a/escheduler-common/src/main/java/cn/escheduler/common/queue/TaskQueueZkImpl.java b/escheduler-common/src/main/java/cn/escheduler/common/queue/TaskQueueZkImpl.java
index 88915b97c..2c2e3ef4d 100644
--- a/escheduler-common/src/main/java/cn/escheduler/common/queue/TaskQueueZkImpl.java
+++ b/escheduler-common/src/main/java/cn/escheduler/common/queue/TaskQueueZkImpl.java
@@ -210,7 +210,12 @@ public class TaskQueueZkImpl extends AbstractZKClient implements ITaskQueue {
         while(iterator.hasNext()){
             if(j++ < tasksNum){
                 String task = iterator.next();
-                taskslist.add(task);
+                String[] taskArray = task.split(Constants.UNDERLINE);
+                int processInstanceId = Integer.parseInt(taskArray[1]);
+                int taskId = Integer.parseInt(taskArray[3]);
+                String destTask = taskArray[0]+Constants.UNDERLINE + processInstanceId + Constants.UNDERLINE
+                        + taskArray[2] + Constants.UNDERLINE + taskId;
+     ",update task queue format,"""Refactor TaskQueueZkImpl to reformat task strings before adding to tasks list""","""Enhance task processing in TaskQueueZkImpl by parsing task strings into process instance ID and task ID for destination task construction.""","""Refactor TaskQueueZkImpl to parse task string and form new task string""

Explanation: The code change is modifying the way tasks are added to the taskslist in the TaskQueueZkImpl class. Instead of directly adding the task string to the list, it is now being parsed and a new task string is formed before adding it to the list. This change involves splitting the task string using the UNDERLINE delimiter, extracting specific parts, and then joining them again to form the new task string. The new task string includes the same parts as the original but with a different arrangement. This refactoring can improve the readability and maintainability of the code, and it also ensures that the tasks in the list have the desired format.",Fix task formatting by updating task string composition in TaskQueueZkImpl.
"diff --git a/sdks/python/generate_pydoc.sh b/sdks/python/generate_pydoc.sh
index 6039942e7e..1fea6f12a1 100755
--- a/sdks/python/generate_pydoc.sh
+++ b/sdks/python/generate_pydoc.sh
@@ -31,21 +31,24 @@ rm -rf target/docs/*
 
 mkdir -p target/docs/source
 
-# Exclude autogenerated API message definition files that aren't part of SDK.
-excluded_internal_clients=(
+# Exclude internal/experimental files from the documentation.
+excluded_internal_code=(
+    apache_beam/examples/
     apache_beam/internal/clients/
     apache_beam/io/gcp/internal/clients/
+    apache_beam/runners/api/
+    apache_beam/runners/test/
+    apache_beam/runners/portability/
+    apache_beam/runners/worker/
     apache_beam/runners/dataflow/internal/clients/
-    apache_beam/examples/complete/juliaset/setup.py)
+    apache_beam/testing/data/)
 
 python $(type -p sphinx-apidoc) -f -o target/docs/source apache_beam \
-    ""${excluded_internal_clients[@]}"" ""*_test.py""
+    ""${excluded_internal_code[@]}"" ""*_test.py""
 
 # Remove Cython modules from doc template; they won't load
 sed -i -e '/.. automodule:: apache_beam.coders.stream/d' \
     target/docs/source/apache_beam.coders.rst
-sed -i -e '/.. automodule:: apache_beam.runners.worker.statesampler/d' \
-    target/docs/source/apache_beam.runners.worker.rst
 
 # Create the configuration and index files
 cat > target/docs/source/conf.py <<'EOF'",remove experimental and internal things from pydoc,"""Update generate_pydoc.sh to exclude additional internal code from documentation""","""Exclude internal/experimental files from documentation generation""","""Exclude internal/experimental files from the documentation and update paths in generate_pydoc.sh""

Explanation:
The commit message should summarize the changes made in the code. In this case, the changes are related to the exclusion of certain internal and experimental files from the documentation generation process, as well as updating paths in the generate_pydoc.sh script. The specific changes include:

1. Renaming the variable `excluded_internal_clients` to `excluded_internal_code`.
2. Adding new paths to be excluded from the documentation, such as `apache_beam/runners/api/`, `apache_beam/runners/test/`, `apache_beam/runners/portability/`, and `apache_beam/runners/worker/`.
3. Removing a path from the exclusion list, `apache_beam/examples/complete/juliaset/setup.py`.
4. Adding a new path to be excluded from the documentation, `apache_beam/testing/data/`.

The commit message should therefore reflect these changes and indicate that internal and experimental files are being excluded from the documentation generation process. Additionally, it should mention that paths have been updated in the generate_pydoc.sh script.",Updated generate_pydoc.sh to exclude internal/experimental files from documentation.
"diff --git a/src/test/java/com/owncloud/android/ui/adapter/ActivityListAdapterTest.java b/src/test/java/com/owncloud/android/ui/adapter/ActivityListAdapterTest.java
index a1d5bbd9ca..92c3a07b64 100644
--- a/src/test/java/com/owncloud/android/ui/adapter/ActivityListAdapterTest.java
+++ b/src/test/java/com/owncloud/android/ui/adapter/ActivityListAdapterTest.java
@@ -52,4 +52,66 @@ public final class ActivityListAdapterTest {
         activityListAdapter.values.add(activity);
         Assert.assertFalse(activityListAdapter.isHeader(1));
     }
+
+    @Test
+    public void getHeaderPositionForItem__AdapterIsEmpty_ReturnZero(){
+        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();
+
+        Assert.assertEquals(0,activityListAdapter.getHeaderPositionForItem(0));
+    }
+
+    @Test
+    public void getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem() {
+        Object header = ""Hello"";
+        Object activity = Mockito.mock(Activity.class);
+
+        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();
+
+
+        activityListAdapter.values.add(header);
+        activityListAdapter.values.add(activity);
+        activityListAdapter.values.add(header);
+        activityListAdapter.values.add(activity);
+
+
+        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));
+
+    }
+
+    @Test
+    public void getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader() {
+        Object header = ""Hello"";
+        Object activity = Mockito.mock(Activity.class);
+
+        Mockito.when(activityListAdapter.isHeader(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(0)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(1)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(1)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(1)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(2)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.isHeader(3)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getItemViewType(3)).thenCallRealMethod();
+        Mockito.when(activityListAdapter.getHeaderPositionForItem(3)).thenCallRealMethod();
+
+        activityListAdapter.values.add(header);
+        activityListAdapter.values.add(activity);
+        activityListAdapter.values.add(header);
+        activityListAdapter.values.add(activity);
+
+        Assert.assertEquals(2, activityListAdapter.getHeaderPositionForItem(2));
+    }
+
 }",add getHeaderPositionForItem unit test .,"""Added tests for ActivityListAdapter's getHeaderPositionForItem method""","""Added test cases for getHeaderPositionForItem method in ActivityListAdapterTest""","""Added new test cases to ActivityListAdapterTest class""

 This commit has added three new test methods to the ActivityListAdapterTest class:

 1. `getHeaderPositionForItem__AdapterIsEmpty_ReturnZero()`: This test checks if the `getHeaderPositionForItem` method returns 0 when the adapter is empty.

 2. `getHeaderPositionForItem__ItemIsHeader_ReturnCurrentItem()`: This test checks if the `getHeaderPositionForItem` method returns the current item position when the item is a header.

 3. `getHeaderPositionForItem__ItemIsActivity_ReturnNextHeader()`: This test checks if the `getHeaderPositionForItem` method returns the position of the next header when the item is an activity.

Each test method has its own set of mocked objects and assertions to test the behavior of the `ActivityListAdapter` class.","""Add unit tests for `getHeaderPositionForItem` method in `ActivityListAdapter` to improve test coverage and code reliability."""
"diff --git a/CHANGES.txt b/CHANGES.txt
index 6eeb8193d7..5c9b64ff69 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,4 +1,5 @@
 2.1
+ * add listsnapshots command to nodetool (CASSANDRA-5742)
  * Introduce AtomicBTreeColumns (CASSANDRA-6271)
  * Multithreaded commitlog (CASSANDRA-3578)
  * allocate fixed index summary memory pool and resample cold index summaries 
diff --git a/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 892e881c09..fe77d09e84 100644
--- a/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1839,6 +1839,15 @@ public class ColumnFamilyStore implements ColumnFamilyStoreMBean
         List<File> snapshotDirs = directories.getCFDirectories();
         Directories.clearSnapshot(snapshotName, snapshotDirs);
     }
+    /**
+     *
+     * @return  Return a map of all snapshots to space being used
+     * The pair for a snapshot has true size and size on disk.
+     */
+    public Map<String, Pair<Long,Long>> getSnapshotDetails()
+    {
+        return directories.getSnapshotDetails();
+    }
 
     public boolean hasUnreclaimedSpace()
     {
diff --git a/src/java/org/apache/cassandra/db/Directories.java b/src/java/org/apache/cassandra/db/Directories.java
index a124d6714e..b3723b3455 100644
--- a/src/java/org/apache/cassandra/db/Directories.java
+++ b/src/java/org/apache/cassandra/db/Directories.java
@@ -485,6 +485,42 @@ public class Directories
         }
     }
 
+    /**
+     *
+     * @return  Return a map of all snapshots to space being used
+     * The pair for a snapshot has size on disk and true size.
+     */
+    public Map<String, Pair<Long, Long>> getSnapshotDetails()
+    {
+        final Map<String, Pair<Long, Long>> snapshotSpaceMap = new HashMap<>();
+        for (final File dir : sstableDirectories)
+        {
+            final File snapshotDir = new File(dir,SNAPSHOT_SUBDIR);
+            if (snapshotDir.exists() && snapshotDir.isDirectory())
+            {
+                final File[] snapshots  = snapshotDir.listFiles();
+                if (snapshots != null)
+                {
+                    for (final File snapshot : snapshots)
+                    {
+                        if (snapshot.isDirectory())
+                        {
+                            final long sizeOnDisk = FileUtils.folderSize(snapshot);
+                            final long trueSize = getTrueAllocatedSizeIn(snapshot);
+                            Pair<Long,Long> spaceUsed = snapshotSpaceMap.get(snapshot.getName());
+                            if (spaceUsed == null)
+                                spaceUsed =  Pair.create(sizeOnDisk,trueSize);
+                            else
+                                spaceUsed = Pair.create(spaceUsed.left + sizeOnDisk, spaceUsed.right + trueSize);
+                            snapshotSpaceMap.put(snapshot.getName(), spaceUsed);
+                        }
+                    }
+                }
+            }
+        }
+
+        return snapshotSpaceMap;
+    }
     public boolean snapshotExists(String snapshotName)
     {
         for (File dir : sstableDirectories)
diff --git a/src/java/org/apache/cassandra/io/util/FileUtils.java b/src/java/org/apache/cassandra/io/util/FileUtils.java
index 3c84cc33ba..cbed4f8286 100644
--- a/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -447,4 +447,22 @@ public class FileUtils
                 throw new IllegalStateException();
         }
     }
+
+    /**
+     * Get the size of a directory in bytes
+     * @param The directory for which we need size.
+     * @return The size of the directory
+     */
+    public static long folderSize(File directory)
+    {
+        long length = 0;
+        for (File file : directory.listFiles())
+        {
+            if (file.isFile())
+                length += file.length();
+            else
+                length += folderSize(file);
+        }
+        return length;
+    }
 }
diff --git a/src/java/org/apache/cassandra/service/StorageService.java b/src/java/org/apache/cassandra/service/StorageService.java
index 6f4788fc15..43fead02a0 100644
--- a/src/java/org/apache/cassandra/service/StorageService.java
+++ b/src/java/org/apache/cassandra/service/StorageService.java
@@ -34,6 +34,8 @@ import javax.management.MBeanServer;
 import javax.management.Notification;
 import javax.management.NotificationBroadcasterSupport;
 import javax.management.ObjectName;
+import javax.management.openmbean.TabularData;
+import javax.management.openmbean.TabularDataSupport;
 
 import static java.nio.charset.StandardCharsets.ISO_8859_1;
 
@@ -2229,6 +2231,49 @@ public class StorageService extends NotificationBroadcasterSupport implements IE
             logger.debug(""Cleared out snapshot directories"");
     }
 
+    public Map<String, TabularData> getSnapshotDetails()
+    {
+        final Map<String, TabularData> snapshotMap = new HashMap<>();
+        for (final Keyspace keyspace : Keyspace.all())
+        {
+            if (Keyspace.SYSTEM_KS.equals(keyspace.getName()))
+                continue;
+
+            for (final ColumnFamilyStore cfStore : keyspace.getColumnFamilyStores())
+            {
+                for (final Map.Entry<String, Pair<Long,Long>> snapshotDetail : cfStore.getSnapshotDetails().entrySet())
+                {
+                    TabularDataSupport data = (TabularDataSupport)snapshotMap.get(snapshotDetail.getKey());
+                    if (data == null)
+                    {
+                        data = new TabularDataSupport(SnapshotDetailsTabularData.TABULAR_TYPE);
+                        snapshotMap.put(snapshotDetail.getKey(), data);
+                    }
+
+                    SnapshotDetailsTabularData.from(snapshotDetail.getKey(), keyspace.getName(), cfStore.getColumnFamilyName(), snapshotDetail, data);
+                }
+            }
+        }
+        return snapshotMap;
+    }
+
+    public long trueSnapshotsSize()
+    {
+        long total = 0;
+        for (final Keyspace keyspace : Keyspace.all())
+        {
+            if (Keyspace.SYSTEM_KS.equals(keyspace.getName()))
+                continue;
+
+            for (final ColumnFamilyStore cfStore : keyspace.getColumnFamilyStores())
+            {
+                total += cfStore.trueSnapshotsSize();
+            }
+        }
+
+        return total;
+    }
+
     /**
      * @param allowIndexes Allow index CF names to be passed in
      * @param autoAddIndexes Automatically add secondary indexes if a CF has them
diff --git a/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/src/java/org/apache/cassandra/service/StorageServiceMBean.java
index e0bca269f4..390795e08e 100644
--- a/src/java/org/apache/cassandra/service/StorageServiceMBean.java
+++ b/src/java/org/apache/cassandra/service/StorageServiceMBean.java
@@ -28,6 +28,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
 
 import javax.management.NotificationEmitter;
+import javax.management.openmbean.TabularData;
 
 public interface StorageServiceMBean extends NotificationEmitter
 {
@@ -215,6 +216,18 @@ public interface StorageServiceMBean extends NotificationEmitter
      */
     public void clearSnapshot(String tag, String... keyspaceNames) throws IOException;
 
+    /**
+     *  Get the details of all the snapshot
+     * @return A map of snapshotName to all its details in Tabular form.
+     */
+    public Map<String, TabularData> getSnapshotDetails();
+
+    /**
+     * Get the true size taken by all snapshots across all keyspaces.
+     * @return True size taken by all the snapshots.
+     */
+    public long trueSnapshotsSize();
+
     /**
      * Forces major compaction of a single keyspace
      */
diff --git a/src/java/org/apache/cassandra/tools/NodeProbe.java b/src/java/org/apache/cassandra/tools/NodeProbe.java
index 7727401834..cbd43e9de2 100644
--- a/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -452,6 +452,16 @@ public class NodeProbe implements AutoCloseable
         ssProxy.clearSnapshot(tag, keyspaces);
     }
 
+    public Map<String, TabularData> getSnapshotDetails()
+    {
+        return ssProxy.getSnapshotDetails();
+    }
+
+    public long trueSnapshotsSize()
+    {
+        return ssProxy.trueSnapshotsSize();
+    }
+
     public boolean isJoined()
     {
         return ssProxy.isJoined();
diff --git a/src/java/org/apache/cassandra/tools/NodeTool.java b/src/java/org/apache/cassandra/tools/NodeTool.java
index c9ddf4f5f6..70580f28ac 100644
--- a/src/java/org/apache/cassandra/tools/NodeTool.java
+++ b/src/java/org/apache/cassandra/tools/NodeTool.java
@@ -42,6 +42,7 @@ import org.apache.cassandra.db.ColumnFamilyStoreMBean;
 import org.apache.cassandra.db.Keyspace;
 import org.apache.cassandra.db.compaction.CompactionManagerMBean;
 import org.apache.cassandra.db.compaction.OperationType;
+import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.locator.EndpointSnitchInfoMBean;
 import org.apache.cassandra.net.MessagingServiceMBean;
 import org.apache.cassandra.service.CacheServiceMBean;
@@ -117,6 +118,7 @@ public class NodeTool
                 SetStreamThroughput.class,
                 SetTraceProbability.class,
                 Snapshot.class,
+                ListSnapshots.class,
                 Status.class,
                 StatusBinary.class,
                 StatusThrift.class,
@@ -1645,6 +1647,48 @@ public class NodeTool
         }
     }
 
+    @Command(name = ""listsnapshots"", description = ""Lists all the snapshots along with the size on disk and true size."")
+    public static class ListSnapshots extends NodeToolCmd
+    {
+        @Override
+        public void execute(NodeProbe probe)
+        {
+            try
+            {
+                System.out.println(""Snapshot Details: "");
+
+                final Map<String,TabularData> snapshotDetails = probe.getSnapshotDetails();
+                if (snapshotDetails.isEmpty())
+          ",add listsnapshots command to nodetool .,"""Add listsnapshots command to nodetool and expose snapshot details via JMX""","According to the diff, the commit message should be:

""Add listsnapshots command to nodetool and improve snapshot management""

However, this commit message is a bit too brief. A more detailed commit message would be:

""Add listsnapshots command to nodetool (CASSANDRA-5742) and improve snapshot management by adding getSnapshotDetails() method to ColumnFamilyStore and Directories, and implementing trueSnapshotsSize() method in StorageService and StorageServiceMBean.""","""Add listsnapshots command to nodetool (CASSANDRA-5742)""

This commit adds a new command ""listsnapshots"" to the nodetool, which allows users to list all the snapshots along with their size on disk and true size. The changes include modifications to the following files:

* CHANGES.txt: The commit message is added to the list of changes.
* ColumnFamilyStore.java: A new method ""getSnapshotDetails()"" is added to return a map of all snapshots and their space usage details.
* Directories.java: A new method ""getSnapshotDetails()"" is added to return a map of all snapshots and their space usage details.
* FileUtils.java: A new method ""folderSize()"" is added to get the size of a directory in bytes.
* StorageService.java: Two new methods ""getSnapshotDetails()"" and ""trueSnapshotsSize()"" are added to get the snapshot details and true size of all snapshots.
* StorageServiceMBean.java: Two new methods ""getSnapshotDetails()"" and ""trueSnapshotsSize()"" are added to get the snapshot details and true size of all snapshots.
* NodeProbe.java: Two new methods ""getSnapshotDetails()"" and ""trueSnapshotsSize()"" are added to get the snapshot details and true size of all snapshots.
* NodeTool.java: A new class ""ListSnapshots"" is added to handle the new nodetool command.

The changes seem to be well-structured and follow good coding practices. The code is easy to read and understand, and the new functionality is well-documented.","""Add listsnapshots command to nodetool for listing snapshot sizes (CASSANDRA-5742)"""
"diff --git a/core/src/main/java/com/google/bitcoin/core/AbstractPeerEventListener.java b/core/src/main/java/com/google/bitcoin/core/AbstractPeerEventListener.java
index f3332ac4b..86ceff72a 100644
--- a/core/src/main/java/com/google/bitcoin/core/AbstractPeerEventListener.java
+++ b/core/src/main/java/com/google/bitcoin/core/AbstractPeerEventListener.java
@@ -52,8 +52,4 @@ public class AbstractPeerEventListener implements PeerEventListener {
     public List<Message> getData(Peer peer, GetDataMessage m) {
         return null;
     }
-
-    @Override
-    public void onException(Throwable throwable) {
-    }
 }
diff --git a/core/src/main/java/com/google/bitcoin/core/Message.java b/core/src/main/java/com/google/bitcoin/core/Message.java
index cc88cfb94..025844a7b 100644
--- a/core/src/main/java/com/google/bitcoin/core/Message.java
+++ b/core/src/main/java/com/google/bitcoin/core/Message.java
@@ -378,8 +378,6 @@ public abstract class Message implements Serializable {
     /**
      * This method is a NOP for all classes except Block and Transaction.  It is only declared in Message
      * so BitcoinSerializer can avoid 2 instanceof checks + a casting.
-     *
-     * @return
      */
     public Sha256Hash getHash() {
         return null;
diff --git a/core/src/main/java/com/google/bitcoin/core/Peer.java b/core/src/main/java/com/google/bitcoin/core/Peer.java
index 2f84cea16..c09606d0b 100644
--- a/core/src/main/java/com/google/bitcoin/core/Peer.java
+++ b/core/src/main/java/com/google/bitcoin/core/Peer.java
@@ -239,11 +239,15 @@ public class Peer {
             String s;
             PeerAddress addr = vAddress;
             s = addr == null ? ""?"" : addr.toString();
-            if (e.getCause() instanceof ConnectException || e.getCause() instanceof IOException) {
+            final Throwable cause = e.getCause();
+            if (cause instanceof ConnectException || cause instanceof IOException) {
                 // Short message for network errors
-                log.info(s + "" - "" + e.getCause().getMessage());
+                log.info(s + "" - "" + cause.getMessage());
             } else {
-                log.warn(s + "" - "", e.getCause());
+                log.warn(s + "" - "", cause);
+                Thread.UncaughtExceptionHandler handler = Threading.uncaughtExceptionHandler;
+                if (handler != null)
+                    handler.uncaughtException(Thread.currentThread(), cause);
             }
 
             e.getChannel().close();
@@ -261,92 +265,75 @@ public class Peer {
         }
     }
 
-    private void processMessage(MessageEvent e, Message m) throws IOException, VerificationException, ProtocolException {
-        try {
-            // Allow event listeners to filter the message stream. Listeners are allowed to drop messages by
-            // returning null.
-            for (ListenerRegistration<PeerEventListener> registration : eventListeners) {
-                // Skip any listeners that are supposed to run in another thread as we don't want to block waiting
-                // for it, which might cause circular deadlock.
-                if (registration.executor == Threading.SAME_THREAD) {
-                    m = registration.listener.onPreMessageReceived(this, m);
-                    if (m == null) break;
-                }
+    private void processMessage(MessageEvent e, Message m) throws Exception {
+        // Allow event listeners to filter the message stream. Listeners are allowed to drop messages by
+        // returning null.
+        for (ListenerRegistration<PeerEventListener> registration : eventListeners) {
+            // Skip any listeners that are supposed to run in another thread as we don't want to block waiting
+            // for it, which might cause circular deadlock.
+            if (registration.executor == Threading.SAME_THREAD) {
+                m = registration.listener.onPreMessageReceived(this, m);
+                if (m == null) break;
             }
-            if (m == null) return;
+        }
+        if (m == null) return;
 
-            // If we are in the middle of receiving transactions as part of a filtered block push from the remote node,
-            // and we receive something that's not a transaction, then we're done.
-            if (currentFilteredBlock != null && !(m instanceof Transaction)) {
-                endFilteredBlock(currentFilteredBlock);
-                currentFilteredBlock = null;
-            }
+        // If we are in the middle of receiving transactions as part of a filtered block push from the remote node,
+        // and we receive something that's not a transaction, then we're done.
+        if (currentFilteredBlock != null && !(m instanceof Transaction)) {
+            endFilteredBlock(currentFilteredBlock);
+            currentFilteredBlock = null;
+        }
 
-            if (m instanceof NotFoundMessage) {
-                // This is sent to us when we did a getdata on some transactions that aren't in the peers memory pool.
-                // Because NotFoundMessage is a subclass of InventoryMessage, the test for it must come before the next.
-                processNotFoundMessage((NotFoundMessage) m);
-            } else if (m instanceof InventoryMessage) {
-                processInv((InventoryMessage) m);
-            } else if (m instanceof Block) {
-                processBlock((Block) m);
-            } else if (m instanceof FilteredBlock) {
-                startFilteredBlock((FilteredBlock) m);
-            } else if (m instanceof Transaction) {
-                processTransaction((Transaction) m);
-            } else if (m instanceof GetDataMessage) {
-                processGetData((GetDataMessage) m);
-            } else if (m instanceof AddressMessage) {
-                // We don't care about addresses of the network right now. But in future,
-                // we should save them in the wallet so we don't put too much load on the seed nodes and can
-                // properly explore the network.
-            } else if (m instanceof HeadersMessage) {
-                processHeaders((HeadersMessage) m);
-            } else if (m instanceof AlertMessage) {
-                processAlert((AlertMessage) m);
-            } else if (m instanceof VersionMessage) {
-                vPeerVersionMessage = (VersionMessage) m;
-            } else if (m instanceof VersionAck) {
-                if (vPeerVersionMessage == null) {
-                    throw new ProtocolException(""got a version ack before version"");
-                }
-                if (isAcked) {
-                    throw new ProtocolException(""got more than one version ack"");
-                }
-                isAcked = true;
-                for (PeerLifecycleListener listener : lifecycleListeners)
-                    listener.onPeerConnected(this);
-                // We check min version after onPeerConnected as channel.close() will
-                // call onPeerDisconnected, and we should probably call onPeerConnected first.
-                final int version = vMinProtocolVersion;
-                if (vPeerVersionMessage.clientVersion < version) {
-                    log.warn(""Connected to a peer speaking protocol version {} but need {}, closing"",
-                            vPeerVersionMessage.clientVersion, version);
-                    e.getChannel().close();
-                }
-            } else if (m instanceof Ping) {
-                if (((Ping) m).hasNonce())
-                    sendMessage(new Pong(((Ping) m).getNonce()));
-            } else if (m instanceof Pong) {
-                processPong((Pong)m);
-            } else {
-                log.warn(""Received unhandled message: {}"", m);
+        if (m instanceof NotFoundMessage) {
+            // This is sent to us when we did a getdata on some transactions that aren't in the peers memory pool.
+            // Because NotFoundMessage is a subclass of InventoryMessage, the test for it must come before the next.
+            processNotFoundMessage((NotFoundMessage) m);
+        } else if (m instanceof InventoryMessage) {
+            processInv((InventoryMessage) m);
+        } else if (m instanceof Block) {
+            processBlock((Block) m);
+        } else if (m instanceof FilteredBlock) {
+            startFilteredBlock((FilteredBlock) m);
+        } else if (m instanceof Transaction) {
+            processTransaction((Transaction) m);
+        } else if (m instanceof GetDataMessage) {
+            processGetData((GetDataMessage) m);
+        } else if (m instanceof AddressMessage) {
+            // We don't care about addresses of the network right now. But in future,
+            // we should save them in the wallet so we don't put too much load on the seed nodes and can
+            // properly explore the network.
+        } else if (m instanceof HeadersMessage) {
+            processHeaders((HeadersMessage) m);
+        } else if (m instanceof AlertMessage) {
+            processAlert((AlertMessage) m);
+        } else if (m instanceof VersionMessage) {
+            vPeerVersionMessage = (VersionMessage) m;
+        } else if (m instanceof VersionAck) {
+            if (vPeerVersionMessage == null) {
+                throw new ProtocolException(""got a version ack before version"");
             }
-        } catch (final Throwable throwable) {
-            log.warn(""Caught exception in peer thread: {}"", throwable.getMessage());
-            throwable.printStackTrace();
-            for (final ListenerRegistration<PeerEventListener> registration : eventListeners) {
-                try {
-                    registration.executor.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            registration.listener.onException(throwable);
-                        }
-                    });
-                } catch (Exception e1) {
-                    e1.printStackTrace();
-                }
+            if (isAcked) {
+                throw new ProtocolException(""got more than one version ack"");
             }
+            isAcked = true;
+            for (PeerLifecycleListener listener : lifecycleListeners)
+                listener.onPeerConnected(this);
+            // We check min version after onPeerConnected as channel.close() will
+            // call onPeerDisconnected, and we should probably call onPeerConnected first.
+            final int version = vMinProtocolVersion;
+            if (vPeerVersionMessage.clientVersion < version) {
+                log.warn(""Connected to a peer speaking protocol version {} but need {}, closing"",
+                        vPeerVersionMessage.clientVersion, version);
+                e.getChannel().close();
+            }
+        } else if (m instanceof Ping) {
+            if (((Ping) m).hasNonce())
+                sendMessage(new Pong(((Ping) m).getNonce()));
+        } else if (m instanceof Pong) {
+            processPong((Pong)m);
+        } else {
+            log.warn(""Received unhandled message: {}"", m);
         }
     }
 
diff --git a/core/src/main/java/com/google/bitcoin/core/PeerEventListener.java b/core/src/main/java/com/google/bitcoin/core/PeerEventListener.java
index 8895b08df..dc854e156 100644
--- a/core/src/main/java/com/google/bitcoin/core/PeerEventListener.java
+++ b/core/src/main/java/com/google/bitcoin/core/PeerEventListener.java
@@ -78,11 +78,4 @@ public interface PeerEventListener {
      * items as possible which appear in the {@link GetDataMessage}, or null if you're not interested in responding.
      */
     public List<Message> getData(Peer peer, GetDataMessage m);
-
-    /**
-     * Called if there is an exception thrown in a Netty worker thread whilst processing an inbound message. You
-     * can use this to report crashes of the peer threads back to your apps website, for instance. After this callback
-     * runs the peer will be disconnected. Any exceptions thrown by this method will be logged and ignored.
-     */
-    public void onException(Throwable throwable);
 }
diff --git a/core/src/main/java/com/google/bitcoin/core/Wallet.java b/core/src/main/java/com/google/bitcoin/core/Wallet.java
index f02feadb6..1e2bb0aa6 100644
--- a/core/src/main/java/com/google/bitcoin/core/Wallet.java
+++ b/core/src/main/java/com/google/bitcoin/core/Wallet.java
@@ -461,6 +461,9 @@ public class Wallet implements Serializable, BlockChainListener {
             setDaemon(true);
             setName(""Wallet auto save thread"");
             setPriority(Thread.MIN_PRIORITY);   // Avoid competing with the UI.
+            Thread.UncaughtExceptionHandler handler = Threading.uncaughtExceptionHandler;
+            if (handler != null)
+                setUncaughtExceptionHandler(handler);
         }
 
         /** Returns the global instance that services all wallets. It never shuts down. */
diff --git a/core/src/main/java/com/google/bitcoin/utils/Threading.java b/core/src/main/java/com/google/bitcoin/utils/Threading.java
index bae0b6c7a..753d1fde6 100644
--- a/core/src/main/java/com/google/bitcoin/utils/Threading.java
+++ b/core/src/main/java/com/google/bitcoin/utils/Threading.java
@@ -21,6 +21,7 @@ import com.google.common.util.concurrent.CycleDetectingLockFactory;
 import com.google.common.util.concurrent.Futures;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 import java.lang.ref.WeakReference;
 import java.util.concurrent.*;
 import java.util.concurrent.locks.ReentrantLock;
@@ -67,6 +68,17 @@ public class Threading {
         Futures.getUnchecked(USER_THREAD.submit(Callables.returning(null)));
     }
 
+    /**
+     * An exception handler that will be invoked for any exceptions that occur in the user thread, and
+     * any unhandled exceptions that are caught whilst the framework is processing network traffic or doing other
+     * background tasks. The purpose of this is to allow you to report back unanticipated crashes from your users
+     * to a central collection center for analysis and debugging. You should configure this <b>before</b> any
+     * bitcoinj library code is run, setting it after you started network traffic and other forms of processing
+     * may result in the change not taking effect.
+     */
+    @Nullable
+    public static volatile Thread.UncaughtExceptionHandler uncaughtExceptionHandler;
+
     /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
     static {
@@ -80,6 +92,7 @@ public class Threading {
                 Thread t = new Thread(runnable);
                 t.setName(""bitcoinj user thread"");
                 t.setDaemon(true);
+                t.setUncaughtExceptionHandler(uncaughtExceptionHandler);
                 userThread = new WeakReference<Thread>(t);
                 return t;
             }
diff --git a/core/src/test/java/com/google/bitcoin/core/PeerTest.java b/core/src/test/java/com/google/bitcoin/core/PeerTest.java
index bb28832ad..3dd4c6785 100644
--- a/core/src/test/java/com/google/bitcoin/core/PeerTest.java
+++ b/core/src/test/java/com/google/bitcoin/core/PeerTest.java
@@ -17,20 +17,30 @@
 package com.google.bitcoin.core;
 
 import com.google.bitcoin.core.Peer.PeerHandler;
+import com.google.bitcoin.params.TestNet3Params;
 import com.google.bitcoin.utils.Threading;
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ListenableFuture;
+import com.google.common.util.concurrent.SettableFuture;
 import org.easymock.Capture;
 import org.easymock.CaptureType;
 import org.jboss.netty.channel.*;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.math.BigInteger;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.ServerSocket;
+import java.net.Socket;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
 import static com.google.bitcoin.core.TestUtils.*;
@@ -782,12 +792,21 @@ public class PeerTest extends TestWithNetworkConnections {
             }
         });
         final Throwable[] throwables = new Throwable[1];
-        peer.addEventListener(new AbstractPeerEventListener() {
+        Threading.uncaughtExceptionHandler = new Thread.UncaughtExceptionHandler() {
             @Override
-            public void onException(Throwable throwable) {
+            public void uncaughtException(Thread thread, Throwable throwable) {
                 throwables[0] = throwable;
             }
-        }, Threading.SAME_THREAD);
+        };
+        // In real usage we're not really meant to adjust the uncaught exception handler after stuff started happening
+        // but in the unit test environment other tests have just run so the thread is probably still kicking around.
+        // Force it to crash so it'll be recreated with our new handler.
+        Threading.USER_THREAD.execute(new Runnable() {
+            @Override
+            public void run() {
+                throw new RuntimeException();
+            }
+        });
         control.replay();
         connect();
         Transaction t1 = new Transaction(unitTestParams);
@@ -797,8 +816,59 @@ public class PeerTest extends TestWithNetworkConnections {
         t2.addInput(t1.getOutput(0));
         t2.addOutput(Utils.toNanoCoins(1, 0), wallet.getChangeAddress());
         inbound(peer, t2);
-        inbound(peer, new NotFoundMessage(unitTestParams, Lists.newArrayList(new InventoryItem(InventoryItem.Type.Transaction, t2.getInput(0).getHash()))));
+        final InventoryItem inventoryItem = new InventoryItem(InventoryItem.Type.Transaction, t2.getInput(0).getOutpoint().getHash());
+        final NotFoundMessage nfm = new NotFoundMessage(unitTestParams, Lists.newArrayList(inventoryItem));
+        inbound(peer, nfm);
+        Threading.waitForUserCode();
         assertTrue(throwables[0] instanceof NullPointerException);
+        Threading.uncaughtExceptionHandler = null;
+    }
+
+    @Test
+    public void badMessage() throws Exception {
+        // Bring up an actual network connection and feed it bogus data.
+        final SettableFuture<Void> result = SettableFuture.create();
+        Threading.uncaughtExceptionHandler = new Thread.UncaughtExceptionHandler() {
+            @Override
+            public void uncaughtException(Thread thread, Throwable throwable) {
+                result.setException(throwable);
+   ",Exception handling : provide a global variable in Threading that receives all unhandled exceptions from all framework threads . . Replaces the now removed PeerEventListener . onException ( ) callback .,"""Improve exception handling in Peer and add uncaught exception handler for user thread""","""Implement global uncaught exception handler for thread crashes and network errors""","This commit removes the `onException` method from the `AbstractPeerEventListener` class and updates the `Peer` class to handle exceptions thrown by the `processMessage` method directly. It also removes an unnecessary check for `null` in the `Message` class. Additionally, the commit updates the `Peer` class to use the `Throwable` class directly instead of calling `getCause()` on the exception. Finally, it adds a null check for the `Message` object before processing it in the `processMessage` method of the `Peer` class.","""Remove onException method and handle uncaught exceptions using a global UncaughtExceptionHandler."""
"diff --git a/cSploit/src/org/csploit/android/MainActivity.java b/cSploit/src/org/csploit/android/MainActivity.java
index 73dfce71..3f781890 100644
--- a/cSploit/src/org/csploit/android/MainActivity.java
+++ b/cSploit/src/org/csploit/android/MainActivity.java
@@ -121,7 +121,6 @@ public class MainActivity extends SherlockListActivity {
   private ProgressDialog progressDialog;
 	private long mLastBackPressTime = 0;
   private ActionMode mActionMode = null;
-  private boolean mInitialization = false;
 
 	private void createUpdateLayout() {
 
@@ -242,8 +241,6 @@ public class MainActivity extends SherlockListActivity {
     } else {
       progressDialog.show();
     }
-
-    mInitialization = true;
   }
 
   private void onInitializationError(final String message) {
@@ -256,7 +253,6 @@ public class MainActivity extends SherlockListActivity {
                 MainActivity.this).show();
       }
     });
-    mInitialization = false;
   }
 
   private void onInitializationSuccess() {
@@ -284,7 +280,6 @@ public class MainActivity extends SherlockListActivity {
         }
       }
     });
-    mInitialization = false;
   }
 
 	@Override
@@ -374,6 +369,10 @@ public class MainActivity extends SherlockListActivity {
     }
 
     createLayout();
+
+    if(coreBeating) {
+      onInitializationSuccess();
+    }
",dismiss the initialization progress dialog if system is initialized correctly .,"""Remove unused mInitialization flag and call onInitializationSuccess when core is beating""","The commit message should be: ""Remove unused mInitialization flag and optimize initialization process.""","""Removed mInitialization variable and added a check for coreBeating before calling onInitializationSuccess() in MainActivity.java""",Remove unused mInitialization flag and ensure onInitializationSuccess is called when coreBeating is true.
"diff --git a/pom.xml b/pom.xml
index 0e650d5a9c..f923df50ab 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
 	<parent>
 		<groupId>com.orientechnologies</groupId>
 		<artifactId>orientdb-parent</artifactId>
-		<version>1.0rc7-SNAPSHOT</version>
+		<version>1.0rc8-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>orientdb-jdbc</artifactId>
diff --git a/src/main/java/com/orientechnologies/orient/jdbc/OrientDataSource.java b/src/main/java/com/orientechnologies/orient/jdbc/OrientDataSource.java
new file mode 100644
index 0000000000..3b0a8fd298
--- /dev/null
+++ b/src/main/java/com/orientechnologies/orient/jdbc/OrientDataSource.java
@@ -0,0 +1,73 @@
+package com.orientechnologies.orient.jdbc;
+
+import java.io.PrintWriter;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+
+import javax.sql.DataSource;
+
+public class OrientDataSource implements DataSource {
+
+	static {
+		try {
+			Class.forName(OrientJdbcDriver.class.getCanonicalName());
+		} catch (ClassNotFoundException e) {
+			System.err.println(""OrientDB DataSource unable to load OrientDB JDBC Driver"");
+		}
+	}
+
+	private String url;
+	private String username;
+	private String password;
+
+	private PrintWriter logger;
+	private int loginTimeout;
+
+	public PrintWriter getLogWriter() throws SQLException {
+		return logger;
+	}
+
+	public void setLogWriter(PrintWriter out) throws SQLException {
+		this.logger = out;
+
+	}
+
+	public void setLoginTimeout(int seconds) throws SQLException {
+		this.loginTimeout = seconds;
+
+	}
+
+	public int getLoginTimeout() throws SQLException {
+		return loginTimeout;
+	}
+
+	public <T> T unwrap(Class<T> iface) throws SQLException {
+		throw new UnsupportedOperationException();
+	}
+
+	public boolean isWrapperFor(Class<?> iface) throws SQLException {
+		throw new UnsupportedOperationException();
+	}
+
+	public Connection getConnection() throws SQLException {
+		return this.getConnection(username, password);
+	}
+
+	public Connection getConnection(String username, String password) throws SQLException {
+		return DriverManager.getConnection(url, username, password);
+	}
+
+	public void setUrl(String url) {
+		this.url = url;
+	}
+
+	public void setUsername(String username) {
+		this.username = username;
+	}
+
+	public void setPassword(String password) {
+		this.password = password;
+	}
+
+}
diff --git a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java
index b386dfa9e8..af63e89910 100644
--- a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java
+++ b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcConnection.java
@@ -136,8 +136,7 @@ public class OrientJdbcConnection implements Connection {
 	}
 
 	public String getCatalog() throws SQLException {
-
-		return null;
+		return database.getName();
 	}
 
 	public Properties getClientInfo() throws SQLException {
@@ -226,11 +225,11 @@ public class OrientJdbcConnection implements Connection {
 	}
 
 	public void setClientInfo(Properties properties) throws SQLClientInfoException {
-
+		// noop
 	}
 
 	public void setClientInfo(String name, String value) throws SQLClientInfoException {
-
+		// noop
 	}
 
 	public void setHoldability(int holdability) throws SQLException {
@@ -257,12 +256,12 @@ public class OrientJdbcConnection implements Connection {
 
 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
 
-		return false;
+		throw new SQLFeatureNotSupportedException();
 	}
 
 	public <T> T unwrap(Class<T> iface) throws SQLException {
 
-		return null;
+		throw new SQLFeatureNotSupportedException();
 	}
 
 	public String getUrl() {
diff --git a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSet.java b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSet.java
index dc0536c4cd..ca2fd7656d 100644
--- a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSet.java
+++ b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSet.java
@@ -140,7 +140,7 @@ public class OrientJdbcResultSet implements ResultSet {
 	}
 
 	public ResultSetMetaData getMetaData() throws SQLException {
-		return new OrientJdbcMetaData(connection, this);
+		return new OrientJdbcResultSetMetaData(connection, this);
 	}
 
 	public void deleteRow() throws SQLException {
diff --git a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcMetaData.java b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSetMetaData.java
similarity index 92%
rename from src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcMetaData.java
rename to src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSetMetaData.java
index ef43f8d02f..3ee16ecbeb 100644
--- a/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcMetaData.java
+++ b/src/main/java/com/orientechnologies/orient/jdbc/OrientJdbcResultSetMetaData.java
@@ -27,7 +27,7 @@ import com.orientechnologies.orient.core.metadata.schema.OType;
 import com.orientechnologies.orient.core.record.impl.ODocument;
 
 @SuppressWarnings(""boxing"")
-public class OrientJdbcMetaData implements ResultSetMetaData {
+public class OrientJdbcResultSetMetaData implements ResultSetMetaData {
 
 	private final static Map<OType, Integer> oTypesSqlTypes = new HashMap<OType, Integer>();
 
@@ -44,7 +44,7 @@ public class OrientJdbcMetaData implements ResultSetMetaData {
 	private OrientJdbcResultSet resultSet;
 	private final OrientJdbcConnection connection;
 
-	public OrientJdbcMetaData(OrientJdbcConnection connection, OrientJdbcResultSet iResultSet) {
+	public OrientJdbcResultSetMetaData(OrientJdbcConnection connection, OrientJdbcResultSet iResultSet) {
 		this.connection = connection;
 		resultSet = iResultSet;
 	}
diff --git a/src/test/java/com/orientechnologies/orient/jdbc/OrientDataSourceTest.java b/src/test/java/com/orientechnologies/orient/jdbc/OrientDataSourceTest.java
new file mode 100644
index 0000000000..4bbb6e229a
--- /dev/null
+++ b/src/test/java/com/orientechnologies/orient/jdbc/OrientDataSourceTest.java
@@ -0,0 +1,36 @@
+package com.orientechnologies.orient.jdbc;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+import org.junit.Test;
+
+import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+public class OrientDataSourceTest {
+
+	@Test
+	public void shouldConnect() throws SQLException {
+		String dbUrl = ""memory:test"";
+
+		ODatabaseDocumentTx db = new ODatabaseDocumentTx(dbUrl);
+		if (db.exists()) db.delete();
+		db.create();
+
+		OrientDataSource ds = new OrientDataSource();
+		ds.setUrl(""jdbc:orient:memory:test"");
+		ds.setUsername(""admin"");
+		ds.setPassword(""admin"");
+
+		Connection conn = ds.getConnection();
+
+		assertNotNull(conn);
+		conn.close();
+		assertTrue(conn.isClosed());
+
+	}
+
+}
diff --git a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcDriverTest.java b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcDriverTest.java
index 16fb18b064..ee10e4bfd6 100644
--- a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcDriverTest.java
+++ b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcDriverTest.java
@@ -44,4 +44,6 @@ public class OrientJdbcDriverTest {
 		assertTrue(conn.isClosed());
 	}
 
+	
+	
 }",added dataSource and tests for metadata support,"""Added OrientDataSource implementation and updated OrientJdbcConnection, OrientJdbcResultSet, and OrientJdbcMetaData to improve JDBC support. Also, added test cases for OrientDataSource and updated OrientJdbcDriverTest. Bumped parent version to 1.0rc8-SNAPSHOT.""","""Added Orient JDBC driver implementation, including OrientDataSource, OrientJdbcConnection, OrientJdbcResultSet, and OrientJdbcResultSetMetaData classes, along with test cases for OrientDataSource.""","Update to OrientDB version 1.0rc8-SNAPSHOT
Add OrientDataSource class
Add OrientDataSourceTest class
Rename OrientJdbcMetaData to OrientJdbcResultSetMetaData
Update OrientJdbcConnection to throw SQLFeatureNotSupportedException for isWrapperFor and unwrap methods
Update OrientJdbcResultSet to return OrientJdbcResultSetMetaData instead of OrientJdbcMetaData for getMetaData method
Add empty implementations for setClientInfo and setHoldability methods in OrientJdbcConnection
Remove unnecessary imports in OrientJdbcDriverTest
Update OrientJdbcConnection to return database name for getCatalog method.","Added OrientDataSource implementation, enhanced OrientJdbcConnection and ResultSet, renamed OrientJdbcMetaData to OrientJdbcResultSetMetaData, and added tests."
"diff --git a/src/java/net/sf/jabref/SearchManager2.java b/src/java/net/sf/jabref/SearchManager2.java
index 5c10dd3e11..6b0a0ec0ff 100644
--- a/src/java/net/sf/jabref/SearchManager2.java
+++ b/src/java/net/sf/jabref/SearchManager2.java
@@ -494,10 +494,10 @@ settings.add(select);
 	/** Updates the text on the search button to reflect
       * the type of search that will happen on click. */
     private void updateSearchButtonText() {
-        search.setText(SearchExpressionParser.isValidSyntax(
+        search.setText(SearchExpressionParser.checkSyntax(
                 searchField.getText(),
                 caseSensitive.isSelected(),
-                regExpSearch.isSelected()) 
+                regExpSearch.isSelected()) != null 
                 ? Globals.lang(""Search Specified Field(s)"") 
                 : Globals.lang(""Search All Fields""));
     }
diff --git a/src/java/net/sf/jabref/search/Parser.g b/src/java/net/sf/jabref/search/Parser.g
index 7e1fbfd1e0..b1d025a359 100644
--- a/src/java/net/sf/jabref/search/Parser.g
+++ b/src/java/net/sf/jabref/search/Parser.g
@@ -27,8 +27,8 @@ tokens {
 	public boolean caseSensitive = false;
     public boolean regex = true;
 	/** Creates a parser and lexer instance and tests the specified String.
-	  * Returns true if s is in valid syntax for advanced field search, false otherwise. */
-	public static boolean isValidSyntax(String s, boolean caseSensitive, boolean regex) {
+	  * Returns the AST if s is in valid syntax for advanced field search, null otherwise. */
+	public static AST checkSyntax(String s, boolean caseSensitive, boolean regex) {
 		// JZTODO: Is there some way to prevent instance creation here?
 		// How can a parser and/or lexer be reused?
 		SearchExpressionParser parser = new SearchExpressionParser(new SearchExpressionLexer(
@@ -37,9 +37,9 @@ tokens {
 		parser.regex = regex;
 		try {
 			parser.searchExpression();
-			return true;
+			return parser.getAST();
 		} catch (Exception e) {
-			return false;
+			return null;
 		}
 	}
 }
diff --git a/src/java/net/sf/jabref/search/SearchExpressionParser.java b/src/java/net/sf/jabref/search/SearchExpressionParser.java
index d71a040d21..4388d388f2 100644
--- a/src/java/net/sf/jabref/search/SearchExpressionParser.java
+++ b/src/java/net/sf/jabref/search/SearchExpressionParser.java
@@ -28,8 +28,8 @@ public class SearchExpressionParser extends antlr.LLkParser       implements Sea
 	public boolean caseSensitive = false;
     public boolean regex = true;
 	/** Creates a parser and lexer instance and tests the specified String.
-	  * Returns true if s is in valid syntax for advanced field search, false otherwise. */
-	public static boolean isValidSyntax(String s, boolean caseSensitive, boolean regex) {
+	  * Returns the AST if s is in valid syntax for advanced field search, null otherwise. */
+	public static AST checkSyntax(String s, boolean caseSensitive, boolean regex) {
 		// JZTODO: Is there some way to prevent instance creation here?
 		// How can a parser and/or lexer be reused?
 		SearchExpressionParser parser = new SearchExpressionParser(new SearchExpressionLexer(
@@ -38,9 +38,9 @@ public class SearchExpressionParser extends antlr.LLkParser       implements Sea
 		parser.regex = regex;
 		try {
 			parser.searchExpression();
-			return true;
+			return parser.getAST();
 		} catch (Exception e) {
-			return false;
+			return null;
 		}
 	}
 ",renamed SearchExpressionParser . isValidSyntax to checkSyntax and made it return the resulting AST ( or null ),"""Change SearchExpressionParser to return AST instead of boolean for syntax validation""","""Refactor `isValidSyntax` to `checkSyntax` and return AST instead of boolean value""","""Updated SearchManager2 and SearchExpressionParser to use checkSyntax instead of isValidSyntax in search button text update""

This commit appears to change the behavior of the search button text update in SearchManager2.java by using the checkSyntax method instead of isValidSyntax in SearchExpressionParser.java. The checkSyntax method returns the AST (Abstract Syntax Tree) if the input string is in valid syntax for advanced field search, or null otherwise. On the other hand, isValidSyntax returns a boolean indicating whether the input string is in valid syntax or not.

Additionally, there are some changes in Parser.g, where the isValidSyntax method is renamed to checkSyntax and its return type is changed from boolean to AST.

These changes may affect the behavior of the search functionality, and it is important to ensure that the new checkSyntax method is being used correctly throughout the codebase. It is also important to test the search functionality thoroughly to ensure that it works as expected after these changes.","""Refactor search syntax validation to return AST instead of boolean in SearchExpressionParser and SearchManager2."""
"diff --git a/src/edu/stanford/nlp/ie/machinereading/structure/Span.java b/src/edu/stanford/nlp/ie/machinereading/structure/Span.java
index 5e9c79dd5..ef39d7423 100644
--- a/src/edu/stanford/nlp/ie/machinereading/structure/Span.java
+++ b/src/edu/stanford/nlp/ie/machinereading/structure/Span.java
@@ -53,23 +53,7 @@ public class Span implements Serializable, Iterable<Integer> {
       return new Span(val2, val1);
     }
   }
-
-  public static Span fromValues(Object... values) {
-    if (values.length == 1) {
-      return fromValues(values[0], values[0] instanceof Number ? ((Number) values[0]).intValue() + 1 : Integer.parseInt(values[0].toString()) + 1);
-    }
-    if (values.length != 2) { throw new IllegalArgumentException(""fromValues() must take an array with 2 elements""); }
-    int val1;
-    if (values[0] instanceof Number) { val1 = ((Number) values[0]).intValue(); }
-    else if (values[0] instanceof String) { val1 = Integer.parseInt((String) values[0]); }
-    else { throw new IllegalArgumentException(""Unknown value for span: "" + values[0]); }
-    int val2;
-    if (values[1] instanceof Number) { val2 = ((Number) values[1]).intValue(); }
-    else if (values[0] instanceof String) { val2 = Integer.parseInt((String) values[1]); }
-    else { throw new IllegalArgumentException(""Unknown value for span: "" + values[1]); }
-    return fromValues(val1, val2);
-  }
-
+  
   public int start() { return start; }
   public int end() { return end; }
   
diff --git a/src/edu/stanford/nlp/util/Characters.java b/src/edu/stanford/nlp/util/Characters.java
index d7748568f..c0f838a92 100644
--- a/src/edu/stanford/nlp/util/Characters.java
+++ b/src/edu/stanford/nlp/util/Characters.java
@@ -54,14 +54,28 @@ public final class Characters {
    */
   public static boolean isPunctuation(char c) {
     int cType = Character.getType(c);
-    return ( 
-        cType == Character.START_PUNCTUATION ||
+    return cType == Character.START_PUNCTUATION ||
         cType == Character.END_PUNCTUATION ||
         cType == Character.OTHER_PUNCTUATION ||
         cType == Character.CONNECTOR_PUNCTUATION ||
         cType == Character.DASH_PUNCTUATION ||
         cType == Character.INITIAL_QUOTE_PUNCTUATION ||
-        cType == Character.FINAL_QUOTE_PUNCTUATION);
+        cType == Character.FINAL_QUOTE_PUNCTUATION;
+  }
+  
+  /**
+   * Returns true if a character is a symbol, and false
+   * otherwise.
+   * 
+   * @param c
+   * @return
+   */
+  public static boolean isSymbol(char c) {
+    int cType = Character.getType(c);
+    return cType == Character.MATH_SYMBOL || 
+        cType == Character.CURRENCY_SYMBOL ||
+        cType == Character.MODIFIER_SYMBOL ||
+        cType == Character.OTHER_SYMBOL;
   }
 
   /**",Added another Nakov2,"""Remove redundant Span.fromValues() method and add isSymbol() method to Characters class""","The commit message should be:

""Refactor Span class and add isSymbol method to Characters class""

However, a more concise and conventional commit message would be:

""Refactor Span and Characters classes""

This commit message is short, clear, and accurately conveys the changes made in the commit.","The commit message should be:

 ""Refactor Span class and add isSymbol method in Characters class""

 Explanation: The first part of the commit message, ""Refactor Span class"", refers to the removal of the `fromValues()` method in the `Span` class. The second part, ""add isSymbol method in Characters class"", refers to the addition of the `isSymbol()` method in the `Characters` class. This commit message provides a clear and concise summary of the changes made in this commit.",Removed redundant fromValues method in Span and added isSymbol method for character classification in Characters.
"diff --git a/presto-main/src/main/java/com/facebook/presto/server/protocol/Query.java b/presto-main/src/main/java/com/facebook/presto/server/protocol/Query.java
index 5dd57acb2e..8dfac27bc7 100644
--- a/presto-main/src/main/java/com/facebook/presto/server/protocol/Query.java
+++ b/presto-main/src/main/java/com/facebook/presto/server/protocol/Query.java
@@ -66,10 +66,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Optional;
+import java.util.OptionalLong;
 import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.atomic.AtomicLong;
 
 import static com.facebook.airlift.concurrent.MoreFutures.addTimeout;
 import static com.facebook.presto.SystemSessionProperties.isExchangeCompressionEnabled;
@@ -78,6 +78,7 @@ import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;
 import static com.facebook.presto.util.Failures.toFailure;
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Verify.verify;
 import static com.google.common.util.concurrent.Futures.immediateFuture;
 import static com.google.common.util.concurrent.MoreExecutors.directExecutor;
 import static java.lang.String.format;
@@ -101,13 +102,14 @@ class Query
 
     private final PagesSerde serde;
 
-    private final AtomicLong resultId = new AtomicLong();
+    @GuardedBy(""this"")
+    private OptionalLong nextToken = OptionalLong.of(0);
 
     @GuardedBy(""this"")
     private QueryResults lastResult;
 
     @GuardedBy(""this"")
-    private String lastResultPath;
+    private long lastToken = -1;
 
     @GuardedBy(""this"")
     private List<Column> columns;
@@ -266,8 +268,7 @@ class Query
     public synchronized ListenableFuture<QueryResults> waitForResults(long token, UriInfo uriInfo, String scheme, Duration wait, DataSize targetResultSize)
     {
         // before waiting, check if this request has already been processed and cached
-        String requestedPath = uriInfo.getAbsolutePath().getPath();
-        Optional<QueryResults> cachedResult = getCachedResult(token, requestedPath);
+        Optional<QueryResults> cachedResult = getCachedResult(token);
         if (cachedResult.isPresent()) {
             return immediateFuture(cachedResult.get());
         }
@@ -300,7 +301,7 @@ class Query
         }
     }
 
-    private synchronized Optional<QueryResults> getCachedResult(long token, String requestedPath)
+    private synchronized Optional<QueryResults> getCachedResult(long token)
     {
         // is this the first request?
         if (lastResult == null) {
@@ -308,18 +309,24 @@ class Query
         }
 
         // is the a repeated request for the last results?
-        if (requestedPath.equals(lastResultPath)) {
+        if (token == lastToken) {
             // tell query manager we are still interested in the query
             queryManager.recordHeartbeat(queryId);
             return Optional.of(lastResult);
         }
 
-        if (token < resultId.get()) {
+        // if this is a result before the lastResult, the data is gone
+        if (token < lastToken) {
             throw new WebApplicationException(Response.Status.GONE);
         }
 
+        // if this is a request for a result after the end of the stream, return not found
+        if (!nextToken.isPresent()) {
+            throw new WebApplicationException(Response.Status.NOT_FOUND);
+        }
+
         // if this is not a request for the next results, return not found
-        if (lastResult.getNextUri() == null || !requestedPath.equals(lastResult.getNextUri().getPath())) {
+        if (token != nextToken.getAsLong()) {
             // unknown token
             throw new WebApplicationException(Response.Status.NOT_FOUND);
         }
@@ -330,12 +337,13 @@ class Query
     private synchronized QueryResults getNextResult(long token, UriInfo uriInfo, String scheme, DataSize targetResultSize)
     {
         // check if the result for the token have already been created
-        String requestedPath = uriInfo.getAbsolutePath().getPath();
-        Optional<QueryResults> cachedResult = getCachedResult(token, requestedPath);
+        Optional<QueryResults> cachedResult = getCachedResult(token);
         if (cachedResult.isPresent()) {
             return cachedResult.get();
         }
 
+        verify(nextToken.isPresent(), ""Can not generate next result when next token is not present"");
+        verify(token == nextToken.getAsLong(), ""Expected token to equal next token"");
         URI queryHtmlUri = uriInfo.getRequestUriBuilder()
                 .scheme(scheme)
                 .replacePath(""ui/query.html"")
@@ -399,17 +407,24 @@ class Query
             data = ImmutableSet.of(ImmutableList.of(true));
         }
 
+        // advance next token
         // only return a next if
         // (1) the query is not done AND the query state is not FAILED
         //   OR
         // (2)there is more data to send (due to buffering)
+        if ((!queryInfo.isFinalQueryInfo() && queryInfo.getState() != FAILED) || !exchangeClient.isClosed()) {
+            nextToken = OptionalLong.of(token + 1);
+        }
+        else {
+            nextToken = OptionalLong.empty();
+        }
+
         URI nextResultsUri = null;
-        if (!queryInfo.isFinalQueryInfo() && !queryInfo.getState().equals(QueryState.FAILED)
-                || !exchangeClient.isClosed()) {
-            nextResultsUri = createNextResultsUri(scheme, uriInfo);
+        if (nextToken.isPresent()) {
+            nextResultsUri = createNextResultsUri(scheme, uriInfo, nextToken.getAsLong());
         }
 
-        // update catalog and schema
+        // update catalog, schema, and path
         setCatalog = queryInfo.getSetCatalog();
         setSchema = queryInfo.getSetSchema();
 
@@ -442,14 +457,11 @@ class Query
                 queryInfo.getUpdateType(),
                 updateCount);
 
-        cacheLastResults(queryResults, requestedPath);
-        return queryResults;
-    }
-
-    private synchronized void cacheLastResults(QueryResults queryResults, String requestedPath)
-    {
-        lastResultPath = requestedPath;
+        // cache the new result
+        lastToken = token;
         lastResult = queryResults;
+
+        return queryResults;
     }
 
     private synchronized void closeExchangeClientIfNecessary(QueryInfo queryInfo)
@@ -493,13 +505,13 @@ class Query
         return Futures.transformAsync(queryManager.getStateChange(queryId, currentState), this::queryDoneFuture, directExecutor());
     }
 
-    private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo)
+    private synchronized URI createNextResultsUri(String scheme, UriInfo uriInfo, long nextToken)
     {
         return uriInfo.getBaseUriBuilder()
                 .scheme(scheme)
                 .replacePath(""/v1/statement/executing"")
                 .path(queryId.toString())
-                .path(String.valueOf(resultId.getAndIncrement()))
+                .path(String.valueOf(nextToken))
                 .replaceQuery("""")
                 .queryParam(""slug"", slug)
      ",Simplify token management in protocol Query .,"""Refactor Query class to use OptionalLong for result token management""

This commit message accurately reflects the changes made in the code. The main change is the replacement of `AtomicLong` with `OptionalLong` for managing the result token, which is a significant refactoring of the `Query` class.","Here's a possible commit message based on the provided diff:

`Refactor Query class to use OptionalLong for result token management`

This commit message is concise and accurately describes the main change made in the commit, which is the replacement of `AtomicLong` with `OptionalLong` for managing result tokens in the `Query` class.","""Update Query class to use OptionalLong for nextToken and improve result caching""

Explanation:
The changes made in this commit primarily involve the use of OptionalLong for the nextToken variable in the Query class. The getCachedResult method now only takes a token as a parameter instead of both token and requestedPath. The code has been refactored to handle cases where the nextToken is not present, and the result caching mechanism has been updated accordingly. Additionally, the createNextResultsUri method now takes an extra parameter, nextToken, and uses it to create the URI. The code has also been updated to verify the token and nextToken values in certain cases.","""Refactor Query class to use token-based result caching and retrieval, improving synchronization and token handling."""
"diff --git a/camel-core/src/main/java/org/apache/camel/model/dataformat/TarFileDataFormat.java b/camel-core/src/main/java/org/apache/camel/model/dataformat/TarFileDataFormat.java
index 26153f86ea0..b9b5a0e4b5b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/dataformat/TarFileDataFormat.java
+++ b/camel-core/src/main/java/org/apache/camel/model/dataformat/TarFileDataFormat.java
@@ -37,6 +37,8 @@ public class TarFileDataFormat extends DataFormatDefinition {
     private Boolean usingIterator;
     @XmlAttribute
     private Boolean allowEmptyDirectory;
+    @XmlAttribute
+    private Boolean preservePathElements;
 
     public TarFileDataFormat() {
         super(""tarfile"");
@@ -47,6 +49,9 @@ public class TarFileDataFormat extends DataFormatDefinition {
         if (usingIterator != null) {
             setProperty(camelContext, dataFormat, ""usingIterator"", usingIterator);
         }
+        if (preservePathElements != null) {
+            setProperty(camelContext, dataFormat, ""preservePathElements"", preservePathElements);
+        }
     }
 
     public Boolean getUsingIterator() {
@@ -57,6 +62,10 @@ public class TarFileDataFormat extends DataFormatDefinition {
         return allowEmptyDirectory;
     }
 
+    public Boolean getPreservePathElements() {
+        return preservePathElements;
+    }
+
     /**
      * If the tar file has more then one entry, the setting this option to true, allows to work with the splitter EIP,
      * to split the data using an iterator in a streaming mode.
@@ -72,4 +81,12 @@ public class TarFileDataFormat extends DataFormatDefinition {
     public void setAllowEmptyDirectory(Boolean allowEmptyDirectory) {
         this.allowEmptyDirectory = allowEmptyDirectory;
     }
+
+    /**
+     * If the file name contains path elements, setting this option to true, allows the path to be maintained
+     * in the tar file.
+     */
+    public void setPreservePathElements(Boolean preservePathElements) {
+        this.preservePathElements = preservePathElements;
+    }
 }
diff --git a/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipFileDataFormat.java b/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipFileDataFormat.java
index ff2dd608c32..4d98796d9d0 100644
--- a/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipFileDataFormat.java
+++ b/camel-core/src/main/java/org/apache/camel/model/dataformat/ZipFileDataFormat.java
@@ -38,6 +38,8 @@ public class ZipFileDataFormat extends DataFormatDefinition {
     private Boolean usingIterator;
     @XmlAttribute
     private Boolean allowEmptyDirectory;
+    @XmlAttribute
+    private Boolean preservePathElements;
 
     public ZipFileDataFormat() {
         super(""zipfile"");
@@ -51,6 +53,9 @@ public class ZipFileDataFormat extends DataFormatDefinition {
         if (allowEmptyDirectory != null) {
             setProperty(camelContext, dataFormat, ""allowEmptyDirectory"", allowEmptyDirectory);
         }
+        if (preservePathElements != null) {
+            setProperty(camelContext, dataFormat, ""preservePathElements"", preservePathElements);
+        }
     }
 
     public Boolean getUsingIterator() {
@@ -61,6 +66,10 @@ public class ZipFileDataFormat extends DataFormatDefinition {
         return allowEmptyDirectory;
     }
 
+    public Boolean getPreservePathElements() {
+        return preservePathElements;
+    }
+
     /**
      * If the zip file has more then one entry, the setting this option to true, allows to work with the splitter EIP,
      * to split the data using an iterator in a streaming mode.
@@ -77,4 +86,12 @@ public class ZipFileDataFormat extends DataFormatDefinition {
         this.allowEmptyDirectory = allowEmptyDirectory;
     }
 
+    /**
+     * If the file name contains path elements, setting this option to true, allows the path to be maintained
+     * in the zip file.
+     */
+    public void setPreservePathElements(Boolean preservePathElements) {
+        this.preservePathElements = preservePathElements;
+    }
+
 }
diff --git a/components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java b/components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java
index b226c6ee777..35b1a9c2605 100644
--- a/components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java
+++ b/components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java
@@ -17,9 +17,12 @@
 package org.apache.camel.dataformat.tarfile;
 
 import java.io.BufferedInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Iterator;
 
 import org.apache.camel.Exchange;
 import org.apache.camel.converter.stream.OutputStreamBuilder;
@@ -43,6 +46,7 @@ import static org.apache.camel.Exchange.FILE_NAME;
 public class TarFileDataFormat extends ServiceSupport implements DataFormat, DataFormatName {
     private boolean usingIterator;
     private boolean allowEmptyDirectory;
+    private boolean preservePathElements;
 
     @Override
     public String getDataFormatName() {
@@ -51,13 +55,14 @@ public class TarFileDataFormat extends ServiceSupport implements DataFormat, Dat
 
     @Override
     public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
-        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);
+        String filename;
+        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);
         Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);
-        if (filename == null) {
+        if (filepath == null) {
             // generate the file name as the camel file component would do
-            filename = StringHelper.sanitize(exchange.getIn().getMessageId());
+            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());
         } else {
-            filename = Paths.get(filename).getFileName().toString(); // remove any path elements
+            filename = Paths.get(filepath).getFileName().toString(); // remove any path elements
         }
 
         TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);
@@ -69,9 +74,11 @@ public class TarFileDataFormat extends ServiceSupport implements DataFormat, Dat
             filelength = (long) is.available();
         }
 
-        TarArchiveEntry entry = new TarArchiveEntry(filename);
-        entry.setSize(filelength);
-        tos.putArchiveEntry(entry);
+        if (preservePathElements) {
+            createTarEntries(tos, filepath, filelength);
+        } else {
+            createTarEntries(tos, filename, filelength);
+        }
 
         try {
             IOHelper.copy(is, tos);
@@ -115,6 +122,31 @@ public class TarFileDataFormat extends ServiceSupport implements DataFormat, Dat
         }
     }
 
+    private void createTarEntries(TarArchiveOutputStream tos, String filepath, Long filelength) throws IOException {
+        Iterator<Path> elements = Paths.get(filepath).iterator();
+        StringBuilder sb = new StringBuilder();
+
+        while (elements.hasNext()) {
+            Path path = elements.next();
+            String element = path.toString();
+            Long length = filelength;
+
+            // If there are more elements to come this element is a directory
+            // The ""/"" at the end tells the TarEntry it is a folder
+            if (elements.hasNext()) {
+                element += ""/"";
+                length = 0L;
+            }
+
+            // Each entry needs the complete path, including previous created folders.
+            TarArchiveEntry entry = new TarArchiveEntry(sb + element);
+            entry.setSize(length);
+            tos.putArchiveEntry(entry);
+
+            sb.append(element);
+        }
+    }
+
     public boolean isUsingIterator() {
         return usingIterator;
     }
@@ -131,6 +163,14 @@ public class TarFileDataFormat extends ServiceSupport implements DataFormat, Dat
         this.allowEmptyDirectory = allowEmptyDirectory;
     }
 
+    public boolean isPreservePathElements() {
+        return preservePathElements;
+    }
+
+    public void setPreservePathElements(boolean preservePathElements) {
+        this.preservePathElements = preservePathElements;
+    }
+
     @Override
     protected void doStart() throws Exception {
         // noop
diff --git a/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileDataFormatTest.java b/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileDataFormatTest.java
index 7f8b79201f9..b74cfb61458 100644
--- a/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileDataFormatTest.java
+++ b/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileDataFormatTest.java
@@ -43,6 +43,7 @@ import static org.apache.camel.Exchange.FILE_NAME;
 import static org.apache.camel.dataformat.tarfile.TarUtils.TEXT;
 import static org.apache.camel.dataformat.tarfile.TarUtils.getBytes;
 import static org.apache.camel.dataformat.tarfile.TarUtils.getTaredText;
+import static org.apache.camel.dataformat.tarfile.TarUtils.getTaredTextInFolder;
 
 /**
  * Unit tests for {@link TarFileDataFormat}.
@@ -80,6 +81,36 @@ public class TarFileDataFormatTest extends CamelTestSupport {
         assertTrue(ObjectHelper.equalByteArray(getTaredText(""poem.txt""), (byte[]) exchange.getIn().getBody()));
     }
 
+    @Test
+    public void testTarWithPathElements() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:tar"");
+        mock.expectedMessageCount(1);
+        mock.expectedHeaderReceived(FILE_NAME, ""poem.txt.tar"");
+
+        template.sendBodyAndHeader(""direct:tar"", TEXT, FILE_NAME, ""poems/poem.txt"");
+
+        assertMockEndpointsSatisfied();
+
+        Exchange exchange = mock.getReceivedExchanges().get(0);
+        assertTrue(ObjectHelper.equalByteArray(getTaredText(""poem.txt""), (byte[]) exchange.getIn().getBody()));
+    }
+
+    @Test
+    public void testTarWithPreservedPathElements() throws Exception {
+        MockEndpoint mock = getMockEndpoint(""mock:tar"");
+        mock.expectedMessageCount(1);
+        mock.expectedHeaderReceived(FILE_NAME, ""poem.txt.tar"");
+
+        tar.setPreservePathElements(true);
+
+        template.sendBodyAndHeader(""direct:tar"", TEXT, FILE_NAME, ""poems/poem.txt"");
+
+        assertMockEndpointsSatisfied();
+
+        Exchange exchange = mock.getReceivedExchanges().get(0);
+        assertTrue(ObjectHelper.equalByteArray(getTaredTextInFolder(""poems/"", ""poems/poem.txt""), (byte[]) exchange.getIn().getBody()));
+    }
+
     @Test
     public void testUntar() throws Exception {
         getMockEndpoint(""mock:untar"").expectedBodiesReceived(TEXT);
diff --git a/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarUtils.java b/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarUtils.java
index df07907001f..4acf633682b 100644
--- a/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarUtils.java
+++ b/components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarUtils.java
@@ -59,6 +59,27 @@ final class TarUtils {
         return baos.toByteArray();
     }
 
+    static byte[] getTaredTextInFolder(String folder, String file) throws IOException {
+        ByteArrayInputStream bais = new ByteArrayInputStream(TEXT.getBytes(""UTF-8""));
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        TarArchiveOutputStream tos = new TarArchiveOutputStream(baos);
+        try {
+            TarArchiveEntry folderEntry = new TarArchiveEntry(folder);
+            folderEntry.setSize(0L);
+            tos.putArchiveEntry(folderEntry);
+
+            TarArchiveEntry fileEntry = new TarArchiveEntry(file);
+            fileEntry.setSize(bais.available());
+            tos.putArchiveEntry(fileEntry);
+
+            IOHelper.copy(bais, tos);
+        } finally {
+            tos.closeArchiveEntry();
+            IOHelper.close(bais, tos);
+        }
+        return baos.toByteArray();
+    }
+
     static byte[] getBytes(File file) throws IOException {
         FileInputStream fis = new FileInputStream(file);
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
diff --git a/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java b/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java
index 171858e0b69..28ce82c5c65 100644
--- a/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java
+++ b/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java
@@ -16,9 +16,12 @@
  */
 package org.apache.camel.dataformat.zipfile;
 
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Iterator;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import java.util.zip.ZipOutputStream;
@@ -40,6 +43,7 @@ import static org.apache.camel.Exchange.FILE_NAME;
 public class ZipFileDataFormat extends ServiceSupport implements DataFormat, DataFormatName {
     private boolean usingIterator;
     private boolean allowEmptyDirectory;
+    private boolean preservePathElements;
 
     @Override
     public String getDataFormatName() {
@@ -48,16 +52,22 @@ public class ZipFileDataFormat extends ServiceSupport implements DataFormat, Dat
 
     @Override
     public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
-        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);
-        if (filename == null) {
+        String filename;
+        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);
+        if (filepath == null) {
             // generate the file name as the camel file component would do
-            filename = StringHelper.sanitize(exchange.getIn().getMessageId());
+            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());
         } else {
-            filename = Paths.get(filename).getFileName().toString(); // remove any path elements
+            filename = Paths.get(filepath).getFileName().toString(); // remove any path elements
         }
 
         ZipOutputStream zos = new ZipOutputStream(stream);
-        zos.putNextEntry(new ZipEntry(filename));
+
+        if (preservePathElements) {
+            createZipEntries(zos, filepath);
+        } else {
+            createZipEntries(zos, filename);
+        }
 
         InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);
 
@@ -100,6 +110,27 @@ public class ZipFileDataFormat extends ServiceSupport implements DataFormat, Dat
         }
     }
 
+    private void createZipEntries(ZipOutputStream zos, String filepath) throws IOException {
+        Iterator<Path> elements = Paths.get(filepath).iterator();
+        StringBuilder sb = new StringBuilder();
+
+        while (elements.hasNext()) {
+            Path path = elements.next();
+            String element = path.toString();
+
+            // If there are more elements to come this element is a directory
+            // The ""/"" at the end tells the ZipEntry it is a folder
+            if (elements.hasNext()) {
+                element += ""/"";
+            }
+
+            // Each entry needs the complete path, including previous created folders.
+            zos.putNextEntry(new ZipEntry(sb + element));
+
+            sb.append(element);
+        }
+    }
+
     public boolean isUsingIterator() {
         return usingIterator;
     }
@@ -116,6 +147,14 @@ public class ZipFileDataFormat extends ServiceSupport implements DataFormat, Dat
         this.allowEmptyDirectory = allowEmptyDirectory;
     }
 
+    public boolean isPreservePathElements() {
+        return preservePathElements;
+    }
+
+    public void setPreservePathElements(boolean preservePathElements) {
+        this.preservePathElements = preservePathElements;
+    }
+
     @Override
     protected void doStart() throws Exception {
         // noop
@@ -125,4 +164,4 @@ public class ZipFileDataFormat extends ServiceSupport implements DataFormat, Dat
     protected void doStop() throws Exception {
         // noop
     }
-}
\ No newline at end of file
+}
diff --git a/components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormatTest.java b/components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormatTest.java
index 305283eff48..63b1b033312 100644
--- a/components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormatTest.java
+++ b/components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormatTest.java
@@ -103,6 +103,28 @@ public class ZipFileDataFormatTest extends CamelTestSupport {
         assertMockEndpointsSatisfied();
     }
 
+    @Test
+    public void testZipWithPathElements() throws Exception {
+        getMockEndpoint(""mock:zip"").expectedBodiesReceived(getZippedText(""poem.txt""));
+        getMockEndpoint(""mock:zip"").expectedHeaderReceived(FILE_NAME, ""poem.txt.zip"");
+
+        template.sendBodyAndHeader(""direct:zip"", TEXT, FILE_NAME, ""poems/poem.txt"");
+
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testZipWithPreservedPathElements() throws Exception {
+        zip.setPreservePathElements(true);
+
+        getMockEndpoint(""mock:zip"").expectedBodiesReceived(getZippedTextInFolder(""poems/"", ""poems/poem.txt""));
+        getMockEndpoint(""mock:zip"").expectedHeaderReceived(FILE_NAME, ""poem.txt.zip"");
+
+        template.sendBodyAndHeader(""direct:zip"", TEXT, FILE_NAME, ""poems/poem.txt"");
+
+        assertMockEndpointsSatisfied();
+    }
+
     @Test
     public void testUnzip() throws Exception {
         getMockEndpoint(""mock:unzip"").expectedBodiesReceived(TEXT);
@@ -298,6 +320,20 @@ public class ZipFileDataFormatTest extends CamelTestSupport {
         return baos.toByteArray();
     }
 
+    private static byte[] getZippedTextInFolder(String folder, String file) throws IOException {
+        ByteArrayInputStream bais = new ByteArrayInputStream(TEXT.getBytes(""UTF-8""));
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ZipOutputStream zos = new ZipOutputStream(baos);
+        try {
+            zos.putNextEntry(new ZipEntry(folder));
+            zos.putNextEntry(new ZipEntry(file));
+            IOHelper.copy(bais, zos);
+        } finally {
+            IOHelper.close(bais, zos);
+        }
+        return baos.toByteArray();
+    }
+
     private static byte[] getBytes(File file) throws IOException {
         FileInputStream fis = new FileInputStream(file);
         ByteArrayOutputStream baos = new ByteArrayOutputStream();",Add unit test to support folders in zip files . . Add implementation to support folders in zip files . . Add backwards compatibility and separate entries for folders . . Add options to camel - core for ZipFileDataFormat and TarFileDataFormat . . Add unit,"""Added preservePathElements option to TarFileDataFormat and ZipFileDataFormat to maintain path elements in the archive""","""Added preservePathElements option to TarFileDataFormat and ZipFileDataFormat to maintain path elements in tar and zip files""","""Added preservePathElements option to TarFileDataFormat and ZipFileDataFormat""

This commit adds a new boolean property `preservePathElements` to both `TarFileDataFormat` and `ZipFileDataFormat` classes. This option allows the path to be maintained in the tar or zip file if the file name contains path elements. The property is exposed as an XML attribute in the data format definition and can be accessed and set through getter and setter methods. Additionally, the `TarFileDataFormat` class has been updated to include a new method `createTarEntries` which handles the creation of tar entries with path elements.","Sure, here is a possible commit message:

""Add preservePathElements option for TarFileDataFormat and ZipFileDataFormat with corresponding tests"""
"diff --git a/web/src/main/java/com/gitplex/server/web/page/base/base.js b/web/src/main/java/com/gitplex/server/web/page/base/base.js
index 57cf101eb..745645c81 100644
--- a/web/src/main/java/com/gitplex/server/web/page/base/base.js
+++ b/web/src/main/java/com/gitplex/server/web/page/base/base.js
@@ -206,6 +206,7 @@ gitplex.server = {
 			if ($dirtyForms.length != 0) {
 				if (confirm(""There are unsaved changes, do you want to discard and continue?"")) {
 					gitplex.server.form.clearAutosavings($dirtyForms);
+					return true;
 				} else {
 					return false;
 				}",Fix the bug that confirm discarding unsaved change does not work .,"""Fix form autosaving cancellation: return true after clearing autosavings""","""Added confirmation for unsaved changes before continuing""","""Added return statement in base.js to allow navigation after confirming discard of unsaved changes""",Added return true to confirm dialog for unsaved changes in base.js.
"diff --git a/thymeleaf-spring5/ChangeLog.txt b/thymeleaf-spring5/ChangeLog.txt
index 4fe4cc633..2ec0356fe 100755
--- a/thymeleaf-spring5/ChangeLog.txt
+++ b/thymeleaf-spring5/ChangeLog.txt
@@ -9,6 +9,8 @@
   SpringTemplateEngine) in order to instruct th:field to render the <input type=""hidden"" ...> associated with
   checkbox fields before the checkbox itself and not after, in order to improve compatibility with several CSS-based
   frameworks.
+- Added support for non-blocking resolution (before View rendering) of reactive variables specified by dialects
+  as execution attributes.
 - Added ""Automatic-Module-Name: thymeleaf-spring5"" to MANIFEST.MF for Java 9+ JPMS.
 
 
diff --git a/thymeleaf-spring5/src/main/java/org/thymeleaf/spring5/view/reactive/ThymeleafReactiveView.java b/thymeleaf-spring5/src/main/java/org/thymeleaf/spring5/view/reactive/ThymeleafReactiveView.java
index a9894c5ce..1d139b15f 100644
--- a/thymeleaf-spring5/src/main/java/org/thymeleaf/spring5/view/reactive/ThymeleafReactiveView.java
+++ b/thymeleaf-spring5/src/main/java/org/thymeleaf/spring5/view/reactive/ThymeleafReactiveView.java
@@ -28,6 +28,8 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import java.util.function.Function;
+import java.util.function.Supplier;
 
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
@@ -102,6 +104,38 @@ public class ThymeleafReactiveView extends AbstractView implements BeanNameAware
      */
     public static final int DEFAULT_RESPONSE_CHUNK_SIZE_BYTES = Integer.MAX_VALUE;
 
+
+    /**
+     * <p>
+     *   This prefix should be used in order to allow dialects to provide reactive stream objects
+     *   that should be resolved (in an unblocked manner) just before the execution of the view. The idea is to allow
+     *   these streams to be included in the standard reactive Spring view model resolution mechanisms so that Thymeleaf
+     *   does not have to block during the execution of the view in order to obtain the value. The result will be as
+     *   if reactive stream objects had been added by the controller methods.
+     * </p>
+     * <p>
+     *   The name of the attributes being added to the Model will be the name of the execution attribute minus the
+     *   prefix. So <tt>ThymeleafReactiveModelAdditions:somedata</tt> will result in a Model attribute called
+     *   <tt>somedata</tt>.
+     * </p>
+     * <p>
+     *   Values of these execution attributes are allowed to be:
+     * </p>
+     * <ul>
+     *     <li><tt>Publisher&lt;?&gt;</tt> (including Flux&lt;?&gt; and Mono&lt;?&gt;).</li>
+     *     <li><tt>Supplier&lt;? extends Publisher&lt;?&gt;&gt;</tt>: The supplier will be called at <tt>View</tt>
+     *          rendering time and the result will be added to the Model.</li>
+     *     <li><tt>Function&lt;ServerWebExchange,? extends Publisher&lt;?&gt;&gt;</tt>: The function will be called
+     *          at <tt>View</tt> rendering time and the result will be added to the Model.</li>
+     * </ul>
+     * <p>
+     *     Value: <tt>ThymeleafReactiveModelAdditions:</tt>
+     * </p>
+     *
+     * @since 3.0.10
+     */
+    public static final String REACTIVE_MODEL_ADDITIONS_EXECUTION_ATTRIBUTE_PREFIX = ""ThymeleafReactiveModelAdditions:"";
+
     private static final String WEBFLUX_CONVERSION_SERVICE_NAME = ""webFluxConversionService"";
 
 
@@ -284,6 +318,58 @@ public void setStaticVariables(final Map<String, ?> variables) {
 
 
 
+    @Override
+    public Mono<Void> render(final Map<String, ?> model, final MediaType contentType, final ServerWebExchange exchange) {
+	    // We will prepare the model for rendering by checking if the configured dialects have specified any execution
+        // attributes to be added to the model during preparation (e.g. reactive streams that will need to be previously
+        // resolved)
+
+        final ISpringWebFluxTemplateEngine viewTemplateEngine = getTemplateEngine();
+
+        if (viewTemplateEngine == null) {
+            return Mono.error(new IllegalArgumentException(""Property 'thymeleafTemplateEngine' is required""));
+        }
+
+        final IEngineConfiguration configuration = viewTemplateEngine.getConfiguration();
+        final Map<String,Object> executionAttributes = configuration.getExecutionAttributes();
+
+        // execution attribute -> process the model somehow? in SpringSecurityDialect there should be nothing that
+        // depends from reactor -> no Flux, o Flux extraction. So just an object of an interface of some kind?
+        // Such object cannot be even instantiated when we are not using WebFlux!
+
+        for (final String executionAttributeName : executionAttributes.keySet()) {
+
+            if (executionAttributeName != null && executionAttributeName.startsWith(REACTIVE_MODEL_ADDITIONS_EXECUTION_ATTRIBUTE_PREFIX)) {
+                // This execution attribute defines a reactive stream object that should be added to the model for
+                // non-blocking resolution at view rendering time
+
+                final Object executionAttributeValue = executionAttributes.get(executionAttributeName);
+                final String modelAttributeName =
+                        executionAttributeName.substring(REACTIVE_MODEL_ADDITIONS_EXECUTION_ATTRIBUTE_PREFIX.length());
+                Publisher<?> modelAttributeValue = null;
+
+                if (executionAttributeValue != null) {
+                    if (executionAttributeValue instanceof Publisher<?>) {
+                        modelAttributeValue = (Publisher<?>) executionAttributeValue;
+                    } else if (executionAttributeValue instanceof Supplier<?>){
+                        final Supplier<Publisher<?>> supplier = (Supplier<Publisher<?>>) executionAttributeValue;
+                        modelAttributeValue = supplier.get();
+                    } else if (executionAttributeValue instanceof Function<?,?>) {
+                        final Function<ServerWebExchange, Publisher<?>> function = (Function<ServerWebExchange, Publisher<?>>) executionAttributeValue;
+                        modelAttributeValue = function.apply(exchange);
+                    }
+                }
+
+                ((Map<String,Object>)model).put(modelAttributeName, modelAttributeValue);
+
+            }
+
+        }
+
+        return super.render(model, contentType, exchange);
+
+    }
+
 
 
     @Override",Added support for non - blocking resolution ( before View rendering ) of reactive variables specified by dialects as execution attributes,"""Added support for non-blocking resolution of reactive variables in Thymeleaf Spring 5""",Added support for non-blocking resolution of reactive variables in ThymeleafReactiveView and improved compatibility with CSS-based frameworks.,"""Added support for non-blocking resolution of reactive variables specified by dialects as execution attributes in ThymeleafReactiveView""

Explanation:
The commit message should summarize the changes made in the code. In this case, the changes are related to adding support for non-blocking resolution of reactive variables specified by dialects as execution attributes in ThymeleafReactiveView. The changes include adding a new static final String variable, REACTIVE\_MODEL\_ADDITIONS\_EXECUTION\_ATTRIBUTE\_PREFIX, and modifying the render method to handle the new execution attribute prefix. The changes allow dialects to provide reactive stream objects that should be resolved in an unblocked manner just before the execution of the view, so that Thymeleaf does not have to block during the execution of the view to obtain the value.",Added support for non-blocking resolution of reactive variables by dialects before ThymeleafReactiveView rendering.
"diff --git a/src/main/java/com/typesafe/config/impl/Parser.java b/src/main/java/com/typesafe/config/impl/Parser.java
index e7788e2..9f2c8d8 100644
--- a/src/main/java/com/typesafe/config/impl/Parser.java
+++ b/src/main/java/com/typesafe/config/impl/Parser.java
@@ -511,6 +511,10 @@ final class Parser {
     static ConfigOrigin apiOrigin = new SimpleConfigOrigin(""path parameter"");
 
     static Path parsePath(String path) {
+        Path speculated = speculativeFastParsePath(path);
+        if (speculated != null)
+            return speculated;
+
         StringReader reader = new StringReader(path);
 
         try {
@@ -521,4 +525,41 @@ final class Parser {
             reader.close();
         }
     }
+
+    // the idea is to see if the string has any chars that might require the
+    // full parser to deal with.
+    private static boolean hasUnsafeChars(String s) {
+        for (int i = 0; i < s.length(); ++i) {
+            char c = s.charAt(i);
+            if (Character.isLetter(c) || c == '.')
+                continue;
+            else
+                return true;
+        }
+        return false;
+    }
+
+    private static void appendPathString(PathBuilder pb, String s) {
+        int splitAt = s.indexOf('.');
+        if (splitAt < 0) {
+            pb.appendKey(s);
+        } else {
+            pb.appendKey(s.substring(0, splitAt));
+            appendPathString(pb, s.substring(splitAt + 1));
+        }
+    }
+
+    // do something much faster than the full parser if
+    // we just have something like ""foo"" or ""foo.bar""
+    private static Path speculativeFastParsePath(String path) {
+        String s = path.trim();
+        if (hasUnsafeChars(s))
+            return null;
+        if (s.startsWith(""."") || s.endsWith(""."") || s.contains(""..""))
+            return null; // let the full parser throw the error
+
+        PathBuilder pb",avoid full parser for simple paths .,"""Optimize path parsing by adding a speculative fast path for simple cases""","""Optimize path parsing with speculative fast path""","""Added speculative fast path parsing in Parser.java""

This commit introduces a new method `speculativeFastParsePath(String path)` in the `Parser` class. This method attempts to parse the path string faster by first checking if it contains any unsafe characters using the `hasUnsafeChars(String s)` method. If it does, the method returns null and the full parser is used instead. If it doesn't, the method proceeds to parse the path string using the `appendPathString(PathBuilder pb, String s)` method.

The `hasUnsafeChars(String s)` method checks if a string contains any characters that are not letters or periods. If it does, the method returns true, otherwise, it returns false.

The `appendPathString(PathBuilder pb, String s)` method appends keys to the `PathBuilder` object by splitting the string at each period. If the split results in only one part, that part is appended as a key. If there are more parts, the first part is appended as a key and the method is called recursively with the rest of the string.

The `speculativeFastParsePath(String path)` method also checks if the path string starts or ends with a period or contains two consecutive periods, in which case it returns null to let the full parser handle the error.","Enhanced `parsePath` method with a fast path parser for simple paths, optimizing performance for common cases."
"diff --git a/docs/_includes/generated/task_manager_memory_configuration.html b/docs/_includes/generated/task_manager_memory_configuration.html
index 739273cd705..afa022c8972 100644
--- a/docs/_includes/generated/task_manager_memory_configuration.html
+++ b/docs/_includes/generated/task_manager_memory_configuration.html
@@ -28,7 +28,7 @@
         </tr>
         <tr>
             <td><h5>taskmanager.memory.jvm-metaspace.size</h5></td>
-            <td style=""word-wrap: break-word;"">134217728 bytes</td>
+            <td style=""word-wrap: break-word;"">100663296 bytes</td>
             <td>MemorySize</td>
             <td>JVM Metaspace Size for the TaskExecutors.</td>
         </tr>
diff --git a/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java b/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java
index a1748ee30b7..a1a91cb8cbf 100644
--- a/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java
+++ b/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java
@@ -389,7 +389,7 @@ public class TaskManagerOptions {
 	public static final ConfigOption<MemorySize> JVM_METASPACE =
 		key(""taskmanager.memory.jvm-metaspace.size"")
 			.memoryType()
-			.defaultValue(MemorySize.parse(""128m""))
+			.defaultValue(MemorySize.parse(""96m""))
 			.withDescription(""JVM Metaspace Size for the TaskExecutors."");
 
 	/**",Decrease the TM JVM metaspace size default value to 96MB . .,"""Update default JVM Metaspace Size for TaskExecutors from 128m to 96m""","""Reduce JVM Metaspace Size for TaskExecutors to 96m""","The commit message could be:

 ""Reduce default JVM Metaspace size for TaskExecutors from 128m to 96m""

This commit message describes the change made in the code, which is reducing the default JVM Metaspace size for TaskExecutors from 128m to 96m.",Reduced the default JVM Metaspace size for TaskExecutors from 128MB to 96MB.
"diff --git a/AUTHORS.md b/AUTHORS.md
deleted file mode 100644
index b02544d..0000000
--- a/AUTHORS.md
+++ /dev/null
@@ -1,17 +0,0 @@
-The Prometheus project was started by Matt T. Proud (emeritus) and
-Julius Volz in 2012.
-
-Maintainers of this repository:
-
-* Brian Brazil <brian.brazil@robustperception.io>
-
-The following individuals have contributed code to this repository
-(listed in alphabetical order):
-
-* Barisa Obradovic <barisa.obradovic@gmail.com>
-* Brian Brazil <brian.brazil@robustperception.io>
-* Conor Hennessy <conor@soundcloud.com>
-* Julius Volz <julius.volz@gmail.com>
-* Levi Lovelock
-* Peter Rossbach <peterrossbach@me.com>
-
diff --git a/MAINTAINERS.md b/MAINTAINERS.md
new file mode 100644
index 0000000..d1cb20b
--- /dev/null
+++ b/MAINTAINERS.md
@@ -0,0 +1 @@
+* Brian Brazil <brian.brazil@robustperception.io>",Replace AUTHORS . md by an updated MAINTAINERS . md ( <issue_id> ),"""Move maintainers list from AUTHORS.md to new MAINTAINERS.md file""","""Remove AUTHORS.md and replace with MAINTAINERS.md""","""Deleted AUTHORS.md and added MAINTAINERS.md with updated maintainer information""",Removed `AUTHORS.md` and created `MAINTAINERS.md` with Brian Brazil listed as the maintainer.
"diff --git a/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessInstanceImpl.java b/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessInstanceImpl.java
index 8fd3731ad4..d8b1b9b919 100644
--- a/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessInstanceImpl.java
+++ b/activiti-api-process-model-impl/src/main/java/org/activiti/api/runtime/model/impl/ProcessInstanceImpl.java
@@ -35,6 +35,9 @@ public class ProcessInstanceImpl implements ProcessInstance {
     private String parentId;
     private Integer processDefinitionVersion;
 
+    public ProcessInstanceImpl() {
+    }
+
     @Override
     public String getId() {
         return id;
diff --git a/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java b/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
index ca5493b97f..ff10dd7656 100644
--- a/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
+++ b/activiti-api-task-model-impl/src/main/java/org/activiti/api/task/model/impl/TaskImpl.java
@@ -49,7 +49,9 @@ public class TaskImpl implements Task {
         this.status = status;
     }
 
-
+    public void setId(String id) {
+        this.id = id;
+    }
 
     public String getId() {
         return id;",adding setId for TaskImpl and default constructor for ProcessInstanceImpl,"""Added no-arg constructor to ProcessInstanceImpl and setId method to TaskImpl""",Added no-arg constructor to ProcessInstanceImpl and added setId method to TaskImpl.,"""Added default constructor to ProcessInstanceImpl and setter for id in TaskImpl""

Explanation:

* In the file `ProcessInstanceImpl.java`, a default constructor (public ProcessInstanceImpl()) has been added.
* In the file `TaskImpl.java`, a setter method (public void setId(String id)) has been added.",Added default constructor to ProcessInstanceImpl and id setter to TaskImpl.
"diff --git a/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java b/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java
index 55abdf165b..45832d66cc 100644
--- a/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java
+++ b/org.springframework.context/src/test/java/org/springframework/cache/vendor/AbstractNativeCacheTest.java
@@ -63,7 +63,7 @@ public abstract class AbstractNativeCacheTest<T> {
 
 		assertNull(cache.get(key));
 		cache.put(key, value);
-		assertEquals(value, cache.get(key));
+		assertEquals(value, cache.get(key).get());
 	}
 
 	@Test",revise cache API .,"""Fixed cache retrieval in AbstractNativeCacheTest to handle Optional values""","""Update AbstractNativeCacheTest to correctly retrieve cached value""","""Update AbstractNativeCacheTest to use get() method on cache result""

This commit updates the `AbstractNativeCacheTest` class, specifically the assertion in the `putGet()` test method. The `assertEquals` method now uses the `get()` method on the result of the `cache.get(key)` call, which presumably returns an optional or some other wrapper type that requires the `get()` method to retrieve the actual value. This change might have been necessary if the cache implementation was changed to return a wrapper type instead of the direct value.",Fix test in AbstractNativeCacheTest to correctly compare cache value by using .get() method.
"diff --git a/DEVELOPERS b/DEVELOPERS
index ce33c7f77e..62ba204198 100644
--- a/DEVELOPERS
+++ b/DEVELOPERS
@@ -6,3 +6,4 @@ Matthias Geiger (since 2015)
 Oscar Gustafsson (since 2015)
 Tobias Diez (since 2015)
 Christoph Schwentker (since 2016)
+Linus Dietz (since 2017)",Add Linus Dietz as developer : party :,"""Add Linus Dietz to DEVELOPERS file""","""Added Linus Dietz to the list of developers.""","Added Linus Dietz to the DEVELOPERS file.

This change reflects the addition of a new developer, Linus Dietz, to the project as of 2017. The DEVELOPERS file is typically used to maintain a list of contributors or maintainers of a software project, so it's important to keep it up-to-date as new people join the team.",Added Linus Dietz to the list of developers in the DEVELOPERS file.
"diff --git a/library/src/main/java/com/google/android/exoplayer/util/PriorityHandlerThread.java b/library/src/main/java/com/google/android/exoplayer/util/PriorityHandlerThread.java
new file mode 100644
index 0000000000..86f77ffa3b
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/util/PriorityHandlerThread.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.util;
+
+import android.os.HandlerThread;
+import android.os.Process;
+
+/**
+ * A {@link HandlerThread} with a specified process priority.
+ */
+public class PriorityHandlerThread extends HandlerThread {
+
+  private final int priority;
+
+  /**
+   * @param name The name of the thread.
+   * @param priority The priority level. See {@link Process#setThreadPriority(int)} for details.
+   */
+  public PriorityHandlerThread(String name, int priority) {
+    super(name);
+    this.priority = priority;
+  }
+
+  @Override
+  public void run() {
+    Process.setThreadPriority(priority);
+    super.run();
+  }
+
+}",Add missing class .,"""Added PriorityHandlerThread class for setting thread priority""","""Add PriorityHandlerThread class to manage thread priority""

However, a more detailed and conventional commit message would be:

""Add PriorityHandlerThread class to manage thread priority, allowing for specified process priority levels.""

This commit message follows the conventional format of being concise, yet descriptive, and includes the key changes made in the commit.","""Added PriorityHandlerThread class: a HandlerThread with a specified process priority""

This commit introduces a new class `PriorityHandlerThread` in the package `com.google.android.exoplayer.util`. This class extends the `HandlerThread` class and allows setting a specific process priority. The class has a constructor that takes a thread name and a priority level as arguments. The `run()` method is overridden to set the thread priority before calling the superclass's `run()` method. The Apache License 2.0 is used for the copyright notice and license terms.","""Add PriorityHandlerThread class to manage HandlerThread with specified process priority in ExoPlayer utility."""
"diff --git a/document/src/vespa/document/fieldvalue/serializablearray.cpp b/document/src/vespa/document/fieldvalue/serializablearray.cpp
index a2d92100dde..6309338eb3b 100644
--- a/document/src/vespa/document/fieldvalue/serializablearray.cpp
+++ b/document/src/vespa/document/fieldvalue/serializablearray.cpp
@@ -191,7 +191,7 @@ SerializableArray::deCompress() // throw (DeserializeException)
         if (unCompressed.getDataLen() != (size_t)_uncompressedLength) {
             throw DeserializeException(
                     vespalib::make_string(
-                            ""Did not decompress to the expected length: had %"" PRIu64 "", wanted %"" PRId32 "", got %"" PRIu64,
+                            ""Did not decompress to the expected length: had %"" PRIu64 "", wanted %d, got %"" PRIu64,
                             _compSerData->getRemaining(), _uncompressedLength, unCompressed.getDataLen()),
                     VESPA_STRLOC);
         }
diff --git a/fastos/src/vespa/fastos/thread.h b/fastos/src/vespa/fastos/thread.h
index 1bbda9d7372..a6ef359342a 100644
--- a/fastos/src/vespa/fastos/thread.h
+++ b/fastos/src/vespa/fastos/thread.h
@@ -15,6 +15,7 @@
 #include <vespa/fastos/mutex.h>
 #include <vespa/fastos/cond.h>
 
+typedef pthread_t FastOS_ThreadId;
 
 class FastOS_Runnable;
 class FastOS_ThreadInterface;
diff --git a/fastos/src/vespa/fastos/types.h b/fastos/src/vespa/fastos/types.h
index ea7bf7a5a88..fddf79437d4 100644
--- a/fastos/src/vespa/fastos/types.h
+++ b/fastos/src/vespa/fastos/types.h
@@ -58,10 +58,6 @@
 
 #include <sys/socket.h>
 
-#ifndef SHUT_RDWR
-#define SHUT_RDWR 2
-#endif
-
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <netdb.h>
@@ -113,7 +109,7 @@
 #include <getopt.h>
 
 /* 64bit printf specifiers */
-#ifdef FASTOS_64BIT_LONG
+#if (__WORDSIZE == 64)
 
   #ifndef PRIu64
     #define PRIu64        ""lu""
@@ -125,5 +121,3 @@
 #else /* ! FASTOS_64BIT_LONG */
   #error ""Only 64 environments are supported.""
 #endif /* FASTOS_64BIT_LONG */
-
-typedef pthread_t FastOS_ThreadId;
diff --git a/fastos/src/vespa/fastos/unix_socket.cpp b/fastos/src/vespa/fastos/unix_socket.cpp
index 8e0b4b5e658..a6cce42bfad 100644
--- a/fastos/src/vespa/fastos/unix_socket.cpp
+++ b/fastos/src/vespa/fastos/unix_socket.cpp
@@ -20,10 +20,6 @@ bool FastOS_UNIX_Socket::Close()
     return rc;
 }
 
-#ifndef SHUT_WR
-#define SHUT_WR 1
-#endif
-
 bool FastOS_UNIX_Socket::Shutdown()
 {
     bool rc=true;
diff --git a/vespalib/src/vespa/vespalib/util/atomic.h b/vespalib/src/vespa/vespalib/util/atomic.h
index 77f1f7554ae..c9259671cae 100644
--- a/vespalib/src/vespa/vespalib/util/atomic.h
+++ b/vespalib/src/vespa/vespalib/util/atomic.h
@@ -67,7 +67,7 @@ public:
     static inline int64_t postDec(volatile int64_t *data);
     static inline bool cmpSwap(volatile int64_t * dest, int64_t newVal, int64_t oldVal);
 
-#if defined(FASTOS_64BIT_LONG)
+#if defined(__x86_64__)
     static inline bool cmpSwap(volatile long long * dest, long long newVal, long long oldVal);
     static inline bool cmpSwap(volatile unsigned long long * dest, unsigned long long newVal, unsigned long long oldVal);
 #endif
@@ -75,8 +75,6 @@ public:
 
 #if defined(__x86_64__)
     #define VESPALIB_ATOMIC_TAGGEDPTR_ALIGNMENT __attribute__ ((aligned (16)))
-#elif defined(__i386__)
-    #define VESPALIB_ATOMIC_TAGGEDPTR_ALIGNMENT
 #else
     #error ""VESPALIB_ATOMIC_TAGGEDPTR_ALIGNMENT can not be defined.""
 #endif",Remove more unused defines,"""Refactor and cleanup code, including type definitions and macro usage.""","The commit message should be:

""Fix 64-bit support and pthread compatibility issues""

This message captures the essence of the changes made in the commit, which include fixing issues related to 64-bit support and pthread compatibility.","""Update serializablearray.cpp, thread.h, types.h, unix_socket.cpp, and atomic.h""

The changes include:

1. In serializablearray.cpp, the format string for a log message has been modified to use ""%d"" instead of ""%"" PRId32 for the wanted length.
2. In thread.h, a typedef for FastOS_ThreadId has been added.
3. In types.h, the macro for SHUT_RDWR has been removed, and the check for FASTOS_64BIT_LONG has been replaced with a check for ""\_\_WORDSIZE == 64"". Also, the typedef for FastOS_ThreadId has been removed.
4. In unix_socket.cpp, the macro for SHUT_WR has been removed.
5. In atomic.h, the check for FASTOS_64BIT_LONG has been replaced with a check for ""\_\_x86\_64\_\_"", and the VESPALIB_ATOMIC_TAGGEDPTR_ALIGNMENT macro has been updated. Additionally, the check for ""\_\_i386\_\_"" has been removed.","""Adjust printf specifiers and define FastOS_ThreadId directly for better type handling, remove redundant SHUT defines and align macros for atomic operations."""
"diff --git a/h2o-samples/src/main/java/samples/launchers/CloudRemote.java b/h2o-samples/src/main/java/samples/launchers/CloudRemote.java
index 9b5b0517e..d4b7c674e 100644
--- a/h2o-samples/src/main/java/samples/launchers/CloudRemote.java
+++ b/h2o-samples/src/main/java/samples/launchers/CloudRemote.java
@@ -14,16 +14,16 @@ import water.util.Log;
  */
 public class CloudRemote {
   public static void main(String[] args) throws Exception {
-    launchEC2(null);
+    launchEC2(null, 4);
     // launchDefaultIPs(null);
   }
 
   /**
    * Starts EC2 machines and builds a cluster.
    */
-  public static void launchEC2(Class<? extends Job> job) throws Exception {
+  public static void launchEC2(Class<? extends Job> job, int boxes) throws Exception {
     EC2 ec2 = new EC2();
-    ec2.boxes = 4;
+    ec2.boxes = boxes;
     Cloud c = ec2.resize();
     launch(c, job);
   }
diff --git a/src/main/java/water/deploy/EC2.java b/src/main/java/water/deploy/EC2.java
index 0d994d705..e9d4b6dbc 100644
--- a/src/main/java/water/deploy/EC2.java
+++ b/src/main/java/water/deploy/EC2.java
@@ -94,7 +94,7 @@ public class EC2 {
 
     if( instances.size() > boxes ) {
       for( int i = 0; i < instances.size() - boxes; i++ ) {
-        // TODO terminate
+        // TODO terminate?
       }
     } else if( instances.size() < boxes ) {
       int launchCount = boxes - instances.size();
@@ -106,16 +106,29 @@ public class EC2 {
           throw new Exception(""Aborted"");
       }
 
-      RunInstancesRequest request = new RunInstancesRequest();
-      request.withInstanceType(type);
-      request.withImageId(image);
-      request.withMinCount(launchCount).withMaxCount(launchCount);
-      request.withSecurityGroupIds(securityGroup);
-      request.withUserData(new String(Base64.encodeBase64(cloudConfig.getBytes())));
+      CreatePlacementGroupRequest group = new CreatePlacementGroupRequest();
+      group.withGroupName(USER);
+      group.withStrategy(PlacementStrategy.Cluster);
+      try {
+        ec2.createPlacementGroup(group);
+      } catch( AmazonServiceException ex ) {
+        if( !""InvalidPlacementGroup.Duplicate"".equals(ex.getErrorCode()) )
+          throw ex;
+      }
 
-      RunInstancesResult runInstances = ec2.runInstances(request);
+      RunInstancesRequest run = new RunInstancesRequest();
+      run.withInstanceType(type);
+      run.withImageId(image);
+      run.withMinCount(launchCount).withMaxCount(launchCount);
+      run.withSecurityGroupIds(securityGroup);
+      Placement placement = new Placement();
+      placement.setGroupName(USER);
+      run.withPlacement(placement);
+      run.withUserData(new String(Base64.encodeBase64(cloudConfig.getBytes())));
+
+      RunInstancesResult runRes = ec2.runInstances(run);
       ArrayList<String> ids = new ArrayList<String>();
-      for( Instance instance : runInstances.getReservation().getInstances() )
+      for( Instance instance : runRes.getReservation().getInstances() )
         ids.add(instance.getInstanceId());
 
       List<Instance> created = wait(ec2, ids);
@@ -123,9 +136,9 @@ public class EC2 {
       instances.addAll(created);
     }
 
-    String[] pub = new String[instances.size()];
-    String[] prv = new String[instances.size()];
-    for( int i = 0; i < instances.size(); i++ ) {
+    String[] pub = new String[boxes];
+    String[] prv = new String[boxes];
+    for( int i = 0; i < boxes; i++ ) {
       pub[i] = instances.get(i).getPublicIpAddress();
       prv[i] = instances.get(i).getPrivateIpAddress();
     }",Added placement groups to the sample launchers,"""Added support for dynamic number of EC2 boxes and cluster placement strategy""","""Added support for specifying the number of EC2 boxes to launch""","""Update CloudRemote and EC2 to allow specifying number of boxes""

Explanation:
The changes made in this commit are as follows:

1. In the `CloudRemote` class, the `launchEC2` method has been modified to accept an additional parameter `boxes` of type `int`, which represents the number of boxes (EC2 instances) to launch. The default value of `boxes` is 4.
2. In the `EC2` class, the `resize` method has been updated to create a new placement group with the strategy set to ""Cluster"". This ensures that the EC2 instances are launched in close proximity to each other, which can improve performance.
3. The `runInstances` method has been updated to set the placement group for the new instances.
4. The `wait` method has been updated to wait for all the new instances to enter the ""running"" state before returning.
5. The `resize` method now returns an array of public and private IP addresses for the launched instances.

Overall, these changes allow the user to specify the number of EC2 instances to launch and ensure that they are launched in close proximity to each other for better performance.",Added option to specify the number of EC2 instances to launch and improved placement group handling.
"diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/MeasurementToolFragment.java b/OsmAnd/src/net/osmand/plus/measurementtool/MeasurementToolFragment.java
index f85c657198..0b8909183b 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/MeasurementToolFragment.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/MeasurementToolFragment.java
@@ -62,6 +62,7 @@ import net.osmand.plus.measurementtool.adapter.MeasurementToolItemTouchHelperCal
 import net.osmand.plus.measurementtool.command.AddPointCommand;
 import net.osmand.plus.measurementtool.command.ClearPointsCommand;
 import net.osmand.plus.measurementtool.command.MeasurementCommandManager;
+import net.osmand.plus.measurementtool.command.MeasurementModeCommand.MeasurementCommandType;
 import net.osmand.plus.measurementtool.command.MovePointCommand;
 import net.osmand.plus.measurementtool.command.RemovePointCommand;
 import net.osmand.plus.measurementtool.command.ReorderPointCommand;
@@ -307,7 +308,10 @@ public class MeasurementToolFragment extends Fragment {
 		undoBtn.setOnClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View view) {
-				commandManager.undo();
+				MeasurementCommandType type = commandManager.undo();
+				if (type != null && type != MeasurementCommandType.SNAP_TO_ROAD) {
+					recalculateSnapToRoadIfNedeed();
+				}
 				if (commandManager.canUndo()) {
 					enable(undoBtn);
 				} else {
@@ -328,6 +332,7 @@ public class MeasurementToolFragment extends Fragment {
 			@Override
 			public void onClick(View view) {
 				commandManager.redo();
+				recalculateSnapToRoadIfNedeed();
 				if (commandManager.canRedo()) {
 					enable(redoBtn);
 				} else {
@@ -478,6 +483,15 @@ public class MeasurementToolFragment extends Fragment {
 		return view;
 	}
 
+	private void recalculateSnapToRoadIfNedeed() {
+		if (calculationProgress != null) {
+			calculationProgress.isCancelled = true;
+		}
+		if (isInSnapToRoadMode) {
+			doSnapToRoad();
+		}
+	}
+
 	@Override
 	public void onDestroyView() {
 		super.onDestroyView();
@@ -590,6 +604,9 @@ public class MeasurementToolFragment extends Fragment {
 			@Override
 			public void clearAllOnClick() {
 				commandManager.execute(new ClearPointsCommand(measurementLayer));
+				if (calculationProgress != null) {
+					calculationProgress.isCancelled = true;
+				}
 				if (pointsListOpened) {
 					hidePointsList();
 				}
@@ -617,13 +634,7 @@ public class MeasurementToolFragment extends Fragment {
 			public void deleteOnClick() {
 				clearSelection();
 				if (measurementLayer != null) {
-					int position = measurementLayer.getSelectedPointPos();
-					commandManager.execute(new RemovePointCommand(measurementLayer, position));
-					adapter.notifyDataSetChanged();
-					disable(redoBtn);
-					updateText();
-					saved = false;
-					hidePointsListIfNoPoints();
+					removePoint(measurementLayer, measurementLayer.getSelectedPointPos());
 					measurementLayer.clearSelection();
 				}
 			}
@@ -674,6 +685,16 @@ public class MeasurementToolFragment extends Fragment {
 		};
 	}
 
+	private void removePoint(MeasurementToolLayer layer, int position) {
+		commandManager.execute(new RemovePointCommand(layer, position));
+		recalculateSnapToRoadIfNedeed();
+		adapter.notifyDataSetChanged();
+		disable(redoBtn);
+		updateText();
+		saved = false;
+		hidePointsListIfNoPoints();
+	}
+
 	private SaveAsNewTrackFragmentListener createSaveAsNewTrackFragmentListener() {
 		return new SaveAsNewTrackFragmentListener() {
 			@Override
@@ -699,12 +720,7 @@ public class MeasurementToolFragment extends Fragment {
 			@Override
 			public void onRemoveClick(int position) {
 				if (measurementLayer != null) {
-					commandManager.execute(new RemovePointCommand(measurementLayer, position));
-					adapter.notifyDataSetChanged();
-					disable(redoBtn);
-					updateText();
-					saved = false;
-					hidePointsListIfNoPoints();
+					removePoint(measurementLayer, position);
 				}
 			}
 
@@ -739,6 +755,7 @@ public class MeasurementToolFragment extends Fragment {
 					toPosition = holder.getAdapterPosition();
 					if (toPosition >= 0 && fromPosition >= 0 && toPosition != fromPosition) {
 						commandManager.execute(new ReorderPointCommand(measurementLayer, fromPosition, toPosition));
+						recalculateSnapToRoadIfNedeed();
 						adapter.notifyDataSetChanged();
 						disable(redoBtn);
 						updateText();
@@ -807,7 +824,6 @@ public class MeasurementToolFragment extends Fragment {
 			params.calculationProgressCallback = new RoutingHelper.RouteCalculationProgressCallback() {
 				@Override
 				public void updateProgress(int progress) {
-					snapToRoadProgressBar.setVisibility(View.VISIBLE);
 					snapToRoadProgressBar.setProgress(progress);
 				}
 
@@ -841,9 +857,10 @@ public class MeasurementToolFragment extends Fragment {
 					}
 				}
 			};
+			snapToRoadProgressBar.setVisibility(View.VISIBLE);
 
 			mapActivity.getMyApplication().getRoutingHelper().recalculateSnapToRoad(start, end, intermediates, params);
-		} else {
+		} else if (calculationProgress != null) {
 			calculationProgress.isCancelled = true;
 		}
 	}
@@ -853,7 +870,9 @@ public class MeasurementToolFragment extends Fragment {
 		toolBarController.setTitle(previousToolBarTitle);
 		isInSnapToRoadMode = false;
 		mainIcon.setImageDrawable(getActiveIcon(R.drawable.ic_action_ruler));
-		calculationProgress.isCancelled = true;
+		if (calculationProgress != null) {
+			calculationProgress.isCancelled = true;
+		}
 		MapActivity mapActivity = getMapActivity();
 		if (mapActivity != null) {
 			mapActivity.findViewById(R.id.snap_to_road_image_button).setVisibility(View.GONE);
@@ -928,11 +947,7 @@ public class MeasurementToolFragment extends Fragment {
 			WptPt oldPoint = measurementLayer.getSelectedCachedPoint();
 			int position = measurementLayer.getSelectedPointPos();
 			commandManager.execute(new MovePointCommand(measurementLayer, oldPoint, newPoint, position));
-			enable(undoBtn, upDownBtn);
-			disable(redoBtn);
-			updateText();
-			adapter.notifyDataSetChanged();
-			saved = false;
+			doAddOrMovePointCommonStuff();
 			measurementLayer.exitMovePointMode();
 			measurementLayer.clearSelection();
 			measurementLayer.refreshMap();
@@ -1112,11 +1127,7 @@ public class MeasurementToolFragment extends Fragment {
 		MeasurementToolLayer measurementLayer = getMeasurementLayer();
 		if (measurementLayer != null) {
 			commandManager.execute(new AddPointCommand(measurementLayer, false));
-			enable(undoBtn, upDownBtn);
-			disable(redoBtn);
-			updateText();
-			adapter.notifyDataSetChanged();
-			saved = false;
+			doAddOrMovePointCommonStuff();
 		}
 	}
 
@@ -1124,11 +1135,7 @@ public class MeasurementToolFragment extends Fragment {
 		MeasurementToolLayer measurementLayer = getMeasurementLayer();
 		if (measurementLayer != null) {
 			commandManager.execute(new AddPointCommand(measurementLayer, true));
-			enable(undoBtn, upDownBtn);
-			disable(redoBtn);
-			updateText();
-			adapter.notifyDataSetChanged();
-			saved = false;
+			doAddOrMovePointCommonStuff();
 		}
 	}
 
@@ -1137,15 +1144,20 @@ public class MeasurementToolFragment extends Fragment {
 		MeasurementToolLayer measurementLayer = getMeasurementLayer();
 		if (measurementLayer != null) {
 			added = commandManager.execute(new AddPointCommand(measurementLayer, position));
-			enable(undoBtn, upDownBtn);
-			disable(redoBtn);
-			updateText();
-			adapter.notifyDataSetChanged();
-			saved = false;
+			doAddOrMovePointCommonStuff();
 		}
 		return added;
 	}
 
+	private void doAddOrMovePointCommonStuff() {
+		recalculateSnapToRoadIfNedeed();
+		enable(undoBtn, upDownBtn);
+		disable(redoBtn);
+		updateText();
+		adapter.notifyDataSetChanged();
+		saved = false;
+	}
+
 	private void showPointsList() {
 		pointsListOpened = true;
 		upDownBtn.setImageDrawable(downIcon);
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/AddPointCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/AddPointCommand.java
index 6de9d2702c..1d4582dc17 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/AddPointCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/AddPointCommand.java
@@ -44,4 +44,9 @@ public class AddPointCommand extends MeasurementModeCommand {
 		measurementLayer.refreshMap();
 		measurementLayer.moveMapToPoint(position);
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.ADD_POINT;
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/ClearPointsCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/ClearPointsCommand.java
index 97e4afc4d2..f80340def6 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/ClearPointsCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/ClearPointsCommand.java
@@ -40,4 +40,9 @@ public class ClearPointsCommand extends MeasurementModeCommand {
 		measurementLayer.getSnappedToRoadPoints().clear();
 		measurementLayer.refreshMap();
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.CLEAR_POINTS;
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementCommandManager.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementCommandManager.java
index 503cae2704..4261271adb 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementCommandManager.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementCommandManager.java
@@ -1,6 +1,9 @@
 package net.osmand.plus.measurementtool.command;
 
+import android.support.annotation.Nullable;
+
 import net.osmand.plus.measurementtool.MeasurementToolLayer;
+import net.osmand.plus.measurementtool.command.MeasurementModeCommand.MeasurementCommandType;
 
 import java.util.Deque;
 import java.util.LinkedList;
@@ -27,20 +30,26 @@ public class MeasurementCommandManager {
 		return false;
 	}
 
-	public void undo() {
+	@Nullable
+	public MeasurementCommandType undo() {
 		if (canUndo()) {
 			MeasurementModeCommand command = undoCommands.pop();
 			redoCommands.push(command);
 			command.undo();
+			return command.getType();
 		}
+		return null;
 	}
 
-	public void redo() {
+	@Nullable
+	public MeasurementCommandType redo() {
 		if (canRedo()) {
 			MeasurementModeCommand command = redoCommands.pop();
 			undoCommands.push(command);
 			command.redo();
+			return command.getType();
 		}
+		return null;
 	}
 
 	public void resetMeasurementLayer(MeasurementToolLayer layer) {
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementModeCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementModeCommand.java
index 20d48372d3..f0fb2133ea 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementModeCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/MeasurementModeCommand.java
@@ -2,11 +2,22 @@ package net.osmand.plus.measurementtool.command;
 
 import net.osmand.plus.measurementtool.MeasurementToolLayer;
 
-abstract class MeasurementModeCommand implements Command {
+public abstract class MeasurementModeCommand implements Command {
 
 	MeasurementToolLayer measurementLayer;
 
 	void setMeasurementLayer(MeasurementToolLayer layer) {
 		this.measurementLayer = layer;
 	}
+
+	abstract MeasurementCommandType getType();
+
+	public enum MeasurementCommandType {
+		ADD_POINT,
+		CLEAR_POINTS,
+		MOVE_POINT,
+		REMOVE_POINT,
+		REORDER_POINT,
+		SNAP_TO_ROAD
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/MovePointCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/MovePointCommand.java
index b5cd4252f1..242f981ea1 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/MovePointCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/MovePointCommand.java
@@ -34,4 +34,9 @@ public class MovePointCommand extends MeasurementModeCommand {
 		measurementLayer.getMeasurementPoints().add(position, newPoint);
 		measurementLayer.refreshMap();
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.MOVE_POINT;
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/RemovePointCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/RemovePointCommand.java
index dea29a4e9d..380e55e331 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/RemovePointCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/RemovePointCommand.java
@@ -32,4 +32,9 @@ public class RemovePointCommand extends MeasurementModeCommand {
 		measurementLayer.getMeasurementPoints().remove(position);
 		measurementLayer.refreshMap();
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.REMOVE_POINT;
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/ReorderPointCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/ReorderPointCommand.java
index ecaf081d9c..69c9218a28 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/ReorderPointCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/ReorderPointCommand.java
@@ -34,4 +34,9 @@ public class ReorderPointCommand extends MeasurementModeCommand {
 		Collections.swap(measurementLayer.getMeasurementPoints(), from, to);
 		measurementLayer.refreshMap();
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.REORDER_POINT;
+	}
 }
diff --git a/OsmAnd/src/net/osmand/plus/measurementtool/command/SnapToRoadCommand.java b/OsmAnd/src/net/osmand/plus/measurementtool/command/SnapToRoadCommand.java
index cf00791eaf..ceb4d1bdd2 100644
--- a/OsmAnd/src/net/osmand/plus/measurementtool/command/SnapToRoadCommand.java
+++ b/OsmAnd/src/net/osmand/plus/measurementtool/command/SnapToRoadCommand.java
@@ -33,4 +33,9 @@ public class SnapToRoadCommand extends MeasurementModeCommand {
 		measurementLayer.getSnappedToRoadPoints().addAll(snappedPoints);
 		measurementLayer.refreshMap();
 	}
+
+	@Override
+	MeasurementCommandType getType() {
+		return MeasurementCommandType.SNAP_TO_ROAD;
+	}
 }",Recalculate snap to road after adding changes,"""Refactor MeasurementToolFragment to improve undo/redo functionality and snap to road calculation""","""Added MeasurementCommandType enum and implemented getType() method in MeasurementModeCommand and its subclasses to track command types and improve undo/redo functionality""","""Refactor MeasurementToolFragment and add MeasurementCommandType""

This commit introduces the following changes:

1. A new enum `MeasurementCommandType` is added to the `MeasurementModeCommand` class. This enum represents the types of commands that can be executed in the measurement tool.

2. A new method `getType()` is added to the `MeasurementModeCommand` class. This method returns the type of the command.

3. The `getType()` method is implemented in all the classes that extend `MeasurementModeCommand`: `AddPointCommand`, `ClearPointsCommand`, `MovePointCommand`, `RemovePointCommand`, `ReorderPointCommand`, and `SnapToRoadCommand`.

4. The `MeasurementCommandManager` class is modified to return the type of the command in the `undo()` and `redo()` methods.

5. The `MeasurementToolFragment` class is modified to handle the `MeasurementCommandType` returned by the `undo()` and `redo()` methods of `MeasurementCommandManager`.

6. A new method `recalculateSnapToRoadIfNedeed()` is added to the `MeasurementToolFragment` class. This method recalculates the snap to road if needed.

7. The `removePoint()` method is added to the `MeasurementToolFragment` class. This method removes a point from the measurement layer.

8. The `doAddOrMovePointCommonStuff()` method is added to the `MeasurementToolFragment` class. This method performs the common actions when a point is added or moved.

9. The `MeasurementToolFragment` class is modified to use the new `removePoint()` and `doAddOrMovePointCommonStuff()` methods.

10. The visibility of the `snapToRoadProgressBar` is set to visible in the `doSnapToRoad()` method of the `MeasurementToolFragment` class.

11. The `MeasurementCommandType` is imported in the `MeasurementToolFragment` class.

12. The `addPoint()` method of the `MeasurementToolFragment` class is modified to return a boolean value.

These changes improve the code structure and make it more maintainable. The new `MeasurementCommandType` enum allows for better handling of the different types of commands. The new methods in the `MeasurementToolFragment` class make the code more modular and easier to understand.","""Add command type handling for measurement tool commands and implement snap-to-road recalculations."""
"diff --git a/engine/src/main/java/org/camunda/bpm/engine/impl/el/JuelExpression.java b/engine/src/main/java/org/camunda/bpm/engine/impl/el/JuelExpression.java
index bfa641755d..58dc36870b 100644
--- a/engine/src/main/java/org/camunda/bpm/engine/impl/el/JuelExpression.java
+++ b/engine/src/main/java/org/camunda/bpm/engine/impl/el/JuelExpression.java
@@ -52,13 +52,13 @@ public class JuelExpression implements Expression {
         .handleInvocation(invocation);
       return invocation.getInvocationResult();      
     } catch (PropertyNotFoundException pnfe) {
-      throw new ProcessEngineException(""Unknown property used in expression: "" + expressionText, pnfe);
+      throw new ProcessEngineException(""Unknown property used in expression: "" + expressionText+"". Cause: ""+pnfe.getMessage(), pnfe);
     } catch (MethodNotFoundException mnfe) {
-      throw new ProcessEngineException(""Unknown method used in expression: "" + expressionText, mnfe);
+      throw new ProcessEngineException(""Unknown method used in expression: "" + expressionText+"". Cause: ""+mnfe.getMessage(), mnfe);
     } catch(ELException ele) {
-      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText, ele);
+      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText+"". Cause: ""+ele.getMessage(), ele);
     } catch (Exception e) {
-      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText, e);
+      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText+"". Cause: ""+e.getMessage(), e);
     }
   }
     
@@ -70,7 +70,7 @@ public class JuelExpression implements Expression {
         .getDelegateInterceptor()
         .handleInvocation(invocation);
     } catch (Exception e) {
-      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText, e);
+      throw new ProcessEngineException(""Error while evaluating expression: "" + expressionText+"". Cause: ""+e.getMessage(), e);
     }
   }
   ",adding context to UEL Exceptions,"""Enhance JuelExpression error messages to include cause details""","""Improved error handling in JuelExpression by including cause in ProcessEngineException messages.""","The commit message could be: ""Added more detailed error messages to JuelExpression exception handling""

The changes in the code are adding more detailed error messages to the exceptions thrown in the JuelExpression class. The original error messages only included the expression text, while the new error messages also include the cause of the exception. This should make it easier to debug issues related to expression evaluation in the Camunda BPM engine.",Enhanced exception messages in JuelExpression to include the cause of the exception for better error diagnostics.
"diff --git a/spring-cloud-gateway-sample/src/main/java/org/springframework/cloud/gateway/sample/GatewaySampleApplication.java b/spring-cloud-gateway-sample/src/main/java/org/springframework/cloud/gateway/sample/GatewaySampleApplication.java
index 8232830f..b8995c40 100644
--- a/spring-cloud-gateway-sample/src/main/java/org/springframework/cloud/gateway/sample/GatewaySampleApplication.java
+++ b/spring-cloud-gateway-sample/src/main/java/org/springframework/cloud/gateway/sample/GatewaySampleApplication.java
@@ -24,6 +24,11 @@ import org.springframework.cloud.gateway.EnableGateway;
 import org.springframework.cloud.gateway.route.RouteLocator;
 import org.springframework.cloud.gateway.route.Routes;
 import org.springframework.context.annotation.Bean;
+import org.springframework.web.reactive.function.BodyInserters;
+import org.springframework.web.reactive.function.server.RequestPredicates;
+import org.springframework.web.reactive.function.server.RouterFunction;
+import org.springframework.web.reactive.function.server.RouterFunctions;
+import org.springframework.web.reactive.function.server.ServerResponse;
 
 import static org.springframework.cloud.gateway.filter.factory.WebFilterFactories.addResponseHeader;
 import static org.springframework.cloud.gateway.handler.predicate.RoutePredicates.host;
@@ -68,6 +73,14 @@ public class GatewaySampleApplication {
 		return new ThrottleWebFilterFactory();
 	}
 
+	@Bean
+	public RouterFunction<ServerResponse> testFunRouterFunction() {
+		RouterFunction<ServerResponse> route = RouterFunctions.route(
+				RequestPredicates.path(""/testfun""),
+				request -> ServerResponse.ok().body(BodyInserters.fromObject(""hello"")));
+		return route;
+	}
+
 	public static void main(String[] args) {
 		SpringApplication.run(GatewaySampleApplication.class, args);
 	}",Add sample RouterFunction,"""Added test router function for '/testfun' endpoint""","Added support for server-side routing with Spring WebFlux

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of server-side routing support using Spring WebFlux, which is the main functionality introduced in the code changes.","""Added a new Bean for a RouterFunction in GatewaySampleApplication""

This commit introduces a new method `testFunRouterFunction()` annotated with `@Bean` in the `GatewaySampleApplication` class. This method returns a `RouterFunction<ServerResponse>` object, which is a functional programming approach to handle HTTP requests in Spring WebFlux. The `RouterFunction` is configured to respond to the path ""/testfun"" with a simple ""hello"" message.","Added RouterFunction bean to handle ""/testfun"" endpoint with a simple ""hello"" response in GatewaySampleApplication."
"diff --git a/camera/camera-core/src/main/java/androidx/camera/core/ImageAnalysis.java b/camera/camera-core/src/main/java/androidx/camera/core/ImageAnalysis.java
index 7b3522225ac..25f675b66e2 100644
--- a/camera/camera-core/src/main/java/androidx/camera/core/ImageAnalysis.java
+++ b/camera/camera-core/src/main/java/androidx/camera/core/ImageAnalysis.java
@@ -262,10 +262,10 @@ public final class ImageAnalysis extends UseCase {
     /**
      * Sets the target rotation.
      *
-     * <p>This informs the use case so it can adjust the rotation value sent to
-     * {@link Analyzer#analyze(ImageProxy)} which provides rotation information to the
-     * analysis method. The rotation parameter sent to the analyzer will be the rotation, which if
-     * applied to the output image, will make the image match target rotation specified here.
+     * <p>This adjust the {@link ImageInfo#getRotationDegrees()} of the {@link ImageProxy} passed
+     * to {@link Analyzer#analyze(ImageProxy)}. The rotation value of ImageInfo will be the
+     * rotation, which if applied to the output image, will make the image match target rotation
+     * specified here.
      *
      * <p>While rotation can also be set via {@link Builder#setTargetRotation(int)}, using
      * {@link ImageAnalysis#setTargetRotation(int)} allows the target rotation to be set
@@ -801,8 +801,10 @@ public final class ImageAnalysis extends UseCase {
         /**
          * Sets the rotation of the intended target for images from this configuration.
          *
-         * <p>The rotation parameter sent to the analyzer will be the rotation, which if applied to
-         * the output image, will make the image match target rotation specified here.
+         * <p>This adjust the {@link ImageInfo#getRotationDegrees()} of the {@link ImageProxy}
+         * passed to {@link Analyzer#analyze(ImageProxy)}. The rotation value of ImageInfo will
+         * be the rotation, which if applied to the output image, will make the image match
+         * target rotation specified here.
          *
          * <p>This is one of four valid values: {@link Surface#ROTATION_0}, {@link
          * Surface#ROTATION_90}, {@link Surface#ROTATION_180}, {@link Surface#ROTATION_270}.
diff --git a/camera/camera-core/src/main/java/androidx/camera/core/ImageCapture.java b/camera/camera-core/src/main/java/androidx/camera/core/ImageCapture.java
index 258f53f5885..624097f5387 100644
--- a/camera/camera-core/src/main/java/androidx/camera/core/ImageCapture.java
+++ b/camera/camera-core/src/main/java/androidx/camera/core/ImageCapture.java
@@ -501,9 +501,9 @@ public class ImageCapture extends UseCase {
      * Sets the desired rotation of the output image.
      *
      * <p>This will affect the EXIF rotation metadata in images saved by takePicture calls and the
-     * rotation value returned by {@link OnImageCapturedCallback}.  These will be set to be the
-     * rotation, which if applied to the output image data, will make the image match target
-     * rotation specified here.
+     * {@link ImageInfo#getRotationDegrees()} value of the {@link ImageProxy} returned by
+     * {@link OnImageCapturedCallback}. These will be set to be the rotation, which if applied to
+     * the output image data, will make the image match target rotation specified here.
      *
      * <p>While rotation can also be set via {@link Builder#setTargetRotation(int)}, using
      * {@link ImageCapture#setTargetRotation(int)} allows the target rotation to be set dynamically.
@@ -1927,11 +1927,11 @@ public class ImageCapture extends UseCase {
         /**
          * Sets the rotation of the intended target for images from this configuration.
          *
-         * <p>This will affect the EXIF rotation metadata in images saved by takePicture calls and
-         * the rotation value returned by
-         * {@link androidx.camera.core.ImageCapture.OnImageCapturedCallback}.  These will be set to
-         * be the rotation, which if applied to the output image data, will make the image match the
-         * target rotation specified here.
+         * This will affect the EXIF rotation metadata in images saved by takePicture calls and the
+         * {@link ImageInfo#getRotationDegrees()} value of the {@link ImageProxy} returned by
+         * {@link OnImageCapturedCallback}. These will be set to be the rotation, which if
+         * applied to the output image data, will make the image match the target rotation
+         * specified here.
          *
          * <p>This is one of four valid values: {@link Surface#ROTATION_0}, {@link
          * Surface#ROTATION_90}, {@link Surface#ROTATION_180}, {@link Surface#ROTATION_270}.
diff --git a/camera/camera-core/src/main/java/androidx/camera/core/ImageInfo.java b/camera/camera-core/src/main/java/androidx/camera/core/ImageInfo.java
index 1d3f0bd2f0d..c3def192d23 100644
--- a/camera/camera-core/src/main/java/androidx/camera/core/ImageInfo.java
+++ b/camera/camera-core/src/main/java/androidx/camera/core/ImageInfo.java
@@ -25,12 +25,13 @@ public interface ImageInfo {
      * Returns the tag of the metadata.
      *
      * @hide
-     * */
+     */
     @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
     @Nullable
     Object getTag();
 
-    /** Returns the timestamp of the metadata.
+    /**
+     * Returns the timestamp of the metadata.
      *
      * Details on the timestamp depend on the source providing the image, and the method providing
      * the image contains more documentation.
@@ -40,9 +41,26 @@ public interface ImageInfo {
     long getTimestamp();
 
     /**
-      * The rotation which if applied to the image would make it match the current target
-     * rotation of the {@link UseCase} that produced it. The rotationDegrees will be a value in {0,
-     * 90, 180, 270}.
+     * Returns the rotation needed to transform the image to the correct orientation.
+     *
+     * <p> This is a clockwise rotation in degrees that needs to be applied to the image buffer.
+     * Note that for images that are in {@link android.graphics.ImageFormat#JPEG} this value will
+     * match the rotation defined in the EXIF.
+     *
+     * <p> The target rotation is set at the time the image capture was requested.
+     *
+     * <p> The correct orientation of the image is dependent upon the producer of the image. For
+     * example, if the {@link ImageProxy} that contains this instance of ImageInfo is produced
+     * by an {@link ImageCapture}, then the rotation will be determined by
+     * {@link ImageCapture#setTargetRotation(int)} or
+     * {@link ImageCapture.Builder#setTargetRotation(int)}.
+     *
+     * @return The rotation in degrees which will be a value in {0, 90, 180, 270}.
+     * @see ImageCapture#setTargetRotation(int)
+     * @see ImageCapture.Builder#setTargetRotation(int)
+     * @see ImageAnalysis#setTargetRotation(int)
+     * @see ImageAnalysis.Builder#setTargetRotation(int)
      */
+    // TODO(b/122806727) Need to correctly set EXIF in JPEG images
     int getRotationDegrees();
 }",Updated javadoc for ImageInfo . getRotationDegrees ( ) .,"""Update ImageAnalysis and ImageCapture to use ImageInfo for rotation information""","""Update ImageInfo and ImageCapture/ImageAnalysis to correctly describe rotation behavior and add documentation for getRotationDegrees()""","""Update ImageAnalysis and ImageCapture rotation documentation and add rotation degree getter to ImageInfo""

This commit updates the documentation for the `setTargetRotation()` methods in the `ImageAnalysis` and `ImageCapture` classes to provide more clarity on how the target rotation affects the rotation value sent to the analyzer or saved in the image metadata. It also adds a new `getRotationDegrees()` method to the `ImageInfo` interface to allow callers to retrieve the rotation value of an image.

In `ImageAnalysis`, the documentation now explains that the `setTargetRotation()` method adjusts the `ImageInfo.getRotationDegrees()` value of the `ImageProxy` passed to the `Analyzer.analyze()` method, rather than directly modifying the rotation value sent to the analyzer.

In `ImageCapture`, the documentation now explains that the `setTargetRotation()` method affects the EXIF rotation metadata in saved images and the `ImageInfo.getRotationDegrees()` value of the `ImageProxy` returned by the `OnImageCapturedCallback`.

Finally, the new `getRotationDegrees()` method in `ImageInfo` allows callers to retrieve the rotation value of an image, which is useful for correctly orienting the image when displaying it or performing further processing. The method returns the rotation value that would make the image match the current target rotation of the `UseCase` that produced it.",Update documentation for ImageAnalysis and ImageCapture rotation handling and ImageInfo rotation degrees explanation.
"diff --git a/sample-mvi/build.gradle b/sample-mvi/build.gradle
index bfd9dba..3633543 100644
--- a/sample-mvi/build.gradle
+++ b/sample-mvi/build.gradle
@@ -81,6 +81,11 @@ dependencies {
 
   compile ""com.github.akarnokd:rxjava2-interop:0.7.2""
 
+
+  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
+  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
+  testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
+
   compile ""com.jakewharton.rxbinding:rxbinding:$rxbindingVersion""
   compile ""com.jakewharton.rxbinding:rxbinding-support-v4:$rxbindingVersion""
   compile ""com.jakewharton.rxbinding:rxbinding-design:$rxbindingVersion""
diff --git a/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/SampleApplication.java b/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/SampleApplication.java
index 621d490..da8c175 100644
--- a/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/SampleApplication.java
+++ b/sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/SampleApplication.java
@@ -20,6 +20,8 @@ package com.hannesdorfmann.mosby3.sample.mvi;
 import android.app.Application;
 import android.content.Context;
 import com.hannesdorfmann.mosby3.sample.mvi.dependencyinjection.DependencyInjection;
+import com.squareup.leakcanary.LeakCanary;
+import com.squareup.leakcanary.RefWatcher;
 import timber.log.Timber;
 
 /**
@@ -38,4 +40,22 @@ public class SampleApplication extends Application {
   public static DependencyInjection getDependencyInjection(Context context) {
     return ((SampleApplication) context.getApplicationContext()).dependencyInjection;
   }
+
+
+  public static RefWatcher getRefWatcher(Context context) {
+    SampleApplication application = (SampleApplication) context.getApplicationContext();
+    return application.refWatcher;
+  }
+
+  private RefWatcher refWatcher;
+
+  @Override public void onCreate() {
+    super.onCreate();
+    if (LeakCanary.isInAnalyzerProcess(this)) {
+      // This process is dedicated to LeakCanary for heap analysis.
+      // You should not init your app in this process.
+      return;
+    }
+    refWatcher = LeakCanary.install(this);
+  }
 }",Added LeakCanary to sample - mvi <issue_id>,"""Add LeakCanary for memory leak detection""",Added LeakCanary for memory leak detection and monitoring.,"""Add LeakCanary library and initialization to SampleApplication""

This commit adds the LeakCanary library to the project's dependencies and initializes it in the SampleApplication's onCreate() method. It also adds a static method getRefWatcher() to retrieve the RefWatcher instance from the application context. The LeakCanary library is used to detect memory leaks in Android applications.","Add LeakCanary for memory leak detection and setup RefWatcher in SampleApplication for debug, release, and test builds."
"diff --git a/pom.xml b/pom.xml
index 308d8d59e..a736991ea 100644
--- a/pom.xml
+++ b/pom.xml
@@ -343,7 +343,7 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-javadoc-plugin</artifactId>
-                <version>2.7</version>
+                <version>2.</version>
   ",updated maven javadoc plugin,"""Downgrade maven-javadoc-plugin version to 2""","""Downgrade maven-javadoc-plugin to version 2.""","""Updated Maven JavaDoc Plugin version from 2.7 to 2. in pom.xml""",Updated maven-javadoc-plugin version in pom.xml from 2.7 to 2.
"diff --git a/tests/ballerina-test-integration/src/test/resources/testng.xml b/tests/ballerina-test-integration/src/test/resources/testng.xml
index 273838a448b..0e68a8d6412 100644
--- a/tests/ballerina-test-integration/src/test/resources/testng.xml
+++ b/tests/ballerina-test-integration/src/test/resources/testng.xml
@@ -46,12 +46,15 @@
         <!--</packages>-->
     <!--</test>-->
 
-    <!--<test name=""ballerina-web-socket-sample-tests"" preserve-order=""true"" parallel=""false"">-->
-        <!--<classes>-->
+    <test name=""ballerina-web-socket-sample-tests"" preserve-order=""true"" parallel=""false"">
+        <classes>
             <!--<class name=""org.ballerinalang.test.service.websocket.sample.WebSocketPassThroughTestCase""/>-->
             <!--<class name=""org.ballerinalang.test.service.websocket.sample.WebSocketAutoPingPongTest""/>-->
-        <!--</classes>-->
-    <!--</test>-->
+            <class name=""org.ballerinalang.test.service.websocket.sample.WebSocketSimpleProxyTestCase""/>
+            <class name=""org.ballerinalang.test.service.websocket.sample.WebSocketQueryAndPathParamSupportTestCase""/>
+        </classes>
+    </test>
+
     <test name=""ballerina-grpc-sample-tests"" preserve-order=""true"" parallel=""false"">
         <classes>
             <class name=""org.ballerinalang.test.service.grpc.sample.UnaryBlockingBasicTestCase""/>",Add test cases to testng . xml,"""Added WebSocket test cases to ballerina-web-socket-sample-tests suite""",Added WebSocketSimpleProxyTestCase and WebSocketQueryAndPathParamSupportTestCase to ballerina-web-socket-sample-tests in testng.xml.,"""Added WebSocket sample tests and removed commented out code in testng.xml""","Enable WebSocket sample tests: WebSocketSimpleProxyTestCase, WebSocketQueryAndPathParamSupportTestCase"
"diff --git a/src/com/owncloud/android/ui/fragment/ExtendedListFragment.java b/src/com/owncloud/android/ui/fragment/ExtendedListFragment.java
index 8ef1792a25..3816c38f88 100644
--- a/src/com/owncloud/android/ui/fragment/ExtendedListFragment.java
+++ b/src/com/owncloud/android/ui/fragment/ExtendedListFragment.java
@@ -453,12 +453,13 @@ public class ExtendedListFragment extends Fragment
     }
 
     protected void setChoiceMode(int choiceMode) {
-        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            mListView.setChoiceMode(choiceMode);
-            mGridView.setChoiceMode(choiceMode);
-        } else {
-            ((ListView)mListView).setChoiceMode(choiceMode);
-        }
+        mListView.setChoiceMode(choiceMode);
+        mGridView.setChoiceMode(choiceMode);
+    }
+
+    protected void setMultiChoiceModeListener(AbsListView.MultiChoiceModeListener listener) {
+        mListView.setMultiChoiceModeListener(listener);
+        mGridView.setMultiChoiceModeListener(listener);
     }
 
     protected void registerForContextMenu() {
diff --git a/src/com/owncloud/android/ui/fragment/OCFileListFragment.java b/src/com/owncloud/android/ui/fragment/OCFileListFragment.java
index 95b7c8e7fd..b1c85f95d0 100644
--- a/src/com/owncloud/android/ui/fragment/OCFileListFragment.java
+++ b/src/com/owncloud/android/ui/fragment/OCFileListFragment.java
@@ -31,6 +31,7 @@ import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.view.ActionMode;
+import android.view.ContextMenu;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -41,6 +42,7 @@ import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.AdapterView.AdapterContextMenuInfo;
 import android.widget.PopupMenu;
+import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -342,9 +344,10 @@ public class OCFileListFragment extends ExtendedListFragment {
     }
 
     private void registerLongClickListener() {
-        getListView().setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
+        AbsListView listView = getListView();
+        setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
+        setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
             private Menu menu;
-
             @Override
             public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
                 final int checkedCount = getListView().getCheckedItemCount();",Add MultiChoiceModeListener for both listView and gridView,"""Refactor choice mode and multi choice mode listener handling in ExtendedListFragment""","""Refactor ExtendedListFragment to remove Android version checks for setChoiceMode and setMultiChoiceModeListener""","""Refactor ExtendedListFragment and OCFileListFragment to handle choice mode and multi-choice mode listener""

Explanation: The changes in the code suggest that the `ExtendedListFragment` class has been refactored to include two new methods: `setChoiceMode(int choiceMode)` and `setMultiChoiceModeListener(AbsListView.MultiChoiceModeListener listener)`. These methods are used to set the choice mode and the multi-choice mode listener for both the list view and the grid view.

In the `OCFileListFragment` class, the `registerLongClickListener()` method has been updated to use these new methods. It first sets the choice mode to `ListView.CHOICE_MODE_MULTIPLE_MODAL`, then sets the multi-choice mode listener. This is a refactoring change as it doesn't add new functionality, but rather improves the existing code structure.","""Refactored choice mode and multi-choice mode listener setup for ListView and GridView in ExtendedListFragment and OCFileListFragment."""
"diff --git a/core/src/main/java/hudson/model/Computer.java b/core/src/main/java/hudson/model/Computer.java
index afad020673..dec1b10d27 100644
--- a/core/src/main/java/hudson/model/Computer.java
+++ b/core/src/main/java/hudson/model/Computer.java
@@ -1067,6 +1067,17 @@ public /*transient*/ abstract class Computer extends Actionable implements Acces
         return firstDemand;
     }
 
+    /**
+     * Returns the {@link Node} description for this computer
+     */
+    @Restricted(DoNotUse.class)
+    @Exported
+    public @Nonnull String getDescription() {
+        Node node = getNode();
+        return (node != null) ? node.getNodeDescription() : null;
+    }
+
+
     /**
      * Called by {@link Executor} to kill excessive executors from this computer.
      */",Added description field to the \' Computer \' api,"""Added Computer.getDescription() method to retrieve Node description""",Added `getDescription()` method to Computer class to retrieve Node description.,"""Added a new method `getDescription()` to the `Computer` class in Hudson's core module. This method returns the Node description for this computer.""",Added `getDescription` method to `Computer` class to return the `Node` description.
"diff --git a/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeApplication.java b/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeApplication.java
new file mode 100644
index 0000000000..a2917be105
--- /dev/null
+++ b/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeApplication.java
@@ -0,0 +1,7 @@
+package com.baeldung.spring.jdbc.template.testing;
+
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class EmployeeApplication {
+}
diff --git a/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAO.java b/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAO.java
index 64b146fd47..15da78ce35 100644
--- a/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAO.java
+++ b/persistence-modules/spring-jdbc/src/main/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAO.java
@@ -13,6 +13,10 @@ public class EmployeeDAO {
         jdbcTemplate = new JdbcTemplate(dataSource);
     }
 
+    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
+        this.jdbcTemplate = jdbcTemplate;
+    }
+
     public int getCountOfEmployees() {
         return jdbcTemplate.queryForObject(""SELECT COUNT(*) FROM EMPLOYEE"", Integer.class);
     }
diff --git a/persistence-modules/spring-jdbc/src/test/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAOIntegrationTest.java b/persistence-modules/spring-jdbc/src/test/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAOIntegrationTest.java
new file mode 100644
index 0000000000..9634c3e0d7
--- /dev/null
+++ b/persistence-modules/spring-jdbc/src/test/java/com/baeldung/spring/jdbc/template/testing/EmployeeDAOIntegrationTest.java
@@ -0,0 +1,24 @@
+package com.baeldung.spring.jdbc.template.testing;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.test.context.jdbc.Sql;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+@JdbcTest
+@Sql({""schema.sql"", ""test-data.sql""})
+class EmployeeDAOIntegrationTest {
+    @Autowired
+    private JdbcTemplate jdbcTemplate;
+
+    @Test
+    void whenInjectInMemoryDataSource_thenReturnCorrectEmployeeCount() {
+        EmployeeDAO employeeDAO = new EmployeeDAO();
+        employeeDAO.setJdbcTemplate(jdbcTemplate);
+
+        assertEquals(4, employeeDAO.getCountOfEmployees());
+    }
+}",Added example of @ JdbcTest usage,"""Added EmployeeApplication class and EmployeeDAOIntegrationTest for Spring JDBC template testing""","Added EmployeeDAO integration test and modified EmployeeDAO to accept JdbcTemplate instance.

Alternatively, you could also use a more concise commit message:

Added EmployeeDAO integration test and made EmployeeDAO injectable.

Or:

Refactored EmployeeDAO to be injectable and added integration test.","""Added EmployeeApplication class, setJdbcTemplate method in EmployeeDAO, and EmployeeDAOIntegrationTest class for testing""

This commit includes the addition of three components:

1. EmployeeApplication class: This is the main class for the Spring Boot application. It is annotated with @SpringBootApplication, indicating that it is a Spring Boot application.

2. setJdbcTemplate method in EmployeeDAO: This method sets the JdbcTemplate instance in the EmployeeDAO class. It is used to set the JdbcTemplate instance that is autowired in the EmployeeDAOIntegrationTest class.

3. EmployeeDAOIntegrationTest class: This is a JUnit test class for testing the EmployeeDAO class. It uses the @JdbcTest and @Sql annotations to set up an in-memory database for testing. The test method whenInjectInMemoryDataSource_thenReturnCorrectEmployeeCount tests the getCountOfEmployees method in the EmployeeDAO class by comparing the returned count with the expected count.","""Add EmployeeApp, setter in EmployeeDAO, and integration test for employee count with in-memory DB setup"""
"diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle.properties
index 84c1dabfbf..1178b62e50 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle.properties
@@ -145,3 +145,5 @@ two_dots = Two consecutive dots
 uk = Ukrainian
 
 unpaired_brackets = Unpaired bracket or similar symbol
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_cs.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_cs.properties
index 0c5f6226e9..49734724ce 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_cs.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_cs.properties
@@ -145,3 +145,5 @@ two_dots = Dv\u011B po sebe jdouc\u00ED te\u010Dky
 uk = Ukrajinsky
 
 unpaired_brackets = Nesp\u00E1rovan\u00E9 z\u00E1vorky nebo podobn\u00FD symbol
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_es.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_es.properties
index 0b110cd2ab..b55936e9a4 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_es.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_es.properties
@@ -143,3 +143,5 @@ two_dots = Dos puntos consecutivos
 uk = ucraniano
 
 unpaired_brackets = Se ha encontrado un error en los par\u00E9ntesis, comillas, signos de exclamaci\u00F3n o interrogaci\u00F3n
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_fr.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_fr.properties
index ba64cb328e..05eba7dda3 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_fr.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_fr.properties
@@ -145,3 +145,5 @@ two_dots = Deux points cons\u00E9cutif
 uk = Ukrainien
 
 unpaired_brackets = Il manque une parenth\u00E8se fermante ou ouvrante, guillemet fermant ou ouvrant etc.
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_lt.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_lt.properties
index 9d5fd96f03..adbfff5175 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_lt.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_lt.properties
@@ -146,3 +146,5 @@ uk = ukrainie\u010Di\u0173
 
 #fixme:
 unpaired_brackets = Unpaired bracket or similar symbol
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_nl.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_nl.properties
index 628a54310a..6e5e6499f6 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_nl.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_nl.properties
@@ -145,3 +145,5 @@ two_dots = Twee opeenvolgende punten
 uk = Oekra\u00EFens
 
 unpaired_brackets = Oneven aantal teksthaken
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_pl.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_pl.properties
index 71ca2cf03e..d73a577c19 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_pl.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_pl.properties
@@ -145,3 +145,5 @@ two_dots = Dwie kropki
 uk = ukrai\u0144ski
 
 unpaired_brackets = Niesparowany cudzys\u0142\u00F3w, nawias itd.
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_sl.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_sl.properties
index a5a049deaf..944460ac95 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_sl.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_sl.properties
@@ -145,3 +145,5 @@ two_dots = Dve zaporedni piki
 uk = ukrajin\u0161\u010Dina
 
 unpaired_brackets = Neparni oklepaji ali podobni znaki
+
+guiMenuShowMainWindow = Open main window
diff --git a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_uk.properties b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_uk.properties
index 33080cb19b..7d7d27da75 100644
--- a/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_uk.properties
+++ b/trunk/JLanguageTool/src/java/de/danielnaber/languagetool/MessagesBundle_uk.properties
@@ -145,3 +145,5 @@ two_dots = \u041F\u043E\u0434\u0432\u0456\u0439\u043D\u0430 \u043A\u0440\u0430\u
 uk = \u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430
 
 unpaired_brackets = \u041D\u0435\u043F\u0430\u0440\u043D\u0456 \u0434\u0443\u0436\u043A\u0438 \u0430\u0431\u043E \u0456\u043D\u0448\u0456 \u0432\u0438\u043E\u043A\u0440\u0435\u043C\u043B\u044E\u0432\u0430\u043B\u043D\u0456 \u0441\u0438\u043C\u0432\u043E\u043B\u0438
+
+guiMenuShowMainWindow = Open main window","adding new key , needs to be translated","""Added translation for 'Open main window' in multiple languages""","""Added translations for 'guiMenuShowMainWindow' to various language bundles.""",Added a new property 'guiMenuShowMainWindow' to the MessagesBundle properties files for various languages. The English version of the property is 'Open main window'.,"Added ""Open main window"" translation entry to multiple language properties files for the LanguageTool GUI menu."
"diff --git a/sbe-tool/src/main/cpp/otf_api/Ir.cpp b/sbe-tool/src/main/cpp/otf_api/Ir.cpp
index 581cef75..199573d6 100644
--- a/sbe-tool/src/main/cpp/otf_api/Ir.cpp
+++ b/sbe-tool/src/main/cpp/otf_api/Ir.cpp
@@ -140,6 +140,11 @@ bool Ir::end() const
     return impl_->tokenCodec.tokenSize();
 }
 
+::int32_t Ir::componentTokenCount() const
+{
+    return impl_->tokenCodec.componentTokenCount();
+}
+
 Ir::TokenSignal Ir::signal() const
 {
     // the serialized IR and the Ir::TokenSignal enums MUST be kept in sync!
diff --git a/sbe-tool/src/main/cpp/otf_api/Ir.h b/sbe-tool/src/main/cpp/otf_api/Ir.h
index caf90502..1d32e355 100644
--- a/sbe-tool/src/main/cpp/otf_api/Ir.h
+++ b/sbe-tool/src/main/cpp/otf_api/Ir.h
@@ -186,6 +186,8 @@ public:
     ::int32_t offset() const;
     /// Retrieve the size value of the current token
     ::int32_t size() const;
+    /// Retrieve the count of tokens in current component
+    ::int32_t componentTokenCount() const;
     /// Retrieve the Ir::TokenSignal of the current token
     TokenSignal signal() const;
     /// Retrieve the Ir::TokenByteOrder of the current token
diff --git a/sbe-tool/src/main/cpp/otf_api/Token.h b/sbe-tool/src/main/cpp/otf_api/Token.h
new file mode 100644
index 00000000..4c05dd96
--- /dev/null
+++ b/sbe-tool/src/main/cpp/otf_api/Token.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2015 Real Logic Ltd.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef _TOKEN_H
+#define _TOKEN_H
+
+#include ""Ir.h""
+
+namespace sbe {
+namespace on_the_fly {
+
+/*
+ * Hold the state for a single token in the IR
+ */
+class Token
+{
+public:
+    Token(int index, const Ir *ir);
+
+private:
+    int offset_;
+    int index_;
+};
+
+}}
+
+#endif //TOKEN_H
diff --git a/sbe-tool/src/main/cpp/uk_co_real_logic_sbe_ir_generated/TokenCodec.hpp b/sbe-tool/src/main/cpp/uk_co_real_logic_sbe_ir_generated/TokenCodec.hpp
index 09f16715..f3855201 100644
--- a/sbe-tool/src/main/cpp/uk_co_real_logic_sbe_ir_generated/TokenCodec.hpp
+++ b/sbe-tool/src/main/cpp/uk_co_real_logic_sbe_ir_generated/TokenCodec.hpp
@@ -84,7 +84,7 @@ public:
 
     static const sbe_uint16_t sbeBlockLength(void)
     {
-        return (sbe_uint16_t)20;
+        return (sbe_uint16_t)24;
     }
 
     static const sbe_uint16_t sbeTemplateId(void)
@@ -369,11 +369,65 @@ public:
         return *this;
     }
 
-    static const int signalId(void)
+    static const int componentTokenCountId(void)
     {
         return 15;
     }
 
+    static const int componentTokenCountSinceVersion(void)
+    {
+         return 0;
+    }
+
+    bool componentTokenCountInActingVersion(void)
+    {
+        return (actingVersion_ >= 0) ? true : false;
+    }
+
+
+    static const char *componentTokenCountMetaAttribute(const MetaAttribute::Attribute metaAttribute)
+    {
+        switch (metaAttribute)
+        {
+            case MetaAttribute::EPOCH: return ""unix"";
+            case MetaAttribute::TIME_UNIT: return ""nanosecond"";
+            case MetaAttribute::SEMANTIC_TYPE: return """";
+        }
+
+        return """";
+    }
+
+    static const sbe_int32_t componentTokenCountNullValue()
+    {
+        return SBE_NULLVALUE_INT32;
+    }
+
+    static const sbe_int32_t componentTokenCountMinValue()
+    {
+        return -2147483647;
+    }
+
+    static const sbe_int32_t componentTokenCountMaxValue()
+    {
+        return 2147483647;
+    }
+
+    sbe_int32_t componentTokenCount(void) const
+    {
+        return SBE_LITTLE_ENDIAN_ENCODE_32(*((sbe_int32_t *)(buffer_ + offset_ + 16)));
+    }
+
+    TokenCodec &componentTokenCount(const sbe_int32_t value)
+    {
+        *((sbe_int32_t *)(buffer_ + offset_ + 16)) = SBE_LITTLE_ENDIAN_ENCODE_32(value);
+        return *this;
+    }
+
+    static const int signalId(void)
+    {
+        return 16;
+    }
+
     static const int signalSinceVersion(void)
     {
          return 0;
@@ -399,18 +453,18 @@ public:
 
     SignalCodec::Value signal(void) const
     {
-        return SignalCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 16))));
+        return SignalCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 20))));
     }
 
     TokenCodec &signal(const SignalCodec::Value value)
     {
-        *((sbe_uint8_t *)(buffer_ + offset_ + 16)) = (value);
+        *((sbe_uint8_t *)(buffer_ + offset_ + 20)) = (value);
         return *this;
     }
 
     static const int primitiveTypeId(void)
     {
-        return 16;
+        return 17;
     }
 
     static const int primitiveTypeSinceVersion(void)
@@ -438,18 +492,18 @@ public:
 
     PrimitiveTypeCodec::Value primitiveType(void) const
     {
-        return PrimitiveTypeCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 17))));
+        return PrimitiveTypeCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 21))));
     }
 
     TokenCodec &primitiveType(const PrimitiveTypeCodec::Value value)
     {
-        *((sbe_uint8_t *)(buffer_ + offset_ + 17)) = (value);
+        *((sbe_uint8_t *)(buffer_ + offset_ + 21)) = (value);
         return *this;
     }
 
     static const int byteOrderId(void)
     {
-        return 17;
+        return 18;
     }
 
     static const int byteOrderSinceVersion(void)
@@ -477,18 +531,18 @@ public:
 
     ByteOrderCodec::Value byteOrder(void) const
     {
-        return ByteOrderCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 18))));
+        return ByteOrderCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 22))));
     }
 
     TokenCodec &byteOrder(const ByteOrderCodec::Value value)
     {
-        *((sbe_uint8_t *)(buffer_ + offset_ + 18)) = (value);
+        *((sbe_uint8_t *)(buffer_ + offset_ + 22)) = (value);
         return *this;
     }
 
     static const int presenceId(void)
     {
-        return 18;
+        return 19;
     }
 
     static const int presenceSinceVersion(void)
@@ -516,12 +570,12 @@ public:
 
     PresenceCodec::Value presence(void) const
     {
-        return PresenceCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 19))));
+        return PresenceCodec::get((*((sbe_uint8_t *)(buffer_ + offset_ + 23))));
     }
 
     TokenCodec &presence(const PresenceCodec::Value value)
     {
-        *((sbe_uint8_t *)(buffer_ + offset_ + 19)) = (value);
+        *((sbe_uint8_t *)(buffer_ + offset_ + 23)) = (value);
         return *this;
     }
 
@@ -554,7 +608,7 @@ public:
 
     static const int nameId(void)
     {
-        return 19;
+        return 20;
     }
 
 
@@ -629,7 +683,7 @@ public:
 
     static const int constValueId(void)
     {
-        return 20;
+        return 21;
     }
 
 
@@ -704,7 +758,7 @@ public:
 
     static const int minValueId(void)
     {
-        return 21;
+        return 22;
     }
 
 
@@ -779,7 +833,7 @@ public:
 
     static const int maxValueId(void)
     {
-        return 22;
+        return 23;
     }
 
 
@@ -854,7 +908,7 @@ public:
 
     static const int nullValueId(void)
     {
-        return 23;
+        return 24;
     }
 
 
@@ -929,7 +983,7 @@ public:
 
     static const int characterEncodingId(void)
     {
-        return 24;
+        return 25;
     }
 
 
@@ -1004,7 +1058,7 @@ public:
 
     static const int epochId(void)
     {
-        return 25;
+        return 26;
     }
 
 
@@ -1079,7 +1133,7 @@ public:
 
     static const int timeUnitId(void)
     {
-        return 26;
+        return 27;
     }
 
 
@@ -1154,7 +1208,7 @@ public:
 
     static const int semanticTypeId(void)
     {
-        return 27;
+        return 28;
     }
 
 ",update IR codec and add Token class to hold IR tokens for rework of OTF .,"""Added componentTokenCount method to Ir class and updated TokenCodec to include componentTokenCount field""","Added componentTokenCount functionality to Ir API

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of the componentTokenCount functionality to the Ir API, which is the main change visible in the diff.","The commit message could be: ""Added componentTokenCount function to Ir class and updated TokenCodec.hpp to include component token count."" This message summarizes the changes made in the code, which are the addition of a new function `componentTokenCount()` in the `Ir` class and the inclusion of component token count in the `TokenCodec.hpp` file.","""Added componentTokenCount API and updated TokenCodec to handle new field. Adjusted token buffer offsets accordingly."""
"diff --git a/extensions/flac/src/androidTest/java/com/google/android/exoplayer2/ext/flac/FlacPlaybackTest.java b/extensions/flac/src/androidTest/java/com/google/android/exoplayer2/ext/flac/FlacPlaybackTest.java
index ccd0da4e19..c3c7b00149 100644
--- a/extensions/flac/src/androidTest/java/com/google/android/exoplayer2/ext/flac/FlacPlaybackTest.java
+++ b/extensions/flac/src/androidTest/java/com/google/android/exoplayer2/ext/flac/FlacPlaybackTest.java
@@ -34,6 +34,7 @@ import com.google.android.exoplayer2.extractor.mkv.MatroskaExtractor;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ProgressiveMediaSource;
 import com.google.android.exoplayer2.testutil.CapturingAudioSink;
+import com.google.android.exoplayer2.testutil.DumpFileAsserts;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import org.junit.Before;
 import org.junit.Test;
@@ -80,8 +81,8 @@ public class FlacPlaybackTest {
       throw testPlaybackRunnable.playbackException;
     }
 
-    audioSink.assertOutput(
-        ApplicationProvider.getApplicationContext(), fileName + "".audiosink.dump"");
+    DumpFileAsserts.assertOutput(
+        ApplicationProvider.getApplicationContext(), audioSink, fileName + "".audiosink.dump"");
   }
 
   private static class TestPlaybackRunnable implements Player.EventListener, Runnable {
diff --git a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/WebvttExtractorTest.java b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/WebvttExtractorTest.java
index 5f1169e222..5da804a996 100644
--- a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/WebvttExtractorTest.java
+++ b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/WebvttExtractorTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.ext.junit.runners.AndroidJUnit4;
 import com.google.android.exoplayer2.extractor.ExtractorInput;
+import com.google.android.exoplayer2.testutil.DumpFileAsserts;
 import com.google.android.exoplayer2.testutil.FakeExtractorInput;
 import com.google.android.exoplayer2.testutil.FakeExtractorOutput;
 import com.google.android.exoplayer2.testutil.TestUtil;
@@ -83,8 +84,10 @@ public class WebvttExtractorTest {
     // The output has a ~5s sampleTime and a large, negative subsampleOffset because the cue
     // timestamps are ~10 days ahead of the PTS (due to wrapping) so the offset is used to ensure
     // they're rendered at the right time.
-    output.assertOutput(
-        ApplicationProvider.getApplicationContext(), ""webvtt/with_x-timestamp-map_header.dump"");
+    DumpFileAsserts.assertOutput(
+        ApplicationProvider.getApplicationContext(),
+        output,
+        ""webvtt/with_x-timestamp-map_header.dump"");
   }
 
   private static boolean sniffData(byte[] data) throws IOException {
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
index ead5bd24d9..bf1ffdce0e 100644
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/CapturingAudioSink.java
@@ -15,18 +15,11 @@
  */
 package com.google.android.exoplayer2.testutil;
 
-import static com.google.common.truth.Truth.assertWithMessage;
-
-import android.content.Context;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.audio.AudioSink;
 import com.google.android.exoplayer2.audio.ForwardingAudioSink;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -35,15 +28,6 @@ import java.util.List;
 /** A {@link ForwardingAudioSink} that captures configuration, discontinuity and buffer events. */
 public final class CapturingAudioSink extends ForwardingAudioSink implements Dumper.Dumpable {
 
-  /**
-   * If true, makes {@link #assertOutput(Context, String)} method write the output to a file, rather
-   * than validating that the output matches the dump file.
-   *
-   * <p>The output file is written to the test apk's external storage directory, which is typically:
-   * {@code /sdcard/Android/data/${package-under-test}.test/files/}.
-   */
-  private static final boolean WRITE_DUMP = false;
-
   private final List<Dumper.Dumpable> interceptedData;
   @Nullable private ByteBuffer currentBuffer;
 
@@ -98,30 +82,6 @@ public final class CapturingAudioSink extends ForwardingAudioSink implements Dum
     super.reset();
   }
 
-  /**
-   * Asserts that dump of this sink is equal to expected dump which is read from {@code dumpFile}.
-   *
-   * <p>If assertion fails because of an intended change in the output or a new dump file needs to
-   * be created, set {@link #WRITE_DUMP} flag to true and run the test again. Instead of assertion,
-   * actual dump will be written to {@code dumpFile}. This new dump file needs to be copied to the
-   * project, {@code library/src/androidTest/assets} folder manually.
-   */
-  public void assertOutput(Context context, String dumpFile) throws IOException {
-    String actual = new Dumper().add(this).toString();
-
-    if (WRITE_DUMP) {
-      File directory = context.getExternalFilesDir(null);
-      File file = new File(directory, dumpFile);
-      Assertions.checkStateNotNull(file.getParentFile()).mkdirs();
-      PrintWriter out = new PrintWriter(file);
-      out.print(actual);
-      out.close();
-    } else {
-      String expected = TestUtil.getString(context, dumpFile);
-      assertWithMessage(dumpFile).that(actual).isEqualTo(expected);
-    }
-  }
-
   @Override
   public void dump(Dumper dumper) {
     for (int i = 0; i < interceptedData.size(); i++) {
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
new file mode 100644
index 0000000000..42884ec6f4
--- /dev/null
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/DumpFileAsserts.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.testutil;
+
+import static com.google.common.truth.Truth.assertWithMessage;
+
+import android.content.Context;
+import androidx.annotation.IntDef;
+import com.google.android.exoplayer2.util.Assertions;
+import com.google.common.base.StandardSystemProperty;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Helper class to enable assertions based on golden-data dump files.
+ *
+ * <p>Allows the golden files to be easily updated with new data (see more info in the docs on
+ * {@link #DUMP_FILE_ACTION}).
+ *
+ * <p>Compatible with {@link Dumper.Dumpable} but can also be used directly with Strings generated
+ * through different means.
+ */
+public class DumpFileAsserts {
+
+  private static final String DUMP_UPDATE_INSTRUCTIONS =
+      ""To update the dump file, change DumpFileAsserts#DUMP_FILE_ACTION to WRITE_TO_LOCAL (for""
+          + "" Robolectric tests) or WRITE_TO_DEVICE (for instrumentation tests) and re-run the""
+          + "" test."";
+
+  /** Possible actions to take with the dumps passed to {@link #assertOutput}. */
+  @Documented
+  @Retention(RetentionPolicy.SOURCE)
+  @IntDef(
+      flag = true,
+      value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})
+  private @interface DumpFilesAction {}
+  /** Compare output with existing dump file. */
+  private static final int COMPARE_WITH_EXISTING = 0;
+  /**
+   * Write output to the project folder {@code testdata/src/test}.
+   *
+   * <p>Enabling this option works when tests are run in Android Studio. It may not work when the
+   * tests are run in another environment.
+   */
+  private static final int WRITE_TO_LOCAL = 1;
+  /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
+  private static final int WRITE_TO_DEVICE = 1 << 1;
+
+  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
+
+  private DumpFileAsserts() {}
+
+  public static void assertOutput(Context context, Dumper.Dumpable actual, String dumpFile)
+      throws IOException {
+    assertOutput(context, new Dumper().add(actual).toString(), dumpFile);
+  }
+
+  /**
+   * Asserts that {@code actual} is equal to the contents of {@code dumpFile}.
+   *
+   * <p>If the assertion fails because of an intended change in the output or a new dump file needs
+   * to be created, set {@link #DUMP_FILE_ACTION} to {@link #WRITE_TO_LOCAL} for local tests and to
+   * {@link #WRITE_TO_DEVICE} for instrumentation tests, and run the test again. Instead of
+   * assertion, {@code actual} will be written to {@code dumpFile}. For instrumentation tests, this
+   * new dump file needs to be copied to the project {@code testdata/src/test} folder manually.
+   */
+  public static void assertOutput(Context context, String actual, String dumpFile)
+      throws IOException {
+    if (DUMP_FILE_ACTION == COMPARE_WITH_EXISTING) {
+      String expected;
+      try {
+        expected = TestUtil.getString(context, dumpFile);
+      } catch (FileNotFoundException e) {
+        throw new IOException(""Dump file not found. "" + DUMP_UPDATE_INSTRUCTIONS, e);
+      }
+      assertWithMessage(
+              ""Actual data doesn't match dump file: %s\n%s"", dumpFile, DUMP_UPDATE_INSTRUCTIONS)
+          .that(actual)
+          .isEqualTo(expected);
+    } else {
+      File file =
+          DUMP_FILE_ACTION == WRITE_TO_LOCAL
+              ? new File(StandardSystemProperty.USER_DIR.value(), ""../../testdata/src/test"")
+              : context.getExternalFilesDir(null);
+      file = new File(file, dumpFile);
+      Assertions.checkStateNotNull(file.getParentFile()).mkdirs();
+      PrintWriter out = new PrintWriter(file);
+      out.print(actual);
+      out.close();
+    }
+  }
+}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java
index 7411016177..c396e41f4a 100644
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java
@@ -326,9 +326,11 @@ public final class ExtractorAsserts {
     FakeExtractorOutput extractorOutput =
         consumeTestData(extractor, input, 0, true, deduplicateConsecutiveFormats);
     if (simulateUnknownLength) {
-      extractorOutput.assertOutput(context, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
+      DumpFileAsserts.assertOutput(
+          context, extractorOutput, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
     } else {
-      extractorOutput.assertOutput(context, dumpFilesPrefix + "".0"" + DUMP_EXTENSION);
+      DumpFileAsserts.assertOutput(
+          context, extractorOutput, dumpFilesPrefix + "".0"" + DUMP_EXTENSION);
     }
 
     // Seeking to (timeUs=0, position=0) should always work, and cause the same data to be output.
@@ -336,9 +338,11 @@ public final class ExtractorAsserts {
     input.reset();
     consumeTestData(extractor, input, /* timeUs= */ 0, extractorOutput, false);
     if (simulateUnknownLength) {
-      extractorOutput.assertOutput(context, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
+      DumpFileAsserts.assertOutput(
+          context, extractorOutput, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
     } else {
-      extractorOutput.assertOutput(context, dumpFilesPrefix + "".0"" + DUMP_EXTENSION);
+      DumpFileAsserts.assertOutput(
+          context, extractorOutput, dumpFilesPrefix + "".0"" + DUMP_EXTENSION);
     }
 
     SeekMap seekMap = Assertions.checkNotNull(extractorOutput.seekMap);
@@ -357,9 +361,11 @@ public final class ExtractorAsserts {
       extractorOutput.clearTrackOutputs();
       consumeTestData(extractor, input, timeUs, extractorOutput, false);
       if (simulateUnknownLength && timeUs == 0) {
-        extractorOutput.assertOutput(context, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
+        DumpFileAsserts.assertOutput(
+            context, extractorOutput, dumpFilesPrefix + UNKNOWN_LENGTH_EXTENSION);
       } else {
-        extractorOutput.assertOutput(context, dumpFilesPrefix + '.' + j + DUMP_EXTENSION);
+        DumpFileAsserts.assertOutput(
+            context, extractorOutput, dumpFilesPrefix + '.' + j + DUMP_EXTENSION);
       }
     }
   }
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java
index 6df4fc4dd2..6253ae4daa 100644
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java
@@ -16,57 +16,17 @@
 package com.google.android.exoplayer2.testutil;
 
 import static com.google.common.truth.Truth.assertThat;
-import static com.google.common.truth.Truth.assertWithMessage;
 
-import android.content.Context;
 import android.util.SparseArray;
-import androidx.annotation.IntDef;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
 import com.google.android.exoplayer2.extractor.SeekMap;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
 /** A fake {@link ExtractorOutput}. */
 public final class FakeExtractorOutput implements ExtractorOutput, Dumper.Dumpable {
 
-  private static final String DUMP_UPDATE_INSTRUCTIONS =
-      ""To update the dump file, change FakeExtractorOutput#DUMP_FILE_ACTION to WRITE_TO_LOCAL (for""
-          + "" Robolectric tests) or WRITE_TO_DEVICE (for instrumentation tests) and re-run the""
-          + "" test."";
-
-  /**
-   * Possible actions to take with the dumps generated from this {@code FakeExtractorOutput} in
-   * {@link #assertOutput(Context, String)}.
-   */
-  @Documented
-  @Retention(RetentionPolicy.SOURCE)
-  @IntDef(
-      flag = true,
-      value = {COMPARE_WITH_EXISTING, WRITE_TO_LOCAL, WRITE_TO_DEVICE})
-  private @interface DumpFilesAction {}
-  /** Compare output with existing dump file. */
-  private static final int COMPARE_WITH_EXISTING = 0;
-  /**
-   * Write output to the project folder {@code testdata/src/test/assets}.
-   *
-   * <p>Enabling this option works when tests are run in Android Studio. It may not work when the
-   * tests are run in another environment.
-   */
-  private static final int WRITE_TO_LOCAL = 1;
-  /** Write output to folder {@code /storage/emulated/0/Android/data} of device. */
-  private static final int WRITE_TO_DEVICE = 1 << 1;
-
-  @DumpFilesAction private static final int DUMP_FILE_ACTION = COMPARE_WITH_EXISTING;
-
   public final SparseArray<FakeTrackOutput> trackOutputs;
   private final FakeTrackOutput.Factory trackOutputFactory;
 
@@ -124,44 +84,6 @@ public final class FakeExtractorOutput implements ExtractorOutput, Dumper.Dumpab
     }
   }
 
-  /**
-   * Asserts that dump of this {@link FakeExtractorOutput} is equal to expected dump which is read
-   * from {@code dumpFile}.
-   *
-   * <p>If assertion fails because of an intended change in the output or a new dump file needs to
-   * be created, set {@link #DUMP_FILE_ACTION} to {@link #WRITE_TO_LOCAL} for local tests and to
-   * {@link #WRITE_TO_DEVICE} for instrumentation tests, and run the test again. Instead of
-   * assertion, actual dump will be written to {@code dumpFile}. For instrumentation tests, this new
-   * dump file needs to be copied to the project {@code testdata/src/test/assets} folder manually.
-   */
-  public void assertOutput(Context context, String dumpFile) throws IOException {
-    String actual = new Dumper().add(this).toString();
-
-    if (DUMP_FILE_ACTION == COMPARE_WITH_EXISTING) {
-      String expected;
-      try {
-        expected = TestUtil.getString(context, dumpFile);
-      } catch (FileNotFoundException e) {
-        throw new IOException(""Dump file not found. "" + DUMP_UPDATE_INSTRUCTIONS, e);
-      }
-      assertWithMessage(
-              ""Extractor output doesn't match dump file: %s\n%s"",
-              dumpFile, DUMP_UPDATE_INSTRUCTIONS)
-          .that(actual)
-          .isEqualTo(expected);
-    } else {
-      File file =
-          DUMP_FILE_ACTION == WRITE_TO_LOCAL
-              ? new File(System.getProperty(""user.dir""), ""../../testdata/src/test/assets"")
-              : context.getExternalFilesDir(null);
-      file = new File(file, dumpFile);
-      Assertions.checkStateNotNull(file.getParentFile()).mkdirs();
-      PrintWriter out = new PrintWriter(file);
-      out.print(actual);
-      out.close();
-    }
-  }
-
   @Override
   public void dump(Dumper dumper) {
     if (seekMap != null) {",Create a DumpFileAsserts from the dumpfile logic in FakeExtractorOutput .,Extract output assertions refactored to use DumpFileAsserts.,"""Refactor dump file assertions to use a new DumpFileAsserts class""","""Add DumpFileAsserts and update tests to use it""

This commit introduces a new class `DumpFileAsserts` which provides a static method `assertOutput` to compare the actual output with the expected output from a dump file. It also updates the `FlacPlaybackTest` and `WebvttExtractorTest` classes to use this new method instead of directly calling the `assertOutput` method on the `CapturingAudioSink` and `FakeExtractorOutput` respectively. Additionally, the `CapturingAudioSink` class no longer has a method to write the output to a file and the `WRITE_DUMP` flag has been removed.",Refactor output assertions into DumpFileAsserts utility class for improved consistency and maintenance.
"diff --git a/src/main/java/com/owncloud/android/ui/activity/UploadFilesActivity.java b/src/main/java/com/owncloud/android/ui/activity/UploadFilesActivity.java
index 7ad211d71c..d630ce8d46 100644
--- a/src/main/java/com/owncloud/android/ui/activity/UploadFilesActivity.java
+++ b/src/main/java/com/owncloud/android/ui/activity/UploadFilesActivity.java
@@ -93,6 +93,7 @@ public class UploadFilesActivity extends FileActivity implements
     private Account mAccountOnCreation;
     private DialogFragment mCurrentDialog;
     private Menu mOptionsMenu;
+    private SearchView mSearchView;
 
     public static final String EXTRA_CHOSEN_FILES =
             UploadFilesActivity.class.getCanonicalName() + "".EXTRA_CHOSEN_FILES"";
@@ -237,11 +238,11 @@ public class UploadFilesActivity extends FileActivity implements
 
         int fontColor = ThemeUtils.fontColor(this);
         final MenuItem item = menu.findItem(R.id.action_search);
-        SearchView searchView = (SearchView) MenuItemCompat.getActionView(item);
-        EditText editText = searchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
+        mSearchView = (SearchView) MenuItemCompat.getActionView(item);
+        EditText editText = mSearchView.findViewById(android.support.v7.appcompat.R.id.search_src_text);
         editText.setHintTextColor(fontColor);
         editText.setTextColor(fontColor);
-        ImageView searchClose = searchView.findViewById(android.support.v7.appcompat.R.id.search_close_btn);
+        ImageView searchClose = mSearchView.findViewById(android.support.v7.appcompat.R.id.search_close_btn);
         searchClose.setColorFilter(fontColor);
 
 
@@ -314,27 +315,43 @@ public class UploadFilesActivity extends FileActivity implements
         }
         return true;
     }
+
+    private boolean isSearchOpen() {
+        if (mSearchView == null) {
+            return false;
+        } else {
+            View mSearchEditFrame = mSearchView.findViewById(android.support.v7.appcompat.R.id.search_edit_frame);
+            return (mSearchEditFrame != null && mSearchEditFrame.getVisibility() == View.VISIBLE);
+        }
+    }
     
     @Override
     public void onBackPressed() {
-        if (mDirectories.getCount() <= 1) {
-            finish();
-            return;
-        }
-        popDirname();
-        mFileListFragment.onNavigateUp();
-        mCurrentDir = mFileListFragment.getCurrentDirectory();
-
-        if (mCurrentDir.getParentFile() == null) {
-            ActionBar actionBar = getSupportActionBar();
-            if (actionBar != null) {
-                actionBar.setDisplayHomeAsUpEnabled(false);
+        if (isSearchOpen() && mSearchView != null) {
+            mSearchView.setQuery("""", false);
+            mFileListFragment.onClose();
+            mSearchView.onActionViewCollapsed();
+            setDrawerIndicatorEnabled(isDrawerIndicatorAvailable());
+        } else {
+            if (mDirectories.getCount() <= 1) {
+                finish();
+                return;
+            }
+            popDirname();
+            mFileListFragment.onNavigateUp();
+            mCurrentDir = mFileListFragment.getCurrentDirectory();
+
+            if (mCurrentDir.getParentFile() == null) {
+                ActionBar actionBar = getSupportActionBar();
+                if (actionBar != null) {
+                    actionBar.setDisplayHomeAsUpEnabled(false);
+         ",fix bug found by CR .,"""Improve UploadFilesActivity search functionality and handle search view state on back press""","""Added search functionality to UploadFilesActivity""","""Refactor UploadFilesActivity: Add SearchView and isSearchOpen method""

Explanation:
This commit introduces a new SearchView and a method isSearchOpen() in the UploadFilesActivity class. The SearchView is used to enable search functionality in the activity. The isSearchOpen() method checks whether the search view is currently open or not. Additionally, the onBackPressed() method has been modified to handle the case when the search view is open. If it is open, the search view is closed and the file list is refreshed. If it is not open, the previous behavior of navigating up the directory hierarchy is retained. The changes in this commit improve the user interface by making it more consistent with the material design guidelines and enabling search functionality.","""Add search functionality and handle back press to close search in UploadFilesActivity."""
"diff --git a/src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java b/src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java
index a9c4f117f..d1099db88 100644
--- a/src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java
+++ b/src/main/java/com/xtremelabs/robolectric/shadows/ShadowPreference.java
@@ -20,6 +20,7 @@ public class ShadowPreference {
 	protected String key;
 	protected CharSequence title;
 	protected CharSequence summary;
+	protected Object defaultValue;
 	
 	public void __constructor__(Context context) {
 		__constructor__(context, null, 0);
@@ -132,4 +133,13 @@ public class ShadowPreference {
 		return key;
 	}
 	
+	@Implementation
+	public void setDefaultValue(Object defaultValue) {
+		this.defaultValue = defaultValue;
+	}
+	
+	public Object getDefaultValue() {
+		return defaultValue;
+	}
+	
 }
diff --git a/src/test/java/com/xtremelabs/robolectric/shadows/PreferenceTest.java b/src/test/java/com/xtremelabs/robolectric/shadows/PreferenceTest.java
index 3de58e8a9..42967cf26 100644
--- a/src/test/java/com/xtremelabs/robolectric/shadows/PreferenceTest.java
+++ b/src/test/java/com/xtremelabs/robolectric/shadows/PreferenceTest.java
@@ -116,6 +116,15 @@ public class PreferenceTest {
 		preference.setSummary(R.string.hello);
 		assertThat(preference.getSummary(), equalTo(expected));	
 	}
+	
+	@Test
+	public void shouldRememberDefaultValue() {
+		Object defaultValue = ""Zoodles was here"";
+		
+		assertThat(shadow.getDefaultValue(), nullValue());
+		preference.setDefaultValue(defaultValue);
+		assertThat(shadow.getDefaultValue(), sameInstance(defaultValue));
+	}
 
 	
 	@Test",Added ShadowPreference support for default value,"""Added support for default value in ShadowPreference""","According to the diff, the commit message should be:

""Add support for default values to ShadowPreference""

This commit message accurately reflects the changes made in the code, which include adding a `defaultValue` field to `ShadowPreference`, a `setDefaultValue` method, and a `getDefaultValue` method.","""Added support for getting and setting default value in ShadowPreference""

Explanation: The diff shows that the file ShadowPreference.java has been modified to add a new field `defaultValue` and new methods `setDefaultValue(Object)` and `getDefaultValue()`. Additionally, the file PreferenceTest.java has been modified to include a new test case `shouldRememberDefaultValue()` which tests the functionality of the new methods. Based on these changes, a suitable commit message would be ""Added support for getting and setting default value in ShadowPreference"".","""Add defaultValue field with getter and setter to ShadowPreference, and test to verify defaultValue handling in PreferenceTest."""
"diff --git a/core/src/main/java/io/undertow/server/XnioByteBufferPool.java b/core/src/main/java/io/undertow/server/XnioByteBufferPool.java
new file mode 100644
index 000000000..6cd9e5c40
--- /dev/null
+++ b/core/src/main/java/io/undertow/server/XnioByteBufferPool.java
@@ -0,0 +1,77 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2014 Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags.
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an ""AS IS"" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.undertow.server;
+
+import io.undertow.connector.ByteBufferPool;
+import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
+import org.xnio.Pooled;
+
+import java.nio.ByteBuffer;
+
+/**
+ * @author Stuart Douglas
+ */
+public class XnioByteBufferPool implements ByteBufferPool {
+
+    private final Pool<ByteBuffer> pool;
+    private final int bufferSize;
+
+    public XnioByteBufferPool(Pool<ByteBuffer> pool) {
+        this.pool = pool;
+        Pooled<ByteBuffer> buf = pool.allocate();
+        bufferSize = buf.getResource().remaining();
+        buf.free();
+    }
+
+    @Override
+    public PooledByteBuffer allocate() {
+        final Pooled<ByteBuffer> buf = pool.allocate();
+        return new PooledByteBuffer() {
+
+            private boolean open = true;
+
+            @Override
+            public ByteBuffer getBuffer() {
+                return buf.getResource();
+            }
+
+            @Override
+            public void close() {
+                open = false;
+                buf.free();
+            }
+
+            @Override
+            public boolean isOpen() {
+                return open;
+            }
+        };
+    }
+
+    @Override
+    public void close() {
+
+    }
+
+    @Override
+    public int getBufferSize() {
+        return bufferSize;
+    }
+}
diff --git a/core/src/main/java/io/undertow/server/protocol/ajp/AjpOpenListener.java b/core/src/main/java/io/undertow/server/protocol/ajp/AjpOpenListener.java
index 69308c67c..c0429954d 100644
--- a/core/src/main/java/io/undertow/server/protocol/ajp/AjpOpenListener.java
+++ b/core/src/main/java/io/undertow/server/protocol/ajp/AjpOpenListener.java
@@ -29,14 +29,17 @@ import io.undertow.server.ConnectorStatistics;
 import io.undertow.server.ConnectorStatisticsImpl;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.OpenListener;
+import io.undertow.server.XnioByteBufferPool;
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 import org.xnio.Options;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
 import org.xnio.StreamConnection;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 
 import static io.undertow.UndertowOptions.DECODE_URL;
@@ -61,15 +64,14 @@ public class AjpOpenListener implements OpenListener {
     private volatile boolean statisticsEnabled;
     private final ConnectorStatisticsImpl connectorStatistics;
 
-    @Deprecated
-    public AjpOpenListener(final ByteBufferPool pool, final int bufferSize) {
+    public AjpOpenListener(final Pool<ByteBuffer> pool) {
         this(pool, OptionMap.EMPTY);
     }
 
-    @Deprecated
-    public AjpOpenListener(final ByteBufferPool pool, final OptionMap undertowOptions, final int bufferSize) {
-        this(pool, undertowOptions);
+    public AjpOpenListener(final Pool<ByteBuffer> pool, final OptionMap undertowOptions) {
+        this(new XnioByteBufferPool(pool), undertowOptions);
     }
+
     public AjpOpenListener(final ByteBufferPool pool) {
         this(pool, OptionMap.EMPTY);
     }
diff --git a/core/src/main/java/io/undertow/server/protocol/http/AlpnOpenListener.java b/core/src/main/java/io/undertow/server/protocol/http/AlpnOpenListener.java
index e6f7472ca..5e7be6bd3 100644
--- a/core/src/main/java/io/undertow/server/protocol/http/AlpnOpenListener.java
+++ b/core/src/main/java/io/undertow/server/protocol/http/AlpnOpenListener.java
@@ -19,6 +19,7 @@
 package io.undertow.server.protocol.http;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -35,12 +36,14 @@ import io.undertow.server.ConnectorStatistics;
 import io.undertow.server.DelegateOpenListener;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.OpenListener;
+import io.undertow.server.XnioByteBufferPool;
 import org.eclipse.jetty.alpn.ALPN;
 import org.xnio.ChannelListener;
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
 import org.xnio.StreamConnection;
 import org.xnio.channels.StreamSourceChannel;
 import org.xnio.ssl.SslConnection;
@@ -64,38 +67,34 @@ public class AlpnOpenListener implements ChannelListener<StreamConnection>, Open
     private volatile OptionMap undertowOptions;
     private volatile boolean statisticsEnabled;
 
-    public AlpnOpenListener(ByteBufferPool bufferPool, OptionMap undertowOptions, String fallbackProtocol, DelegateOpenListener fallbackListener) {
-        this.bufferPool = bufferPool;
-        this.fallbackProtocol = fallbackProtocol;
-        if(fallbackProtocol != null && fallbackListener != null) {
-            addProtocol(fallbackProtocol, fallbackListener, 0);
-        }
-        statisticsEnabled = undertowOptions.get(UndertowOptions.ENABLE_CONNECTOR_STATISTICS, false);
-        this.undertowOptions = undertowOptions;
-    }
-
-    public AlpnOpenListener(ByteBufferPool bufferPool, OptionMap undertowOptions, DelegateOpenListener httpListener) {
+    public AlpnOpenListener(Pool<ByteBuffer> bufferPool, OptionMap undertowOptions, DelegateOpenListener httpListener) {
         this(bufferPool, undertowOptions, ""http/1.1"", httpListener);
     }
 
-    public AlpnOpenListener(ByteBufferPool bufferPool,  OptionMap undertowOptions) {
+    public AlpnOpenListener(Pool<ByteBuffer> bufferPool,  OptionMap undertowOptions) {
         this(bufferPool, undertowOptions, null, null);
     }
 
-    @Deprecated
-    public AlpnOpenListener(ByteBufferPool bufferPool, String fallbackProtocol, DelegateOpenListener fallbackListener) {
-        this(bufferPool, OptionMap.EMPTY, fallbackProtocol, fallbackListener);
+    public AlpnOpenListener(Pool<ByteBuffer> bufferPool, OptionMap undertowOptions, String fallbackProtocol, DelegateOpenListener fallbackListener) {
+        this(new XnioByteBufferPool(bufferPool), undertowOptions, fallbackProtocol, fallbackListener);
     }
 
-    @Deprecated
-    public AlpnOpenListener(ByteBufferPool bufferPool, DelegateOpenListener httpListener) {
-        this(bufferPool, OptionMap.EMPTY, ""http/1.1"", httpListener);
+    public AlpnOpenListener(ByteBufferPool bufferPool, OptionMap undertowOptions, DelegateOpenListener httpListener) {
+        this(bufferPool, undertowOptions, ""http/1.1"", httpListener);
     }
 
+    public AlpnOpenListener(ByteBufferPool bufferPool,  OptionMap undertowOptions) {
+        this(bufferPool, undertowOptions, null, null);
+    }
 
-    @Deprecated
-    public AlpnOpenListener(ByteBufferPool bufferPool) {
-        this(bufferPool, OptionMap.EMPTY, null, null);
+    public AlpnOpenListener(ByteBufferPool bufferPool, OptionMap undertowOptions, String fallbackProtocol, DelegateOpenListener fallbackListener) {
+        this.bufferPool = bufferPool;
+        this.fallbackProtocol = fallbackProtocol;
+        if(fallbackProtocol != null && fallbackListener != null) {
+            addProtocol(fallbackProtocol, fallbackListener, 0);
+        }
+        statisticsEnabled = undertowOptions.get(UndertowOptions.ENABLE_CONNECTOR_STATISTICS, false);
+        this.undertowOptions = undertowOptions;
     }
 
 
diff --git a/core/src/main/java/io/undertow/server/protocol/http/HttpOpenListener.java b/core/src/main/java/io/undertow/server/protocol/http/HttpOpenListener.java
index df03a5d38..4e1c1218c 100644
--- a/core/src/main/java/io/undertow/server/protocol/http/HttpOpenListener.java
+++ b/core/src/main/java/io/undertow/server/protocol/http/HttpOpenListener.java
@@ -29,15 +29,18 @@ import io.undertow.server.ConnectorStatistics;
 import io.undertow.server.ConnectorStatisticsImpl;
 import io.undertow.server.DelegateOpenListener;
 import io.undertow.server.HttpHandler;
+import io.undertow.server.XnioByteBufferPool;
 import org.xnio.ChannelListener;
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 import org.xnio.Options;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
 import org.xnio.StreamConnection;
 
 import java.io.IOException;
+import java.nio.ByteBuffer;
 
 /**
  * Open listener for HTTP server.  XNIO should be set up to chain the accept handler to post-accept open
@@ -60,13 +63,13 @@ public final class HttpOpenListener implements ChannelListener<StreamConnection>
     private final ConnectorStatisticsImpl connectorStatistics;
 
     @Deprecated
-    public HttpOpenListener(final ByteBufferPool pool, final int bufferSize) {
+    public HttpOpenListener(final Pool<ByteBuffer> pool) {
         this(pool, OptionMap.EMPTY);
     }
 
     @Deprecated
-    public HttpOpenListener(final ByteBufferPool pool, final OptionMap undertowOptions, final int bufferSize) {
-        this(pool, undertowOptions);
+    public HttpOpenListener(final Pool<ByteBuffer> pool, final OptionMap undertowOptions) {
+        this(new XnioByteBufferPool(pool), undertowOptions);
     }
 
     public HttpOpenListener(final ByteBufferPool pool) {
diff --git a/core/src/main/java/io/undertow/server/protocol/http2/Http2OpenListener.java b/core/src/main/java/io/undertow/server/protocol/http2/Http2OpenListener.java
index eee947c1a..7e05f44a7 100644
--- a/core/src/main/java/io/undertow/server/protocol/http2/Http2OpenListener.java
+++ b/core/src/main/java/io/undertow/server/protocol/http2/Http2OpenListener.java
@@ -28,12 +28,16 @@ import io.undertow.server.ConnectorStatistics;
 import io.undertow.server.ConnectorStatisticsImpl;
 import io.undertow.server.DelegateOpenListener;
 import io.undertow.server.HttpHandler;
+import io.undertow.server.XnioByteBufferPool;
 import org.xnio.ChannelListener;
 import org.xnio.OptionMap;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
 import org.xnio.StreamConnection;
 
+import java.nio.ByteBuffer;
+
 
 /**
  * Open listener for HTTP2 server
@@ -55,6 +59,21 @@ public final class Http2OpenListener implements ChannelListener<StreamConnection
     private final ConnectorStatisticsImpl connectorStatistics;
     private final String protocol;
 
+    @Deprecated
+    public Http2OpenListener(final Pool<ByteBuffer> pool) {
+        this(pool, OptionMap.EMPTY);
+    }
+
+    @Deprecated
+    public Http2OpenListener(final Pool<ByteBuffer> pool, final OptionMap undertowOptions) {
+        this(pool, undertowOptions, HTTP2);
+    }
+
+    @Deprecated
+    public Http2OpenListener(final Pool<ByteBuffer> pool, final OptionMap undertowOptions, String protocol) {
+        this(new XnioByteBufferPool(pool), undertowOptions, protocol);
+    }
+
     public Http2OpenListener(final ByteBufferPool pool) {
         this(pool, OptionMap.EMPTY);
     }
diff --git a/core/src/main/java/io/undertow/server/protocol/spdy/SpdyOpenListener.java b/core/src/main/java/io/undertow/server/protocol/spdy/SpdyOpenListener.java
index efc9358cd..4b2a5fc2a 100644
--- a/core/src/main/java/io/undertow/server/protocol/spdy/SpdyOpenListener.java
+++ b/core/src/main/java/io/undertow/server/protocol/spdy/SpdyOpenListener.java
@@ -27,12 +27,16 @@ import io.undertow.server.ConnectorStatistics;
 import io.undertow.server.ConnectorStatisticsImpl;
 import io.undertow.server.DelegateOpenListener;
 import io.undertow.server.HttpHandler;
+import io.undertow.server.XnioByteBufferPool;
 import org.xnio.ChannelListener;
 import org.xnio.OptionMap;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
+import org.xnio.Pool;
 import org.xnio.StreamConnection;
 
+import java.nio.ByteBuffer;
+
 
 /**
  * Open listener for SPDY server
@@ -53,6 +57,16 @@ public final class SpdyOpenListener implements ChannelListener<StreamConnection>
     private volatile boolean statisticsEnabled;
     private final ConnectorStatisticsImpl connectorStatistics;
 
+    @Deprecated
+    public SpdyOpenListener(final Pool<ByteBuffer> pool, final Pool<ByteBuffer> heapBufferPool) {
+        this(pool, heapBufferPool, OptionMap.EMPTY);
+    }
+
+    @Deprecated
+    public SpdyOpenListener(final Pool<ByteBuffer> pool, final Pool<ByteBuffer> heapBufferPool, final OptionMap undertowOptions) {
+        this(new XnioByteBufferPool(pool), new XnioByteBufferPool(heapBufferPool), undertowOptions);
+    }
+
     public SpdyOpenListener(final ByteBufferPool pool, final ByteBufferPool heapBufferPool) {
         this(pool, heapBufferPool, OptionMap.EMPTY);
     }
diff --git a/core/src/test/java/io/undertow/websockets/core/protocol/server/AutobahnWebSocketServer.java b/core/src/test/java/io/undertow/websockets/core/protocol/server/AutobahnWebSocketServer.java
index fa394f761..803084d44 100644
--- a/core/src/test/java/io/undertow/websockets/core/protocol/server/AutobahnWebSocketServer.java
+++ b/core/src/test/java/io/undertow/websockets/core/protocol/server/AutobahnWebSocketServer.java
@@ -126,7 +126,7 @@ public class AutobahnWebSocketServer {
                     .set(Options.TCP_NODELAY, true)
                     .set(Options.REUSE_ADDRESSES, true)
                     .getMap();
-            openListener = new HttpOpenListener(new DefaultByteBufferPool(false, 8192), 8192);
+            openListener = new HttpOpenListener(new DefaultByteBufferPool(false, 8192));
             ChannelListener acceptListener = ChannelListeners.openListenerAdapter(openListener);
             server = worker.createStreamConnectionServer(new InetSocketAddress(port), acceptListener, serverOptions);
 
diff --git a/core/src/test/java/io/undertow/websockets/extensions/AutobahnExtensionCustomReceiverServer.java b/core/src/test/java/io/undertow/websockets/extensions/AutobahnExtensionCustomReceiverServer.java
index 72bad2537..388b2c546 100644
--- a/core/src/test/java/io/undertow/websockets/extensions/AutobahnExtensionCustomReceiverServer.java
+++ b/core/src/test/java/io/undertow/websockets/extensions/AutobahnExtensionCustomReceiverServer.java
@@ -98,7 +98,7 @@ public class AutobahnExtensionCustomReceiverServer {
                     .set(Options.TCP_NODELAY, true)
                     .set(Options.REUSE_ADDRESSES, true)
                     .getMap();
-            openListener = new HttpOpenListener(new DefaultByteBufferPool(false, 8192), 8192);
+            openListener = new HttpOpenListener(new DefaultByteBufferPool(false, 8192));
             ChannelListener acceptListener = ChannelListeners.openListenerAdapter(openListener);
             server = worker.createStreamConnectionServer(new InetSocketAddress(port), acceptListener, serverOptions);
 
diff --git a/websockets-jsr/src/main/java/io/undertow/websockets/jsr/WebSocketDeploymentInfo.java b/websockets-jsr/src/main/java/io/undertow/websockets/jsr/WebSocketDeploymentInfo.java
index 136a2686c..cdc978703 100644
--- a/websockets-jsr/src/main/java/io/undertow/websockets/jsr/WebSocketDeploymentInfo.java
+++ b/websockets-jsr/src/main/java/io/undertow/websockets/jsr/WebSocketDeploymentInfo.java
@@ -18,11 +18,14 @@
 
 package io.undertow.websockets.jsr;
 
+import io.undertow.server.XnioByteBufferPool;
 import io.undertow.websockets.extensions.ExtensionHandshake;
 import io.undertow.connector.ByteBufferPool;
+import org.xnio.Pool;
 import org.xnio.XnioWorker;
 
 import javax.websocket.server.ServerEndpointConfig;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -58,6 +61,11 @@ public class WebSocketDeploymentInfo {
         return buffers;
     }
 
+    @Deprecated
+    public WebSocketDeploymentInfo setBuffers(Pool<ByteBuffer> buffers) {
+        return setBuffers(new XnioByteBufferPool(buffers));
+    }
+
     public WebSocketDeploymentInfo setBuffers(ByteBufferPool buffers) {
         this.buffers = buffers;
         return this;",Add XNIO compatibility pool,"""Introduce XnioByteBufferPool and migrate open listeners to use it""","""Replace ByteBufferPool with Pool<ByteBuffer> in various places""","""Add XnioByteBufferPool and deprecate constructors with ByteBufferPool""

This commit introduces a new class `XnioByteBufferPool` and updates several other classes to use it instead of `ByteBufferPool`. The constructors that take `ByteBufferPool` as a parameter have been deprecated and replaced with new constructors that take `XnioByteBufferPool` or `Pool<ByteBuffer>` instead. Some imports have also been added or updated.",Replace direct `ByteBufferPool` dependency with `XnioByteBufferPool` wrapping `Pool<ByteBuffer>` for unified buffer management.
"diff --git a/src/gwt/src/org/rstudio/core/client/widget/SatelliteFramePanel.java b/src/gwt/src/org/rstudio/core/client/widget/SatelliteFramePanel.java
index f2f6beffe5..3e89d98e40 100644
--- a/src/gwt/src/org/rstudio/core/client/widget/SatelliteFramePanel.java
+++ b/src/gwt/src/org/rstudio/core/client/widget/SatelliteFramePanel.java
@@ -46,6 +46,11 @@ public abstract class SatelliteFramePanel <T extends RStudioFrame>
    {
       if (appFrame_ != null)
       {
+         // first set the frame to about:blank so that the 
+         // javascript ""unload"" event is triggered (this is
+         // used by bookdown to save/restore scroll position)
+         appFrame_.setUrl(""about:blank"");
+         
          rootPanel_.remove(appFrame_);
          appFrame_ = null;
       }",set satellite frame to about : blank before removing ( so javascript unload event is triggered ),"""Trigger unload event when removing SatelliteFramePanel to save scroll position""","""Trigger 'unload' event by setting frame URL to 'about:blank' before removal""

This commit message accurately describes the change made in the code, which is to set the frame URL to 'about:blank' before removing it to trigger the 'unload' event.","""Trigger JavaScript 'unload' event before removing frame in SatelliteFramePanel""

This commit adds a step before removing the frame in the `SatelliteFramePanel` class. It sets the frame's URL to ""about:blank"" so that the JavaScript ""unload"" event is triggered. This event is used by bookdown to save and restore scroll position. After setting the URL, the frame is then removed from the root panel and the `appFrame_` variable is set to null.",Trigger unload event by setting frame to about:blank before removing it to save/restore scroll position.
"diff --git a/tpc/src/serializers/wobly/optimized/WImage.java b/tpc/src/serializers/wobly/optimized/WImage.java
index 7eb0ab8..4571428 100644
--- a/tpc/src/serializers/wobly/optimized/WImage.java
+++ b/tpc/src/serializers/wobly/optimized/WImage.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.optimized;
 
 import com.wowd.wobly.WoblyUtils.Format;
diff --git a/tpc/src/serializers/wobly/optimized/WMedia.java b/tpc/src/serializers/wobly/optimized/WMedia.java
index 98b5078..b2472ca 100644
--- a/tpc/src/serializers/wobly/optimized/WMedia.java
+++ b/tpc/src/serializers/wobly/optimized/WMedia.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.optimized;
 
 import java.util.List;
diff --git a/tpc/src/serializers/wobly/optimized/WMediaContent.java b/tpc/src/serializers/wobly/optimized/WMediaContent.java
index 73a254d..3ec35db 100644
--- a/tpc/src/serializers/wobly/optimized/WMediaContent.java
+++ b/tpc/src/serializers/wobly/optimized/WMediaContent.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.optimized;
 
 import java.util.List;
diff --git a/tpc/src/serializers/wobly/simple/WImage.java b/tpc/src/serializers/wobly/simple/WImage.java
index c1796f4..2ccb15a 100644
--- a/tpc/src/serializers/wobly/simple/WImage.java
+++ b/tpc/src/serializers/wobly/simple/WImage.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.simple;
 
 import com.wowd.wobly.WoblyUtils.Format;
diff --git a/tpc/src/serializers/wobly/simple/WMedia.java b/tpc/src/serializers/wobly/simple/WMedia.java
index 63a1509..2143827 100644
--- a/tpc/src/serializers/wobly/simple/WMedia.java
+++ b/tpc/src/serializers/wobly/simple/WMedia.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.simple;
 
 import java.util.List;
diff --git a/tpc/src/serializers/wobly/simple/WMediaContent.java b/tpc/src/serializers/wobly/simple/WMediaContent.java
index 91b27e2..ea6a9fb 100644
--- a/tpc/src/serializers/wobly/simple/WMediaContent.java
+++ b/tpc/src/serializers/wobly/simple/WMediaContent.java
@@ -1,21 +1,3 @@
-/*******************************************************************************
- * Wobly - Wowd's byte-level serialization protocol
- * Copyright 2008-2011 Wowd Inc. All rights reserved.
- * http://code.google.com/p/wobly/
- *
- * Wobly is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License
- * as published by the Free Software Foundation, either version 3
- * of the License, or (at your option) any later version.
- *
- * Wobly is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with Wobly. If not, see <http://www.gnu.org/licenses/>.
- *******************************************************************************/
 package serializers.wobly.simple;
 
 import java.util.List;",removed comments,"""Remove redundant license headers from Wobly serializers""","""Removed Wobly license headers from optimized and simple serializers.""","""Removed license header from Wobly Java files""","Remove LGPL license headers from WImage.java, WMedia.java, and WMediaContent.java in wobly optimized and simple serializers."
"diff --git a/src/main/java/org/nlpcn/es4sql/parse/ChildrenType.java b/src/main/java/org/nlpcn/es4sql/parse/ChildrenType.java
index 09e33bf..4e53ad2 100644
--- a/src/main/java/org/nlpcn/es4sql/parse/ChildrenType.java
+++ b/src/main/java/org/nlpcn/es4sql/parse/ChildrenType.java
@@ -43,7 +43,7 @@ public class ChildrenType {
             this.simple = true;
         } else {
             Where where = Where.newInstance();
-            new SqlParser().parseWhere(secondParameter,where);
+            new WhereParser(new SqlParser()).parseWhere(secondParameter,where);
             if(where.getWheres().size() == 0)
                 throw new SqlParseException(""unable to parse filter where."");
             this.where = where;
diff --git a/src/main/java/org/nlpcn/es4sql/parse/FieldMaker.java b/src/main/java/org/nlpcn/es4sql/parse/FieldMaker.java
index 5633722..17845a8 100644
--- a/src/main/java/org/nlpcn/es4sql/parse/FieldMaker.java
+++ b/src/main/java/org/nlpcn/es4sql/parse/FieldMaker.java
@@ -56,10 +56,10 @@ public class FieldMaker {
                 return makeFilterMethodField(mExpr, alias);
             }
 
-            return makeMethodField(methodName, mExpr.getParameters(), null, alias, tableAlias,true);
+            return makeMethodField(methodName, mExpr.getParameters(), null, alias, tableAlias, true);
         } else if (expr instanceof SQLAggregateExpr) {
             SQLAggregateExpr sExpr = (SQLAggregateExpr) expr;
-            return makeMethodField(sExpr.getMethodName(), sExpr.getArguments(), sExpr.getOption(), alias,tableAlias, true);
+            return makeMethodField(sExpr.getMethodName(), sExpr.getArguments(), sExpr.getOption(), alias, tableAlias, true);
         } else {
             throw new SqlParseException(""unknown field name : "" + expr);
         }
@@ -70,7 +70,7 @@ public class FieldMaker {
         return Util.getScriptValue(expr);
     }
 
-    private static Field makeScriptMethodField(SQLBinaryOpExpr binaryExpr, String alias,String tableAlias) throws SqlParseException {
+    private static Field makeScriptMethodField(SQLBinaryOpExpr binaryExpr, String alias, String tableAlias) throws SqlParseException {
         List<SQLExpr> params = new ArrayList<>();
 
         String scriptFieldAlias;
@@ -86,7 +86,7 @@ public class FieldMaker {
 
         params.add(new SQLCharExpr(script));
 
-        return makeMethodField(""script"", params, null, null, tableAlias,false);
+        return makeMethodField(""script"", params, null, null, tableAlias, false);
     }
 
 
@@ -107,7 +107,7 @@ public class FieldMaker {
             exprToCheck = parameters.get(1);
         }
         Where where = Where.newInstance();
-        new SqlParser().parseWhere(exprToCheck, where);
+        new WhereParser(new SqlParser()).parseWhere(exprToCheck, where);
         if (where.getWheres().size() == 0)
             throw new SqlParseException(""unable to parse filter where."");
         List<KVValue> methodParameters = new ArrayList<>();
@@ -133,7 +133,7 @@ public class FieldMaker {
 
 
     //binary method can nested
-    private static SQLMethodInvokeExpr makeBinaryMethodField(SQLBinaryOpExpr expr, String alias, boolean first) throws SqlParseException {
+    public static SQLMethodInvokeExpr makeBinaryMethodField(SQLBinaryOpExpr expr, String alias, boolean first) throws SqlParseException {
         List<SQLExpr> params = new ArrayList<>();
 
         String scriptFieldAlias;
@@ -171,7 +171,6 @@ public class FieldMaker {
     }
 
 
-
     private static Field handleIdentifier(SQLExpr expr, String alias, String tableAlias) throws SqlParseException {
         String name = expr.toString().replace(""`"", """");
         String newFieldName = name;
@@ -192,12 +191,12 @@ public class FieldMaker {
             List<SQLExpr> paramers = Lists.newArrayList();
             paramers.add(new SQLCharExpr(alias));
             paramers.add(new SQLCharExpr(""doc['"" + newFieldName + ""'].value""));
-            field = makeMethodField(""script"", paramers, null, alias, tableAlias,true);
+            field = makeMethodField(""script"", paramers, null, alias, tableAlias, true);
         }
         return field;
     }
 
-    private static MethodField makeMethodField(String name, List<SQLExpr> arguments, SQLAggregateOption option, String alias,String tableAlias, boolean first) throws SqlParseException {
+    public static MethodField makeMethodField(String name, List<SQLExpr> arguments, SQLAggregateOption option, String alias, String tableAlias, boolean first) throws SqlParseException {
         List<KVValue> paramers = new LinkedList<>();
         String finalMethodName = name;
 
@@ -209,11 +208,11 @@ public class FieldMaker {
 
                 if (SQLFunctions.buildInFunctions.contains(binaryOpExpr.getOperator().toString().toLowerCase())) {
                     SQLMethodInvokeExpr mExpr = makeBinaryMethodField(binaryOpExpr, alias, first);
-                    MethodField abc = makeMethodField(mExpr.getMethodName(), mExpr.getParameters(), null, null,tableAlias, false);
+                    MethodField abc = makeMethodField(mExpr.getMethodName(), mExpr.getParameters(), null, null, tableAlias, false);
                     paramers.add(new KVValue(abc.getParams().get(0).toString(), new SQLCharExpr(abc.getParams().get(1).toString())));
                 } else {
                     if (!binaryOpExpr.getOperator().getName().equals(""="")) {
-                        paramers.add(new KVValue(""script"", makeScriptMethodField(binaryOpExpr, null,tableAlias)));
+                        paramers.add(new KVValue(""script"", makeScriptMethodField(binaryOpExpr, null, tableAlias)));
                     } else {
                         SQLExpr right = binaryOpExpr.getRight();
                         Object value = Util.expr2Object(right);
@@ -225,7 +224,7 @@ public class FieldMaker {
                 SQLMethodInvokeExpr mExpr = (SQLMethodInvokeExpr) object;
                 String methodName = mExpr.getMethodName().toLowerCase();
                 if (methodName.equals(""script"")) {
-                    KVValue script = new KVValue(""script"", makeMethodField(mExpr.getMethodName(), mExpr.getParameters(), null, alias,tableAlias, true));
+                    KVValue script = new KVValue(""script"", makeMethodField(mExpr.getMethodName(), mExpr.getParameters(), null, alias, tableAlias, true));
                     paramers.add(script);
                 } else if (methodName.equals(""nested"") || methodName.equals(""reverse_nested"")) {
                     NestedType nestedType = new NestedType();
@@ -245,11 +244,11 @@ public class FieldMaker {
                     paramers.add(new KVValue(""children"", childrenType));
                 } else if (SQLFunctions.buildInFunctions.contains(methodName)) {
                     //throw new SqlParseException(""only support script/nested as inner functions"");
-                    MethodField abc = makeMethodField(methodName, mExpr.getParameters(), null, null, tableAlias,false);
+                    MethodField abc = makeMethodField(methodName, mExpr.getParameters(), null, null, tableAlias, false);
                     paramers.add(new KVValue(abc.getParams().get(0).toString(), new SQLCharExpr(abc.getParams().get(1).toString())));
                 } else throw new SqlParseException(""only support script/nested/children as inner functions"");
             } else {
-                paramers.add(new KVValue(Util.removeTableAilasFromField(object,tableAlias)));
+                paramers.add(new KVValue(Util.removeTableAilasFromField(object, tableAlias)));
             }
 
         }
diff --git a/src/main/java/org/nlpcn/es4sql/parse/NestedType.java b/src/main/java/org/nlpcn/es4sql/parse/NestedType.java
index f1109c4..d633d27 100644
--- a/src/main/java/org/nlpcn/es4sql/parse/NestedType.java
+++ b/src/main/java/org/nlpcn/es4sql/parse/NestedType.java
@@ -65,7 +65,7 @@ public class NestedType {
             else {
                 this.path = field;
                 Where where = Where.newInstance();
-                new SqlParser().parseWhere(secondParameter,where);
+                new WhereParser(new SqlParser()).parseWhere(secondParameter,where);
                 if(where.getWheres().size() == 0)
                     throw new SqlParseException(""unable to parse filter where."");
                 this.where = where;
diff --git a/src/main/java/org/nlpcn/es4sql/parse/SelectParser.java b/src/main/java/org/nlpcn/es4sql/parse/SelectParser.java
new file mode 100644
index 0000000..a896ea1
--- /dev/null
+++ b/src/main/java/org/nlpcn/es4sql/parse/SelectParser.java
@@ -0,0 +1,7 @@
+package org.nlpcn.es4sql.parse;
+
+/**
+ * Created by allwefantasy on 9/2/16.
+ */
+public class SelectParser {
+}
diff --git a/src/main/java/org/nlpcn/es4sql/parse/SqlParser.java b/src/main/java/org/nlpcn/es4sql/parse/SqlParser.java
index 458714d..58be09f 100644
--- a/src/main/java/org/nlpcn/es4sql/parse/SqlParser.java
+++ b/src/main/java/org/nlpcn/es4sql/parse/SqlParser.java
@@ -9,14 +9,11 @@ import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlSelectGroupByExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSelectQueryBlock;
 
 
-import com.google.common.collect.Sets;
-import org.nlpcn.es4sql.Util;
 import org.nlpcn.es4sql.domain.*;
-import org.nlpcn.es4sql.domain.Where.CONN;
 import org.nlpcn.es4sql.domain.hints.Hint;
 import org.nlpcn.es4sql.domain.hints.HintFactory;
 import org.nlpcn.es4sql.exception.SqlParseException;
-import org.nlpcn.es4sql.spatial.SpatialParamsFactory;
+
 
 /**
  * es sql support
@@ -25,7 +22,9 @@ import org.nlpcn.es4sql.spatial.SpatialParamsFactory;
  */
 public class SqlParser {
 
+
     public SqlParser() {
+
     }
 
     public Select parseSelect(SQLQueryExpr mySqlExpr) throws SqlParseException {
@@ -37,14 +36,17 @@ public class SqlParser {
         return select;
     }
 
-    private Select parseSelect(MySqlSelectQueryBlock query) throws SqlParseException {
+    public Select parseSelect(MySqlSelectQueryBlock query) throws SqlParseException {
+
         Select select = new Select();
+        WhereParser whereParser = new WhereParser(this, query);
+
 
         findSelect(query, select, query.getFrom().getAlias());
 
         select.getFrom().addAll(findFrom(query.getFrom()));
 
-        select.setWhere(findWhere(query.getWhere()));
+        select.setWhere(whereParser.findWhere());
 
         select.fillSubQueries();
 
@@ -60,414 +62,15 @@ public class SqlParser {
 
     public Delete parseDelete(SQLDeleteStatement deleteStatement) throws SqlParseException {
         Delete delete = new Delete();
+        WhereParser whereParser = new WhereParser(this, deleteStatement);
 
         delete.getFrom().addAll(findFrom(deleteStatement.getTableSource()));
 
-        delete.setWhere(findWhere(deleteStatement.getWhere()));
+        delete.setWhere(whereParser.findWhere());
 
         return delete;
     }
 
-    private Where findWhere(SQLExpr where) throws SqlParseException {
-        if (where == null) {
-            return null;
-        }
-
-        Where myWhere = Where.newInstance();
-        parseWhere(where, myWhere);
-        return myWhere;
-    }
-
-    private boolean isCond(SQLBinaryOpExpr expr) {
-        SQLExpr leftSide = expr.getLeft();
-        if (leftSide instanceof SQLMethodInvokeExpr) {
-            return isAllowedMethodOnConditionLeft((SQLMethodInvokeExpr) leftSide, expr.getOperator());
-        }
-        return leftSide instanceof SQLIdentifierExpr || leftSide instanceof SQLPropertyExpr || leftSide instanceof SQLVariantRefExpr;
-    }
-
-    private boolean isAllowedMethodOnConditionLeft(SQLMethodInvokeExpr method, SQLBinaryOperator operator) {
-        return (method.getMethodName().toLowerCase().equals(""nested"") || method.getMethodName().toLowerCase().equals(""children"")) && !operator.isLogical();
-    }
-
-    public void parseWhere(SQLExpr expr, Where where) throws SqlParseException {
-
-
-
-        if (expr instanceof SQLBinaryOpExpr) {
-            SQLBinaryOpExpr bExpr = (SQLBinaryOpExpr) expr;
-            if (explanSpecialCondWithBothSidesAreLiterals(bExpr, where)) {
-                return;
-            }
-            if (explanSpecialCondWithBothSidesAreProperty(bExpr, where)) {
-                return;
-            }
-        }
-
-        if (expr instanceof SQLBinaryOpExpr && !isCond((SQLBinaryOpExpr) expr)) {
-            SQLBinaryOpExpr bExpr = (SQLBinaryOpExpr) expr;
-            routeCond(bExpr, bExpr.getLeft(), where);
-            routeCond(bExpr, bExpr.getRight(), where);
-        } else if (expr instanceof SQLNotExpr) {
-            parseWhere(((SQLNotExpr) expr).getExpr(), where);
-            negateWhere(where);
-        } else {
-            explanCond(""AND"", expr, where);
-        }
-    }
-
-    //some where conditions eg. 1=1 or 3>2 or 'a'='b'
-    private boolean explanSpecialCondWithBothSidesAreLiterals(SQLBinaryOpExpr bExpr, Where where) throws SqlParseException {
-        if ((bExpr.getLeft() instanceof SQLNumericLiteralExpr || bExpr.getLeft() instanceof SQLCharExpr) &&
-                (bExpr.getRight() instanceof SQLNumericLiteralExpr || bExpr.getRight() instanceof SQLCharExpr)
-                ) {
-            SQLMethodInvokeExpr sqlMethodInvokeExpr = new SQLMethodInvokeExpr(""script"", null);
-            String operator = bExpr.getOperator().getName();
-            if (operator.equals(""="")) {
-                operator = ""=="";
-            }
-            sqlMethodInvokeExpr.addParameter(
-                    new SQLCharExpr(Util.expr2Object(bExpr.getLeft(), ""'"") +
-                            "" "" + operator + "" "" +
-                            Util.expr2Object(bExpr.getRight(), ""'""))
-            );
-
-            explanCond(""AND"", sqlMethodInvokeExpr, where);
-            return true;
-        }
-        return false;
-    }
-
-    //some where conditions eg. field1=field2 or field1>field2
-    private boolean explanSpecialCondWithBothSidesAreProperty(SQLBinaryOpExpr bExpr, Where where) throws SqlParseException {
-        //join is not support
-        if ((bExpr.getLeft() instanceof SQLPropertyExpr || bExpr.getLeft() instanceof SQLIdentifierExpr) &&
-                (bExpr.getRight() instanceof SQLPropertyExpr || bExpr.getRight() instanceof SQLIdentifierExpr) &&
-                Sets.newHashSet(""="", ""<"", "">"", "">="", ""<="").contains(bExpr.getOperator().getName()) &&
-                !Util.isFromJoinTable(bExpr)
-
-                ) {
-            SQLMethodInvokeExpr sqlMethodInvokeExpr = new SQLMethodInvokeExpr(""script"", null);
-            String operator = bExpr.getOperator().getName();
-            if (operator.equals(""="")) {
-                operator = ""=="";
-            }
-
-            String leftProperty = Util.expr2Object(bExpr.getLeft()).toString();
-            String rightProperty = Util.expr2Object(bExpr.getRight()).toString();
-            if (leftProperty.split(""\\."").length > 1) {
-
-                leftProperty = leftProperty.substring(leftProperty.split(""\\."")[0].length()+1);
-            }
-
-            if (rightProperty.split(""\\."").length > 1) {
-                rightProperty = rightProperty.substring(rightProperty.split(""\\."")[0].length()+1);
-            }
-
-            sqlMethodInvokeExpr.addParameter(new SQLCharExpr(
-                    ""doc['"" + leftProperty + ""'].value "" +
-                            operator +
-                            "" doc['"" + rightProperty + ""'].value""));
-
-
-            explanCond(""AND"", sqlMethodInvokeExpr, where);
-            return true;
-        }
-        return false;
-    }
-
-
-    private void routeCond(SQLBinaryOpExpr bExpr, SQLExpr sub, Where where) throws SqlParseException {
-        if (sub instanceof SQLBinaryOpExpr && !isCond((SQLBinaryOpExpr) sub)) {
-            SQLBinaryOpExpr binarySub = (SQLBinaryOpExpr) sub;
-            if (binarySub.getOperator().priority != bExpr.getOperator().priority) {
-                Where subWhere = new Where(bExpr.getOperator().name);
-                where.addWhere(subWhere);
-                parseWhere(binarySub, subWhere);
-            } else {
-                parseWhere(binarySub, where);
-            }
-        } else if (sub instanceof SQLNotExpr) {
-            Where subWhere = new Where(bExpr.getOperator().name);
-            where.addWhere(subWhere);
-            parseWhere(((SQLNotExpr) sub).getExpr(), subWhere);
-            negateWhere(subWhere);
-        } else {
-            explanCond(bExpr.getOperator().name, sub, where);
-        }
-    }
-
-    private void explanCond(String opear, SQLExpr expr, Where where) throws SqlParseException {
-        if (expr instanceof SQLBinaryOpExpr) {
-            SQLBinaryOpExpr soExpr = (SQLBinaryOpExpr) expr;
-            boolean methodAsOpear = false;
-
-            boolean isNested = false;
-            boolean isChildren = false;
-
-            NestedType nestedType = new NestedType();
-            if (nestedType.tryFillFromExpr(soExpr.getLeft())) {
-                soExpr.setLeft(new SQLIdentifierExpr(nestedType.field));
-                isNested = true;
-            }
-
-            ChildrenType childrenType = new ChildrenType();
-            if (childrenType.tryFillFromExpr(soExpr.getLeft())) {
-                soExpr.setLeft(new SQLIdentifierExpr(childrenType.field));
-                isChildren = true;
-            }
-
-            if (soExpr.getRight() instanceof SQLMethodInvokeExpr) {
-                SQLMethodInvokeExpr method = (SQLMethodInvokeExpr) soExpr.getRight();
-                String methodName = method.getMethodName().toLowerCase();
-
-                if (Condition.OPEAR.methodNameToOpear.containsKey(methodName)) {
-                    Object[] methodParametersValue = getMethodValuesWithSubQueries(method);
-
-                    Condition condition = null;
-
-                    if (isNested)
-                        condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), Condition.OPEAR.methodNameToOpear.get(methodName), methodParametersValue, nestedType);
-                    else if (isChildren)
-                        condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), Condition.OPEAR.methodNameToOpear.get(methodName), methodParametersValue, childrenType);
-                    else
-                        condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), Condition.OPEAR.methodNameToOpear.get(methodName), methodParametersValue, null);
-
-                    where.addWhere(condition);
-                    methodAsOpear = true;
-                }
-            }
-
-            if (!methodAsOpear) {
-                Condition condition = null;
-
-                if (isNested)
-                    condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), soExpr.getOperator().name, parseValue(soExpr.getRight()), nestedType);
-                else if (isChildren)
-                    condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), soExpr.getOperator().name, parseValue(soExpr.getRight()), childrenType);
-                else
-                    condition = new Condition(CONN.valueOf(opear), soExpr.getLeft().toString(), soExpr.getOperator().name, parseValue(soExpr.getRight()), null);
-
-                where.addWhere(condition);
-            }
-        } else if (expr instanceof SQLInListExpr) {
-            SQLInListExpr siExpr = (SQLInListExpr) expr;
-            String leftSide = siExpr.getExpr().toString();
-
-            boolean isNested = false;
-            boolean isChildren = false;
-
-            NestedType nestedType = new NestedType();
-            if (nestedType.tryFillFromExpr(siExpr.getExpr())) {
-                leftSide",add function support in where condition,"""Refactor SqlParser to use WhereParser for parsing WHERE clauses""","Extracted WhereParser class and moved parsing logic to it

This commit message is concise and accurately describes the changes made in the code.","It appears that the code in the `ChildrenType.java` file has been modified to use a new `WhereParser` class in the `parseWhere` method. The `WhereParser` class is used to parse the second parameter of the `ChildrenType` constructor, which is a string representing a WHERE clause in a SQL query.

In the `FieldMaker.java` file, the `makeMethodField` method has been updated to include an additional parameter `tableAlias`, which is used to specify the alias of the table to which the field belongs. This parameter is passed to the `makeScriptMethodField` and `handleIdentifier` methods, which are used to create script and identifier fields, respectively.

Additionally, a new class `SelectParser.java` has been added, but it is currently empty. It is unclear from the code what the purpose of this class is.",Refactor to encapsulate where parsing logic into `WhereParser` class and minor code formatting fixes.
"diff --git a/CHANGELOG.md b/CHANGELOG.md
index 29ca61c84..91cdf0c96 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,6 @@
 ## 2.0.0
 ## 1.0.0
+ * STORM-1450: Fix minor bugs and refactor code in ResourceAwareScheduler
  * STORM-1478: make bolts getComponentConfiguration method cleaner/simpler
  * STORM-1482: add missing 'break' for RedisStoreBolt
  * STORM-1466: Move the org.apache.thrift7 namespace to something correct/sensible",add STORM - 1450 to changelog,"""STORM-1450: Fix minor bugs and refactor code in ResourceAwareScheduler""","""Update CHANGELOG.md to reflect bug fixes and code refactoring in 2.0.0 release""","* STORM-1450: Fix minor bugs and refactor code in ResourceAwareScheduler
* STORM-1478: Make bolts getComponentConfiguration method cleaner/simpler
* STORM-1482: Add missing 'break' for RedisStoreBolt
* STORM-1466: Move the org.apache.thrift7 namespace to something correct/sensible

Looks like the commit message is a list of changes made in the codebase, with each item prefixed by a ticket number (like STORM-1450) and a short description of the change.","""Fix minor bugs and refactor code in ResourceAwareScheduler, clean up bolts' getComponentConfiguration, add missing 'break', correct Thrift namespace."""
"diff --git a/build.gradle b/build.gradle
index 0497658e8b..69e3274a9a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -11,6 +11,7 @@ buildscript {
         classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
         classpath ""gradle.plugin.io.sdkman:gradle-sdkvendor-plugin:1.0.0""
         classpath ""gradle.plugin.org.aim42:htmlSanityCheck:$htmlSanityCheckVersion""
+        classpath ""org.codehaus.groovy.modules.http-builder:http-builder:0.7.1""
     }
 }
 
diff --git a/gradle/publishing.gradle b/gradle/publishing.gradle
index 3078b74f17..864eb80b19 100644
--- a/gradle/publishing.gradle
+++ b/gradle/publishing.gradle
@@ -11,6 +11,20 @@
  * $ travis encrypt BINTRAY_KEY=...
  *
  */
+
+buildscript {
+    repositories {
+        maven { url ""https://repo.grails.org/grails/core"" }
+    }
+    dependencies {
+        classpath ""org.codehaus.groovy.modules.http-builder:http-builder:0.7.1""
+    }
+}
+
+
+import groovyx.net.http.RESTClient
+import static groovyx.net.http.ContentType.*
+
 apply plugin: 'maven-publish'
 apply plugin: 'com.jfrog.bintray'
 apply plugin: 'com.bmuschko.nexus'
@@ -160,12 +174,16 @@ publishing {
     }
 }
 
+def bintrayUser = System.getenv(""BINTRAY_USER"") ?: project.hasProperty(""bintrayUser"") ? project.bintrayUser : ''
+def bintrayKey = System.getenv(""BINTRAY_KEY"") ?: project.hasProperty(""bintrayKey"") ? project.bintrayKey : ''
+def ossUser = System.getenv(""SONATYPE_USERNAME"") ?: project.hasProperty(""sonatypeOssUsername"") ? project.sonatypeOssUsername : ''
+def ossPass = System.getenv(""SONATYPE_PASSWORD"") ?: project.hasProperty(""sonatypeOssPassword"") ? project.sonatypeOssPassword : ''
+
+
 bintray {
-    def u = System.getenv(""BINTRAY_USER"") ?: project.hasProperty(""bintrayUser"") ? project.bintrayUser : ''
-    def p = System.getenv(""BINTRAY_KEY"") ?: project.hasProperty(""bintrayKey"") ? project.bintrayKey : ''
 
-    user = u
-    key = p
+    user = bintrayUser
+    key = bintrayKey
     publications = ['maven']
     publish = false
     pkg {
@@ -186,8 +204,6 @@ bintray {
             }
             mavenCentralSync {
                 sync = project.hasProperty(""mavenCentralSync"") ? project.mavenCentralSync.toBoolean() : false
-                def ossUser = System.getenv(""SONATYPE_USERNAME"") ?: project.hasProperty(""sonatypeOssUsername"") ? project.sonatypeOssUsername : ''
-                def ossPass = System.getenv(""SONATYPE_PASSWORD"") ?: project.hasProperty(""sonatypeOssPassword"") ? project.sonatypeOssPassword : ''
                 user = ossUser
                 password = ossPass
             }
@@ -195,3 +211,32 @@ bintray {
         }
     }
 }
+
+task synchronizeWithMavenCentral() {
+    description = ""Syncs with Maven Central/Sonatype""
+    doLast {
+        println """"""
+Synchronizing with Maven central. This may take a few minutes ...
+If this fails, log on to http://oss.sonatype.org/ using the centralUser credentials
+and progress through process manually -> Close -> Publish ... under staging repositories
+""""""
+        try {
+            def client = new RESTClient('https://api.bintray.com/maven_central_sync/micronaut/core-releases-local/')
+            client.headers['Authorization'] = 'Basic ' + ""$bintrayUser:$bintrayKey"".getBytes('iso-8859-1').encodeBase64()
+            def body = /{}/
+            def resp = client.post(
+                    path: ""$bintray.pkg.name/versions/$projectVersion"",
+                    body: body,
+                    requestContentType: JSON
+            )
+            assert resp.status == 200
+            println resp.data.status
+            println resp.data.messages.join('\n')
+        } catch (groovyx.net.http.HttpResponseException e) {
+            println ""Error: $e""
+            println ""Message: $e.message""
+            println ""Body: $e.response.data""
+            throw e
+        }
+    }
+}
\ No newline at end of file",Add synchronizeWithMavenCentral task,"""Add Maven Central sync task and refactor Bintray configuration""","Added HTTP Builder dependency and Maven Central synchronization task

Or, in a more concise format:

`Added HTTP Builder dependency and Maven Central sync task`","Added http-builder dependency and task to synchronize with Maven Central

This commit adds the http-builder dependency to the build script and gradle/publishing.gradle file. It also adds a new task 'synchronizeWithMavenCentral' that uses the http-builder to synchronize with Maven Central/Sonatype. The task is configured to use the Bintray user and key, and the Sonatype OSS username and password for authentication.",Added HTTP Builder dependency and synchronizeWithMavenCentral task to automate Maven Central sync process in publishing.gradle.
"diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/datasource/DataSourceChangedEvent.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/datasource/DataSourceChangedEvent.java
index f2ea5e556dd..b494c857f5b 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/datasource/DataSourceChangedEvent.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/datasource/DataSourceChangedEvent.java
@@ -19,7 +19,7 @@ package org.apache.shardingsphere.governance.core.common.event.datasource;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.governance.core.common.event.GovernanceEvent;
 
 import java.util.Map;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/schema/SchemaAddedEvent.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/schema/SchemaAddedEvent.java
index 0593f981cc2..8393031616b 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/schema/SchemaAddedEvent.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/event/schema/SchemaAddedEvent.java
@@ -20,7 +20,7 @@ package org.apache.shardingsphere.governance.core.common.event.schema;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.governance.core.common.event.GovernanceEvent;
 
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapper.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapper.java
index 51aa54b9928..ae073c80c29 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapper.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/main/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapper.java
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.governance.core.common.yaml.swapper;
 
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.yaml.swapper.YamlSwapper;
 import org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration;
 
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/test/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapperTest.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/test/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapperTest.java
index 2fee888b1e0..dbe23ac3852 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/test/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapperTest.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-common/src/test/java/org/apache/shardingsphere/governance/core/common/yaml/swapper/DataSourceConfigurationYamlSwapperTest.java
@@ -17,7 +17,7 @@
 
 package org.apache.shardingsphere.governance.core.common.yaml.swapper;
 
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration;
 import org.junit.Test;
 
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/main/java/org/apache/shardingsphere/governance/core/config/ConfigCenter.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/main/java/org/apache/shardingsphere/governance/core/config/ConfigCenter.java
index 3b7b6ffde5a..aa9b67eb7e7 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/main/java/org/apache/shardingsphere/governance/core/config/ConfigCenter.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/main/java/org/apache/shardingsphere/governance/core/config/ConfigCenter.java
@@ -24,11 +24,14 @@ import com.google.common.base.Strings;
 import com.google.common.eventbus.Subscribe;
 import org.apache.shardingsphere.encrypt.algorithm.config.AlgorithmProvidedEncryptRuleConfiguration;
 import org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration;
+import org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration;
+import org.apache.shardingsphere.governance.core.common.yaml.swapper.DataSourceConfigurationYamlSwapper;
+import org.apache.shardingsphere.governance.repository.api.ConfigurationRepository;
 import org.apache.shardingsphere.infra.auth.Authentication;
 import org.apache.shardingsphere.infra.auth.yaml.config.YamlAuthenticationConfiguration;
 import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.eventbus.ShardingSphereEventBus;
 import org.apache.shardingsphere.infra.eventbus.event.DataSourceEvent;
 import org.apache.shardingsphere.infra.eventbus.event.RuleEvent;
@@ -38,9 +41,6 @@ import org.apache.shardingsphere.infra.yaml.engine.YamlEngine;
 import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;
 import org.apache.shardingsphere.masterslave.algorithm.config.AlgorithmProvidedMasterSlaveRuleConfiguration;
 import org.apache.shardingsphere.masterslave.api.config.MasterSlaveRuleConfiguration;
-import org.apache.shardingsphere.governance.core.common.yaml.config.YamlDataSourceConfiguration;
-import org.apache.shardingsphere.governance.core.common.yaml.swapper.DataSourceConfigurationYamlSwapper;
-import org.apache.shardingsphere.governance.repository.api.ConfigurationRepository;
 import org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration;
 import org.apache.shardingsphere.sharding.algorithm.config.AlgorithmProvidedShardingRuleConfiguration;
 import org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/test/java/org/apache/shardingsphere/governance/core/config/ConfigCenterTest.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/test/java/org/apache/shardingsphere/governance/core/config/ConfigCenterTest.java
index febe474098a..3ebb20cd764 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/test/java/org/apache/shardingsphere/governance/core/config/ConfigCenterTest.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-config/src/test/java/org/apache/shardingsphere/governance/core/config/ConfigCenterTest.java
@@ -23,7 +23,7 @@ import org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration;
 import org.apache.shardingsphere.infra.auth.Authentication;
 import org.apache.shardingsphere.infra.auth.yaml.config.YamlAuthenticationConfiguration;
 import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration;
 import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/main/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacade.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/main/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacade.java
index 0ef6f3eb242..0b0b33f39d9 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/main/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacade.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/main/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacade.java
@@ -21,7 +21,7 @@ import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import org.apache.shardingsphere.infra.auth.Authentication;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.governance.core.config.ConfigCenter;
 import org.apache.shardingsphere.governance.core.facade.listener.GovernanceListenerManager;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/test/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacadeTest.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/test/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacadeTest.java
index 44bb10a179d..5ab52172220 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/test/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacadeTest.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-facade/src/test/java/org/apache/shardingsphere/governance/core/facade/GovernanceFacadeTest.java
@@ -19,7 +19,7 @@ package org.apache.shardingsphere.governance.core.facade;
 
 import org.apache.shardingsphere.infra.auth.Authentication;
 import org.apache.shardingsphere.infra.auth.ProxyUser;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.governance.core.config.ConfigCenter;
 import org.apache.shardingsphere.governance.core.facade.listener.GovernanceListenerManager;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/main/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContexts.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/main/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContexts.java
index 1bf51bb5e76..fdd73150a15 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/main/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContexts.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/main/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContexts.java
@@ -32,8 +32,9 @@ import org.apache.shardingsphere.governance.core.registry.event.CircuitStateChan
 import org.apache.shardingsphere.governance.core.registry.event.DisabledStateChangedEvent;
 import org.apache.shardingsphere.governance.core.registry.schema.GovernanceSchema;
 import org.apache.shardingsphere.infra.auth.Authentication;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConverter;
 import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;
 import org.apache.shardingsphere.infra.config.properties.ConfigurationPropertyKey;
 import org.apache.shardingsphere.infra.context.SchemaContext;
@@ -335,5 +336,11 @@ public abstract class GovernanceSchemaContexts implements SchemaContexts {
     
     protected abstract Map<String, DataSource> getModifiedDataSources(SchemaContext oldSchemaContext, Map<String, DataSourceConfiguration> newDataSourceConfigs);
     
-    protected abstract Map<String, Map<String, DataSource>> createDataSourcesMap(Map<String, Map<String, DataSourceConfiguration>> dataSourcesConfigs);
+    private Map<String, Map<String, DataSource>> createDataSourcesMap(final Map<String, Map<String, DataSourceConfiguration>> dataSourcesConfigs) {
+        Map<String, Map<String, DataSource>> result = new LinkedHashMap<>(dataSourcesConfigs.size(), 1);
+        for (Entry<String, Map<String, DataSourceConfiguration>> entry : dataSourcesConfigs.entrySet()) {
+            result.put(entry.getKey(), DataSourceConverter.getDataSourceMap(entry.getValue()));
+        }
+        return result;
+    }
 }
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContextsTest.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContextsTest.java
index 530f77ec0ed..aeaa3f2e0b3 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContextsTest.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/GovernanceSchemaContextsTest.java
@@ -34,7 +34,7 @@ import org.apache.shardingsphere.governance.core.registry.event.DisabledStateCha
 import org.apache.shardingsphere.governance.core.registry.schema.GovernanceSchema;
 import org.apache.shardingsphere.governance.core.schema.fixture.GovernanceSchemaContextsFixture;
 import org.apache.shardingsphere.infra.auth.Authentication;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;
 import org.apache.shardingsphere.infra.context.SchemaContext;
 import org.apache.shardingsphere.infra.context.impl.StandardSchemaContexts;
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/fixture/GovernanceSchemaContextsFixture.java b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/fixture/GovernanceSchemaContextsFixture.java
index 0f329bb6303..c59992f05e7 100644
--- a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/fixture/GovernanceSchemaContextsFixture.java
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/java/org/apache/shardingsphere/governance/core/schema/fixture/GovernanceSchemaContextsFixture.java
@@ -21,7 +21,7 @@ import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.shardingsphere.governance.core.facade.GovernanceFacade;
 import org.apache.shardingsphere.governance.core.schema.GovernanceSchemaContexts;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.context.SchemaContext;
 import org.apache.shardingsphere.infra.context.SchemaContexts;
 import org.apache.shardingsphere.infra.context.schema.DataSourceParameter;
@@ -58,16 +58,6 @@ public final class GovernanceSchemaContextsFixture extends GovernanceSchemaConte
         return result;
     }
     
-    @Override
-    protected Map<String, Map<String, DataSource>> createDataSourcesMap(final Map<String, Map<String, DataSourceConfiguration>> dataSourcesConfigs) {
-        Map<String, Map<String, DataSourceParameter>> dataSourceParametersMap = createDataSourceParametersMap(dataSourcesConfigs);
-        Map<String, Map<String, DataSource>> result = new LinkedHashMap<>(dataSourceParametersMap.size(), 1);
-        for (Entry<String, Map<String, DataSourceParameter>> entry : dataSourceParametersMap.entrySet()) {
-            result.put(entry.getKey(), createDataSources(entry.getValue()));
-        }
-        return result;
-    }
-    
     private Map<String, DataSource> createDataSources(final Map<String, DataSourceParameter> dataSourceParameters) {
         Map<String, DataSource> result = new LinkedHashMap<>(dataSourceParameters.size(), 1);
         for (Entry<String, DataSourceParameter> entry: dataSourceParameters.entrySet()) {
diff --git a/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/resources/logback-test.xml b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/resources/logback-test.xml
new file mode 100644
index 00000000000..1af4509b347
--- /dev/null
+++ b/shardingsphere-governance/shardingsphere-governance-core/shardingsphere-governance-core-schema/src/test/resources/logback-test.xml
@@ -0,0 +1,34 @@
+<?xml version=""1.0""?>
+<!--
+  ~ Licensed to the Apache Software Foundation (ASF) under one or more
+  ~ contributor license agreements.  See the NOTICE file distributed with
+  ~ this work for additional information regarding copyright ownership.
+  ~ The ASF licenses this file to You under the Apache License, Version 2.0
+  ~ (the ""License""); you may not use this file except in compliance with
+  ~ the License.  You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an ""AS IS"" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<configuration>
+    <appender name=""console"" class=""ch.qos.logback.core.ConsoleAppender"">
+        <encoder>
+            <pattern>[%-5level] %d{HH:mm:ss.SSS} [%thread] %logger{36} - %msg%n</pattern>
+        </encoder>
+    </appender>
+    <logger name=""org.apache.shardingsphere"" level=""warn"" additivity=""false"">
+        <appender-ref ref=""console""/>
+    </logger>
+    <logger name=""org.apache.shardingsphere.infra.executor.sql.resourced.jdbc.executor.ExecutorExceptionHandler"" level=""off"" />
+    
+    <root>
+        <level value=""error"" />
+        <appender-ref ref=""console"" />
+    </root>
+</configuration> 
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/DataSourceConfiguration.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConfiguration.java
similarity index 90%
rename from shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/DataSourceConfiguration.java
rename to shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConfiguration.java
index 709fbcb80a9..6bc0d731b78 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/DataSourceConfiguration.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConfiguration.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.infra.config;
+package org.apache.shardingsphere.infra.config.datasource;
 
 import com.google.common.base.CaseFormat;
 import com.google.common.base.Joiner;
@@ -24,6 +24,7 @@ import com.google.common.collect.Sets;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
+import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;
 
 import javax.sql.DataSource;
 import java.lang.reflect.Method;
@@ -51,6 +52,7 @@ public final class DataSourceConfiguration {
     private static final Collection<String> SKIPPED_PROPERTY_NAMES;
     
     static {
+        ShardingSphereServiceLoader.register(JDBCParameterDecorator.class);
         GENERAL_CLASS_TYPE = Sets.newHashSet(boolean.class, Boolean.class, int.class, Integer.class, long.class, Long.class, String.class, Collection.class, List.class);
         SKIPPED_PROPERTY_NAMES = Sets.newHashSet(""loginTimeout"");
     }
@@ -100,6 +102,7 @@ public final class DataSourceConfiguration {
      * 
      * @return data source
      */
+    @SuppressWarnings(""unchecked"")
     @SneakyThrows(ReflectiveOperationException.class)
     public DataSource createDataSource() {
         DataSource result = (DataSource) Class.forName(dataSourceClassName).getConstructor().newInstance();
@@ -113,9 +116,16 @@ public final class DataSourceConfiguration {
                 setterMethod.get().invoke(result, entry.getValue());
             }
         }
+        findJDBCParameterDecorator(result).ifPresent(decorator -> decorator.decorate(result));
         return result;
     }
     
+    @SuppressWarnings(""rawtypes"")
+    private Optional<JDBCParameterDecorator> findJDBCParameterDecorator(final DataSource dataSource) {
+        return ShardingSphereServiceLoader.newServiceInstances(JDBCParameterDecorator.class).stream().filter(each -> each.getType() == dataSource.getClass()).findFirst();
+        
+    }
+    
     private Optional<Method> findSetterMethod(final Method[] methods, final String property) {
         String setterMethodName = Joiner.on("""").join(SETTER_PREFIX, CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, property));
         for (Method each : methods) {
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverter.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConverter.java
similarity index 93%
rename from shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverter.java
rename to shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConverter.java
index f2531617f67..f50ba221010 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverter.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/DataSourceConverter.java
@@ -15,11 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.driver.governance.internal.util;
+package org.apache.shardingsphere.infra.config.datasource;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
 
 import javax.sql.DataSource;
 import java.util.LinkedHashMap;
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/JDBCParameterDecorator.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/JDBCParameterDecorator.java
new file mode 100644
index 00000000000..f6f26a8d25a
--- /dev/null
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource/JDBCParameterDecorator.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.config.datasource;
+
+import javax.sql.DataSource;
+
+/**
+ * JDBC parameter decorator.
+ * 
+ * @param <T> type of data source
+ */
+public interface JDBCParameterDecorator<T extends DataSource> {
+    
+    /**
+     * Decorate data source.
+     * 
+     * @param dataSource data source to be decorated
+     */
+    void decorate(T dataSource);
+    
+    /**
+     * Get data source type.
+     *
+     * @return data source type
+     */
+    Class<T> getType();
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBus.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBus.java
index 9e131ebacff..4e37ba5e064 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBus.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBus.java
@@ -1,42 +1,42 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus;
-
-import com.google.common.eventbus.EventBus;
-import lombok.AccessLevel;
-import lombok.NoArgsConstructor;
-
-/**
- * ShardingSphere event bus.
- */
-@NoArgsConstructor(access = AccessLevel.PRIVATE)
-public final class ShardingSphereEventBus {
-    
-    /**
-     * Get instance of ShardingSphere event bus.
-     *
-     * @return instance of ShardingSphere event bus
-     */
-    public static EventBus getInstance() {
-        return ShardingSphereEventBusHolder.INSTANCE;
-    }
-    
-    private static final class ShardingSphereEventBusHolder {
-        private static final EventBus INSTANCE = new EventBus();
-    }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus;
+
+import com.google.common.eventbus.EventBus;
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+/**
+ * ShardingSphere event bus.
+ */
+@NoArgsConstructor(access = AccessLevel.PRIVATE)
+public final class ShardingSphereEventBus {
+    
+    /**
+     * Get instance of ShardingSphere event bus.
+     *
+     * @return instance of ShardingSphere event bus
+     */
+    public static EventBus getInstance() {
+        return ShardingSphereEventBusHolder.INSTANCE;
+    }
+    
+    private static final class ShardingSphereEventBusHolder {
+        private static final EventBus INSTANCE = new EventBus();
+    }
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/DataSourceEvent.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/DataSourceEvent.java
index 9c38d3318bd..9e505b2988a 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/DataSourceEvent.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/DataSourceEvent.java
@@ -1,36 +1,36 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus.event;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
-
-import java.util.Map;
-
-/**
- * Data source event.
- */
-@RequiredArgsConstructor
-@Getter
-public class DataSourceEvent {
-    
-    private final String schemaName;
-    
-    private final Map<String, DataSourceConfiguration> dataSourceConfigurations;
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus.event;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+
+import java.util.Map;
+
+/**
+ * Data source event.
+ */
+@RequiredArgsConstructor
+@Getter
+public final class DataSourceEvent {
+    
+    private final String schemaName;
+    
+    private final Map<String, DataSourceConfiguration> dataSourceConfigurations;
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/MetaDataEvent.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/MetaDataEvent.java
index c7078b8cad1..b68f2e49523 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/MetaDataEvent.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/MetaDataEvent.java
@@ -1,34 +1,34 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus.event;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.metadata.schema.RuleSchemaMetaData;
-
-/**
- * Meta data event.
- */
-@RequiredArgsConstructor
-@Getter
-public class MetaDataEvent {
-    
-    private final String schemaName;
-    
-    private final RuleSchemaMetaData metaData;
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus.event;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.infra.metadata.schema.RuleSchemaMetaData;
+
+/**
+ * Meta data event.
+ */
+@RequiredArgsConstructor
+@Getter
+public final class MetaDataEvent {
+    
+    private final String schemaName;
+    
+    private final RuleSchemaMetaData metaData;
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/RuleEvent.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/RuleEvent.java
index 11c178d6f26..2a09e5fb04b 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/RuleEvent.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/RuleEvent.java
@@ -1,36 +1,36 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus.event;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.config.RuleConfiguration;
-
-import java.util.Collection;
-
-/**
- * Rule event.
- */
-@RequiredArgsConstructor
-@Getter
-public class RuleEvent {
-    
-    private final String schemaName;
-    
-    private final Collection<RuleConfiguration> ruleConfigurations;
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus.event;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.apache.shardingsphere.infra.config.RuleConfiguration;
+
+import java.util.Collection;
+
+/**
+ * Rule event.
+ */
+@RequiredArgsConstructor
+@Getter
+public final class RuleEvent {
+    
+    private final String schemaName;
+    
+    private final Collection<RuleConfiguration> ruleConfigurations;
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/SchemaNameEvent.java b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/SchemaNameEvent.java
index 11164e3191a..3a63d37d49c 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/SchemaNameEvent.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/eventbus/event/SchemaNameEvent.java
@@ -1,33 +1,33 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus.event;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-
-/**
- * Schema name event.
- */
-@RequiredArgsConstructor
-@Getter
-public class SchemaNameEvent {
-    
-    private final String schemaName;
-    
-    private final boolean overwrite; 
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus.event;
+
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+
+/**
+ * Schema name event.
+ */
+@RequiredArgsConstructor
+@Getter
+public final class SchemaNameEvent {
+    
+    private final String schemaName;
+    
+    private final boolean overwrite; 
+}
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConfigurationTest.java b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConfigurationTest.java
index a86ccb3084e..b0d0672be57 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConfigurationTest.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConfigurationTest.java
@@ -19,6 +19,7 @@ package org.apache.shardingsphere.infra.config;
 
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.commons.dbcp2.BasicDataSource;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.junit.Test;
 
 import java.sql.SQLException;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverterTest.java b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConverterTest.java
similarity index 93%
rename from shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverterTest.java
rename to shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConverterTest.java
index b202c185dbe..7042594fe99 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/util/DataSourceConverterTest.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/config/DataSourceConverterTest.java
@@ -15,10 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.shardingsphere.driver.governance.internal.util;
+package org.apache.shardingsphere.infra.config;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConverter;
 import org.junit.Test;
 
 import javax.sql.DataSource;
diff --git a/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBusTest.java b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBusTest.java
index ed488251e2b..4320dca661d 100644
--- a/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBusTest.java
+++ b/shardingsphere-infra/shardingsphere-infra-common/src/test/java/org/apache/shardingsphere/infra/eventbus/ShardingSphereEventBusTest.java
@@ -1,31 +1,31 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the ""License""); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.eventbus;
-
-import org.junit.Test;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
-public class ShardingSphereEventBusTest {
-    
-    @Test
-    public void assertInstance() {
-        assertThat(ShardingSphereEventBus.getInstance(), is(ShardingSphereEventBus.getInstance()));
-    }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.infra.eventbus;
+
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+public final class ShardingSphereEventBusTest {
+    
+    @Test
+    public void assertInstance() {
+        assertThat(ShardingSphereEventBus.getInstance(), is(ShardingSphereEventBus.getInstance()));
+    }
+}
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSource.java b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSource.java
index dcc4e21be16..61a4c25b7e0 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSource.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSource.java
@@ -22,14 +22,14 @@ import lombok.Getter;
 import lombok.Setter;
 import org.apache.shardingsphere.driver.governance.internal.circuit.datasource.CircuitBreakerDataSource;
 import org.apache.shardingsphere.driver.governance.internal.schema.JDBCGovernanceSchemaContexts;
-import org.apache.shardingsphere.driver.governance.internal.util.DataSourceConverter;
 import org.apache.shardingsphere.driver.jdbc.core.connection.ShardingSphereConnection;
 import org.apache.shardingsphere.driver.jdbc.unsupported.AbstractUnsupportedOperationDataSource;
 import org.apache.shardingsphere.governance.core.config.ConfigCenter;
 import org.apache.shardingsphere.governance.core.facade.GovernanceFacade;
 import org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration;
 import org.apache.shardingsphere.infra.auth.Authentication;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConverter;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.infra.context.SchemaContexts;
 import org.apache.shardingsphere.infra.context.SchemaContextsBuilder;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContexts.java b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContexts.java
index 1a196224d42..92e557c7bac 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContexts.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/main/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContexts.java
@@ -18,10 +18,10 @@
 package org.apache.shardingsphere.driver.governance.internal.schema;
 
 import com.google.common.collect.Maps;
-import org.apache.shardingsphere.driver.governance.internal.util.DataSourceConverter;
 import org.apache.shardingsphere.governance.core.facade.GovernanceFacade;
 import org.apache.shardingsphere.governance.core.schema.GovernanceSchemaContexts;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConverter;
 import org.apache.shardingsphere.infra.context.SchemaContext;
 import org.apache.shardingsphere.infra.context.SchemaContexts;
 import org.apache.shardingsphere.infra.database.DefaultSchema;
@@ -58,13 +58,4 @@ public final class JDBCGovernanceSchemaContexts extends GovernanceSchemaContexts
         Map<String, DataSourceConfiguration> oldDataSourceConfigs = DataSourceConverter.getDataSourceConfigurationMap(getSchemaContexts().get(DefaultSchema.LOGIC_NAME).getSchema().getDataSources());
         return oldDataSourceConfigs.containsKey(dataSourceConfigs.getKey()) && !oldDataSourceConfigs.get(dataSourceConfigs.getKey()).equals(dataSourceConfigs.getValue());
     }
-    
-    @Override
-    protected Map<String, Map<String, DataSource>> createDataSourcesMap(final Map<String, Map<String, DataSourceConfiguration>> dataSourcesConfigs) {
-        Map<String, Map<String, DataSource>> result = new LinkedHashMap<>(dataSourcesConfigs.size(), 1);
-        for (Entry<String, Map<String, DataSourceConfiguration>> entry : dataSourcesConfigs.entrySet()) {
-            result.put(entry.getKey(), DataSourceConverter.getDataSourceMap(entry.getValue()));
-        }
-        return result;
-    }
 }
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSourceTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSourceTest.java
index 5bac954122e..11bf542f545 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSourceTest.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/datasource/GovernanceShardingSphereDataSourceTest.java
@@ -29,7 +29,7 @@ import org.apache.shardingsphere.governance.core.registry.event.DisabledStateCha
 import org.apache.shardingsphere.governance.core.registry.schema.GovernanceSchema;
 import org.apache.shardingsphere.governance.repository.api.config.GovernanceCenterConfiguration;
 import org.apache.shardingsphere.governance.repository.api.config.GovernanceConfiguration;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.algorithm.ShardingSphereAlgorithmConfiguration;
 import org.apache.shardingsphere.infra.context.SchemaContexts;
 import org.apache.shardingsphere.infra.database.DefaultSchema;
diff --git a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContextsTest.java b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContextsTest.java
index 51286aeddb3..bb76ed0321e 100644
--- a/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContextsTest.java
+++ b/shardingsphere-jdbc/shardingsphere-jdbc-governance/src/test/java/org/apache/shardingsphere/driver/governance/internal/schema/JDBCGovernanceSchemaContextsTest.java
@@ -18,11 +18,11 @@
 package org.apache.shardingsphere.driver.governance.internal.schema;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.shardingsphere.driver.governance.internal.util.DataSourceConverter;
 import org.apache.shardingsphere.governance.core.common.event.datasource.DataSourceChangedEvent;
 import org.apache.shardingsphere.governance.core.facade.GovernanceFacade;
 import org.apache.shardingsphere.infra.auth.Authentication;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConverter;
 import org.apache.shardingsphere.infra.config.properties.ConfigurationProperties;
 import org.apache.shardingsphere.infra.context.SchemaContext;
 import org.apache.shardingsphere.infra.context.impl.StandardSchemaContexts;
diff --git a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/RDLBackendHandler.java b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/RDLBackendHandler.java
index 77f34483022..07e12c13c3e 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/RDLBackendHandler.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-backend/src/main/java/org/apache/shardingsphere/proxy/backend/text/admin/RDLBackendHandler.java
@@ -18,8 +18,8 @@
 package org.apache.shardingsphere.proxy.backend.text.admin;
 
 import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.context.impl.StandardSchemaContexts;
 import org.apache.shardingsphere.infra.database.type.DatabaseType;
 import org.apache.shardingsphere.infra.eventbus.ShardingSphereEventBus;
diff --git a/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrap.java b/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrap.java
index f1e005a6988..90a4d795bf8 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrap.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/main/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrap.java
@@ -20,7 +20,7 @@ package org.apache.shardingsphere.proxy.governance;
 import lombok.RequiredArgsConstructor;
 import org.apache.shardingsphere.infra.auth.Authentication;
 import org.apache.shardingsphere.infra.auth.yaml.swapper.AuthenticationYamlSwapper;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.config.RuleConfiguration;
 import org.apache.shardingsphere.infra.yaml.swapper.YamlRuleConfigurationSwapperEngine;
 import org.apache.shardingsphere.infra.context.schema.DataSourceParameter;
diff --git a/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/test/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrapTest.java b/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/test/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrapTest.java
index addc3783438..b84aeab950f 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/test/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrapTest.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-bootstrap/src/test/java/org/apache/shardingsphere/proxy/governance/GovernanceBootstrapTest.java
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.proxy.governance;
 
 import com.zaxxer.hikari.HikariDataSource;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.governance.core.facade.GovernanceFacade;
 import org.apache.shardingsphere.proxy.config.ProxyConfiguration;
 import org.apache.shardingsphere.proxy.config.ProxyConfigurationLoader;
diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverter.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverter.java
index 5a3b6ced0bd..59bd96061d9 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverter.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/main/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverter.java
@@ -20,7 +20,7 @@ package org.apache.shardingsphere.proxy.config.util;
 import com.zaxxer.hikari.HikariDataSource;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.context.schema.DataSourceParameter;
 import org.apache.shardingsphere.proxy.config.yaml.YamlDataSourceParameter;
 
diff --git a/shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverterTest.java b/shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverterTest.java
index d17277b6f90..38d6d411194 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverterTest.java
+++ b/shardingsphere-proxy/shardingsphere-proxy-common/src/test/java/org/apache/shardingsphere/proxy/config/util/DataSourceConverterTest.java
@@ -18,7 +18,7 @@
 package org.apache.shardingsphere.proxy.config.util;
 
 import com.zaxxer.hikari.HikariDataSource;
-import org.apache.shardingsphere.infra.config.DataSourceConfiguration;
+import org.apache.shardingsphere.infra.config.datasource.DataSourceConfiguration;
 import org.apache.shardingsphere.infra.context.schema.DataSourceParameter;
 import org.junit.Test;
 
diff --git a/shardingsphere-proxy/shardingsphere-proxy-governance/pom.xml b/shardingsphere-proxy/shardingsphere-proxy-governance/pom.xml
index 7a0859d1651..9927316a05b 100644
--- a/shardingsphere-proxy/shardingsphere-proxy-governance/pom.xml
+++ b/shardingsphere-proxy/shardingsphere-proxy-governance/pom.xml
@@ -54,5 +54,11 @@
             <artifactId>shardingsphere-governance-core-schema</artifactId>
             <version>${project.parent.version}</version>
         </dependency>
+        
+        <dependency>
+            <groupId>com.zaxxer</groupId>
+            <artifactId>HikariCP</artifactId>
+            <scope>compile</scope>
+        </dependency>
     </dependencies>
 </project>
diff --git a/shardingsphere-proxy/shardingsphere-proxy-governance/src/main/java/org/apache/shardingsphere/proxy/governance/schema/HikariJDBCParameterDecorator.java b/shardingsphere-proxy/shardingsphere-proxy-governance/src/main/java/org/apache/shardingsphere/proxy/governance/schema/HikariJDBCParameterDecorator.java
new file mode 100644
index 00000000000..c6af5ff1695
--- /dev/null
+++ b/shardingsphere-proxy/shardingsphere-proxy-governance/src/main/java/org/apache/shardingsphere/proxy/governance/schema/HikariJDBCParameterDecorator.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.governance.schema;
+
+import com.zaxxer.hikari.HikariDataSource;
+import org.apache.shardingsphere.infra.config.datasource.JDBCParameterDecorator;
+
+/**
+ * JDBC parameter decorator for HikariCP.
+ */
+public final class HikariJDBCParameterDecorator implements JDBCParameterDecorator<HikariDataSource> {
+    
+    @Override
+    public void decorate(final HikariDataSource dataSource) {
+        dataSource.getDataSourceProperties().setProperty(""useServerPrepStmts"", Boolean.TRUE.toString());
+        dataSource.getDataSourceProperties().setProperty(""cachePrepStmts"", ""true"");
+        dataSource.getDataSourceProperties().setProperty(""prepStmtCacheSize"", ""250"");
+        dataSource.getDataSourceProperties().setProperty(""prepStmtCacheSqlLimit"", ""2048"");
+        dataSource.getDataSourceProperties().setProperty(""useLocalSessionState"", Boolean.TRUE.toString());
+        dataSource.getDataSourceProperties().setProperty(""rewriteBatchedStatements"", Boolean.TRUE.toString());
+     ",Add JDBCParameterDecorator to decouple ProxyGovernanceSchemaContexts . createDataSources ( <issue_id> ) .,Refactor `DataSourceConfiguration` to `org.apache.shardingsphere.infra.config.datasource` package and add JDBC parameter decorator.,"Rename `DataSourceConfiguration` to `DataSourceConfiguration` in infra module

This commit message is concise and accurately describes the changes made in the commit. It also follows the conventional commit message format, which is a good practice in software development.","Refactor DataSourceConfiguration and introduce JDBCParameterDecorator

This commit refactors the DataSourceConfiguration class and introduces a new interface JDBCParameterDecorator. Here are the main changes:

1. The DataSourceConfiguration class is moved from the shardingsphere-infra-common module to the shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource package.

2. The JDBCParameterDecorator interface is added to allow decorating DataSource objects before they are returned by the createDataSource() method of the DataSourceConfiguration class.

3. The DataSourceConverter class is moved from the shardingsphere-jdbc/shardingsphere-jdbc-governance module to the shardingsphere-infra-common/src/main/java/org/apache/shardingsphere/infra/config/datasource package.

4. The GovernanceSchemaContextsFixture class is updated to use the new DataSourceConverter class from the shardingsphere-infra-common module.

5. The ShardingSphereEventBusTest class is updated to use the final keyword for the class declaration.

6. The GovernanceShardingSphereDataSource class is updated to use the new DataSourceConverter class from the shardingsphere-infra-common module.

7. The JDBCGovernanceSchemaContexts class is updated to use the new DataSourceConverter class from the shardingsphere-infra-common module.

8. The RDLBackendHandler class is updated to import the DataSourceConfiguration class from the shardingsphere-infra-common module.

9. The GovernanceBootstrap class is updated to import the DataSourceConfiguration class from the shardingsphere-infra-common module.

10. The GovernanceBootstrapTest class is updated to import the DataSourceConfiguration class from the shardingsphere-infra-common module.

11. The DataSourceConverterTest class is updated to import the DataSourceConfiguration class from the shardingsphere-infra-common module.

12. The HikariJDBCParameterDecorator class is added to decorate HikariDataSource objects before they are returned by the createDataSource() method of the DataSourceConfiguration class.

These changes refactor the DataSourceConfiguration class and introduce a new interface JDBCParameterDecorator to allow decorating DataSource objects before they are returned by the createDataSource() method. The changes also update various classes to use the new DataSourceConverter class from the shardingsphere-infra-common module and to import the DataSourceConfiguration class from the same module.","Refactor data source configuration imports, move related classes to datasource package, and add JDBC parameter decorator for HikariCP."
"diff --git a/robotium-solo/src/main/java/com/jayway/android/robotium/solo/ActivityUtils.java b/robotium-solo/src/main/java/com/jayway/android/robotium/solo/ActivityUtils.java
index b6f7de7..b5c446d 100644
--- a/robotium-solo/src/main/java/com/jayway/android/robotium/solo/ActivityUtils.java
+++ b/robotium-solo/src/main/java/com/jayway/android/robotium/solo/ActivityUtils.java
@@ -1,6 +1,7 @@
 package com.jayway.android.robotium.solo;
 
 import java.util.ArrayList;
+import java.util.LinkedHashSet;
 import junit.framework.Assert;
 import android.app.Activity;
 import android.app.Instrumentation;
@@ -23,7 +24,7 @@ class ActivityUtils {
 	private ActivityMonitor activityMonitor;
 	private Activity activity;
 	private final Sleeper sleeper;
-	private ArrayList<Activity> activityList;
+	private LinkedHashSet<Activity> activityList;
 	private final String LOG_TAG = ""Robotium"";
 
 	/**
@@ -39,7 +40,7 @@ class ActivityUtils {
 		this.inst = inst;
 		this.activity = activity;
 		this.sleeper = sleeper;
-		activityList = new ArrayList<Activity>();
+		activityList = new LinkedHashSet<Activity>();
 		setupActivityMonitor();
 	}
 
@@ -52,7 +53,7 @@ class ActivityUtils {
 
 	public ArrayList<Activity> getAllOpenedActivities()
 	{
-		return activityList;
+		return new ArrayList<Activity>(activityList);
 	}
 
 
@@ -145,13 +146,8 @@ class ActivityUtils {
 			if (activityMonitor.getLastActivity() != null)
 				activity = activityMonitor.getLastActivity();
 		}
-
-		if (activityList.contains(activity))
-			return activity;
-		else {
 			activityList.add(activity);
 			return activity;
-		}
 	}
 
 
@@ -164,9 +160,10 @@ class ActivityUtils {
 
 	public void goBackToActivity(String name)
 	{
+		ArrayList<Activity> activitiesOpened = getAllOpenedActivities();
 		boolean found = false;	
-		for(int i = 0; i < activityList.size(); i++){
-			if(activityList.get(i).getClass().getSimpleName().equals(name)){
+		for(int i = 0; i < activitiesOpened.size(); i++){
+			if(activitiesOpened.get(i).getClass().getSimpleName().equals(name)){
 				found = true;
 				break;
 			}
@@ -180,8 +177,8 @@ class ActivityUtils {
 			}
 		}
 		else{
-			for (int i = 0; i < activityList.size(); i++)
-				Log.d(LOG_TAG, ""Activity priorly opened: ""+ activityList.get(i).getClass().getSimpleName());
+			for (int i = 0; i < activitiesOpened.size(); i++)
+				Log.d(LOG_TAG, ""Activity priorly opened: ""+ activitiesOpened.get(i).getClass().getSimpleName());
 			Assert.assertTrue(""No Activity named "" + name + "" has been priorly opened"", false);
 		}
 	}
@@ -223,10 +220,11 @@ class ActivityUtils {
 	 */
 
 	public void finishOpenedActivities(){
+		ArrayList<Activity> activitiesOpened = getAllOpenedActivities();
 		// Finish all opened activities
-		for (int i = activityList.size()-1; i >= 0; i--) {
+		for (int i = activitiesOpened.size()-1; i >= 0; i--) {
 			sleeper.sleep(100);
-			finishActivity(activityList.get(i));
+			finishActivity(activitiesOpened.get(i));
 		}
 		// Finish the initial activity, pressing Back for good measure
 		finishActivity(getCurrentActivity());",Using a LinkedHashSet instead of ArrayList to store unique Activity objects,"""Replace ArrayList with LinkedHashSet for activityList to prevent duplicates""","""Switched to LinkedHashSet for storing opened activities to maintain uniqueness and improve performance.""","This commit changes the implementation of the `ActivityUtils` class in the Robotium-Solo project.

1. The `activityList` field has been changed from an `ArrayList` to a `LinkedHashSet`. This is likely to ensure that the list of activities only contains unique elements, as a set automatically removes duplicates. The order of insertion is also maintained with `LinkedHashSet`.

2. The `getAllOpenedActivities` method now returns a new `ArrayList` containing the elements from `activityList` instead of returning `activityList` directly. This is to prevent external modifications to the `activityList` field.

3. The `getCurrentActivity` method no longer checks if `activity` is already in `activityList` before adding it. This is because `activityList` is now a `LinkedHashSet`, which automatically removes duplicates.

4. The `goBackToActivity` and `finishOpenedActivities` methods now operate on a local copy of `activityList` obtained through `getAllOpenedActivities`. This is to prevent concurrent modification exceptions while iterating over `activityList`.

The commit message should reflect these changes, for example: ""Refactor ActivityUtils to use LinkedHashSet for activityList and operate on a local copy in iteration methods"".","""Refactored ActivityUtils: Replaced ArrayList with LinkedHashSet for efficient handling of unique activities while maintaining order."""
"diff --git a/aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java b/aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
index a06936a99..59c22afac 100644
--- a/aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
+++ b/aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
@@ -23,41 +23,93 @@ import org.agrona.concurrent.ShutdownSignalBarrier;
 import static io.aeron.driver.MediaDriver.loadPropertiesFiles;
 
 /**
- * Archiving media driver which has dedicated threads for high throughput.
+ * Archiving {@link MediaDriver}.
  */
-public class ArchivingMediaDriver
+public final class ArchivingMediaDriver implements AutoCloseable
 {
+    private final MediaDriver driver;
+    private final Archive archive;
+
+    private ArchivingMediaDriver(final MediaDriver driver, final Archive archive)
+    {
+        this.driver = driver;
+        this.archive = archive;
+    }
+
     /**
-     * Start an {@link ArchiveConductor} as a stand-alone process, with a {@link MediaDriver}.
+     * Get the launched {@link Archive}.
      *
-     * @param args command line argument which is a list for properties files as URLs or filenames.
+     * @return the launched {@link Archive}.
      */
-    public static void main(final String[] args)
+    public Archive archive()
     {
-        loadPropertiesFiles(args);
+        return archive;
+    }
+
+    /**
+     * Get the launched {@link MediaDriver}.
+     *
+     * @return the launched {@link MediaDriver}.
+     */
+    public MediaDriver mediaDriver()
+    {
+        return driver;
+    }
 
-        launch();
+    public void close()
+    {
+        archive.close();
+        driver.close();
     }
 
     /**
-     * Launch an {@link Archive} with embedded {@link MediaDriver} and await a shutdown signal.
+     * Launch an {@link Archive} with an embedded {@link MediaDriver} and await a shutdown signal.
+     *
+     * @param args command line argument which is a list for properties files as URLs or filenames.
      */
-    public static void launch()
+    public static void main(final String[] args)
     {
-        final boolean useConcurrentCounterManager = Configuration.THREADING_MODE_DEFAULT != ThreadingMode.INVOKER;
-
-        try (MediaDriver driver = MediaDriver.launch(
-                new MediaDriver.Context()
-                    .useConcurrentCounterManager(useConcurrentCounterManager));
-             Archive ignore = Archive.launch(
-                 new Archive.Context()
-                    .mediaDriverAgentInvoker(driver.sharedAgentInvoker())
-                    .countersManager(driver.context().countersManager())
-                    .errorHandler(driver.context().errorHandler())))
+        loadPropertiesFiles(args);
+
+        try (ArchivingMediaDriver ignore = launch())
         {
             new ShutdownSignalBarrier().await();
 
             System.out.println(""Shutdown Archive..."");
         }
     }
+
+    /**
+     * Launch a new {@link ArchivingMediaDriver} with default contexts.
+     *
+     * @return a new {@link ArchivingMediaDriver} with default contexts.
+     */
+    public static ArchivingMediaDriver launch()
+    {
+        return launch(new MediaDriver.Context(), new Archive.Context());
+    }
+
+    /**
+     * Launch a new {@link ArchivingMediaDriver} with provided contexts.
+     *
+     * @param driverCtx  for configuring the {@link MediaDriver}.
+     * @param archiveCtx for configuring the {@link Archive}.
+     * @return a new {@link ArchivingMediaDriver} with the provided contexts.
+     */
+    public static ArchivingMediaDriver launch(final MediaDriver.Context driverCtx, final Archive.Context archiveCtx)
+    {
+        final boolean useConcurrentCounterManager =
+            driverCtx.threadingMode() != ThreadingMode.INVOKER ||
+                (driverCtx.threadingMode() == null && Configuration.THREADING_MODE_DEFAULT != ThreadingMode.INVOKER);
+
+        final MediaDriver driver = MediaDriver.launch(driverCtx
+            .useConcurrentCounterManager(useConcurrentCounterManager));
+
+        final Archive archive = Archive.launch(archiveCtx
+                .mediaDriverAgentInvoker(driver.sharedAgentInvoker())
+                .countersManager(driver.context().countersManager())
+                .errorHandler(driver.context().errorHandler()));
+
+        return new ArchivingMediaDriver(driver, archive);
+    }
 }
diff --git a/aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java b/aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
index 58875623f..8517f33a1 100644
--- a/aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
+++ b/aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
@@ -1110,6 +1110,11 @@ public final class MediaDriver implements AutoCloseable
             return driverConductorProxy;
         }
 
+        public ThreadingMode threadingMode()
+        {
+            return threadingMode;
+        }
+
         public IdleStrategy conductorIdleStrategy()
         {
             return conductorIdleStrategy;",Rework ArchivingMediaDriver .,"""Refactor ArchivingMediaDriver to implement AutoCloseable and provide access to launched Archive and MediaDriver""","""Refactor ArchivingMediaDriver to encapsulate MediaDriver and Archive, adding AutoCloseable and threading mode configuration""","The commit message could be:

""Refactor ArchivingMediaDriver and MediaDriver:

- Add methods to get the launched Archive and MediaDriver in ArchivingMediaDriver.
- Add close method to ArchivingMediaDriver to close both Archive and MediaDriver.
- Modify the main method in ArchivingMediaDriver to load properties files and launch an ArchivingMediaDriver.
- Add methods to launch ArchivingMediaDriver with default and provided contexts.
- Add method to get threading mode in MediaDriver.""","Refactored `ArchivingMediaDriver` to implement `AutoCloseable`, added threading mode method in `MediaDriver.Context`, and enhanced launch methods."
"diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java
index 9780fe0669..7b5e838d28 100644
--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java
+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java
@@ -49,7 +49,6 @@ public class JsonMarshallerTests {
 		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
 		JsonMarshaller marshaller = new JsonMarshaller();
 		marshaller.write(metadata, outputStream);
-		System.out.println(outputStream);
 		ConfigurationMetadata read = marshaller.read(new ByteArrayInputStream(
 				outputStream.toByteArray()));
 		assertThat(read,",Remove useless System . out . println,"""Remove debug print statement in JsonMarshallerTests""","The commit message should be:

""Remove unnecessary System.out.println statement from JsonMarshallerTests""

This message accurately describes the change made in the commit, which is the removal of a print statement.","""Remove unnecessary print statement in JsonMarshallerTests.java""",Removed debug print statement from JsonMarshallerTests in spring-boot-configuration-processor module.
"diff --git a/x-pack/plugin/ml/qa/ml-with-security/build.gradle b/x-pack/plugin/ml/qa/ml-with-security/build.gradle
index 1929b03ba43..063ad43a921 100644
--- a/x-pack/plugin/ml/qa/ml-with-security/build.gradle
+++ b/x-pack/plugin/ml/qa/ml-with-security/build.gradle
@@ -92,6 +92,7 @@ integTest.runner {
     'ml/data_frame_analytics_crud/Test put classification given num_top_classes is greater than 1k',
     'ml/data_frame_analytics_crud/Test put classification given training_percent is less than one',
     'ml/data_frame_analytics_crud/Test put classification given training_percent is greater than hundred',
+    'ml/data_frame_analytics_memory_usage_estimation/Test memory usage estimation for empty data frame',
     'ml/evaluate_data_frame/Test given missing index',
     'ml/evaluate_data_frame/Test given index does not exist',
     'ml/evaluate_data_frame/Test given missing evaluation',
diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java
index 46bec44ea56..849d948f671 100644
--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java
+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDataFrameAnalyticsAction.java
@@ -239,11 +239,13 @@ public class TransportStartDataFrameAnalyticsAction
                             .collectDataSummaryAsync(ActionListener.wrap(
                                 dataSummary -> {
                                     if (dataSummary.rows == 0) {
-                                        finalListener.onFailure(new ElasticsearchStatusException(
-                                            ""Unable to start {} as there are no analyzable data in source indices [{}]."",
-                                            RestStatus.BAD_REQUEST,
-                                            id,
-                                            Strings.arrayToCommaDelimitedString(startContext.config.getSource().getIndex())
+                                        finalListener.onFailure(ExceptionsHelper.badRequestException(
+                                            ""Unable to start {} as no documents in the source indices [{}] contained all the fields ""
+                                                + ""selected for analysis. If you are relying on automatic field selection then there are ""
+                                                + ""currently mapped fields that do not exist in any indexed documents, and you will have ""
+                                                + ""to switch to explicit field selection and include only fields that exist in indexed ""
+                                                + ""documents."",
+                                            id, Strings.arrayToCommaDelimitedString(startContext.config.getSource().getIndex())
                                         ));
                                     } else {
                                         finalListener.onResponse(startContext);
diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManager.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManager.java
index c41e3038725..2e5189eb249 100644
--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManager.java
+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManager.java
@@ -9,6 +9,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.message.ParameterizedMessage;
 import org.elasticsearch.action.ActionListener;
+import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.xpack.core.ml.dataframe.DataFrameAnalyticsConfig;
@@ -57,10 +58,16 @@ public class MemoryUsageEstimationProcessManager {
                                                DataFrameDataExtractorFactory dataExtractorFactory) {
         DataFrameDataExtractor dataExtractor = dataExtractorFactory.newExtractor(false);
         DataFrameDataExtractor.DataSummary dataSummary = dataExtractor.collectDataSummary();
-        Set<String> categoricalFields = dataExtractor.getCategoricalFields(config.getAnalysis());
         if (dataSummary.rows == 0) {
-            return new MemoryUsageEstimationResult(ByteSizeValue.ZERO, ByteSizeValue.ZERO);
+            throw ExceptionsHelper.badRequestException(
+                ""[{}] Unable to estimate memory usage as no documents in the source indices [{}] contained all the fields selected for ""
+                    + ""analysis. If you are relying on automatic field selection then there are currently mapped fields that do not exist ""
+                    + ""in any indexed documents, and you will have to switch to explicit field selection and include only fields that ""
+                    + ""exist in indexed documents."",
+                jobId,
+                Strings.arrayToCommaDelimitedString(config.getSource().getIndex()));
         }
+        Set<String> categoricalFields = dataExtractor.getCategoricalFields(config.getAnalysis());
         AnalyticsProcessConfig processConfig =
             new AnalyticsProcessConfig(
                 jobId,
diff --git a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManagerTests.java b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManagerTests.java
index 7cc3e64c15b..5dc015d86e7 100644
--- a/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManagerTests.java
+++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManagerTests.java
@@ -42,8 +42,6 @@ public class MemoryUsageEstimationProcessManagerTests extends ESTestCase {
     private static final String CONFIG_ID = ""dummy"";
     private static final int NUM_ROWS = 100;
     private static final int NUM_COLS = 4;
-    private static final MemoryUsageEstimationResult PROCESS_RESULT_ZERO =
-        new MemoryUsageEstimationResult(ByteSizeValue.ZERO, ByteSizeValue.ZERO);
     private static final MemoryUsageEstimationResult PROCESS_RESULT =
         new MemoryUsageEstimationResult(ByteSizeValue.parseBytesSizeValue(""20kB"", """"), ByteSizeValue.parseBytesSizeValue(""10kB"", """"));
 
@@ -85,9 +83,11 @@ public class MemoryUsageEstimationProcessManagerTests extends ESTestCase {
 
         processManager.runJobAsync(TASK_ID, dataFrameAnalyticsConfig, dataExtractorFactory, listener);
 
-        verify(listener).onResponse(resultCaptor.capture());
-        MemoryUsageEstimationResult result = resultCaptor.getValue();
-        assertThat(result, equalTo(PROCESS_RESULT_ZERO));
+        verify(listener).onFailure(exceptionCaptor.capture());
+        ElasticsearchException exception = (ElasticsearchException) exceptionCaptor.getValue();
+        assertThat(exception.status(), equalTo(RestStatus.BAD_REQUEST));
+        assertThat(exception.getMessage(), containsString(TASK_ID));
+        assertThat(exception.getMessage(), containsString(""Unable to estimate memory usage""));
 
         verifyNoMoreInteractions(process, listener);
     }
diff --git a/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_memory_usage_estimation.yml b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_memory_usage_estimation.yml
index a58ea36aaac..39fe8005fa8 100644
--- a/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_memory_usage_estimation.yml
+++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_memory_usage_estimation.yml
@@ -14,12 +14,27 @@ setup:
 ---
 ""Test memory usage estimation for empty data frame"":
   - do:
+      catch: /Unable to estimate memory usage as no documents in the source indices \[index-source\] contained all the fields selected for analysis/
+      ml.estimate_memory_usage:
+        body:
+          source: { index: ""index-source"" }
+          analysis: { outlier_detection: {} }
+
+  - do:
+      index:
+       ",Throw an exception when memory usage estimation endpoint encounters empty data frame .,"""Improve memory usage estimation for empty data frames in data frame analytics""","""Improved error handling for data frame analytics memory usage estimation and added test for empty data frame scenario""","The commit message could be: ""Add validation for empty data frame in memory usage estimation for data frame analytics""

This commit adds a validation check to ensure that the data frame being analyzed is not empty when estimating memory usage for data frame analytics. If the data frame is empty, an exception is thrown with a message indicating that no documents in the source indices contained all the fields selected for analysis, and suggesting that the user switch to explicit field selection and include only fields that exist in indexed documents.

The validation check is added to the `MemoryUsageEstimationProcessManager` class in the `estimateMemoryUsage` method. If the data summary returned by the `DataFrameDataExtractor` has no rows, an exception is thrown with the message described above.

Additionally, a test case is added to the `MemoryUsageEstimationProcessManagerTests` class to ensure that the validation check works as expected. The test case uses a mock data extractor that returns a data summary with no rows, and verifies that the expected exception is thrown.

Finally, a new test is added to the `data_frame_analytics_memory_usage_estimation` REST API spec to test the validation check. The test creates an empty data frame and attempts to estimate its memory usage, expecting a `bad_request` status and an error message indicating that no documents in the source indices contained all the fields selected for analysis.","""Improve error messages and tests for ML memory usage estimation with empty data frames."""
"diff --git a/src/main/java/co/paralleluniverse/fibers/Fiber.java b/src/main/java/co/paralleluniverse/fibers/Fiber.java
index 8f1d0343c..b005aa224 100644
--- a/src/main/java/co/paralleluniverse/fibers/Fiber.java
+++ b/src/main/java/co/paralleluniverse/fibers/Fiber.java
@@ -5,6 +5,7 @@ import co.paralleluniverse.common.util.NamingThreadFactory;
 import co.paralleluniverse.common.util.VisibleForTesting;
 import co.paralleluniverse.concurrent.forkjoin.ParkableForkJoinTask;
 import co.paralleluniverse.concurrent.util.UtilUnsafe;
+import co.paralleluniverse.fibers.instrument.Retransform;
 import co.paralleluniverse.strands.Strand;
 import co.paralleluniverse.strands.Stranded;
 import co.paralleluniverse.strands.SuspendableCallable;
@@ -39,8 +40,13 @@ public class Fiber<V> extends Strand implements Joinable<V>, Serializable {
     private static final long serialVersionUID = 2783452871536981L;
 
     static {
+        assert printVerifyInstrumentationWarning();
+    }
+
+    private static boolean printVerifyInstrumentationWarning() {
         if (verifyInstrumentation)
             System.err.println(""WARNING: Fiber is set to verify instrumentation. This may severely harm performance"");
+        return true;
     }
 
     public static enum State {
@@ -328,6 +334,9 @@ public class Fiber<V> extends Strand implements Joinable<V>, Serializable {
                 postParkActions = null;
             }
             return false;
+        } catch (FiberInterruptedException e) {
+            state = State.TERMINATED;
+            return true;
         } catch (InterruptedException e) {
             state = State.TERMINATED;
             throw new RuntimeException(e);
@@ -340,9 +349,9 @@ public class Fiber<V> extends Strand implements Joinable<V>, Serializable {
     }
 
     private void installFiberLocals() {
-        if(fjPool == null) // in tests
+        if (fjPool == null) // in tests
             return;
-        
+
         final Thread currentThread = Thread.currentThread();
 
         Object tmpThreadLocals = ThreadAccess.getThreadLocals(currentThread);
@@ -530,7 +539,7 @@ public class Fiber<V> extends Strand implements Joinable<V>, Serializable {
     public boolean isDone() {
         return state == State.TERMINATED;
     }
-    
+
     private void sleep1(long millis) throws SuspendExecution {
         // this class's methods aren't instrumented, so we can't rely on the stack. This method will be called again when unparked
         try {
@@ -751,21 +760,21 @@ public class Fiber<V> extends Strand implements Joinable<V>, Serializable {
     private static boolean checkInstrumentation() {
         if (!verifyInstrumentation)
             throw new AssertionError();
+
         StackTraceElement[] stes = Thread.currentThread().getStackTrace();
-        try {
-            for (StackTraceElement ste : stes) {
-                if (ste.getClassName().equals(Thread.class.getName()) && ste.getMethodName().equals(""getStackTrace""))
-                    continue;
-                if (!ste.getClassName().equals(Fiber.class.getName()) && !ste.getClassName().startsWith(Fiber.class.getName() + '$')) {
-                    if (!isInstrumented(Class.forName(ste.getClassName())))
-                        throw new IllegalStateException(""Method "" + ste.getClassName() + ""."" + ste.getMethodName() + "" on the call-stack has not been instrumented. (trace: "" + Arrays.toString(stes) + "")"");
-                } else if (ste.getMethodName().equals(""run1""))
-                    return true;
-            }
-            return false;
-        } catch (ClassNotFoundException e) {
-            throw new IllegalStateException(""Not run through Fiber.exec(). (trace: "" + Arrays.toString(stes) + "")"");
+        for (StackTraceElement ste : stes) {
+            if (ste.getClassName().equals(Thread.class.getName()) && ste.getMethodName().equals(""getStackTrace""))
+                continue;
+            if (!ste.getClassName().equals(Fiber.class.getName()) && !ste.getClassName().startsWith(Fiber.class.getName() + '$')) {
+                if (!Retransform.isInstrumented(ste.getClassName())) {
+                    final String str = ""Method "" + ste.getClassName() + ""."" + ste.getMethodName() + "" on the call-stack has not been instrumented. (trace: "" + Arrays.toString(stes) + "")"";
+                    throw new IllegalStateException(str);
+                    //System.err.println(""WARNING: "" + str);
+                }
+            } else if (ste.getMethodName().equals(""run1""))
+                return true;
         }
+        throw new IllegalStateException(""Not run through Fiber.exec(). (trace: "" + Arrays.toString(stes) + "")"");
   ",verify instrumentation fix,"""Improve instrumentation verification and error handling in Fiber class""

This commit message summarizes the changes made in the diff, which include:

* Adding a warning message when instrumentation verification is enabled
* Improving the instrumentation verification logic
* Handling FiberInterruptedException and throwing a RuntimeException when InterruptedException is caught
* Updating the installFiberLocals method to handle null fjPool
* Updating the checkInstrumentation method to use Retransform.isInstrumented and throwing an IllegalStateException when instrumentation is not verified.","""Add instrumentation verification and Retransform class for Fiber class""","""Added method printVerifyInstrumentationWarning and updated checkInstrumentation method in Fiber.java""

This commit appears to have added a new method `printVerifyInstrumentationWarning` and updated the `checkInstrumentation` method in the `Fiber.java` class. The new method prints a warning message if the `verifyInstrumentation` flag is set to true. The updated `checkInstrumentation` method uses the new method to print the warning message and also uses a new `Retransform.isInstrumented` method to check if a class is instrumented. Additionally, the commit message suggests that there were some changes made to the stack trace handling in the `checkInstrumentation` method.","""Add verify instrumentation warning, handle FiberInterruptedException, and use Retransform for instrumentation check."""
"diff --git a/src/main/java/io/antmedia/datastore/db/MapDBStore.java b/src/main/java/io/antmedia/datastore/db/MapDBStore.java
index 016df8b85..7f167860b 100644
--- a/src/main/java/io/antmedia/datastore/db/MapDBStore.java
+++ b/src/main/java/io/antmedia/datastore/db/MapDBStore.java
@@ -820,7 +820,6 @@ public class MapDBStore extends DataStore {
 				oldBroadcast.setPassword(broadcast.getPassword());
 				oldBroadcast.setIpAddr(broadcast.getIpAddr());
 				oldBroadcast.setStreamUrl(broadcast.getStreamUrl());
-				oldBroadcast.setStreamUrl(broadcast.getStreamUrl());
 
 				getMap().replace(oldBroadcast.getStreamId(), gson.toJson(oldBroadcast));
 
diff --git a/src/main/java/io/antmedia/rest/BroadcastRestService.java b/src/main/java/io/antmedia/rest/BroadcastRestService.java
index f70ad419b..b4ceccdd0 100644
--- a/src/main/java/io/antmedia/rest/BroadcastRestService.java
+++ b/src/main/java/io/antmedia/rest/BroadcastRestService.java
@@ -95,10 +95,6 @@ import io.swagger.annotations.SwaggerDefinition;
 @Path(""/"")
 public class BroadcastRestService extends RestServiceBase{
 
-	/**
-	 * Key for Manifest entry of Build number. It should match with the value in pom.xml
-	 */
-	private static final String BUILD_NUMBER = ""Build-Number"";
 
 	@ApiModel(value=""BroadcastStatistics"", description=""The statistics class of the broadcasts"")
 	public static class BroadcastStatistics {
@@ -137,22 +133,13 @@ public class BroadcastRestService extends RestServiceBase{
 	public static final int ERROR_SOCIAL_ENDPOINT_UNDEFINED_ENDPOINT = -2;
 	public static final int ERROR_SOCIAL_ENDPOINT_EXCEPTION_IN_ASKING_AUTHPARAMS = -3;
 
-	public static final String ENTERPRISE_EDITION = ""Enterprise Edition"";
-	public static final String COMMUNITY_EDITION = ""Community Edition"";
-	public static final int MP4_ENABLE = 1;
-	public static final int MP4_DISABLE = -1;
-	public static final int MP4_NO_SET = 0;
 
-	private AppSettings appSettings;
 
 	public interface ProcessBuilderFactory {
 		Process make(String...args);
 	}
 
-	private ProcessBuilderFactory processBuilderFactory = null;
-
 	protected static Logger logger = LoggerFactory.getLogger(BroadcastRestService.class);
-	private static String hostaddress;
 
 
 	/**
@@ -199,17 +186,7 @@ public class BroadcastRestService extends RestServiceBase{
 	@Path(""/broadcast/createWithStreamID"")
 	@Produces(MediaType.APPLICATION_JSON)
 	public Broadcast createBroadcastWithStreamID(@ApiParam(value = ""Broadcast object only related information should be set, it may be null as well."", required = true) Broadcast broadcast) {
-
-		String settingsListenerHookURL = null; 
-		String fqdn = null;
-		AppSettings appSettingsLocal = getAppSettings();
-		if (appSettingsLocal != null) {
-			settingsListenerHookURL = appSettingsLocal.getListenerHookURL();
-			fqdn = appSettingsLocal.getServerName();
-		}
-
-		return saveBroadcast(broadcast, AntMediaApplicationAdapter.BROADCAST_STATUS_CREATED, getScope().getName(),
-				getDataStore(), settingsListenerHookURL, fqdn);
+		return super.createBroadcastWithStreamID(broadcast);
 	}
 
 
@@ -324,58 +301,6 @@ public class BroadcastRestService extends RestServiceBase{
 
 
 
-	public static Broadcast saveBroadcast(Broadcast broadcast, String status, String scopeName, DataStore dataStore,
-			String settingsListenerHookURL, String fqdn) {
-
-		if (broadcast == null) {
-			broadcast = new Broadcast();
-		}
-		broadcast.setStatus(status);
-		broadcast.setDate(System.currentTimeMillis());
-
-		String listenerHookURL = broadcast.getListenerHookURL();
-
-		if ((listenerHookURL == null || listenerHookURL.isEmpty()) 
-				&& settingsListenerHookURL != null && !settingsListenerHookURL.isEmpty()) {
-
-			broadcast.setListenerHookURL(settingsListenerHookURL);
-		}
-
-		if (fqdn == null || fqdn.length() == 0) {
-			fqdn = getHostAddress(); 
-		}
-
-		if (fqdn != null && fqdn.length() >= 0) {
-			broadcast.setRtmpURL(""rtmp://"" + fqdn + ""/"" + scopeName + ""/"");
-		}
-
-		dataStore.save(broadcast);
-		return broadcast;
-	}
-
-	private static String getHostAddress() {
-		
-		if (hostaddress == null) {
-			long startTime = System.currentTimeMillis();
-			try {
-				/*
-				 * InetAddress.getLocalHost().getHostAddress() takes long time(5sec in macos) to return.
-				 * Let it is run once
-				 */
-				hostaddress = InetAddress.getLocalHost().getHostAddress();
-			} catch (UnknownHostException e) {
-				logger.error(ExceptionUtils.getStackTrace(e));
-			}
-			long diff = System.currentTimeMillis() - startTime;
-			if (diff > 1000) {
-				logger.warn(""Getting host adress took {}ms. it's cached now and will return immediately from now on. You can ""
-						+ "" alternatively set serverName in conf/red5.properties file "", diff);
-			}
-		}
-		
-		
-		return hostaddress;
-	}
 
 	/**
 	 * Create broadcast and bind social networks at the same time. Server should
@@ -434,21 +359,6 @@ public class BroadcastRestService extends RestServiceBase{
 		return new Result(result);
 	}
 
-	private boolean stopBroadcastInternal(Broadcast broadcast) {
-		boolean result = false;
-		if (broadcast != null) {
-			result = getApplication().stopStreaming(broadcast).isSuccess(); 
-			if (result) {
-				logger.info(""broadcast is stopped streamId: {}"", broadcast.getStreamId());
-			}
-			else {
-				logger.error(""No active broadcast found with id {}, so could not stopped"", broadcast.getStreamId());
-			}
-		}
-		return result;
-	}
-
-
 	/**
 	 * Updates the properties of the broadcast
 	 * 
@@ -466,32 +376,7 @@ public class BroadcastRestService extends RestServiceBase{
 	public Result updateBroadcast(@ApiParam(value = ""Broadcast object"", required = true) Broadcast broadcast,
 			@ApiParam(value = ""Comma separated social network IDs, they must in comma separated and IDs must match with the defined IDs"", required = true) @QueryParam(""socialNetworks"") String socialNetworksToPublish) {
 
-		boolean result = getDataStore().updateName(broadcast.getStreamId(), broadcast.getName(),
-				broadcast.getDescription());
-		StringBuilder message = new StringBuilder();
-		int errorId = 0;
-		if (result) {
-			Broadcast fetchedBroadcast = getDataStore().get(broadcast.getStreamId());
-			getDataStore().removeAllEndpoints(fetchedBroadcast.getStreamId());
-
-			if (socialNetworksToPublish != null && socialNetworksToPublish.length() > 0) {
-				String[] socialNetworks = socialNetworksToPublish.split("","");
-
-				for (String networkName : socialNetworks) {
-					Result addSocialEndpoint = addSocialEndpoint(broadcast.getStreamId(), networkName);
-					if (!addSocialEndpoint.isSuccess()) {
-						result = false;
-						message.append(networkName).append("" "");
-						errorId = -1;
-						break;
-					}
-				}
-			}
-		}
-		if (message.length() > 0) {
-			message.append("" endpoint cannot be added"");
-		}
-		return new Result(result, message.toString(), errorId);
+		return super.updateBroadcast(broadcast.getStreamId(), broadcast.getName(), broadcast.getDescription(), socialNetworksToPublish);
 	}
 
 	/**
@@ -506,26 +391,9 @@ public class BroadcastRestService extends RestServiceBase{
 	@Consumes(MediaType.APPLICATION_JSON)
 	@Path(""/broadcast/revokeSocialNetwork/{endpointId}"")
 	@Produces(MediaType.APPLICATION_JSON)
+	@Override
 	public Result revokeSocialNetwork(@ApiParam(value = ""Endpoint id"", required = true) @PathParam(""endpointId"") String endpointId) {
-		Map<String, VideoServiceEndpoint> endPointServiceMap = getEndpointList();
-		String message = null;
-		boolean result = false;
-		if (endPointServiceMap != null) {
-
-			VideoServiceEndpoint videoServiceEndpoint = endPointServiceMap.get(endpointId);
-			if (videoServiceEndpoint != null) {
-				videoServiceEndpoint.resetCredentials();
-				endPointServiceMap.remove(endpointId);
-				result = true;
-			}
-			else {
-				message = ""Service with the name specified is not found in this app"";
-			}
-		} 
-		else {
-			message = ""No endpoint is defined for this app"";
-		}
-		return new Result(result, message);
+		return super.revokeSocialNetwork(endpointId);
 	}
 
 	/**
@@ -573,16 +441,8 @@ public class BroadcastRestService extends RestServiceBase{
 
 			@ApiParam(value = ""the id of the service in order to have successfull operation. Social network must be authorized in advance"", required = true)
 	@FormParam(""serviceName"") String endpointServiceId) {
-
-		Broadcast broadcast = lookupBroadcast(id);
-
-		boolean success = addSocialEndpoints(broadcast, endpointServiceId);
-		String message = """";
-		if(!success) {
-			message  = endpointServiceId+"" endpoint can not be added to ""+id;
-		}
-
-		return new Result(success, message);
+		
+		return super.addSocialEndpoint(id, endpointServiceId);
 	}
 
 	/**
@@ -605,19 +465,7 @@ public class BroadcastRestService extends RestServiceBase{
 	@Produces(MediaType.APPLICATION_JSON)
 	public Result addEndpoint(@ApiParam(value = ""Broadcast id"", required = true) @FormParam(""id"") String id,
 			@ApiParam(value = ""RTMP url of the endpoint that stream will be republished"", required = true) @FormParam(""rtmpUrl"") String rtmpUrl) {
-		boolean success = false;
-		String message = null;
-		try {
-			Endpoint endpoint = new Endpoint();
-			endpoint.setRtmpUrl(rtmpUrl);
-			endpoint.type = ""generic"";
-
-			success = getDataStore().addEndpoint(id, endpoint);
-		} catch (Exception e) {
-			logger.error(ExceptionUtils.getStackTrace(e));
-		}
-
-		return new Result(success, message);
+		return super.addEndpoint(id, rtmpUrl);
 	}
 
 	/**
@@ -635,13 +483,14 @@ public class BroadcastRestService extends RestServiceBase{
 	@Path(""/broadcast/getLiveComments/{endpointServiceId}/{streamId}/{offset}/{batch}"")
 	@Produces(MediaType.APPLICATION_JSON)
 	public List<LiveComment> getLiveCommentsFromEndpoint(@ApiParam(value = ""This is the id of the endpoint service"", required = true)
-	@PathParam(""endpointServiceId"") String endpointServiceId,
-	@ApiParam(value = ""Stream id"", required = true)
-	@PathParam(""streamId"") String streamId,
-	@ApiParam(value = ""this is the start offset where to start getting comment"", required = true)
-	@PathParam(""offset"") int offset,
-	@ApiParam(value = ""number of items to be returned"", required = true)
-	@PathParam(""batch"") int batch) {
+				@PathParam(""endpointServiceId"") String endpointServiceId,
+				@ApiParam(value = ""Stream id"", required = true)
+				@PathParam(""streamId"") String streamId,
+				@ApiParam(value = ""this is the start offset where to start getting comment"", required = true)
+				@PathParam(""offset"") int offset,
+				@ApiParam(value = ""number of items to be returned"", required = true)
+				@PathParam(""batch"") int batch) 
+	{
 
 		VideoServiceEndpoint videoServiceEndPoint = getApplication().getVideoServiceEndPoint(endpointServiceId);
 		List<LiveComment> liveComment = null;
@@ -720,18 +569,6 @@ public class BroadcastRestService extends RestServiceBase{
 		return interaction;
 	}
 
-
-
-	protected Broadcast lookupBroadcast(String id) {
-		Broadcast broadcast = null;
-		try {
-			broadcast = getDataStore().get(id);
-		} catch (Exception e) {
-			logger.error(ExceptionUtils.getStackTrace(e));
-		}
-		return broadcast;
-	}
-
 	/**
 	 * Get broadcast object
 	 * 
@@ -885,128 +722,12 @@ public class BroadcastRestService extends RestServiceBase{
 	@POST
 	@Path(""/importLiveStreamsToStalker"")
 	@Produces(MediaType.APPLICATION_JSON)
+	@Override
 	public Result importLiveStreams2Stalker() 
 	{
-
-		String stalkerDBServer = getAppSettings().getStalkerDBServer();
-		String stalkerDBUsername = getAppSettings().getStalkerDBUsername();
-		String stalkerDBPassword = getAppSettings().getStalkerDBPassword();
-
-		boolean result = false;
-		String message = """";
-		int errorId = -1;
-		if (stalkerDBServer != null && stalkerDBServer.length() > 0
-				&& stalkerDBUsername != null && stalkerDBUsername.length() > 0
-				&& stalkerDBPassword != null && stalkerDBPassword.length() > 0) 
-		{
-
-
-			long broadcastCount = getDataStore().getBroadcastCount();
-			int pageCount = (int) broadcastCount/DataStore.MAX_ITEM_IN_ONE_LIST
-					+ ((broadcastCount % DataStore.MAX_ITEM_IN_ONE_LIST != 0) ? 1 : 0);
-
-			List<Broadcast> broadcastList = new ArrayList<>();
-			for (int i = 0; i < pageCount; i++) {
-				broadcastList.addAll(getDataStore().getBroadcastList(i*DataStore.MAX_ITEM_IN_ONE_LIST, DataStore.MAX_ITEM_IN_ONE_LIST));
-			}
-
-			StringBuilder insertQueryString = new StringBuilder();
-
-			insertQueryString.append(""DELETE FROM stalker_db.ch_links;"");
-			insertQueryString.append(""DELETE FROM stalker_db.itv;"");
-
-			String fqdn = getAppSettings().getServerName();
-			if (fqdn == null || fqdn.length() == 0) {
-				fqdn = getHostAddress();
-			}
-
-			int number = 1;
-			for (Broadcast broadcast : broadcastList) {
-				String cmd = ""ffmpeg http://""+ fqdn + "":5080/"" 
-						+ getScope().getName() + ""/streams/""+broadcast.getStreamId()+"".m3u8"";
-
-				insertQueryString.append(""INSERT INTO stalker_db.itv(name, number, tv_genre_id, base_ch, cmd, languages)""
-						+ "" VALUES ('""+broadcast.getName()+""' , ""+ number +"", 2, 1, '""+ cmd +""', '');"");
-
-				insertQueryString.append(""SET @last_id=LAST_INSERT_ID();""
-						+ ""INSERT INTO stalker_db.ch_links(ch_id, url)""
-						+ "" VALUES(@last_id, '""+ cmd +""');"");
-				number++;
-			}
-			result = runStalkerImportQuery(insertQueryString.toString(), stalkerDBServer, stalkerDBUsername, stalkerDBPassword);
-		}
-		else {
-			message = ""Portal DB info is missing"";
-			errorId = 404;
-		}
-
-
-		return new Result(result, message, errorId);
-	}
-
-	private boolean runStalkerImportQuery(String query, String stalkerDBServer, String stalkerDBUsername, String stalkerDBPassword) {
-
-		boolean result = false;
-		try {
-
-			Process p = getProcess(query, stalkerDBServer, stalkerDBUsername, stalkerDBPassword);
-
-			if (p != null) {
-				InputStream is = p.getInputStream();
-				if (is != null) {
-					byte[] data = new byte[1024];
-					int length;
-					while ((length = is.read(data, 0, data.length)) != -1) {
-						if (logger.isInfoEnabled()) {
-							logger.info(new String(data, 0, length));
-						}
-					}
-				}
-
-				int exitWith = p.waitFor();
-
-				if (exitWith == 0) {
-					result = true;
-				}	
-			}
-
-		} catch (IOException e) {
-			logger.error(ExceptionUtils.getStackTrace(e));
-		} catch (InterruptedException e) {
-			logger.error(ExceptionUtils.getStackTrace(e));
-			Thread.currentThread().interrupt();
-		} 
-		return result;
+		return super.importLiveStreams2Stalker();
 	}
 
-	private Process getProcess(String query, String stalkerDBServer, String stalkerDBUsername, String stalkerDBPassword) {
-		Process process = null;
-		String mysqlClientPath = getAppSettings().getMySqlClientPath();
-		if (processBuilderFactory != null) {
-
-			process = processBuilderFactory.make(mysqlClientPath, 
-					""-h"", stalkerDBServer,
-					""-u"", stalkerDBUsername,
-					""-p""+stalkerDBPassword,
-					""-e"",   query);
-		}
-		else {
-			try {
-				process = new ProcessBuilder(
-						mysqlClientPath, 
-						""-h"", stalkerDBServer,
-						""-u"", stalkerDBUsername,
-						""-p""+stalkerDBPassword,
-						""-e"",   query  
-						).redirectErrorStream(true).start();
-			} catch (IOException e) {
-				logger.error(ExceptionUtils.getStackTrace(e));
-			}
-		}
-
-		return process;
-
-	}
 
 
 	/**
@@ -1014,82 +735,14 @@ public class BroadcastRestService extends RestServiceBase{
 	 * 
 	 * @return {@link io.antmedia.rest.BroadcastRestService.Result}
 	 */
-
 	@ApiOperation(value = ""Import VoDs to Stalker Portal"", notes = """", response = Result.class)
 	@POST
 	@Path(""/importVoDsToStalker"")
 	@Produces(MediaType.APPLICATION_JSON)
+	@Override
 	public Result importVoDsToStalker() 
 	{
-
-		String stalkerDBServer = getAppSettings().getStalkerDBServer();
-		String stalkerDBUsername = getAppSettings().getStalkerDBUsername();
-		String stalkerDBPassword = getAppSettings().getStalkerDBPassword();
-
-		boolean result = false;
-		String message = """";
-		int errorId = -1;
-		if (stalkerDBServer != null && stalkerDBUsername != null && stalkerDBPassword != null) {
-
-			String vodFolderPath = getAppSettings().getVodFolder();
-			if (vodFolderPath != null && !vodFolderPath.isEmpty()) {
-
-				long totalVodNumber = getDataStore().getTotalVodNumber();
-				int pageCount = (int) totalVodNumber/DataStore.MAX_ITEM_IN_ONE_LIST 
-						+ ((totalVodNumber % DataStore.MAX_ITEM_IN_ONE_LIST != 0) ? 1 : 0);
-
-				List<VoD> vodList = new ArrayList<>();
-				for (int i = 0; i < pageCount; i++) {
-					vodList.addAll(getDataStore().getVodList(i*DataStore.MAX_ITEM_IN_ONE_LIST, DataStore.MAX_ITEM_IN_ONE_LIST));
-				}
-
-
-				String fqdn = getAppSettings().getServerName();
-				if (fqdn == null || fqdn.length() == 0) {
-					fqdn = getHostAddress();
-				}
-
-				StringBuilder insertQueryString = new StringBuilder();
-
-				//delete all videos in stalker to import new ones
-				insertQueryString.append(""DELETE FROM stalker_db.video_series_files;"");
-				insertQueryString.append(""DELETE FROM stalker_db.video;"");
-
-				for (VoD vod : vodList) {
-					if (vod.getType().equals(VoD.USER_VOD)) {
-						insertQueryString.append(""INSERT INTO stalker_db.video(name, o_name, protocol, category_id, cat_genre_id_1, status, cost, path, accessed) ""
-								+ ""values('""+ vod.getVodName() + ""', '""+vod.getVodName()+""', '', 1, 1, 1, 0, '""+vod.getVodName()+""', 1);"");
-
-						File vodFolder = new File(vodFolderPath);
-						int lastIndexOf = vod.getFilePath().lastIndexOf(vodFolder.getName());
-						String filePath = vod.getFilePath().substring(lastIndexOf);
-						String cmd = ""ffmpeg http://""+ fqdn + "":5080/"" 
-								+ getScope().getName() + ""/streams/"" + filePath;
-
-						insertQueryString.append(""SET @last_id=LAST_INSERT_ID();"");
-
-						insertQueryString.append(""INSERT INTO stalker_db.video_series_files""
-								+ ""(video_id, file_type, protocol, url, languages, quality, date_add, date_modify, status, accessed)""
-								+ ""VALUES(@last_id, 'video', 'custom', '""+cmd+""', 'a:1:{i:0;s:2:\""en\"";}', 5, NOW(), NOW(), 1, 1);"");
-
-					}
-
-				}
-
-				result = runStalkerImportQuery(insertQueryString.toString(), stalkerDBServer, stalkerDBUsername, stalkerDBPassword );
-			}
-			else {
-				message = ""No VoD folder specified"";
-				errorId = 500;
-			}
-		}
-		else {
-			message = ""Portal DB info is missing"";
-			errorId = 404;
-		}
-
-		return new Result(result, message, errorId);
-
+		return super.importVoDsToStalker();
 	}
 
 	/**
@@ -1106,7 +759,6 @@ public class BroadcastRestService extends RestServiceBase{
 	 * @return JSON list of VoD objects
 	 * 
 	 */
-
 	@ApiOperation(value = "" Get the VoD list from database"", notes = """", responseContainer = ""List"",response = VoD.class)
 	@GET
 	@Path(""/broadcast/getVodList/{offset}/{size}"")
@@ -1247,7 +899,6 @@ public class BroadcastRestService extends RestServiceBase{
 	 * @param token - sent token for validation
 	 * @return validated token {@link io.antmedia.datastore.db.types.Token}, either null or token. Null means not validated
 	 */
-
 	@ApiOperation(value = ""Perform validation of token for requested stream"", notes = """", response = Token.class)
 	@POST
 	@Consumes(MediaType.APPLICATION_JSON)
@@ -1430,14 +1081,6 @@ public class BroadcastRestService extends RestServiceBase{
 		return list;
 	}
 
-	public IWebRTCAdaptor getWebRTCAdaptor() {
-		IWebRTCAdaptor adaptor = null;
-		ApplicationContext appContext = getAppContext();
-		if (appContext != null && appContext.containsBean(IWebRTCAdaptor.BEAN_NAME)) {
-			adaptor = (IWebRTCAdaptor) appContext.getBean(IWebRTCAdaptor.BEAN_NAME);
-		}
-		return adaptor;
-	}
 
 	/**
 	 * Get filtered broadcast list
@@ -1453,7 +1096,7 @@ public class BroadcastRestService extends RestServiceBase{
 	@Produces(MediaType.APPLICATION_JSON)
 	public List<Broadcast> filterBroadcastList(@ApiParam(value = ""starting point of the list"", required = true) @PathParam(""offset"") int offset,
 			@ApiParam(value = ""size of the return list (max:50 )"", required = true) @PathParam(""size"") int size,
-			@ApiParam(value = ""type of the stream"", required = true) @PathParam(""type"") String type) {
+			@ApiParam(value = ""type of the stream possible values are \""liveStream\"", \""ipCamera\"", \""streamSource\"", \""VoD\"""", required = true) @PathParam(""type"") String type) {
 		return getDataStore().filterBroadcastList(offset, size, type);
 	}
 
@@ -1467,7 +1110,6 @@ public class BroadcastRestService extends RestServiceBase{
 	 * @param type -type of the VoD file
 	 * @return {@link io.antmedia.rest.BroadcastRestService.Result}
 	 */
-
 	@ApiOperation(value = ""Delete specific VoD File. Deprecated -> Use deleteVoD method (/broadcast/deleteVoD/{id})"", notes = """", response = Result.class)
 	@POST
 	@Consumes({ MediaType.APPLICATION_JSON })
@@ -1635,26 +1277,9 @@ public class BroadcastRestService extends RestServiceBase{
 	@Consumes({ MediaType.APPLICATION_JSON })
 	@Path(""/broadcast/delete/{id}"")
 	@Produces(MediaType.APPLICATION_JSON)
+	@Override
 	public Result deleteBroadcast(@ApiParam(value = "" Id of the braodcast"", required = true) @PathParam(""id"") String id) {
-		Result result = new Result (false);
-		boolean stopResult = false;
-
-		if (id != null) {
-			Broadcast broacast = getDataStore().get(id);
-			stopResult = stopBroadcastInternal(broacast);
-
-			result.setSuccess(getDataStore().delete(id));
-
-			if(result.isSuccess() && stopResult) {
-				result.setMessage(""brodcast is deleted and stopped successfully"");
-				logger.info(""brodcast {} is deleted and stopped successfully"", id);
-			}
-			else if(result.isSuccess() && !stopResult) {
-				result.setMessage(""brodcast is deleted but could not stopped "");
-				logger.info(""brodcast {} is deleted but could not stopped"", id);
-			}
-		}
-		return result;
+		return super.deleteBroadcast(id);
 	}
 
 	/**
@@ -1947,29 +1572,6 @@ public class BroadcastRestService extends RestServiceBase{
 		return getApplication().getVideoServiceEndpointsHavingError();
 	}
 
-	private AppSettings getAppSettings() {
-		if (appSettings == null) {
-			ApplicationContext appContext = getAppContext();
-			if (appContext != null) {
-				appSettings = (AppSettings) appContext.getBean(AppSettings.BEAN_NAME);
-			}
-		}
-		return appSettings;
-	}
-
-	public void setAppSettings(AppSettings appSettings) {
-		this.appSettings = appSettings;
-	}
-
-	public ProcessBuilderFactory getProcessBuilderFactory() {
-		return processBuilderFactory;
-	}
-
-
-	public void setProcessBuilderFactory(ProcessBuilderFactory processBuilderFactory) {
-		this.processBuilderFactory = processBuilderFactory;
-	}
-
     /**
      * Set stream specific Mp4 Muxing setting, this setting overrides general Mp4 Muxing Setting
      *
@@ -1977,7 +1579,6 @@ public class BroadcastRestService extends RestServiceBase{
      * @param enableMp4 - the integer value for Mp4 Muxing, 1 = Enable Muxing, -1 = Disable Muxing, 0 = No Settings
      * @return {@link io.antmedia.rest.BroadcastRestService.Result}
      */
-
     @ApiOperation(value = ""Set stream specific Mp4 Muxing setting, this setting overrides general Mp4 Muxing Setting"", notes = """", response = Result.class)
     @POST
     @Consumes(MediaType.APPLICATION_JSON)
diff --git a/src/main/java/io/antmedia/rest/BroadcastRestServiceV2.java b/src/main/java/io/antmedia/rest/BroadcastRestServiceV2.java
new file mode 100644
index 000000000..ca3437205
--- /dev/null
+++ b/src/main/java/io/antmedia/rest/BroadcastRestServiceV2.java
@@ -0,0 +1,1040 @@
+package io.antmedia.rest;
+
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.MediaType;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
+import org.jetbrains.annotations.Nullable;
+import org.red5.server.api.scope.IBroadcastScope;
+import org.springframework.context.ApplicationContext;
+import org.springframework.stereotype.Component;
+
+import io.antmedia.AntMediaApplicationAdapter;
+import io.antmedia.IResourceMonitor;
+import io.antmedia.datastore.db.types.Broadcast;
+import io.antmedia.datastore.db.types.SocialEndpointChannel;
+import io.antmedia.datastore.db.types.SocialEndpointCredentials;
+import io.antmedia.datastore.db.types.TensorFlowObject;
+import io.antmedia.datastore.db.types.Token;
+import io.antmedia.ipcamera.OnvifCamera;
+import io.antmedia.ipcamera.onvifdiscovery.OnvifDiscovery;
+import io.antmedia.muxer.Mp4Muxer;
+import io.antmedia.muxer.MuxAdaptor;
+import io.antmedia.muxer.Muxer;
+import io.antmedia.rest.BroadcastRestService.BroadcastStatistics;
+import io.antmedia.rest.model.Interaction;
+import io.antmedia.rest.model.Result;
+import io.antmedia.security.ITokenService;
+import io.antmedia.social.LiveComment;
+import io.antmedia.social.endpoint.PeriscopeEndpoint;
+import io.antmedia.social.endpoint.VideoServiceEndpoint;
+import io.antmedia.social.endpoint.VideoServiceEndpoint.DeviceAuthParameters;
+import io.antmedia.streamsource.StreamFetcher;
+import io.antmedia.webrtc.api.IWebRTCAdaptor;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
+import io.swagger.annotations.Contact;
+import io.swagger.annotations.ExternalDocs;
+import io.swagger.annotations.Info;
+import io.swagger.annotations.License;
+import io.swagger.annotations.SwaggerDefinition;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.Status;
+
+@Api(value = ""BroadcastRestService"")
+@SwaggerDefinition(
+		info = @Info(
+				description = ""Ant Media Server REST API Reference"",
+				version = ""v2.0"",
+				title = ""Ant Media Server REST API Reference"",
+				contact = @Contact(name = ""Ant Media Info"", email = ""contact@antmedia.io"", url = ""https://antmedia.io""),
+				license = @License(name = ""Apache 2.0"", url = ""http://www.apache.org"")),
+		consumes = {""application/json""},
+		produces = {""application/json""},
+		schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS},
+		externalDocs = @ExternalDocs(value = ""External Docs"", url = ""https://antmedia.io""),
+		basePath = ""/v2""
+		)
+@Component
+@Path(""/v2/broadcasts"")
+public class BroadcastRestServiceV2 extends RestServiceBase{
+
+	@ApiModel(value=""SimpleStat"", description=""Simple generic statistics class to return single values"")
+	public static class SimpleStat {
+		@ApiModelProperty(value = ""the stat value"")
+		public long number;
+
+		public SimpleStat(long number) {
+			this.number = number;
+		}
+
+	}
+
+	@ApiOperation(value = ""Creates a broadcast(stream) and returns the full broadcast object with rtmp address and ""
+			+ ""other information."")
+	@ApiResponses(value = { @ApiResponse(code = 400, message = ""If stream id is already used in the data store, it returns error"", response=Result.class),
+			@ApiResponse(code = 200, message = ""Returns the created stream"", response = Broadcast.class)})
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Response createBroadcast(@ApiParam(value = ""Broadcast object only related information should be set, it may be null as well."", required = true) Broadcast broadcast) {
+		if (broadcast != null && broadcast.getStreamId() != null && !broadcast.getStreamId().isEmpty()) {
+			// make sure stream id is not set on rest service
+			Broadcast broadcastTmp = getDataStore().get(broadcast.getStreamId());
+			if (broadcastTmp != null) {
+
+				return Response.status(Status.BAD_REQUEST).entity(new Result(false, ""Stream id is already being used. "")).build();
+			}
+		}
+
+		return Response.status(Status.OK).entity(createBroadcastWithStreamID(broadcast)).build();
+	}
+
+	@ApiOperation(value = ""Delete broadcast from data store and stop if it's broadcasting"", response = Result.class)
+	@ApiResponses(value = { @ApiResponse(code = 200, message = ""If it's deleted, success is true. If it's not deleted, success if false."") })
+	@DELETE
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/{id}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	@Override
+	public Result deleteBroadcast(@ApiParam(value = "" Id of the braodcast"", required = true) @PathParam(""id"") String id) {
+		return super.deleteBroadcast(id);		
+	}
+
+
+	@ApiOperation(value = ""Get broadcast object"")
+	@ApiResponses(value = { @ApiResponse(code = 200, message = ""Return the broadcast object""),
+			@ApiResponse(code = 404, message = ""Broadcast object not found"")})
+	@GET
+	@Path(""/{id}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Response getBroadcast(@ApiParam(value = ""id of the broadcast"", required = true) @PathParam(""id"") String id) {
+		Broadcast broadcast = null;
+		if (id != null) {
+			broadcast = lookupBroadcast(id);
+		}
+		if (broadcast == null) {
+			return Response.status(Status.OK).entity(broadcast).build();
+		}
+		else {
+			return Response.status(Status.NOT_FOUND).build();
+		}
+	}
+
+	@ApiOperation(value = ""Gets the broadcast list from database"", notes = """",responseContainer = ""List"", response = Broadcast.class)
+	@GET
+	@Path(""/list/{offset}/{size}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<Broadcast> getBroadcastList(@ApiParam(value = ""This is the offset of the list, it is useful for pagination"", required = true) @PathParam(""offset"") int offset,
+			@ApiParam(value = ""Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value"", required = true) @PathParam(""size"") int size) {
+		return getDataStore().getBroadcastList(offset, size);
+	}
+
+
+	@ApiOperation(value = ""Updates the name and description of the broadcast. It also updates the social endpoints"", notes = """", response = Result.class)
+	@ApiResponses(value = { @ApiResponse(code = 200, message = ""If it's updated, success field is true. If it's not updated, success  field if false."")})
+	@PUT
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/{id}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	@Override
+	public Result updateBroadcast(@ApiParam(value=""Broadcast id"", required = true) @PathParam(""id"") String id, 
+			@ApiParam(value=""Broadcast name"", required = false) @QueryParam(""name"") String name, 
+			@ApiParam(value=""Broadcast description"", required = false) @QueryParam(""description"") String description,
+			@ApiParam(value = ""Comma separated social network IDs, they must in comma separated and IDs must match with the defined IDs"", required = true) @QueryParam(""socialNetworks"") String socialNetworksToPublish) {
+		Result result = new Result(false);
+		if (id != null) {
+			Broadcast broadcast = getDataStore().get(id);
+			if (broadcast != null) {
+				if (name == null) {
+					name = broadcast.getName();
+				}
+				if (description == null) {
+					description = broadcast.getDescription();
+				}
+				result = super.updateBroadcast(id, name, description, socialNetworksToPublish);
+			}
+		}
+		return result;
+	}
+
+	@ApiOperation(value = ""Revoke authorization from a social network account that is authorized before"", notes = """", response = Result.class)
+	@DELETE
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/social-networks/{endpointId}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	@Override
+	public Result revokeSocialNetwork(@ApiParam(value = ""Endpoint id"", required = true) @PathParam(""endpointId"") String endpointId) {
+		return super.revokeSocialNetwork(endpointId);
+	}
+
+	@ApiOperation(value = ""Add social endpoint to a stream. "", notes = """", response = Result.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/{id}/social-endpoints/{endpointServiceId}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result addSocialEndpointJSON(@ApiParam(value = ""Stream id"", required = true) @PathParam(""id"") String id,
+			@ApiParam(value = ""the id of the service in order to have successfull operation. Social network must be authorized in advance"", required = true) @PathParam(""endpointServiceId"") String endpointServiceId) {
+		return addSocialEndpoint(id, endpointServiceId);
+	}
+
+	@ApiOperation(value = ""Add a third pary rtmp end point to the stream. When broadcast is started,it will send rtmp stream to this rtmp url as well. "", notes = """", response = Result.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/{id}/endpoint"")
+	@Produces(MediaType.APPLICATION_JSON)
+	@Override
+	public Result addEndpoint(@ApiParam(value = ""Broadcast id"", required = true) @PathParam(""id"") String id,
+			@ApiParam(value = ""RTMP url of the endpoint that stream will be republished"", required = true) @QueryParam(""rtmpUrl"") String rtmpUrl) {
+		return super.addEndpoint(id, rtmpUrl);
+	}
+
+	@ApiOperation(value = ""Returns live comments from a specific endpoint like Facebook, Youtube, PSCP, etc. It works If interactivity is collected which can be enabled/disabled by properties file."", notes = ""Notes here"", responseContainer = ""List"", response = LiveComment.class)
+	@GET
+	@Path(""/{id}/social-endpoints/{endpointServiceId}/live-comments/{offset}/{batch}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<LiveComment> getLiveCommentsFromEndpoint(@ApiParam(value = ""This is the id of the endpoint service"", required = true)
+	@PathParam(""endpointServiceId"") String endpointServiceId,
+	@ApiParam(value = ""Broadcast id"", required = true)
+	@PathParam(""id"") String streamId,
+	@ApiParam(value = ""this is the start offset where to start getting comment"", required = true)
+	@PathParam(""offset"") int offset,
+	@ApiParam(value = ""number of items to be returned"", required = true)
+	@PathParam(""batch"") int batch) 
+	{
+
+		VideoServiceEndpoint videoServiceEndPoint = getApplication().getVideoServiceEndPoint(endpointServiceId);
+		List<LiveComment> liveComment = null;
+		if (videoServiceEndPoint != null) {
+			liveComment = videoServiceEndPoint.getComments(streamId, offset, batch);
+		}
+		return liveComment;
+	}
+
+
+	@ApiOperation(value = ""Return the number of live views in specified video service endpoint. It works If interactivity is collected which can be enabled/disabled by properties file."", notes = """", response = Result.class)
+	@GET
+	@Path(""/{id}/social-endpoints/{endpointServiceId}/live-views-count"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result getViewerCountFromEndpoint(@ApiParam(value = ""the id of the endpoint"", required = true)
+	@PathParam(""endpointServiceId"") String endpointServiceId,
+	@ApiParam(value = ""the id of the stream"", required = true)
+	@PathParam(""id"") String streamId) 
+	{
+		VideoServiceEndpoint videoServiceEndPoint = getApplication().getVideoServiceEndPoint(endpointServiceId);
+		long liveViews = 0;
+		if (videoServiceEndPoint != null) {
+			liveViews = videoServiceEndPoint.getLiveViews(streamId);
+		}
+		return new Result(true, String.valueOf(liveViews));
+	}
+
+
+	@ApiOperation(value = ""Returns the number of live comment count from a specific video service endpoint. It works If interactivity is collected which can be enabled/disabled by properties file."", notes = """", response = Result.class)
+	@GET
+	@Path(""/{id}/social-endpoints/{endpointServiceId}/live-comments-count"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result getLiveCommentsCount(@ApiParam(value = "" the id of the endpoint"", required = true) @PathParam(""endpointServiceId"") String endpointServiceId,
+			@ApiParam(value = ""the id of the stream"", required = true)  @PathParam(""streamId"") String streamId) {
+		VideoServiceEndpoint videoServiceEndPoint = getApplication().getVideoServiceEndPoint(endpointServiceId);
+		int commentCount = 0;
+		if (videoServiceEndPoint != null) {
+			commentCount = videoServiceEndPoint.getTotalCommentsCount(streamId);
+		}
+		return new Result(true, String.valueOf(commentCount));
+	}
+
+
+	@ApiOperation(value = ""Return the interaction from a specific endpoint like Facebook, Youtube, PSCP, etc. It works If interactivity is collected which can be enabled/disabled by properties file."", notes = """", response = Interaction.class)
+	@GET
+	@Path(""/{id}/social-endpoints/{endpointServiceId}/interaction"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Interaction getInteractionFromEndpoint(@ApiParam(value = ""the id of the endpoint"", required = true) @PathParam(""endpointServiceId"") String endpointServiceId,
+			@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String streamId) {
+		Interaction interaction = null;
+		VideoServiceEndpoint videoServiceEndPoint = getApplication().getVideoServiceEndPoint(endpointServiceId);
+		if (videoServiceEndPoint != null) {
+			interaction = videoServiceEndPoint.getInteraction(streamId);
+		}
+		return interaction;
+	}
+
+
+
+	@ApiOperation(value = ""Get detected objects from the stream based on offset and size"", notes = """",responseContainer = ""List"", response = TensorFlowObject.class)
+	@GET
+	@Path(""/{id}/detections/{offset}/{size}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<TensorFlowObject> getDetectionList(@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String id,
+			@ApiParam(value = ""starting point of the list"", required = true) @PathParam(""offset"") int offset,
+			@ApiParam(value = ""total size of the return list"", required = true) @PathParam(""size"") int size) {
+		List<TensorFlowObject> list = null;
+
+		if (id != null) {
+			list = getDataStore().getDetectionList(id, offset, size);	
+		}
+
+		if (list == null) {
+			//do not return null in rest service
+			list = new ArrayList<>();
+		}
+		return list;
+	}
+
+	@ApiOperation(value = ""Get total number of detected objects"", notes = """", response = Long.class)
+	@GET
+	@Path(""/{id}/detections/count"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public long getObjectDetectedTotal(@ApiParam(value = ""id of the stream"", required = true) @PathParam(""id"") String id){
+		return getDataStore().getObjectDetectedTotal(id);
+	}
+
+	@ApiOperation(value = ""Import Live Streams to Stalker Portal"", notes = """", response = Result.class)
+	@POST
+	@Path(""/import-to-stalker"")
+	@Produces(MediaType.APPLICATION_JSON)
+	@Override
+	public Result importLiveStreams2Stalker() 
+	{
+		return super.importLiveStreams2Stalker();
+	}
+
+
+	@ApiOperation(value = ""Get the total number of broadcasts"", notes = """", response = SimpleStat.class)
+	@GET
+	@Path(""/count"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public SimpleStat getTotalBroadcastNumber() {
+		return new SimpleStat(getDataStore().getTotalBroadcastNumber());
+	}
+
+	@ApiOperation(value = ""Return the statistics of the  total live streams, total RTMP watchers, total HLS and total WebRTC watchers"", notes = """", response = SimpleStat.class)
+	@GET
+	@Path(""/active-live-stream-count"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public SimpleStat getAppLiveStatistics() {
+		return new SimpleStat(getDataStore().getActiveBroadcastCount());
+	}
+
+
+	@ApiOperation(value = ""Generates random one-time token for specified stream"")
+	@ApiResponses(value = { @ApiResponse(code = 200, message = ""Returns token"", response=Token.class), 
+			@ApiResponse(code = 400, message = ""When there is an error in creating token"", response=Result.class)})
+	@GET
+	@Path(""/{id}/token"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Response getToken (@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"")String streamId,
+			@ApiParam(value = ""the expire date of the token"", required = true) @QueryParam(""expireDate"") long expireDate,
+			@ApiParam(value = ""type of the token. It may be \""play\"" or \""publish\"" "", required = true) @QueryParam(""type"") String type) 
+	{
+		Token token = null;
+		String message = ""Define stream Id and Expire Date (unix time)"";
+		if(streamId != null && expireDate > 0) {
+
+			ApplicationContext appContext = getAppContext();
+
+			if(appContext != null && appContext.containsBean(ITokenService.BeanName.TOKEN_SERVICE.toString())) 
+			{
+				ITokenService tokenService = (ITokenService)appContext.getBean(ITokenService.BeanName.TOKEN_SERVICE.toString());
+				token = tokenService.createToken(streamId, expireDate, type);
+				if(token != null) 
+				{
+					if (getDataStore().saveToken(token)) {
+						//returns token only everything is OK
+						return Response.status(Status.OK).entity(token).build();
+					}
+					else {
+						message = ""Cannot save token to the datastore"";
+					}
+				}
+				else {
+					message = ""Cannot create token. It can be a mock token service"";
+				}
+			}
+			else {
+				message = ""No token service in this app"";
+			}
+		}
+
+		return Response.status(Status.BAD_REQUEST).entity(new Result(false, message)).build();
+	}
+
+	@ApiOperation(value = ""Perform validation of token for requested stream"", notes = """", response = Token.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/validate-token"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Token validateToken (@ApiParam(value = ""token to be validated"", required = true) Token token) {
+		Token validatedToken = null;
+
+		if(token.getTokenId() != null) {
+
+			validatedToken = getDataStore().validateToken(token);
+		}
+
+		return validatedToken;
+	}
+
+
+	@ApiOperation(value = "" Removes all tokens related with requested stream"", notes = """", response = Result.class)
+	@DELETE
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/{id}/tokens"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result revokeTokens (@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String streamId) {
+		Result result = new Result(false);
+
+		if(streamId != null) {
+
+			result.setSuccess(getDataStore().revokeTokens(streamId));
+		}
+
+		return result;
+	}
+
+
+	@ApiOperation(value = ""Get the all tokens of requested stream"", notes = """",responseContainer = ""List"", response = Token.class)
+	@GET
+	@Path(""/{id}/tokens/list/{offset}/{size}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<Token> listTokens (@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String streamId,
+			@ApiParam(value = ""the starting point of the list"", required = true) @PathParam(""offset"") int offset,
+			@ApiParam(value = ""size of the return list (max:50 )"", required = true) @PathParam(""size"") int size) {
+		List<Token> tokens = null;
+		if(streamId != null) {
+			tokens = getDataStore().listAllTokens(streamId, offset, size);
+		}
+		return tokens;
+	}
+
+	@ApiOperation(value = ""Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count"", notes = """", response = BroadcastStatistics.class)
+	@GET
+	@Path(""/{id}/broadcast-statistics"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public BroadcastStatistics getBroadcastStatistics(@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String id) {
+
+		int totalRTMPViewer = -1;
+		int totalWebRTCViewer = -1;
+		int totalHLSViewer = -1;
+		if (id != null) 
+		{
+			IBroadcastScope broadcastScope = getScope().getBroadcastScope(id);
+
+			if (broadcastScope != null)	{
+				totalRTMPViewer = broadcastScope.getConsumers().size();
+			}
+
+			Broadcast broadcast = getDataStore().get(id);
+			if (broadcast != null) {
+				totalHLSViewer = broadcast.getHlsViewerCount();
+			}
+
+			IWebRTCAdaptor webRTCAdaptor = getWebRTCAdaptor();
+
+			if (webRTCAdaptor != null) {
+				totalWebRTCViewer = webRTCAdaptor.getNumberOfViewers(id);
+			}
+		}
+
+		return new BroadcastStatistics(totalRTMPViewer, totalHLSViewer, totalWebRTCViewer);
+	}
+
+	@ApiOperation(value = ""Returns filtered broadcast list"", notes = """",responseContainer = ""List"",response = Broadcast.class)
+	@GET
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/filter-list/{offset}/{size}/{type}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<Broadcast> filterBroadcastList(@ApiParam(value = ""starting point of the list"", required = true) @PathParam(""offset"") int offset,
+			@ApiParam(value = ""size of the return list (max:50 )"", required = true) @PathParam(""size"") int size,
+			@ApiParam(value = ""type of the stream. Possible values are \""liveStream\"", \""ipCamera\"", \""streamSource\"", \""VoD\"""", required = true) @PathParam(""type"") String type) {
+		return getDataStore().filterBroadcastList(offset, size, type);
+	}
+
+
+	@ApiOperation(value = ""Get device parameters for social network authorization."", notes = """", response = Object.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/social-networks/{serviceName}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Object getDeviceAuthParameters(@ApiParam(value = ""Name of the service, like Facebook, Youtube, Periscope"", required = true) @PathParam(""serviceName"") String serviceName) {
+		String message = null;
+		boolean missingClientIdAndSecret = false;
+
+		int errorId = -1;
+		VideoServiceEndpoint videoServiceEndpoint = null;
+		if (serviceName.equals(AntMediaApplicationAdapter.FACEBOOK)) 
+		{
+			String clientId = getAppSettings().getFacebookClientId();
+			String clientSecret = getAppSettings().getFacebookClientSecret();
+
+			videoServiceEndpoint = getApplication().getEndpointService(AntMediaApplicationAdapter.FACEBOOK_ENDPOINT_CLASS, null, clientId, clientSecret);
+
+			if (isClientIdMissing(videoServiceEndpoint, clientId, clientSecret)) 
+			{
+				missingClientIdAndSecret = true;
+			}
+
+		}
+		else if (serviceName.equals(AntMediaApplicationAdapter.YOUTUBE)) 
+		{
+
+			String clientId = getAppSettings().getYoutubeClientId();
+			String clientSecret = getAppSettings().getYoutubeClientSecret();
+
+			videoServiceEndpoint = getApplication().getEndpointService(AntMediaApplicationAdapter.YOUTUBE_ENDPOINT_CLASS, null, clientId, clientSecret);
+
+			if (isClientIdMissing(videoServiceEndpoint, clientId, clientSecret)) 
+			{
+				missingClientIdAndSecret = true;
+			}
+
+		}
+		else if (serviceName.equals(AntMediaApplicationAdapter.PERISCOPE)) 
+		{
+			String clientId = getAppSettings().getPeriscopeClientId();
+			String clientSecret = getAppSettings().getPeriscopeClientSecret();
+
+			videoServiceEndpoint = getApplication().getEndpointService(PeriscopeEndpoint.class.getName(), null, clientId, clientSecret);
+
+			if (isClientIdMissing(videoServiceEndpoint, clientId, clientSecret))  {
+				missingClientIdAndSecret = true;
+			}
+		}
+
+		try {
+
+			if (missingClientIdAndSecret) {
+				errorId = ERROR_SOCIAL_ENDPOINT_UNDEFINED_CLIENT_ID;
+				message = ""Please enter service client id and client secret in app configuration"";
+			}
+			else if (videoServiceEndpoint == null) {
+				errorId = ERROR_SOCIAL_ENDPOINT_UNDEFINED_ENDPOINT;
+				message = ""Service with the name specified is not found in this app"";
+			}
+			else {
+				DeviceAuthParameters askDeviceAuthParameters = videoServiceEndpoint.askDeviceAuthParameters();
+
+				getApplication().startDeviceAuthStatusPolling(videoServiceEndpoint,
+						askDeviceAuthParameters);
+				return askDeviceAuthParameters;
+			}
+		}
+		catch (Exception e) {
+			errorId = ERROR_SOCIAL_ENDPOINT_EXCEPTION_IN_ASKING_AUTHPARAMS;
+			message = ""Exception in asking parameters"";
+			logger.error(ExceptionUtils.getStackTrace(e));
+		}
+
+		return new Result(false, message, errorId);
+	}
+
+	private boolean isClientIdMissing(VideoServiceEndpoint videoServiceEndpoint, String clientId, String clientSecret) {
+		boolean result = false;
+		if ((videoServiceEndpoint != null) && 
+				(clientId == null || clientSecret == null || 
+				clientId.length() == 0 || clientSecret.length() == 0)) {
+			result = true;
+		}
+		return result;
+	}
+
+	@ApiOperation(value = ""Check if device is authenticated in the social network. In authorization phase, "" +
+			""this function may be polled periodically until it returns success."" +
+			""Server checks social network service for about 1 minute so that if user"" +
+			""does not enter DeviceAuthParameters in a 1 minute, this function will"" +
+			""never return true"", notes = """", response = Result.class)
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/check-social-network-status/{userCode}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result checkDeviceAuthStatus(@ApiParam(value = ""Code of social media account"", required = true) @PathParam(""userCode"") String userCode) {
+		Map<String, VideoServiceEndpoint> endPointMap = getEndpointList();
+		String message = null;
+		boolean authenticated = false;
+		String endpointId = null;
+		if (endPointMap != null) {
+			for (VideoServiceEndpoint videoServiceEndpoint : endPointMap.values()) {
+				//if there is an endpoint added to the list with same user code,
+				//it means it is authenticated
+				DeviceAuthParameters authParameters = videoServiceEndpoint.getAuthParameters();
+				if (authParameters != null && authParameters.user_code.equals(userCode)) {
+					authenticated = true;
+					endpointId = videoServiceEndpoint.getCredentials().getId();
+					break;
+				}
+			}
+		}
+		if (!authenticated) {
+			List<VideoServiceEndpoint> endPointList = getEndpointsHavingErrorList();
+			for (VideoServiceEndpoint videoServiceEndpoint : endPointList) {
+				DeviceAuthParameters authParameters = videoServiceEndpoint.getAuthParameters();
+				if (authParameters != null && authParameters.user_code.equals(userCode)) {
+					message = videoServiceEndpoint.getError();
+					endPointList.remove(videoServiceEndpoint);
+					break;
+				}
+			}
+
+		}
+		return new Result(authenticated, endpointId, message);
+	}
+
+	protected List<VideoServiceEndpoint> getEndpointsHavingErrorList(){
+		return getApplication().getVideoServiceEndpointsHavingError();
+	}
+
+	@ApiOperation(value = ""Get Credentials of Social Endpoints"", notes = """", responseContainer = ""List"",response = SocialEndpointCredentials.class)
+	@GET
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/social-endpoints/{offset}/{size}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<SocialEndpointCredentials> getSocialEndpoints(@ApiParam(value = ""the starting point of the list"", required = true) @PathParam(""offset"") int offset,
+			@ApiParam(value = ""size of the return list (max:50 )"", required = true) @PathParam(""size"") int size) {
+		List<SocialEndpointCredentials> endPointCredentials = new ArrayList<>();
+		Map<String, VideoServiceEndpoint> endPointMap = getEndpointList();
+		if (endPointMap != null) {
+			for (VideoServiceEndpoint videoServiceEndpoint : endPointMap.values()) {
+				endPointCredentials.add(videoServiceEndpoint.getCredentials());
+			}
+		}
+		return endPointCredentials;
+	}
+
+	@ApiOperation(value = ""Some social networks have different channels especially for facebook,"" +
+			""Live stream can be published on Facebook Page or Personal account, this"" +
+			""service returns the related information about that."", notes = """", response = SocialEndpointChannel.class)
+	@GET
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/social-networks-channel/{endpointId}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public SocialEndpointChannel getSocialNetworkChannel(@ApiParam(value = ""endpointId"", required = true) @PathParam(""endpointId"") String endpointId) {
+		Map<String, VideoServiceEndpoint> endPointMap = getEndpointList();
+		VideoServiceEndpoint endPoint = endPointMap.get(endpointId);
+		SocialEndpointChannel channel = null;
+		if (endPoint != null) {
+			channel = endPoint.getChannel();
+		}
+		return channel;
+	}
+
+
+	@ApiOperation(value = ""Returns available social network channels for the specific service"", notes = """",responseContainer = ""List"",response = SocialEndpointChannel.class)
+	@GET
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/social-networks-channel-lists/{endpointId}/{type}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public List<SocialEndpointChannel> getSocialNetworkChannelList(@ApiParam(value = ""endpointId"", required = true) @PathParam(""endpointId"") String endpointId,
+			@ApiParam(value = ""This is very service specific, it may be page for Facebook"", required = true) @PathParam(""type"") String type) {
+
+		Map<String, VideoServiceEndpoint> endPointMap = getEndpointList();
+		VideoServiceEndpoint endPoint = endPointMap.get(endpointId);
+		List<SocialEndpointChannel>  channelList = null;
+		if (endPoint != null) {
+			channelList = endPoint.getChannelList();
+		}
+		return channelList;
+	}
+
+
+	@ApiOperation(value = ""If there are multiple channels in a social network,"" +
+			""this method sets specific channel for that endpoint"" +
+			""If a user has pages in Facebook, this method sets the specific page to publish live stream to"", notes = """", response = Result.class)
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Path(""/social-networks-channels/{endpointId}/{type}/{id}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result setSocialNetworkChannelList(@ApiParam(value = ""endpointId"", required = true) @PathParam(""endpointId"") String endpointId,
+			@ApiParam(value = ""type"", required = true) @PathParam(""type"") String type,
+			@ApiParam(value = ""id"", required = true) @PathParam(""id"") String channelId) {
+		boolean result = false;
+		Map<String, VideoServiceEndpoint> endPointMap = getEndpointList();
+
+		VideoServiceEndpoint endPoint = endPointMap.get(endpointId);
+
+		if (endPoint != null) {
+			result = endPoint.setActiveChannel(type, channelId);
+		}
+		return new Result(result, null);
+	}
+
+	@ApiOperation(value = ""Set stream specific Mp4 Muxing setting, this setting overrides general Mp4 Muxing Setting"", notes = """", response = Result.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/{id}/recording/{recording-status}"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result enableMp4Muxing(@ApiParam(value = ""the id of the stream"", required = true) @PathParam(""id"") String streamId,
+			@ApiParam(value = ""the integer value for Mp4 Muxing, 1 = Enable Muxing, -1 = Disable Muxing, 0 = No Settings"", required = true) @PathParam(""recording-status"") int enableMp4) {
+		Result result = new Result(false);
+		if (streamId != null) {
+
+			if (getDataStore().setMp4Muxing(streamId, enableMp4)) {
+				if (MP4_ENABLE == enableMp4) {
+					startMp4Muxing(streamId);
+				} else if (MP4_DISABLE == enableMp4) {
+					stopMp4Muxing(streamId);
+				}
+				result.setSuccess(true);
+				result.setMessage(""streamId:"" + streamId);
+			} else {
+				result.setMessage(""no stream for this id: "" + streamId + "" or wrong setting parameter"");
+			}
+		}
+
+		return result;
+	}
+
+	@Nullable
+	private Mp4Muxer getMp4Muxer(MuxAdaptor muxAdaptor) {
+		Mp4Muxer mp4Muxer = null;
+		for (Muxer muxer : muxAdaptor.getMuxerList()) {
+			if (muxer instanceof Mp4Muxer) {
+				mp4Muxer = (Mp4Muxer) muxer;
+			}
+		}
+		return mp4Muxer;
+	}
+
+	private Result startMp4Muxing(String streamId) {
+		boolean result = false;
+		List<MuxAdaptor> muxAdaptors = getMuxAdaptors(streamId);
+		for (MuxAdaptor muxAdaptor : muxAdaptors) {
+			if (muxAdaptor != null) {
+				Mp4Muxer mp4Muxer = getMp4Muxer(muxAdaptor);
+				if (mp4Muxer == null) {
+					//avoid multiple call of rest api adding new mp4muxers
+					muxAdaptor.startRecording();
+				}
+				result = true;
+			}
+		}
+		return new Result(result);
+	}
+
+	private List<MuxAdaptor> getMuxAdaptors(String streamId) {
+		AntMediaApplicationAdapter application = getApplication();
+		List<MuxAdaptor> muxAdaptors = new ArrayList<>();
+		if(application != null){
+			muxAdaptors = application.getMuxAdaptors();
+		}
+		List<MuxAdaptor> matchedMuxAdaptors = new ArrayList<>();
+		for (MuxAdaptor muxAdaptor : muxAdaptors) {
+			if (streamId.equals(muxAdaptor.getStreamId())) {
+				matchedMuxAdaptors.add(muxAdaptor);
+			}
+		}
+		return matchedMuxAdaptors;
+	}
+
+	private Result stopMp4Muxing(String streamId) {
+		boolean result = false;
+		List<MuxAdaptor> muxAdaptors = getMuxAdaptors(streamId);
+		for (MuxAdaptor muxAdaptor : muxAdaptors) {
+			if (muxAdaptor != null) {
+				Mp4Muxer mp4Muxer = getMp4Muxer(muxAdaptor);
+				if (mp4Muxer != null) {
+					//avoid multiple call of rest api stopping mp4 muxer
+					muxAdaptor.stopRecording();
+				}
+				result = true;
+			}
+		}
+		return new Result(result);
+	}
+	
+	@ApiOperation(value = ""Add IP Camera and Stream Sources to the system as broadcast. It starts automatically"", response = Result.class)
+	@POST
+	@Consumes(MediaType.APPLICATION_JSON)
+	@Path(""/stream-source"")
+	@Produces(MediaType.APPLICATION_JSON)
+	public Result addStreamSource(@ApiParam(value = ""stream"", required = true) Broadcast stream, @QueryParam(""socialNetworks"") String socialEndpointIds) {
+
+		Result result =",Create rest version 2 based on restfulapi . net .,"""Refactor BroadcastRestService to BroadcastRestServiceV2 and remove redundant code""","Here is a possible commit message based on the provided diff:

`Refactored BroadcastRestService to use super class methods and removed redundant code`

This commit message is concise and accurately describes the changes made in the commit. It mentions the refactoring of the `BroadcastRestService` class to use the super class methods and the removal of redundant code.","Updated BroadcastRestService to extend RestServiceBase and use its methods for creating, updating, and deleting broadcasts, as well as adding and revoking social endpoints. Removed unused methods and fields.","Refactor BroadcastRestService methods to BroadcastRestServiceV2, removing redundancies and separating concerns."
"diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
index e84f90a811..10e01969bb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DefaultDownloadIndex.java
@@ -220,6 +220,7 @@ public final class DefaultDownloadIndex implements DownloadIndex {
   /**
    * Removes the {@link DownloadState} with the given {@code id}.
    *
+   * @param id ID of a {@link DownloadState}.
    * @throws DatabaseIOException If an error occurs removing the state.
    */
   public void removeDownloadState(String id) throws DatabaseIOException {
@@ -250,6 +251,30 @@ public final class DefaultDownloadIndex implements DownloadIndex {
     }
   }
 
+  /**
+   * Sets the manual stop reason of the download with the given {@code id} in a terminal state
+   * ({@link DownloadState#STATE_COMPLETED}, {@link DownloadState#STATE_FAILED}).
+   *
+   * <p>If there's no {@link DownloadState} with the given {@code id} or it isn't in a terminal
+   * state, then nothing happens.
+   *
+   * @param id ID of a {@link DownloadState}.
+   * @param manualStopReason The manual stop reason.
+   * @throws DatabaseIOException If an error occurs updating the state.
+   */
+  public void setManualStopReason(String id, int manualStopReason) throws DatabaseIOException {
+    ensureInitialized();
+    try {
+      ContentValues values = new ContentValues();
+      values.put(COLUMN_MANUAL_STOP_REASON, manualStopReason);
+      SQLiteDatabase writableDatabase = databaseProvider.getWritableDatabase();
+      writableDatabase.update(
+          TABLE_NAME, values, WHERE_STATE_TERMINAL + "" AND "" + WHERE_ID_EQUALS, new String[] {id});
+    } catch (SQLException e) {
+      throw new DatabaseIOException(e);
+    }
+  }
+
   private void ensureInitialized() throws DatabaseIOException {
     if (initialized) {
       return;
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloadIndexTest.java b/library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloadIndexTest.java
index 37c3f69514..c537eb1152 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloadIndexTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/offline/DefaultDownloadIndexTest.java
@@ -221,7 +221,7 @@ public class DefaultDownloadIndexTest {
   }
 
   @Test
-  public void setManualStopReason_setToReasonNone() throws Exception {
+  public void setManualStopReason_setReasonToNone() throws Exception {
     String id = ""id"";
     DownloadStateBuilder downloadStateBuilder =
         new DownloadStateBuilder(id)
@@ -271,4 +271,57 @@ public class DefaultDownloadIndexTest {
     DownloadState readDownloadState = downloadIndex.getDownloadState(id);
     DownloadStateTest.assertEqual(readDownloadState, downloadState);
   }
+
+  @Test
+  public void setSingleDownloadManualStopReason_setReasonToNone() throws Exception {
+    String id = ""id"";
+    DownloadStateBuilder downloadStateBuilder =
+        new DownloadStateBuilder(id)
+            .setState(DownloadState.STATE_COMPLETED)
+            .setManualStopReason(0x12345678);
+    DownloadState downloadState = downloadStateBuilder.build();
+    downloadIndex.putDownloadState(downloadState);
+
+    downloadIndex.setManualStopReason(id, DownloadState.MANUAL_STOP_REASON_NONE);
+
+    DownloadState readDownloadState = downloadIndex.getDownloadState(id);
+    DownloadState expectedDownloadState =
+        downloadStateBuilder.setManualStopReason(DownloadState.MANUAL_STOP_REASON_NONE).build();
+    DownloadStateTest.assertEqual(readDownloadState, expectedDownloadState);
+  }
+
+  @Test
+  public void setSingleDownloadManualStopReason_setReason() throws Exception {
+    String id = ""id"";
+    DownloadStateBuilder downloadStateBuilder =
+        new DownloadStateBuilder(id)
+            .setState(DownloadState.STATE_FAILED)
+            .setFailureReason(DownloadState.FAILURE_REASON_UNKNOWN);
+    DownloadState downloadState = downloadStateBuilder.build();
+    downloadIndex.putDownloadState(downloadState);
+    int manualStopReason = 0x12345678;
+
+    downloadIndex.setManualStopReason(id, manualStopReason);
+
+    DownloadState readDownloadState = downloadIndex.getDownloadState(id);
+    DownloadState expectedDownloadState =
+        downloadStateBuilder.setManualStopReason(manualStopReason).build();
+    DownloadStateTest.assertEqual(readDownloadState, expectedDownloadState);
+  }
+
+  @Test
+  public void setSingleDownloadManualStopReason_notTerminalState_doesNotSetManualStopReason()
+      throws Exception {
+    String id = ""id"";
+    DownloadStateBuilder downloadStateBuilder =
+        new DownloadStateBuilder(id).setState(DownloadState.STATE_DOWNLOADING);
+    DownloadState downloadState = downloadStateBuilder.build();
+    downloadIndex.putDownloadState(downloadState);
+    int notMetRequirements = 0x12345678;
+
+    downloadIndex.setManualStopReason(id, notMetRequirements);
+
+    DownloadState readDownloadState = downloadIndex.getDownloadState(id);
+    DownloadStateTest.assertEqual(readDownloadState, downloadState);
+  }
 }",Add DefaultDownloadIndex setManualStopReason variant for single download .,"""Added setManualStopReason method to DefaultDownloadIndex to update the manual stop reason of a download in a terminal state.""","""Add setManualStopReason method to DefaultDownloadIndex and related test cases""","""Add setManualStopReason method to DefaultDownloadIndex and corresponding tests""

This commit appears to add a new method `setManualStopReason` to the `DefaultDownloadIndex` class, along with several new test methods in the `DefaultDownloadIndexTest` class. The method allows setting the manual stop reason for a download in a terminal state, and the tests cover various scenarios such as setting the reason to none, setting a new reason, and attempting to set the reason for a download that is not in a terminal state.",Add setManualStopReason method and corresponding tests to DefaultDownloadIndex for updating manual stop reasons in terminal states.
"diff --git a/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java b/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
index 3ade9ffcec..f9c6e82248 100644
--- a/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
+++ b/src/java/org/apache/cassandra/io/sstable/SSTableIdentityIterator.java
@@ -49,6 +49,7 @@ public class SSTableIdentityIterator implements Comparable<SSTableIdentityIterat
         this.staticRow = iterator.readStaticRow();
     }
 
+    @SuppressWarnings(""resource"")
     public static SSTableIdentityIterator create(SSTableReader sstable, RandomAccessReader file, DecoratedKey key)
     {
         try
@@ -65,6 +66,7 @@ public class SSTableIdentityIterator implements Comparable<SSTableIdentityIterat
         }
     }
 
+    @SuppressWarnings(""resource"")
     public static SSTableIdentityIterator create(SSTableReader sstable, FileDataInput dfile, RowIndexEntry<?> indexEntry, DecoratedKey key, boolean tombstoneOnly)
     {
         try",Suppress 2 eclipse - warnings .,"""Suppress resource warnings in SSTableIdentityIterator""",Added factory methods for creating SSTableIdentityIterator instances.,"""Added @SuppressWarnings(""resource"") annotations to SSTableIdentityIterator create methods""

This commit adds the ""@SuppressWarnings(""resource"")"" annotation to two methods in the SSTableIdentityIterator class:

* create(SSTableReader sstable, RandomAccessReader file, DecoratedKey key)
* create(SSTableReader sstable, FileDataInput dfile, RowIndexEntry<?> indexEntry, DecoratedKey key, boolean tombstoneOnly)

The ""@SuppressWarnings(""resource"")"" annotation is used to suppress warnings related to resource leaks. In this case, it is likely that the warnings were being generated because the methods were not explicitly closing the resources that they were opening (such as the RandomAccessReader or FileDataInput objects).

By adding this annotation, the developer is indicating that they are aware of the potential resource leak and have determined that it is not an issue in this case. This can help to reduce clutter in the code and make it easier to focus on actual issues that need to be addressed.","Added @SuppressWarnings(""resource"") annotations to create methods in SSTableIdentityIterator class."
"diff --git a/clustering/common/src/main/java/org/jboss/as/clustering/controller/Capability.java b/clustering/common/src/main/java/org/jboss/as/clustering/controller/Capability.java
index d5dbdbd65e..eefbb42ada 100644
--- a/clustering/common/src/main/java/org/jboss/as/clustering/controller/Capability.java
+++ b/clustering/common/src/main/java/org/jboss/as/clustering/controller/Capability.java
@@ -35,5 +35,7 @@ public interface Capability extends Definable<RuntimeCapability<Void>> {
      * @param address a path address
      * @return a resolved runtime capability
      */
-    RuntimeCapability<Void> getRuntimeCapability(PathAddress address);
+    default RuntimeCapability<Void> getRuntimeCapability(PathAddress address) {
+        return this.getDefinition().fromBaseCapability(address.getLastElement().getValue());
+    }
 }
diff --git a/clustering/common/src/main/java/org/jboss/as/clustering/controller/ResourceServiceBuilder.java b/clustering/common/src/main/java/org/jboss/as/clustering/controller/ResourceServiceBuilder.java
index 30a7af5353..bae8d6053c 100644
--- a/clustering/common/src/main/java/org/jboss/as/clustering/controller/ResourceServiceBuilder.java
+++ b/clustering/common/src/main/java/org/jboss/as/clustering/controller/ResourceServiceBuilder.java
@@ -40,5 +40,7 @@ public interface ResourceServiceBuilder<T> extends Builder<T> {
      * @return the reference to this builder
      * @throws OperationFailedException if there was a failure reading the model
      */
-    Builder<T> configure(OperationContext context, ModelNode model) throws OperationFailedException;
+    default Builder<T> configure(OperationContext context, ModelNode model) throws OperationFailedException {
+        return this;
+    }
 }
diff --git a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreBuilder.java b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreBuilder.java
index 5eae059577..008bf23017 100644
--- a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreBuilder.java
+++ b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreBuilder.java
@@ -25,9 +25,6 @@ package org.jboss.as.clustering.infinispan.subsystem;
 import org.infinispan.configuration.cache.ConfigurationBuilder;
 import org.infinispan.configuration.cache.PersistenceConfiguration;
 import org.jboss.as.clustering.controller.ResourceServiceBuilder;
-import org.jboss.as.controller.OperationContext;
-import org.jboss.dmr.ModelNode;
-import org.wildfly.clustering.service.Builder;
 
 /**
  * @author Paul Ferraro
@@ -42,9 +39,4 @@ public class NoStoreBuilder extends CacheComponentBuilder<PersistenceConfigurati
     public PersistenceConfiguration getValue() {
         return new ConfigurationBuilder().persistence().passivation(false).create();
     }
-
-    @Override
-    public Builder<PersistenceConfiguration> configure(OperationContext context, ModelNode model) {
-        return this;
-    }
 }
diff --git a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreResourceDefinition.java b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreResourceDefinition.java
index 1ef6b003e9..419b3bada6 100644
--- a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreResourceDefinition.java
+++ b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/NoStoreResourceDefinition.java
@@ -44,10 +44,6 @@ public class NoStoreResourceDefinition extends ChildResourceDefinition {
         // Nothing to do yet
     }
 
-    /**
-     * @param type
-     * @param allowRuntimeOnlyRegistration
-     */
     public NoStoreResourceDefinition() {
         super(PATH, new InfinispanResourceDescriptionResolver(PATH));
     }
diff --git a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/RemoteStoreResourceDefinition.java b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/RemoteStoreResourceDefinition.java
index 7adbca71d5..0239fb7174 100644
--- a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/RemoteStoreResourceDefinition.java
+++ b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/RemoteStoreResourceDefinition.java
@@ -57,7 +57,7 @@ public class RemoteStoreResourceDefinition extends StoreResourceDefinition {
     static final PathElement LEGACY_PATH = PathElement.pathElement(""remote-store"", ""REMOTE_STORE"");
     static final PathElement PATH = pathElement(""remote"");
 
-    private enum Capability implements org.jboss.as.clustering.controller.Capability {
+    enum Capability implements org.jboss.as.clustering.controller.Capability {
         OUTBOUND_SOCKET_BINDING(""org.wildfly.clustering.infinispan.cache-container.cache.store.remote.outbound-socket-binding"", OutboundSocketBinding.class),
         ;
         private final RuntimeCapability<Void> definition;
diff --git a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StoreWriteThroughBuilder.java b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StoreWriteThroughBuilder.java
index 6d8e02b574..1edc50cec2 100644
--- a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StoreWriteThroughBuilder.java
+++ b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StoreWriteThroughBuilder.java
@@ -25,9 +25,6 @@ package org.jboss.as.clustering.infinispan.subsystem;
 import org.infinispan.configuration.cache.AsyncStoreConfiguration;
 import org.infinispan.configuration.cache.ConfigurationBuilder;
 import org.jboss.as.clustering.controller.ResourceServiceBuilder;
-import org.jboss.as.controller.OperationContext;
-import org.jboss.dmr.ModelNode;
-import org.wildfly.clustering.service.Builder;
 
 /**
  * @author Paul Ferraro
@@ -42,9 +39,4 @@ public class StoreWriteThroughBuilder extends CacheComponentBuilder<AsyncStoreCo
     public AsyncStoreConfiguration getValue() throws IllegalStateException, IllegalArgumentException {
         return new ConfigurationBuilder().persistence().addSingleFileStore().async().disable().create();
     }
-
-    @Override
-    public Builder<AsyncStoreConfiguration> configure(OperationContext context, ModelNode model) {
-        return this;
-    }
 }
diff --git a/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/PropertyResourceDefinition.java b/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/PropertyResourceDefinition.java
index 537bae3cda..54a1bbfa9b 100644
--- a/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/PropertyResourceDefinition.java
+++ b/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/PropertyResourceDefinition.java
@@ -174,7 +174,6 @@ public class PropertyResourceDefinition extends ChildResourceDefinition {
 
     static ResourceTransformer PROPERTIES_RESOURCE_TRANSFORMER = new ResourceTransformer() {
         @Override
-        @SuppressWarnings(""deprecation"")
         public void transformResource(ResourceTransformationContext context, PathAddress address, Resource resource) throws OperationFailedException {
             final ModelNode model = resource.getModel();
             final ModelNode properties = model.remove(ProtocolResourceDefinition.Attribute.PROPERTIES.getDefinition().getName());
@@ -197,7 +196,6 @@ public class PropertyResourceDefinition extends ChildResourceDefinition {
 
     static OperationTransformer PROPERTIES_ADD_OP_TRANSFORMER = new OperationTransformer()  {
         @Override
-        @SuppressWarnings(""deprecation"")
         public ModelNode transformOperation(ModelNode operation) {
             if (operation.hasDefined(ProtocolResourceDefinition.Attribute.PROPERTIES.getDefinition().getName())) {
                 final ModelNode addOp = operation.clone();
@@ -227,7 +225,6 @@ public class PropertyResourceDefinition extends ChildResourceDefinition {
     static org.jboss.as.controller.transform.OperationTransformer PROPERTIES_OP_TRANSFORMER = new org.jboss.as.controller.transform.OperationTransformer() {
 
         @Override
-        @SuppressWarnings(""deprecation"")
         public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException {
             if (operation.get(ModelDescriptionConstants.NAME).asString().equals(ProtocolResourceDefinition.Attribute.PROPERTIES.getDefinition().getName())) {
 
diff --git a/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/TransportResourceDefinition.java b/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/TransportResourceDefinition.java
index 332d456364..1ec8be4997 100644
--- a/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/TransportResourceDefinition.java
+++ b/clustering/jgroups/extension/src/main/java/org/jboss/as/clustering/jgroups/subsystem/TransportResourceDefinition.java
@@ -91,7 +91,7 @@ public class TransportResourceDefinition extends ProtocolResourceDefinition {
         return PathElement.pathElement(""transport"", name);
     }
 
-    private enum Capability implements org.jboss.as.clustering.controller.Capability {
+    enum Capability implements org.jboss.as.clustering.controller.Capability {
         DIAGNOSTICS_SOCKET_BINDING(""org.wildfly.clustering.transport.diagnostics-socket-binding"", SocketBinding.class),
         ;
         private final RuntimeCapability<Void> definition;
diff --git a/clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/SingletonPolicyResourceDefinition.java b/clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/SingletonPolicyResourceDefinition.java
index efb9dda664..a01460eae4 100644
--- a/clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/SingletonPolicyResourceDefinition.java
+++ b/clustering/singleton/extension/src/main/java/org/wildfly/extension/clustering/singleton/SingletonPolicyResourceDefinition.java
@@ -28,7 +28,6 @@ import org.jboss.as.clustering.controller.RemoveStepHandler;
 import org.jboss.as.clustering.controller.ResourceDescriptor;
 import org.jboss.as.clustering.controller.ResourceServiceHandler;
 import org.jboss.as.clustering.controller.SimpleResourceServiceHandler;
-import org.jboss.as.controller.PathAddress;
 import org.jboss.as.controller.PathElement;
 import org.jboss.as.controller.SimpleAttributeDefinition;
 import org.jboss.as.controller.SimpleAttributeDefinitionBuilder;
@@ -64,11 +63,6 @@ public class SingletonPolicyResourceDefinition extends ChildResourceDefinition {
         public RuntimeCapability<Void> getDefinition() {
             return this.definition;
         }
-
-        @Override
-        public RuntimeCapability<Void> getRuntimeCapability(PathAddress address) {
-            return this.definition.fromBaseCapability(address.getLastElement().getValue());
-        }
     }
 
     enum Attribute implements org.jboss.as.clustering.controller.Attribute {",Remove code made redundant by default interface methods .,"""Provide default implementations for Capability and ResourceServiceBuilder interfaces""","""Added default implementations for getRuntimeCapability and configure methods in various interfaces and classes.""","This commit adds default methods to the `Capability` and `ResourceServiceBuilder` interfaces in the `org.jboss.as.clustering.controller` package. The `Capability.getRuntimeCapability(PathAddress)` method now returns the runtime capability for the given path address, and the `ResourceServiceBuilder.configure(OperationContext, ModelNode)` method now returns the builder itself. Additionally, some unused imports and methods have been removed from various classes.","""Refactor: Introduce default methods to `Capability` and `ResourceServiceBuilder`; remove redundant code from builders and resource definitions."""
"diff --git a/test/com/facebook/buck/toolchain/impl/BUCK b/test/com/facebook/buck/toolchain/impl/BUCK
index 8c5406b79c..e1638b536c 100644
--- a/test/com/facebook/buck/toolchain/impl/BUCK
+++ b/test/com/facebook/buck/toolchain/impl/BUCK
@@ -26,7 +26,6 @@ java_library(
         ""PUBLIC"",
     ],
     deps = [
-        ""//src/com/facebook/buck/apple/toolchain:toolchain"",
         ""//src/com/facebook/buck/model:model"",
         ""//src/com/facebook/buck/toolchain/impl:impl"",
         ""//src/com/facebook/buck/util/environment:platform"",
diff --git a/test/com/facebook/buck/toolchain/impl/ToolchainProviderBuilder.java b/test/com/facebook/buck/toolchain/impl/ToolchainProviderBuilder.java
index 84828f7283..198d420116 100644
--- a/test/com/facebook/buck/toolchain/impl/ToolchainProviderBuilder.java
+++ b/test/com/facebook/buck/toolchain/impl/ToolchainProviderBuilder.java
@@ -17,10 +17,8 @@
 package com.facebook.buck.toolchain.impl;
 
 import com.facebook.buck.android.toolchain.NdkCxxPlatformsProvider;
-import com.facebook.buck.apple.toolchain.AppleCxxPlatformsProvider;
 import com.facebook.buck.cxx.toolchain.CxxPlatformUtils;
 import com.facebook.buck.cxx.toolchain.CxxPlatformsProvider;
-import com.facebook.buck.model.FlavorDomain;
 import com.facebook.buck.toolchain.BaseToolchainProvider;
 import com.facebook.buck.toolchain.Toolchain;
 import com.facebook.buck.toolchain.ToolchainProvider;
@@ -28,7 +26,6 @@ import com.facebook.buck.toolchain.ToolchainWithCapability;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -42,13 +39,6 @@ public class ToolchainProviderBuilder {
         NdkCxxPlatformsProvider.DEFAULT_NAME, NdkCxxPlatformsProvider.of(ImmutableMap.of()));
   }
 
-  public ToolchainProviderBuilder withDefaultAppleCxxPlatforms() {
-    return withToolchain(
-        AppleCxxPlatformsProvider.DEFAULT_NAME,
-        AppleCxxPlatformsProvider.of(
-            FlavorDomain.from(""Apple C++ Platform"", Collections.emptyList())));
-  }
-
   public ToolchainProviderBuilder withDefaultCxxPlatforms() {
     return withToolchain(
         CxxPlatformsProvider.DEFAULT_NAME,",Remove unused ToolchainProviderBuilder . withDefaultAppleCxxPlatforms .,"""Remove Apple toolchain dependencies from ToolchainProviderBuilder""",Remove Apple Cxx Platforms from ToolchainProviderBuilder and java_library rule.,"""Remove AppleCxxPlatformsProvider and related imports in ToolchainProviderBuilder.java""

This commit removes the import of `AppleCxxPlatformsProvider` and related classes from `ToolchainProviderBuilder.java`. It also removes the method `withDefaultAppleCxxPlatforms()` which was used to set up the default Apple C++ platforms using `AppleCxxPlatformsProvider`.

This change suggests that the toolchain for Apple C++ platforms is no longer needed or is being handled in a different way.",Remove obsolete Apple toolchain references from BUCK file and ToolchainProviderBuilder.java.
"diff --git a/core/src/main/java/hudson/model/StringParameterValue.java b/core/src/main/java/hudson/model/StringParameterValue.java
index 04c25caa76..730374abb9 100644
--- a/core/src/main/java/hudson/model/StringParameterValue.java
+++ b/core/src/main/java/hudson/model/StringParameterValue.java
@@ -4,6 +4,8 @@ import org.kohsuke.stapler.DataBoundConstructor;
 
 import java.util.Map;
 
+import hudson.util.VariableResolver;
+
 /**
  * {@link ParameterValue} created from {@link StringParameterDefinition}.
  */
@@ -23,4 +25,13 @@ public class StringParameterValue extends ParameterValue {
     public void buildEnvVars(AbstractBuild<?,?> build, Map<String,String> env) {
         env.put(name.toUpperCase(),value);
     }
+
+    @Override
+    public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {
+        return new VariableResolver<String>() {
+            public String resolve(String name) {
+                return StringParameterValue.this.name.equals(name) ? value : null;
+            }
+        };
+    }
 }",added a missing VariableResolver .,"""Added VariableResolver support to StringParameterValue""","Added support for variable resolution in StringParameterValue. 

This commit message is concise and accurately describes the changes made in the commit. It mentions the addition of variable resolution support, which is the main change introduced in the diff.","The commit message could be:

Add VariableResolver implementation to StringParameterValue

Explanation:

* The file being changed is `core/src/main/java/hudson/model/StringParameterValue.java`.
* The change adds two import statements: `import hudson.util.VariableResolver;` and `import java.util.Map;`.
* The change also adds a new method `createVariableResolver` to the `StringParameterValue` class.
* The `createVariableResolver` method takes an `AbstractBuild` object as an argument and returns a `VariableResolver` object.
* The `VariableResolver` object returned by `createVariableResolver` has a `resolve` method that takes a `String` argument and returns a `String` value.
* The `resolve` method checks if the `name` argument matches the `name` field of the `StringParameterValue` object. If it does, it returns the `value` field of the `StringParameterValue` object. If it does not, it returns `null`.",Add VariableResolver support to StringParameterValue for environment variable resolution during builds.
"diff --git a/FAQ.md b/FAQ.md
index b300eea1..d5e994f7 100644
--- a/FAQ.md
+++ b/FAQ.md
@@ -335,6 +335,22 @@ Sometimes it helps to uninstall and install NetGuard again (be sure to export yo
 Since turning off the VPN service using the Android settings cannot be prevented,
 there is little use in adding PIN or password protection.
 
+<a name=""FAQ37""></a>
+**(37) Why are the pro features so expensive?**
+
+The right question is ""*why are there so many taxes and fees*"":
+
+* VAT: 25% (depending on your country)
+* Google fee: 30%
+* Income tax: 50%
+
+So, what is left for the developer is just a fraction of what you pay.
+
+Despite NetGuard being *really* a lot of work, only some of the convenience and advanced features are paid,
+which means that NetGuard is basically free to use.
+
+Also note that most free applications will appear not to be sustainable in the end, whereas NetGuard is properly maintained and supported.
+
 <br />
 
 **If you didn't find the answer to your question, you can ask your questions [in this forum](http://forum.xda-developers.com/showthread.php?t=3233012) or contact me directly [by e-mail](mailto:marcel+netguard@faircode.eu)**.
diff --git a/README.md b/README.md
index 814b06ac..b9e146b1 100644
--- a/README.md
+++ b/README.md
@@ -178,6 +178,9 @@ Frequently Asked Questions (FAQ)
 <a name=""FAQ36""></a>
 [**(36) Can you add PIN or password protection?**](https://github.com/M66B/NetGuard/blob/master/FAQ.md#FAQ36)
 
+<a name=""FAQ37""></a>
+[**(37) Why are the pro features so expensive?**](https://github.com/M66B/NetGuard/blob/master/FAQ.md#FAQ37)
+
 Permissions
 -----------
 ",Added FAQ,"""Added FAQ entry explaining the cost of NetGuard pro features""","""Added FAQ entry explaining the cost of pro features in NetGuard""","""Add FAQ entry about the cost of pro features""","Added FAQ entry explaining the cost breakdown for pro features in NetGuard, addressing perceived high prices."
"diff --git a/axon-server-connector/src/main/java/org/axonframework/axonserver/connector/heartbeat/HeartbeatMonitor.java b/axon-server-connector/src/main/java/org/axonframework/axonserver/connector/heartbeat/HeartbeatMonitor.java
index b43772555..9cfb7b95a 100644
--- a/axon-server-connector/src/main/java/org/axonframework/axonserver/connector/heartbeat/HeartbeatMonitor.java
+++ b/axon-server-connector/src/main/java/org/axonframework/axonserver/connector/heartbeat/HeartbeatMonitor.java
@@ -77,7 +77,7 @@ private void run() {
                 onInvalidConnection.run();
             }
         } catch (Exception e) {
-            logger.warn(""Impossible to correctly monitor the Axon Server connection state."");
+            logger.warn(""Impossible to correctly monitor the Axon Server connection state."", e);
         }
     }
 ",Add cause to the warn message .,"""Improve logging for Axon Server connection state monitoring by including exception details.""","""Added exception logging to HeartbeatMonitor to provide more context""","""Added exception to log message in HeartbeatMonitor.java""

This commit is modifying the file `HeartbeatMonitor.java` in the `axon-server-connector` directory. It is changing the log message that gets outputted when an exception occurs during the monitoring of the Axon Server connection state. The log message is being updated to include the exception that was thrown, which can help with troubleshooting and debugging.",Added exception details to the log message in HeartbeatMonitor for better error tracing.
"diff --git a/core-java-io/src/test/java/com/baeldung/file/FilesClearDataManualTest.java b/core-java-io/src/test/java/com/baeldung/file/FilesClearDataManualTest.java
new file mode 100644
index 0000000000..8a4b3a7380
--- /dev/null
+++ b/core-java-io/src/test/java/com/baeldung/file/FilesClearDataManualTest.java
@@ -0,0 +1,98 @@
+package com.baeldung.file;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.nio.channels.FileChannel;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardOpenOption;
+
+import org.apache.commons.io.FileUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.baeldung.util.StreamUtils;
+
+public class FilesClearDataManualTest {
+	
+    public static final String FILE_PATH = ""src/test/resources/fileexample.txt"";
+
+    @Before
+    @After
+    public void setup() throws IOException {
+        PrintWriter writer = new PrintWriter(FILE_PATH);
+        writer.print(""This example shows how we can delete the file contents without deleting the file"");
+        writer.close();
+    }
+    
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingPrintWritter_thenEmptyFile() throws IOException {
+        PrintWriter writer = new PrintWriter(FILE_PATH);
+        writer.print("""");
+        writer.close();
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingPrintWritterWithougObject_thenEmptyFile() throws IOException {
+        new PrintWriter(FILE_PATH).close();
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+
+       
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingFileWriter_thenEmptyFile() throws IOException {
+        new FileWriter(FILE_PATH, false).close();
+ 
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }
+    
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingFileOutputStream_thenEmptyFile() throws IOException {
+        new FileOutputStream(FILE_PATH).close();
+
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingFileUtils_thenEmptyFile() throws IOException {
+        FileUtils.write(new File(FILE_PATH), """", Charset.defaultCharset());
+
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingNIOFiles_thenEmptyFile() throws IOException {
+        BufferedWriter writer = Files.newBufferedWriter(Paths.get(FILE_PATH));
+        writer.write("""");
+        writer.flush();
+ 
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+    
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingNIOFileChannel_thenEmptyFile() throws IOException {
+        FileChannel.open(Paths.get(FILE_PATH), StandardOpenOption.WRITE).truncate(0).close();
+ 
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }   
+    
+    @Test
+    public void givenExistingFile_whenDeleteContentUsingGuava_thenEmptyFile() throws IOException {
+        File file = new File(FILE_PATH);
+        byte[] empty = new byte[0];
+        com.google.common.io.Files.write(empty, file);
+        
+        assertEquals(0, StreamUtils.getStringFromInputStream(new FileInputStream(FILE_PATH)).length());
+    }    
+    
+}
diff --git a/core-java-io/src/test/resources/fileexample.txt b/core-java-io/src/test/resources/fileexample.txt
new file mode 100644
index 0000000000..ee48fdfb84
--- /dev/null
+++ b/core-java-io/src/test/resources/fileexample.txt
@@ -0,0 +1 @@
+This example shows how we can delete the file contents without deleting the file
\ No newline at end of file",Added test file to demo the deletion of file content,"""Added test class FilesClearDataManualTest for clearing file data manually""",Added test class for clearing file data without deleting the file.,"This commit adds a new test class `FilesClearDataManualTest` to the `com.baeldung.file` package. The class tests various ways of clearing data from an existing file without deleting the file itself. It uses different techniques such as `PrintWriter`, `FileWriter`, `FileOutputStream`, `FileUtils`, `Files.newBufferedWriter`, `FileChannel`, and `com.google.common.io.Files`. The class also uses a setup method to create the file and write some default text to it before and after each test. The file `fileexample.txt` is also added to the resources directory with some default text.","""Add tests to verify multiple methods of clearing file contents without deleting the file in FilesClearDataManualTest.java"""
"diff --git a/lib.profiler/native/src-jdk15/common_functions.c b/lib.profiler/native/src-jdk15/common_functions.c
index f83753452..c5de7f5d7 100644
--- a/lib.profiler/native/src-jdk15/common_functions.c
+++ b/lib.profiler/native/src-jdk15/common_functions.c
@@ -135,7 +135,7 @@ JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *jvm, void *reserved) {
 
         initializeJVMTI(jvm);
     
-        fprintf(stderr, ""Profiler Agent: JNI OnLoad Initialized succesfully\n"");
+        fprintf(stderr, ""Profiler Agent: JNI OnLoad Initialized successfully\n"");
     }
     return JNI_VERSION_1_2;
 }
@@ -168,7 +168,7 @@ JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved)
         }
     } // in case of calibration, the arguments are just empty, this is OK
 
-    fprintf(stderr, ""Profiler Agent: Initialized succesfully\n"");
+    fprintf(stderr, ""Profiler Agent: Initialized successfully\n"");
     return 0;
 }
 ",Automated merge with http : / / hg . netbeans . org / jet - main,"""Fix typos in profiler agent initialization messages""","""Fixed typos in profiler agent initialization messages.""","""Fixed spelling error in Profiler Agent initialization messages""",Fix typos in initialization messages for JNI and Agent OnLoad in common_functions.c.
"diff --git a/src/com/android/launcher3/InvariantDeviceProfile.java b/src/com/android/launcher3/InvariantDeviceProfile.java
index a91181d5e..56c0192f6 100644
--- a/src/com/android/launcher3/InvariantDeviceProfile.java
+++ b/src/com/android/launcher3/InvariantDeviceProfile.java
@@ -73,12 +73,12 @@ public class InvariantDeviceProfile {
     /**
      * Number of icons inside the hotseat area.
      */
-    int numHotseatIcons;
+    public int numHotseatIcons;
     float hotseatIconSize;
     int defaultLayoutId;
 
     // Derived invariant properties
-    int hotseatAllAppsRank;
+    public int hotseatAllAppsRank;
 
     DeviceProfile landscapeProfile;
     DeviceProfile portraitProfile;
diff --git a/src/com/android/launcher3/LauncherBackupAgentHelper.java b/src/com/android/launcher3/LauncherBackupAgentHelper.java
index 0773bf27c..bf9c66822 100644
--- a/src/com/android/launcher3/LauncherBackupAgentHelper.java
+++ b/src/com/android/launcher3/LauncherBackupAgentHelper.java
@@ -24,7 +24,7 @@ import android.database.Cursor;
 import android.os.ParcelFileDescriptor;
 import android.util.Log;
 
-import com.android.launcher3.model.MigrateFromRestoreTask;
+import com.android.launcher3.model.GridSizeMigrationTask;
 
 import java.io.IOException;
 
@@ -101,8 +101,9 @@ public class LauncherBackupAgentHelper extends BackupAgentHelper {
                         LauncherSettings.Settings.METHOD_UPDATE_FOLDER_ITEMS_RANK);
             }
 
-            if (MigrateFromRestoreTask.ENABLED && mHelper.shouldAttemptWorkspaceMigration()) {
-                MigrateFromRestoreTask.markForMigration(getApplicationContext(),
+            // TODO: Update this logic to handle grid difference of 2. as well as hotseat difference
+            if (GridSizeMigrationTask.ENABLED && mHelper.shouldAttemptWorkspaceMigration()) {
+                GridSizeMigrationTask.markForMigration(getApplicationContext(),
                         (int) mHelper.migrationCompatibleProfileData.desktopCols,
                         (int) mHelper.migrationCompatibleProfileData.desktopRows,
                         mHelper.widgetSizes);
diff --git a/src/com/android/launcher3/LauncherBackupHelper.java b/src/com/android/launcher3/LauncherBackupHelper.java
index 509fbf8b8..4ebead56a 100644
--- a/src/com/android/launcher3/LauncherBackupHelper.java
+++ b/src/com/android/launcher3/LauncherBackupHelper.java
@@ -52,7 +52,7 @@ import com.android.launcher3.backup.BackupProtos.Screen;
 import com.android.launcher3.backup.BackupProtos.Widget;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
-import com.android.launcher3.model.MigrateFromRestoreTask;
+import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.Thunk;
 import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
 import com.google.protobuf.nano.MessageNano;
@@ -315,7 +315,7 @@ public class LauncherBackupHelper implements BackupHelper {
             return true;
         }
 
-        if (MigrateFromRestoreTask.ENABLED &&
+        if (GridSizeMigrationTask.ENABLED &&
                 (oldProfile.desktopCols - currentProfile.desktopCols <= 1) &&
                 (oldProfile.desktopRows - currentProfile.desktopRows <= 1)) {
             // Allow desktop migration when row and/or column count contracts by 1.
diff --git a/src/com/android/launcher3/LauncherModel.java b/src/com/android/launcher3/LauncherModel.java
index fe0abc024..0eb1a90b0 100644
--- a/src/com/android/launcher3/LauncherModel.java
+++ b/src/com/android/launcher3/LauncherModel.java
@@ -57,7 +57,7 @@ import com.android.launcher3.compat.PackageInstallerCompat.PackageInstallInfo;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.ProviderConfig;
-import com.android.launcher3.model.MigrateFromRestoreTask;
+import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.model.WidgetsModel;
 import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.CursorIconInfo;
@@ -1651,14 +1651,14 @@ public class LauncherModel extends BroadcastReceiver
             int countX = profile.numColumns;
             int countY = profile.numRows;
 
-            if (MigrateFromRestoreTask.ENABLED && MigrateFromRestoreTask.shouldRunTask(mContext)) {
+            if (GridSizeMigrationTask.ENABLED && GridSizeMigrationTask.shouldRunTask(mContext)) {
                 long migrationStartTime = System.currentTimeMillis();
                 Log.v(TAG, ""Starting workspace migration after restore"");
                 try {
-                    MigrateFromRestoreTask task = new MigrateFromRestoreTask(mContext);
+                    GridSizeMigrationTask task = new GridSizeMigrationTask(mContext);
                     // Clear the flags before starting the task, so that we do not run the task
                     // again, in case there was an uncaught error.
-                    MigrateFromRestoreTask.clearFlags(mContext);
+                    GridSizeMigrationTask.clearFlags(mContext);
                     task.execute();
                 } catch (Exception e) {
                     Log.e(TAG, ""Error during grid migration"", e);
@@ -1668,6 +1668,8 @@ public class LauncherModel extends BroadcastReceiver
                 }
                 Log.v(TAG, ""Workspace migration completed in ""
                         + (System.currentTimeMillis() - migrationStartTime));
+
+                GridSizeMigrationTask.saveCurrentConfig(mContext);
             }
 
             if ((mFlags & LOADER_FLAG_CLEAR_WORKSPACE) != 0) {
diff --git a/src/com/android/launcher3/model/MigrateFromRestoreTask.java b/src/com/android/launcher3/model/GridSizeMigrationTask.java
similarity index 78%
rename from src/com/android/launcher3/model/MigrateFromRestoreTask.java
rename to src/com/android/launcher3/model/GridSizeMigrationTask.java
index 9cabc8d41..08c3dc0bb 100644
--- a/src/com/android/launcher3/model/MigrateFromRestoreTask.java
+++ b/src/com/android/launcher3/model/GridSizeMigrationTask.java
@@ -24,29 +24,33 @@ import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.LongArrayMap;
-import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Locale;
 
 /**
  * This class takes care of shrinking the workspace (by maximum of one row and one column), as a
- * result of restoring from a larger device.
+ * result of restoring from a larger device or device density change.
  */
-public class MigrateFromRestoreTask {
+public class GridSizeMigrationTask {
 
-    public static boolean ENABLED = false;
+    public static boolean ENABLED = Utilities.isNycOrAbove();
 
-    private static final String TAG = ""MigrateFromRestoreTask"";
+    private static final String TAG = ""GridSizeMigrationTask"";
     private static final boolean DEBUG = true;
 
-    private static final String KEY_MIGRATION_SOURCE_SIZE = ""migration_restore_src_size"";
+    private static final String KEY_MIGRATION_SRC_WORKSPACE_SIZE = ""migration_src_workspace_size"";
+    private static final String KEY_MIGRATION_SRC_HOTSEAT_SIZE = ""migration_src_hotseat_size"";
+
+    // Set of entries indicating minimum size a widget can be resized to. This is used during
+    // restore in case the widget has not been installed yet.
     private static final String KEY_MIGRATION_WIDGET_MINSIZE = ""migration_widget_min_size"";
 
     // These are carefully selected weights for various item types (Math.random?), to allow for
-    // the lease absurd migration experience.
+    // the least absurd migration experience.
     private static final float WT_SHORTCUT = 1;
     private static final float WT_APPLICATION = 0.8f;
     private static final float WT_WIDGET_MIN = 2;
@@ -65,17 +69,37 @@ public class MigrateFromRestoreTask {
     private ArrayList<DbEntry> mCarryOver;
 
     private final int mSrcX, mSrcY;
-    @Thunk final int mTrgX, mTrgY;
+    private final int mTrgX, mTrgY;
     private final boolean mShouldRemoveX, mShouldRemoveY;
 
-    public MigrateFromRestoreTask(Context context) {
+    private final int mSrcHotseatSize;
+    private final int mSrcAllAppsRank;
+
+    /**
+     * TODO: Create a generic constructor which can be unit tested.
+     */
+    public GridSizeMigrationTask(Context context) {
         mContext = context;
 
+
+        mIdp = LauncherAppState.getInstance().getInvariantDeviceProfile();
+        mTrgX = mIdp.numColumns;
+        mTrgY = mIdp.numRows;
+
         SharedPreferences prefs = Utilities.getPrefs(context);
-        Point sourceSize = parsePoint(prefs.getString(KEY_MIGRATION_SOURCE_SIZE, """"));
+        Point sourceSize = parsePoint(
+                prefs.getString(KEY_MIGRATION_SRC_WORKSPACE_SIZE, getPointString(mTrgX, mTrgY)));
         mSrcX = sourceSize.x;
         mSrcY = sourceSize.y;
 
+        // Hotseat
+        Point hotseatSize = parsePoint(
+                prefs.getString(KEY_MIGRATION_SRC_HOTSEAT_SIZE,
+                        getPointString(mIdp.numHotseatIcons, mIdp.hotseatAllAppsRank)));
+        mSrcHotseatSize = hotseatSize.x;
+        mSrcAllAppsRank = hotseatSize.y;
+
+        // Widget sizes
         mWidgetMinSize = new HashMap<String, Point>();
         for (String s : prefs.getStringSet(KEY_MIGRATION_WIDGET_MINSIZE,
                 Collections.<String>emptySet())) {
@@ -83,16 +107,12 @@ public class MigrateFromRestoreTask {
             mWidgetMinSize.put(parts[0], parsePoint(parts[1]));
         }
 
-        mIdp = LauncherAppState.getInstance().getInvariantDeviceProfile();
-        mTrgX = mIdp.numColumns;
-        mTrgY = mIdp.numRows;
         mShouldRemoveX = mTrgX < mSrcX;
         mShouldRemoveY = mTrgY < mSrcY;
     }
 
     public void execute() throws Exception {
         mEntryToRemove = new ArrayList<>();
-        mCarryOver = new ArrayList<>();
         mUpdateOperations = new ArrayList<>();
 
         // Initialize list of valid packages. This contain all the packages which are already on
@@ -107,6 +127,97 @@ public class MigrateFromRestoreTask {
         mValidPackages.addAll(PackageInstallerCompat.getInstance(mContext)
                 .updateAndGetActiveSessionCache().keySet());
 
+        // Migrate hotseat
+        if (mSrcHotseatSize != mIdp.numHotseatIcons || mSrcAllAppsRank != mIdp.hotseatAllAppsRank) {
+            migrateHotseat();
+        }
+
+        if (mShouldRemoveX || mShouldRemoveY) {
+            if ((mSrcY - mTrgX) > 1 || (mSrcY - mSrcY) > 1) {
+                // TODO: support this.
+                throw new Exception(""The universe is too large for migration"");
+            } else {
+                migrateWorkspace();
+            }
+        }
+
+        // Update items
+        if (!mUpdateOperations.isEmpty()) {
+            mContext.getContentResolver().applyBatch(LauncherProvider.AUTHORITY, mUpdateOperations);
+        }
+
+        if (!mEntryToRemove.isEmpty()) {
+            if (DEBUG) {
+                Log.d(TAG, ""Removing items: "" + TextUtils.join("", "", mEntryToRemove));
+            }
+            mContext.getContentResolver().delete(LauncherSettings.Favorites.CONTENT_URI,
+                    Utilities.createDbSelectionQuery(
+                            LauncherSettings.Favorites._ID, mEntryToRemove), null);
+        }
+
+        if (!mUpdateOperations.isEmpty() || !mEntryToRemove.isEmpty()) {
+            // Make sure we haven't removed everything.
+            final Cursor c = mContext.getContentResolver().query(
+                    LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
+            boolean hasData = c.moveToNext();
+            c.close();
+            if (!hasData) {
+                throw new Exception(""Removed every thing during grid resize"");
+            }
+        }
+    }
+
+    /**
+     * To migrate hotseat, we load all the entries in order (LTR or RTL) and arrange them
+     * in the order in the new hotseat while keeping an empty space for all-apps. If the number of
+     * entries is more than what can fit in the new hotseat, we drop the entries with least weight.
+     * For weight calculation {@see #WT_SHORTCUT}, {@see #WT_APPLICATION}
+     * & {@see #WT_FOLDER_FACTOR}.
+     */
+    private void migrateHotseat() {
+        ArrayList<DbEntry> items = loadHotseatEntries();
+
+        int requiredCount = mIdp.numHotseatIcons - 1;
+
+        while (items.size() > requiredCount) {
+            // Pick the center item by default.
+            DbEntry toRemove = items.get(items.size() / 2);
+
+            // Find the item with least weight.
+            for (DbEntry entry : items) {
+                if (entry.weight < toRemove.weight) {
+                    toRemove = entry;
+                }
+            }
+
+            mEntryToRemove.add(toRemove.id);
+            items.remove(toRemove);
+        }
+
+        // Update screen IDS
+        int newScreenId = 0;
+        for (DbEntry entry : items) {
+            if (entry.screenId != newScreenId) {
+                entry.screenId = newScreenId;
+
+                // These values does not affect the item position, but we should set them
+                // to something other than -1.
+                entry.cellX = newScreenId;
+                entry.cellY = 0;
+
+                update(entry);
+            }
+
+            newScreenId++;
+            if (newScreenId == mIdp.hotseatAllAppsRank) {
+                newScreenId++;
+            }
+        }
+    }
+
+    private void migrateWorkspace() throws Exception {
+        mCarryOver = new ArrayList<>();
+
         ArrayList<Long> allScreens = LauncherModel.loadWorkspaceScreensDb(mContext);
         if (allScreens.isEmpty()) {
             throw new Exception(""Unable to get workspace screens"");
@@ -157,27 +268,6 @@ public class MigrateFromRestoreTask {
             LauncherAppState.getInstance().getModel()
                 .updateWorkspaceScreenOrder(mContext, allScreens);
         }
-
-        // Update items
-        mContext.getContentResolver().applyBatch(LauncherProvider.AUTHORITY, mUpdateOperations);
-
-        if (!mEntryToRemove.isEmpty()) {
-            if (DEBUG) {
-                Log.d(TAG, ""Removing items: "" + TextUtils.join("", "", mEntryToRemove));
-            }
-            mContext.getContentResolver().delete(LauncherSettings.Favorites.CONTENT_URI,
-                    Utilities.createDbSelectionQuery(
-                            LauncherSettings.Favorites._ID, mEntryToRemove), null);
-        }
-
-        // Make sure we haven't removed everything.
-        final Cursor c = mContext.getContentResolver().query(
-                LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
-        boolean hasData = c.moveToNext();
-        c.close();
-        if (!hasData) {
-            throw new Exception(""Removed every thing during grid resize"");
-        }
     }
 
     /**
@@ -191,7 +281,7 @@ public class MigrateFromRestoreTask {
      *      (otherwise they are placed on a new screen).
      */
     private void migrateScreen(long screenId) {
-        ArrayList<DbEntry> items = loadEntries(screenId);
+        ArrayList<DbEntry> items = loadWorkspaceEntries(screenId);
 
         int removedCol = Integer.MAX_VALUE;
         int removedRow = Integer.MAX_VALUE;
@@ -329,7 +419,7 @@ public class MigrateFromRestoreTask {
         return finalItems;
     }
 
-    @Thunk void markCells(boolean[][] occupied, DbEntry item, boolean val) {
+    private void markCells(boolean[][] occupied, DbEntry item, boolean val) {
         for (int i = item.cellX; i < (item.cellX + item.spanX); i++) {
             for (int j = item.cellY; j < (item.cellY + item.spanY); j++) {
                 occupied[i][j] = val;
@@ -337,7 +427,7 @@ public class MigrateFromRestoreTask {
         }
     }
 
-    @Thunk boolean isVacant(boolean[][] occupied, int x, int y, int w, int h) {
+    private boolean isVacant(boolean[][] occupied, int x, int y, int w, int h) {
         if (x + w > mTrgX) return false;
         if (y + h > mTrgY) return false;
 
@@ -545,10 +635,71 @@ public class MigrateFromRestoreTask {
         }
     }
 
+    private ArrayList<DbEntry> loadHotseatEntries() {
+        Cursor c =  mContext.getContentResolver().query(LauncherSettings.Favorites.CONTENT_URI,
+                new String[]{
+                        Favorites._ID,                  // 0
+                        Favorites.ITEM_TYPE,            // 1
+                        Favorites.INTENT,               // 2
+                        Favorites.SCREEN},              // 3
+                Favorites.CONTAINER + "" = "" + Favorites.CONTAINER_HOTSEAT, null, null, null);
+
+        final int indexId = c.getColumnIndexOrThrow(Favorites._ID);
+        final int indexItemType = c.getColumnIndexOrThrow(Favorites.ITEM_TYPE);
+        final int indexIntent = c.getColumnIndexOrThrow(Favorites.INTENT);
+        final int indexScreen = c.getColumnIndexOrThrow(Favorites.SCREEN);
+
+        ArrayList<DbEntry> entries = new ArrayList<>();
+        while (c.moveToNext()) {
+            DbEntry entry = new DbEntry();
+            entry.id = c.getLong(indexId);
+            entry.itemType = c.getInt(indexItemType);
+            entry.screenId = c.getLong(indexScreen);
+
+            if (entry.screenId >= mSrcHotseatSize) {
+                mEntryToRemove.add(entry.id);
+                continue;
+            }
+
+            try {
+                // calculate weight
+                switch (entry.itemType) {
+                    case Favorites.ITEM_TYPE_SHORTCUT:
+                    case Favorites.ITEM_TYPE_APPLICATION: {
+                        verifyIntent(c.getString(indexIntent));
+                        entry.weight = entry.itemType == Favorites.ITEM_TYPE_SHORTCUT
+                                ? WT_SHORTCUT : WT_APPLICATION;
+                        break;
+                    }
+                    case Favorites.ITEM_TYPE_FOLDER: {
+                        int total = getFolderItemsCount(entry.id);
+                        if (total == 0) {
+                            throw new Exception(""Folder is empty"");
+                        }
+                        entry.weight = WT_FOLDER_FACTOR * total;
+                        break;
+                    }
+                    default:
+                        throw new Exception(""Invalid item type"");
+                }
+            } catch (Exception e) {
+                if (DEBUG) {
+      ",Extending the grid migration logic to handle density changes .,"""Refactor workspace migration to support grid size changes and hotseat migration""","""Rename MigrateFromRestoreTask to GridSizeMigrationTask and update related code to handle grid size migration after restore""","""Update MigrateFromRestoreTask to GridSizeMigrationTask and refactor code""

Explanation: The commit message should summarize the changes made in the code. In this case, the changes include renaming MigrateFromRestoreTask to GridSizeMigrationTask and refactoring the code to handle grid difference of 2 and hotseat difference. Additionally, there are changes in LauncherBackupAgentHelper, LauncherBackupHelper, and LauncherModel to use the new GridSizeMigrationTask instead of the old MigrateFromRestoreTask.",Refactor migration logic and rename MigrateFromRestoreTask to GridSizeMigrationTask; add hotseat migration functionality.
"diff --git a/src/java/org/jivesoftware/messenger/muc/spi/MultiUserChatServerImpl.java b/src/java/org/jivesoftware/messenger/muc/spi/MultiUserChatServerImpl.java
index abb0e5127..a06c39165 100644
--- a/src/java/org/jivesoftware/messenger/muc/spi/MultiUserChatServerImpl.java
+++ b/src/java/org/jivesoftware/messenger/muc/spi/MultiUserChatServerImpl.java
@@ -268,7 +268,7 @@ public class MultiUserChatServerImpl extends BasicModule implements MultiUserCha
 
     public MUCRoom getChatRoom(String roomName, JID userjid) throws UnauthorizedException {
         MUCRoom room = null;
-        synchronized (rooms) {
+        synchronized (roomName.intern()) {
             room = rooms.get(roomName.toLowerCase());
             if (room == null) {
                 room = new MUCRoomImpl(this, roomName, router);
@@ -347,7 +347,7 @@ public class MultiUserChatServerImpl extends BasicModule implements MultiUserCha
             throw new IllegalStateException(""Not initialized"");
         }
         MUCUser user = null;
-        synchronized (users) {
+        synchronized (userjid.toString().intern()) {
             user = users.get(userjid);
     ",Modified syncrhonization blocks to use finer - grained locks . . git - svn - id : http : / / svn . igniterealtime . org / svn / repos / messenger / trunk @ 683 b35dd754 - fafc - 0310 - a699 - 88a17e54d16e,"""Improve synchronization in MultiUserChatServerImpl by using interned strings as locks""","""Optimize synchronization in MultiUserChatServerImpl by using string interning instead of raw object locks.""","""Changed synchronization object in MultiUserChatServerImpl.java

 In method 'getChatRoom(String roomName, JID userjid)', synchronized block changed from using 'rooms' object to 'roomName.intern()'.

 In method 'removeUser(JID userjid)', synchronized block changed from using 'users' object to 'userjid.toString().intern()'.""",Use roomName.intern() and userjid.toString().intern() for synchronization instead of rooms and users.
"diff --git a/src/java/org/apache/cassandra/db/compaction/CompactionIterator.java b/src/java/org/apache/cassandra/db/compaction/CompactionIterator.java
index 78bdfb019b..ec6a4d464c 100644
--- a/src/java/org/apache/cassandra/db/compaction/CompactionIterator.java
+++ b/src/java/org/apache/cassandra/db/compaction/CompactionIterator.java
@@ -99,6 +99,9 @@ public class CompactionIterator extends CompactionInfo.Holder implements Unfilte
             bytes += scanner.getLengthInBytes();
         this.totalBytes = bytes;
         this.mergeCounters = new long[scanners.size()];
+        // note that we leak `this` from the constructor when calling beginCompaction below, this means we have to get the sstables before
+        // calling that to avoid a NPE.
+        sstables = scanners.stream().map(ISSTableScanner::getBackingSSTables).flatMap(Collection::stream).collect(ImmutableSet.toImmutableSet());
         this.activeCompactions = activeCompactions == null ? ActiveCompactionsTracker.NOOP : activeCompactions;
         this.activeCompactions.beginCompaction(this); // note that CompactionTask also calls this, but CT only creates CompactionIterator with a NOOP ActiveCompactions
 
@@ -109,7 +112,6 @@ public class CompactionIterator extends CompactionInfo.Holder implements Unfilte
         merged = Transformation.apply(merged, new Purger(controller, nowInSec));
         merged = DuplicateRowChecker.duringCompaction(merged, type);
         compacted = Transformation.apply(merged, new AbortableUnfilteredPartitionTransformation(this));
-        sstables = scanners.stream().map(ISSTableScanner::getBackingSSTables).flatMap(Collection::stream).collect(ImmutableSet.toImmutableSet());
     }
 
     public TableMetadata metadata()",Initialize sstables earlier to avoid NPE in CompactionIterator .,"""Move sstable collection to before beginCompaction in CompactionIterator constructor""

This commit message accurately reflects the change made in the code, which is moving the collection of SSTables to before the `beginCompaction` call in the `CompactionIterator` constructor.","""Add sstable collection in constructor and remove duplicate collection in beginCompaction method""","""Fix potential NullPointerException by initializing sstables before calling beginCompaction in CompactionIterator constructor""

Explanation: The added lines in the constructor initialize the 'sstables' variable before calling 'beginCompaction' to avoid a potential NullPointerException. The commented line that was removed was responsible for initializing 'sstables' after 'beginCompaction' was called, which could lead to a NullPointerException if 'sstables' was accessed within 'beginCompaction'.",Move sstables initialization before beginCompaction to prevent potential NPE in CompactionIterator constructor.
"diff --git a/osgi-bundles/bundles/analytics/src/main/java/com/ning/billing/osgi/bundles/analytics/dao/BusinessDBIProvider.java b/osgi-bundles/bundles/analytics/src/main/java/com/ning/billing/osgi/bundles/analytics/dao/BusinessDBIProvider.java
index 09e89c98e8..ca2d73a6dc 100644
--- a/osgi-bundles/bundles/analytics/src/main/java/com/ning/billing/osgi/bundles/analytics/dao/BusinessDBIProvider.java
+++ b/osgi-bundles/bundles/analytics/src/main/java/com/ning/billing/osgi/bundles/analytics/dao/BusinessDBIProvider.java
@@ -25,7 +25,21 @@ import org.skife.jdbi.v2.sqlobject.stringtemplate.StringTemplate3StatementLocato
 import org.skife.jdbi.v2.tweak.Argument;
 
 import com.ning.billing.commons.jdbi.mapper.LowerToCamelBeanMapperFactory;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessAccountFieldModelDao;
 import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessAccountModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessAccountTagModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceAdjustmentModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceFieldModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceItemAdjustmentModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceItemCreditModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceItemModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoicePaymentChargebackModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoicePaymentFieldModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoicePaymentRefundModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoicePaymentTagModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessInvoiceTagModelDao;
+import com.ning.billing.osgi.bundles.analytics.dao.model.BusinessOverdueStatusModelDao;
 
 import com.google.common.base.CaseFormat;
 
@@ -36,7 +50,24 @@ public class BusinessDBIProvider {
     public static DBI get(final DataSource dataSource) {
         final DBI dbi = new DBI(dataSource);
 
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessAccountFieldModelDao.class));
         dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessAccountModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessAccountTagModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceAdjustmentModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceFieldModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceItemAdjustmentModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceItemCreditModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceItemModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoicePaymentChargebackModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoicePaymentFieldModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoicePaymentDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoicePaymentRefundModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoicePaymentTagModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessInvoiceTagModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessOverdueStatusModelDao.class));
+        dbi.registerMapper(new LowerToCamelBeanMapperFactory(BusinessSubscriptionTransitionDao.class));
+
         dbi.setStatementLocator(new AnalyticsStatementLocator());
 
         return dbi;",add missing mappers .,"""Added mappers for various business DAO models in BusinessDBIProvider""

This commit message is short and to the point, indicating that the commit added mappers for various business DAO models in the BusinessDBIProvider class.","""Added support for new business models in BusinessDBIProvider""

However, a more detailed and descriptive commit message would be:

""Added support for new business models (BusinessAccountFieldModelDao, BusinessAccountTagModelDao, etc.) in BusinessDBIProvider""

This commit message clearly conveys the changes made in the commit and provides context for future developers who may need to understand the changes.","Added new model DAOs to BusinessDBIProvider

The following lines were added to the file BusinessDBIProvider.java:

* Import statements for new model DAO classes
* DBI registration for new model DAO classes

Here is a list of the new model DAOs added:

* BusinessAccountFieldModelDao
* BusinessAccountTagModelDao
* BusinessInvoiceAdjustmentModelDao
* BusinessInvoiceFieldModelDao
* BusinessInvoiceItemAdjustmentModelDao
* BusinessInvoiceItemCreditModelDao
* BusinessInvoiceItemModelDao
* BusinessInvoiceModelDao
* BusinessInvoicePaymentChargebackModelDao
* BusinessInvoicePaymentFieldModelDao
* BusinessInvoicePaymentRefundModelDao
* BusinessInvoicePaymentTagModelDao
* BusinessInvoiceTagModelDao
* BusinessOverdueStatusModelDao

These new DAOs are registered with the DBI (Database Interface) object, which allows them to be used for database operations.","""Register new DAOs in BusinessDBIProvider for better entity management and database mapping."""
"diff --git a/src/edu/stanford/nlp/trees/TreebankTagUpdater.java b/src/edu/stanford/nlp/trees/TreebankTagUpdater.java
index 3c1c81ffe..f67338161 100644
--- a/src/edu/stanford/nlp/trees/TreebankTagUpdater.java
+++ b/src/edu/stanford/nlp/trees/TreebankTagUpdater.java
@@ -2,7 +2,9 @@ package edu.stanford.nlp.trees;
 
 import edu.stanford.nlp.ling.*;
 import edu.stanford.nlp.tagger.maxent.*;
+import edu.stanford.nlp.util.StringUtils;
 
+import java.io.*;
 import java.util.*;
 import java.util.stream.*;
 
@@ -42,4 +44,28 @@ public class TreebankTagUpdater {
     }
   }
 
+  /** Read in a tree file, print out trees with updated tags **/
+  public static void main(String[] args) throws IOException {
+    // load properties
+    Properties props = StringUtils.argsToProperties(args);
+    String taggerPath = props.getProperty(""tagger"");
+    String treeFilePath = props.getProperty(""treeFile"");
+    // build tag updater
+    TreebankTagUpdater updater = new TreebankTagUpdater(taggerPath);
+    // read in trees, update, and print out updated tree
+    // set up tree reader
+    TreeFactory tf = new LabeledScoredTreeFactory();
+    Reader r = new BufferedReader(new InputStreamReader(new FileInputStream(treeFilePath), ""UTF-8""));
+    TreeReader tr = new PennTreeReader(r, tf);
+    Tree t = tr.readTree();
+    while (t != null) {
+      // update tree
+      updater.tagTree(t);
+      // print new updated tree
+      System.out.println(t);
+      // move on to next tree
+      t = tr.readTree();
+    }
+  }
+
 }",add main ( ) method to tree tag updater,"""Added main method to TreebankTagUpdater for reading and updating tree files""",Added main method to TreebankTagUpdater for reading and updating trees from a file.,"""Added main method to read in a tree file, update tags using a specified tagger, and print out updated trees""","Added main method to TreebankTagUpdater for reading tree files, updating tags using a POS tagger, and printing updated trees."
